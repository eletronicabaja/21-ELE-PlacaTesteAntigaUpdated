
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a690  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adf0  0800adf0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800adf0  0800adf0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adf0  0800adf0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adf0  0800adf0  0001adf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800adf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe0  20000088  0800ae80  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  0800ae80  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b351  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bae  00000000  00000000  0003b402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0003efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00040688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b277  00000000  00000000  00041bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd65  00000000  00000000  0005ce67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000959bd  00000000  00000000  00079bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f589  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064c0  00000000  00000000  0010f5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a788 	.word	0x0800a788

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800a788 	.word	0x0800a788

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_frsub>:
 8000aa4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa8:	e002      	b.n	8000ab0 <__addsf3>
 8000aaa:	bf00      	nop

08000aac <__aeabi_fsub>:
 8000aac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab0 <__addsf3>:
 8000ab0:	0042      	lsls	r2, r0, #1
 8000ab2:	bf1f      	itttt	ne
 8000ab4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab8:	ea92 0f03 	teqne	r2, r3
 8000abc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac4:	d06a      	beq.n	8000b9c <__addsf3+0xec>
 8000ac6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ace:	bfc1      	itttt	gt
 8000ad0:	18d2      	addgt	r2, r2, r3
 8000ad2:	4041      	eorgt	r1, r0
 8000ad4:	4048      	eorgt	r0, r1
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	bfb8      	it	lt
 8000ada:	425b      	neglt	r3, r3
 8000adc:	2b19      	cmp	r3, #25
 8000ade:	bf88      	it	hi
 8000ae0:	4770      	bxhi	lr
 8000ae2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ae6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4249      	negne	r1, r1
 8000b02:	ea92 0f03 	teq	r2, r3
 8000b06:	d03f      	beq.n	8000b88 <__addsf3+0xd8>
 8000b08:	f1a2 0201 	sub.w	r2, r2, #1
 8000b0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b10:	eb10 000c 	adds.w	r0, r0, ip
 8000b14:	f1c3 0320 	rsb	r3, r3, #32
 8000b18:	fa01 f103 	lsl.w	r1, r1, r3
 8000b1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b20:	d502      	bpl.n	8000b28 <__addsf3+0x78>
 8000b22:	4249      	negs	r1, r1
 8000b24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b2c:	d313      	bcc.n	8000b56 <__addsf3+0xa6>
 8000b2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b32:	d306      	bcc.n	8000b42 <__addsf3+0x92>
 8000b34:	0840      	lsrs	r0, r0, #1
 8000b36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3a:	f102 0201 	add.w	r2, r2, #1
 8000b3e:	2afe      	cmp	r2, #254	; 0xfe
 8000b40:	d251      	bcs.n	8000be6 <__addsf3+0x136>
 8000b42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4a:	bf08      	it	eq
 8000b4c:	f020 0001 	biceq.w	r0, r0, #1
 8000b50:	ea40 0003 	orr.w	r0, r0, r3
 8000b54:	4770      	bx	lr
 8000b56:	0049      	lsls	r1, r1, #1
 8000b58:	eb40 0000 	adc.w	r0, r0, r0
 8000b5c:	3a01      	subs	r2, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b64:	d2ed      	bcs.n	8000b42 <__addsf3+0x92>
 8000b66:	fab0 fc80 	clz	ip, r0
 8000b6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b76:	bfaa      	itet	ge
 8000b78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b7c:	4252      	neglt	r2, r2
 8000b7e:	4318      	orrge	r0, r3
 8000b80:	bfbc      	itt	lt
 8000b82:	40d0      	lsrlt	r0, r2
 8000b84:	4318      	orrlt	r0, r3
 8000b86:	4770      	bx	lr
 8000b88:	f092 0f00 	teq	r2, #0
 8000b8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b90:	bf06      	itte	eq
 8000b92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b96:	3201      	addeq	r2, #1
 8000b98:	3b01      	subne	r3, #1
 8000b9a:	e7b5      	b.n	8000b08 <__addsf3+0x58>
 8000b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba4:	bf18      	it	ne
 8000ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000baa:	d021      	beq.n	8000bf0 <__addsf3+0x140>
 8000bac:	ea92 0f03 	teq	r2, r3
 8000bb0:	d004      	beq.n	8000bbc <__addsf3+0x10c>
 8000bb2:	f092 0f00 	teq	r2, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	4608      	moveq	r0, r1
 8000bba:	4770      	bx	lr
 8000bbc:	ea90 0f01 	teq	r0, r1
 8000bc0:	bf1c      	itt	ne
 8000bc2:	2000      	movne	r0, #0
 8000bc4:	4770      	bxne	lr
 8000bc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bca:	d104      	bne.n	8000bd6 <__addsf3+0x126>
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	4770      	bx	lr
 8000bd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bda:	bf3c      	itt	cc
 8000bdc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bxcc	lr
 8000be2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	4770      	bx	lr
 8000bf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf4:	bf16      	itet	ne
 8000bf6:	4608      	movne	r0, r1
 8000bf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bfc:	4601      	movne	r1, r0
 8000bfe:	0242      	lsls	r2, r0, #9
 8000c00:	bf06      	itte	eq
 8000c02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c06:	ea90 0f01 	teqeq	r0, r1
 8000c0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_ui2f>:
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e004      	b.n	8000c20 <__aeabi_i2f+0x8>
 8000c16:	bf00      	nop

08000c18 <__aeabi_i2f>:
 8000c18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	bf48      	it	mi
 8000c1e:	4240      	negmi	r0, r0
 8000c20:	ea5f 0c00 	movs.w	ip, r0
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f04f 0000 	mov.w	r0, #0
 8000c32:	e01c      	b.n	8000c6e <__aeabi_l2f+0x2a>

08000c34 <__aeabi_ul2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e00a      	b.n	8000c58 <__aeabi_l2f+0x14>
 8000c42:	bf00      	nop

08000c44 <__aeabi_l2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c50:	d502      	bpl.n	8000c58 <__aeabi_l2f+0x14>
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	ea5f 0c01 	movs.w	ip, r1
 8000c5c:	bf02      	ittt	eq
 8000c5e:	4684      	moveq	ip, r0
 8000c60:	4601      	moveq	r1, r0
 8000c62:	2000      	moveq	r0, #0
 8000c64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c68:	bf08      	it	eq
 8000c6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c72:	fabc f28c 	clz	r2, ip
 8000c76:	3a08      	subs	r2, #8
 8000c78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c7c:	db10      	blt.n	8000ca0 <__aeabi_l2f+0x5c>
 8000c7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c82:	4463      	add	r3, ip
 8000c84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c90:	fa20 f202 	lsr.w	r2, r0, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	f020 0001 	biceq.w	r0, r0, #1
 8000c9e:	4770      	bx	lr
 8000ca0:	f102 0220 	add.w	r2, r2, #32
 8000ca4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_f2iz>:
 8000cc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cc8:	d30f      	bcc.n	8000cea <__aeabi_f2iz+0x2a>
 8000cca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cd2:	d90d      	bls.n	8000cf0 <__aeabi_f2iz+0x30>
 8000cd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cdc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ce0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce4:	bf18      	it	ne
 8000ce6:	4240      	negne	r0, r0
 8000ce8:	4770      	bx	lr
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	4770      	bx	lr
 8000cf0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cf4:	d101      	bne.n	8000cfa <__aeabi_f2iz+0x3a>
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	d105      	bne.n	8000d06 <__aeabi_f2iz+0x46>
 8000cfa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000cfe:	bf08      	it	eq
 8000d00:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	4770      	bx	lr

08000d0c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d16:	4802      	ldr	r0, [pc, #8]	; (8000d20 <SELECT+0x14>)
 8000d18:	f002 ff64 	bl	8003be4 <HAL_GPIO_WritePin>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010800 	.word	0x40010800

08000d24 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DESELECT+0x14>)
 8000d30:	f002 ff58 	bl	8003be4 <HAL_GPIO_WritePin>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010800 	.word	0x40010800

08000d3c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d46:	bf00      	nop
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <SPI_TxByte+0x30>)
 8000d4a:	f004 f9e2 	bl	8005112 <HAL_SPI_GetState>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d1f9      	bne.n	8000d48 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000d54:	1df9      	adds	r1, r7, #7
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <SPI_TxByte+0x30>)
 8000d5e:	f003 fe0b 	bl	8004978 <HAL_SPI_Transmit>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000b08 	.word	0x20000b08

08000d70 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d76:	23ff      	movs	r3, #255	; 0xff
 8000d78:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d7e:	bf00      	nop
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <SPI_RxByte+0x38>)
 8000d82:	f004 f9c6 	bl	8005112 <HAL_SPI_GetState>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d1f9      	bne.n	8000d80 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d8c:	1dba      	adds	r2, r7, #6
 8000d8e:	1df9      	adds	r1, r7, #7
 8000d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <SPI_RxByte+0x38>)
 8000d9a:	f003 ff29 	bl	8004bf0 <HAL_SPI_TransmitReceive>

  return data;
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000b08 	.word	0x20000b08

08000dac <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000db4:	f7ff ffdc 	bl	8000d70 <SPI_RxByte>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	701a      	strb	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <SD_ReadyWait+0x34>)
 8000dd0:	2232      	movs	r2, #50	; 0x32
 8000dd2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000dd4:	f7ff ffcc 	bl	8000d70 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000dd8:	f7ff ffca 	bl	8000d70 <SPI_RxByte>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2bff      	cmp	r3, #255	; 0xff
 8000de4:	d004      	beq.n	8000df0 <SD_ReadyWait+0x28>
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SD_ReadyWait+0x34>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f3      	bne.n	8000dd8 <SD_ReadyWait+0x10>

  return res;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000bec 	.word	0x20000bec

08000e00 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000e06:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e0a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000e0c:	f7ff ff8a 	bl	8000d24 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	e005      	b.n	8000e22 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000e16:	20ff      	movs	r0, #255	; 0xff
 8000e18:	f7ff ff90 	bl	8000d3c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	2b09      	cmp	r3, #9
 8000e26:	ddf6      	ble.n	8000e16 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000e28:	f7ff ff70 	bl	8000d0c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000e2c:	2340      	movs	r3, #64	; 0x40
 8000e2e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000e40:	2395      	movs	r3, #149	; 0x95
 8000e42:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e009      	b.n	8000e5e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000e4a:	1d3a      	adds	r2, r7, #4
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff72 	bl	8000d3c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	ddf2      	ble.n	8000e4a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000e64:	e002      	b.n	8000e6c <SD_PowerOn+0x6c>
  {
    Count--;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e6c:	f7ff ff80 	bl	8000d70 <SPI_RxByte>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d002      	beq.n	8000e7c <SD_PowerOn+0x7c>
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f4      	bne.n	8000e66 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000e7c:	f7ff ff52 	bl	8000d24 <DESELECT>
  SPI_TxByte(0XFF);
 8000e80:	20ff      	movs	r0, #255	; 0xff
 8000e82:	f7ff ff5b 	bl	8000d3c <SPI_TxByte>

  PowerFlag = 1;
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <SD_PowerOn+0x94>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000a5 	.word	0x200000a5

08000e98 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <SD_PowerOff+0x14>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200000a5 	.word	0x200000a5

08000eb0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <SD_CheckPower+0x10>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	200000a5 	.word	0x200000a5

08000ec4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <SD_RxDataBlock+0x68>)
 8000ed0:	220a      	movs	r2, #10
 8000ed2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000ed4:	f7ff ff4c 	bl	8000d70 <SPI_RxByte>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	2bff      	cmp	r3, #255	; 0xff
 8000ee0:	d104      	bne.n	8000eec <SD_RxDataBlock+0x28>
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <SD_RxDataBlock+0x68>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f3      	bne.n	8000ed4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2bfe      	cmp	r3, #254	; 0xfe
 8000ef0:	d001      	beq.n	8000ef6 <SD_RxDataBlock+0x32>
    return FALSE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e016      	b.n	8000f24 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff55 	bl	8000dac <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff4f 	bl	8000dac <SPI_RxBytePtr>
  } while(btr -= 2);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3b02      	subs	r3, #2
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1ed      	bne.n	8000ef6 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000f1a:	f7ff ff29 	bl	8000d70 <SPI_RxByte>
  SPI_RxByte();
 8000f1e:	f7ff ff27 	bl	8000d70 <SPI_RxByte>

  return TRUE;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000bed 	.word	0x20000bed

08000f30 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f40:	f7ff ff42 	bl	8000dc8 <SD_ReadyWait>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d001      	beq.n	8000f4e <SD_TxDataBlock+0x1e>
    return FALSE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e040      	b.n	8000fd0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fef3 	bl	8000d3c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	2bfd      	cmp	r3, #253	; 0xfd
 8000f5a:	d031      	beq.n	8000fc0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fee7 	bl	8000d3c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fee0 	bl	8000d3c <SPI_TxByte>
    } while (--wc);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	73bb      	strb	r3, [r7, #14]
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1eb      	bne.n	8000f60 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000f88:	f7ff fef2 	bl	8000d70 <SPI_RxByte>
    SPI_RxByte();
 8000f8c:	f7ff fef0 	bl	8000d70 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000f90:	e00b      	b.n	8000faa <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000f92:	f7ff feed 	bl	8000d70 <SPI_RxByte>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d006      	beq.n	8000fb2 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	2b40      	cmp	r3, #64	; 0x40
 8000fae:	d9f0      	bls.n	8000f92 <SD_TxDataBlock+0x62>
 8000fb0:	e000      	b.n	8000fb4 <SD_TxDataBlock+0x84>
        break;
 8000fb2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000fb4:	bf00      	nop
 8000fb6:	f7ff fedb 	bl	8000d70 <SPI_RxByte>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0fa      	beq.n	8000fb6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d101      	bne.n	8000fce <SD_TxDataBlock+0x9e>
    return TRUE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fe4:	f7ff fef0 	bl	8000dc8 <SD_ReadyWait>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2bff      	cmp	r3, #255	; 0xff
 8000fec:	d001      	beq.n	8000ff2 <SD_SendCmd+0x1a>
    return 0xFF;
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	e040      	b.n	8001074 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fea1 	bl	8000d3c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	0e1b      	lsrs	r3, r3, #24
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe9b 	bl	8000d3c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe95 	bl	8000d3c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe8f 	bl	8000d3c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe8a 	bl	8000d3c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b40      	cmp	r3, #64	; 0x40
 8001030:	d101      	bne.n	8001036 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001032:	2395      	movs	r3, #149	; 0x95
 8001034:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b48      	cmp	r3, #72	; 0x48
 800103a:	d101      	bne.n	8001040 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800103c:	2387      	movs	r3, #135	; 0x87
 800103e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fe7a 	bl	8000d3c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b4c      	cmp	r3, #76	; 0x4c
 800104c:	d101      	bne.n	8001052 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800104e:	f7ff fe8f 	bl	8000d70 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001052:	230a      	movs	r3, #10
 8001054:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001056:	f7ff fe8b 	bl	8000d70 <SPI_RxByte>
 800105a:	4603      	mov	r3, r0
 800105c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800105e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001062:	2b00      	cmp	r3, #0
 8001064:	da05      	bge.n	8001072 <SD_SendCmd+0x9a>
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	3b01      	subs	r3, #1
 800106a:	73bb      	strb	r3, [r7, #14]
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f1      	bne.n	8001056 <SD_SendCmd+0x7e>

  return res;
 8001072:	7b7b      	ldrb	r3, [r7, #13]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800108c:	2301      	movs	r3, #1
 800108e:	e0d5      	b.n	800123c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <SD_disk_initialize+0x1c8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <SD_disk_initialize+0x2a>
    return Stat;
 800109e:	4b69      	ldr	r3, [pc, #420]	; (8001244 <SD_disk_initialize+0x1c8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	e0ca      	b.n	800123c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80010a6:	f7ff feab 	bl	8000e00 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80010aa:	f7ff fe2f 	bl	8000d0c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80010b2:	2100      	movs	r1, #0
 80010b4:	2040      	movs	r0, #64	; 0x40
 80010b6:	f7ff ff8f 	bl	8000fd8 <SD_SendCmd>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b01      	cmp	r3, #1
 80010be:	f040 80a5 	bne.w	800120c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80010c2:	4b61      	ldr	r3, [pc, #388]	; (8001248 <SD_disk_initialize+0x1cc>)
 80010c4:	2264      	movs	r2, #100	; 0x64
 80010c6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010cc:	2048      	movs	r0, #72	; 0x48
 80010ce:	f7ff ff83 	bl	8000fd8 <SD_SendCmd>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d158      	bne.n	800118a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e00c      	b.n	80010f8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80010de:	7bfc      	ldrb	r4, [r7, #15]
 80010e0:	f7ff fe46 	bl	8000d70 <SPI_RxByte>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4423      	add	r3, r4
 80010ee:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d9ef      	bls.n	80010de <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80010fe:	7abb      	ldrb	r3, [r7, #10]
 8001100:	2b01      	cmp	r3, #1
 8001102:	f040 8083 	bne.w	800120c <SD_disk_initialize+0x190>
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	2baa      	cmp	r3, #170	; 0xaa
 800110a:	d17f      	bne.n	800120c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800110c:	2100      	movs	r1, #0
 800110e:	2077      	movs	r0, #119	; 0x77
 8001110:	f7ff ff62 	bl	8000fd8 <SD_SendCmd>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d807      	bhi.n	800112a <SD_disk_initialize+0xae>
 800111a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800111e:	2069      	movs	r0, #105	; 0x69
 8001120:	f7ff ff5a 	bl	8000fd8 <SD_SendCmd>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <SD_disk_initialize+0x1cc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1eb      	bne.n	800110c <SD_disk_initialize+0x90>
 8001134:	e000      	b.n	8001138 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001136:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <SD_disk_initialize+0x1cc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d064      	beq.n	800120c <SD_disk_initialize+0x190>
 8001142:	2100      	movs	r1, #0
 8001144:	207a      	movs	r0, #122	; 0x7a
 8001146:	f7ff ff47 	bl	8000fd8 <SD_SendCmd>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d15d      	bne.n	800120c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e00c      	b.n	8001170 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001156:	7bfc      	ldrb	r4, [r7, #15]
 8001158:	f7ff fe0a 	bl	8000d70 <SPI_RxByte>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4423      	add	r3, r4
 8001166:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	3301      	adds	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d9ef      	bls.n	8001156 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001176:	7a3b      	ldrb	r3, [r7, #8]
 8001178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SD_disk_initialize+0x108>
 8001180:	2306      	movs	r3, #6
 8001182:	e000      	b.n	8001186 <SD_disk_initialize+0x10a>
 8001184:	2302      	movs	r3, #2
 8001186:	73bb      	strb	r3, [r7, #14]
 8001188:	e040      	b.n	800120c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800118a:	2100      	movs	r1, #0
 800118c:	2077      	movs	r0, #119	; 0x77
 800118e:	f7ff ff23 	bl	8000fd8 <SD_SendCmd>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d808      	bhi.n	80011aa <SD_disk_initialize+0x12e>
 8001198:	2100      	movs	r1, #0
 800119a:	2069      	movs	r0, #105	; 0x69
 800119c:	f7ff ff1c 	bl	8000fd8 <SD_SendCmd>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d801      	bhi.n	80011aa <SD_disk_initialize+0x12e>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e000      	b.n	80011ac <SD_disk_initialize+0x130>
 80011aa:	2301      	movs	r3, #1
 80011ac:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d10e      	bne.n	80011d2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80011b4:	2100      	movs	r1, #0
 80011b6:	2077      	movs	r0, #119	; 0x77
 80011b8:	f7ff ff0e 	bl	8000fd8 <SD_SendCmd>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d80e      	bhi.n	80011e0 <SD_disk_initialize+0x164>
 80011c2:	2100      	movs	r1, #0
 80011c4:	2069      	movs	r0, #105	; 0x69
 80011c6:	f7ff ff07 	bl	8000fd8 <SD_SendCmd>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d107      	bne.n	80011e0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80011d0:	e00d      	b.n	80011ee <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80011d2:	2100      	movs	r1, #0
 80011d4:	2041      	movs	r0, #65	; 0x41
 80011d6:	f7ff feff 	bl	8000fd8 <SD_SendCmd>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <SD_disk_initialize+0x1cc>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1e1      	bne.n	80011ae <SD_disk_initialize+0x132>
 80011ea:	e000      	b.n	80011ee <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80011ec:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <SD_disk_initialize+0x1cc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <SD_disk_initialize+0x18c>
 80011f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fc:	2050      	movs	r0, #80	; 0x50
 80011fe:	f7ff feeb 	bl	8000fd8 <SD_SendCmd>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <SD_disk_initialize+0x1d0>)
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001212:	f7ff fd87 	bl	8000d24 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001216:	f7ff fdab 	bl	8000d70 <SPI_RxByte>

  if (type)
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <SD_disk_initialize+0x1c8>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SD_disk_initialize+0x1c8>)
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	e001      	b.n	8001236 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001232:	f7ff fe31 	bl	8000e98 <SD_PowerOff>
  }

  return Stat;
 8001236:	4b03      	ldr	r3, [pc, #12]	; (8001244 <SD_disk_initialize+0x1c8>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000bed 	.word	0x20000bed
 800124c:	200000a4 	.word	0x200000a4

08001250 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001260:	2301      	movs	r3, #1
 8001262:	e002      	b.n	800126a <SD_disk_status+0x1a>

  return Stat;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <SD_disk_status+0x24>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	20000000 	.word	0x20000000

08001278 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <SD_disk_read+0x1c>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <SD_disk_read+0x20>
    return RES_PARERR;
 8001294:	2304      	movs	r3, #4
 8001296:	e051      	b.n	800133c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <SD_disk_read+0xcc>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SD_disk_read+0x32>
    return RES_NOTRDY;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e048      	b.n	800133c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <SD_disk_read+0xd0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	607b      	str	r3, [r7, #4]

  SELECT();
 80012bc:	f7ff fd26 	bl	8000d0c <SELECT>

  if (count == 1)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d111      	bne.n	80012ea <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	2051      	movs	r0, #81	; 0x51
 80012ca:	f7ff fe85 	bl	8000fd8 <SD_SendCmd>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d129      	bne.n	8001328 <SD_disk_read+0xb0>
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff fdf3 	bl	8000ec4 <SD_RxDataBlock>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d021      	beq.n	8001328 <SD_disk_read+0xb0>
      count = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	e01e      	b.n	8001328 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	2052      	movs	r0, #82	; 0x52
 80012ee:	f7ff fe73 	bl	8000fd8 <SD_SendCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d117      	bne.n	8001328 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80012f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f7ff fde1 	bl	8000ec4 <SD_RxDataBlock>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00a      	beq.n	800131e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800130e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3b01      	subs	r3, #1
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ed      	bne.n	80012f8 <SD_disk_read+0x80>
 800131c:	e000      	b.n	8001320 <SD_disk_read+0xa8>
          break;
 800131e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001320:	2100      	movs	r1, #0
 8001322:	204c      	movs	r0, #76	; 0x4c
 8001324:	f7ff fe58 	bl	8000fd8 <SD_SendCmd>
    }
  }

  DESELECT();
 8001328:	f7ff fcfc 	bl	8000d24 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800132c:	f7ff fd20 	bl	8000d70 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	200000a4 	.word	0x200000a4

0800134c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <SD_disk_write+0x1c>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <SD_disk_write+0x20>
    return RES_PARERR;
 8001368:	2304      	movs	r3, #4
 800136a:	e06b      	b.n	8001444 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <SD_disk_write+0x100>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800137a:	2303      	movs	r3, #3
 800137c:	e062      	b.n	8001444 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <SD_disk_write+0x100>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SD_disk_write+0x44>
    return RES_WRPRT;
 800138c:	2302      	movs	r3, #2
 800138e:	e059      	b.n	8001444 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <SD_disk_write+0x104>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	025b      	lsls	r3, r3, #9
 80013a0:	607b      	str	r3, [r7, #4]

  SELECT();
 80013a2:	f7ff fcb3 	bl	8000d0c <SELECT>

  if (count == 1)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d110      	bne.n	80013ce <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	2058      	movs	r0, #88	; 0x58
 80013b0:	f7ff fe12 	bl	8000fd8 <SD_SendCmd>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d13a      	bne.n	8001430 <SD_disk_write+0xe4>
 80013ba:	21fe      	movs	r1, #254	; 0xfe
 80013bc:	68b8      	ldr	r0, [r7, #8]
 80013be:	f7ff fdb7 	bl	8000f30 <SD_TxDataBlock>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d033      	beq.n	8001430 <SD_disk_write+0xe4>
      count = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	e030      	b.n	8001430 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <SD_disk_write+0x104>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80013da:	2100      	movs	r1, #0
 80013dc:	2077      	movs	r0, #119	; 0x77
 80013de:	f7ff fdfb 	bl	8000fd8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80013e2:	6839      	ldr	r1, [r7, #0]
 80013e4:	2057      	movs	r0, #87	; 0x57
 80013e6:	f7ff fdf7 	bl	8000fd8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	2059      	movs	r0, #89	; 0x59
 80013ee:	f7ff fdf3 	bl	8000fd8 <SD_SendCmd>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d11b      	bne.n	8001430 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80013f8:	21fc      	movs	r1, #252	; 0xfc
 80013fa:	68b8      	ldr	r0, [r7, #8]
 80013fc:	f7ff fd98 	bl	8000f30 <SD_TxDataBlock>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00a      	beq.n	800141c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800140c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ee      	bne.n	80013f8 <SD_disk_write+0xac>
 800141a:	e000      	b.n	800141e <SD_disk_write+0xd2>
          break;
 800141c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800141e:	21fd      	movs	r1, #253	; 0xfd
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fd85 	bl	8000f30 <SD_TxDataBlock>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <SD_disk_write+0xe4>
      {
        count = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001430:	f7ff fc78 	bl	8000d24 <DESELECT>
  SPI_RxByte();
 8001434:	f7ff fc9c 	bl	8000d70 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	200000a4 	.word	0x200000a4

08001454 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	603a      	str	r2, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	460b      	mov	r3, r1
 8001462:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800146e:	2304      	movs	r3, #4
 8001470:	e11b      	b.n	80016aa <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d129      	bne.n	80014d2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d017      	beq.n	80014b6 <SD_disk_ioctl+0x62>
 8001486:	2b02      	cmp	r3, #2
 8001488:	dc1f      	bgt.n	80014ca <SD_disk_ioctl+0x76>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <SD_disk_ioctl+0x40>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d00b      	beq.n	80014aa <SD_disk_ioctl+0x56>
 8001492:	e01a      	b.n	80014ca <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001494:	f7ff fd0c 	bl	8000eb0 <SD_CheckPower>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800149e:	f7ff fcfb 	bl	8000e98 <SD_PowerOff>
      res = RES_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014a8:	e0fd      	b.n	80016a6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80014aa:	f7ff fca9 	bl	8000e00 <SD_PowerOn>
      res = RES_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014b4:	e0f7      	b.n	80016a6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	1c5c      	adds	r4, r3, #1
 80014ba:	f7ff fcf9 	bl	8000eb0 <SD_CheckPower>
 80014be:	4603      	mov	r3, r0
 80014c0:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80014c2:	2300      	movs	r3, #0
 80014c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014c8:	e0ed      	b.n	80016a6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80014ca:	2304      	movs	r3, #4
 80014cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014d0:	e0e9      	b.n	80016a6 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80014d2:	4b78      	ldr	r3, [pc, #480]	; (80016b4 <SD_disk_ioctl+0x260>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0e2      	b.n	80016aa <SD_disk_ioctl+0x256>

    SELECT();
 80014e4:	f7ff fc12 	bl	8000d0c <SELECT>

    switch (ctrl)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	2b0d      	cmp	r3, #13
 80014ec:	f200 80cc 	bhi.w	8001688 <SD_disk_ioctl+0x234>
 80014f0:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <SD_disk_ioctl+0xa4>)
 80014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	080015f3 	.word	0x080015f3
 80014fc:	08001531 	.word	0x08001531
 8001500:	080015e3 	.word	0x080015e3
 8001504:	08001689 	.word	0x08001689
 8001508:	08001689 	.word	0x08001689
 800150c:	08001689 	.word	0x08001689
 8001510:	08001689 	.word	0x08001689
 8001514:	08001689 	.word	0x08001689
 8001518:	08001689 	.word	0x08001689
 800151c:	08001689 	.word	0x08001689
 8001520:	08001689 	.word	0x08001689
 8001524:	08001605 	.word	0x08001605
 8001528:	08001629 	.word	0x08001629
 800152c:	0800164d 	.word	0x0800164d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001530:	2100      	movs	r1, #0
 8001532:	2049      	movs	r0, #73	; 0x49
 8001534:	f7ff fd50 	bl	8000fd8 <SD_SendCmd>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 80a8 	bne.w	8001690 <SD_disk_ioctl+0x23c>
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2110      	movs	r1, #16
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fcbc 	bl	8000ec4 <SD_RxDataBlock>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 809e 	beq.w	8001690 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001554:	7b3b      	ldrb	r3, [r7, #12]
 8001556:	099b      	lsrs	r3, r3, #6
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10e      	bne.n	800157c <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800155e:	7d7b      	ldrb	r3, [r7, #21]
 8001560:	b29a      	uxth	r2, r3
 8001562:	7d3b      	ldrb	r3, [r7, #20]
 8001564:	b29b      	uxth	r3, r3
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b29b      	uxth	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001572:	8bfb      	ldrh	r3, [r7, #30]
 8001574:	029a      	lsls	r2, r3, #10
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e02e      	b.n	80015da <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800157c:	7c7b      	ldrb	r3, [r7, #17]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	b2da      	uxtb	r2, r3
 8001584:	7dbb      	ldrb	r3, [r7, #22]
 8001586:	09db      	lsrs	r3, r3, #7
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4413      	add	r3, r2
 800158c:	b2da      	uxtb	r2, r3
 800158e:	7d7b      	ldrb	r3, [r7, #21]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0306 	and.w	r3, r3, #6
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4413      	add	r3, r2
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3302      	adds	r3, #2
 80015a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015a4:	7d3b      	ldrb	r3, [r7, #20]
 80015a6:	099b      	lsrs	r3, r3, #6
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	7cfb      	ldrb	r3, [r7, #19]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	7cbb      	ldrb	r3, [r7, #18]
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80015cc:	8bfa      	ldrh	r2, [r7, #30]
 80015ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d2:	3b09      	subs	r3, #9
 80015d4:	409a      	lsls	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80015e0:	e056      	b.n	8001690 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015f0:	e055      	b.n	800169e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80015f2:	f7ff fbe9 	bl	8000dc8 <SD_ReadyWait>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2bff      	cmp	r3, #255	; 0xff
 80015fa:	d14b      	bne.n	8001694 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001602:	e047      	b.n	8001694 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001604:	2100      	movs	r1, #0
 8001606:	2049      	movs	r0, #73	; 0x49
 8001608:	f7ff fce6 	bl	8000fd8 <SD_SendCmd>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d142      	bne.n	8001698 <SD_disk_ioctl+0x244>
 8001612:	2110      	movs	r1, #16
 8001614:	6a38      	ldr	r0, [r7, #32]
 8001616:	f7ff fc55 	bl	8000ec4 <SD_RxDataBlock>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03b      	beq.n	8001698 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001626:	e037      	b.n	8001698 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001628:	2100      	movs	r1, #0
 800162a:	204a      	movs	r0, #74	; 0x4a
 800162c:	f7ff fcd4 	bl	8000fd8 <SD_SendCmd>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d132      	bne.n	800169c <SD_disk_ioctl+0x248>
 8001636:	2110      	movs	r1, #16
 8001638:	6a38      	ldr	r0, [r7, #32]
 800163a:	f7ff fc43 	bl	8000ec4 <SD_RxDataBlock>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d02b      	beq.n	800169c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800164a:	e027      	b.n	800169c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 800164c:	2100      	movs	r1, #0
 800164e:	207a      	movs	r0, #122	; 0x7a
 8001650:	f7ff fcc2 	bl	8000fd8 <SD_SendCmd>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001660:	e00b      	b.n	800167a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001662:	6a3c      	ldr	r4, [r7, #32]
 8001664:	1c63      	adds	r3, r4, #1
 8001666:	623b      	str	r3, [r7, #32]
 8001668:	f7ff fb82 	bl	8000d70 <SPI_RxByte>
 800166c:	4603      	mov	r3, r0
 800166e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001674:	3301      	adds	r3, #1
 8001676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800167a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800167e:	2b03      	cmp	r3, #3
 8001680:	d9ef      	bls.n	8001662 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001688:	2304      	movs	r3, #4
 800168a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800168e:	e006      	b.n	800169e <SD_disk_ioctl+0x24a>
      break;
 8001690:	bf00      	nop
 8001692:	e004      	b.n	800169e <SD_disk_ioctl+0x24a>
      break;
 8001694:	bf00      	nop
 8001696:	e002      	b.n	800169e <SD_disk_ioctl+0x24a>
      break;
 8001698:	bf00      	nop
 800169a:	e000      	b.n	800169e <SD_disk_ioctl+0x24a>
      break;
 800169c:	bf00      	nop
    }

    DESELECT();
 800169e:	f7ff fb41 	bl	8000d24 <DESELECT>
    SPI_RxByte();
 80016a2:	f7ff fb65 	bl	8000d70 <SPI_RxByte>
  }

  return res;
 80016a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	372c      	adds	r7, #44	; 0x2c
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000000 	.word	0x20000000

080016b8 <forceGauge_uart_Init_DMA>:


#include <forceGauge.h>

void forceGauge_uart_Init_DMA(UART_HandleTypeDef *huart)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	forceGauge.huart = huart;
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <forceGauge_uart_Init_DMA+0x18>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	200002e0 	.word	0x200002e0

080016d4 <forceGauge_getForce>:

void forceGauge_getForce(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
	int force = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]

	if (forceGauge.rxbuffer[14] >=48 && forceGauge.rxbuffer[14] <= 57)
 80016de:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <forceGauge_getForce+0xe0>)
 80016e0:	7c9b      	ldrb	r3, [r3, #18]
 80016e2:	2b2f      	cmp	r3, #47	; 0x2f
 80016e4:	d94d      	bls.n	8001782 <forceGauge_getForce+0xae>
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <forceGauge_getForce+0xe0>)
 80016e8:	7c9b      	ldrb	r3, [r3, #18]
 80016ea:	2b39      	cmp	r3, #57	; 0x39
 80016ec:	d849      	bhi.n	8001782 <forceGauge_getForce+0xae>
	{
		force += (forceGauge.rxbuffer[14] - 48) * 1;
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <forceGauge_getForce+0xe0>)
 80016f0:	7c9b      	ldrb	r3, [r3, #18]
 80016f2:	3b30      	subs	r3, #48	; 0x30
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	607b      	str	r3, [r7, #4]
		force += (forceGauge.rxbuffer[13] - 48) * 10;
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <forceGauge_getForce+0xe0>)
 80016fc:	7c5b      	ldrb	r3, [r3, #17]
 80016fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	607b      	str	r3, [r7, #4]
		force += (forceGauge.rxbuffer[12] - 48) * 100;
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <forceGauge_getForce+0xe0>)
 8001714:	7c1b      	ldrb	r3, [r3, #16]
 8001716:	3b30      	subs	r3, #48	; 0x30
 8001718:	2264      	movs	r2, #100	; 0x64
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	607b      	str	r3, [r7, #4]
		force += (forceGauge.rxbuffer[11] - 48) * 1000;
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <forceGauge_getForce+0xe0>)
 8001726:	7bdb      	ldrb	r3, [r3, #15]
 8001728:	3b30      	subs	r3, #48	; 0x30
 800172a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	607b      	str	r3, [r7, #4]
		force += (forceGauge.rxbuffer[10] - 48) * 10000;
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <forceGauge_getForce+0xe0>)
 800173a:	7b9b      	ldrb	r3, [r3, #14]
 800173c:	3b30      	subs	r3, #48	; 0x30
 800173e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	607b      	str	r3, [r7, #4]
		force += (forceGauge.rxbuffer[9] - 48) * 100000;
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <forceGauge_getForce+0xe0>)
 800174e:	7b5b      	ldrb	r3, [r3, #13]
 8001750:	3b30      	subs	r3, #48	; 0x30
 8001752:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <forceGauge_getForce+0xe4>)
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	607b      	str	r3, [r7, #4]
		force += (forceGauge.rxbuffer[8] - 48) * 1000000;
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <forceGauge_getForce+0xe0>)
 8001760:	7b1b      	ldrb	r3, [r3, #12]
 8001762:	3b30      	subs	r3, #48	; 0x30
 8001764:	4a15      	ldr	r2, [pc, #84]	; (80017bc <forceGauge_getForce+0xe8>)
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	607b      	str	r3, [r7, #4]
		force += (forceGauge.rxbuffer[7] - 48) * 10000000;
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <forceGauge_getForce+0xe0>)
 8001772:	7adb      	ldrb	r3, [r3, #11]
 8001774:	3b30      	subs	r3, #48	; 0x30
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <forceGauge_getForce+0xec>)
 8001778:	fb02 f303 	mul.w	r3, r2, r3
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	607b      	str	r3, [r7, #4]
	}
	if(forceGauge.huart->hdmatx->State != HAL_DMA_STATE_BUSY)
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <forceGauge_getForce+0xe0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800178c:	2b02      	cmp	r3, #2
 800178e:	d00a      	beq.n	80017a6 <forceGauge_getForce+0xd2>
		forceGauge.result = HAL_UART_Receive_DMA(forceGauge.huart, forceGauge.rxbuffer, 16);
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <forceGauge_getForce+0xe0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2210      	movs	r2, #16
 8001796:	490b      	ldr	r1, [pc, #44]	; (80017c4 <forceGauge_getForce+0xf0>)
 8001798:	4618      	mov	r0, r3
 800179a:	f004 fcf6 	bl	800618a <HAL_UART_Receive_DMA>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <forceGauge_getForce+0xe0>)
 80017a4:	761a      	strb	r2, [r3, #24]

	forceGauge.force = force;
 80017a6:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <forceGauge_getForce+0xe0>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6153      	str	r3, [r2, #20]
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200002e0 	.word	0x200002e0
 80017b8:	000186a0 	.word	0x000186a0
 80017bc:	000f4240 	.word	0x000f4240
 80017c0:	00989680 	.word	0x00989680
 80017c4:	200002e4 	.word	0x200002e4

080017c8 <indutivo_Init>:
 */

#include "indutivo.h"

HAL_StatusTypeDef indutivo_Init(indutivo_typedef *hindutivo)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	hindutivo->value_raw = 0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
	hindutivo->freq = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
	hindutivo->count = 0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]

	result = HAL_TIM_Base_Start_IT(hindutivo->htim);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fdaa 	bl	8005340 <HAL_TIM_Base_Start_IT>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
	result = HAL_TIM_IC_Start_IT(hindutivo->htim, hindutivo->channel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f003 fe4a 	bl	8005494 <HAL_TIM_IC_Start_IT>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]

	return result;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <indutivo_filtro>:

void indutivo_filtro(indutivo_typedef *hindutivo)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	hindutivo->value = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]

	if (hindutivo->value_raw > 9999)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f242 720f 	movw	r2, #9999	; 0x270f
 8001826:	4293      	cmp	r3, r2
 8001828:	dd03      	ble.n	8001832 <indutivo_filtro+0x22>
		hindutivo->value_raw = hindutivo->buf[4];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 4; i++)
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e00f      	b.n	8001858 <indutivo_filtro+0x48>
		hindutivo->buf[i] = hindutivo->buf[i+1];
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3304      	adds	r3, #4
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b03      	cmp	r3, #3
 800185c:	ddec      	ble.n	8001838 <indutivo_filtro+0x28>

	hindutivo->buf[4] = hindutivo->value_raw;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

	for (int i = 0; i < 5; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	e00d      	b.n	8001888 <indutivo_filtro+0x78>
		hindutivo->value += hindutivo->buf[i];
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3304      	adds	r3, #4
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	441a      	add	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b04      	cmp	r3, #4
 800188c:	ddee      	ble.n	800186c <indutivo_filtro+0x5c>

	hindutivo->value = (int)hindutivo->value/5.0;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe62 	bl	800055c <__aeabi_i2d>
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <indutivo_filtro+0xac>)
 800189e:	f7fe fff1 	bl	8000884 <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f8d3 	bl	8000a54 <__aeabi_d2iz>
 80018ae:	4602      	mov	r2, r0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	605a      	str	r2, [r3, #4]
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40140000 	.word	0x40140000

080018c0 <indutivo_calc>:

void indutivo_calc(indutivo_typedef *hindutivo)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	hindutivo->count += __HAL_TIM_GET_COMPARE(hindutivo->htim, hindutivo->channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d104      	bne.n	80018da <indutivo_calc+0x1a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	e015      	b.n	8001906 <indutivo_calc+0x46>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d104      	bne.n	80018ec <indutivo_calc+0x2c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	e00c      	b.n	8001906 <indutivo_calc+0x46>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d104      	bne.n	80018fe <indutivo_calc+0x3e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	e003      	b.n	8001906 <indutivo_calc+0x46>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	4413      	add	r3, r2
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(hindutivo->htim, 0);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
	hindutivo->freq = (int)(100000000.0 / hindutivo->count);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe1b 	bl	800055c <__aeabi_i2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	a115      	add	r1, pc, #84	; (adr r1, 8001980 <indutivo_calc+0xc0>)
 800192c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001930:	f7fe ffa8 	bl	8000884 <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f88a 	bl	8000a54 <__aeabi_d2iz>
 8001940:	4602      	mov	r2, r0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	611a      	str	r2, [r3, #16]
	hindutivo->value_raw = (int)(hindutivo->constante*hindutivo->freq);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681c      	ldr	r4, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f962 	bl	8000c18 <__aeabi_i2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4619      	mov	r1, r3
 8001958:	4620      	mov	r0, r4
 800195a:	f7fe fbf9 	bl	8000150 <__aeabi_fmul>
 800195e:	4603      	mov	r3, r0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f9ad 	bl	8000cc0 <__aeabi_f2iz>
 8001966:	4602      	mov	r2, r0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	609a      	str	r2, [r3, #8]
	indutivo_filtro(hindutivo);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff4f 	bl	8001810 <indutivo_filtro>
	hindutivo->count = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	00000000 	.word	0x00000000
 8001984:	4197d784 	.word	0x4197d784

08001988 <indutivo_reset>:

void indutivo_reset(indutivo_typedef *hindutivo)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	if(hindutivo->count<1000000)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <indutivo_reset+0x3c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	dc07      	bgt.n	80019aa <indutivo_reset+0x22>
	{
		hindutivo->count+=50000;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80019a2:	3350      	adds	r3, #80	; 0x50
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	60d3      	str	r3, [r2, #12]
	{
		hindutivo->freq=0;
		hindutivo->value_raw=0;
		indutivo_filtro(hindutivo);
	}
}
 80019a8:	e008      	b.n	80019bc <indutivo_reset+0x34>
		hindutivo->freq=0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
		hindutivo->value_raw=0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
		indutivo_filtro(hindutivo);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff2a 	bl	8001810 <indutivo_filtro>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	000f423f 	.word	0x000f423f

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019cc:	f001 f966 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d0:	f000 f834 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d4:	f000 fb1a 	bl	800200c <MX_GPIO_Init>
  MX_DMA_Init();
 80019d8:	f000 faf2 	bl	8001fc0 <MX_DMA_Init>
  MX_ADC1_Init();
 80019dc:	f000 f88a 	bl	8001af4 <MX_ADC1_Init>
  MX_I2C2_Init();
 80019e0:	f000 f8d6 	bl	8001b90 <MX_I2C2_Init>
  MX_SPI1_Init();
 80019e4:	f000 f902 	bl	8001bec <MX_SPI1_Init>
  MX_TIM2_Init();
 80019e8:	f000 f9b4 	bl	8001d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019ec:	f000 fa22 	bl	8001e34 <MX_TIM3_Init>
  MX_FATFS_Init();
 80019f0:	f005 f8de 	bl	8006bb0 <MX_FATFS_Init>
  MX_TIM4_Init();
 80019f4:	f000 fa6c 	bl	8001ed0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80019f8:	f000 f92e 	bl	8001c58 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80019fc:	f000 fab6 	bl	8001f6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  fresult = SD_Init();
 8001a00:	f000 fbbe 	bl	8002180 <SD_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <main+0x68>)
 8001a0a:	701a      	strb	r2, [r3, #0]

  if (sdCard.mode == 0)
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <main+0x6c>)
 8001a0e:	f8b3 35f0 	ldrh.w	r3, [r3, #1520]	; 0x5f0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <main+0x62>
  {

  }
  else if (sdCard.mode == 1)
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <main+0x6c>)
 8001a18:	f8b3 35f0 	ldrh.w	r3, [r3, #1520]	; 0x5f0
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d104      	bne.n	8001a2a <main+0x62>
  {
	  rot_Init();
 8001a20:	f000 fb68 	bl	80020f4 <rot_Init>
	  forceGauge_uart_Init_DMA(&huart2);
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <main+0x70>)
 8001a26:	f7ff fe47 	bl	80016b8 <forceGauge_uart_Init_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  forceGauge_getForce();
 8001a2a:	f7ff fe53 	bl	80016d4 <forceGauge_getForce>
 8001a2e:	e7fc      	b.n	8001a2a <main+0x62>
 8001a30:	20000b04 	.word	0x20000b04
 8001a34:	2000032c 	.word	0x2000032c
 8001a38:	20000ba8 	.word	0x20000ba8

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	; 0x50
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a46:	2228      	movs	r2, #40	; 0x28
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f008 fa5a 	bl	8009f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a88:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fa1c 	bl	8003ed0 <HAL_RCC_OscConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a9e:	f000 fb23 	bl	80020e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2102      	movs	r1, #2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fc86 	bl	80043d0 <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001aca:	f000 fb0d 	bl	80020e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fe12 	bl	8004704 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ae6:	f000 faff 	bl	80020e8 <Error_Handler>
  }
}
 8001aea:	bf00      	nop
 8001aec:	3750      	adds	r7, #80	; 0x50
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b06:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b20:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b2e:	2202      	movs	r2, #2
 8001b30:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b32:	4815      	ldr	r0, [pc, #84]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b34:	f001 f914 	bl	8002d60 <HAL_ADC_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001b3e:	f000 fad3 	bl	80020e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b42:	2307      	movs	r3, #7
 8001b44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b54:	f001 f9dc 	bl	8002f10 <HAL_ADC_ConfigChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b5e:	f000 fac3 	bl	80020e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001b62:	2309      	movs	r3, #9
 8001b64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b66:	2302      	movs	r3, #2
 8001b68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <MX_ADC1_Init+0x94>)
 8001b70:	f001 f9ce 	bl	8002f10 <HAL_ADC_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001b7a:	f000 fab5 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000a48 	.word	0x20000a48
 8001b8c:	40012400 	.word	0x40012400

08001b90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <MX_I2C2_Init+0x54>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_I2C2_Init+0x58>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C2_Init+0x50>)
 8001bce:	f002 f83b 	bl	8003c48 <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 fa86 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200009ac 	.word	0x200009ac
 8001be4:	40005800 	.word	0x40005800
 8001be8:	000186a0 	.word	0x000186a0

08001bec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001bf2:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <MX_SPI1_Init+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c20:	2210      	movs	r2, #16
 8001c22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c38:	220a      	movs	r2, #10
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c3e:	f002 fe17 	bl	8004870 <HAL_SPI_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c48:	f000 fa4e 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000b08 	.word	0x20000b08
 8001c54:	40013000 	.word	0x40013000

08001c58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c76:	463b      	mov	r3, r7
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <MX_TIM1_Init+0xf8>)
 8001c86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001c8a:	2247      	movs	r2, #71	; 0x47
 8001c8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001c96:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cae:	4827      	ldr	r0, [pc, #156]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001cb0:	f003 faf6 	bl	80052a0 <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001cba:	f000 fa15 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4820      	ldr	r0, [pc, #128]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001ccc:	f003 fe84 	bl	80059d8 <HAL_TIM_ConfigClockSource>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001cd6:	f000 fa07 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001cda:	481c      	ldr	r0, [pc, #112]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001cdc:	f003 fb82 	bl	80053e4 <HAL_TIM_IC_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001ce6:	f000 f9ff 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4814      	ldr	r0, [pc, #80]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001cfa:	f004 f989 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001d04:	f000 f9f0 	bl	80020e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001d14:	230f      	movs	r3, #15
 8001d16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480b      	ldr	r0, [pc, #44]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001d20:	f003 fdc6 	bl	80058b0 <HAL_TIM_IC_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d2a:	f000 f9dd 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2204      	movs	r2, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_TIM1_Init+0xf4>)
 8001d36:	f003 fdbb 	bl	80058b0 <HAL_TIM_IC_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001d40:	f000 f9d2 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	3728      	adds	r7, #40	; 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000abc 	.word	0x20000abc
 8001d50:	40012c00 	.word	0x40012c00

08001d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0318 	add.w	r3, r7, #24
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001d80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001d88:	2247      	movs	r2, #71	; 0x47
 8001d8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001d94:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001d98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001da6:	4822      	ldr	r0, [pc, #136]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001da8:	f003 fa7a 	bl	80052a0 <HAL_TIM_Base_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001db2:	f000 f999 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dbc:	f107 0318 	add.w	r3, r7, #24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481b      	ldr	r0, [pc, #108]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001dc4:	f003 fe08 	bl	80059d8 <HAL_TIM_ConfigClockSource>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001dce:	f000 f98b 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001dd2:	4817      	ldr	r0, [pc, #92]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001dd4:	f003 fb06 	bl	80053e4 <HAL_TIM_IC_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dde:	f000 f983 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	480f      	ldr	r0, [pc, #60]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001df2:	f004 f90d 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001dfc:	f000 f974 	bl	80020e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e04:	2301      	movs	r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	2200      	movs	r2, #0
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <MX_TIM2_Init+0xdc>)
 8001e18:	f003 fd4a 	bl	80058b0 <HAL_TIM_IC_ConfigChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001e22:	f000 f961 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000b60 	.word	0x20000b60

08001e34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	463b      	mov	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001e52:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <MX_TIM3_Init+0x98>)
 8001e54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001e58:	2247      	movs	r2, #71	; 0x47
 8001e5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001e64:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001e68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e76:	4814      	ldr	r0, [pc, #80]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001e78:	f003 fa12 	bl	80052a0 <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e82:	f000 f931 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	4619      	mov	r1, r3
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001e94:	f003 fda0 	bl	80059d8 <HAL_TIM_ConfigClockSource>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001e9e:	f000 f923 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eaa:	463b      	mov	r3, r7
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <MX_TIM3_Init+0x94>)
 8001eb0:	f004 f8ae 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001eba:	f000 f915 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000a00 	.word	0x20000a00
 8001ecc:	40000400 	.word	0x40000400

08001ed0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <MX_TIM4_Init+0x98>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001ef4:	2247      	movs	r2, #71	; 0x47
 8001ef6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001f00:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f12:	4814      	ldr	r0, [pc, #80]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001f14:	f003 f9c4 	bl	80052a0 <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001f1e:	f000 f8e3 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480d      	ldr	r0, [pc, #52]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001f30:	f003 fd52 	bl	80059d8 <HAL_TIM_ConfigClockSource>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001f3a:	f000 f8d5 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f46:	463b      	mov	r3, r7
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <MX_TIM4_Init+0x94>)
 8001f4c:	f004 f860 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001f56:	f000 f8c7 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000964 	.word	0x20000964
 8001f68:	40000800 	.word	0x40000800

08001f6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_USART2_UART_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001fa4:	f004 f8a4 	bl	80060f0 <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fae:	f000 f89b 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000ba8 	.word	0x20000ba8
 8001fbc:	40004400 	.word	0x40004400

08001fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <MX_DMA_Init+0x48>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <MX_DMA_Init+0x48>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <MX_DMA_Init+0x48>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	200b      	movs	r0, #11
 8001fe4:	f001 f9a5 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fe8:	200b      	movs	r0, #11
 8001fea:	f001 f9be 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2010      	movs	r0, #16
 8001ff4:	f001 f99d 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ff8:	2010      	movs	r0, #16
 8001ffa:	f001 f9b6 	bl	800336a <HAL_NVIC_EnableIRQ>

}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <MX_GPIO_Init+0xd0>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <MX_GPIO_Init+0xd0>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <MX_GPIO_Init+0xd0>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <MX_GPIO_Init+0xd0>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <MX_GPIO_Init+0xd0>)
 800203e:	f043 0320 	orr.w	r3, r3, #32
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <MX_GPIO_Init+0xd0>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <MX_GPIO_Init+0xd0>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a21      	ldr	r2, [pc, #132]	; (80020dc <MX_GPIO_Init+0xd0>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <MX_GPIO_Init+0xd0>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <MX_GPIO_Init+0xd0>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <MX_GPIO_Init+0xd0>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <MX_GPIO_Init+0xd0>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002086:	4816      	ldr	r0, [pc, #88]	; (80020e0 <MX_GPIO_Init+0xd4>)
 8002088:	f001 fdac 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <MX_GPIO_Init+0xd8>)
 8002094:	f001 fda6 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8002098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209e:	2301      	movs	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4619      	mov	r1, r3
 80020b0:	480b      	ldr	r0, [pc, #44]	; (80020e0 <MX_GPIO_Init+0xd4>)
 80020b2:	f001 fc13 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80020b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80020c4:	2301      	movs	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <MX_GPIO_Init+0xd8>)
 80020d0:	f001 fc04 	bl	80038dc <HAL_GPIO_Init>

}
 80020d4:	bf00      	nop
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40010800 	.word	0x40010800

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <Error_Handler+0x8>
	...

080020f4 <rot_Init>:
 */

#include "rot.h"

void rot_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	rot.constante = 0.6;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <rot_Init+0x20>)
 80020fa:	4a07      	ldr	r2, [pc, #28]	; (8002118 <rot_Init+0x24>)
 80020fc:	601a      	str	r2, [r3, #0]
	rot.htim = &htim1;
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <rot_Init+0x20>)
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <rot_Init+0x28>)
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
	rot.channel = TIM_CHANNEL_2;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <rot_Init+0x20>)
 8002106:	2204      	movs	r2, #4
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&rot);
 800210a:	4802      	ldr	r0, [pc, #8]	; (8002114 <rot_Init+0x20>)
 800210c:	f7ff fb5c 	bl	80017c8 <indutivo_Init>
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200002fc 	.word	0x200002fc
 8002118:	3f19999a 	.word	0x3f19999a
 800211c:	20000abc 	.word	0x20000abc

08002120 <rot_Reset>:

void rot_Reset(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	indutivo_reset(&rot);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <rot_Reset+0x10>)
 8002126:	f7ff fc2f 	bl	8001988 <indutivo_reset>
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200002fc 	.word	0x200002fc

08002134 <rot_Calc>:

void rot_Calc(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	indutivo_calc(&rot);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <rot_Calc+0x10>)
 800213a:	f7ff fbc1 	bl	80018c0 <indutivo_calc>
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200002fc 	.word	0x200002fc

08002148 <bufclear>:
		i++;
	return i;
}

void bufclear(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
	for (int i=0; i<SD_BUFFSIZE; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	e009      	b.n	8002168 <bufclear+0x20>
		sdCard.buffer[i] = '\0';
 8002154:	4a09      	ldr	r2, [pc, #36]	; (800217c <bufclear+0x34>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	f203 4364 	addw	r3, r3, #1124	; 0x464
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<SD_BUFFSIZE; i++)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3301      	adds	r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b1f      	cmp	r3, #31
 800216c:	ddf2      	ble.n	8002154 <bufclear+0xc>
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000032c 	.word	0x2000032c

08002180 <SD_Init>:

FRESULT SD_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 8002184:	2200      	movs	r2, #0
 8002186:	4925      	ldr	r1, [pc, #148]	; (800221c <SD_Init+0x9c>)
 8002188:	4825      	ldr	r0, [pc, #148]	; (8002220 <SD_Init+0xa0>)
 800218a:	f007 f855 	bl	8009238 <f_mount>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <SD_Init+0xa4>)
 8002194:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <SD_Init+0xa4>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <SD_Init+0x24>
		return fresult;
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <SD_Init+0xa4>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	e039      	b.n	8002218 <SD_Init+0x98>

	fresult = SD_loadSettings();
 80021a4:	f000 f844 	bl	8002230 <SD_loadSettings>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <SD_Init+0xa4>)
 80021ae:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <SD_Init+0xa4>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <SD_Init+0x3e>
		return fresult;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <SD_Init+0xa4>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	e02c      	b.n	8002218 <SD_Init+0x98>


	fresult = SD_createFile();
 80021be:	f000 f967 	bl	8002490 <SD_createFile>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <SD_Init+0xa4>)
 80021c8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <SD_Init+0xa4>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <SD_Init+0x58>
		return fresult;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <SD_Init+0xa4>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	e01f      	b.n	8002218 <SD_Init+0x98>

	bufclear();
 80021d8:	f7ff ffb6 	bl	8002148 <bufclear>

	LDEBUG;
 80021dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <SD_Init+0xa8>)
 80021e2:	f001 fd17 	bl	8003c14 <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <SD_Init+0xa0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
	sdCard.blen = 0;
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <SD_Init+0xa0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <SD_Init+0xa0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <SD_Init+0xa0>)
 8002200:	2200      	movs	r2, #0
 8002202:	f8a3 25d0 	strh.w	r2, [r3, #1488]	; 0x5d0
	sdCard.timer = 0;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SD_Init+0xa0>)
 8002208:	2200      	movs	r2, #0
 800220a:	f8a3 25d2 	strh.w	r2, [r3, #1490]	; 0x5d2

	HAL_TIM_Base_Start_IT(&htim2);
 800220e:	4807      	ldr	r0, [pc, #28]	; (800222c <SD_Init+0xac>)
 8002210:	f003 f896 	bl	8005340 <HAL_TIM_Base_Start_IT>

	return fresult;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <SD_Init+0xa4>)
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	0800a7a0 	.word	0x0800a7a0
 8002220:	2000032c 	.word	0x2000032c
 8002224:	20000b04 	.word	0x20000b04
 8002228:	40011000 	.word	0x40011000
 800222c:	20000b60 	.word	0x20000b60

08002230 <SD_loadSettings>:

FRESULT SD_loadSettings(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 8002234:	4912      	ldr	r1, [pc, #72]	; (8002280 <SD_loadSettings+0x50>)
 8002236:	4813      	ldr	r0, [pc, #76]	; (8002284 <SD_loadSettings+0x54>)
 8002238:	f007 fe6c 	bl	8009f14 <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 800223c:	2201      	movs	r2, #1
 800223e:	4911      	ldr	r1, [pc, #68]	; (8002284 <SD_loadSettings+0x54>)
 8002240:	4811      	ldr	r0, [pc, #68]	; (8002288 <SD_loadSettings+0x58>)
 8002242:	f007 f841 	bl	80092c8 <f_open>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <SD_loadSettings+0x5c>)
 800224c:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <SD_loadSettings+0x5c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d106      	bne.n	8002264 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 8002256:	f000 f81b 	bl	8002290 <SD_createSettings>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <SD_loadSettings+0x5c>)
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e009      	b.n	8002278 <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <SD_loadSettings+0x5c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 800226c:	f000 f866 	bl	800233c <SD_searchSettings>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SD_loadSettings+0x5c>)
 8002276:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <SD_loadSettings+0x5c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	0800a7a4 	.word	0x0800a7a4
 8002284:	200008f0 	.word	0x200008f0
 8002288:	2000075c 	.word	0x2000075c
 800228c:	20000b04 	.word	0x20000b04

08002290 <SD_createSettings>:

FRESULT SD_createSettings(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 8002296:	4822      	ldr	r0, [pc, #136]	; (8002320 <SD_createSettings+0x90>)
 8002298:	f007 fd21 	bl	8009cde <f_close>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <SD_createSettings+0x94>)
 80022a2:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 80022a4:	2212      	movs	r2, #18
 80022a6:	4920      	ldr	r1, [pc, #128]	; (8002328 <SD_createSettings+0x98>)
 80022a8:	481d      	ldr	r0, [pc, #116]	; (8002320 <SD_createSettings+0x90>)
 80022aa:	f007 f80d 	bl	80092c8 <f_open>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <SD_createSettings+0x94>)
 80022b4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <SD_createSettings+0x94>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <SD_createSettings+0x34>
		return fresult;
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <SD_createSettings+0x94>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	e029      	b.n	8002318 <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 80022c4:	4919      	ldr	r1, [pc, #100]	; (800232c <SD_createSettings+0x9c>)
 80022c6:	481a      	ldr	r0, [pc, #104]	; (8002330 <SD_createSettings+0xa0>)
 80022c8:	f007 fe24 	bl	8009f14 <siprintf>
 80022cc:	6078      	str	r0, [r7, #4]
			";Seleciona o Modo de operação da Placa\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <SD_createSettings+0xa4>)
 80022d2:	4917      	ldr	r1, [pc, #92]	; (8002330 <SD_createSettings+0xa0>)
 80022d4:	4812      	ldr	r0, [pc, #72]	; (8002320 <SD_createSettings+0x90>)
 80022d6:	f007 facc 	bl	8009872 <f_write>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <SD_createSettings+0x94>)
 80022e0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <SD_createSettings+0x94>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <SD_createSettings+0x60>
		return fresult;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <SD_createSettings+0x94>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	e013      	b.n	8002318 <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 80022f0:	480b      	ldr	r0, [pc, #44]	; (8002320 <SD_createSettings+0x90>)
 80022f2:	f007 fcf4 	bl	8009cde <f_close>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <SD_createSettings+0x94>)
 80022fc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <SD_createSettings+0x94>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <SD_createSettings+0x7c>
		return fresult;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <SD_createSettings+0x94>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	e005      	b.n	8002318 <SD_createSettings+0x88>

	sdCard.mode = 0;
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <SD_createSettings+0xa8>)
 800230e:	2200      	movs	r2, #0
 8002310:	f8a3 25f0 	strh.w	r2, [r3, #1520]	; 0x5f0

	return fresult;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <SD_createSettings+0x94>)
 8002316:	781b      	ldrb	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000075c 	.word	0x2000075c
 8002324:	20000b04 	.word	0x20000b04
 8002328:	200008f0 	.word	0x200008f0
 800232c:	0800a7b4 	.word	0x0800a7b4
 8002330:	200007b0 	.word	0x200007b0
 8002334:	20000908 	.word	0x20000908
 8002338:	2000032c 	.word	0x2000032c

0800233c <SD_searchSettings>:

FRESULT SD_searchSettings(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
	int index = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 8002346:	2301      	movs	r3, #1
 8002348:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 800234a:	4b4c      	ldr	r3, [pc, #304]	; (800247c <SD_searchSettings+0x140>)
 800234c:	f240 123f 	movw	r2, #319	; 0x13f
 8002350:	494b      	ldr	r1, [pc, #300]	; (8002480 <SD_searchSettings+0x144>)
 8002352:	484c      	ldr	r0, [pc, #304]	; (8002484 <SD_searchSettings+0x148>)
 8002354:	f007 f938 	bl	80095c8 <f_read>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <SD_searchSettings+0x14c>)
 800235e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002360:	4b49      	ldr	r3, [pc, #292]	; (8002488 <SD_searchSettings+0x14c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <SD_searchSettings+0x38>
		return fresult;
 8002368:	4b47      	ldr	r3, [pc, #284]	; (8002488 <SD_searchSettings+0x14c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	e081      	b.n	8002472 <SD_searchSettings+0x136>

	for (index; sdCard.longBuffer[index] != '='; index++);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3301      	adds	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4a45      	ldr	r2, [pc, #276]	; (800248c <SD_searchSettings+0x150>)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4413      	add	r3, r2
 800237a:	f203 4384 	addw	r3, r3, #1156	; 0x484
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b3d      	cmp	r3, #61	; 0x3d
 8002382:	d1f4      	bne.n	800236e <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800238a:	db0b      	blt.n	80023a4 <SD_searchSettings+0x68>
	{
		fresult = SD_createSettings();
 800238c:	f7ff ff80 	bl	8002290 <SD_createSettings>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <SD_searchSettings+0x14c>)
 8002396:	701a      	strb	r2, [r3, #0]
		return fresult;
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <SD_searchSettings+0x14c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	e069      	b.n	8002472 <SD_searchSettings+0x136>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3301      	adds	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	4a38      	ldr	r2, [pc, #224]	; (800248c <SD_searchSettings+0x150>)
 80023ac:	4413      	add	r3, r2
 80023ae:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d908      	bls.n	80023c8 <SD_searchSettings+0x8c>
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	4a33      	ldr	r2, [pc, #204]	; (800248c <SD_searchSettings+0x150>)
 80023be:	4413      	add	r3, r2
 80023c0:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80023c4:	2b5a      	cmp	r3, #90	; 0x5a
 80023c6:	d9ea      	bls.n	800239e <SD_searchSettings+0x62>
	deindex--;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	e012      	b.n	80023fa <SD_searchSettings+0xbe>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad2      	subs	r2, r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a2b      	ldr	r2, [pc, #172]	; (800248c <SD_searchSettings+0x150>)
 80023e0:	4413      	add	r3, r2
 80023e2:	f893 1484 	ldrb.w	r1, [r3, #1156]	; 0x484
 80023e6:	4a29      	ldr	r2, [pc, #164]	; (800248c <SD_searchSettings+0x150>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 80023f0:	460a      	mov	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3301      	adds	r3, #1
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3301      	adds	r3, #1
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	dde7      	ble.n	80023d4 <SD_searchSettings+0x98>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <SD_searchSettings+0x150>)
 8002406:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 800240a:	2b4d      	cmp	r3, #77	; 0x4d
 800240c:	d129      	bne.n	8002462 <SD_searchSettings+0x126>
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <SD_searchSettings+0x150>)
 8002410:	f893 35e1 	ldrb.w	r3, [r3, #1505]	; 0x5e1
 8002414:	2b4f      	cmp	r3, #79	; 0x4f
 8002416:	d124      	bne.n	8002462 <SD_searchSettings+0x126>
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <SD_searchSettings+0x150>)
 800241a:	f893 35e2 	ldrb.w	r3, [r3, #1506]	; 0x5e2
 800241e:	2b44      	cmp	r3, #68	; 0x44
 8002420:	d11f      	bne.n	8002462 <SD_searchSettings+0x126>
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <SD_searchSettings+0x150>)
 8002424:	f893 35e3 	ldrb.w	r3, [r3, #1507]	; 0x5e3
 8002428:	2b45      	cmp	r3, #69	; 0x45
 800242a:	d11a      	bne.n	8002462 <SD_searchSettings+0x126>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <SD_searchSettings+0x150>)
 800242e:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 8002432:	2b2f      	cmp	r3, #47	; 0x2f
 8002434:	d90e      	bls.n	8002454 <SD_searchSettings+0x118>
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <SD_searchSettings+0x150>)
 8002438:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 800243c:	2b39      	cmp	r3, #57	; 0x39
 800243e:	d809      	bhi.n	8002454 <SD_searchSettings+0x118>
			sdCard.mode = sdCard.setting[5] - 48;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <SD_searchSettings+0x150>)
 8002442:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b30      	subs	r3, #48	; 0x30
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <SD_searchSettings+0x150>)
 800244e:	f8a3 25f0 	strh.w	r2, [r3, #1520]	; 0x5f0
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002452:	e00c      	b.n	800246e <SD_searchSettings+0x132>
		else
			fresult = SD_createSettings();
 8002454:	f7ff ff1c 	bl	8002290 <SD_createSettings>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <SD_searchSettings+0x14c>)
 800245e:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002460:	e005      	b.n	800246e <SD_searchSettings+0x132>
	}
	else
		fresult = SD_createSettings();
 8002462:	f7ff ff15 	bl	8002290 <SD_createSettings>
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <SD_searchSettings+0x14c>)
 800246c:	701a      	strb	r2, [r3, #0]

	return fresult;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <SD_searchSettings+0x14c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000904 	.word	0x20000904
 8002480:	200007b0 	.word	0x200007b0
 8002484:	2000075c 	.word	0x2000075c
 8002488:	20000b04 	.word	0x20000b04
 800248c:	2000032c 	.word	0x2000032c

08002490 <SD_createFile>:

FRESULT SD_createFile(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4921      	ldr	r1, [pc, #132]	; (8002524 <SD_createFile+0x94>)
 800249e:	4822      	ldr	r0, [pc, #136]	; (8002528 <SD_createFile+0x98>)
 80024a0:	f007 fd38 	bl	8009f14 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 80024a4:	2206      	movs	r2, #6
 80024a6:	4920      	ldr	r1, [pc, #128]	; (8002528 <SD_createFile+0x98>)
 80024a8:	4820      	ldr	r0, [pc, #128]	; (800252c <SD_createFile+0x9c>)
 80024aa:	f006 ff0d 	bl	80092c8 <f_open>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <SD_createFile+0xa0>)
 80024b4:	701a      	strb	r2, [r3, #0]
		filnum++;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3301      	adds	r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
		LDEBUG;
 80024bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024c0:	481c      	ldr	r0, [pc, #112]	; (8002534 <SD_createFile+0xa4>)
 80024c2:	f001 fba7 	bl	8003c14 <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <SD_createFile+0xa0>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d0e5      	beq.n	800249a <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 80024ce:	491a      	ldr	r1, [pc, #104]	; (8002538 <SD_createFile+0xa8>)
 80024d0:	481a      	ldr	r0, [pc, #104]	; (800253c <SD_createFile+0xac>)
 80024d2:	f007 fd1f 	bl	8009f14 <siprintf>
 80024d6:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <SD_createFile+0xb0>)
 80024dc:	4917      	ldr	r1, [pc, #92]	; (800253c <SD_createFile+0xac>)
 80024de:	4813      	ldr	r0, [pc, #76]	; (800252c <SD_createFile+0x9c>)
 80024e0:	f007 f9c7 	bl	8009872 <f_write>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <SD_createFile+0xa0>)
 80024ea:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <SD_createFile+0xa0>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <SD_createFile+0x6a>
		return fresult;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <SD_createFile+0xa0>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	e00f      	b.n	800251a <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 80024fa:	480c      	ldr	r0, [pc, #48]	; (800252c <SD_createFile+0x9c>)
 80024fc:	f007 fbef 	bl	8009cde <f_close>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <SD_createFile+0xa0>)
 8002506:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <SD_createFile+0xa0>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <SD_createFile+0x86>
		return fresult;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <SD_createFile+0xa0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	e001      	b.n	800251a <SD_createFile+0x8a>

	return fresult;
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <SD_createFile+0xa0>)
 8002518:	781b      	ldrb	r3, [r3, #0]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	0800a7e8 	.word	0x0800a7e8
 8002528:	200008f0 	.word	0x200008f0
 800252c:	2000075c 	.word	0x2000075c
 8002530:	20000b04 	.word	0x20000b04
 8002534:	40011000 	.word	0x40011000
 8002538:	0800a7f8 	.word	0x0800a7f8
 800253c:	20000790 	.word	0x20000790
 8002540:	20000908 	.word	0x20000908

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_MspInit+0x5c>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <HAL_MspInit+0x5c>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6193      	str	r3, [r2, #24]
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_MspInit+0x5c>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_MspInit+0x5c>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <HAL_MspInit+0x5c>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_MspInit+0x5c>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_MspInit+0x60>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_MspInit+0x60>)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000

080025a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0318 	add.w	r3, r7, #24
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a33      	ldr	r2, [pc, #204]	; (8002690 <HAL_ADC_MspInit+0xe8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d15f      	bne.n	8002688 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <HAL_ADC_MspInit+0xec>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a31      	ldr	r2, [pc, #196]	; (8002694 <HAL_ADC_MspInit+0xec>)
 80025ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_ADC_MspInit+0xec>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <HAL_ADC_MspInit+0xec>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a2b      	ldr	r2, [pc, #172]	; (8002694 <HAL_ADC_MspInit+0xec>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_ADC_MspInit+0xec>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f8:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_ADC_MspInit+0xec>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a25      	ldr	r2, [pc, #148]	; (8002694 <HAL_ADC_MspInit+0xec>)
 80025fe:	f043 0308 	orr.w	r3, r3, #8
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_ADC_MspInit+0xec>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002614:	2303      	movs	r3, #3
 8002616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0318 	add.w	r3, r7, #24
 800261c:	4619      	mov	r1, r3
 800261e:	481e      	ldr	r0, [pc, #120]	; (8002698 <HAL_ADC_MspInit+0xf0>)
 8002620:	f001 f95c 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002624:	2302      	movs	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002628:	2303      	movs	r3, #3
 800262a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	f107 0318 	add.w	r3, r7, #24
 8002630:	4619      	mov	r1, r3
 8002632:	481a      	ldr	r0, [pc, #104]	; (800269c <HAL_ADC_MspInit+0xf4>)
 8002634:	f001 f952 	bl	80038dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 800263a:	4a1a      	ldr	r2, [pc, #104]	; (80026a4 <HAL_ADC_MspInit+0xfc>)
 800263c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 8002640:	2200      	movs	r2, #0
 8002642:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 8002652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002656:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 800265a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 8002662:	2220      	movs	r2, #32
 8002664:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 8002668:	2200      	movs	r2, #0
 800266a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800266c:	480c      	ldr	r0, [pc, #48]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 800266e:	f000 fe97 	bl	80033a0 <HAL_DMA_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002678:	f7ff fd36 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 8002680:	621a      	str	r2, [r3, #32]
 8002682:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_ADC_MspInit+0xf8>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002688:	bf00      	nop
 800268a:	3728      	adds	r7, #40	; 0x28
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40012400 	.word	0x40012400
 8002694:	40021000 	.word	0x40021000
 8002698:	40010800 	.word	0x40010800
 800269c:	40010c00 	.word	0x40010c00
 80026a0:	20000a78 	.word	0x20000a78
 80026a4:	40020008 	.word	0x40020008

080026a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_I2C_MspInit+0x74>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d124      	bne.n	8002712 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_I2C_MspInit+0x78>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <HAL_I2C_MspInit+0x78>)
 80026ce:	f043 0308 	orr.w	r3, r3, #8
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_I2C_MspInit+0x78>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e6:	2312      	movs	r3, #18
 80026e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ea:	2303      	movs	r3, #3
 80026ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4619      	mov	r1, r3
 80026f4:	480b      	ldr	r0, [pc, #44]	; (8002724 <HAL_I2C_MspInit+0x7c>)
 80026f6:	f001 f8f1 	bl	80038dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_I2C_MspInit+0x78>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a08      	ldr	r2, [pc, #32]	; (8002720 <HAL_I2C_MspInit+0x78>)
 8002700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002704:	61d3      	str	r3, [r2, #28]
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_I2C_MspInit+0x78>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002712:	bf00      	nop
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40005800 	.word	0x40005800
 8002720:	40021000 	.word	0x40021000
 8002724:	40010c00 	.word	0x40010c00

08002728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a26      	ldr	r2, [pc, #152]	; (80027dc <HAL_SPI_MspInit+0xb4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d145      	bne.n	80027d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_SPI_MspInit+0xb8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <HAL_SPI_MspInit+0xb8>)
 800274e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_SPI_MspInit+0xb8>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_SPI_MspInit+0xb8>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_SPI_MspInit+0xb8>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_SPI_MspInit+0xb8>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002778:	2328      	movs	r3, #40	; 0x28
 800277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4619      	mov	r1, r3
 800278a:	4816      	ldr	r0, [pc, #88]	; (80027e4 <HAL_SPI_MspInit+0xbc>)
 800278c:	f001 f8a6 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002790:	2310      	movs	r3, #16
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	4810      	ldr	r0, [pc, #64]	; (80027e4 <HAL_SPI_MspInit+0xbc>)
 80027a4:	f001 f89a 	bl	80038dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_SPI_MspInit+0xc0>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_SPI_MspInit+0xc0>)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 15, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	210f      	movs	r1, #15
 80027c8:	2023      	movs	r0, #35	; 0x23
 80027ca:	f000 fdb2 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027ce:	2023      	movs	r0, #35	; 0x23
 80027d0:	f000 fdcb 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40013000 	.word	0x40013000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010c00 	.word	0x40010c00
 80027e8:	40010000 	.word	0x40010000

080027ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0320 	add.w	r3, r7, #32
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a51      	ldr	r2, [pc, #324]	; (800294c <HAL_TIM_Base_MspInit+0x160>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d135      	bne.n	8002878 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a4f      	ldr	r2, [pc, #316]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 8002812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	4b4a      	ldr	r3, [pc, #296]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a49      	ldr	r2, [pc, #292]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800283c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002846:	2302      	movs	r3, #2
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 0320 	add.w	r3, r7, #32
 800284e:	4619      	mov	r1, r3
 8002850:	4840      	ldr	r0, [pc, #256]	; (8002954 <HAL_TIM_Base_MspInit+0x168>)
 8002852:	f001 f843 	bl	80038dc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 15, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	210f      	movs	r1, #15
 800285a:	2019      	movs	r0, #25
 800285c:	f000 fd69 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002860:	2019      	movs	r0, #25
 8002862:	f000 fd82 	bl	800336a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 15, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	210f      	movs	r1, #15
 800286a:	201b      	movs	r0, #27
 800286c:	f000 fd61 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002870:	201b      	movs	r0, #27
 8002872:	f000 fd7a 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002876:	e064      	b.n	8002942 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d12c      	bne.n	80028dc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002882:	4b33      	ldr	r3, [pc, #204]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4a32      	ldr	r2, [pc, #200]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	61d3      	str	r3, [r2, #28]
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	6193      	str	r3, [r2, #24]
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028b2:	2301      	movs	r3, #1
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ba:	2302      	movs	r3, #2
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 0320 	add.w	r3, r7, #32
 80028c2:	4619      	mov	r1, r3
 80028c4:	4823      	ldr	r0, [pc, #140]	; (8002954 <HAL_TIM_Base_MspInit+0x168>)
 80028c6:	f001 f809 	bl	80038dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	210f      	movs	r1, #15
 80028ce:	201c      	movs	r0, #28
 80028d0:	f000 fd2f 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028d4:	201c      	movs	r0, #28
 80028d6:	f000 fd48 	bl	800336a <HAL_NVIC_EnableIRQ>
}
 80028da:	e032      	b.n	8002942 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_TIM_Base_MspInit+0x16c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d114      	bne.n	8002910 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	61d3      	str	r3, [r2, #28]
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	210f      	movs	r1, #15
 8002902:	201d      	movs	r0, #29
 8002904:	f000 fd15 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002908:	201d      	movs	r0, #29
 800290a:	f000 fd2e 	bl	800336a <HAL_NVIC_EnableIRQ>
}
 800290e:	e018      	b.n	8002942 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a11      	ldr	r2, [pc, #68]	; (800295c <HAL_TIM_Base_MspInit+0x170>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d113      	bne.n	8002942 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	61d3      	str	r3, [r2, #28]
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_TIM_Base_MspInit+0x164>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	210f      	movs	r1, #15
 8002936:	201e      	movs	r0, #30
 8002938:	f000 fcfb 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800293c:	201e      	movs	r0, #30
 800293e:	f000 fd14 	bl	800336a <HAL_NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40021000 	.word	0x40021000
 8002954:	40010800 	.word	0x40010800
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800

08002960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a32      	ldr	r2, [pc, #200]	; (8002a44 <HAL_UART_MspInit+0xe4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d15d      	bne.n	8002a3c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002980:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_UART_MspInit+0xe8>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <HAL_UART_MspInit+0xe8>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	61d3      	str	r3, [r2, #28]
 800298c:	4b2e      	ldr	r3, [pc, #184]	; (8002a48 <HAL_UART_MspInit+0xe8>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_UART_MspInit+0xe8>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4a2a      	ldr	r2, [pc, #168]	; (8002a48 <HAL_UART_MspInit+0xe8>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6193      	str	r3, [r2, #24]
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_UART_MspInit+0xe8>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029b0:	2304      	movs	r3, #4
 80029b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	4619      	mov	r1, r3
 80029c2:	4822      	ldr	r0, [pc, #136]	; (8002a4c <HAL_UART_MspInit+0xec>)
 80029c4:	f000 ff8a 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029c8:	2308      	movs	r3, #8
 80029ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4619      	mov	r1, r3
 80029da:	481c      	ldr	r0, [pc, #112]	; (8002a4c <HAL_UART_MspInit+0xec>)
 80029dc:	f000 ff7e 	bl	80038dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_UART_MspInit+0xf4>)
 80029e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 8002a06:	2220      	movs	r2, #32
 8002a08:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a10:	480f      	ldr	r0, [pc, #60]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 8002a12:	f000 fcc5 	bl	80033a0 <HAL_DMA_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002a1c:	f7ff fb64 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <HAL_UART_MspInit+0xf0>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	210f      	movs	r1, #15
 8002a30:	2026      	movs	r0, #38	; 0x26
 8002a32:	f000 fc7e 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a36:	2026      	movs	r0, #38	; 0x26
 8002a38:	f000 fc97 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40004400 	.word	0x40004400
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010800 	.word	0x40010800
 8002a50:	20000920 	.word	0x20000920
 8002a54:	4002006c 	.word	0x4002006c

08002a58 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <SDTimer_Handler+0x3c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <SDTimer_Handler+0x1c>
    Timer1--;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <SDTimer_Handler+0x3c>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <SDTimer_Handler+0x3c>)
 8002a72:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <SDTimer_Handler+0x40>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <SDTimer_Handler+0x34>
    Timer2--;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <SDTimer_Handler+0x40>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <SDTimer_Handler+0x40>)
 8002a8a:	701a      	strb	r2, [r3, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000bed 	.word	0x20000bed
 8002a98:	20000bec 	.word	0x20000bec

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
	...

08002ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <SysTick_Handler+0x30>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <SysTick_Handler+0x30>)
 8002af0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <SysTick_Handler+0x30>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	d904      	bls.n	8002b06 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <SysTick_Handler+0x30>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002b02:	f7ff ffa9 	bl	8002a58 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b06:	f000 f90f 	bl	8002d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200000a6 	.word	0x200000a6

08002b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <DMA1_Channel1_IRQHandler+0x10>)
 8002b1a:	f000 fdab 	bl	8003674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000a78 	.word	0x20000a78

08002b28 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <DMA1_Channel6_IRQHandler+0x10>)
 8002b2e:	f000 fda1 	bl	8003674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000920 	.word	0x20000920

08002b3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	rot_Reset();
 8002b40:	f7ff faee 	bl	8002120 <rot_Reset>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <TIM1_UP_IRQHandler+0x14>)
 8002b46:	f002 fdab 	bl	80056a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000abc 	.word	0x20000abc

08002b54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if (htim1.Instance->CCR2 != RESET)
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <TIM1_CC_IRQHandler+0x1c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <TIM1_CC_IRQHandler+0x12>
		rot_Calc();
 8002b62:	f7ff fae7 	bl	8002134 <rot_Calc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b66:	4802      	ldr	r0, [pc, #8]	; (8002b70 <TIM1_CC_IRQHandler+0x1c>)
 8002b68:	f002 fd9a 	bl	80056a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000abc 	.word	0x20000abc

08002b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <TIM2_IRQHandler+0x10>)
 8002b7a:	f002 fd91 	bl	80056a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000b60 	.word	0x20000b60

08002b88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <TIM3_IRQHandler+0x10>)
 8002b8e:	f002 fd87 	bl	80056a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000a00 	.word	0x20000a00

08002b9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <TIM4_IRQHandler+0x10>)
 8002ba2:	f002 fd7d 	bl	80056a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000964 	.word	0x20000964

08002bb0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <SPI1_IRQHandler+0x10>)
 8002bb6:	f002 f9bd 	bl	8004f34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000b08 	.word	0x20000b08

08002bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <USART2_IRQHandler+0x10>)
 8002bca:	f003 fb0f 	bl	80061ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000ba8 	.word	0x20000ba8

08002bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <_sbrk+0x5c>)
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <_sbrk+0x60>)
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <_sbrk+0x64>)
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <_sbrk+0x68>)
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d207      	bcs.n	8002c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c08:	f007 f952 	bl	8009eb0 <__errno>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	220c      	movs	r2, #12
 8002c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	e009      	b.n	8002c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <_sbrk+0x64>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <_sbrk+0x64>)
 8002c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20005000 	.word	0x20005000
 8002c38:	00000400 	.word	0x00000400
 8002c3c:	200000a8 	.word	0x200000a8
 8002c40:	20001068 	.word	0x20001068

08002c44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c76:	f7ff ffe5 	bl	8002c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7a:	f007 f91f 	bl	8009ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c7e:	f7fe fea3 	bl	80019c8 <main>
  bx lr
 8002c82:	4770      	bx	lr
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002c8c:	0800adf8 	.word	0x0800adf8
  ldr r2, =_sbss
 8002c90:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002c94:	20001068 	.word	0x20001068

08002c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC1_2_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_Init+0x28>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_Init+0x28>)
 8002ca6:	f043 0310 	orr.w	r3, r3, #16
 8002caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f000 fb35 	bl	800331c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 f808 	bl	8002cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb8:	f7ff fc44 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_InitTick+0x54>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_InitTick+0x58>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fb4d 	bl	8003386 <HAL_SYSTICK_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00e      	b.n	8002d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b0f      	cmp	r3, #15
 8002cfa:	d80a      	bhi.n	8002d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f000 fb15 	bl	8003332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d08:	4a06      	ldr	r2, [pc, #24]	; (8002d24 <HAL_InitTick+0x5c>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	2000000c 	.word	0x2000000c
 8002d24:	20000008 	.word	0x20000008

08002d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_IncTick+0x1c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_IncTick+0x20>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	4a03      	ldr	r2, [pc, #12]	; (8002d48 <HAL_IncTick+0x20>)
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	2000000c 	.word	0x2000000c
 8002d48:	20000bf0 	.word	0x20000bf0

08002d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b02      	ldr	r3, [pc, #8]	; (8002d5c <HAL_GetTick+0x10>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000bf0 	.word	0x20000bf0

08002d60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0be      	b.n	8002f00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fc02 	bl	80025a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f9ab 	bl	8003100 <ADC_ConversionStop_Disable>
 8002daa:	4603      	mov	r3, r0
 8002dac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 8099 	bne.w	8002eee <HAL_ADC_Init+0x18e>
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 8095 	bne.w	8002eee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dcc:	f023 0302 	bic.w	r3, r3, #2
 8002dd0:	f043 0202 	orr.w	r2, r3, #2
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002de0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7b1b      	ldrb	r3, [r3, #12]
 8002de6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002de8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df8:	d003      	beq.n	8002e02 <HAL_ADC_Init+0xa2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_ADC_Init+0xa8>
 8002e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e06:	e000      	b.n	8002e0a <HAL_ADC_Init+0xaa>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7d1b      	ldrb	r3, [r3, #20]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d119      	bne.n	8002e4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7b1b      	ldrb	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	035a      	lsls	r2, r3, #13
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e00b      	b.n	8002e4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_ADC_Init+0x1a8>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7c:	d003      	beq.n	8002e86 <HAL_ADC_Init+0x126>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d104      	bne.n	8002e90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	051b      	lsls	r3, r3, #20
 8002e8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_ADC_Init+0x1ac>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10b      	bne.n	8002ecc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eca:	e018      	b.n	8002efe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f023 0312 	bic.w	r3, r3, #18
 8002ed4:	f043 0210 	orr.w	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eec:	e007      	b.n	8002efe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	f043 0210 	orr.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	ffe1f7fd 	.word	0xffe1f7fd
 8002f0c:	ff1f0efe 	.word	0xff1f0efe

08002f10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x20>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e0dc      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1da>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b06      	cmp	r3, #6
 8002f3e:	d81c      	bhi.n	8002f7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b05      	subs	r3, #5
 8002f52:	221f      	movs	r2, #31
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	4019      	ands	r1, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	3b05      	subs	r3, #5
 8002f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	635a      	str	r2, [r3, #52]	; 0x34
 8002f78:	e03c      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d81c      	bhi.n	8002fbc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	3b23      	subs	r3, #35	; 0x23
 8002f94:	221f      	movs	r2, #31
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	4019      	ands	r1, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	3b23      	subs	r3, #35	; 0x23
 8002fae:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fba:	e01b      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b41      	subs	r3, #65	; 0x41
 8002fce:	221f      	movs	r2, #31
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4019      	ands	r1, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3b41      	subs	r3, #65	; 0x41
 8002fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b09      	cmp	r3, #9
 8002ffa:	d91c      	bls.n	8003036 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68d9      	ldr	r1, [r3, #12]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	3b1e      	subs	r3, #30
 800300e:	2207      	movs	r2, #7
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	4019      	ands	r1, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6898      	ldr	r0, [r3, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	3b1e      	subs	r3, #30
 8003028:	fa00 f203 	lsl.w	r2, r0, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	e019      	b.n	800306a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6919      	ldr	r1, [r3, #16]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	2207      	movs	r2, #7
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	4019      	ands	r1, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6898      	ldr	r0, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	fa00 f203 	lsl.w	r2, r0, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d003      	beq.n	800307a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003076:	2b11      	cmp	r3, #17
 8003078:	d132      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d125      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d126      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d11a      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a13      	ldr	r2, [pc, #76]	; (80030fc <HAL_ADC_ConfigChannel+0x1ec>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	0c9a      	lsrs	r2, r3, #18
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030c0:	e002      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f9      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x1b2>
 80030ce:	e007      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	40012400 	.word	0x40012400
 80030f8:	20000004 	.word	0x20000004
 80030fc:	431bde83 	.word	0x431bde83

08003100 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d12e      	bne.n	8003178 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800312a:	f7ff fe0f 	bl	8002d4c <HAL_GetTick>
 800312e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003130:	e01b      	b.n	800316a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003132:	f7ff fe0b 	bl	8002d4c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d914      	bls.n	800316a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d10d      	bne.n	800316a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f043 0210 	orr.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e007      	b.n	800317a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d0dc      	beq.n	8003132 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4906      	ldr	r1, [pc, #24]	; (800321c <__NVIC_EnableIRQ+0x34>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e8:	d301      	bcc.n	80032ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00f      	b.n	800330e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <SysTick_Config+0x40>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f6:	210f      	movs	r1, #15
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f7ff ff90 	bl	8003220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <SysTick_Config+0x40>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SysTick_Config+0x40>)
 8003308:	2207      	movs	r2, #7
 800330a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000e010 	.word	0xe000e010

0800331c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff2d 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff42 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff90 	bl	8003274 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5f 	bl	8003220 <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff35 	bl	80031e8 <__NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa2 	bl	80032d8 <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e043      	b.n	800343e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_DMA_Init+0xa8>)
 80033be:	4413      	add	r3, r2
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <HAL_DMA_Init+0xac>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	009a      	lsls	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_DMA_Init+0xb0>)
 80033d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	bffdfff8 	.word	0xbffdfff8
 800344c:	cccccccd 	.word	0xcccccccd
 8003450:	40020000 	.word	0x40020000

08003454 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_DMA_Start_IT+0x20>
 8003470:	2302      	movs	r3, #2
 8003472:	e04a      	b.n	800350a <HAL_DMA_Start_IT+0xb6>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003482:	2b01      	cmp	r3, #1
 8003484:	d13a      	bne.n	80034fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f9e8 	bl	8003880 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 020e 	orr.w	r2, r2, #14
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e00f      	b.n	80034ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0204 	bic.w	r2, r2, #4
 80034d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 020a 	orr.w	r2, r2, #10
 80034e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e005      	b.n	8003508 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003504:	2302      	movs	r3, #2
 8003506:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003508:	7dfb      	ldrb	r3, [r7, #23]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003524:	2b02      	cmp	r3, #2
 8003526:	d008      	beq.n	800353a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2204      	movs	r2, #4
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e020      	b.n	800357c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 020e 	bic.w	r2, r2, #14
 8003548:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
	...

08003588 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800359a:	2b02      	cmp	r3, #2
 800359c:	d005      	beq.n	80035aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2204      	movs	r2, #4
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e051      	b.n	800364e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 020e 	bic.w	r2, r2, #14
 80035b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a22      	ldr	r2, [pc, #136]	; (8003658 <HAL_DMA_Abort_IT+0xd0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d029      	beq.n	8003628 <HAL_DMA_Abort_IT+0xa0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a20      	ldr	r2, [pc, #128]	; (800365c <HAL_DMA_Abort_IT+0xd4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_Abort_IT+0x9c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <HAL_DMA_Abort_IT+0xd8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01a      	beq.n	800361e <HAL_DMA_Abort_IT+0x96>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <HAL_DMA_Abort_IT+0xdc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d012      	beq.n	8003618 <HAL_DMA_Abort_IT+0x90>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <HAL_DMA_Abort_IT+0xe0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00a      	beq.n	8003612 <HAL_DMA_Abort_IT+0x8a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1a      	ldr	r2, [pc, #104]	; (800366c <HAL_DMA_Abort_IT+0xe4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d102      	bne.n	800360c <HAL_DMA_Abort_IT+0x84>
 8003606:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800360a:	e00e      	b.n	800362a <HAL_DMA_Abort_IT+0xa2>
 800360c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003610:	e00b      	b.n	800362a <HAL_DMA_Abort_IT+0xa2>
 8003612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003616:	e008      	b.n	800362a <HAL_DMA_Abort_IT+0xa2>
 8003618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800361c:	e005      	b.n	800362a <HAL_DMA_Abort_IT+0xa2>
 800361e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003622:	e002      	b.n	800362a <HAL_DMA_Abort_IT+0xa2>
 8003624:	2310      	movs	r3, #16
 8003626:	e000      	b.n	800362a <HAL_DMA_Abort_IT+0xa2>
 8003628:	2301      	movs	r3, #1
 800362a:	4a11      	ldr	r2, [pc, #68]	; (8003670 <HAL_DMA_Abort_IT+0xe8>)
 800362c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
    } 
  }
  return status;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40020008 	.word	0x40020008
 800365c:	4002001c 	.word	0x4002001c
 8003660:	40020030 	.word	0x40020030
 8003664:	40020044 	.word	0x40020044
 8003668:	40020058 	.word	0x40020058
 800366c:	4002006c 	.word	0x4002006c
 8003670:	40020000 	.word	0x40020000

08003674 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	2204      	movs	r2, #4
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d04f      	beq.n	800373c <HAL_DMA_IRQHandler+0xc8>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d04a      	beq.n	800373c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d107      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0204 	bic.w	r2, r2, #4
 80036c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a66      	ldr	r2, [pc, #408]	; (8003864 <HAL_DMA_IRQHandler+0x1f0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d029      	beq.n	8003722 <HAL_DMA_IRQHandler+0xae>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a65      	ldr	r2, [pc, #404]	; (8003868 <HAL_DMA_IRQHandler+0x1f4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_DMA_IRQHandler+0xaa>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a63      	ldr	r2, [pc, #396]	; (800386c <HAL_DMA_IRQHandler+0x1f8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01a      	beq.n	8003718 <HAL_DMA_IRQHandler+0xa4>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a62      	ldr	r2, [pc, #392]	; (8003870 <HAL_DMA_IRQHandler+0x1fc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d012      	beq.n	8003712 <HAL_DMA_IRQHandler+0x9e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a60      	ldr	r2, [pc, #384]	; (8003874 <HAL_DMA_IRQHandler+0x200>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00a      	beq.n	800370c <HAL_DMA_IRQHandler+0x98>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a5f      	ldr	r2, [pc, #380]	; (8003878 <HAL_DMA_IRQHandler+0x204>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d102      	bne.n	8003706 <HAL_DMA_IRQHandler+0x92>
 8003700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003704:	e00e      	b.n	8003724 <HAL_DMA_IRQHandler+0xb0>
 8003706:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800370a:	e00b      	b.n	8003724 <HAL_DMA_IRQHandler+0xb0>
 800370c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003710:	e008      	b.n	8003724 <HAL_DMA_IRQHandler+0xb0>
 8003712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003716:	e005      	b.n	8003724 <HAL_DMA_IRQHandler+0xb0>
 8003718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800371c:	e002      	b.n	8003724 <HAL_DMA_IRQHandler+0xb0>
 800371e:	2340      	movs	r3, #64	; 0x40
 8003720:	e000      	b.n	8003724 <HAL_DMA_IRQHandler+0xb0>
 8003722:	2304      	movs	r3, #4
 8003724:	4a55      	ldr	r2, [pc, #340]	; (800387c <HAL_DMA_IRQHandler+0x208>)
 8003726:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8094 	beq.w	800385a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800373a:	e08e      	b.n	800385a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2202      	movs	r2, #2
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d056      	beq.n	80037fa <HAL_DMA_IRQHandler+0x186>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d051      	beq.n	80037fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 020a 	bic.w	r2, r2, #10
 8003772:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a38      	ldr	r2, [pc, #224]	; (8003864 <HAL_DMA_IRQHandler+0x1f0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d029      	beq.n	80037da <HAL_DMA_IRQHandler+0x166>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a37      	ldr	r2, [pc, #220]	; (8003868 <HAL_DMA_IRQHandler+0x1f4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d022      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x162>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a35      	ldr	r2, [pc, #212]	; (800386c <HAL_DMA_IRQHandler+0x1f8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01a      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x15c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a34      	ldr	r2, [pc, #208]	; (8003870 <HAL_DMA_IRQHandler+0x1fc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d012      	beq.n	80037ca <HAL_DMA_IRQHandler+0x156>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a32      	ldr	r2, [pc, #200]	; (8003874 <HAL_DMA_IRQHandler+0x200>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00a      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x150>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a31      	ldr	r2, [pc, #196]	; (8003878 <HAL_DMA_IRQHandler+0x204>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d102      	bne.n	80037be <HAL_DMA_IRQHandler+0x14a>
 80037b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037bc:	e00e      	b.n	80037dc <HAL_DMA_IRQHandler+0x168>
 80037be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c2:	e00b      	b.n	80037dc <HAL_DMA_IRQHandler+0x168>
 80037c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c8:	e008      	b.n	80037dc <HAL_DMA_IRQHandler+0x168>
 80037ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ce:	e005      	b.n	80037dc <HAL_DMA_IRQHandler+0x168>
 80037d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d4:	e002      	b.n	80037dc <HAL_DMA_IRQHandler+0x168>
 80037d6:	2320      	movs	r3, #32
 80037d8:	e000      	b.n	80037dc <HAL_DMA_IRQHandler+0x168>
 80037da:	2302      	movs	r3, #2
 80037dc:	4a27      	ldr	r2, [pc, #156]	; (800387c <HAL_DMA_IRQHandler+0x208>)
 80037de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d034      	beq.n	800385a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037f8:	e02f      	b.n	800385a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2208      	movs	r2, #8
 8003800:	409a      	lsls	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d028      	beq.n	800385c <HAL_DMA_IRQHandler+0x1e8>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d023      	beq.n	800385c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 020e 	bic.w	r2, r2, #14
 8003822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
    }
  }
  return;
 800385a:	bf00      	nop
 800385c:	bf00      	nop
}
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40020008 	.word	0x40020008
 8003868:	4002001c 	.word	0x4002001c
 800386c:	40020030 	.word	0x40020030
 8003870:	40020044 	.word	0x40020044
 8003874:	40020058 	.word	0x40020058
 8003878:	4002006c 	.word	0x4002006c
 800387c:	40020000 	.word	0x40020000

08003880 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f202 	lsl.w	r2, r1, r2
 800389c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d108      	bne.n	80038c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038be:	e007      	b.n	80038d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038dc:	b480      	push	{r7}
 80038de:	b08b      	sub	sp, #44	; 0x2c
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038ea:	2300      	movs	r3, #0
 80038ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ee:	e169      	b.n	8003bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038f0:	2201      	movs	r2, #1
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	429a      	cmp	r2, r3
 800390a:	f040 8158 	bne.w	8003bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a9a      	ldr	r2, [pc, #616]	; (8003b7c <HAL_GPIO_Init+0x2a0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d05e      	beq.n	80039d6 <HAL_GPIO_Init+0xfa>
 8003918:	4a98      	ldr	r2, [pc, #608]	; (8003b7c <HAL_GPIO_Init+0x2a0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d875      	bhi.n	8003a0a <HAL_GPIO_Init+0x12e>
 800391e:	4a98      	ldr	r2, [pc, #608]	; (8003b80 <HAL_GPIO_Init+0x2a4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d058      	beq.n	80039d6 <HAL_GPIO_Init+0xfa>
 8003924:	4a96      	ldr	r2, [pc, #600]	; (8003b80 <HAL_GPIO_Init+0x2a4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d86f      	bhi.n	8003a0a <HAL_GPIO_Init+0x12e>
 800392a:	4a96      	ldr	r2, [pc, #600]	; (8003b84 <HAL_GPIO_Init+0x2a8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d052      	beq.n	80039d6 <HAL_GPIO_Init+0xfa>
 8003930:	4a94      	ldr	r2, [pc, #592]	; (8003b84 <HAL_GPIO_Init+0x2a8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d869      	bhi.n	8003a0a <HAL_GPIO_Init+0x12e>
 8003936:	4a94      	ldr	r2, [pc, #592]	; (8003b88 <HAL_GPIO_Init+0x2ac>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d04c      	beq.n	80039d6 <HAL_GPIO_Init+0xfa>
 800393c:	4a92      	ldr	r2, [pc, #584]	; (8003b88 <HAL_GPIO_Init+0x2ac>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d863      	bhi.n	8003a0a <HAL_GPIO_Init+0x12e>
 8003942:	4a92      	ldr	r2, [pc, #584]	; (8003b8c <HAL_GPIO_Init+0x2b0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d046      	beq.n	80039d6 <HAL_GPIO_Init+0xfa>
 8003948:	4a90      	ldr	r2, [pc, #576]	; (8003b8c <HAL_GPIO_Init+0x2b0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d85d      	bhi.n	8003a0a <HAL_GPIO_Init+0x12e>
 800394e:	2b12      	cmp	r3, #18
 8003950:	d82a      	bhi.n	80039a8 <HAL_GPIO_Init+0xcc>
 8003952:	2b12      	cmp	r3, #18
 8003954:	d859      	bhi.n	8003a0a <HAL_GPIO_Init+0x12e>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <HAL_GPIO_Init+0x80>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	080039d7 	.word	0x080039d7
 8003960:	080039b1 	.word	0x080039b1
 8003964:	080039c3 	.word	0x080039c3
 8003968:	08003a05 	.word	0x08003a05
 800396c:	08003a0b 	.word	0x08003a0b
 8003970:	08003a0b 	.word	0x08003a0b
 8003974:	08003a0b 	.word	0x08003a0b
 8003978:	08003a0b 	.word	0x08003a0b
 800397c:	08003a0b 	.word	0x08003a0b
 8003980:	08003a0b 	.word	0x08003a0b
 8003984:	08003a0b 	.word	0x08003a0b
 8003988:	08003a0b 	.word	0x08003a0b
 800398c:	08003a0b 	.word	0x08003a0b
 8003990:	08003a0b 	.word	0x08003a0b
 8003994:	08003a0b 	.word	0x08003a0b
 8003998:	08003a0b 	.word	0x08003a0b
 800399c:	08003a0b 	.word	0x08003a0b
 80039a0:	080039b9 	.word	0x080039b9
 80039a4:	080039cd 	.word	0x080039cd
 80039a8:	4a79      	ldr	r2, [pc, #484]	; (8003b90 <HAL_GPIO_Init+0x2b4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039ae:	e02c      	b.n	8003a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	623b      	str	r3, [r7, #32]
          break;
 80039b6:	e029      	b.n	8003a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	3304      	adds	r3, #4
 80039be:	623b      	str	r3, [r7, #32]
          break;
 80039c0:	e024      	b.n	8003a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	3308      	adds	r3, #8
 80039c8:	623b      	str	r3, [r7, #32]
          break;
 80039ca:	e01f      	b.n	8003a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	330c      	adds	r3, #12
 80039d2:	623b      	str	r3, [r7, #32]
          break;
 80039d4:	e01a      	b.n	8003a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039de:	2304      	movs	r3, #4
 80039e0:	623b      	str	r3, [r7, #32]
          break;
 80039e2:	e013      	b.n	8003a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039ec:	2308      	movs	r3, #8
 80039ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	611a      	str	r2, [r3, #16]
          break;
 80039f6:	e009      	b.n	8003a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039f8:	2308      	movs	r3, #8
 80039fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	615a      	str	r2, [r3, #20]
          break;
 8003a02:	e003      	b.n	8003a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
          break;
 8003a08:	e000      	b.n	8003a0c <HAL_GPIO_Init+0x130>
          break;
 8003a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	d801      	bhi.n	8003a16 <HAL_GPIO_Init+0x13a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	e001      	b.n	8003a1a <HAL_GPIO_Init+0x13e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2bff      	cmp	r3, #255	; 0xff
 8003a20:	d802      	bhi.n	8003a28 <HAL_GPIO_Init+0x14c>
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	e002      	b.n	8003a2e <HAL_GPIO_Init+0x152>
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	3b08      	subs	r3, #8
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	210f      	movs	r1, #15
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	401a      	ands	r2, r3
 8003a40:	6a39      	ldr	r1, [r7, #32]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80b1 	beq.w	8003bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a5c:	4b4d      	ldr	r3, [pc, #308]	; (8003b94 <HAL_GPIO_Init+0x2b8>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4a4c      	ldr	r2, [pc, #304]	; (8003b94 <HAL_GPIO_Init+0x2b8>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6193      	str	r3, [r2, #24]
 8003a68:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_GPIO_Init+0x2b8>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a74:	4a48      	ldr	r2, [pc, #288]	; (8003b98 <HAL_GPIO_Init+0x2bc>)
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	220f      	movs	r2, #15
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a40      	ldr	r2, [pc, #256]	; (8003b9c <HAL_GPIO_Init+0x2c0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_GPIO_Init+0x1ec>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3f      	ldr	r2, [pc, #252]	; (8003ba0 <HAL_GPIO_Init+0x2c4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_GPIO_Init+0x1e8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a3e      	ldr	r2, [pc, #248]	; (8003ba4 <HAL_GPIO_Init+0x2c8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <HAL_GPIO_Init+0x1e4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3d      	ldr	r2, [pc, #244]	; (8003ba8 <HAL_GPIO_Init+0x2cc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_GPIO_Init+0x1e0>
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e006      	b.n	8003aca <HAL_GPIO_Init+0x1ee>
 8003abc:	2304      	movs	r3, #4
 8003abe:	e004      	b.n	8003aca <HAL_GPIO_Init+0x1ee>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e002      	b.n	8003aca <HAL_GPIO_Init+0x1ee>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <HAL_GPIO_Init+0x1ee>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	f002 0203 	and.w	r2, r2, #3
 8003ad0:	0092      	lsls	r2, r2, #2
 8003ad2:	4093      	lsls	r3, r2
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ada:	492f      	ldr	r1, [pc, #188]	; (8003b98 <HAL_GPIO_Init+0x2bc>)
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003af4:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	492c      	ldr	r1, [pc, #176]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
 8003b00:	e006      	b.n	8003b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b02:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	4928      	ldr	r1, [pc, #160]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d006      	beq.n	8003b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b1c:	4b23      	ldr	r3, [pc, #140]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4922      	ldr	r1, [pc, #136]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
 8003b28:	e006      	b.n	8003b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	491e      	ldr	r1, [pc, #120]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	4918      	ldr	r1, [pc, #96]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	4914      	ldr	r1, [pc, #80]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d021      	beq.n	8003bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	490e      	ldr	r1, [pc, #56]	; (8003bac <HAL_GPIO_Init+0x2d0>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
 8003b78:	e021      	b.n	8003bbe <HAL_GPIO_Init+0x2e2>
 8003b7a:	bf00      	nop
 8003b7c:	10320000 	.word	0x10320000
 8003b80:	10310000 	.word	0x10310000
 8003b84:	10220000 	.word	0x10220000
 8003b88:	10210000 	.word	0x10210000
 8003b8c:	10120000 	.word	0x10120000
 8003b90:	10110000 	.word	0x10110000
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40010800 	.word	0x40010800
 8003ba0:	40010c00 	.word	0x40010c00
 8003ba4:	40011000 	.word	0x40011000
 8003ba8:	40011400 	.word	0x40011400
 8003bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	4909      	ldr	r1, [pc, #36]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	fa22 f303 	lsr.w	r3, r2, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f47f ae8e 	bne.w	80038f0 <HAL_GPIO_Init+0x14>
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	372c      	adds	r7, #44	; 0x2c
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	40010400 	.word	0x40010400

08003be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bf4:	787b      	ldrb	r3, [r7, #1]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c00:	e003      	b.n	8003c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	041a      	lsls	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	041a      	lsls	r2, r3, #16
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	43d9      	mvns	r1, r3
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	400b      	ands	r3, r1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	611a      	str	r2, [r3, #16]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e12b      	b.n	8003eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe fd1a 	bl	80026a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cac:	f000 fce4 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4a81      	ldr	r2, [pc, #516]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d807      	bhi.n	8003ccc <HAL_I2C_Init+0x84>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_I2C_Init+0x278>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bf94      	ite	ls
 8003cc4:	2301      	movls	r3, #1
 8003cc6:	2300      	movhi	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e006      	b.n	8003cda <HAL_I2C_Init+0x92>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a7d      	ldr	r2, [pc, #500]	; (8003ec4 <HAL_I2C_Init+0x27c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	bf94      	ite	ls
 8003cd4:	2301      	movls	r3, #1
 8003cd6:	2300      	movhi	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0e7      	b.n	8003eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a78      	ldr	r2, [pc, #480]	; (8003ec8 <HAL_I2C_Init+0x280>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0c9b      	lsrs	r3, r3, #18
 8003cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a6a      	ldr	r2, [pc, #424]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d802      	bhi.n	8003d1c <HAL_I2C_Init+0xd4>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	e009      	b.n	8003d30 <HAL_I2C_Init+0xe8>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	4a69      	ldr	r2, [pc, #420]	; (8003ecc <HAL_I2C_Init+0x284>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	3301      	adds	r3, #1
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	495c      	ldr	r1, [pc, #368]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	d819      	bhi.n	8003d84 <HAL_I2C_Init+0x13c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e59      	subs	r1, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d5e:	1c59      	adds	r1, r3, #1
 8003d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d64:	400b      	ands	r3, r1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_I2C_Init+0x138>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1e59      	subs	r1, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7e:	e051      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003d80:	2304      	movs	r3, #4
 8003d82:	e04f      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <HAL_I2C_Init+0x168>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1e58      	subs	r0, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	440b      	add	r3, r1
 8003d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e012      	b.n	8003dd6 <HAL_I2C_Init+0x18e>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e58      	subs	r0, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	0099      	lsls	r1, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Init+0x196>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e022      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10e      	bne.n	8003e04 <HAL_I2C_Init+0x1bc>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1e58      	subs	r0, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	440b      	add	r3, r1
 8003df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e02:	e00f      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1e58      	subs	r0, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	0099      	lsls	r1, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	6809      	ldr	r1, [r1, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6911      	ldr	r1, [r2, #16]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	000186a0 	.word	0x000186a0
 8003ec0:	001e847f 	.word	0x001e847f
 8003ec4:	003d08ff 	.word	0x003d08ff
 8003ec8:	431bde83 	.word	0x431bde83
 8003ecc:	10624dd3 	.word	0x10624dd3

08003ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e26c      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8087 	beq.w	8003ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef0:	4b92      	ldr	r3, [pc, #584]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d00c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003efc:	4b8f      	ldr	r3, [pc, #572]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d112      	bne.n	8003f2e <HAL_RCC_OscConfig+0x5e>
 8003f08:	4b8c      	ldr	r3, [pc, #560]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f16:	4b89      	ldr	r3, [pc, #548]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d06c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x12c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d168      	bne.n	8003ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e246      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x76>
 8003f38:	4b80      	ldr	r3, [pc, #512]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a7f      	ldr	r2, [pc, #508]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e02e      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x98>
 8003f4e:	4b7b      	ldr	r3, [pc, #492]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7a      	ldr	r2, [pc, #488]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b78      	ldr	r3, [pc, #480]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a77      	ldr	r2, [pc, #476]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e01d      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0xbc>
 8003f72:	4b72      	ldr	r3, [pc, #456]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a71      	ldr	r2, [pc, #452]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b6f      	ldr	r3, [pc, #444]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6e      	ldr	r2, [pc, #440]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
 8003f8c:	4b6b      	ldr	r3, [pc, #428]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a6a      	ldr	r2, [pc, #424]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a67      	ldr	r2, [pc, #412]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fece 	bl	8002d4c <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fe feca 	bl	8002d4c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e1fa      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xe4>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe feba 	bl	8002d4c <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe feb6 	bl	8002d4c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e1e6      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x10c>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d063      	beq.n	80040d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800400a:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004016:	4b49      	ldr	r3, [pc, #292]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b08      	cmp	r3, #8
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x18c>
 8004022:	4b46      	ldr	r3, [pc, #280]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d116      	bne.n	800405c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	4b43      	ldr	r3, [pc, #268]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x176>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1ba      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4939      	ldr	r1, [pc, #228]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	e03a      	b.n	80040d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004064:	4b36      	ldr	r3, [pc, #216]	; (8004140 <HAL_RCC_OscConfig+0x270>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fe fe6f 	bl	8002d4c <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004072:	f7fe fe6b 	bl	8002d4c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e19b      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	4b2d      	ldr	r3, [pc, #180]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4927      	ldr	r1, [pc, #156]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	4b26      	ldr	r3, [pc, #152]	; (8004140 <HAL_RCC_OscConfig+0x270>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fe4e 	bl	8002d4c <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fe fe4a 	bl	8002d4c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e17a      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03a      	beq.n	8004154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d019      	beq.n	800411a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e6:	4b17      	ldr	r3, [pc, #92]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ec:	f7fe fe2e 	bl	8002d4c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fe fe2a 	bl	8002d4c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e15a      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <HAL_RCC_OscConfig+0x26c>)
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004112:	2001      	movs	r0, #1
 8004114:	f000 fad8 	bl	80046c8 <RCC_Delay>
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004120:	f7fe fe14 	bl	8002d4c <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004126:	e00f      	b.n	8004148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004128:	f7fe fe10 	bl	8002d4c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d908      	bls.n	8004148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e140      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	42420000 	.word	0x42420000
 8004144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	4b9e      	ldr	r3, [pc, #632]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e9      	bne.n	8004128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a6 	beq.w	80042ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004166:	4b97      	ldr	r3, [pc, #604]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	4b94      	ldr	r3, [pc, #592]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4a93      	ldr	r2, [pc, #588]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	61d3      	str	r3, [r2, #28]
 800417e:	4b91      	ldr	r3, [pc, #580]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418a:	2301      	movs	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418e:	4b8e      	ldr	r3, [pc, #568]	; (80043c8 <HAL_RCC_OscConfig+0x4f8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d118      	bne.n	80041cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800419a:	4b8b      	ldr	r3, [pc, #556]	; (80043c8 <HAL_RCC_OscConfig+0x4f8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a8a      	ldr	r2, [pc, #552]	; (80043c8 <HAL_RCC_OscConfig+0x4f8>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a6:	f7fe fdd1 	bl	8002d4c <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fe fdcd 	bl	8002d4c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b64      	cmp	r3, #100	; 0x64
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0fd      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	4b81      	ldr	r3, [pc, #516]	; (80043c8 <HAL_RCC_OscConfig+0x4f8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x312>
 80041d4:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4a7a      	ldr	r2, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6213      	str	r3, [r2, #32]
 80041e0:	e02d      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x334>
 80041ea:	4b76      	ldr	r3, [pc, #472]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4a75      	ldr	r2, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	6213      	str	r3, [r2, #32]
 80041f6:	4b73      	ldr	r3, [pc, #460]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4a72      	ldr	r2, [pc, #456]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	6213      	str	r3, [r2, #32]
 8004202:	e01c      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d10c      	bne.n	8004226 <HAL_RCC_OscConfig+0x356>
 800420c:	4b6d      	ldr	r3, [pc, #436]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4a6c      	ldr	r2, [pc, #432]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4a69      	ldr	r2, [pc, #420]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6213      	str	r3, [r2, #32]
 8004224:	e00b      	b.n	800423e <HAL_RCC_OscConfig+0x36e>
 8004226:	4b67      	ldr	r3, [pc, #412]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4a66      	ldr	r2, [pc, #408]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6213      	str	r3, [r2, #32]
 8004232:	4b64      	ldr	r3, [pc, #400]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4a63      	ldr	r2, [pc, #396]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d015      	beq.n	8004272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004246:	f7fe fd81 	bl	8002d4c <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fe fd7d 	bl	8002d4c <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0ab      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	4b57      	ldr	r3, [pc, #348]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ee      	beq.n	800424e <HAL_RCC_OscConfig+0x37e>
 8004270:	e014      	b.n	800429c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fe fd6b 	bl	8002d4c <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fe fd67 	bl	8002d4c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e095      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	4b4c      	ldr	r3, [pc, #304]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ee      	bne.n	800427a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4b48      	ldr	r3, [pc, #288]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4a47      	ldr	r2, [pc, #284]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8081 	beq.w	80043ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b8:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d061      	beq.n	8004388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d146      	bne.n	800435a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042cc:	4b3f      	ldr	r3, [pc, #252]	; (80043cc <HAL_RCC_OscConfig+0x4fc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fe fd3b 	bl	8002d4c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042da:	f7fe fd37 	bl	8002d4c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e067      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d108      	bne.n	8004314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004302:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	492d      	ldr	r1, [pc, #180]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a19      	ldr	r1, [r3, #32]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	430b      	orrs	r3, r1
 8004326:	4927      	ldr	r1, [pc, #156]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_RCC_OscConfig+0x4fc>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fe fd0b 	bl	8002d4c <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe fd07 	bl	8002d4c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e037      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800434c:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x46a>
 8004358:	e02f      	b.n	80043ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <HAL_RCC_OscConfig+0x4fc>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe fcf4 	bl	8002d4c <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004368:	f7fe fcf0 	bl	8002d4c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e020      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x498>
 8004386:	e018      	b.n	80043ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e013      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_OscConfig+0x4f4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d001      	beq.n	80043ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40007000 	.word	0x40007000
 80043cc:	42420060 	.word	0x42420060

080043d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0d0      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d910      	bls.n	8004414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b67      	ldr	r3, [pc, #412]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0207 	bic.w	r2, r3, #7
 80043fa:	4965      	ldr	r1, [pc, #404]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b63      	ldr	r3, [pc, #396]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0b8      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800442c:	4b59      	ldr	r3, [pc, #356]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a58      	ldr	r2, [pc, #352]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004444:	4b53      	ldr	r3, [pc, #332]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a52      	ldr	r2, [pc, #328]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800444e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004450:	4b50      	ldr	r3, [pc, #320]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	494d      	ldr	r1, [pc, #308]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d040      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d115      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e07f      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b41      	ldr	r3, [pc, #260]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e073      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449e:	4b3d      	ldr	r3, [pc, #244]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e06b      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ae:	4b39      	ldr	r3, [pc, #228]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4936      	ldr	r1, [pc, #216]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c0:	f7fe fc44 	bl	8002d4c <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	e00a      	b.n	80044de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c8:	f7fe fc40 	bl	8002d4c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e053      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 020c 	and.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1eb      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b27      	ldr	r3, [pc, #156]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d210      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 0207 	bic.w	r2, r3, #7
 8004506:	4922      	ldr	r1, [pc, #136]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b20      	ldr	r3, [pc, #128]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e032      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800452c:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4916      	ldr	r1, [pc, #88]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	490e      	ldr	r1, [pc, #56]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800455e:	f000 f821 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004562:	4602      	mov	r2, r0
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	490a      	ldr	r1, [pc, #40]	; (8004598 <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	5ccb      	ldrb	r3, [r1, r3]
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <HAL_RCC_ClockConfig+0x1cc>)
 8004578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCC_ClockConfig+0x1d0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fba2 	bl	8002cc8 <HAL_InitTick>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40022000 	.word	0x40022000
 8004594:	40021000 	.word	0x40021000
 8004598:	0800a854 	.word	0x0800a854
 800459c:	20000004 	.word	0x20000004
 80045a0:	20000008 	.word	0x20000008

080045a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	b490      	push	{r4, r7}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045aa:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045ac:	1d3c      	adds	r4, r7, #4
 80045ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045b4:	f240 2301 	movw	r3, #513	; 0x201
 80045b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	2300      	movs	r3, #0
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045ce:	4b22      	ldr	r3, [pc, #136]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d002      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x40>
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x46>
 80045e2:	e02d      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045e4:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e6:	623b      	str	r3, [r7, #32]
      break;
 80045e8:	e02d      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	0c9b      	lsrs	r3, r3, #18
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045f6:	4413      	add	r3, r2
 80045f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004608:	4b13      	ldr	r3, [pc, #76]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	0c5b      	lsrs	r3, r3, #17
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004616:	4413      	add	r3, r2
 8004618:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800461c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4a0e      	ldr	r2, [pc, #56]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004622:	fb02 f203 	mul.w	r2, r2, r3
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	e004      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	4a0b      	ldr	r2, [pc, #44]	; (8004660 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	623b      	str	r3, [r7, #32]
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004642:	623b      	str	r3, [r7, #32]
      break;
 8004644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004646:	6a3b      	ldr	r3, [r7, #32]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3728      	adds	r7, #40	; 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	bc90      	pop	{r4, r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	0800a7fc 	.word	0x0800a7fc
 8004658:	40021000 	.word	0x40021000
 800465c:	007a1200 	.word	0x007a1200
 8004660:	003d0900 	.word	0x003d0900

08004664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <HAL_RCC_GetHCLKFreq+0x10>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	20000004 	.word	0x20000004

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800467c:	f7ff fff2 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	; (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	0800a864 	.word	0x0800a864

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046a4:	f7ff ffde 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	0adb      	lsrs	r3, r3, #11
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	0800a864 	.word	0x0800a864

080046c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <RCC_Delay+0x34>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <RCC_Delay+0x38>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0a5b      	lsrs	r3, r3, #9
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046e4:	bf00      	nop
  }
  while (Delay --);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	60fa      	str	r2, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f9      	bne.n	80046e4 <RCC_Delay+0x1c>
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	20000004 	.word	0x20000004
 8004700:	10624dd3 	.word	0x10624dd3

08004704 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d07d      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004724:	4b4f      	ldr	r3, [pc, #316]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b4c      	ldr	r3, [pc, #304]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	4a4b      	ldr	r2, [pc, #300]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	61d3      	str	r3, [r2, #28]
 800473c:	4b49      	ldr	r3, [pc, #292]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004748:	2301      	movs	r3, #1
 800474a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	4b46      	ldr	r3, [pc, #280]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d118      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004758:	4b43      	ldr	r3, [pc, #268]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a42      	ldr	r2, [pc, #264]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800475e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004764:	f7fe faf2 	bl	8002d4c <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476a:	e008      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476c:	f7fe faee 	bl	8002d4c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	; 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e06d      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b3a      	ldr	r3, [pc, #232]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800478a:	4b36      	ldr	r3, [pc, #216]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d02e      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d027      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a8:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047b8:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047be:	4a29      	ldr	r2, [pc, #164]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d014      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ce:	f7fe fabd 	bl	8002d4c <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d4:	e00a      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d6:	f7fe fab9 	bl	8002d4c <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d901      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e036      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ec:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ee      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f8:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4917      	ldr	r1, [pc, #92]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	4313      	orrs	r3, r2
 8004808:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d105      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004810:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4a13      	ldr	r2, [pc, #76]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800481a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	490b      	ldr	r1, [pc, #44]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4904      	ldr	r1, [pc, #16]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	40007000 	.word	0x40007000
 800486c:	42420440 	.word	0x42420440

08004870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e076      	b.n	8004970 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004892:	d009      	beq.n	80048a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
 800489a:	e005      	b.n	80048a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fd ff30 	bl	8002728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	ea42 0103 	orr.w	r1, r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	0c1a      	lsrs	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f002 0204 	and.w	r2, r2, #4
 800494e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_SPI_Transmit+0x22>
 8004996:	2302      	movs	r3, #2
 8004998:	e126      	b.n	8004be8 <HAL_SPI_Transmit+0x270>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049a2:	f7fe f9d3 	bl	8002d4c <HAL_GetTick>
 80049a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d002      	beq.n	80049be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
 80049ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049bc:	e10b      	b.n	8004bd6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_SPI_Transmit+0x52>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ce:	e102      	b.n	8004bd6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2203      	movs	r2, #3
 80049d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a16:	d10f      	bne.n	8004a38 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d007      	beq.n	8004a56 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5e:	d14b      	bne.n	8004af8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_SPI_Transmit+0xf6>
 8004a68:	8afb      	ldrh	r3, [r7, #22]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d13e      	bne.n	8004aec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	881a      	ldrh	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	1c9a      	adds	r2, r3, #2
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a92:	e02b      	b.n	8004aec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d112      	bne.n	8004ac8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ac6:	e011      	b.n	8004aec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac8:	f7fe f940 	bl	8002d4c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d803      	bhi.n	8004ae0 <HAL_SPI_Transmit+0x168>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d102      	bne.n	8004ae6 <HAL_SPI_Transmit+0x16e>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004aea:	e074      	b.n	8004bd6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1ce      	bne.n	8004a94 <HAL_SPI_Transmit+0x11c>
 8004af6:	e04c      	b.n	8004b92 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <HAL_SPI_Transmit+0x18e>
 8004b00:	8afb      	ldrh	r3, [r7, #22]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d140      	bne.n	8004b88 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b2c:	e02c      	b.n	8004b88 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d113      	bne.n	8004b64 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b62:	e011      	b.n	8004b88 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b64:	f7fe f8f2 	bl	8002d4c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d803      	bhi.n	8004b7c <HAL_SPI_Transmit+0x204>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d102      	bne.n	8004b82 <HAL_SPI_Transmit+0x20a>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b86:	e026      	b.n	8004bd6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1cd      	bne.n	8004b2e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	6839      	ldr	r1, [r7, #0]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fb64 	bl	8005264 <SPI_EndRxTxTransaction>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e000      	b.n	8004bd6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004bd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	; 0x30
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x26>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e18a      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x33c>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1e:	f7fe f895 	bl	8002d4c <HAL_GetTick>
 8004c22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c34:	887b      	ldrh	r3, [r7, #2]
 8004c36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d00f      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x70>
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c46:	d107      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x68>
 8004c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d003      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c5e:	e15b      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x82>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x82>
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c78:	e14e      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d003      	beq.n	8004c8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2205      	movs	r2, #5
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	887a      	ldrh	r2, [r7, #2]
 8004c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	887a      	ldrh	r2, [r7, #2]
 8004ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	887a      	ldrh	r2, [r7, #2]
 8004cb6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d007      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cea:	d178      	bne.n	8004dde <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x10a>
 8004cf4:	8b7b      	ldrh	r3, [r7, #26]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d166      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	881a      	ldrh	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	1c9a      	adds	r2, r3, #2
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1e:	e053      	b.n	8004dc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d11b      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x176>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x176>
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d113      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	881a      	ldrh	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	1c9a      	adds	r2, r3, #2
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d119      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x1b8>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d014      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	b292      	uxth	r2, r2
 8004d8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	1c9a      	adds	r2, r3, #2
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004da4:	2301      	movs	r3, #1
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004da8:	f7fd ffd0 	bl	8002d4c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d807      	bhi.n	8004dc8 <HAL_SPI_TransmitReceive+0x1d8>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d003      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dc6:	e0a7      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1a6      	bne.n	8004d20 <HAL_SPI_TransmitReceive+0x130>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1a1      	bne.n	8004d20 <HAL_SPI_TransmitReceive+0x130>
 8004ddc:	e07c      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x1fc>
 8004de6:	8b7b      	ldrh	r3, [r7, #26]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d16b      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	7812      	ldrb	r2, [r2, #0]
 8004df8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e12:	e057      	b.n	8004ec4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d11c      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x26c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x26c>
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d114      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d119      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x2ae>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d014      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e9e:	f7fd ff55 	bl	8002d4c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d803      	bhi.n	8004eb6 <HAL_SPI_TransmitReceive+0x2c6>
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d102      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x2cc>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ec2:	e029      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1a2      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x224>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d19d      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f9c1 	bl	8005264 <SPI_EndRxTxTransaction>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ef4:	e010      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	e000      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3730      	adds	r7, #48	; 0x30
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	099b      	lsrs	r3, r3, #6
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10f      	bne.n	8004f78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	099b      	lsrs	r3, r3, #6
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
    return;
 8004f76:	e0be      	b.n	80050f6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <HAL_SPI_IRQHandler+0x66>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	09db      	lsrs	r3, r3, #7
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
    return;
 8004f98:	e0ad      	b.n	80050f6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_SPI_IRQHandler+0x80>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80a1 	beq.w	80050f6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 809a 	beq.w	80050f6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	099b      	lsrs	r3, r3, #6
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d023      	beq.n	8005016 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d011      	beq.n	8004ffe <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	f043 0204 	orr.w	r2, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	e00b      	b.n	8005016 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693b      	ldr	r3, [r7, #16]
        return;
 8005014:	e06f      	b.n	80050f6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d014      	beq.n	800504c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	f043 0201 	orr.w	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	2b00      	cmp	r3, #0
 8005052:	d04f      	beq.n	80050f4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005062:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <HAL_SPI_IRQHandler+0x14c>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d034      	beq.n	80050ea <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0203 	bic.w	r2, r2, #3
 800508e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d011      	beq.n	80050bc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_SPI_IRQHandler+0x1c8>)
 800509e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe fa6f 	bl	8003588 <HAL_DMA_Abort_IT>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d016      	beq.n	80050f2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c8:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <HAL_SPI_IRQHandler+0x1c8>)
 80050ca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe fa59 	bl	8003588 <HAL_DMA_Abort_IT>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80050e8:	e003      	b.n	80050f2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f808 	bl	8005100 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050f0:	e000      	b.n	80050f4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80050f2:	bf00      	nop
    return;
 80050f4:	bf00      	nop
  }
}
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800512d 	.word	0x0800512d

08005100 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005120:	b2db      	uxtb	r3, r3
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff ffda 	bl	8005100 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005164:	f7fd fdf2 	bl	8002d4c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	4413      	add	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005174:	f7fd fdea 	bl	8002d4c <HAL_GetTick>
 8005178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800517a:	4b39      	ldr	r3, [pc, #228]	; (8005260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	015b      	lsls	r3, r3, #5
 8005180:	0d1b      	lsrs	r3, r3, #20
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800518a:	e054      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d050      	beq.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005194:	f7fd fdda 	bl	8002d4c <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d902      	bls.n	80051aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d13d      	bne.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c2:	d111      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051cc:	d004      	beq.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d107      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f0:	d10f      	bne.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e017      	b.n	8005256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3b01      	subs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d19b      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000004 	.word	0x20000004

08005264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2200      	movs	r2, #0
 8005278:	2180      	movs	r1, #128	; 0x80
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff ff6a 	bl	8005154 <SPI_WaitFlagStateUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e000      	b.n	8005298 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e041      	b.n	8005336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fd fa90 	bl	80027ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 fc6c 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d001      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e03a      	b.n	80053ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <HAL_TIM_Base_Start_IT+0x98>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_TIM_Base_Start_IT+0x58>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005382:	d009      	beq.n	8005398 <HAL_TIM_Base_Start_IT+0x58>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a14      	ldr	r2, [pc, #80]	; (80053dc <HAL_TIM_Base_Start_IT+0x9c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIM_Base_Start_IT+0x58>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d111      	bne.n	80053bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d010      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	e007      	b.n	80053cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800

080053e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e041      	b.n	800547a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f839 	bl	8005482 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fbca 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_IC_Start_IT+0x1a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e013      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x42>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d104      	bne.n	80054be <HAL_TIM_IC_Start_IT+0x2a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e00b      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x42>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_IC_Start_IT+0x3a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e003      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x42>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <HAL_TIM_IC_Start_IT+0x54>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e013      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x7c>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d104      	bne.n	80054f8 <HAL_TIM_IC_Start_IT+0x64>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e00b      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x7c>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d104      	bne.n	8005508 <HAL_TIM_IC_Start_IT+0x74>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e003      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x7c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800550e:	b2db      	uxtb	r3, r3
 8005510:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d102      	bne.n	800551e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d001      	beq.n	8005522 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0b3      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0x9e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	e013      	b.n	800555a <HAL_TIM_IC_Start_IT+0xc6>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d104      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0xae>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	e00b      	b.n	800555a <HAL_TIM_IC_Start_IT+0xc6>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d104      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0xbe>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	e003      	b.n	800555a <HAL_TIM_IC_Start_IT+0xc6>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0xd6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005568:	e013      	b.n	8005592 <HAL_TIM_IC_Start_IT+0xfe>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xe6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005578:	e00b      	b.n	8005592 <HAL_TIM_IC_Start_IT+0xfe>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0xf6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005588:	e003      	b.n	8005592 <HAL_TIM_IC_Start_IT+0xfe>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d841      	bhi.n	800561c <HAL_TIM_IC_Start_IT+0x188>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <HAL_TIM_IC_Start_IT+0x10c>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	0800561d 	.word	0x0800561d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800561d 	.word	0x0800561d
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	0800561d 	.word	0x0800561d
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800560b 	.word	0x0800560b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0202 	orr.w	r2, r2, #2
 80055e2:	60da      	str	r2, [r3, #12]
      break;
 80055e4:	e01b      	b.n	800561e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0204 	orr.w	r2, r2, #4
 80055f4:	60da      	str	r2, [r3, #12]
      break;
 80055f6:	e012      	b.n	800561e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0208 	orr.w	r2, r2, #8
 8005606:	60da      	str	r2, [r3, #12]
      break;
 8005608:	e009      	b.n	800561e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0210 	orr.w	r2, r2, #16
 8005618:	60da      	str	r2, [r3, #12]
      break;
 800561a:	e000      	b.n	800561e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800561c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fccd 	bl	8005fc6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a18      	ldr	r2, [pc, #96]	; (8005694 <HAL_TIM_IC_Start_IT+0x200>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_TIM_IC_Start_IT+0x1c0>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d009      	beq.n	8005654 <HAL_TIM_IC_Start_IT+0x1c0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a14      	ldr	r2, [pc, #80]	; (8005698 <HAL_TIM_IC_Start_IT+0x204>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_TIM_IC_Start_IT+0x1c0>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <HAL_TIM_IC_Start_IT+0x208>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d111      	bne.n	8005678 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b06      	cmp	r3, #6
 8005664:	d010      	beq.n	8005688 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005676:	e007      	b.n	8005688 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800

080056a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0202 	mvn.w	r2, #2
 80056cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa4e 	bl	8005b84 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa41 	bl	8005b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fa50 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b04      	cmp	r3, #4
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b04      	cmp	r3, #4
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0204 	mvn.w	r2, #4
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa24 	bl	8005b84 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa17 	bl	8005b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa26 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b08      	cmp	r3, #8
 800575c:	d122      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b08      	cmp	r3, #8
 800576a:	d11b      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0208 	mvn.w	r2, #8
 8005774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2204      	movs	r2, #4
 800577a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f9fa 	bl	8005b84 <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9ed 	bl	8005b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f9fc 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b10      	cmp	r3, #16
 80057b0:	d122      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d11b      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0210 	mvn.w	r2, #16
 80057c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2208      	movs	r2, #8
 80057ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9d0 	bl	8005b84 <HAL_TIM_IC_CaptureCallback>
 80057e4:	e005      	b.n	80057f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9c3 	bl	8005b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f9d2 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b01      	cmp	r3, #1
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0201 	mvn.w	r2, #1
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f99e 	bl	8005b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b80      	cmp	r3, #128	; 0x80
 8005830:	d10e      	bne.n	8005850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	2b80      	cmp	r3, #128	; 0x80
 800583e:	d107      	bne.n	8005850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fc47 	bl	80060de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f996 	bl	8005ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b20      	cmp	r3, #32
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b20      	cmp	r3, #32
 8005896:	d107      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0220 	mvn.w	r2, #32
 80058a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fc12 	bl	80060cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_IC_ConfigChannel+0x1a>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e082      	b.n	80059d0 <HAL_TIM_IC_ConfigChannel+0x120>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f000 f9ca 	bl	8005c80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 020c 	bic.w	r2, r2, #12
 80058fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6999      	ldr	r1, [r3, #24]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	619a      	str	r2, [r3, #24]
 800590e:	e05a      	b.n	80059c6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b04      	cmp	r3, #4
 8005914:	d11c      	bne.n	8005950 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f000 fa33 	bl	8005d90 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005938:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6999      	ldr	r1, [r3, #24]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	021a      	lsls	r2, r3, #8
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	619a      	str	r2, [r3, #24]
 800594e:	e03a      	b.n	80059c6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b08      	cmp	r3, #8
 8005954:	d11b      	bne.n	800598e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6819      	ldr	r1, [r3, #0]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f000 fa7e 	bl	8005e66 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 020c 	bic.w	r2, r2, #12
 8005978:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69d9      	ldr	r1, [r3, #28]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	61da      	str	r2, [r3, #28]
 800598c:	e01b      	b.n	80059c6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6819      	ldr	r1, [r3, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f000 fa9d 	bl	8005edc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	021a      	lsls	r2, r3, #8
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_TIM_ConfigClockSource+0x18>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e0b3      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x180>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a28:	d03e      	beq.n	8005aa8 <HAL_TIM_ConfigClockSource+0xd0>
 8005a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2e:	f200 8087 	bhi.w	8005b40 <HAL_TIM_ConfigClockSource+0x168>
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a36:	f000 8085 	beq.w	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3e:	d87f      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x168>
 8005a40:	2b70      	cmp	r3, #112	; 0x70
 8005a42:	d01a      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0xa2>
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d87b      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x168>
 8005a48:	2b60      	cmp	r3, #96	; 0x60
 8005a4a:	d050      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x116>
 8005a4c:	2b60      	cmp	r3, #96	; 0x60
 8005a4e:	d877      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x168>
 8005a50:	2b50      	cmp	r3, #80	; 0x50
 8005a52:	d03c      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0xf6>
 8005a54:	2b50      	cmp	r3, #80	; 0x50
 8005a56:	d873      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x168>
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	d058      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0x136>
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d86f      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x168>
 8005a60:	2b30      	cmp	r3, #48	; 0x30
 8005a62:	d064      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x156>
 8005a64:	2b30      	cmp	r3, #48	; 0x30
 8005a66:	d86b      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x168>
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	d060      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x156>
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d867      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x168>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d05c      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x156>
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d05a      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a78:	e062      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6899      	ldr	r1, [r3, #8]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f000 fa7d 	bl	8005f88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	609a      	str	r2, [r3, #8]
      break;
 8005aa6:	e04e      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6899      	ldr	r1, [r3, #8]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f000 fa66 	bl	8005f88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aca:	609a      	str	r2, [r3, #8]
      break;
 8005acc:	e03b      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6859      	ldr	r1, [r3, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f000 f92a 	bl	8005d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2150      	movs	r1, #80	; 0x50
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fa34 	bl	8005f54 <TIM_ITRx_SetConfig>
      break;
 8005aec:	e02b      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6859      	ldr	r1, [r3, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f000 f984 	bl	8005e08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2160      	movs	r1, #96	; 0x60
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fa24 	bl	8005f54 <TIM_ITRx_SetConfig>
      break;
 8005b0c:	e01b      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	6859      	ldr	r1, [r3, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f000 f90a 	bl	8005d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2140      	movs	r1, #64	; 0x40
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fa14 	bl	8005f54 <TIM_ITRx_SetConfig>
      break;
 8005b2c:	e00b      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f000 fa0b 	bl	8005f54 <TIM_ITRx_SetConfig>
        break;
 8005b3e:	e002      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b40:	bf00      	nop
 8005b42:	e000      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
	...

08005bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a29      	ldr	r2, [pc, #164]	; (8005c74 <TIM_Base_SetConfig+0xb8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <TIM_Base_SetConfig+0x30>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bda:	d007      	beq.n	8005bec <TIM_Base_SetConfig+0x30>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a26      	ldr	r2, [pc, #152]	; (8005c78 <TIM_Base_SetConfig+0xbc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_Base_SetConfig+0x30>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a25      	ldr	r2, [pc, #148]	; (8005c7c <TIM_Base_SetConfig+0xc0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d108      	bne.n	8005bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <TIM_Base_SetConfig+0xb8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <TIM_Base_SetConfig+0x62>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d007      	beq.n	8005c1e <TIM_Base_SetConfig+0x62>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <TIM_Base_SetConfig+0xbc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_Base_SetConfig+0x62>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <TIM_Base_SetConfig+0xc0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d108      	bne.n	8005c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a07      	ldr	r2, [pc, #28]	; (8005c74 <TIM_Base_SetConfig+0xb8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d103      	bne.n	8005c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	615a      	str	r2, [r3, #20]
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800

08005c80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <TIM_TI1_SetConfig+0xa8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_TI1_SetConfig+0x46>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb4:	d007      	beq.n	8005cc6 <TIM_TI1_SetConfig+0x46>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <TIM_TI1_SetConfig+0xac>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_TI1_SetConfig+0x46>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <TIM_TI1_SetConfig+0xb0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <TIM_TI1_SetConfig+0x4a>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <TIM_TI1_SetConfig+0x4c>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e003      	b.n	8005cea <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f023 030a 	bic.w	r3, r3, #10
 8005d04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f003 030a 	and.w	r3, r3, #10
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800

08005d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f023 0201 	bic.w	r2, r3, #1
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 030a 	bic.w	r3, r3, #10
 8005d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0210 	bic.w	r2, r3, #16
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	031b      	lsls	r3, r3, #12
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005de2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 0210 	bic.w	r2, r3, #16
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	031b      	lsls	r3, r3, #12
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	621a      	str	r2, [r3, #32]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b087      	sub	sp, #28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ea2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	031b      	lsls	r3, r3, #12
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	031b      	lsls	r3, r3, #12
 8005f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f043 0307 	orr.w	r3, r3, #7
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	609a      	str	r2, [r3, #8]
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	021a      	lsls	r2, r3, #8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	609a      	str	r2, [r3, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2201      	movs	r2, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	401a      	ands	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffe:	431a      	orrs	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr
	...

08006010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e046      	b.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006074:	d009      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d10c      	bne.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4313      	orrs	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800

080060cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr

080060f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e03f      	b.n	8006182 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fc fc22 	bl	8002960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2224      	movs	r2, #36	; 0x24
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fcad 	bl	8006a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	4613      	mov	r3, r2
 8006196:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d11d      	bne.n	80061e0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_UART_Receive_DMA+0x26>
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e016      	b.n	80061e2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_UART_Receive_DMA+0x38>
 80061be:	2302      	movs	r3, #2
 80061c0:	e00f      	b.n	80061e2 <HAL_UART_Receive_DMA+0x58>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	461a      	mov	r2, r3
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fa92 	bl	8006700 <UART_Start_Receive_DMA>
 80061dc:	4603      	mov	r3, r0
 80061de:	e000      	b.n	80061e2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800620c:	2300      	movs	r3, #0
 800620e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10d      	bne.n	800623e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_UART_IRQHandler+0x52>
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fb82 	bl	8006940 <UART_Receive_IT>
      return;
 800623c:	e17b      	b.n	8006536 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80b1 	beq.w	80063a8 <HAL_UART_IRQHandler+0x1bc>
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d105      	bne.n	800625c <HAL_UART_IRQHandler+0x70>
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80a6 	beq.w	80063a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_UART_IRQHandler+0x90>
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	f043 0201 	orr.w	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_UART_IRQHandler+0xb0>
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	f043 0202 	orr.w	r2, r3, #2
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_UART_IRQHandler+0xd0>
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	f043 0204 	orr.w	r2, r3, #4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00f      	beq.n	80062e6 <HAL_UART_IRQHandler+0xfa>
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <HAL_UART_IRQHandler+0xee>
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	f043 0208 	orr.w	r2, r3, #8
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 811e 	beq.w	800652c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <HAL_UART_IRQHandler+0x11e>
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fb1b 	bl	8006940 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	bf14      	ite	ne
 8006318:	2301      	movne	r3, #1
 800631a:	2300      	moveq	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <HAL_UART_IRQHandler+0x146>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d031      	beq.n	8006396 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa5d 	bl	80067f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d023      	beq.n	800638e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006354:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	4a76      	ldr	r2, [pc, #472]	; (800653c <HAL_UART_IRQHandler+0x350>)
 8006364:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd f90c 	bl	8003588 <HAL_DMA_Abort_IT>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d016      	beq.n	80063a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	e00e      	b.n	80063a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8f5 	bl	8006576 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e00a      	b.n	80063a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8f1 	bl	8006576 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	e006      	b.n	80063a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f8ed 	bl	8006576 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063a2:	e0c3      	b.n	800652c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	bf00      	nop
    return;
 80063a6:	e0c1      	b.n	800652c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	f040 80a1 	bne.w	80064f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 809b 	beq.w	80064f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8095 	beq.w	80064f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d04e      	beq.n	800648c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80063f8:	8a3b      	ldrh	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 8098 	beq.w	8006530 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006404:	8a3a      	ldrh	r2, [r7, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	f080 8092 	bcs.w	8006530 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8a3a      	ldrh	r2, [r7, #16]
 8006410:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	2b20      	cmp	r3, #32
 800641a:	d02b      	beq.n	8006474 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800642a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0201 	bic.w	r2, r2, #1
 800643a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0210 	bic.w	r2, r2, #16
 8006468:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	4618      	mov	r0, r3
 8006470:	f7fd f84f 	bl	8003512 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800647c:	b29b      	uxth	r3, r3
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	b29b      	uxth	r3, r3
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f87f 	bl	8006588 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800648a:	e051      	b.n	8006530 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006494:	b29b      	uxth	r3, r3
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d047      	beq.n	8006534 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80064a4:	8a7b      	ldrh	r3, [r7, #18]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d044      	beq.n	8006534 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695a      	ldr	r2, [r3, #20]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0210 	bic.w	r2, r2, #16
 80064e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064e8:	8a7b      	ldrh	r3, [r7, #18]
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f84b 	bl	8006588 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064f2:	e01f      	b.n	8006534 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <HAL_UART_IRQHandler+0x324>
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f9b2 	bl	8006872 <UART_Transmit_IT>
    return;
 800650e:	e012      	b.n	8006536 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <HAL_UART_IRQHandler+0x34a>
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f9f3 	bl	8006910 <UART_EndTransmit_IT>
    return;
 800652a:	e004      	b.n	8006536 <HAL_UART_IRQHandler+0x34a>
    return;
 800652c:	bf00      	nop
 800652e:	e002      	b.n	8006536 <HAL_UART_IRQHandler+0x34a>
      return;
 8006530:	bf00      	nop
 8006532:	e000      	b.n	8006536 <HAL_UART_IRQHandler+0x34a>
      return;
 8006534:	bf00      	nop
  }
}
 8006536:	3728      	adds	r7, #40	; 0x28
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	0800684b 	.word	0x0800684b

08006540 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr

08006552 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr

08006564 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d12a      	bne.n	8006610 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ce:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ee:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0210 	bic.w	r2, r2, #16
 800660e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	2b01      	cmp	r3, #1
 8006616:	d106      	bne.n	8006626 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800661c:	4619      	mov	r1, r3
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7ff ffb2 	bl	8006588 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006624:	e002      	b.n	800662c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff ff93 	bl	8006552 <HAL_UART_RxCpltCallback>
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	2b01      	cmp	r3, #1
 8006648:	d108      	bne.n	800665c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	b29b      	uxth	r3, r3
 8006652:	4619      	mov	r1, r3
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff97 	bl	8006588 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800665a:	e002      	b.n	8006662 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7ff ff81 	bl	8006564 <HAL_UART_RxHalfCpltCallback>
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	bf14      	ite	ne
 800668a:	2301      	movne	r3, #1
 800668c:	2300      	moveq	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b21      	cmp	r3, #33	; 0x21
 800669c:	d108      	bne.n	80066b0 <UART_DMAError+0x46>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2200      	movs	r2, #0
 80066a8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80066aa:	68b8      	ldr	r0, [r7, #8]
 80066ac:	f000 f88c 	bl	80067c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b22      	cmp	r3, #34	; 0x22
 80066d0:	d108      	bne.n	80066e4 <UART_DMAError+0x7a>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2200      	movs	r2, #0
 80066dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80066de:	68b8      	ldr	r0, [r7, #8]
 80066e0:	f000 f887 	bl	80067f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	f043 0210 	orr.w	r2, r3, #16
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066f0:	68b8      	ldr	r0, [r7, #8]
 80066f2:	f7ff ff40 	bl	8006576 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2222      	movs	r2, #34	; 0x22
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	4a23      	ldr	r2, [pc, #140]	; (80067bc <UART_Start_Receive_DMA+0xbc>)
 800672e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <UART_Start_Receive_DMA+0xc0>)
 8006736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	4a21      	ldr	r2, [pc, #132]	; (80067c4 <UART_Start_Receive_DMA+0xc4>)
 800673e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	2200      	movs	r2, #0
 8006746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006748:	f107 0308 	add.w	r3, r7, #8
 800674c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	f7fc fe78 	bl	8003454 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006790:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695a      	ldr	r2, [r3, #20]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0201 	orr.w	r2, r2, #1
 80067a0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067b0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	0800659f 	.word	0x0800659f
 80067c0:	08006635 	.word	0x08006635
 80067c4:	0800666b 	.word	0x0800666b

080067c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80067de:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006808:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	2b01      	cmp	r3, #1
 8006820:	d107      	bne.n	8006832 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0210 	bic.w	r2, r2, #16
 8006830:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fe86 	bl	8006576 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b21      	cmp	r3, #33	; 0x21
 8006884:	d13e      	bne.n	8006904 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688e:	d114      	bne.n	80068ba <UART_Transmit_IT+0x48>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d110      	bne.n	80068ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	1c9a      	adds	r2, r3, #2
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	621a      	str	r2, [r3, #32]
 80068b8:	e008      	b.n	80068cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6211      	str	r1, [r2, #32]
 80068c4:	781a      	ldrb	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4619      	mov	r1, r3
 80068da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10f      	bne.n	8006900 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	e000      	b.n	8006906 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
  }
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fe05 	bl	8006540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b22      	cmp	r3, #34	; 0x22
 8006952:	f040 8099 	bne.w	8006a88 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	d117      	bne.n	8006990 <UART_Receive_IT+0x50>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d113      	bne.n	8006990 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697e:	b29a      	uxth	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	629a      	str	r2, [r3, #40]	; 0x28
 800698e:	e026      	b.n	80069de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	d007      	beq.n	80069b4 <UART_Receive_IT+0x74>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <UART_Receive_IT+0x82>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d106      	bne.n	80069c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e008      	b.n	80069d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	4619      	mov	r1, r3
 80069ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d148      	bne.n	8006a84 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0220 	bic.w	r2, r2, #32
 8006a00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695a      	ldr	r2, [r3, #20]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0201 	bic.w	r2, r2, #1
 8006a20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d123      	bne.n	8006a7a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0210 	bic.w	r2, r2, #16
 8006a46:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b10      	cmp	r3, #16
 8006a54:	d10a      	bne.n	8006a6c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fd88 	bl	8006588 <HAL_UARTEx_RxEventCallback>
 8006a78:	e002      	b.n	8006a80 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fd69 	bl	8006552 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e002      	b.n	8006a8a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e000      	b.n	8006a8a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006a88:	2302      	movs	r3, #2
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ace:	f023 030c 	bic.w	r3, r3, #12
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2c      	ldr	r2, [pc, #176]	; (8006ba8 <UART_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d103      	bne.n	8006b04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006afc:	f7fd fdd0 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	e002      	b.n	8006b0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7fd fdb8 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8006b08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009a      	lsls	r2, r3, #2
 8006b14:	441a      	add	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <UART_SetConfig+0x118>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	0119      	lsls	r1, r3, #4
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009a      	lsls	r2, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b40:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <UART_SetConfig+0x118>)
 8006b42:	fba3 0302 	umull	r0, r3, r3, r2
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	2064      	movs	r0, #100	; 0x64
 8006b4a:	fb00 f303 	mul.w	r3, r0, r3
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	3332      	adds	r3, #50	; 0x32
 8006b54:	4a15      	ldr	r2, [pc, #84]	; (8006bac <UART_SetConfig+0x118>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b60:	4419      	add	r1, r3
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009a      	lsls	r2, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <UART_SetConfig+0x118>)
 8006b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	2064      	movs	r0, #100	; 0x64
 8006b82:	fb00 f303 	mul.w	r3, r0, r3
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	3332      	adds	r3, #50	; 0x32
 8006b8c:	4a07      	ldr	r2, [pc, #28]	; (8006bac <UART_SetConfig+0x118>)
 8006b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	f003 020f 	and.w	r2, r3, #15
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40013800 	.word	0x40013800
 8006bac:	51eb851f 	.word	0x51eb851f

08006bb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006bb4:	4904      	ldr	r1, [pc, #16]	; (8006bc8 <MX_FATFS_Init+0x18>)
 8006bb6:	4805      	ldr	r0, [pc, #20]	; (8006bcc <MX_FATFS_Init+0x1c>)
 8006bb8:	f003 f902 	bl	8009dc0 <FATFS_LinkDriver>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4b03      	ldr	r3, [pc, #12]	; (8006bd0 <MX_FATFS_Init+0x20>)
 8006bc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006bc4:	bf00      	nop
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000bf4 	.word	0x20000bf4
 8006bcc:	20000010 	.word	0x20000010
 8006bd0:	20000bf8 	.word	0x20000bf8

08006bd4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006bd8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr
	...

08006be4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fa fa43 	bl	800107c <SD_disk_initialize>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <USER_initialize+0x28>)
 8006bfc:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <USER_initialize+0x28>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	2000000d 	.word	0x2000000d

08006c10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fa fb17 	bl	8001250 <SD_disk_status>
 8006c22:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8006c3c:	7bf8      	ldrb	r0, [r7, #15]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	f7fa fb18 	bl	8001278 <SD_disk_read>
 8006c48:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8006c62:	7bf8      	ldrb	r0, [r7, #15]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	f7fa fb6f 	bl	800134c <SD_disk_write>
 8006c6e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	603a      	str	r2, [r7, #0]
 8006c82:	71fb      	strb	r3, [r7, #7]
 8006c84:	460b      	mov	r3, r1
 8006c86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006c88:	79b9      	ldrb	r1, [r7, #6]
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fa fbe0 	bl	8001454 <SD_disk_ioctl>
 8006c94:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	4a08      	ldr	r2, [pc, #32]	; (8006cd0 <disk_status+0x30>)
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	79fa      	ldrb	r2, [r7, #7]
 8006cb8:	4905      	ldr	r1, [pc, #20]	; (8006cd0 <disk_status+0x30>)
 8006cba:	440a      	add	r2, r1
 8006cbc:	7a12      	ldrb	r2, [r2, #8]
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4798      	blx	r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	200002cc 	.word	0x200002cc

08006cd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	4a0d      	ldr	r2, [pc, #52]	; (8006d1c <disk_initialize+0x48>)
 8006ce6:	5cd3      	ldrb	r3, [r2, r3]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d111      	bne.n	8006d10 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	4a0b      	ldr	r2, [pc, #44]	; (8006d1c <disk_initialize+0x48>)
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	4a09      	ldr	r2, [pc, #36]	; (8006d1c <disk_initialize+0x48>)
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	79fa      	ldrb	r2, [r7, #7]
 8006d02:	4906      	ldr	r1, [pc, #24]	; (8006d1c <disk_initialize+0x48>)
 8006d04:	440a      	add	r2, r1
 8006d06:	7a12      	ldrb	r2, [r2, #8]
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200002cc 	.word	0x200002cc

08006d20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d20:	b590      	push	{r4, r7, lr}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <disk_read+0x3c>)
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	689c      	ldr	r4, [r3, #8]
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	4a07      	ldr	r2, [pc, #28]	; (8006d5c <disk_read+0x3c>)
 8006d40:	4413      	add	r3, r2
 8006d42:	7a18      	ldrb	r0, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	47a0      	blx	r4
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd90      	pop	{r4, r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	200002cc 	.word	0x200002cc

08006d60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d60:	b590      	push	{r4, r7, lr}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
 8006d72:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <disk_write+0x3c>)
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	68dc      	ldr	r4, [r3, #12]
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4a07      	ldr	r2, [pc, #28]	; (8006d9c <disk_write+0x3c>)
 8006d80:	4413      	add	r3, r2
 8006d82:	7a18      	ldrb	r0, [r3, #8]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	47a0      	blx	r4
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd90      	pop	{r4, r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	200002cc 	.word	0x200002cc

08006da0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	603a      	str	r2, [r7, #0]
 8006daa:	71fb      	strb	r3, [r7, #7]
 8006dac:	460b      	mov	r3, r1
 8006dae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	4a09      	ldr	r2, [pc, #36]	; (8006dd8 <disk_ioctl+0x38>)
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	79fa      	ldrb	r2, [r7, #7]
 8006dbe:	4906      	ldr	r1, [pc, #24]	; (8006dd8 <disk_ioctl+0x38>)
 8006dc0:	440a      	add	r2, r1
 8006dc2:	7a10      	ldrb	r0, [r2, #8]
 8006dc4:	79b9      	ldrb	r1, [r7, #6]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	4798      	blx	r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  return res;
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	200002cc 	.word	0x200002cc

08006ddc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006df0:	e007      	b.n	8006e02 <mem_cpy+0x26>
		*d++ = *s++;
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	1c53      	adds	r3, r2, #1
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	1c59      	adds	r1, r3, #1
 8006dfc:	6179      	str	r1, [r7, #20]
 8006dfe:	7812      	ldrb	r2, [r2, #0]
 8006e00:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	1e5a      	subs	r2, r3, #1
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f2      	bne.n	8006df2 <mem_cpy+0x16>
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006e28:	e005      	b.n	8006e36 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	617a      	str	r2, [r7, #20]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	1e5a      	subs	r2, r3, #1
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f4      	bne.n	8006e2a <mem_set+0x12>
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006e4c:	b480      	push	{r7}
 8006e4e:	b089      	sub	sp, #36	; 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006e64:	bf00      	nop
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00d      	beq.n	8006e8c <mem_cmp+0x40>
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	61fa      	str	r2, [r7, #28]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	61ba      	str	r2, [r7, #24]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	1acb      	subs	r3, r1, r3
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0ec      	beq.n	8006e66 <mem_cmp+0x1a>
	return r;
 8006e8c:	697b      	ldr	r3, [r7, #20]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3724      	adds	r7, #36	; 0x24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006ea2:	e002      	b.n	8006eaa <chk_chr+0x12>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <chk_chr+0x26>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d1f2      	bne.n	8006ea4 <chk_chr+0xc>
	return *str;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr

08006ecc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e035      	b.n	8006f4c <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 8006ee0:	492e      	ldr	r1, [pc, #184]	; (8006f9c <chk_lock+0xd0>)
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d026      	beq.n	8006f42 <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006ef4:	4929      	ldr	r1, [pc, #164]	; (8006f9c <chk_lock+0xd0>)
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d11c      	bne.n	8006f46 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 8006f0c:	4923      	ldr	r1, [pc, #140]	; (8006f9c <chk_lock+0xd0>)
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4613      	mov	r3, r2
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d10f      	bne.n	8006f46 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 8006f26:	491d      	ldr	r1, [pc, #116]	; (8006f9c <chk_lock+0xd0>)
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3308      	adds	r3, #8
 8006f36:	881a      	ldrh	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d102      	bne.n	8006f46 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 8006f40:	e007      	b.n	8006f52 <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d9c6      	bls.n	8006ee0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d109      	bne.n	8006f6c <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <chk_lock+0x98>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d101      	bne.n	8006f68 <chk_lock+0x9c>
 8006f64:	2300      	movs	r3, #0
 8006f66:	e013      	b.n	8006f90 <chk_lock+0xc4>
 8006f68:	2312      	movs	r3, #18
 8006f6a:	e011      	b.n	8006f90 <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10b      	bne.n	8006f8a <chk_lock+0xbe>
 8006f72:	490a      	ldr	r1, [pc, #40]	; (8006f9c <chk_lock+0xd0>)
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4613      	mov	r3, r2
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	330a      	adds	r3, #10
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f88:	d101      	bne.n	8006f8e <chk_lock+0xc2>
 8006f8a:	2310      	movs	r3, #16
 8006f8c:	e000      	b.n	8006f90 <chk_lock+0xc4>
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	200000b4 	.word	0x200000b4

08006fa0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	e002      	b.n	8006fb2 <enq_lock+0x12>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d809      	bhi.n	8006fcc <enq_lock+0x2c>
 8006fb8:	490a      	ldr	r1, [pc, #40]	; (8006fe4 <enq_lock+0x44>)
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1ef      	bne.n	8006fac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	bf14      	ite	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	2300      	moveq	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	200000b4 	.word	0x200000b4

08006fe8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e028      	b.n	800704a <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 8006ff8:	4952      	ldr	r1, [pc, #328]	; (8007144 <inc_lock+0x15c>)
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d119      	bne.n	8007044 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 8007010:	494c      	ldr	r1, [pc, #304]	; (8007144 <inc_lock+0x15c>)
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4613      	mov	r3, r2
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	3304      	adds	r3, #4
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8007026:	429a      	cmp	r2, r3
 8007028:	d10c      	bne.n	8007044 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 800702a:	4946      	ldr	r1, [pc, #280]	; (8007144 <inc_lock+0x15c>)
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4613      	mov	r3, r2
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3308      	adds	r3, #8
 800703a:	881a      	ldrh	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8007040:	429a      	cmp	r2, r3
 8007042:	d006      	beq.n	8007052 <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d9d3      	bls.n	8006ff8 <inc_lock+0x10>
 8007050:	e000      	b.n	8007054 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8007052:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b02      	cmp	r3, #2
 8007058:	d142      	bne.n	80070e0 <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	e002      	b.n	8007066 <inc_lock+0x7e>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d809      	bhi.n	8007080 <inc_lock+0x98>
 800706c:	4935      	ldr	r1, [pc, #212]	; (8007144 <inc_lock+0x15c>)
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4613      	mov	r3, r2
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1ef      	bne.n	8007060 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d101      	bne.n	800708a <inc_lock+0xa2>
 8007086:	2300      	movs	r3, #0
 8007088:	e057      	b.n	800713a <inc_lock+0x152>
		Files[i].fs = dp->fs;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6819      	ldr	r1, [r3, #0]
 800708e:	482d      	ldr	r0, [pc, #180]	; (8007144 <inc_lock+0x15c>)
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4613      	mov	r3, r2
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4403      	add	r3, r0
 800709c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6899      	ldr	r1, [r3, #8]
 80070a2:	4828      	ldr	r0, [pc, #160]	; (8007144 <inc_lock+0x15c>)
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4613      	mov	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4403      	add	r3, r0
 80070b0:	3304      	adds	r3, #4
 80070b2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	88d8      	ldrh	r0, [r3, #6]
 80070b8:	4922      	ldr	r1, [pc, #136]	; (8007144 <inc_lock+0x15c>)
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	3308      	adds	r3, #8
 80070c8:	4602      	mov	r2, r0
 80070ca:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80070cc:	491d      	ldr	r1, [pc, #116]	; (8007144 <inc_lock+0x15c>)
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4613      	mov	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	330a      	adds	r3, #10
 80070dc:	2200      	movs	r2, #0
 80070de:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00c      	beq.n	8007100 <inc_lock+0x118>
 80070e6:	4917      	ldr	r1, [pc, #92]	; (8007144 <inc_lock+0x15c>)
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4613      	mov	r3, r2
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	330a      	adds	r3, #10
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <inc_lock+0x118>
 80070fc:	2300      	movs	r3, #0
 80070fe:	e01c      	b.n	800713a <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10b      	bne.n	800711e <inc_lock+0x136>
 8007106:	490f      	ldr	r1, [pc, #60]	; (8007144 <inc_lock+0x15c>)
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4613      	mov	r3, r2
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	330a      	adds	r3, #10
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	3301      	adds	r3, #1
 800711a:	b299      	uxth	r1, r3
 800711c:	e001      	b.n	8007122 <inc_lock+0x13a>
 800711e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007122:	4808      	ldr	r0, [pc, #32]	; (8007144 <inc_lock+0x15c>)
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4613      	mov	r3, r2
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4403      	add	r3, r0
 8007130:	330a      	adds	r3, #10
 8007132:	460a      	mov	r2, r1
 8007134:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3301      	adds	r3, #1
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr
 8007144:	200000b4 	.word	0x200000b4

08007148 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3b01      	subs	r3, #1
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d82e      	bhi.n	80071ba <dec_lock+0x72>
		n = Files[i].ctr;
 800715c:	491b      	ldr	r1, [pc, #108]	; (80071cc <dec_lock+0x84>)
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4613      	mov	r3, r2
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	330a      	adds	r3, #10
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007170:	89fb      	ldrh	r3, [r7, #14]
 8007172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007176:	d101      	bne.n	800717c <dec_lock+0x34>
 8007178:	2300      	movs	r3, #0
 800717a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800717c:	89fb      	ldrh	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <dec_lock+0x40>
 8007182:	89fb      	ldrh	r3, [r7, #14]
 8007184:	3b01      	subs	r3, #1
 8007186:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007188:	4910      	ldr	r1, [pc, #64]	; (80071cc <dec_lock+0x84>)
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	4613      	mov	r3, r2
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	330a      	adds	r3, #10
 8007198:	89fa      	ldrh	r2, [r7, #14]
 800719a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800719c:	89fb      	ldrh	r3, [r7, #14]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d108      	bne.n	80071b4 <dec_lock+0x6c>
 80071a2:	490a      	ldr	r1, [pc, #40]	; (80071cc <dec_lock+0x84>)
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	737b      	strb	r3, [r7, #13]
 80071b8:	e001      	b.n	80071be <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80071ba:	2302      	movs	r3, #2
 80071bc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80071be:	7b7b      	ldrb	r3, [r7, #13]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc80      	pop	{r7}
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	200000b4 	.word	0x200000b4

080071d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e016      	b.n	800720c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80071de:	4910      	ldr	r1, [pc, #64]	; (8007220 <clear_lock+0x50>)
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4613      	mov	r3, r2
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	440b      	add	r3, r1
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d108      	bne.n	8007206 <clear_lock+0x36>
 80071f4:	490a      	ldr	r1, [pc, #40]	; (8007220 <clear_lock+0x50>)
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4613      	mov	r3, r2
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d9e5      	bls.n	80071de <clear_lock+0xe>
	}
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	200000b4 	.word	0x200000b4

08007224 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8007236:	2b00      	cmp	r3, #0
 8007238:	d038      	beq.n	80072ac <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8007240:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	2301      	movs	r3, #1
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	f7ff fd87 	bl	8006d60 <disk_write>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	e026      	b.n	80072ac <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007276:	429a      	cmp	r2, r3
 8007278:	d218      	bcs.n	80072ac <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	e010      	b.n	80072a6 <sync_window+0x82>
					wsect += fs->fsize;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	2301      	movs	r3, #1
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	f7ff fd60 	bl	8006d60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	613b      	str	r3, [r7, #16]
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d8eb      	bhi.n	8007284 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d01b      	beq.n	8007308 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ffa7 	bl	8007224 <sync_window>
 80072d6:	4603      	mov	r3, r0
 80072d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d113      	bne.n	8007308 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	2301      	movs	r3, #1
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	f7ff fd18 	bl	8006d20 <disk_read>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d004      	beq.n	8007300 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072f6:	f04f 33ff 	mov.w	r3, #4294967295
 80072fa:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff ff82 	bl	8007224 <sync_window>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 809c 	bne.w	8007464 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007332:	2b03      	cmp	r3, #3
 8007334:	f040 8089 	bne.w	800744a <sync_fs+0x138>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800733e:	2b01      	cmp	r3, #1
 8007340:	f040 8083 	bne.w	800744a <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800734c:	461a      	mov	r2, r3
 800734e:	2100      	movs	r1, #0
 8007350:	f7ff fd62 	bl	8006e18 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2255      	movs	r2, #85	; 0x55
 8007358:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	22aa      	movs	r2, #170	; 0xaa
 8007360:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2252      	movs	r2, #82	; 0x52
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2252      	movs	r2, #82	; 0x52
 800736e:	705a      	strb	r2, [r3, #1]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2261      	movs	r2, #97	; 0x61
 8007374:	709a      	strb	r2, [r3, #2]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2241      	movs	r2, #65	; 0x41
 800737a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2272      	movs	r2, #114	; 0x72
 8007380:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2272      	movs	r2, #114	; 0x72
 8007388:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2241      	movs	r2, #65	; 0x41
 8007390:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2261      	movs	r2, #97	; 0x61
 8007398:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	0a1b      	lsrs	r3, r3, #8
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80073d4:	0e1b      	lsrs	r3, r3, #24
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	0a1b      	lsrs	r3, r3, #8
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007406:	0c1b      	lsrs	r3, r3, #16
 8007408:	b2da      	uxtb	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007416:	0e1b      	lsrs	r3, r3, #24
 8007418:	b2da      	uxtb	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800743c:	2301      	movs	r3, #1
 800743e:	f7ff fc8f 	bl	8006d60 <disk_write>
			fs->fsi_flag = 0;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8007450:	2200      	movs	r2, #0
 8007452:	2100      	movs	r1, #0
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff fca3 	bl	8006da0 <disk_ioctl>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <sync_fs+0x152>
			res = FR_DISK_ERR;
 8007460:	2301      	movs	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	3b02      	subs	r3, #2
 800747c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007484:	3b02      	subs	r3, #2
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d301      	bcc.n	8007490 <clust2sect+0x22>
 800748c:	2300      	movs	r3, #0
 800748e:	e00a      	b.n	80074a6 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007496:	461a      	mov	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	fb03 f202 	mul.w	r2, r3, r2
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80074a4:	4413      	add	r3, r2
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bc80      	pop	{r7}
 80074ae:	4770      	bx	lr

080074b0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d905      	bls.n	80074cc <get_fat+0x1c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d302      	bcc.n	80074d2 <get_fat+0x22>
		val = 1;	/* Internal error */
 80074cc:	2301      	movs	r3, #1
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	e0d7      	b.n	8007682 <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295
 80074d6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80074de:	2b03      	cmp	r3, #3
 80074e0:	f000 808f 	beq.w	8007602 <get_fat+0x152>
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	f300 80c2 	bgt.w	800766e <get_fat+0x1be>
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d002      	beq.n	80074f4 <get_fat+0x44>
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d059      	beq.n	80075a6 <get_fat+0xf6>
 80074f2:	e0bc      	b.n	800766e <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800750e:	4619      	mov	r1, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	fbb3 f3f1 	udiv	r3, r3, r1
 8007516:	4413      	add	r3, r2
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff fecb 	bl	80072b6 <move_window>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 80a6 	bne.w	8007674 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	60fa      	str	r2, [r7, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007534:	fbb3 f1f2 	udiv	r1, r3, r2
 8007538:	fb02 f201 	mul.w	r2, r2, r1
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	5cd3      	ldrb	r3, [r2, r3]
 8007542:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007550:	4619      	mov	r1, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	fbb3 f3f1 	udiv	r3, r3, r1
 8007558:	4413      	add	r3, r2
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff feaa 	bl	80072b6 <move_window>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	f040 8087 	bne.w	8007678 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007570:	461a      	mov	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	fbb3 f1f2 	udiv	r1, r3, r2
 8007578:	fb02 f201 	mul.w	r2, r2, r1
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	5cd3      	ldrb	r3, [r2, r3]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	461a      	mov	r2, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	4313      	orrs	r3, r2
 800758a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <get_fat+0xec>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	e002      	b.n	80075a2 <get_fat+0xf2>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075a2:	617b      	str	r3, [r7, #20]
			break;
 80075a4:	e06d      	b.n	8007682 <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	4619      	mov	r1, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80075be:	4413      	add	r3, r2
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fe77 	bl	80072b6 <move_window>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d156      	bne.n	800767c <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80075d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80075dc:	fb02 f201 	mul.w	r2, r2, r1
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4413      	add	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	3301      	adds	r3, #1
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	021b      	lsls	r3, r3, #8
 80075f0:	b21a      	sxth	r2, r3
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b21b      	sxth	r3, r3
 80075f8:	4313      	orrs	r3, r2
 80075fa:	b21b      	sxth	r3, r3
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	617b      	str	r3, [r7, #20]
			break;
 8007600:	e03f      	b.n	8007682 <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800760e:	089b      	lsrs	r3, r3, #2
 8007610:	b29b      	uxth	r3, r3
 8007612:	4619      	mov	r1, r3
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	fbb3 f3f1 	udiv	r3, r3, r1
 800761a:	4413      	add	r3, r2
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff fe49 	bl	80072b6 <move_window>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d12a      	bne.n	8007680 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007634:	fbb3 f1f2 	udiv	r1, r3, r2
 8007638:	fb02 f201 	mul.w	r2, r2, r1
 800763c:	1a9b      	subs	r3, r3, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	3303      	adds	r3, #3
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	061a      	lsls	r2, r3, #24
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	3302      	adds	r3, #2
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	4313      	orrs	r3, r2
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	3201      	adds	r2, #1
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	0212      	lsls	r2, r2, #8
 800765e:	4313      	orrs	r3, r2
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	4313      	orrs	r3, r2
 8007666:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800766a:	617b      	str	r3, [r7, #20]
			break;
 800766c:	e009      	b.n	8007682 <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 800766e:	2301      	movs	r3, #1
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	e006      	b.n	8007682 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007674:	bf00      	nop
 8007676:	e004      	b.n	8007682 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007678:	bf00      	nop
 800767a:	e002      	b.n	8007682 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800767c:	bf00      	nop
 800767e:	e000      	b.n	8007682 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007680:	bf00      	nop
		}
	}

	return val;
 8007682:	697b      	ldr	r3, [r7, #20]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d905      	bls.n	80076aa <put_fat+0x1e>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d302      	bcc.n	80076b0 <put_fat+0x24>
		res = FR_INT_ERR;
 80076aa:	2302      	movs	r3, #2
 80076ac:	77fb      	strb	r3, [r7, #31]
 80076ae:	e128      	b.n	8007902 <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	f000 80c3 	beq.w	8007842 <put_fat+0x1b6>
 80076bc:	2b03      	cmp	r3, #3
 80076be:	f300 8116 	bgt.w	80078ee <put_fat+0x262>
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d003      	beq.n	80076ce <put_fat+0x42>
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	f000 8087 	beq.w	80077da <put_fat+0x14e>
 80076cc:	e10f      	b.n	80078ee <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4413      	add	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80076e8:	4619      	mov	r1, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80076f0:	4413      	add	r3, r2
 80076f2:	4619      	mov	r1, r3
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f7ff fdde 	bl	80072b6 <move_window>
 80076fa:	4603      	mov	r3, r0
 80076fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076fe:	7ffb      	ldrb	r3, [r7, #31]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f040 80f7 	bne.w	80078f4 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	617a      	str	r2, [r7, #20]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007712:	fbb3 f1f2 	udiv	r1, r3, r2
 8007716:	fb02 f201 	mul.w	r2, r2, r1
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00d      	beq.n	8007748 <put_fat+0xbc>
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	b25b      	sxtb	r3, r3
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	b25a      	sxtb	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	011b      	lsls	r3, r3, #4
 800773e:	b25b      	sxtb	r3, r3
 8007740:	4313      	orrs	r3, r2
 8007742:	b25b      	sxtb	r3, r3
 8007744:	b2db      	uxtb	r3, r3
 8007746:	e001      	b.n	800774c <put_fat+0xc0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007764:	4619      	mov	r1, r3
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	fbb3 f3f1 	udiv	r3, r3, r1
 800776c:	4413      	add	r3, r2
 800776e:	4619      	mov	r1, r3
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f7ff fda0 	bl	80072b6 <move_window>
 8007776:	4603      	mov	r3, r0
 8007778:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800777a:	7ffb      	ldrb	r3, [r7, #31]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f040 80bb 	bne.w	80078f8 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007788:	461a      	mov	r2, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007790:	fb02 f201 	mul.w	r2, r2, r1
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4413      	add	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <put_fat+0x122>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e00e      	b.n	80077cc <put_fat+0x140>
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	b25b      	sxtb	r3, r3
 80077b4:	f023 030f 	bic.w	r3, r3, #15
 80077b8:	b25a      	sxtb	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	0a1b      	lsrs	r3, r3, #8
 80077be:	b25b      	sxtb	r3, r3
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	b25b      	sxtb	r3, r3
 80077c6:	4313      	orrs	r3, r2
 80077c8:	b25b      	sxtb	r3, r3
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 80077d8:	e093      	b.n	8007902 <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80077e6:	085b      	lsrs	r3, r3, #1
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80077f2:	4413      	add	r3, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7ff fd5d 	bl	80072b6 <move_window>
 80077fc:	4603      	mov	r3, r0
 80077fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007800:	7ffb      	ldrb	r3, [r7, #31]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d17a      	bne.n	80078fc <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007810:	fbb3 f1f2 	udiv	r1, r3, r2
 8007814:	fb02 f201 	mul.w	r2, r2, r1
 8007818:	1a9b      	subs	r3, r3, r2
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	b29b      	uxth	r3, r3
 800782c:	0a1b      	lsrs	r3, r3, #8
 800782e:	b29a      	uxth	r2, r3
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	3301      	adds	r3, #1
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8007840:	e05f      	b.n	8007902 <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800784e:	089b      	lsrs	r3, r3, #2
 8007850:	b29b      	uxth	r3, r3
 8007852:	4619      	mov	r1, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	fbb3 f3f1 	udiv	r3, r3, r1
 800785a:	4413      	add	r3, r2
 800785c:	4619      	mov	r1, r3
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff fd29 	bl	80072b6 <move_window>
 8007864:	4603      	mov	r3, r0
 8007866:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007868:	7ffb      	ldrb	r3, [r7, #31]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d148      	bne.n	8007900 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007878:	fbb3 f1f2 	udiv	r1, r3, r2
 800787c:	fb02 f201 	mul.w	r2, r2, r1
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	3303      	adds	r3, #3
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	061a      	lsls	r2, r3, #24
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	3302      	adds	r3, #2
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	041b      	lsls	r3, r3, #16
 8007898:	4313      	orrs	r3, r2
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	3201      	adds	r2, #1
 800789e:	7812      	ldrb	r2, [r2, #0]
 80078a0:	0212      	lsls	r2, r2, #8
 80078a2:	4313      	orrs	r3, r2
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	7812      	ldrb	r2, [r2, #0]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	0a1b      	lsrs	r3, r3, #8
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	3301      	adds	r3, #1
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	0c1a      	lsrs	r2, r3, #16
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	3302      	adds	r3, #2
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	0e1a      	lsrs	r2, r3, #24
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	3303      	adds	r3, #3
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 80078ec:	e009      	b.n	8007902 <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 80078ee:	2302      	movs	r3, #2
 80078f0:	77fb      	strb	r3, [r7, #31]
 80078f2:	e006      	b.n	8007902 <put_fat+0x276>
			if (res != FR_OK) break;
 80078f4:	bf00      	nop
 80078f6:	e004      	b.n	8007902 <put_fat+0x276>
			if (res != FR_OK) break;
 80078f8:	bf00      	nop
 80078fa:	e002      	b.n	8007902 <put_fat+0x276>
			if (res != FR_OK) break;
 80078fc:	bf00      	nop
 80078fe:	e000      	b.n	8007902 <put_fat+0x276>
			if (res != FR_OK) break;
 8007900:	bf00      	nop
		}
	}

	return res;
 8007902:	7ffb      	ldrb	r3, [r7, #31]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3720      	adds	r7, #32
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d905      	bls.n	8007928 <remove_chain+0x1c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d302      	bcc.n	800792e <remove_chain+0x22>
		res = FR_INT_ERR;
 8007928:	2302      	movs	r3, #2
 800792a:	73fb      	strb	r3, [r7, #15]
 800792c:	e043      	b.n	80079b6 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007932:	e036      	b.n	80079a2 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff fdba 	bl	80074b0 <get_fat>
 800793c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d035      	beq.n	80079b0 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d102      	bne.n	8007950 <remove_chain+0x44>
 800794a:	2302      	movs	r3, #2
 800794c:	73fb      	strb	r3, [r7, #15]
 800794e:	e032      	b.n	80079b6 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007956:	d102      	bne.n	800795e <remove_chain+0x52>
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
 800795c:	e02b      	b.n	80079b6 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800795e:	2200      	movs	r2, #0
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fe92 	bl	800768c <put_fat>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d120      	bne.n	80079b4 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d00f      	beq.n	800799e <remove_chain+0x92>
				fs->free_clust++;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	b2da      	uxtb	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d3c2      	bcc.n	8007934 <remove_chain+0x28>
 80079ae:	e002      	b.n	80079b6 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80079b4:	bf00      	nop
		}
	}

	return res;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10f      	bne.n	80079f0 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80079d6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <create_chain+0x2a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d31c      	bcc.n	8007a24 <create_chain+0x64>
 80079ea:	2301      	movs	r3, #1
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	e019      	b.n	8007a24 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fd5c 	bl	80074b0 <get_fat>
 80079f8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d801      	bhi.n	8007a04 <create_chain+0x44>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e076      	b.n	8007af2 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d101      	bne.n	8007a10 <create_chain+0x50>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	e070      	b.n	8007af2 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d201      	bcs.n	8007a20 <create_chain+0x60>
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	e068      	b.n	8007af2 <create_chain+0x132>
		scl = clst;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d307      	bcc.n	8007a4a <create_chain+0x8a>
			ncl = 2;
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d901      	bls.n	8007a4a <create_chain+0x8a>
 8007a46:	2300      	movs	r3, #0
 8007a48:	e053      	b.n	8007af2 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007a4a:	6979      	ldr	r1, [r7, #20]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fd2f 	bl	80074b0 <get_fat>
 8007a52:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00e      	beq.n	8007a78 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d002      	beq.n	8007a68 <create_chain+0xa8>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <create_chain+0xac>
			return cs;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	e042      	b.n	8007af2 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d1d9      	bne.n	8007a28 <create_chain+0x68>
 8007a74:	2300      	movs	r3, #0
 8007a76:	e03c      	b.n	8007af2 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8007a78:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007a7a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007a7e:	6979      	ldr	r1, [r7, #20]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fe03 	bl	800768c <put_fat>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d109      	bne.n	8007aa4 <create_chain+0xe4>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d006      	beq.n	8007aa4 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff fdf6 	bl	800768c <put_fat>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d11a      	bne.n	8007ae0 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d018      	beq.n	8007af0 <create_chain+0x130>
			fs->free_clust--;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ac4:	1e5a      	subs	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8007ade:	e007      	b.n	8007af0 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d102      	bne.n	8007aec <create_chain+0x12c>
 8007ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aea:	e000      	b.n	8007aee <create_chain+0x12e>
 8007aec:	2301      	movs	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007af0:	697b      	ldr	r3, [r7, #20]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b087      	sub	sp, #28
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	3304      	adds	r3, #4
 8007b0a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007b14:	461a      	mov	r2, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8007b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1d1a      	adds	r2, r3, #4
 8007b2e:	613a      	str	r2, [r7, #16]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <clmt_clust+0x44>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e010      	b.n	8007b60 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d307      	bcc.n	8007b56 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	3304      	adds	r3, #4
 8007b52:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b54:	e7e9      	b.n	8007b2a <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 8007b56:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4413      	add	r3, r2
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	371c      	adds	r7, #28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bc80      	pop	{r7}
 8007b68:	4770      	bx	lr

08007b6a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d006      	beq.n	8007b96 <dir_sdi+0x2c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d301      	bcc.n	8007b9a <dir_sdi+0x30>
		return FR_INT_ERR;
 8007b96:	2302      	movs	r3, #2
 8007b98:	e082      	b.n	8007ca0 <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <dir_sdi+0x4c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d104      	bne.n	8007bb6 <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007bb4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10f      	bne.n	8007bdc <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d301      	bcc.n	8007bd0 <dir_sdi+0x66>
			return FR_INT_ERR;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e067      	b.n	8007ca0 <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007bd8:	613b      	str	r3, [r7, #16]
 8007bda:	e036      	b.n	8007c4a <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007be4:	095b      	lsrs	r3, r3, #5
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	461a      	mov	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007bf2:	fb03 f302 	mul.w	r3, r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007bf8:	e01c      	b.n	8007c34 <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff fc55 	bl	80074b0 <get_fat>
 8007c06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d101      	bne.n	8007c14 <dir_sdi+0xaa>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e045      	b.n	8007ca0 <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d906      	bls.n	8007c28 <dir_sdi+0xbe>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d301      	bcc.n	8007c2c <dir_sdi+0xc2>
				return FR_INT_ERR;
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e039      	b.n	8007ca0 <dir_sdi+0x136>
			idx -= ic;
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d2de      	bcs.n	8007bfa <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6979      	ldr	r1, [r7, #20]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff fc13 	bl	800746e <clust2sect>
 8007c48:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <dir_sdi+0xf0>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e022      	b.n	8007ca0 <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	461a      	mov	r2, r3
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	441a      	add	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007c84:	095b      	lsrs	r3, r3, #5
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c90:	fb02 f201 	mul.w	r2, r2, r1
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	015b      	lsls	r3, r3, #5
 8007c98:	18c2      	adds	r2, r0, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007ca8:	b590      	push	{r4, r7, lr}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	88db      	ldrh	r3, [r3, #6]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <dir_next+0x22>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <dir_next+0x26>
		return FR_NO_FILE;
 8007cca:	2304      	movs	r3, #4
 8007ccc:	e0e2      	b.n	8007e94 <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ce2:	fb02 f201 	mul.w	r2, r2, r1
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f040 80ba 	bne.w	8007e62 <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	f0c0 80a8 	bcc.w	8007e62 <dir_next+0x1ba>
				return FR_NO_FILE;
 8007d12:	2304      	movs	r3, #4
 8007d14:	e0be      	b.n	8007e94 <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007d1e:	095b      	lsrs	r3, r3, #5
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8007d32:	3a01      	subs	r2, #1
 8007d34:	4013      	ands	r3, r2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f040 8093 	bne.w	8007e62 <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f7ff fbb2 	bl	80074b0 <get_fat>
 8007d4c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d801      	bhi.n	8007d58 <dir_next+0xb0>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e09d      	b.n	8007e94 <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d101      	bne.n	8007d64 <dir_next+0xbc>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e097      	b.n	8007e94 <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d36b      	bcc.n	8007e4a <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <dir_next+0xd4>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	e08b      	b.n	8007e94 <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7ff fe1a 	bl	80079c0 <create_chain>
 8007d8c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <dir_next+0xf0>
 8007d94:	2307      	movs	r3, #7
 8007d96:	e07d      	b.n	8007e94 <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <dir_next+0xfa>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e078      	b.n	8007e94 <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d101      	bne.n	8007dae <dir_next+0x106>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e072      	b.n	8007e94 <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff fa36 	bl	8007224 <sync_window>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <dir_next+0x11a>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e068      	b.n	8007e94 <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	f7ff f820 	bl	8006e18 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681c      	ldr	r4, [r3, #0]
 8007de0:	6979      	ldr	r1, [r7, #20]
 8007de2:	4610      	mov	r0, r2
 8007de4:	f7ff fb43 	bl	800746e <clust2sect>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	e018      	b.n	8007e26 <dir_next+0x17e>
						dp->fs->wflag = 1;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff fa0e 	bl	8007224 <sync_window>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <dir_next+0x16a>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e040      	b.n	8007e94 <dir_next+0x1ec>
						dp->fs->winsect++;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8007e1a:	3201      	adds	r2, #1
 8007e1c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3301      	adds	r3, #1
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007e2e:	461a      	mov	r2, r3
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d3de      	bcc.n	8007df4 <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	1a8a      	subs	r2, r1, r2
 8007e46:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6979      	ldr	r1, [r7, #20]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff fb09 	bl	800746e <clust2sect>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007e78:	095b      	lsrs	r3, r3, #5
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e84:	fb02 f201 	mul.w	r2, r2, r1
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	015b      	lsls	r3, r3, #5
 8007e8c:	18c2      	adds	r2, r0, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	371c      	adds	r7, #28
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd90      	pop	{r4, r7, pc}

08007e9c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff fe5e 	bl	8007b6a <dir_sdi>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d12d      	bne.n	8007f14 <dir_alloc+0x78>
		n = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f7ff f9f5 	bl	80072b6 <move_window>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d11d      	bne.n	8007f12 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2be5      	cmp	r3, #229	; 0xe5
 8007ede:	d004      	beq.n	8007eea <dir_alloc+0x4e>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d107      	bne.n	8007efa <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	3301      	adds	r3, #1
 8007eee:	60bb      	str	r3, [r7, #8]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d102      	bne.n	8007efe <dir_alloc+0x62>
 8007ef8:	e00c      	b.n	8007f14 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007efa:	2300      	movs	r3, #0
 8007efc:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007efe:	2101      	movs	r1, #1
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff fed1 	bl	8007ca8 <dir_next>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0d5      	beq.n	8007ebc <dir_alloc+0x20>
 8007f10:	e000      	b.n	8007f14 <dir_alloc+0x78>
			if (res != FR_OK) break;
 8007f12:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d101      	bne.n	8007f1e <dir_alloc+0x82>
 8007f1a:	2307      	movs	r3, #7
 8007f1c:	73fb      	strb	r3, [r7, #15]
	return res;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	331b      	adds	r3, #27
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	b21a      	sxth	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	331a      	adds	r3, #26
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b21b      	sxth	r3, r3
 8007f44:	4313      	orrs	r3, r2
 8007f46:	b21b      	sxth	r3, r3
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d10f      	bne.n	8007f76 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	3315      	adds	r3, #21
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	b21a      	sxth	r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	3314      	adds	r3, #20
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	b21b      	sxth	r3, r3
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	b21b      	sxth	r3, r3
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

	return cl;
 8007f76:	68fb      	ldr	r3, [r7, #12]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	331a      	adds	r3, #26
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	0a1b      	lsrs	r3, r3, #8
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	331b      	adds	r3, #27
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	0c1a      	lsrs	r2, r3, #16
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3314      	adds	r3, #20
 8007fae:	b2d2      	uxtb	r2, r2
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	0a1b      	lsrs	r3, r3, #8
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3315      	adds	r3, #21
 8007fc0:	b2d2      	uxtb	r2, r2
 8007fc2:	701a      	strb	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bc80      	pop	{r7}
 8007fcc:	4770      	bx	lr
	...

08007fd0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe2:	1e5a      	subs	r2, r3, #1
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	4413      	add	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8007ff8:	4a2b      	ldr	r2, [pc, #172]	; (80080a8 <cmp_lfn+0xd8>)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	3301      	adds	r3, #1
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4413      	add	r3, r2
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	021b      	lsls	r3, r3, #8
 800800a:	b21a      	sxth	r2, r3
 800800c:	4926      	ldr	r1, [pc, #152]	; (80080a8 <cmp_lfn+0xd8>)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	440b      	add	r3, r1
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	4619      	mov	r1, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	440b      	add	r3, r1
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b21b      	sxth	r3, r3
 800801e:	4313      	orrs	r3, r2
 8008020:	b21b      	sxth	r3, r3
 8008022:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d019      	beq.n	800805e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800802a:	89bb      	ldrh	r3, [r7, #12]
 800802c:	4618      	mov	r0, r3
 800802e:	f001 ff11 	bl	8009e54 <ff_wtoupper>
 8008032:	4603      	mov	r3, r0
 8008034:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2bfe      	cmp	r3, #254	; 0xfe
 800803a:	d80e      	bhi.n	800805a <cmp_lfn+0x8a>
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	617a      	str	r2, [r7, #20]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4413      	add	r3, r2
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f001 ff02 	bl	8009e54 <ff_wtoupper>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	89fb      	ldrh	r3, [r7, #14]
 8008056:	4293      	cmp	r3, r2
 8008058:	d008      	beq.n	800806c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800805a:	2300      	movs	r3, #0
 800805c:	e01f      	b.n	800809e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800805e:	89bb      	ldrh	r3, [r7, #12]
 8008060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008064:	4293      	cmp	r3, r2
 8008066:	d001      	beq.n	800806c <cmp_lfn+0x9c>
 8008068:	2300      	movs	r3, #0
 800806a:	e018      	b.n	800809e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	3301      	adds	r3, #1
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b0c      	cmp	r3, #12
 8008076:	d9bf      	bls.n	8007ff8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <cmp_lfn+0xcc>
 8008084:	89fb      	ldrh	r3, [r7, #14]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d008      	beq.n	800809c <cmp_lfn+0xcc>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	4413      	add	r3, r2
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <cmp_lfn+0xcc>
		return 0;
 8008098:	2300      	movs	r3, #0
 800809a:	e000      	b.n	800809e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800809c:	2301      	movs	r3, #1
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	0800a8ec 	.word	0x0800a8ec

080080ac <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b089      	sub	sp, #36	; 0x24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4611      	mov	r1, r2
 80080b8:	461a      	mov	r2, r3
 80080ba:	460b      	mov	r3, r1
 80080bc:	71fb      	strb	r3, [r7, #7]
 80080be:	4613      	mov	r3, r2
 80080c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	330d      	adds	r3, #13
 80080c6:	79ba      	ldrb	r2, [r7, #6]
 80080c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	330b      	adds	r3, #11
 80080ce:	220f      	movs	r2, #15
 80080d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	330c      	adds	r3, #12
 80080d6:	2200      	movs	r2, #0
 80080d8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	331a      	adds	r3, #26
 80080de:	2200      	movs	r2, #0
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	331b      	adds	r3, #27
 80080e6:	2200      	movs	r2, #0
 80080e8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	1e5a      	subs	r2, r3, #1
 80080ee:	4613      	mov	r3, r2
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	82fb      	strh	r3, [r7, #22]
 80080fe:	2300      	movs	r3, #0
 8008100:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008102:	8afb      	ldrh	r3, [r7, #22]
 8008104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008108:	4293      	cmp	r3, r2
 800810a:	d007      	beq.n	800811c <fit_lfn+0x70>
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	61fa      	str	r2, [r7, #28]
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800811c:	4a1c      	ldr	r2, [pc, #112]	; (8008190 <fit_lfn+0xe4>)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	4413      	add	r3, r2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	4413      	add	r3, r2
 800812a:	8afa      	ldrh	r2, [r7, #22]
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	8afb      	ldrh	r3, [r7, #22]
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	b299      	uxth	r1, r3
 8008136:	4a16      	ldr	r2, [pc, #88]	; (8008190 <fit_lfn+0xe4>)
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	4413      	add	r3, r2
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	3301      	adds	r3, #1
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	4413      	add	r3, r2
 8008144:	b2ca      	uxtb	r2, r1
 8008146:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8008148:	8afb      	ldrh	r3, [r7, #22]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <fit_lfn+0xa8>
 800814e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008152:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	3301      	adds	r3, #1
 8008158:	61bb      	str	r3, [r7, #24]
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b0c      	cmp	r3, #12
 800815e:	d9d0      	bls.n	8008102 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8008160:	8afb      	ldrh	r3, [r7, #22]
 8008162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008166:	4293      	cmp	r3, r2
 8008168:	d006      	beq.n	8008178 <fit_lfn+0xcc>
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	4413      	add	r3, r2
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d103      	bne.n	8008180 <fit_lfn+0xd4>
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800817e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	79fa      	ldrb	r2, [r7, #7]
 8008184:	701a      	strb	r2, [r3, #0]
}
 8008186:	bf00      	nop
 8008188:	3724      	adds	r7, #36	; 0x24
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr
 8008190:	0800a8ec 	.word	0x0800a8ec

08008194 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08c      	sub	sp, #48	; 0x30
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80081a2:	220b      	movs	r2, #11
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7fe fe18 	bl	8006ddc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b05      	cmp	r3, #5
 80081b0:	d92b      	bls.n	800820a <gen_numname+0x76>
		sr = seq;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80081b6:	e022      	b.n	80081fe <gen_numname+0x6a>
			wc = *lfn++;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	1c9a      	adds	r2, r3, #2
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80081c2:	2300      	movs	r3, #0
 80081c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081c6:	e017      	b.n	80081f8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	005a      	lsls	r2, r3, #1
 80081cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	4413      	add	r3, r2
 80081d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80081d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081d8:	085b      	lsrs	r3, r3, #1
 80081da:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <gen_numname+0x5e>
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80081ec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80081f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	3301      	adds	r3, #1
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	2b0f      	cmp	r3, #15
 80081fc:	d9e4      	bls.n	80081c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1d8      	bne.n	80081b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800820a:	2307      	movs	r3, #7
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	b2db      	uxtb	r3, r3
 8008218:	3330      	adds	r3, #48	; 0x30
 800821a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800821e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008222:	2b39      	cmp	r3, #57	; 0x39
 8008224:	d904      	bls.n	8008230 <gen_numname+0x9c>
 8008226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800822a:	3307      	adds	r3, #7
 800822c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	1e5a      	subs	r2, r3, #1
 8008234:	62ba      	str	r2, [r7, #40]	; 0x28
 8008236:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800823a:	4413      	add	r3, r2
 800823c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008240:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	091b      	lsrs	r3, r3, #4
 8008248:	603b      	str	r3, [r7, #0]
	} while (seq);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1de      	bne.n	800820e <gen_numname+0x7a>
	ns[i] = '~';
 8008250:	f107 0214 	add.w	r2, r7, #20
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	4413      	add	r3, r2
 8008258:	227e      	movs	r2, #126	; 0x7e
 800825a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800825c:	2300      	movs	r3, #0
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
 8008260:	e002      	b.n	8008268 <gen_numname+0xd4>
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	3301      	adds	r3, #1
 8008266:	627b      	str	r3, [r7, #36]	; 0x24
 8008268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	429a      	cmp	r2, r3
 800826e:	d205      	bcs.n	800827c <gen_numname+0xe8>
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	4413      	add	r3, r2
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b20      	cmp	r3, #32
 800827a:	d1f2      	bne.n	8008262 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	2b07      	cmp	r3, #7
 8008280:	d808      	bhi.n	8008294 <gen_numname+0x100>
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	62ba      	str	r2, [r7, #40]	; 0x28
 8008288:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800828c:	4413      	add	r3, r2
 800828e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008292:	e000      	b.n	8008296 <gen_numname+0x102>
 8008294:	2120      	movs	r1, #32
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	627a      	str	r2, [r7, #36]	; 0x24
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	460a      	mov	r2, r1
 80082a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	2b07      	cmp	r3, #7
 80082a8:	d9e8      	bls.n	800827c <gen_numname+0xe8>
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	3730      	adds	r7, #48	; 0x30
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80082c0:	230b      	movs	r3, #11
 80082c2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	0852      	lsrs	r2, r2, #1
 80082ca:	01db      	lsls	r3, r3, #7
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	1c59      	adds	r1, r3, #1
 80082d4:	6079      	str	r1, [r7, #4]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	4413      	add	r3, r2
 80082da:	73fb      	strb	r3, [r7, #15]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3b01      	subs	r3, #1
 80082e0:	60bb      	str	r3, [r7, #8]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1ed      	bne.n	80082c4 <sum_sfn+0x10>
	return sum;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr

080082f4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80082fc:	2100      	movs	r1, #0
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff fc33 	bl	8007b6a <dir_sdi>
 8008304:	4603      	mov	r3, r0
 8008306:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <dir_find+0x1e>
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	e0a0      	b.n	8008454 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008312:	23ff      	movs	r3, #255	; 0xff
 8008314:	753b      	strb	r3, [r7, #20]
 8008316:	7d3b      	ldrb	r3, [r7, #20]
 8008318:	757b      	strb	r3, [r7, #21]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008320:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7fe ffc2 	bl	80072b6 <move_window>
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 8085 	bne.w	8008448 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800834a:	7dbb      	ldrb	r3, [r7, #22]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d102      	bne.n	8008356 <dir_find+0x62>
 8008350:	2304      	movs	r3, #4
 8008352:	75fb      	strb	r3, [r7, #23]
 8008354:	e07d      	b.n	8008452 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	330b      	adds	r3, #11
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008360:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008362:	7dbb      	ldrb	r3, [r7, #22]
 8008364:	2be5      	cmp	r3, #229	; 0xe5
 8008366:	d007      	beq.n	8008378 <dir_find+0x84>
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <dir_find+0x92>
 8008372:	7bfb      	ldrb	r3, [r7, #15]
 8008374:	2b0f      	cmp	r3, #15
 8008376:	d006      	beq.n	8008386 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008378:	23ff      	movs	r3, #255	; 0xff
 800837a:	757b      	strb	r3, [r7, #21]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008382:	849a      	strh	r2, [r3, #36]	; 0x24
 8008384:	e055      	b.n	8008432 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	2b0f      	cmp	r3, #15
 800838a:	d12f      	bne.n	80083ec <dir_find+0xf8>
				if (dp->lfn) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d04e      	beq.n	8008432 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008394:	7dbb      	ldrb	r3, [r7, #22]
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00c      	beq.n	80083b8 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	7b5b      	ldrb	r3, [r3, #13]
 80083a2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80083a4:	7dbb      	ldrb	r3, [r7, #22]
 80083a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083aa:	75bb      	strb	r3, [r7, #22]
 80083ac:	7dbb      	ldrb	r3, [r7, #22]
 80083ae:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	88da      	ldrh	r2, [r3, #6]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80083b8:	7dba      	ldrb	r2, [r7, #22]
 80083ba:	7d7b      	ldrb	r3, [r7, #21]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d112      	bne.n	80083e6 <dir_find+0xf2>
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	330d      	adds	r3, #13
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	7d3a      	ldrb	r2, [r7, #20]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d10c      	bne.n	80083e6 <dir_find+0xf2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	6939      	ldr	r1, [r7, #16]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff fdfc 	bl	8007fd0 <cmp_lfn>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <dir_find+0xf2>
 80083de:	7d7b      	ldrb	r3, [r7, #21]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	e000      	b.n	80083e8 <dir_find+0xf4>
 80083e6:	23ff      	movs	r3, #255	; 0xff
 80083e8:	757b      	strb	r3, [r7, #21]
 80083ea:	e022      	b.n	8008432 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80083ec:	7d7b      	ldrb	r3, [r7, #21]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d107      	bne.n	8008402 <dir_find+0x10e>
 80083f2:	6938      	ldr	r0, [r7, #16]
 80083f4:	f7ff ff5e 	bl	80082b4 <sum_sfn>
 80083f8:	4603      	mov	r3, r0
 80083fa:	461a      	mov	r2, r3
 80083fc:	7d3b      	ldrb	r3, [r7, #20]
 80083fe:	4293      	cmp	r3, r2
 8008400:	d024      	beq.n	800844c <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	330b      	adds	r3, #11
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <dir_find+0x132>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	220b      	movs	r2, #11
 8008418:	4619      	mov	r1, r3
 800841a:	6938      	ldr	r0, [r7, #16]
 800841c:	f7fe fd16 	bl	8006e4c <mem_cmp>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d014      	beq.n	8008450 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008426:	23ff      	movs	r3, #255	; 0xff
 8008428:	757b      	strb	r3, [r7, #21]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008430:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fc37 	bl	8007ca8 <dir_next>
 800843a:	4603      	mov	r3, r0
 800843c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f43f af6e 	beq.w	8008322 <dir_find+0x2e>
 8008446:	e004      	b.n	8008452 <dir_find+0x15e>
		if (res != FR_OK) break;
 8008448:	bf00      	nop
 800844a:	e002      	b.n	8008452 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800844c:	bf00      	nop
 800844e:	e000      	b.n	8008452 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008450:	bf00      	nop

	return res;
 8008452:	7dfb      	ldrb	r3, [r7, #23]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08c      	sub	sp, #48	; 0x30
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	623b      	str	r3, [r7, #32]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8008470:	f107 030c 	add.w	r3, r7, #12
 8008474:	220c      	movs	r2, #12
 8008476:	6a39      	ldr	r1, [r7, #32]
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe fcaf 	bl	8006ddc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d035      	beq.n	80084f4 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	330b      	adds	r3, #11
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 8008496:	2301      	movs	r3, #1
 8008498:	62bb      	str	r3, [r7, #40]	; 0x28
 800849a:	e013      	b.n	80084c4 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800849c:	f107 010c 	add.w	r1, r7, #12
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	6a38      	ldr	r0, [r7, #32]
 80084a6:	f7ff fe75 	bl	8008194 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff ff22 	bl	80082f4 <dir_find>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80084b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	3301      	adds	r3, #1
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	2b63      	cmp	r3, #99	; 0x63
 80084c8:	d9e8      	bls.n	800849c <dir_register+0x40>
 80084ca:	e000      	b.n	80084ce <dir_register+0x72>
			if (res != FR_OK) break;
 80084cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	2b64      	cmp	r3, #100	; 0x64
 80084d2:	d101      	bne.n	80084d8 <dir_register+0x7c>
 80084d4:	2307      	movs	r3, #7
 80084d6:	e0b5      	b.n	8008644 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80084d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d002      	beq.n	80084e6 <dir_register+0x8a>
 80084e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084e4:	e0ae      	b.n	8008644 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	330b      	adds	r3, #11
 80084ea:	7dfa      	ldrb	r2, [r7, #23]
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d014      	beq.n	8008528 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 80084fe:	2300      	movs	r3, #0
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
 8008502:	e002      	b.n	800850a <dir_register+0xae>
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	3301      	adds	r3, #1
 8008508:	62bb      	str	r3, [r7, #40]	; 0x28
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	4413      	add	r3, r2
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1f5      	bne.n	8008504 <dir_register+0xa8>
		nent = (n + 25) / 13;
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	3319      	adds	r3, #25
 800851c:	4a4b      	ldr	r2, [pc, #300]	; (800864c <dir_register+0x1f0>)
 800851e:	fba2 2303 	umull	r2, r3, r2, r3
 8008522:	089b      	lsrs	r3, r3, #2
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
 8008526:	e001      	b.n	800852c <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8008528:	2301      	movs	r3, #1
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800852c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff fcb4 	bl	8007e9c <dir_alloc>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800853a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800853e:	2b00      	cmp	r3, #0
 8008540:	d14c      	bne.n	80085dc <dir_register+0x180>
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	3b01      	subs	r3, #1
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	2b00      	cmp	r3, #0
 800854c:	d046      	beq.n	80085dc <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	88db      	ldrh	r3, [r3, #6]
 8008552:	461a      	mov	r2, r3
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fb05 	bl	8007b6a <dir_sdi>
 8008560:	4603      	mov	r3, r0
 8008562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800856a:	2b00      	cmp	r3, #0
 800856c:	d136      	bne.n	80085dc <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fe9e 	bl	80082b4 <sum_sfn>
 8008578:	4603      	mov	r3, r0
 800857a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	4619      	mov	r1, r3
 8008586:	4610      	mov	r0, r2
 8008588:	f7fe fe95 	bl	80072b6 <move_window>
 800858c:	4603      	mov	r3, r0
 800858e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008596:	2b00      	cmp	r3, #0
 8008598:	d11f      	bne.n	80085da <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a18      	ldr	r0, [r3, #32]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6959      	ldr	r1, [r3, #20]
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	7efb      	ldrb	r3, [r7, #27]
 80085a8:	f7ff fd80 	bl	80080ac <fit_lfn>
				dp->fs->wflag = 1;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 80085b6:	2100      	movs	r1, #0
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff fb75 	bl	8007ca8 <dir_next>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80085c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d107      	bne.n	80085dc <dir_register+0x180>
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	3b01      	subs	r3, #1
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1d1      	bne.n	800857c <dir_register+0x120>
 80085d8:	e000      	b.n	80085dc <dir_register+0x180>
				if (res != FR_OK) break;
 80085da:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80085dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d12d      	bne.n	8008640 <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	4619      	mov	r1, r3
 80085ee:	4610      	mov	r0, r2
 80085f0:	f7fe fe61 	bl	80072b6 <move_window>
 80085f4:	4603      	mov	r3, r0
 80085f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80085fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d11e      	bne.n	8008640 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	2220      	movs	r2, #32
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fc04 	bl	8006e18 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6958      	ldr	r0, [r3, #20]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	220b      	movs	r2, #11
 800861a:	4619      	mov	r1, r3
 800861c:	f7fe fbde 	bl	8006ddc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	330b      	adds	r3, #11
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	330c      	adds	r3, #12
 800862e:	f002 0218 	and.w	r2, r2, #24
 8008632:	b2d2      	uxtb	r2, r2
 8008634:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 8008640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008644:	4618      	mov	r0, r3
 8008646:	3730      	adds	r7, #48	; 0x30
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	4ec4ec4f 	.word	0x4ec4ec4f

08008650 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08a      	sub	sp, #40	; 0x28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	e002      	b.n	8008668 <create_name+0x18>
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	3301      	adds	r3, #1
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b2f      	cmp	r3, #47	; 0x2f
 800866e:	d0f8      	beq.n	8008662 <create_name+0x12>
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b5c      	cmp	r3, #92	; 0x5c
 8008676:	d0f4      	beq.n	8008662 <create_name+0x12>
	lfn = dp->lfn;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	61ba      	str	r2, [r7, #24]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	4413      	add	r3, r2
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8008694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008696:	2b1f      	cmp	r3, #31
 8008698:	d92f      	bls.n	80086fa <create_name+0xaa>
 800869a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800869c:	2b2f      	cmp	r3, #47	; 0x2f
 800869e:	d02c      	beq.n	80086fa <create_name+0xaa>
 80086a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086a2:	2b5c      	cmp	r3, #92	; 0x5c
 80086a4:	d029      	beq.n	80086fa <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2bfe      	cmp	r3, #254	; 0xfe
 80086aa:	d901      	bls.n	80086b0 <create_name+0x60>
			return FR_INVALID_NAME;
 80086ac:	2306      	movs	r3, #6
 80086ae:	e176      	b.n	800899e <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 80086b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80086b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086b8:	2101      	movs	r1, #1
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 fb90 	bl	8009de0 <ff_convert>
 80086c0:	4603      	mov	r3, r0
 80086c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80086c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <create_name+0x7e>
 80086ca:	2306      	movs	r3, #6
 80086cc:	e167      	b.n	800899e <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80086ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086d0:	2b7f      	cmp	r3, #127	; 0x7f
 80086d2:	d809      	bhi.n	80086e8 <create_name+0x98>
 80086d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086d6:	4619      	mov	r1, r3
 80086d8:	48b3      	ldr	r0, [pc, #716]	; (80089a8 <create_name+0x358>)
 80086da:	f7fe fbdd 	bl	8006e98 <chk_chr>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <create_name+0x98>
			return FR_INVALID_NAME;
 80086e4:	2306      	movs	r3, #6
 80086e6:	e15a      	b.n	800899e <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	617a      	str	r2, [r7, #20]
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80086f8:	e7c5      	b.n	8008686 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	441a      	add	r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008706:	2b1f      	cmp	r3, #31
 8008708:	d801      	bhi.n	800870e <create_name+0xbe>
 800870a:	2304      	movs	r3, #4
 800870c:	e000      	b.n	8008710 <create_name+0xc0>
 800870e:	2300      	movs	r3, #0
 8008710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8008714:	e011      	b.n	800873a <create_name+0xea>
		w = lfn[di - 1];
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800871c:	3b01      	subs	r3, #1
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4413      	add	r3, r2
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800872a:	2b20      	cmp	r3, #32
 800872c:	d002      	beq.n	8008734 <create_name+0xe4>
 800872e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008730:	2b2e      	cmp	r3, #46	; 0x2e
 8008732:	d106      	bne.n	8008742 <create_name+0xf2>
		di--;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	3b01      	subs	r3, #1
 8008738:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1ea      	bne.n	8008716 <create_name+0xc6>
 8008740:	e000      	b.n	8008744 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 8008742:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <create_name+0xfe>
 800874a:	2306      	movs	r3, #6
 800874c:	e127      	b.n	800899e <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	2200      	movs	r2, #0
 8008758:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	220b      	movs	r2, #11
 8008760:	2120      	movs	r1, #32
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fb58 	bl	8006e18 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008768:	2300      	movs	r3, #0
 800876a:	61bb      	str	r3, [r7, #24]
 800876c:	e002      	b.n	8008774 <create_name+0x124>
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	3301      	adds	r3, #1
 8008772:	61bb      	str	r3, [r7, #24]
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4413      	add	r3, r2
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	2b20      	cmp	r3, #32
 8008780:	d0f5      	beq.n	800876e <create_name+0x11e>
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4413      	add	r3, r2
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	2b2e      	cmp	r3, #46	; 0x2e
 800878e:	d0ee      	beq.n	800876e <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d009      	beq.n	80087aa <create_name+0x15a>
 8008796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800879a:	f043 0303 	orr.w	r3, r3, #3
 800879e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80087a2:	e002      	b.n	80087aa <create_name+0x15a>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d009      	beq.n	80087c4 <create_name+0x174>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80087b6:	3b01      	subs	r3, #1
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	2b2e      	cmp	r3, #46	; 0x2e
 80087c2:	d1ef      	bne.n	80087a4 <create_name+0x154>

	b = i = 0; ni = 8;
 80087c4:	2300      	movs	r3, #0
 80087c6:	623b      	str	r3, [r7, #32]
 80087c8:	2300      	movs	r3, #0
 80087ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80087ce:	2308      	movs	r3, #8
 80087d0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	61ba      	str	r2, [r7, #24]
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4413      	add	r3, r2
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80087e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 808f 	beq.w	8008908 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80087ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	d006      	beq.n	80087fe <create_name+0x1ae>
 80087f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087f2:	2b2e      	cmp	r3, #46	; 0x2e
 80087f4:	d10a      	bne.n	800880c <create_name+0x1bc>
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d006      	beq.n	800880c <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 80087fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008802:	f043 0303 	orr.w	r3, r3, #3
 8008806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800880a:	e07c      	b.n	8008906 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800880c:	6a3a      	ldr	r2, [r7, #32]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	429a      	cmp	r2, r3
 8008812:	d203      	bcs.n	800881c <create_name+0x1cc>
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	429a      	cmp	r2, r3
 800881a:	d123      	bne.n	8008864 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b0b      	cmp	r3, #11
 8008820:	d106      	bne.n	8008830 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 8008822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008826:	f043 0303 	orr.w	r3, r3, #3
 800882a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800882e:	e06e      	b.n	800890e <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	429a      	cmp	r2, r3
 8008836:	d005      	beq.n	8008844 <create_name+0x1f4>
 8008838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800883c:	f043 0303 	orr.w	r3, r3, #3
 8008840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	429a      	cmp	r2, r3
 800884a:	d85f      	bhi.n	800890c <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	2308      	movs	r3, #8
 8008852:	623b      	str	r3, [r7, #32]
 8008854:	230b      	movs	r3, #11
 8008856:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008858:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008862:	e050      	b.n	8008906 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008866:	2b7f      	cmp	r3, #127	; 0x7f
 8008868:	d914      	bls.n	8008894 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800886a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800886c:	2100      	movs	r1, #0
 800886e:	4618      	mov	r0, r3
 8008870:	f001 fab6 	bl	8009de0 <ff_convert>
 8008874:	4603      	mov	r3, r0
 8008876:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <create_name+0x238>
 800887e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008880:	3b80      	subs	r3, #128	; 0x80
 8008882:	4a4a      	ldr	r2, [pc, #296]	; (80089ac <create_name+0x35c>)
 8008884:	5cd3      	ldrb	r3, [r2, r3]
 8008886:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800888c:	f043 0302 	orr.w	r3, r3, #2
 8008890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <create_name+0x25a>
 800889a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800889c:	4619      	mov	r1, r3
 800889e:	4844      	ldr	r0, [pc, #272]	; (80089b0 <create_name+0x360>)
 80088a0:	f7fe fafa 	bl	8006e98 <chk_chr>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d008      	beq.n	80088bc <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80088aa:	235f      	movs	r3, #95	; 0x5f
 80088ac:	84bb      	strh	r3, [r7, #36]	; 0x24
 80088ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088b2:	f043 0303 	orr.w	r3, r3, #3
 80088b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088ba:	e01b      	b.n	80088f4 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80088bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088be:	2b40      	cmp	r3, #64	; 0x40
 80088c0:	d909      	bls.n	80088d6 <create_name+0x286>
 80088c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088c4:	2b5a      	cmp	r3, #90	; 0x5a
 80088c6:	d806      	bhi.n	80088d6 <create_name+0x286>
					b |= 2;
 80088c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088cc:	f043 0302 	orr.w	r3, r3, #2
 80088d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088d4:	e00e      	b.n	80088f4 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80088d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088d8:	2b60      	cmp	r3, #96	; 0x60
 80088da:	d90b      	bls.n	80088f4 <create_name+0x2a4>
 80088dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088de:	2b7a      	cmp	r3, #122	; 0x7a
 80088e0:	d808      	bhi.n	80088f4 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 80088e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088f0:	3b20      	subs	r3, #32
 80088f2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	1c59      	adds	r1, r3, #1
 80088fc:	6239      	str	r1, [r7, #32]
 80088fe:	4413      	add	r3, r2
 8008900:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008906:	e764      	b.n	80087d2 <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 8008908:	bf00      	nop
 800890a:	e000      	b.n	800890e <create_name+0x2be>
			if (si > di) break;			/* No extension */
 800890c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2be5      	cmp	r3, #229	; 0xe5
 8008916:	d103      	bne.n	8008920 <create_name+0x2d0>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	2205      	movs	r2, #5
 800891e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	2b08      	cmp	r3, #8
 8008924:	d104      	bne.n	8008930 <create_name+0x2e0>
 8008926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8008930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008934:	f003 030c 	and.w	r3, r3, #12
 8008938:	2b0c      	cmp	r3, #12
 800893a:	d005      	beq.n	8008948 <create_name+0x2f8>
 800893c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	2b03      	cmp	r3, #3
 8008946:	d105      	bne.n	8008954 <create_name+0x304>
		cf |= NS_LFN;
 8008948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800894c:	f043 0302 	orr.w	r3, r3, #2
 8008950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d117      	bne.n	8008990 <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	2b01      	cmp	r3, #1
 800896a:	d105      	bne.n	8008978 <create_name+0x328>
 800896c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008970:	f043 0310 	orr.w	r3, r3, #16
 8008974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008978:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800897c:	f003 030c 	and.w	r3, r3, #12
 8008980:	2b04      	cmp	r3, #4
 8008982:	d105      	bne.n	8008990 <create_name+0x340>
 8008984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008988:	f043 0308 	orr.w	r3, r3, #8
 800898c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	330b      	adds	r3, #11
 8008996:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800899a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800899c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3728      	adds	r7, #40	; 0x28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	0800a80c 	.word	0x0800a80c
 80089ac:	0800a86c 	.word	0x0800a86c
 80089b0:	0800a818 	.word	0x0800a818

080089b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2b2f      	cmp	r3, #47	; 0x2f
 80089c4:	d003      	beq.n	80089ce <follow_path+0x1a>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	2b5c      	cmp	r3, #92	; 0x5c
 80089cc:	d102      	bne.n	80089d4 <follow_path+0x20>
		path++;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	3301      	adds	r3, #1
 80089d2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b1f      	cmp	r3, #31
 80089e0:	d809      	bhi.n	80089f6 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 80089e2:	2100      	movs	r1, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff f8c0 	bl	8007b6a <dir_sdi>
 80089ea:	4603      	mov	r3, r0
 80089ec:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	615a      	str	r2, [r3, #20]
 80089f4:	e041      	b.n	8008a7a <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80089f6:	463b      	mov	r3, r7
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fe28 	bl	8008650 <create_name>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d132      	bne.n	8008a70 <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff fc72 	bl	80082f4 <dir_find>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	7adb      	ldrb	r3, [r3, #11]
 8008a1a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d125      	bne.n	8008a74 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d120      	bne.n	8008a74 <follow_path+0xc0>
 8008a32:	2305      	movs	r3, #5
 8008a34:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008a36:	e01d      	b.n	8008a74 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	f003 0304 	and.w	r3, r3, #4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d11a      	bne.n	8008a78 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	330b      	adds	r3, #11
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <follow_path+0xa8>
				res = FR_NO_PATH; break;
 8008a56:	2305      	movs	r3, #5
 8008a58:	73fb      	strb	r3, [r7, #15]
 8008a5a:	e00e      	b.n	8008a7a <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68b9      	ldr	r1, [r7, #8]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fa60 	bl	8007f28 <ld_clust>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a6e:	e7c2      	b.n	80089f6 <follow_path+0x42>
			if (res != FR_OK) break;
 8008a70:	bf00      	nop
 8008a72:	e002      	b.n	8008a7a <follow_path+0xc6>
				break;
 8008a74:	bf00      	nop
 8008a76:	e000      	b.n	8008a7a <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a78:	bf00      	nop
		}
	}

	return res;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a90:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d031      	beq.n	8008afe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	e002      	b.n	8008aa8 <get_ldnumber+0x24>
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b1f      	cmp	r3, #31
 8008aae:	d903      	bls.n	8008ab8 <get_ldnumber+0x34>
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b3a      	cmp	r3, #58	; 0x3a
 8008ab6:	d1f4      	bne.n	8008aa2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b3a      	cmp	r3, #58	; 0x3a
 8008abe:	d11c      	bne.n	8008afa <get_ldnumber+0x76>
			tp = *path;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	60fa      	str	r2, [r7, #12]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	3b30      	subs	r3, #48	; 0x30
 8008ad0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	d80e      	bhi.n	8008af6 <get_ldnumber+0x72>
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d10a      	bne.n	8008af6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d107      	bne.n	8008af6 <get_ldnumber+0x72>
					vol = (int)i;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	3301      	adds	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	e002      	b.n	8008b00 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008afa:	2300      	movs	r3, #0
 8008afc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008afe:	693b      	ldr	r3, [r7, #16]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
	...

08008b0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe fbc3 	bl	80072b6 <move_window>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <check_fs+0x2e>
		return 3;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e04a      	b.n	8008bd0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b40:	3301      	adds	r3, #1
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	b21a      	sxth	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008b4e:	b21b      	sxth	r3, r3
 8008b50:	4313      	orrs	r3, r2
 8008b52:	b21b      	sxth	r3, r3
 8008b54:	4a20      	ldr	r2, [pc, #128]	; (8008bd8 <check_fs+0xcc>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d001      	beq.n	8008b5e <check_fs+0x52>
		return 2;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	e038      	b.n	8008bd0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3336      	adds	r3, #54	; 0x36
 8008b62:	3303      	adds	r3, #3
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	061a      	lsls	r2, r3, #24
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3336      	adds	r3, #54	; 0x36
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	041b      	lsls	r3, r3, #16
 8008b72:	4313      	orrs	r3, r2
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	3236      	adds	r2, #54	; 0x36
 8008b78:	3201      	adds	r2, #1
 8008b7a:	7812      	ldrb	r2, [r2, #0]
 8008b7c:	0212      	lsls	r2, r2, #8
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008b86:	4313      	orrs	r3, r2
 8008b88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b8c:	4a13      	ldr	r2, [pc, #76]	; (8008bdc <check_fs+0xd0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d101      	bne.n	8008b96 <check_fs+0x8a>
		return 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	e01c      	b.n	8008bd0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3352      	adds	r3, #82	; 0x52
 8008b9a:	3303      	adds	r3, #3
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	061a      	lsls	r2, r3, #24
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3352      	adds	r3, #82	; 0x52
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	041b      	lsls	r3, r3, #16
 8008baa:	4313      	orrs	r3, r2
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	3252      	adds	r2, #82	; 0x52
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	7812      	ldrb	r2, [r2, #0]
 8008bb4:	0212      	lsls	r2, r2, #8
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008bc4:	4a05      	ldr	r2, [pc, #20]	; (8008bdc <check_fs+0xd0>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d101      	bne.n	8008bce <check_fs+0xc2>
		return 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e000      	b.n	8008bd0 <check_fs+0xc4>

	return 1;
 8008bce:	2301      	movs	r3, #1
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	ffffaa55 	.word	0xffffaa55
 8008bdc:	00544146 	.word	0x00544146

08008be0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b096      	sub	sp, #88	; 0x58
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008bf4:	68b8      	ldr	r0, [r7, #8]
 8008bf6:	f7ff ff45 	bl	8008a84 <get_ldnumber>
 8008bfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da01      	bge.n	8008c06 <find_volume+0x26>
 8008c02:	230b      	movs	r3, #11
 8008c04:	e2de      	b.n	80091c4 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008c06:	4ab1      	ldr	r2, [pc, #708]	; (8008ecc <find_volume+0x2ec>)
 8008c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <find_volume+0x3a>
 8008c16:	230c      	movs	r3, #12
 8008c18:	e2d4      	b.n	80091c4 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c1e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d01b      	beq.n	8008c62 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe f835 	bl	8006ca0 <disk_status>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10c      	bne.n	8008c62 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d007      	beq.n	8008c5e <find_volume+0x7e>
 8008c4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8008c5a:	230a      	movs	r3, #10
 8008c5c:	e2b2      	b.n	80091c4 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e2b0      	b.n	80091c4 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c70:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe f82a 	bl	8006cd4 <disk_initialize>
 8008c80:	4603      	mov	r3, r0
 8008c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008c86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008c92:	2303      	movs	r3, #3
 8008c94:	e296      	b.n	80091c4 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008c96:	79fb      	ldrb	r3, [r7, #7]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d007      	beq.n	8008cac <find_volume+0xcc>
 8008c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8008ca8:	230a      	movs	r3, #10
 8008caa:	e28b      	b.n	80091c4 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8008cb8:	461a      	mov	r2, r3
 8008cba:	2102      	movs	r1, #2
 8008cbc:	f7fe f870 	bl	8006da0 <disk_ioctl>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10b      	bne.n	8008cde <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd0:	d305      	bcc.n	8008cde <find_volume+0xfe>
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cdc:	d901      	bls.n	8008ce2 <find_volume+0x102>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e270      	b.n	80091c4 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008ce6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cea:	f7ff ff0f 	bl	8008b0c <check_fs>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d155      	bne.n	8008da8 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8008d00:	e029      	b.n	8008d56 <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008d0c:	4413      	add	r3, r2
 8008d0e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	3304      	adds	r3, #4
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d012      	beq.n	8008d40 <find_volume+0x160>
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	330b      	adds	r3, #11
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	061a      	lsls	r2, r3, #24
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	330a      	adds	r3, #10
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	041b      	lsls	r3, r3, #16
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d2e:	3209      	adds	r2, #9
 8008d30:	7812      	ldrb	r2, [r2, #0]
 8008d32:	0212      	lsls	r2, r2, #8
 8008d34:	4313      	orrs	r3, r2
 8008d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d38:	3208      	adds	r2, #8
 8008d3a:	7812      	ldrb	r2, [r2, #0]
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	e000      	b.n	8008d42 <find_volume+0x162>
 8008d40:	2200      	movs	r2, #0
 8008d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008d4a:	440b      	add	r3, r1
 8008d4c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d52:	3301      	adds	r3, #1
 8008d54:	643b      	str	r3, [r7, #64]	; 0x40
 8008d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d9d2      	bls.n	8008d02 <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <find_volume+0x18c>
 8008d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008d74:	4413      	add	r3, r2
 8008d76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d005      	beq.n	8008d8e <find_volume+0x1ae>
 8008d82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d86:	f7ff fec1 	bl	8008b0c <check_fs>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	e000      	b.n	8008d90 <find_volume+0x1b0>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <find_volume+0x1c8>
 8008d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9e:	3301      	adds	r3, #1
 8008da0:	643b      	str	r3, [r7, #64]	; 0x40
 8008da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d9e1      	bls.n	8008d6c <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008da8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d101      	bne.n	8008db4 <find_volume+0x1d4>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e207      	b.n	80091c4 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <find_volume+0x1e0>
 8008dbc:	230d      	movs	r3, #13
 8008dbe:	e201      	b.n	80091c4 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	7b1b      	ldrb	r3, [r3, #12]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	b21a      	sxth	r2, r3
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	7adb      	ldrb	r3, [r3, #11]
 8008dcc:	b21b      	sxth	r3, r3
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	b21a      	sxth	r2, r3
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008dd8:	b21b      	sxth	r3, r3
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d001      	beq.n	8008de2 <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 8008dde:	230d      	movs	r3, #13
 8008de0:	e1f0      	b.n	80091c4 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	7ddb      	ldrb	r3, [r3, #23]
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	b21a      	sxth	r2, r3
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	7d9b      	ldrb	r3, [r3, #22]
 8008dee:	b21b      	sxth	r3, r3
 8008df0:	4313      	orrs	r3, r2
 8008df2:	b21b      	sxth	r3, r3
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d112      	bne.n	8008e24 <find_volume+0x244>
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008e04:	061a      	lsls	r2, r3, #24
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008e0c:	041b      	lsls	r3, r3, #16
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e12:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008e16:	0212      	lsls	r2, r2, #8
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e1c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008e20:	4313      	orrs	r3, r2
 8008e22:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e28:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	7c1a      	ldrb	r2, [r3, #16]
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d006      	beq.n	8008e4e <find_volume+0x26e>
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d001      	beq.n	8008e4e <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 8008e4a:	230d      	movs	r3, #13
 8008e4c:	e1ba      	b.n	80091c4 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8008e54:	461a      	mov	r2, r3
 8008e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e58:	fb02 f303 	mul.w	r3, r2, r3
 8008e5c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	7b5a      	ldrb	r2, [r3, #13]
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <find_volume+0x2a8>
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008e80:	3b01      	subs	r3, #1
 8008e82:	4013      	ands	r3, r2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 8008e88:	230d      	movs	r3, #13
 8008e8a:	e19b      	b.n	80091c4 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	7c9b      	ldrb	r3, [r3, #18]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b21a      	sxth	r2, r3
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	7c5b      	ldrb	r3, [r3, #17]
 8008e98:	b21b      	sxth	r3, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b21b      	sxth	r3, r3
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eae:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008eb2:	0952      	lsrs	r2, r2, #5
 8008eb4:	b292      	uxth	r2, r2
 8008eb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eba:	fb02 f201 	mul.w	r2, r2, r1
 8008ebe:	1a9b      	subs	r3, r3, r2
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d004      	beq.n	8008ed0 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 8008ec6:	230d      	movs	r3, #13
 8008ec8:	e17c      	b.n	80091c4 <find_volume+0x5e4>
 8008eca:	bf00      	nop
 8008ecc:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	7d1b      	ldrb	r3, [r3, #20]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	b21a      	sxth	r2, r3
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	7cdb      	ldrb	r3, [r3, #19]
 8008edc:	b21b      	sxth	r3, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	b21b      	sxth	r3, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d112      	bne.n	8008f12 <find_volume+0x332>
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008ef2:	061a      	lsls	r2, r3, #24
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008efa:	041b      	lsls	r3, r3, #16
 8008efc:	4313      	orrs	r3, r2
 8008efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f00:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008f04:	0212      	lsls	r2, r2, #8
 8008f06:	4313      	orrs	r3, r2
 8008f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	7bdb      	ldrb	r3, [r3, #15]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	b21a      	sxth	r2, r3
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	7b9b      	ldrb	r3, [r3, #14]
 8008f1e:	b21b      	sxth	r3, r3
 8008f20:	4313      	orrs	r3, r2
 8008f22:	b21b      	sxth	r3, r3
 8008f24:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008f26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <find_volume+0x350>
 8008f2c:	230d      	movs	r3, #13
 8008f2e:	e149      	b.n	80091c4 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008f30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f34:	4413      	add	r3, r2
 8008f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f38:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 8008f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f3e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008f42:	0952      	lsrs	r2, r2, #5
 8008f44:	b292      	uxth	r2, r2
 8008f46:	fbb1 f2f2 	udiv	r2, r1, r2
 8008f4a:	b292      	uxth	r2, r2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d201      	bcs.n	8008f5c <find_volume+0x37c>
 8008f58:	230d      	movs	r3, #13
 8008f5a:	e133      	b.n	80091c4 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f64:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8008f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <find_volume+0x398>
 8008f74:	230d      	movs	r3, #13
 8008f76:	e125      	b.n	80091c4 <find_volume+0x5e4>
	fmt = FS_FAT12;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d902      	bls.n	8008f8e <find_volume+0x3ae>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d902      	bls.n	8008f9e <find_volume+0x3be>
 8008f98:	2303      	movs	r3, #3
 8008f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	1c9a      	adds	r2, r3, #2
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fac:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008fb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fb4:	441a      	add	r2, r3
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8008fbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	441a      	add	r2, r3
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 8008fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d121      	bne.n	8009014 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <find_volume+0x3fe>
 8008fda:	230d      	movs	r3, #13
 8008fdc:	e0f2      	b.n	80091c4 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008fe4:	061a      	lsls	r2, r3, #24
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008fec:	041b      	lsls	r3, r3, #16
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ff2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008ff6:	0212      	lsls	r2, r2, #8
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ffc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8009000:	431a      	orrs	r2, r3
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	647b      	str	r3, [r7, #68]	; 0x44
 8009012:	e025      	b.n	8009060 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <find_volume+0x442>
 800901e:	230d      	movs	r3, #13
 8009020:	e0d0      	b.n	80091c4 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8009028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902a:	441a      	add	r2, r3
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009036:	2b02      	cmp	r3, #2
 8009038:	d104      	bne.n	8009044 <find_volume+0x464>
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	e00c      	b.n	800905e <find_volume+0x47e>
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800904a:	4613      	mov	r3, r2
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	4413      	add	r3, r2
 8009050:	085a      	lsrs	r2, r3, #1
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800905e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800906c:	4619      	mov	r1, r3
 800906e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009070:	440b      	add	r3, r1
 8009072:	3b01      	subs	r3, #1
 8009074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009076:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 800907a:	fbb3 f3f1 	udiv	r3, r3, r1
 800907e:	429a      	cmp	r2, r3
 8009080:	d201      	bcs.n	8009086 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 8009082:	230d      	movs	r3, #13
 8009084:	e09e      	b.n	80091c4 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	f04f 32ff 	mov.w	r2, #4294967295
 800908c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	2280      	movs	r2, #128	; 0x80
 80090a0:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80090a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d177      	bne.n	800919c <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	b21a      	sxth	r2, r3
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090bc:	b21b      	sxth	r3, r3
 80090be:	4313      	orrs	r3, r2
 80090c0:	b21b      	sxth	r3, r3
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d16a      	bne.n	800919c <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 80090c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c8:	3301      	adds	r3, #1
 80090ca:	4619      	mov	r1, r3
 80090cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090ce:	f7fe f8f2 	bl	80072b6 <move_window>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d161      	bne.n	800919c <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80090e6:	021b      	lsls	r3, r3, #8
 80090e8:	b21a      	sxth	r2, r3
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80090f0:	b21b      	sxth	r3, r3
 80090f2:	4313      	orrs	r3, r2
 80090f4:	b21b      	sxth	r3, r3
 80090f6:	4a35      	ldr	r2, [pc, #212]	; (80091cc <find_volume+0x5ec>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d14f      	bne.n	800919c <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	78db      	ldrb	r3, [r3, #3]
 8009100:	061a      	lsls	r2, r3, #24
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	789b      	ldrb	r3, [r3, #2]
 8009106:	041b      	lsls	r3, r3, #16
 8009108:	4313      	orrs	r3, r2
 800910a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800910c:	7852      	ldrb	r2, [r2, #1]
 800910e:	0212      	lsls	r2, r2, #8
 8009110:	4313      	orrs	r3, r2
 8009112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009114:	7812      	ldrb	r2, [r2, #0]
 8009116:	4313      	orrs	r3, r2
 8009118:	4a2d      	ldr	r2, [pc, #180]	; (80091d0 <find_volume+0x5f0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d13e      	bne.n	800919c <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8009124:	061a      	lsls	r2, r3, #24
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800912c:	041b      	lsls	r3, r3, #16
 800912e:	4313      	orrs	r3, r2
 8009130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009132:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8009136:	0212      	lsls	r2, r2, #8
 8009138:	4313      	orrs	r3, r2
 800913a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800913c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8009140:	4313      	orrs	r3, r2
 8009142:	4a24      	ldr	r2, [pc, #144]	; (80091d4 <find_volume+0x5f4>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d129      	bne.n	800919c <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800914e:	061a      	lsls	r2, r3, #24
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8009156:	041b      	lsls	r3, r3, #16
 8009158:	4313      	orrs	r3, r2
 800915a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800915c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8009160:	0212      	lsls	r2, r2, #8
 8009162:	4313      	orrs	r3, r2
 8009164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009166:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800916a:	431a      	orrs	r2, r3
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8009178:	061a      	lsls	r2, r3, #24
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8009180:	041b      	lsls	r3, r3, #16
 8009182:	4313      	orrs	r3, r2
 8009184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009186:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800918a:	0212      	lsls	r2, r2, #8
 800918c:	4313      	orrs	r3, r2
 800918e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009190:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8009194:	431a      	orrs	r2, r3
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80091a2:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <find_volume+0x5f8>)
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	3301      	adds	r3, #1
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <find_volume+0x5f8>)
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <find_volume+0x5f8>)
 80091b4:	881a      	ldrh	r2, [r3, #0]
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80091bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091be:	f7fe f807 	bl	80071d0 <clear_lock>
#endif

	return FR_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3758      	adds	r7, #88	; 0x58
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	ffffaa55 	.word	0xffffaa55
 80091d0:	41615252 	.word	0x41615252
 80091d4:	61417272 	.word	0x61417272
 80091d8:	200000b0 	.word	0x200000b0

080091dc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d01d      	beq.n	800922a <validate+0x4e>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d019      	beq.n	800922a <validate+0x4e>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d013      	beq.n	800922a <validate+0x4e>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	889b      	ldrh	r3, [r3, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d10b      	bne.n	800922a <validate+0x4e>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800921a:	4618      	mov	r0, r3
 800921c:	f7fd fd40 	bl	8006ca0 <disk_status>
 8009220:	4603      	mov	r3, r0
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <validate+0x52>
		return FR_INVALID_OBJECT;
 800922a:	2309      	movs	r3, #9
 800922c:	e000      	b.n	8009230 <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4613      	mov	r3, r2
 8009244:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800924a:	f107 0310 	add.w	r3, r7, #16
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff fc18 	bl	8008a84 <get_ldnumber>
 8009254:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	da01      	bge.n	8009260 <f_mount+0x28>
 800925c:	230b      	movs	r3, #11
 800925e:	e02d      	b.n	80092bc <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009260:	4a18      	ldr	r2, [pc, #96]	; (80092c4 <f_mount+0x8c>)
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009268:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d006      	beq.n	800927e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8009270:	69b8      	ldr	r0, [r7, #24]
 8009272:	f7fd ffad 	bl	80071d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	490d      	ldr	r1, [pc, #52]	; (80092c4 <f_mount+0x8c>)
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <f_mount+0x6a>
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d001      	beq.n	80092a6 <f_mount+0x6e>
 80092a2:	2300      	movs	r3, #0
 80092a4:	e00a      	b.n	80092bc <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80092a6:	f107 0108 	add.w	r1, r7, #8
 80092aa:	f107 030c 	add.w	r3, r7, #12
 80092ae:	2200      	movs	r2, #0
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff fc95 	bl	8008be0 <find_volume>
 80092b6:	4603      	mov	r3, r0
 80092b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3720      	adds	r7, #32
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	200000ac 	.word	0x200000ac

080092c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b096      	sub	sp, #88	; 0x58
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <f_open+0x18>
 80092dc:	2309      	movs	r3, #9
 80092de:	e16d      	b.n	80095bc <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	f003 031f 	and.w	r3, r3, #31
 80092ec:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80092ee:	79fb      	ldrb	r3, [r7, #7]
 80092f0:	f023 0301 	bic.w	r3, r3, #1
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	f107 0108 	add.w	r1, r7, #8
 80092fa:	f107 0320 	add.w	r3, r7, #32
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff fc6e 	bl	8008be0 <find_volume>
 8009304:	4603      	mov	r3, r0
 8009306:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800930a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 8152 	bne.w	80095b8 <f_open+0x2f0>
		INIT_BUF(dj);
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	63bb      	str	r3, [r7, #56]	; 0x38
 800931a:	4baa      	ldr	r3, [pc, #680]	; (80095c4 <f_open+0x2fc>)
 800931c:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	f107 0320 	add.w	r3, r7, #32
 8009324:	4611      	mov	r1, r2
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fb44 	bl	80089b4 <follow_path>
 800932c:	4603      	mov	r3, r0
 800932e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009334:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009336:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800933a:	2b00      	cmp	r3, #0
 800933c:	d118      	bne.n	8009370 <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800933e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <f_open+0x84>
				res = FR_INVALID_NAME;
 8009344:	2306      	movs	r3, #6
 8009346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800934a:	e011      	b.n	8009370 <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	f023 0301 	bic.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	bf14      	ite	ne
 8009356:	2301      	movne	r3, #1
 8009358:	2300      	moveq	r3, #0
 800935a:	b2db      	uxtb	r3, r3
 800935c:	461a      	mov	r2, r3
 800935e:	f107 0320 	add.w	r3, r7, #32
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7fd fdb1 	bl	8006ecc <chk_lock>
 800936a:	4603      	mov	r3, r0
 800936c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	f003 031c 	and.w	r3, r3, #28
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 809a 	beq.w	80094b0 <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 800937c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009380:	2b00      	cmp	r3, #0
 8009382:	d019      	beq.n	80093b8 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009388:	2b04      	cmp	r3, #4
 800938a:	d10e      	bne.n	80093aa <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800938c:	f7fd fe08 	bl	8006fa0 <enq_lock>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d006      	beq.n	80093a4 <f_open+0xdc>
 8009396:	f107 0320 	add.w	r3, r7, #32
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff f85e 	bl	800845c <dir_register>
 80093a0:	4603      	mov	r3, r0
 80093a2:	e000      	b.n	80093a6 <f_open+0xde>
 80093a4:	2312      	movs	r3, #18
 80093a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	f043 0308 	orr.w	r3, r3, #8
 80093b0:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 80093b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b4:	653b      	str	r3, [r7, #80]	; 0x50
 80093b6:	e012      	b.n	80093de <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80093b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ba:	330b      	adds	r3, #11
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	f003 0311 	and.w	r3, r3, #17
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <f_open+0x106>
					res = FR_DENIED;
 80093c6:	2307      	movs	r3, #7
 80093c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80093cc:	e007      	b.n	80093de <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <f_open+0x116>
						res = FR_EXIST;
 80093d8:	2308      	movs	r3, #8
 80093da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80093de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f040 8082 	bne.w	80094ec <f_open+0x224>
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d07c      	beq.n	80094ec <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 80093f2:	f7fd fbef 	bl	8006bd4 <get_fattime>
 80093f6:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 80093f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093fa:	330e      	adds	r3, #14
 80093fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009404:	b29b      	uxth	r3, r3
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	b29a      	uxth	r2, r3
 800940a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800940c:	330f      	adds	r3, #15
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009414:	0c1a      	lsrs	r2, r3, #16
 8009416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009418:	3310      	adds	r3, #16
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009420:	0e1a      	lsrs	r2, r3, #24
 8009422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009424:	3311      	adds	r3, #17
 8009426:	b2d2      	uxtb	r2, r2
 8009428:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800942a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800942c:	330b      	adds	r3, #11
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009434:	331c      	adds	r3, #28
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800943c:	331d      	adds	r3, #29
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009444:	331e      	adds	r3, #30
 8009446:	2200      	movs	r2, #0
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800944c:	331f      	adds	r3, #31
 800944e:	2200      	movs	r2, #0
 8009450:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fd66 	bl	8007f28 <ld_clust>
 800945c:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 800945e:	2100      	movs	r1, #0
 8009460:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009462:	f7fe fd8e 	bl	8007f82 <st_clust>
				dj.fs->wflag = 1;
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800946e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009470:	2b00      	cmp	r3, #0
 8009472:	d03b      	beq.n	80094ec <f_open+0x224>
					dw = dj.fs->winsect;
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800947a:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fa43 	bl	800790c <remove_chain>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 800948c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009490:	2b00      	cmp	r3, #0
 8009492:	d12b      	bne.n	80094ec <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009498:	3a01      	subs	r2, #1
 800949a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fd ff07 	bl	80072b6 <move_window>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80094ae:	e01d      	b.n	80094ec <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80094b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d119      	bne.n	80094ec <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80094b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ba:	330b      	adds	r3, #11
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	f003 0310 	and.w	r3, r3, #16
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <f_open+0x206>
					res = FR_NO_FILE;
 80094c6:	2304      	movs	r3, #4
 80094c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80094cc:	e00e      	b.n	80094ec <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d009      	beq.n	80094ec <f_open+0x224>
 80094d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094da:	330b      	adds	r3, #11
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <f_open+0x224>
						res = FR_DENIED;
 80094e6:	2307      	movs	r3, #7
 80094e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 80094ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d129      	bne.n	8009548 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	f003 0308 	and.w	r3, r3, #8
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <f_open+0x23e>
				mode |= FA__WRITTEN;
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	f043 0320 	orr.w	r3, r3, #32
 8009504:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009514:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	f023 0301 	bic.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	bf14      	ite	ne
 8009520:	2301      	movne	r3, #1
 8009522:	2300      	moveq	r3, #0
 8009524:	b2db      	uxtb	r3, r3
 8009526:	461a      	mov	r2, r3
 8009528:	f107 0320 	add.w	r3, r7, #32
 800952c:	4611      	mov	r1, r2
 800952e:	4618      	mov	r0, r3
 8009530:	f7fd fd5a 	bl	8006fe8 <inc_lock>
 8009534:	4602      	mov	r2, r0
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <f_open+0x280>
 8009542:	2302      	movs	r3, #2
 8009544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009548:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800954c:	2b00      	cmp	r3, #0
 800954e:	d133      	bne.n	80095b8 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	79fa      	ldrb	r2, [r7, #7]
 8009554:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe fce1 	bl	8007f28 <ld_clust>
 8009566:	4602      	mov	r2, r0
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800956c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800956e:	331f      	adds	r3, #31
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	061a      	lsls	r2, r3, #24
 8009574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009576:	331e      	adds	r3, #30
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	041b      	lsls	r3, r3, #16
 800957c:	4313      	orrs	r3, r2
 800957e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009580:	321d      	adds	r2, #29
 8009582:	7812      	ldrb	r2, [r2, #0]
 8009584:	0212      	lsls	r2, r2, #8
 8009586:	4313      	orrs	r3, r2
 8009588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800958a:	321c      	adds	r2, #28
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	431a      	orrs	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80095b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3758      	adds	r7, #88	; 0x58
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	200000cc 	.word	0x200000cc

080095c8 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08c      	sub	sp, #48	; 0x30
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7ff fdfb 	bl	80091dc <validate>
 80095e6:	4603      	mov	r3, r0
 80095e8:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80095ea:	7ffb      	ldrb	r3, [r7, #31]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <f_read+0x2c>
 80095f0:	7ffb      	ldrb	r3, [r7, #31]
 80095f2:	e13a      	b.n	800986a <f_read+0x2a2>
	if (fp->err)								/* Check error */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	79db      	ldrb	r3, [r3, #7]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	79db      	ldrb	r3, [r3, #7]
 8009600:	e133      	b.n	800986a <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	799b      	ldrb	r3, [r3, #6]
 8009606:	f003 0301 	and.w	r3, r3, #1
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800960e:	2307      	movs	r3, #7
 8009610:	e12b      	b.n	800986a <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	429a      	cmp	r2, r3
 8009624:	f240 811c 	bls.w	8009860 <f_read+0x298>
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800962c:	e118      	b.n	8009860 <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	6812      	ldr	r2, [r2, #0]
 8009636:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800963a:	fbb3 f1f2 	udiv	r1, r3, r2
 800963e:	fb02 f201 	mul.w	r2, r2, r1
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	2b00      	cmp	r3, #0
 8009646:	f040 80bc 	bne.w	80097c2 <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	6812      	ldr	r2, [r2, #0]
 8009652:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009656:	fbb3 f3f2 	udiv	r3, r3, r2
 800965a:	b2da      	uxtb	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009664:	3b01      	subs	r3, #1
 8009666:	b2db      	uxtb	r3, r3
 8009668:	4013      	ands	r3, r2
 800966a:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d130      	bne.n	80096d4 <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d103      	bne.n	8009682 <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009680:	e014      	b.n	80096ac <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	2b00      	cmp	r3, #0
 8009688:	d007      	beq.n	800969a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	4619      	mov	r1, r3
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f7fe fa32 	bl	8007afa <clmt_clust>
 8009696:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009698:	e008      	b.n	80096ac <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	4619      	mov	r1, r3
 80096a4:	4610      	mov	r0, r2
 80096a6:	f7fd ff03 	bl	80074b0 <get_fat>
 80096aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d804      	bhi.n	80096bc <f_read+0xf4>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2202      	movs	r2, #2
 80096b6:	71da      	strb	r2, [r3, #7]
 80096b8:	2302      	movs	r3, #2
 80096ba:	e0d6      	b.n	800986a <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d104      	bne.n	80096ce <f_read+0x106>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2201      	movs	r2, #1
 80096c8:	71da      	strb	r2, [r3, #7]
 80096ca:	2301      	movs	r3, #1
 80096cc:	e0cd      	b.n	800986a <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096d2:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	4619      	mov	r1, r3
 80096de:	4610      	mov	r0, r2
 80096e0:	f7fd fec5 	bl	800746e <clust2sect>
 80096e4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <f_read+0x12e>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2202      	movs	r2, #2
 80096f0:	71da      	strb	r2, [r3, #7]
 80096f2:	2302      	movs	r3, #2
 80096f4:	e0b9      	b.n	800986a <f_read+0x2a2>
			sect += csect;
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4413      	add	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009706:	461a      	mov	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	fbb3 f3f2 	udiv	r3, r3, r2
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	d052      	beq.n	80097bc <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009716:	7dfa      	ldrb	r2, [r7, #23]
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	4413      	add	r3, r2
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8009724:	4293      	cmp	r3, r2
 8009726:	d907      	bls.n	8009738 <f_read+0x170>
					cc = fp->fs->csize - csect;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009730:	461a      	mov	r2, r3
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	6a39      	ldr	r1, [r7, #32]
 8009746:	f7fd faeb 	bl	8006d20 <disk_read>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2201      	movs	r2, #1
 8009754:	71da      	strb	r2, [r3, #7]
 8009756:	2301      	movs	r3, #1
 8009758:	e087      	b.n	800986a <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8009762:	2b00      	cmp	r3, #0
 8009764:	d020      	beq.n	80097a8 <f_read+0x1e0>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009774:	429a      	cmp	r2, r3
 8009776:	d917      	bls.n	80097a8 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	6812      	ldr	r2, [r2, #0]
 8009788:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800978c:	fb02 f303 	mul.w	r3, r2, r3
 8009790:	6a3a      	ldr	r2, [r7, #32]
 8009792:	18d0      	adds	r0, r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4619      	mov	r1, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80097a2:	461a      	mov	r2, r3
 80097a4:	f7fd fb1a 	bl	8006ddc <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80097b0:	461a      	mov	r2, r3
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	fb02 f303 	mul.w	r3, r2, r3
 80097b8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80097ba:	e03d      	b.n	8009838 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80097ca:	4618      	mov	r0, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80097d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80097dc:	fb02 f201 	mul.w	r2, r2, r1
 80097e0:	1a9b      	subs	r3, r3, r2
 80097e2:	1ac3      	subs	r3, r0, r3
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80097e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d901      	bls.n	80097f2 <f_read+0x22a>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	4619      	mov	r1, r3
 80097fc:	4610      	mov	r0, r2
 80097fe:	f7fd fd5a 	bl	80072b6 <move_window>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d004      	beq.n	8009812 <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	71da      	strb	r2, [r3, #7]
 800980e:	2301      	movs	r3, #1
 8009810:	e02b      	b.n	800986a <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6819      	ldr	r1, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009822:	fbb3 f0f2 	udiv	r0, r3, r2
 8009826:	fb02 f200 	mul.w	r2, r2, r0
 800982a:	1a9b      	subs	r3, r3, r2
 800982c:	440b      	add	r3, r1
 800982e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009830:	4619      	mov	r1, r3
 8009832:	6a38      	ldr	r0, [r7, #32]
 8009834:	f7fd fad2 	bl	8006ddc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009838:	6a3a      	ldr	r2, [r7, #32]
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	4413      	add	r3, r2
 800983e:	623b      	str	r3, [r7, #32]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	441a      	add	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	609a      	str	r2, [r3, #8]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	441a      	add	r2, r3
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f47f aee3 	bne.w	800962e <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3730      	adds	r7, #48	; 0x30
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b08a      	sub	sp, #40	; 0x28
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	607a      	str	r2, [r7, #4]
 800987e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f7ff fca6 	bl	80091dc <validate>
 8009890:	4603      	mov	r3, r0
 8009892:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <f_write+0x2c>
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	e191      	b.n	8009bc2 <f_write+0x350>
	if (fp->err)							/* Check error */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	79db      	ldrb	r3, [r3, #7]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	79db      	ldrb	r3, [r3, #7]
 80098aa:	e18a      	b.n	8009bc2 <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	799b      	ldrb	r3, [r3, #6]
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80098b8:	2307      	movs	r3, #7
 80098ba:	e182      	b.n	8009bc2 <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	441a      	add	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	f080 8162 	bcs.w	8009b92 <f_write+0x320>
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80098d2:	e15e      	b.n	8009b92 <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80098e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80098e4:	fb02 f201 	mul.w	r2, r2, r1
 80098e8:	1a9b      	subs	r3, r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f040 80fd 	bne.w	8009aea <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80098fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009900:	b2da      	uxtb	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800990a:	3b01      	subs	r3, #1
 800990c:	b2db      	uxtb	r3, r3
 800990e:	4013      	ands	r3, r2
 8009910:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009912:	7dbb      	ldrb	r3, [r7, #22]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d145      	bne.n	80099a4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10d      	bne.n	800993c <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	2b00      	cmp	r3, #0
 800992a:	d11c      	bne.n	8009966 <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2100      	movs	r1, #0
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe f844 	bl	80079c0 <create_chain>
 8009938:	6278      	str	r0, [r7, #36]	; 0x24
 800993a:	e014      	b.n	8009966 <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	2b00      	cmp	r3, #0
 8009942:	d007      	beq.n	8009954 <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	4619      	mov	r1, r3
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f7fe f8d5 	bl	8007afa <clmt_clust>
 8009950:	6278      	str	r0, [r7, #36]	; 0x24
 8009952:	e008      	b.n	8009966 <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	4619      	mov	r1, r3
 800995e:	4610      	mov	r0, r2
 8009960:	f7fe f82e 	bl	80079c0 <create_chain>
 8009964:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 8117 	beq.w	8009b9c <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	2b01      	cmp	r3, #1
 8009972:	d104      	bne.n	800997e <f_write+0x10c>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2202      	movs	r2, #2
 8009978:	71da      	strb	r2, [r3, #7]
 800997a:	2302      	movs	r3, #2
 800997c:	e121      	b.n	8009bc2 <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009984:	d104      	bne.n	8009990 <f_write+0x11e>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2201      	movs	r2, #1
 800998a:	71da      	strb	r2, [r3, #7]
 800998c:	2301      	movs	r3, #1
 800998e:	e118      	b.n	8009bc2 <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009994:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <f_write+0x132>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a2:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d10c      	bne.n	80099ce <f_write+0x15c>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fd fc33 	bl	8007224 <sync_window>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d004      	beq.n	80099ce <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2201      	movs	r2, #1
 80099c8:	71da      	strb	r2, [r3, #7]
 80099ca:	2301      	movs	r3, #1
 80099cc:	e0f9      	b.n	8009bc2 <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	4619      	mov	r1, r3
 80099d8:	4610      	mov	r0, r2
 80099da:	f7fd fd48 	bl	800746e <clust2sect>
 80099de:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <f_write+0x17e>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2202      	movs	r2, #2
 80099ea:	71da      	strb	r2, [r3, #7]
 80099ec:	2302      	movs	r3, #2
 80099ee:	e0e8      	b.n	8009bc2 <f_write+0x350>
			sect += csect;
 80099f0:	7dbb      	ldrb	r3, [r7, #22]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	4413      	add	r3, r2
 80099f6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009a00:	461a      	mov	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a08:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d051      	beq.n	8009ab4 <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009a10:	7dba      	ldrb	r2, [r7, #22]
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	4413      	add	r3, r2
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d907      	bls.n	8009a32 <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	7dbb      	ldrb	r3, [r7, #22]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	69b9      	ldr	r1, [r7, #24]
 8009a40:	f7fd f98e 	bl	8006d60 <disk_write>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d004      	beq.n	8009a54 <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	71da      	strb	r2, [r3, #7]
 8009a50:	2301      	movs	r3, #1
 8009a52:	e0b6      	b.n	8009bc2 <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	69fa      	ldr	r2, [r7, #28]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d91c      	bls.n	8009aa0 <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	6812      	ldr	r2, [r2, #0]
 8009a7c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009a80:	fb02 f303 	mul.w	r3, r2, r3
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	18d1      	adds	r1, r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009a90:	461a      	mov	r2, r3
 8009a92:	f7fd f9a3 	bl	8006ddc <mem_cpy>
					fp->fs->wflag = 0;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	fb02 f303 	mul.w	r3, r2, r3
 8009ab0:	623b      	str	r3, [r7, #32]
				continue;
 8009ab2:	e05a      	b.n	8009b6a <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d311      	bcc.n	8009ae4 <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fd fbad 	bl	8007224 <sync_window>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d004      	beq.n	8009ada <f_write+0x268>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	71da      	strb	r2, [r3, #7]
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e073      	b.n	8009bc2 <f_write+0x350>
				fp->fs->winsect = sect;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009af2:	4618      	mov	r0, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b04:	fb02 f201 	mul.w	r2, r2, r1
 8009b08:	1a9b      	subs	r3, r3, r2
 8009b0a:	1ac3      	subs	r3, r0, r3
 8009b0c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d901      	bls.n	8009b1a <f_write+0x2a8>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7fd fbc6 	bl	80072b6 <move_window>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	71da      	strb	r2, [r3, #7]
 8009b36:	2301      	movs	r3, #1
 8009b38:	e043      	b.n	8009bc2 <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6819      	ldr	r1, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009b4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b4e:	fb02 f200 	mul.w	r2, r2, r0
 8009b52:	1a9b      	subs	r3, r3, r2
 8009b54:	440b      	add	r3, r1
 8009b56:	6a3a      	ldr	r2, [r7, #32]
 8009b58:	69b9      	ldr	r1, [r7, #24]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fd f93e 	bl	8006ddc <mem_cpy>
		fp->fs->wflag = 1;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	4413      	add	r3, r2
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	441a      	add	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	609a      	str	r2, [r3, #8]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	441a      	add	r2, r3
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f47f ae9d 	bne.w	80098d4 <f_write+0x62>
 8009b9a:	e000      	b.n	8009b9e <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009b9c:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	689a      	ldr	r2, [r3, #8]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d903      	bls.n	8009bb2 <f_write+0x340>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	689a      	ldr	r2, [r3, #8]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	799b      	ldrb	r3, [r3, #6]
 8009bb6:	f043 0320 	orr.w	r3, r3, #32
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3728      	adds	r7, #40	; 0x28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b086      	sub	sp, #24
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff fb02 	bl	80091dc <validate>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d178      	bne.n	8009cd4 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	799b      	ldrb	r3, [r3, #6]
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d072      	beq.n	8009cd4 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f7fd fb5c 	bl	80072b6 <move_window>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d165      	bne.n	8009cd4 <f_sync+0x10a>
				dir = fp->dir_ptr;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	330b      	adds	r3, #11
 8009c12:	781a      	ldrb	r2, [r3, #0]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	330b      	adds	r3, #11
 8009c18:	f042 0220 	orr.w	r2, r2, #32
 8009c1c:	b2d2      	uxtb	r2, r2
 8009c1e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	331c      	adds	r3, #28
 8009c28:	b2d2      	uxtb	r2, r2
 8009c2a:	701a      	strb	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	0a1b      	lsrs	r3, r3, #8
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	331d      	adds	r3, #29
 8009c3a:	b2d2      	uxtb	r2, r2
 8009c3c:	701a      	strb	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	0c1a      	lsrs	r2, r3, #16
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	331e      	adds	r3, #30
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	701a      	strb	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	0e1a      	lsrs	r2, r3, #24
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	331f      	adds	r3, #31
 8009c56:	b2d2      	uxtb	r2, r2
 8009c58:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6938      	ldr	r0, [r7, #16]
 8009c62:	f7fe f98e 	bl	8007f82 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009c66:	f7fc ffb5 	bl	8006bd4 <get_fattime>
 8009c6a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	3316      	adds	r3, #22
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	b2d2      	uxtb	r2, r2
 8009c74:	701a      	strb	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	3317      	adds	r3, #23
 8009c82:	b2d2      	uxtb	r2, r2
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	0c1a      	lsrs	r2, r3, #16
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	3318      	adds	r3, #24
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	0e1a      	lsrs	r2, r3, #24
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	3319      	adds	r3, #25
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	3312      	adds	r3, #18
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	701a      	strb	r2, [r3, #0]
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	3313      	adds	r3, #19
 8009caa:	2200      	movs	r2, #0
 8009cac:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	799b      	ldrb	r3, [r3, #6]
 8009cb2:	f023 0320 	bic.w	r3, r3, #32
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fd fb21 	bl	8007312 <sync_fs>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7ff ff6f 	bl	8009bca <f_sync>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d114      	bne.n	8009d20 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff fa70 	bl	80091dc <validate>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10c      	bne.n	8009d20 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fd fa1c 	bl	8007148 <dec_lock>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b087      	sub	sp, #28
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	4613      	mov	r3, r2
 8009d38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009d42:	4b1e      	ldr	r3, [pc, #120]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d44:	7a5b      	ldrb	r3, [r3, #9]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d831      	bhi.n	8009db0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d4c:	4b1b      	ldr	r3, [pc, #108]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d4e:	7a5b      	ldrb	r3, [r3, #9]
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	461a      	mov	r2, r3
 8009d54:	4b19      	ldr	r3, [pc, #100]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d56:	2100      	movs	r1, #0
 8009d58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009d5a:	4b18      	ldr	r3, [pc, #96]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d5c:	7a5b      	ldrb	r3, [r3, #9]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009d6a:	4b14      	ldr	r3, [pc, #80]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d6c:	7a5b      	ldrb	r3, [r3, #9]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d74:	4413      	add	r3, r2
 8009d76:	79fa      	ldrb	r2, [r7, #7]
 8009d78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009d7a:	4b10      	ldr	r3, [pc, #64]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d7c:	7a5b      	ldrb	r3, [r3, #9]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	b2d1      	uxtb	r1, r2
 8009d84:	4a0d      	ldr	r2, [pc, #52]	; (8009dbc <FATFS_LinkDriverEx+0x90>)
 8009d86:	7251      	strb	r1, [r2, #9]
 8009d88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009d8a:	7dbb      	ldrb	r3, [r7, #22]
 8009d8c:	3330      	adds	r3, #48	; 0x30
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	3301      	adds	r3, #1
 8009d98:	223a      	movs	r2, #58	; 0x3a
 8009d9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	222f      	movs	r2, #47	; 0x2f
 8009da2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	3303      	adds	r3, #3
 8009da8:	2200      	movs	r2, #0
 8009daa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bc80      	pop	{r7}
 8009dba:	4770      	bx	lr
 8009dbc:	200002cc 	.word	0x200002cc

08009dc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7ff ffac 	bl	8009d2c <FATFS_LinkDriverEx>
 8009dd4:	4603      	mov	r3, r0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009dec:	88fb      	ldrh	r3, [r7, #6]
 8009dee:	2b7f      	cmp	r3, #127	; 0x7f
 8009df0:	d802      	bhi.n	8009df8 <ff_convert+0x18>
		c = chr;
 8009df2:	88fb      	ldrh	r3, [r7, #6]
 8009df4:	81fb      	strh	r3, [r7, #14]
 8009df6:	e025      	b.n	8009e44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009dfe:	88fb      	ldrh	r3, [r7, #6]
 8009e00:	2bff      	cmp	r3, #255	; 0xff
 8009e02:	d805      	bhi.n	8009e10 <ff_convert+0x30>
 8009e04:	88fb      	ldrh	r3, [r7, #6]
 8009e06:	3b80      	subs	r3, #128	; 0x80
 8009e08:	4a11      	ldr	r2, [pc, #68]	; (8009e50 <ff_convert+0x70>)
 8009e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e0e:	e000      	b.n	8009e12 <ff_convert+0x32>
 8009e10:	2300      	movs	r3, #0
 8009e12:	81fb      	strh	r3, [r7, #14]
 8009e14:	e016      	b.n	8009e44 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8009e16:	2300      	movs	r3, #0
 8009e18:	81fb      	strh	r3, [r7, #14]
 8009e1a:	e009      	b.n	8009e30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009e1c:	89fb      	ldrh	r3, [r7, #14]
 8009e1e:	4a0c      	ldr	r2, [pc, #48]	; (8009e50 <ff_convert+0x70>)
 8009e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e24:	88fa      	ldrh	r2, [r7, #6]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d006      	beq.n	8009e38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009e2a:	89fb      	ldrh	r3, [r7, #14]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	81fb      	strh	r3, [r7, #14]
 8009e30:	89fb      	ldrh	r3, [r7, #14]
 8009e32:	2b7f      	cmp	r3, #127	; 0x7f
 8009e34:	d9f2      	bls.n	8009e1c <ff_convert+0x3c>
 8009e36:	e000      	b.n	8009e3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009e38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009e3a:	89fb      	ldrh	r3, [r7, #14]
 8009e3c:	3380      	adds	r3, #128	; 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009e44:	89fb      	ldrh	r3, [r7, #14]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bc80      	pop	{r7}
 8009e4e:	4770      	bx	lr
 8009e50:	0800a8fc 	.word	0x0800a8fc

08009e54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	e002      	b.n	8009e6a <ff_wtoupper+0x16>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	4a0f      	ldr	r2, [pc, #60]	; (8009ea8 <ff_wtoupper+0x54>)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d006      	beq.n	8009e84 <ff_wtoupper+0x30>
 8009e76:	4a0c      	ldr	r2, [pc, #48]	; (8009ea8 <ff_wtoupper+0x54>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e7e:	88fa      	ldrh	r2, [r7, #6]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d1ef      	bne.n	8009e64 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009e84:	4a08      	ldr	r2, [pc, #32]	; (8009ea8 <ff_wtoupper+0x54>)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d004      	beq.n	8009e9a <ff_wtoupper+0x46>
 8009e90:	4a06      	ldr	r2, [pc, #24]	; (8009eac <ff_wtoupper+0x58>)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e98:	e000      	b.n	8009e9c <ff_wtoupper+0x48>
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bc80      	pop	{r7}
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	0800a9fc 	.word	0x0800a9fc
 8009eac:	0800abdc 	.word	0x0800abdc

08009eb0 <__errno>:
 8009eb0:	4b01      	ldr	r3, [pc, #4]	; (8009eb8 <__errno+0x8>)
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	20000024 	.word	0x20000024

08009ebc <__libc_init_array>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	4d0c      	ldr	r5, [pc, #48]	; (8009ef4 <__libc_init_array+0x38>)
 8009ec2:	4c0d      	ldr	r4, [pc, #52]	; (8009ef8 <__libc_init_array+0x3c>)
 8009ec4:	1b64      	subs	r4, r4, r5
 8009ec6:	10a4      	asrs	r4, r4, #2
 8009ec8:	42a6      	cmp	r6, r4
 8009eca:	d109      	bne.n	8009ee0 <__libc_init_array+0x24>
 8009ecc:	f000 fc5c 	bl	800a788 <_init>
 8009ed0:	2600      	movs	r6, #0
 8009ed2:	4d0a      	ldr	r5, [pc, #40]	; (8009efc <__libc_init_array+0x40>)
 8009ed4:	4c0a      	ldr	r4, [pc, #40]	; (8009f00 <__libc_init_array+0x44>)
 8009ed6:	1b64      	subs	r4, r4, r5
 8009ed8:	10a4      	asrs	r4, r4, #2
 8009eda:	42a6      	cmp	r6, r4
 8009edc:	d105      	bne.n	8009eea <__libc_init_array+0x2e>
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee4:	4798      	blx	r3
 8009ee6:	3601      	adds	r6, #1
 8009ee8:	e7ee      	b.n	8009ec8 <__libc_init_array+0xc>
 8009eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eee:	4798      	blx	r3
 8009ef0:	3601      	adds	r6, #1
 8009ef2:	e7f2      	b.n	8009eda <__libc_init_array+0x1e>
 8009ef4:	0800adf0 	.word	0x0800adf0
 8009ef8:	0800adf0 	.word	0x0800adf0
 8009efc:	0800adf0 	.word	0x0800adf0
 8009f00:	0800adf4 	.word	0x0800adf4

08009f04 <memset>:
 8009f04:	4603      	mov	r3, r0
 8009f06:	4402      	add	r2, r0
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d100      	bne.n	8009f0e <memset+0xa>
 8009f0c:	4770      	bx	lr
 8009f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f12:	e7f9      	b.n	8009f08 <memset+0x4>

08009f14 <siprintf>:
 8009f14:	b40e      	push	{r1, r2, r3}
 8009f16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f1a:	b500      	push	{lr}
 8009f1c:	b09c      	sub	sp, #112	; 0x70
 8009f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f20:	9002      	str	r0, [sp, #8]
 8009f22:	9006      	str	r0, [sp, #24]
 8009f24:	9107      	str	r1, [sp, #28]
 8009f26:	9104      	str	r1, [sp, #16]
 8009f28:	4808      	ldr	r0, [pc, #32]	; (8009f4c <siprintf+0x38>)
 8009f2a:	4909      	ldr	r1, [pc, #36]	; (8009f50 <siprintf+0x3c>)
 8009f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f30:	9105      	str	r1, [sp, #20]
 8009f32:	6800      	ldr	r0, [r0, #0]
 8009f34:	a902      	add	r1, sp, #8
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	f000 f868 	bl	800a00c <_svfiprintf_r>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	9b02      	ldr	r3, [sp, #8]
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	b01c      	add	sp, #112	; 0x70
 8009f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f48:	b003      	add	sp, #12
 8009f4a:	4770      	bx	lr
 8009f4c:	20000024 	.word	0x20000024
 8009f50:	ffff0208 	.word	0xffff0208

08009f54 <__ssputs_r>:
 8009f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f58:	688e      	ldr	r6, [r1, #8]
 8009f5a:	4682      	mov	sl, r0
 8009f5c:	429e      	cmp	r6, r3
 8009f5e:	460c      	mov	r4, r1
 8009f60:	4690      	mov	r8, r2
 8009f62:	461f      	mov	r7, r3
 8009f64:	d838      	bhi.n	8009fd8 <__ssputs_r+0x84>
 8009f66:	898a      	ldrh	r2, [r1, #12]
 8009f68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f6c:	d032      	beq.n	8009fd4 <__ssputs_r+0x80>
 8009f6e:	6825      	ldr	r5, [r4, #0]
 8009f70:	6909      	ldr	r1, [r1, #16]
 8009f72:	3301      	adds	r3, #1
 8009f74:	eba5 0901 	sub.w	r9, r5, r1
 8009f78:	6965      	ldr	r5, [r4, #20]
 8009f7a:	444b      	add	r3, r9
 8009f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f84:	106d      	asrs	r5, r5, #1
 8009f86:	429d      	cmp	r5, r3
 8009f88:	bf38      	it	cc
 8009f8a:	461d      	movcc	r5, r3
 8009f8c:	0553      	lsls	r3, r2, #21
 8009f8e:	d531      	bpl.n	8009ff4 <__ssputs_r+0xa0>
 8009f90:	4629      	mov	r1, r5
 8009f92:	f000 fb53 	bl	800a63c <_malloc_r>
 8009f96:	4606      	mov	r6, r0
 8009f98:	b950      	cbnz	r0, 8009fb0 <__ssputs_r+0x5c>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	f8ca 3000 	str.w	r3, [sl]
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb0:	464a      	mov	r2, r9
 8009fb2:	6921      	ldr	r1, [r4, #16]
 8009fb4:	f000 face 	bl	800a554 <memcpy>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	6126      	str	r6, [r4, #16]
 8009fc6:	444e      	add	r6, r9
 8009fc8:	6026      	str	r6, [r4, #0]
 8009fca:	463e      	mov	r6, r7
 8009fcc:	6165      	str	r5, [r4, #20]
 8009fce:	eba5 0509 	sub.w	r5, r5, r9
 8009fd2:	60a5      	str	r5, [r4, #8]
 8009fd4:	42be      	cmp	r6, r7
 8009fd6:	d900      	bls.n	8009fda <__ssputs_r+0x86>
 8009fd8:	463e      	mov	r6, r7
 8009fda:	4632      	mov	r2, r6
 8009fdc:	4641      	mov	r1, r8
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	f000 fac6 	bl	800a570 <memmove>
 8009fe4:	68a3      	ldr	r3, [r4, #8]
 8009fe6:	6822      	ldr	r2, [r4, #0]
 8009fe8:	1b9b      	subs	r3, r3, r6
 8009fea:	4432      	add	r2, r6
 8009fec:	2000      	movs	r0, #0
 8009fee:	60a3      	str	r3, [r4, #8]
 8009ff0:	6022      	str	r2, [r4, #0]
 8009ff2:	e7db      	b.n	8009fac <__ssputs_r+0x58>
 8009ff4:	462a      	mov	r2, r5
 8009ff6:	f000 fb7b 	bl	800a6f0 <_realloc_r>
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d1e1      	bne.n	8009fc4 <__ssputs_r+0x70>
 800a000:	4650      	mov	r0, sl
 800a002:	6921      	ldr	r1, [r4, #16]
 800a004:	f000 face 	bl	800a5a4 <_free_r>
 800a008:	e7c7      	b.n	8009f9a <__ssputs_r+0x46>
	...

0800a00c <_svfiprintf_r>:
 800a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	4698      	mov	r8, r3
 800a012:	898b      	ldrh	r3, [r1, #12]
 800a014:	4607      	mov	r7, r0
 800a016:	061b      	lsls	r3, r3, #24
 800a018:	460d      	mov	r5, r1
 800a01a:	4614      	mov	r4, r2
 800a01c:	b09d      	sub	sp, #116	; 0x74
 800a01e:	d50e      	bpl.n	800a03e <_svfiprintf_r+0x32>
 800a020:	690b      	ldr	r3, [r1, #16]
 800a022:	b963      	cbnz	r3, 800a03e <_svfiprintf_r+0x32>
 800a024:	2140      	movs	r1, #64	; 0x40
 800a026:	f000 fb09 	bl	800a63c <_malloc_r>
 800a02a:	6028      	str	r0, [r5, #0]
 800a02c:	6128      	str	r0, [r5, #16]
 800a02e:	b920      	cbnz	r0, 800a03a <_svfiprintf_r+0x2e>
 800a030:	230c      	movs	r3, #12
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	f04f 30ff 	mov.w	r0, #4294967295
 800a038:	e0d1      	b.n	800a1de <_svfiprintf_r+0x1d2>
 800a03a:	2340      	movs	r3, #64	; 0x40
 800a03c:	616b      	str	r3, [r5, #20]
 800a03e:	2300      	movs	r3, #0
 800a040:	9309      	str	r3, [sp, #36]	; 0x24
 800a042:	2320      	movs	r3, #32
 800a044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a048:	2330      	movs	r3, #48	; 0x30
 800a04a:	f04f 0901 	mov.w	r9, #1
 800a04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a052:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a1f8 <_svfiprintf_r+0x1ec>
 800a056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05a:	4623      	mov	r3, r4
 800a05c:	469a      	mov	sl, r3
 800a05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a062:	b10a      	cbz	r2, 800a068 <_svfiprintf_r+0x5c>
 800a064:	2a25      	cmp	r2, #37	; 0x25
 800a066:	d1f9      	bne.n	800a05c <_svfiprintf_r+0x50>
 800a068:	ebba 0b04 	subs.w	fp, sl, r4
 800a06c:	d00b      	beq.n	800a086 <_svfiprintf_r+0x7a>
 800a06e:	465b      	mov	r3, fp
 800a070:	4622      	mov	r2, r4
 800a072:	4629      	mov	r1, r5
 800a074:	4638      	mov	r0, r7
 800a076:	f7ff ff6d 	bl	8009f54 <__ssputs_r>
 800a07a:	3001      	adds	r0, #1
 800a07c:	f000 80aa 	beq.w	800a1d4 <_svfiprintf_r+0x1c8>
 800a080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a082:	445a      	add	r2, fp
 800a084:	9209      	str	r2, [sp, #36]	; 0x24
 800a086:	f89a 3000 	ldrb.w	r3, [sl]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 80a2 	beq.w	800a1d4 <_svfiprintf_r+0x1c8>
 800a090:	2300      	movs	r3, #0
 800a092:	f04f 32ff 	mov.w	r2, #4294967295
 800a096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a09a:	f10a 0a01 	add.w	sl, sl, #1
 800a09e:	9304      	str	r3, [sp, #16]
 800a0a0:	9307      	str	r3, [sp, #28]
 800a0a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a8:	4654      	mov	r4, sl
 800a0aa:	2205      	movs	r2, #5
 800a0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b0:	4851      	ldr	r0, [pc, #324]	; (800a1f8 <_svfiprintf_r+0x1ec>)
 800a0b2:	f000 fa41 	bl	800a538 <memchr>
 800a0b6:	9a04      	ldr	r2, [sp, #16]
 800a0b8:	b9d8      	cbnz	r0, 800a0f2 <_svfiprintf_r+0xe6>
 800a0ba:	06d0      	lsls	r0, r2, #27
 800a0bc:	bf44      	itt	mi
 800a0be:	2320      	movmi	r3, #32
 800a0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c4:	0711      	lsls	r1, r2, #28
 800a0c6:	bf44      	itt	mi
 800a0c8:	232b      	movmi	r3, #43	; 0x2b
 800a0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d4:	d015      	beq.n	800a102 <_svfiprintf_r+0xf6>
 800a0d6:	4654      	mov	r4, sl
 800a0d8:	2000      	movs	r0, #0
 800a0da:	f04f 0c0a 	mov.w	ip, #10
 800a0de:	9a07      	ldr	r2, [sp, #28]
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0e6:	3b30      	subs	r3, #48	; 0x30
 800a0e8:	2b09      	cmp	r3, #9
 800a0ea:	d94e      	bls.n	800a18a <_svfiprintf_r+0x17e>
 800a0ec:	b1b0      	cbz	r0, 800a11c <_svfiprintf_r+0x110>
 800a0ee:	9207      	str	r2, [sp, #28]
 800a0f0:	e014      	b.n	800a11c <_svfiprintf_r+0x110>
 800a0f2:	eba0 0308 	sub.w	r3, r0, r8
 800a0f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	46a2      	mov	sl, r4
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	e7d2      	b.n	800a0a8 <_svfiprintf_r+0x9c>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	1d19      	adds	r1, r3, #4
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	9103      	str	r1, [sp, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bfbb      	ittet	lt
 800a10e:	425b      	neglt	r3, r3
 800a110:	f042 0202 	orrlt.w	r2, r2, #2
 800a114:	9307      	strge	r3, [sp, #28]
 800a116:	9307      	strlt	r3, [sp, #28]
 800a118:	bfb8      	it	lt
 800a11a:	9204      	strlt	r2, [sp, #16]
 800a11c:	7823      	ldrb	r3, [r4, #0]
 800a11e:	2b2e      	cmp	r3, #46	; 0x2e
 800a120:	d10c      	bne.n	800a13c <_svfiprintf_r+0x130>
 800a122:	7863      	ldrb	r3, [r4, #1]
 800a124:	2b2a      	cmp	r3, #42	; 0x2a
 800a126:	d135      	bne.n	800a194 <_svfiprintf_r+0x188>
 800a128:	9b03      	ldr	r3, [sp, #12]
 800a12a:	3402      	adds	r4, #2
 800a12c:	1d1a      	adds	r2, r3, #4
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	9203      	str	r2, [sp, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	bfb8      	it	lt
 800a136:	f04f 33ff 	movlt.w	r3, #4294967295
 800a13a:	9305      	str	r3, [sp, #20]
 800a13c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a208 <_svfiprintf_r+0x1fc>
 800a140:	2203      	movs	r2, #3
 800a142:	4650      	mov	r0, sl
 800a144:	7821      	ldrb	r1, [r4, #0]
 800a146:	f000 f9f7 	bl	800a538 <memchr>
 800a14a:	b140      	cbz	r0, 800a15e <_svfiprintf_r+0x152>
 800a14c:	2340      	movs	r3, #64	; 0x40
 800a14e:	eba0 000a 	sub.w	r0, r0, sl
 800a152:	fa03 f000 	lsl.w	r0, r3, r0
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	3401      	adds	r4, #1
 800a15a:	4303      	orrs	r3, r0
 800a15c:	9304      	str	r3, [sp, #16]
 800a15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a162:	2206      	movs	r2, #6
 800a164:	4825      	ldr	r0, [pc, #148]	; (800a1fc <_svfiprintf_r+0x1f0>)
 800a166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16a:	f000 f9e5 	bl	800a538 <memchr>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d038      	beq.n	800a1e4 <_svfiprintf_r+0x1d8>
 800a172:	4b23      	ldr	r3, [pc, #140]	; (800a200 <_svfiprintf_r+0x1f4>)
 800a174:	bb1b      	cbnz	r3, 800a1be <_svfiprintf_r+0x1b2>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	3307      	adds	r3, #7
 800a17a:	f023 0307 	bic.w	r3, r3, #7
 800a17e:	3308      	adds	r3, #8
 800a180:	9303      	str	r3, [sp, #12]
 800a182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a184:	4433      	add	r3, r6
 800a186:	9309      	str	r3, [sp, #36]	; 0x24
 800a188:	e767      	b.n	800a05a <_svfiprintf_r+0x4e>
 800a18a:	460c      	mov	r4, r1
 800a18c:	2001      	movs	r0, #1
 800a18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a192:	e7a5      	b.n	800a0e0 <_svfiprintf_r+0xd4>
 800a194:	2300      	movs	r3, #0
 800a196:	f04f 0c0a 	mov.w	ip, #10
 800a19a:	4619      	mov	r1, r3
 800a19c:	3401      	adds	r4, #1
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1a6:	3a30      	subs	r2, #48	; 0x30
 800a1a8:	2a09      	cmp	r2, #9
 800a1aa:	d903      	bls.n	800a1b4 <_svfiprintf_r+0x1a8>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d0c5      	beq.n	800a13c <_svfiprintf_r+0x130>
 800a1b0:	9105      	str	r1, [sp, #20]
 800a1b2:	e7c3      	b.n	800a13c <_svfiprintf_r+0x130>
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1bc:	e7f0      	b.n	800a1a0 <_svfiprintf_r+0x194>
 800a1be:	ab03      	add	r3, sp, #12
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <_svfiprintf_r+0x1f8>)
 800a1c8:	a904      	add	r1, sp, #16
 800a1ca:	f3af 8000 	nop.w
 800a1ce:	1c42      	adds	r2, r0, #1
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	d1d6      	bne.n	800a182 <_svfiprintf_r+0x176>
 800a1d4:	89ab      	ldrh	r3, [r5, #12]
 800a1d6:	065b      	lsls	r3, r3, #25
 800a1d8:	f53f af2c 	bmi.w	800a034 <_svfiprintf_r+0x28>
 800a1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1de:	b01d      	add	sp, #116	; 0x74
 800a1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e4:	ab03      	add	r3, sp, #12
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	462a      	mov	r2, r5
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <_svfiprintf_r+0x1f8>)
 800a1ee:	a904      	add	r1, sp, #16
 800a1f0:	f000 f87c 	bl	800a2ec <_printf_i>
 800a1f4:	e7eb      	b.n	800a1ce <_svfiprintf_r+0x1c2>
 800a1f6:	bf00      	nop
 800a1f8:	0800adbc 	.word	0x0800adbc
 800a1fc:	0800adc6 	.word	0x0800adc6
 800a200:	00000000 	.word	0x00000000
 800a204:	08009f55 	.word	0x08009f55
 800a208:	0800adc2 	.word	0x0800adc2

0800a20c <_printf_common>:
 800a20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a210:	4616      	mov	r6, r2
 800a212:	4699      	mov	r9, r3
 800a214:	688a      	ldr	r2, [r1, #8]
 800a216:	690b      	ldr	r3, [r1, #16]
 800a218:	4607      	mov	r7, r0
 800a21a:	4293      	cmp	r3, r2
 800a21c:	bfb8      	it	lt
 800a21e:	4613      	movlt	r3, r2
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a226:	460c      	mov	r4, r1
 800a228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a22c:	b10a      	cbz	r2, 800a232 <_printf_common+0x26>
 800a22e:	3301      	adds	r3, #1
 800a230:	6033      	str	r3, [r6, #0]
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	0699      	lsls	r1, r3, #26
 800a236:	bf42      	ittt	mi
 800a238:	6833      	ldrmi	r3, [r6, #0]
 800a23a:	3302      	addmi	r3, #2
 800a23c:	6033      	strmi	r3, [r6, #0]
 800a23e:	6825      	ldr	r5, [r4, #0]
 800a240:	f015 0506 	ands.w	r5, r5, #6
 800a244:	d106      	bne.n	800a254 <_printf_common+0x48>
 800a246:	f104 0a19 	add.w	sl, r4, #25
 800a24a:	68e3      	ldr	r3, [r4, #12]
 800a24c:	6832      	ldr	r2, [r6, #0]
 800a24e:	1a9b      	subs	r3, r3, r2
 800a250:	42ab      	cmp	r3, r5
 800a252:	dc28      	bgt.n	800a2a6 <_printf_common+0x9a>
 800a254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a258:	1e13      	subs	r3, r2, #0
 800a25a:	6822      	ldr	r2, [r4, #0]
 800a25c:	bf18      	it	ne
 800a25e:	2301      	movne	r3, #1
 800a260:	0692      	lsls	r2, r2, #26
 800a262:	d42d      	bmi.n	800a2c0 <_printf_common+0xb4>
 800a264:	4649      	mov	r1, r9
 800a266:	4638      	mov	r0, r7
 800a268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a26c:	47c0      	blx	r8
 800a26e:	3001      	adds	r0, #1
 800a270:	d020      	beq.n	800a2b4 <_printf_common+0xa8>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	68e5      	ldr	r5, [r4, #12]
 800a276:	f003 0306 	and.w	r3, r3, #6
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	bf18      	it	ne
 800a27e:	2500      	movne	r5, #0
 800a280:	6832      	ldr	r2, [r6, #0]
 800a282:	f04f 0600 	mov.w	r6, #0
 800a286:	68a3      	ldr	r3, [r4, #8]
 800a288:	bf08      	it	eq
 800a28a:	1aad      	subeq	r5, r5, r2
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	bf08      	it	eq
 800a290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a294:	4293      	cmp	r3, r2
 800a296:	bfc4      	itt	gt
 800a298:	1a9b      	subgt	r3, r3, r2
 800a29a:	18ed      	addgt	r5, r5, r3
 800a29c:	341a      	adds	r4, #26
 800a29e:	42b5      	cmp	r5, r6
 800a2a0:	d11a      	bne.n	800a2d8 <_printf_common+0xcc>
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e008      	b.n	800a2b8 <_printf_common+0xac>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	4652      	mov	r2, sl
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	47c0      	blx	r8
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d103      	bne.n	800a2bc <_printf_common+0xb0>
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2bc:	3501      	adds	r5, #1
 800a2be:	e7c4      	b.n	800a24a <_printf_common+0x3e>
 800a2c0:	2030      	movs	r0, #48	; 0x30
 800a2c2:	18e1      	adds	r1, r4, r3
 800a2c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2ce:	4422      	add	r2, r4
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2d6:	e7c5      	b.n	800a264 <_printf_common+0x58>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	4622      	mov	r2, r4
 800a2dc:	4649      	mov	r1, r9
 800a2de:	4638      	mov	r0, r7
 800a2e0:	47c0      	blx	r8
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d0e6      	beq.n	800a2b4 <_printf_common+0xa8>
 800a2e6:	3601      	adds	r6, #1
 800a2e8:	e7d9      	b.n	800a29e <_printf_common+0x92>
	...

0800a2ec <_printf_i>:
 800a2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	7e27      	ldrb	r7, [r4, #24]
 800a2f4:	4691      	mov	r9, r2
 800a2f6:	2f78      	cmp	r7, #120	; 0x78
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	469a      	mov	sl, r3
 800a2fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a302:	d807      	bhi.n	800a314 <_printf_i+0x28>
 800a304:	2f62      	cmp	r7, #98	; 0x62
 800a306:	d80a      	bhi.n	800a31e <_printf_i+0x32>
 800a308:	2f00      	cmp	r7, #0
 800a30a:	f000 80d9 	beq.w	800a4c0 <_printf_i+0x1d4>
 800a30e:	2f58      	cmp	r7, #88	; 0x58
 800a310:	f000 80a4 	beq.w	800a45c <_printf_i+0x170>
 800a314:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a31c:	e03a      	b.n	800a394 <_printf_i+0xa8>
 800a31e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a322:	2b15      	cmp	r3, #21
 800a324:	d8f6      	bhi.n	800a314 <_printf_i+0x28>
 800a326:	a001      	add	r0, pc, #4	; (adr r0, 800a32c <_printf_i+0x40>)
 800a328:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a32c:	0800a385 	.word	0x0800a385
 800a330:	0800a399 	.word	0x0800a399
 800a334:	0800a315 	.word	0x0800a315
 800a338:	0800a315 	.word	0x0800a315
 800a33c:	0800a315 	.word	0x0800a315
 800a340:	0800a315 	.word	0x0800a315
 800a344:	0800a399 	.word	0x0800a399
 800a348:	0800a315 	.word	0x0800a315
 800a34c:	0800a315 	.word	0x0800a315
 800a350:	0800a315 	.word	0x0800a315
 800a354:	0800a315 	.word	0x0800a315
 800a358:	0800a4a7 	.word	0x0800a4a7
 800a35c:	0800a3c9 	.word	0x0800a3c9
 800a360:	0800a489 	.word	0x0800a489
 800a364:	0800a315 	.word	0x0800a315
 800a368:	0800a315 	.word	0x0800a315
 800a36c:	0800a4c9 	.word	0x0800a4c9
 800a370:	0800a315 	.word	0x0800a315
 800a374:	0800a3c9 	.word	0x0800a3c9
 800a378:	0800a315 	.word	0x0800a315
 800a37c:	0800a315 	.word	0x0800a315
 800a380:	0800a491 	.word	0x0800a491
 800a384:	680b      	ldr	r3, [r1, #0]
 800a386:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a38a:	1d1a      	adds	r2, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	600a      	str	r2, [r1, #0]
 800a390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a394:	2301      	movs	r3, #1
 800a396:	e0a4      	b.n	800a4e2 <_printf_i+0x1f6>
 800a398:	6825      	ldr	r5, [r4, #0]
 800a39a:	6808      	ldr	r0, [r1, #0]
 800a39c:	062e      	lsls	r6, r5, #24
 800a39e:	f100 0304 	add.w	r3, r0, #4
 800a3a2:	d50a      	bpl.n	800a3ba <_printf_i+0xce>
 800a3a4:	6805      	ldr	r5, [r0, #0]
 800a3a6:	600b      	str	r3, [r1, #0]
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	da03      	bge.n	800a3b4 <_printf_i+0xc8>
 800a3ac:	232d      	movs	r3, #45	; 0x2d
 800a3ae:	426d      	negs	r5, r5
 800a3b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b4:	230a      	movs	r3, #10
 800a3b6:	485e      	ldr	r0, [pc, #376]	; (800a530 <_printf_i+0x244>)
 800a3b8:	e019      	b.n	800a3ee <_printf_i+0x102>
 800a3ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3be:	6805      	ldr	r5, [r0, #0]
 800a3c0:	600b      	str	r3, [r1, #0]
 800a3c2:	bf18      	it	ne
 800a3c4:	b22d      	sxthne	r5, r5
 800a3c6:	e7ef      	b.n	800a3a8 <_printf_i+0xbc>
 800a3c8:	680b      	ldr	r3, [r1, #0]
 800a3ca:	6825      	ldr	r5, [r4, #0]
 800a3cc:	1d18      	adds	r0, r3, #4
 800a3ce:	6008      	str	r0, [r1, #0]
 800a3d0:	0628      	lsls	r0, r5, #24
 800a3d2:	d501      	bpl.n	800a3d8 <_printf_i+0xec>
 800a3d4:	681d      	ldr	r5, [r3, #0]
 800a3d6:	e002      	b.n	800a3de <_printf_i+0xf2>
 800a3d8:	0669      	lsls	r1, r5, #25
 800a3da:	d5fb      	bpl.n	800a3d4 <_printf_i+0xe8>
 800a3dc:	881d      	ldrh	r5, [r3, #0]
 800a3de:	2f6f      	cmp	r7, #111	; 0x6f
 800a3e0:	bf0c      	ite	eq
 800a3e2:	2308      	moveq	r3, #8
 800a3e4:	230a      	movne	r3, #10
 800a3e6:	4852      	ldr	r0, [pc, #328]	; (800a530 <_printf_i+0x244>)
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3ee:	6866      	ldr	r6, [r4, #4]
 800a3f0:	2e00      	cmp	r6, #0
 800a3f2:	bfa8      	it	ge
 800a3f4:	6821      	ldrge	r1, [r4, #0]
 800a3f6:	60a6      	str	r6, [r4, #8]
 800a3f8:	bfa4      	itt	ge
 800a3fa:	f021 0104 	bicge.w	r1, r1, #4
 800a3fe:	6021      	strge	r1, [r4, #0]
 800a400:	b90d      	cbnz	r5, 800a406 <_printf_i+0x11a>
 800a402:	2e00      	cmp	r6, #0
 800a404:	d04d      	beq.n	800a4a2 <_printf_i+0x1b6>
 800a406:	4616      	mov	r6, r2
 800a408:	fbb5 f1f3 	udiv	r1, r5, r3
 800a40c:	fb03 5711 	mls	r7, r3, r1, r5
 800a410:	5dc7      	ldrb	r7, [r0, r7]
 800a412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a416:	462f      	mov	r7, r5
 800a418:	42bb      	cmp	r3, r7
 800a41a:	460d      	mov	r5, r1
 800a41c:	d9f4      	bls.n	800a408 <_printf_i+0x11c>
 800a41e:	2b08      	cmp	r3, #8
 800a420:	d10b      	bne.n	800a43a <_printf_i+0x14e>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	07df      	lsls	r7, r3, #31
 800a426:	d508      	bpl.n	800a43a <_printf_i+0x14e>
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	6861      	ldr	r1, [r4, #4]
 800a42c:	4299      	cmp	r1, r3
 800a42e:	bfde      	ittt	le
 800a430:	2330      	movle	r3, #48	; 0x30
 800a432:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a436:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a43a:	1b92      	subs	r2, r2, r6
 800a43c:	6122      	str	r2, [r4, #16]
 800a43e:	464b      	mov	r3, r9
 800a440:	4621      	mov	r1, r4
 800a442:	4640      	mov	r0, r8
 800a444:	f8cd a000 	str.w	sl, [sp]
 800a448:	aa03      	add	r2, sp, #12
 800a44a:	f7ff fedf 	bl	800a20c <_printf_common>
 800a44e:	3001      	adds	r0, #1
 800a450:	d14c      	bne.n	800a4ec <_printf_i+0x200>
 800a452:	f04f 30ff 	mov.w	r0, #4294967295
 800a456:	b004      	add	sp, #16
 800a458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45c:	4834      	ldr	r0, [pc, #208]	; (800a530 <_printf_i+0x244>)
 800a45e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a462:	680e      	ldr	r6, [r1, #0]
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	f856 5b04 	ldr.w	r5, [r6], #4
 800a46a:	061f      	lsls	r7, r3, #24
 800a46c:	600e      	str	r6, [r1, #0]
 800a46e:	d514      	bpl.n	800a49a <_printf_i+0x1ae>
 800a470:	07d9      	lsls	r1, r3, #31
 800a472:	bf44      	itt	mi
 800a474:	f043 0320 	orrmi.w	r3, r3, #32
 800a478:	6023      	strmi	r3, [r4, #0]
 800a47a:	b91d      	cbnz	r5, 800a484 <_printf_i+0x198>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	f023 0320 	bic.w	r3, r3, #32
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	2310      	movs	r3, #16
 800a486:	e7af      	b.n	800a3e8 <_printf_i+0xfc>
 800a488:	6823      	ldr	r3, [r4, #0]
 800a48a:	f043 0320 	orr.w	r3, r3, #32
 800a48e:	6023      	str	r3, [r4, #0]
 800a490:	2378      	movs	r3, #120	; 0x78
 800a492:	4828      	ldr	r0, [pc, #160]	; (800a534 <_printf_i+0x248>)
 800a494:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a498:	e7e3      	b.n	800a462 <_printf_i+0x176>
 800a49a:	065e      	lsls	r6, r3, #25
 800a49c:	bf48      	it	mi
 800a49e:	b2ad      	uxthmi	r5, r5
 800a4a0:	e7e6      	b.n	800a470 <_printf_i+0x184>
 800a4a2:	4616      	mov	r6, r2
 800a4a4:	e7bb      	b.n	800a41e <_printf_i+0x132>
 800a4a6:	680b      	ldr	r3, [r1, #0]
 800a4a8:	6826      	ldr	r6, [r4, #0]
 800a4aa:	1d1d      	adds	r5, r3, #4
 800a4ac:	6960      	ldr	r0, [r4, #20]
 800a4ae:	600d      	str	r5, [r1, #0]
 800a4b0:	0635      	lsls	r5, r6, #24
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	d501      	bpl.n	800a4ba <_printf_i+0x1ce>
 800a4b6:	6018      	str	r0, [r3, #0]
 800a4b8:	e002      	b.n	800a4c0 <_printf_i+0x1d4>
 800a4ba:	0671      	lsls	r1, r6, #25
 800a4bc:	d5fb      	bpl.n	800a4b6 <_printf_i+0x1ca>
 800a4be:	8018      	strh	r0, [r3, #0]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4616      	mov	r6, r2
 800a4c4:	6123      	str	r3, [r4, #16]
 800a4c6:	e7ba      	b.n	800a43e <_printf_i+0x152>
 800a4c8:	680b      	ldr	r3, [r1, #0]
 800a4ca:	1d1a      	adds	r2, r3, #4
 800a4cc:	600a      	str	r2, [r1, #0]
 800a4ce:	681e      	ldr	r6, [r3, #0]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	6862      	ldr	r2, [r4, #4]
 800a4d6:	f000 f82f 	bl	800a538 <memchr>
 800a4da:	b108      	cbz	r0, 800a4e0 <_printf_i+0x1f4>
 800a4dc:	1b80      	subs	r0, r0, r6
 800a4de:	6060      	str	r0, [r4, #4]
 800a4e0:	6863      	ldr	r3, [r4, #4]
 800a4e2:	6123      	str	r3, [r4, #16]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ea:	e7a8      	b.n	800a43e <_printf_i+0x152>
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	47d0      	blx	sl
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d0ab      	beq.n	800a452 <_printf_i+0x166>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	079b      	lsls	r3, r3, #30
 800a4fe:	d413      	bmi.n	800a528 <_printf_i+0x23c>
 800a500:	68e0      	ldr	r0, [r4, #12]
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	4298      	cmp	r0, r3
 800a506:	bfb8      	it	lt
 800a508:	4618      	movlt	r0, r3
 800a50a:	e7a4      	b.n	800a456 <_printf_i+0x16a>
 800a50c:	2301      	movs	r3, #1
 800a50e:	4632      	mov	r2, r6
 800a510:	4649      	mov	r1, r9
 800a512:	4640      	mov	r0, r8
 800a514:	47d0      	blx	sl
 800a516:	3001      	adds	r0, #1
 800a518:	d09b      	beq.n	800a452 <_printf_i+0x166>
 800a51a:	3501      	adds	r5, #1
 800a51c:	68e3      	ldr	r3, [r4, #12]
 800a51e:	9903      	ldr	r1, [sp, #12]
 800a520:	1a5b      	subs	r3, r3, r1
 800a522:	42ab      	cmp	r3, r5
 800a524:	dcf2      	bgt.n	800a50c <_printf_i+0x220>
 800a526:	e7eb      	b.n	800a500 <_printf_i+0x214>
 800a528:	2500      	movs	r5, #0
 800a52a:	f104 0619 	add.w	r6, r4, #25
 800a52e:	e7f5      	b.n	800a51c <_printf_i+0x230>
 800a530:	0800adcd 	.word	0x0800adcd
 800a534:	0800adde 	.word	0x0800adde

0800a538 <memchr>:
 800a538:	4603      	mov	r3, r0
 800a53a:	b510      	push	{r4, lr}
 800a53c:	b2c9      	uxtb	r1, r1
 800a53e:	4402      	add	r2, r0
 800a540:	4293      	cmp	r3, r2
 800a542:	4618      	mov	r0, r3
 800a544:	d101      	bne.n	800a54a <memchr+0x12>
 800a546:	2000      	movs	r0, #0
 800a548:	e003      	b.n	800a552 <memchr+0x1a>
 800a54a:	7804      	ldrb	r4, [r0, #0]
 800a54c:	3301      	adds	r3, #1
 800a54e:	428c      	cmp	r4, r1
 800a550:	d1f6      	bne.n	800a540 <memchr+0x8>
 800a552:	bd10      	pop	{r4, pc}

0800a554 <memcpy>:
 800a554:	440a      	add	r2, r1
 800a556:	4291      	cmp	r1, r2
 800a558:	f100 33ff 	add.w	r3, r0, #4294967295
 800a55c:	d100      	bne.n	800a560 <memcpy+0xc>
 800a55e:	4770      	bx	lr
 800a560:	b510      	push	{r4, lr}
 800a562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a566:	4291      	cmp	r1, r2
 800a568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a56c:	d1f9      	bne.n	800a562 <memcpy+0xe>
 800a56e:	bd10      	pop	{r4, pc}

0800a570 <memmove>:
 800a570:	4288      	cmp	r0, r1
 800a572:	b510      	push	{r4, lr}
 800a574:	eb01 0402 	add.w	r4, r1, r2
 800a578:	d902      	bls.n	800a580 <memmove+0x10>
 800a57a:	4284      	cmp	r4, r0
 800a57c:	4623      	mov	r3, r4
 800a57e:	d807      	bhi.n	800a590 <memmove+0x20>
 800a580:	1e43      	subs	r3, r0, #1
 800a582:	42a1      	cmp	r1, r4
 800a584:	d008      	beq.n	800a598 <memmove+0x28>
 800a586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a58a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a58e:	e7f8      	b.n	800a582 <memmove+0x12>
 800a590:	4601      	mov	r1, r0
 800a592:	4402      	add	r2, r0
 800a594:	428a      	cmp	r2, r1
 800a596:	d100      	bne.n	800a59a <memmove+0x2a>
 800a598:	bd10      	pop	{r4, pc}
 800a59a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a59e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5a2:	e7f7      	b.n	800a594 <memmove+0x24>

0800a5a4 <_free_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	2900      	cmp	r1, #0
 800a5aa:	d043      	beq.n	800a634 <_free_r+0x90>
 800a5ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b0:	1f0c      	subs	r4, r1, #4
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bfb8      	it	lt
 800a5b6:	18e4      	addlt	r4, r4, r3
 800a5b8:	f000 f8d0 	bl	800a75c <__malloc_lock>
 800a5bc:	4a1e      	ldr	r2, [pc, #120]	; (800a638 <_free_r+0x94>)
 800a5be:	6813      	ldr	r3, [r2, #0]
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	b933      	cbnz	r3, 800a5d2 <_free_r+0x2e>
 800a5c4:	6063      	str	r3, [r4, #4]
 800a5c6:	6014      	str	r4, [r2, #0]
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ce:	f000 b8cb 	b.w	800a768 <__malloc_unlock>
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	d90a      	bls.n	800a5ec <_free_r+0x48>
 800a5d6:	6821      	ldr	r1, [r4, #0]
 800a5d8:	1862      	adds	r2, r4, r1
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	bf01      	itttt	eq
 800a5de:	681a      	ldreq	r2, [r3, #0]
 800a5e0:	685b      	ldreq	r3, [r3, #4]
 800a5e2:	1852      	addeq	r2, r2, r1
 800a5e4:	6022      	streq	r2, [r4, #0]
 800a5e6:	6063      	str	r3, [r4, #4]
 800a5e8:	6004      	str	r4, [r0, #0]
 800a5ea:	e7ed      	b.n	800a5c8 <_free_r+0x24>
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	b10b      	cbz	r3, 800a5f6 <_free_r+0x52>
 800a5f2:	42a3      	cmp	r3, r4
 800a5f4:	d9fa      	bls.n	800a5ec <_free_r+0x48>
 800a5f6:	6811      	ldr	r1, [r2, #0]
 800a5f8:	1850      	adds	r0, r2, r1
 800a5fa:	42a0      	cmp	r0, r4
 800a5fc:	d10b      	bne.n	800a616 <_free_r+0x72>
 800a5fe:	6820      	ldr	r0, [r4, #0]
 800a600:	4401      	add	r1, r0
 800a602:	1850      	adds	r0, r2, r1
 800a604:	4283      	cmp	r3, r0
 800a606:	6011      	str	r1, [r2, #0]
 800a608:	d1de      	bne.n	800a5c8 <_free_r+0x24>
 800a60a:	6818      	ldr	r0, [r3, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	4401      	add	r1, r0
 800a610:	6011      	str	r1, [r2, #0]
 800a612:	6053      	str	r3, [r2, #4]
 800a614:	e7d8      	b.n	800a5c8 <_free_r+0x24>
 800a616:	d902      	bls.n	800a61e <_free_r+0x7a>
 800a618:	230c      	movs	r3, #12
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	e7d4      	b.n	800a5c8 <_free_r+0x24>
 800a61e:	6820      	ldr	r0, [r4, #0]
 800a620:	1821      	adds	r1, r4, r0
 800a622:	428b      	cmp	r3, r1
 800a624:	bf01      	itttt	eq
 800a626:	6819      	ldreq	r1, [r3, #0]
 800a628:	685b      	ldreq	r3, [r3, #4]
 800a62a:	1809      	addeq	r1, r1, r0
 800a62c:	6021      	streq	r1, [r4, #0]
 800a62e:	6063      	str	r3, [r4, #4]
 800a630:	6054      	str	r4, [r2, #4]
 800a632:	e7c9      	b.n	800a5c8 <_free_r+0x24>
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	bf00      	nop
 800a638:	200002d8 	.word	0x200002d8

0800a63c <_malloc_r>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	1ccd      	adds	r5, r1, #3
 800a640:	f025 0503 	bic.w	r5, r5, #3
 800a644:	3508      	adds	r5, #8
 800a646:	2d0c      	cmp	r5, #12
 800a648:	bf38      	it	cc
 800a64a:	250c      	movcc	r5, #12
 800a64c:	2d00      	cmp	r5, #0
 800a64e:	4606      	mov	r6, r0
 800a650:	db01      	blt.n	800a656 <_malloc_r+0x1a>
 800a652:	42a9      	cmp	r1, r5
 800a654:	d903      	bls.n	800a65e <_malloc_r+0x22>
 800a656:	230c      	movs	r3, #12
 800a658:	6033      	str	r3, [r6, #0]
 800a65a:	2000      	movs	r0, #0
 800a65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a65e:	f000 f87d 	bl	800a75c <__malloc_lock>
 800a662:	4921      	ldr	r1, [pc, #132]	; (800a6e8 <_malloc_r+0xac>)
 800a664:	680a      	ldr	r2, [r1, #0]
 800a666:	4614      	mov	r4, r2
 800a668:	b99c      	cbnz	r4, 800a692 <_malloc_r+0x56>
 800a66a:	4f20      	ldr	r7, [pc, #128]	; (800a6ec <_malloc_r+0xb0>)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	b923      	cbnz	r3, 800a67a <_malloc_r+0x3e>
 800a670:	4621      	mov	r1, r4
 800a672:	4630      	mov	r0, r6
 800a674:	f000 f862 	bl	800a73c <_sbrk_r>
 800a678:	6038      	str	r0, [r7, #0]
 800a67a:	4629      	mov	r1, r5
 800a67c:	4630      	mov	r0, r6
 800a67e:	f000 f85d 	bl	800a73c <_sbrk_r>
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	d123      	bne.n	800a6ce <_malloc_r+0x92>
 800a686:	230c      	movs	r3, #12
 800a688:	4630      	mov	r0, r6
 800a68a:	6033      	str	r3, [r6, #0]
 800a68c:	f000 f86c 	bl	800a768 <__malloc_unlock>
 800a690:	e7e3      	b.n	800a65a <_malloc_r+0x1e>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	1b5b      	subs	r3, r3, r5
 800a696:	d417      	bmi.n	800a6c8 <_malloc_r+0x8c>
 800a698:	2b0b      	cmp	r3, #11
 800a69a:	d903      	bls.n	800a6a4 <_malloc_r+0x68>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	441c      	add	r4, r3
 800a6a0:	6025      	str	r5, [r4, #0]
 800a6a2:	e004      	b.n	800a6ae <_malloc_r+0x72>
 800a6a4:	6863      	ldr	r3, [r4, #4]
 800a6a6:	42a2      	cmp	r2, r4
 800a6a8:	bf0c      	ite	eq
 800a6aa:	600b      	streq	r3, [r1, #0]
 800a6ac:	6053      	strne	r3, [r2, #4]
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f000 f85a 	bl	800a768 <__malloc_unlock>
 800a6b4:	f104 000b 	add.w	r0, r4, #11
 800a6b8:	1d23      	adds	r3, r4, #4
 800a6ba:	f020 0007 	bic.w	r0, r0, #7
 800a6be:	1ac2      	subs	r2, r0, r3
 800a6c0:	d0cc      	beq.n	800a65c <_malloc_r+0x20>
 800a6c2:	1a1b      	subs	r3, r3, r0
 800a6c4:	50a3      	str	r3, [r4, r2]
 800a6c6:	e7c9      	b.n	800a65c <_malloc_r+0x20>
 800a6c8:	4622      	mov	r2, r4
 800a6ca:	6864      	ldr	r4, [r4, #4]
 800a6cc:	e7cc      	b.n	800a668 <_malloc_r+0x2c>
 800a6ce:	1cc4      	adds	r4, r0, #3
 800a6d0:	f024 0403 	bic.w	r4, r4, #3
 800a6d4:	42a0      	cmp	r0, r4
 800a6d6:	d0e3      	beq.n	800a6a0 <_malloc_r+0x64>
 800a6d8:	1a21      	subs	r1, r4, r0
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f000 f82e 	bl	800a73c <_sbrk_r>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d1dd      	bne.n	800a6a0 <_malloc_r+0x64>
 800a6e4:	e7cf      	b.n	800a686 <_malloc_r+0x4a>
 800a6e6:	bf00      	nop
 800a6e8:	200002d8 	.word	0x200002d8
 800a6ec:	200002dc 	.word	0x200002dc

0800a6f0 <_realloc_r>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	4614      	mov	r4, r2
 800a6f6:	460e      	mov	r6, r1
 800a6f8:	b921      	cbnz	r1, 800a704 <_realloc_r+0x14>
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a700:	f7ff bf9c 	b.w	800a63c <_malloc_r>
 800a704:	b922      	cbnz	r2, 800a710 <_realloc_r+0x20>
 800a706:	f7ff ff4d 	bl	800a5a4 <_free_r>
 800a70a:	4625      	mov	r5, r4
 800a70c:	4628      	mov	r0, r5
 800a70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a710:	f000 f830 	bl	800a774 <_malloc_usable_size_r>
 800a714:	42a0      	cmp	r0, r4
 800a716:	d20f      	bcs.n	800a738 <_realloc_r+0x48>
 800a718:	4621      	mov	r1, r4
 800a71a:	4638      	mov	r0, r7
 800a71c:	f7ff ff8e 	bl	800a63c <_malloc_r>
 800a720:	4605      	mov	r5, r0
 800a722:	2800      	cmp	r0, #0
 800a724:	d0f2      	beq.n	800a70c <_realloc_r+0x1c>
 800a726:	4631      	mov	r1, r6
 800a728:	4622      	mov	r2, r4
 800a72a:	f7ff ff13 	bl	800a554 <memcpy>
 800a72e:	4631      	mov	r1, r6
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff ff37 	bl	800a5a4 <_free_r>
 800a736:	e7e9      	b.n	800a70c <_realloc_r+0x1c>
 800a738:	4635      	mov	r5, r6
 800a73a:	e7e7      	b.n	800a70c <_realloc_r+0x1c>

0800a73c <_sbrk_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	2300      	movs	r3, #0
 800a740:	4d05      	ldr	r5, [pc, #20]	; (800a758 <_sbrk_r+0x1c>)
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	602b      	str	r3, [r5, #0]
 800a748:	f7f8 fa46 	bl	8002bd8 <_sbrk>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	d102      	bne.n	800a756 <_sbrk_r+0x1a>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	b103      	cbz	r3, 800a756 <_sbrk_r+0x1a>
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	20001058 	.word	0x20001058

0800a75c <__malloc_lock>:
 800a75c:	4801      	ldr	r0, [pc, #4]	; (800a764 <__malloc_lock+0x8>)
 800a75e:	f000 b811 	b.w	800a784 <__retarget_lock_acquire_recursive>
 800a762:	bf00      	nop
 800a764:	20001060 	.word	0x20001060

0800a768 <__malloc_unlock>:
 800a768:	4801      	ldr	r0, [pc, #4]	; (800a770 <__malloc_unlock+0x8>)
 800a76a:	f000 b80c 	b.w	800a786 <__retarget_lock_release_recursive>
 800a76e:	bf00      	nop
 800a770:	20001060 	.word	0x20001060

0800a774 <_malloc_usable_size_r>:
 800a774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a778:	1f18      	subs	r0, r3, #4
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	bfbc      	itt	lt
 800a77e:	580b      	ldrlt	r3, [r1, r0]
 800a780:	18c0      	addlt	r0, r0, r3
 800a782:	4770      	bx	lr

0800a784 <__retarget_lock_acquire_recursive>:
 800a784:	4770      	bx	lr

0800a786 <__retarget_lock_release_recursive>:
 800a786:	4770      	bx	lr

0800a788 <_init>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	bf00      	nop
 800a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78e:	bc08      	pop	{r3}
 800a790:	469e      	mov	lr, r3
 800a792:	4770      	bx	lr

0800a794 <_fini>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr
