
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800f094  0800f094  0001f094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7b8  0800f7b8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800f7b8  0800f7b8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f7b8  0800f7b8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7b8  0800f7b8  0001f7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7bc  0800f7bc  0001f7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800f7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001310  20000088  0800f848  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  0800f848  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023da6  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aaa  00000000  00000000  00043e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00048908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  0004a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca5f  00000000  00000000  0004bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221fd  00000000  00000000  00068517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989bb  00000000  00000000  0008a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001230cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f7c  00000000  00000000  00123124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f07c 	.word	0x0800f07c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800f07c 	.word	0x0800f07c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_frsub>:
 8000b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	e002      	b.n	8000b50 <__addsf3>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fsub>:
 8000b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b50 <__addsf3>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	bf1f      	itttt	ne
 8000b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b58:	ea92 0f03 	teqne	r2, r3
 8000b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b64:	d06a      	beq.n	8000c3c <__addsf3+0xec>
 8000b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6e:	bfc1      	itttt	gt
 8000b70:	18d2      	addgt	r2, r2, r3
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	4048      	eorgt	r0, r1
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	2b19      	cmp	r3, #25
 8000b7e:	bf88      	it	hi
 8000b80:	4770      	bxhi	lr
 8000b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9e:	bf18      	it	ne
 8000ba0:	4249      	negne	r1, r1
 8000ba2:	ea92 0f03 	teq	r2, r3
 8000ba6:	d03f      	beq.n	8000c28 <__addsf3+0xd8>
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb0:	eb10 000c 	adds.w	r0, r0, ip
 8000bb4:	f1c3 0320 	rsb	r3, r3, #32
 8000bb8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__addsf3+0x78>
 8000bc2:	4249      	negs	r1, r1
 8000bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bcc:	d313      	bcc.n	8000bf6 <__addsf3+0xa6>
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d306      	bcc.n	8000be2 <__addsf3+0x92>
 8000bd4:	0840      	lsrs	r0, r0, #1
 8000bd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bda:	f102 0201 	add.w	r2, r2, #1
 8000bde:	2afe      	cmp	r2, #254	; 0xfe
 8000be0:	d251      	bcs.n	8000c86 <__addsf3+0x136>
 8000be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bea:	bf08      	it	eq
 8000bec:	f020 0001 	biceq.w	r0, r0, #1
 8000bf0:	ea40 0003 	orr.w	r0, r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	0049      	lsls	r1, r1, #1
 8000bf8:	eb40 0000 	adc.w	r0, r0, r0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	bf28      	it	cs
 8000c00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c04:	d2ed      	bcs.n	8000be2 <__addsf3+0x92>
 8000c06:	fab0 fc80 	clz	ip, r0
 8000c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c16:	bfaa      	itet	ge
 8000c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c1c:	4252      	neglt	r2, r2
 8000c1e:	4318      	orrge	r0, r3
 8000c20:	bfbc      	itt	lt
 8000c22:	40d0      	lsrlt	r0, r2
 8000c24:	4318      	orrlt	r0, r3
 8000c26:	4770      	bx	lr
 8000c28:	f092 0f00 	teq	r2, #0
 8000c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c30:	bf06      	itte	eq
 8000c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c36:	3201      	addeq	r2, #1
 8000c38:	3b01      	subne	r3, #1
 8000c3a:	e7b5      	b.n	8000ba8 <__addsf3+0x58>
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	bf18      	it	ne
 8000c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4a:	d021      	beq.n	8000c90 <__addsf3+0x140>
 8000c4c:	ea92 0f03 	teq	r2, r3
 8000c50:	d004      	beq.n	8000c5c <__addsf3+0x10c>
 8000c52:	f092 0f00 	teq	r2, #0
 8000c56:	bf08      	it	eq
 8000c58:	4608      	moveq	r0, r1
 8000c5a:	4770      	bx	lr
 8000c5c:	ea90 0f01 	teq	r0, r1
 8000c60:	bf1c      	itt	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	4770      	bxne	lr
 8000c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6a:	d104      	bne.n	8000c76 <__addsf3+0x126>
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7a:	bf3c      	itt	cc
 8000c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c80:	4770      	bxcc	lr
 8000c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c94:	bf16      	itet	ne
 8000c96:	4608      	movne	r0, r1
 8000c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c9c:	4601      	movne	r1, r0
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	bf06      	itte	eq
 8000ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca6:	ea90 0f01 	teqeq	r0, r1
 8000caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_ui2f>:
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e004      	b.n	8000cc0 <__aeabi_i2f+0x8>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_i2f>:
 8000cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	bf48      	it	mi
 8000cbe:	4240      	negmi	r0, r0
 8000cc0:	ea5f 0c00 	movs.w	ip, r0
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ccc:	4601      	mov	r1, r0
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	e01c      	b.n	8000d0e <__aeabi_l2f+0x2a>

08000cd4 <__aeabi_ul2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e00a      	b.n	8000cf8 <__aeabi_l2f+0x14>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_l2f>:
 8000ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__aeabi_l2f+0x14>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	ea5f 0c01 	movs.w	ip, r1
 8000cfc:	bf02      	ittt	eq
 8000cfe:	4684      	moveq	ip, r0
 8000d00:	4601      	moveq	r1, r0
 8000d02:	2000      	moveq	r0, #0
 8000d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d08:	bf08      	it	eq
 8000d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d12:	fabc f28c 	clz	r2, ip
 8000d16:	3a08      	subs	r2, #8
 8000d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d1c:	db10      	blt.n	8000d40 <__aeabi_l2f+0x5c>
 8000d1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d30:	fa20 f202 	lsr.w	r2, r0, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f102 0220 	add.w	r2, r2, #32
 8000d44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d50:	fa21 f202 	lsr.w	r2, r1, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_f2iz>:
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d68:	d30f      	bcc.n	8000d8a <__aeabi_f2iz+0x2a>
 8000d6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_f2iz+0x30>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d7c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	bf18      	it	ne
 8000d86:	4240      	negne	r0, r0
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2iz+0x3a>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d105      	bne.n	8000da6 <__aeabi_f2iz+0x46>
 8000d9a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr

08000dac <ADC_DMA_Init>:
 */

#include <ADC_DMA.h>

void ADC_DMA_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <ADC_DMA_Init+0x2c>)
 8000db2:	f003 fa11 	bl	80041d8 <HAL_ADCEx_Calibration_Start>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <ADC_DMA_Init+0x14>
		Error_Handler();
 8000dbc:	f001 fcd0 	bl	8002760 <Error_Handler>
	if (HAL_ADC_Start_DMA(&hadc1, &analog.buffer, ADC_BUF_SIZE) != HAL_OK)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4906      	ldr	r1, [pc, #24]	; (8000ddc <ADC_DMA_Init+0x30>)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <ADC_DMA_Init+0x2c>)
 8000dc6:	f002 ff13 	bl	8003bf0 <HAL_ADC_Start_DMA>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <ADC_DMA_Init+0x28>
		Error_Handler();
 8000dd0:	f001 fcc6 	bl	8002760 <Error_Handler>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002e4 	.word	0x200002e4
 8000ddc:	200002e0 	.word	0x200002e0

08000de0 <aceGir_Init>:
 */

#include "ace_gir.h"

HAL_StatusTypeDef aceGir_Init(I2C_HandleTypeDef *hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	6078      	str	r0, [r7, #4]

	aceGir.hi2c = hi2c;
 8000de8:	4a42      	ldr	r2, [pc, #264]	; (8000ef4 <aceGir_Init+0x114>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef result;
	uint8_t check;
	uint8_t dados;

	// checar se o módulo está conectado
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000dee:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <aceGir_Init+0x114>)
 8000df0:	6818      	ldr	r0, [r3, #0]
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f107 030e 	add.w	r3, r7, #14
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	2275      	movs	r2, #117	; 0x75
 8000e06:	21d0      	movs	r1, #208	; 0xd0
 8000e08:	f004 ffa8 	bl	8005d5c <HAL_I2C_Mem_Read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK)
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <aceGir_Init+0x3a>
		return result;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	e068      	b.n	8000eec <aceGir_Init+0x10c>

	if (check == 104)  // 0x68 = 104 -> será retornado seu o modulo estiver OK
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2b68      	cmp	r3, #104	; 0x68
 8000e1e:	d15f      	bne.n	8000ee0 <aceGir_Init+0x100>
	{
		// ligar sensor
		dados = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&dados, 1, 1000);
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <aceGir_Init+0x114>)
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	f107 030d 	add.w	r3, r7, #13
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	226b      	movs	r2, #107	; 0x6b
 8000e3c:	21d0      	movs	r1, #208	; 0xd0
 8000e3e:	f004 fe93 	bl	8005b68 <HAL_I2C_Mem_Write>
 8000e42:	4603      	mov	r3, r0
 8000e44:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <aceGir_Init+0x70>
			return result;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	e04d      	b.n	8000eec <aceGir_Init+0x10c>

		// definir frequencia de 1khz
		dados = 0x07;
 8000e50:	2307      	movs	r3, #7
 8000e52:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &dados, 1, 1000);
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <aceGir_Init+0x114>)
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	f107 030d 	add.w	r3, r7, #13
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2219      	movs	r2, #25
 8000e6c:	21d0      	movs	r1, #208	; 0xd0
 8000e6e:	f004 fe7b 	bl	8005b68 <HAL_I2C_Mem_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <aceGir_Init+0xa0>
			return result;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	e035      	b.n	8000eec <aceGir_Init+0x10c>

		// definir configuracao de acelerometro
		dados = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &dados, 1, 1000);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <aceGir_Init+0x114>)
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	f107 030d 	add.w	r3, r7, #13
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	221c      	movs	r2, #28
 8000e9c:	21d0      	movs	r1, #208	; 0xd0
 8000e9e:	f004 fe63 	bl	8005b68 <HAL_I2C_Mem_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <aceGir_Init+0xd0>
			return result;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	e01d      	b.n	8000eec <aceGir_Init+0x10c>

		// definir configuracao de giroscopio
		dados = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &dados, 1, 1000);
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <aceGir_Init+0x114>)
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	f107 030d 	add.w	r3, r7, #13
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	221b      	movs	r2, #27
 8000ecc:	21d0      	movs	r1, #208	; 0xd0
 8000ece:	f004 fe4b 	bl	8005b68 <HAL_I2C_Mem_Write>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <aceGir_Init+0x100>
			return result;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	e005      	b.n	8000eec <aceGir_Init+0x10c>
	}

	result = HAL_TIM_Base_Start_IT(&htim4);
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <aceGir_Init+0x118>)
 8000ee2:	f008 fccd 	bl	8009880 <HAL_TIM_Base_Start_IT>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]

	return result;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000035c 	.word	0x2000035c
 8000ef8:	20000314 	.word	0x20000314
 8000efc:	00000000 	.word	0x00000000

08000f00 <aceGir_Read>:

HAL_StatusTypeDef aceGir_Read(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef result;
	uint8_t buf[6];

	/*	Leitura do Acelerometro	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, buf, 6, 1000);
 8000f06:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2306      	movs	r3, #6
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	463b      	mov	r3, r7
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	223b      	movs	r2, #59	; 0x3b
 8000f1c:	21d0      	movs	r1, #208	; 0xd0
 8000f1e:	f004 ff1d 	bl	8005d5c <HAL_I2C_Mem_Read>
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <aceGir_Read+0x30>
		return result;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	e0c3      	b.n	80010b8 <aceGir_Read+0x1b8>

	aceGir.accel.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8000f30:	783b      	ldrb	r3, [r7, #0]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	787b      	ldrb	r3, [r7, #1]
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f40:	809a      	strh	r2, [r3, #4]
	aceGir.accel.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 8000f42:	78bb      	ldrb	r3, [r7, #2]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f52:	80da      	strh	r2, [r3, #6]
	aceGir.accel.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 8000f54:	793b      	ldrb	r3, [r7, #4]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f64:	811a      	strh	r2, [r3, #8]

	//converter valores em 'g', dividindo por 16384 (FS_SEL)=0
	aceGir.accel.x = aceGir.accel.X_RAW/16384.0;
 8000f66:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff faf5 	bl	800055c <__aeabi_i2d>
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b55      	ldr	r3, [pc, #340]	; (80010cc <aceGir_Read+0x1cc>)
 8000f78:	f7ff fc84 	bl	8000884 <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd8e 	bl	8000aa4 <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f8c:	60d3      	str	r3, [r2, #12]
	aceGir.accel.y = aceGir.accel.Y_RAW/16384.0;
 8000f8e:	4b4e      	ldr	r3, [pc, #312]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fae1 	bl	800055c <__aeabi_i2d>
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <aceGir_Read+0x1cc>)
 8000fa0:	f7ff fc70 	bl	8000884 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fd7a 	bl	8000aa4 <__aeabi_d2f>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a45      	ldr	r2, [pc, #276]	; (80010c8 <aceGir_Read+0x1c8>)
 8000fb4:	6113      	str	r3, [r2, #16]
	aceGir.accel.z = aceGir.accel.Z_RAW/16384.0;
 8000fb6:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <aceGir_Read+0x1c8>)
 8000fb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff facd 	bl	800055c <__aeabi_i2d>
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <aceGir_Read+0x1cc>)
 8000fc8:	f7ff fc5c 	bl	8000884 <__aeabi_ddiv>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fd66 	bl	8000aa4 <__aeabi_d2f>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a3b      	ldr	r2, [pc, #236]	; (80010c8 <aceGir_Read+0x1c8>)
 8000fdc:	6153      	str	r3, [r2, #20]

	/*	Leitura do Giroscopio	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, buf, 6, 1000);
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <aceGir_Read+0x1c8>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2306      	movs	r3, #6
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	463b      	mov	r3, r7
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	2243      	movs	r2, #67	; 0x43
 8000ff4:	21d0      	movs	r1, #208	; 0xd0
 8000ff6:	f004 feb1 	bl	8005d5c <HAL_I2C_Mem_Read>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <aceGir_Read+0x108>
		return result;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	e057      	b.n	80010b8 <aceGir_Read+0x1b8>

	aceGir.gyro.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8001008:	783b      	ldrb	r3, [r7, #0]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <aceGir_Read+0x1c8>)
 8001018:	831a      	strh	r2, [r3, #24]
	aceGir.gyro.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 800101a:	78bb      	ldrb	r3, [r7, #2]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <aceGir_Read+0x1c8>)
 800102a:	835a      	strh	r2, [r3, #26]
	aceGir.gyro.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 800102c:	793b      	ldrb	r3, [r7, #4]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <aceGir_Read+0x1c8>)
 800103c:	839a      	strh	r2, [r3, #28]

	//converter valores em 'graus/segundo', dividindo por 131 (FS_SEL)=0
	aceGir.gyro.x = aceGir.gyro.X_RAW/131.0;
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <aceGir_Read+0x1c8>)
 8001040:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa89 	bl	800055c <__aeabi_i2d>
 800104a:	a31d      	add	r3, pc, #116	; (adr r3, 80010c0 <aceGir_Read+0x1c0>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fc18 	bl	8000884 <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fd22 	bl	8000aa4 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <aceGir_Read+0x1c8>)
 8001064:	6213      	str	r3, [r2, #32]
	aceGir.gyro.y = aceGir.gyro.Y_RAW/131.0;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <aceGir_Read+0x1c8>)
 8001068:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa75 	bl	800055c <__aeabi_i2d>
 8001072:	a313      	add	r3, pc, #76	; (adr r3, 80010c0 <aceGir_Read+0x1c0>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fc04 	bl	8000884 <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd0e 	bl	8000aa4 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <aceGir_Read+0x1c8>)
 800108c:	6253      	str	r3, [r2, #36]	; 0x24
	aceGir.gyro.z = aceGir.gyro.Z_RAW/131.0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <aceGir_Read+0x1c8>)
 8001090:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa61 	bl	800055c <__aeabi_i2d>
 800109a:	a309      	add	r3, pc, #36	; (adr r3, 80010c0 <aceGir_Read+0x1c0>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fbf0 	bl	8000884 <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fcfa 	bl	8000aa4 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <aceGir_Read+0x1c8>)
 80010b4:	6293      	str	r3, [r2, #40]	; 0x28



	return result;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40606000 	.word	0x40606000
 80010c8:	2000035c 	.word	0x2000035c
 80010cc:	40d00000 	.word	0x40d00000

080010d0 <can_bus_Init>:

#include "can_bus.h"
#include "ace_gir.h"

void can_bus_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	canBus.tx_header.DLC = 8;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <can_bus_Init+0x84>)
 80010d8:	2208      	movs	r2, #8
 80010da:	61da      	str	r2, [r3, #28]
	canBus.tx_header.IDE = CAN_ID_STD;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <can_bus_Init+0x84>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
	canBus.tx_header.RTR = CAN_RTR_DATA;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <can_bus_Init+0x84>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
	canBus.tx_header.StdId = 0x010;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <can_bus_Init+0x84>)
 80010ea:	2210      	movs	r2, #16
 80010ec:	60da      	str	r2, [r3, #12]
	canBus.filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <can_bus_Init+0x84>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	651a      	str	r2, [r3, #80]	; 0x50
	canBus.filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <can_bus_Init+0x84>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	659a      	str	r2, [r3, #88]	; 0x58
	canBus.filter.FilterBank = 0;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <can_bus_Init+0x84>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	655a      	str	r2, [r3, #84]	; 0x54
	canBus.filter.FilterIdHigh = 0x249 << 5;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <can_bus_Init+0x84>)
 8001102:	f644 1220 	movw	r2, #18720	; 0x4920
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
	canBus.filter.FilterIdLow = 0x240 << 5;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <can_bus_Init+0x84>)
 800110a:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800110e:	645a      	str	r2, [r3, #68]	; 0x44
	canBus.filter.FilterMaskIdHigh = 0x200 << 5;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <can_bus_Init+0x84>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	649a      	str	r2, [r3, #72]	; 0x48
	canBus.filter.FilterMaskIdLow = 0;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <can_bus_Init+0x84>)
 800111a:	2200      	movs	r2, #0
 800111c:	64da      	str	r2, [r3, #76]	; 0x4c
	canBus.filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <can_bus_Init+0x84>)
 8001120:	2201      	movs	r2, #1
 8001122:	65da      	str	r2, [r3, #92]	; 0x5c
	canBus.filter.FilterActivation = ENABLE;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <can_bus_Init+0x84>)
 8001126:	2201      	movs	r2, #1
 8001128:	661a      	str	r2, [r3, #96]	; 0x60
	result = HAL_CAN_ConfigFilter(&hcan, &canBus.filter);
 800112a:	490b      	ldr	r1, [pc, #44]	; (8001158 <can_bus_Init+0x88>)
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <can_bus_Init+0x8c>)
 800112e:	f003 f9fa 	bl	8004526 <HAL_CAN_ConfigFilter>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_Start(&hcan);
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <can_bus_Init+0x8c>)
 8001138:	f003 fabe 	bl	80046b8 <HAL_CAN_Start>
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001140:	2102      	movs	r1, #2
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <can_bus_Init+0x8c>)
 8001144:	f003 fc0d 	bl	8004962 <HAL_CAN_ActivateNotification>
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000388 	.word	0x20000388
 8001158:	200003c8 	.word	0x200003c8
 800115c:	2000040c 	.word	0x2000040c

08001160 <can_bus_Recieve>:
	if (canBus.count>50000)
		canBus.count = 0;
}

void can_bus_Recieve(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canBus.rx_header, canBus.recieve);
 8001164:	4b32      	ldr	r3, [pc, #200]	; (8001230 <can_bus_Recieve+0xd0>)
 8001166:	4a33      	ldr	r2, [pc, #204]	; (8001234 <can_bus_Recieve+0xd4>)
 8001168:	2100      	movs	r1, #0
 800116a:	4833      	ldr	r0, [pc, #204]	; (8001238 <can_bus_Recieve+0xd8>)
 800116c:	f003 fae8 	bl	8004740 <HAL_CAN_GetRxMessage>

	if (canBus.rx_header.StdId == 0x242)
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <can_bus_Recieve+0xdc>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f240 2242 	movw	r2, #578	; 0x242
 8001178:	4293      	cmp	r3, r2
 800117a:	d153      	bne.n	8001224 <can_bus_Recieve+0xc4>
	{
		canBus.rx.fuel = (canBus.recieve[1] << 8) + canBus.recieve[0];
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <can_bus_Recieve+0xdc>)
 800117e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001182:	b29b      	uxth	r3, r3
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <can_bus_Recieve+0xdc>)
 800118a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800118e:	b29b      	uxth	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <can_bus_Recieve+0xdc>)
 8001196:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		canBus.rx.vel = (canBus.recieve[3] << 8) + canBus.recieve[2];
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <can_bus_Recieve+0xdc>)
 800119c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <can_bus_Recieve+0xdc>)
 80011a8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <can_bus_Recieve+0xdc>)
 80011b4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		canBus.rx.rpm = (canBus.recieve[5] << 8) + canBus.recieve[4];
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <can_bus_Recieve+0xdc>)
 80011ba:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80011be:	b29b      	uxth	r3, r3
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <can_bus_Recieve+0xdc>)
 80011c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <can_bus_Recieve+0xdc>)
 80011d2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		canBus.rx.counter = (canBus.recieve[7] << 8) + canBus.recieve[6];
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <can_bus_Recieve+0xdc>)
 80011d8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80011dc:	b29b      	uxth	r3, r3
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <can_bus_Recieve+0xdc>)
 80011e4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <can_bus_Recieve+0xdc>)
 80011f0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

		if (canBus.rx.vel > 9999)
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <can_bus_Recieve+0xdc>)
 80011f6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80011fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80011fe:	4293      	cmp	r3, r2
 8001200:	d904      	bls.n	800120c <can_bus_Recieve+0xac>
			canBus.rx.vel = 9999;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <can_bus_Recieve+0xdc>)
 8001204:	f242 720f 	movw	r2, #9999	; 0x270f
 8001208:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

		if (canBus.rx.rpm > 9999)
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <can_bus_Recieve+0xdc>)
 800120e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001212:	f242 720f 	movw	r2, #9999	; 0x270f
 8001216:	4293      	cmp	r3, r2
 8001218:	d904      	bls.n	8001224 <can_bus_Recieve+0xc4>
			canBus.rx.rpm = 9999;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <can_bus_Recieve+0xdc>)
 800121c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001220:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		can_rData.gyro.x = (canBus.recieve[1] << 8) + canBus.recieve[0];
		can_rData.gyro.y = (canBus.recieve[3] << 8) + canBus.recieve[2];
		can_rData.gyro.z = (canBus.recieve[5] << 8) + canBus.recieve[4];
	}*/

	canBus.count=0;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <can_bus_Recieve+0xdc>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200003fc 	.word	0x200003fc
 8001234:	200003ac 	.word	0x200003ac
 8001238:	2000040c 	.word	0x2000040c
 800123c:	20000388 	.word	0x20000388

08001240 <dina_Init>:
 */

#include "dina.h"

void dina_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	dina.huart = &huart2;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <dina_Init+0x14>)
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <dina_Init+0x18>)
 8001248:	601a      	str	r2, [r3, #0]
	forceGauge_uart_Init_DMA(&dina);
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <dina_Init+0x14>)
 800124c:	f000 fce6 	bl	8001c1c <forceGauge_uart_Init_DMA>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000434 	.word	0x20000434
 8001258:	20000450 	.word	0x20000450

0800125c <dina_Update>:

void dina_Update(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	forceGauge_getForce(&dina);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <dina_Update+0x10>)
 8001262:	f000 fcef 	bl	8001c44 <forceGauge_getForce>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000434 	.word	0x20000434

08001270 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <SELECT+0x14>)
 800127c:	f004 fafe 	bl	800587c <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40010800 	.word	0x40010800

08001288 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001292:	4802      	ldr	r0, [pc, #8]	; (800129c <DESELECT+0x14>)
 8001294:	f004 faf2 	bl	800587c <HAL_GPIO_WritePin>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40010800 	.word	0x40010800

080012a0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012aa:	bf00      	nop
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <SPI_TxByte+0x30>)
 80012ae:	f008 f9d0 	bl	8009652 <HAL_SPI_GetState>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d1f9      	bne.n	80012ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80012b8:	1df9      	adds	r1, r7, #7
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	2201      	movs	r2, #1
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <SPI_TxByte+0x30>)
 80012c2:	f007 fdf9 	bl	8008eb8 <HAL_SPI_Transmit>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000e7c 	.word	0x20000e7c

080012d4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80012da:	23ff      	movs	r3, #255	; 0xff
 80012dc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80012e2:	bf00      	nop
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <SPI_RxByte+0x38>)
 80012e6:	f008 f9b4 	bl	8009652 <HAL_SPI_GetState>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d1f9      	bne.n	80012e4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80012f0:	1dba      	adds	r2, r7, #6
 80012f2:	1df9      	adds	r1, r7, #7
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <SPI_RxByte+0x38>)
 80012fe:	f007 ff17 	bl	8009130 <HAL_SPI_TransmitReceive>

  return data;
 8001302:	79bb      	ldrb	r3, [r7, #6]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000e7c 	.word	0x20000e7c

08001310 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001318:	f7ff ffdc 	bl	80012d4 <SPI_RxByte>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	701a      	strb	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <SD_ReadyWait+0x34>)
 8001334:	2232      	movs	r2, #50	; 0x32
 8001336:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001338:	f7ff ffcc 	bl	80012d4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800133c:	f7ff ffca 	bl	80012d4 <SPI_RxByte>
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2bff      	cmp	r3, #255	; 0xff
 8001348:	d004      	beq.n	8001354 <SD_ReadyWait+0x28>
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SD_ReadyWait+0x34>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f3      	bne.n	800133c <SD_ReadyWait+0x10>

  return res;
 8001354:	79fb      	ldrb	r3, [r7, #7]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000f1c 	.word	0x20000f1c

08001364 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800136a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800136e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001370:	f7ff ff8a 	bl	8001288 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	e005      	b.n	8001386 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800137a:	20ff      	movs	r0, #255	; 0xff
 800137c:	f7ff ff90 	bl	80012a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	3301      	adds	r3, #1
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2b09      	cmp	r3, #9
 800138a:	ddf6      	ble.n	800137a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800138c:	f7ff ff70 	bl	8001270 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80013a4:	2395      	movs	r3, #149	; 0x95
 80013a6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e009      	b.n	80013c2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80013ae:	1d3a      	adds	r2, r7, #4
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff72 	bl	80012a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	ddf2      	ble.n	80013ae <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80013c8:	e002      	b.n	80013d0 <SD_PowerOn+0x6c>
  {
    Count--;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80013d0:	f7ff ff80 	bl	80012d4 <SPI_RxByte>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d002      	beq.n	80013e0 <SD_PowerOn+0x7c>
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f4      	bne.n	80013ca <SD_PowerOn+0x66>
  }

  DESELECT();
 80013e0:	f7ff ff52 	bl	8001288 <DESELECT>
  SPI_TxByte(0XFF);
 80013e4:	20ff      	movs	r0, #255	; 0xff
 80013e6:	f7ff ff5b 	bl	80012a0 <SPI_TxByte>

  PowerFlag = 1;
 80013ea:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <SD_PowerOn+0x94>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200000a5 	.word	0x200000a5

080013fc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <SD_PowerOff+0x14>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200000a5 	.word	0x200000a5

08001414 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <SD_CheckPower+0x10>)
 800141a:	781b      	ldrb	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	200000a5 	.word	0x200000a5

08001428 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <SD_RxDataBlock+0x68>)
 8001434:	220a      	movs	r2, #10
 8001436:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001438:	f7ff ff4c 	bl	80012d4 <SPI_RxByte>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2bff      	cmp	r3, #255	; 0xff
 8001444:	d104      	bne.n	8001450 <SD_RxDataBlock+0x28>
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <SD_RxDataBlock+0x68>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f3      	bne.n	8001438 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2bfe      	cmp	r3, #254	; 0xfe
 8001454:	d001      	beq.n	800145a <SD_RxDataBlock+0x32>
    return FALSE;
 8001456:	2300      	movs	r3, #0
 8001458:	e016      	b.n	8001488 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff55 	bl	8001310 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff4f 	bl	8001310 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3b02      	subs	r3, #2
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ed      	bne.n	800145a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800147e:	f7ff ff29 	bl	80012d4 <SPI_RxByte>
  SPI_RxByte();
 8001482:	f7ff ff27 	bl	80012d4 <SPI_RxByte>

  return TRUE;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000f1d 	.word	0x20000f1d

08001494 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80014a4:	f7ff ff42 	bl	800132c <SD_ReadyWait>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2bff      	cmp	r3, #255	; 0xff
 80014ac:	d001      	beq.n	80014b2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e040      	b.n	8001534 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fef3 	bl	80012a0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	2bfd      	cmp	r3, #253	; 0xfd
 80014be:	d031      	beq.n	8001524 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fee7 	bl	80012a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fee0 	bl	80012a0 <SPI_TxByte>
    } while (--wc);
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	73bb      	strb	r3, [r7, #14]
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1eb      	bne.n	80014c4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80014ec:	f7ff fef2 	bl	80012d4 <SPI_RxByte>
    SPI_RxByte();
 80014f0:	f7ff fef0 	bl	80012d4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80014f4:	e00b      	b.n	800150e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80014f6:	f7ff feed 	bl	80012d4 <SPI_RxByte>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	2b05      	cmp	r3, #5
 8001506:	d006      	beq.n	8001516 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	3301      	adds	r3, #1
 800150c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800150e:	7b7b      	ldrb	r3, [r7, #13]
 8001510:	2b40      	cmp	r3, #64	; 0x40
 8001512:	d9f0      	bls.n	80014f6 <SD_TxDataBlock+0x62>
 8001514:	e000      	b.n	8001518 <SD_TxDataBlock+0x84>
        break;
 8001516:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001518:	bf00      	nop
 800151a:	f7ff fedb 	bl	80012d4 <SPI_RxByte>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0fa      	beq.n	800151a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	2b05      	cmp	r3, #5
 800152c:	d101      	bne.n	8001532 <SD_TxDataBlock+0x9e>
    return TRUE;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001548:	f7ff fef0 	bl	800132c <SD_ReadyWait>
 800154c:	4603      	mov	r3, r0
 800154e:	2bff      	cmp	r3, #255	; 0xff
 8001550:	d001      	beq.n	8001556 <SD_SendCmd+0x1a>
    return 0xFF;
 8001552:	23ff      	movs	r3, #255	; 0xff
 8001554:	e040      	b.n	80015d8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fea1 	bl	80012a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	0e1b      	lsrs	r3, r3, #24
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fe9b 	bl	80012a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe95 	bl	80012a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe8f 	bl	80012a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe8a 	bl	80012a0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b40      	cmp	r3, #64	; 0x40
 8001594:	d101      	bne.n	800159a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001596:	2395      	movs	r3, #149	; 0x95
 8001598:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b48      	cmp	r3, #72	; 0x48
 800159e:	d101      	bne.n	80015a4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80015a0:	2387      	movs	r3, #135	; 0x87
 80015a2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fe7a 	bl	80012a0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b4c      	cmp	r3, #76	; 0x4c
 80015b0:	d101      	bne.n	80015b6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80015b2:	f7ff fe8f 	bl	80012d4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80015b6:	230a      	movs	r3, #10
 80015b8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80015ba:	f7ff fe8b 	bl	80012d4 <SPI_RxByte>
 80015be:	4603      	mov	r3, r0
 80015c0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80015c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da05      	bge.n	80015d6 <SD_SendCmd+0x9a>
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	73bb      	strb	r3, [r7, #14]
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f1      	bne.n	80015ba <SD_SendCmd+0x7e>

  return res;
 80015d6:	7b7b      	ldrb	r3, [r7, #13]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0d5      	b.n	80017a0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80015f4:	4b6c      	ldr	r3, [pc, #432]	; (80017a8 <SD_disk_initialize+0x1c8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <SD_disk_initialize+0x2a>
    return Stat;
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <SD_disk_initialize+0x1c8>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	e0ca      	b.n	80017a0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800160a:	f7ff feab 	bl	8001364 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800160e:	f7ff fe2f 	bl	8001270 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001616:	2100      	movs	r1, #0
 8001618:	2040      	movs	r0, #64	; 0x40
 800161a:	f7ff ff8f 	bl	800153c <SD_SendCmd>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	f040 80a5 	bne.w	8001770 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001626:	4b61      	ldr	r3, [pc, #388]	; (80017ac <SD_disk_initialize+0x1cc>)
 8001628:	2264      	movs	r2, #100	; 0x64
 800162a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800162c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001630:	2048      	movs	r0, #72	; 0x48
 8001632:	f7ff ff83 	bl	800153c <SD_SendCmd>
 8001636:	4603      	mov	r3, r0
 8001638:	2b01      	cmp	r3, #1
 800163a:	d158      	bne.n	80016ee <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e00c      	b.n	800165c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001642:	7bfc      	ldrb	r4, [r7, #15]
 8001644:	f7ff fe46 	bl	80012d4 <SPI_RxByte>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4423      	add	r3, r4
 8001652:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3301      	adds	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d9ef      	bls.n	8001642 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001662:	7abb      	ldrb	r3, [r7, #10]
 8001664:	2b01      	cmp	r3, #1
 8001666:	f040 8083 	bne.w	8001770 <SD_disk_initialize+0x190>
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	2baa      	cmp	r3, #170	; 0xaa
 800166e:	d17f      	bne.n	8001770 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001670:	2100      	movs	r1, #0
 8001672:	2077      	movs	r0, #119	; 0x77
 8001674:	f7ff ff62 	bl	800153c <SD_SendCmd>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d807      	bhi.n	800168e <SD_disk_initialize+0xae>
 800167e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001682:	2069      	movs	r0, #105	; 0x69
 8001684:	f7ff ff5a 	bl	800153c <SD_SendCmd>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <SD_disk_initialize+0x1cc>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1eb      	bne.n	8001670 <SD_disk_initialize+0x90>
 8001698:	e000      	b.n	800169c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800169a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800169c:	4b43      	ldr	r3, [pc, #268]	; (80017ac <SD_disk_initialize+0x1cc>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d064      	beq.n	8001770 <SD_disk_initialize+0x190>
 80016a6:	2100      	movs	r1, #0
 80016a8:	207a      	movs	r0, #122	; 0x7a
 80016aa:	f7ff ff47 	bl	800153c <SD_SendCmd>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d15d      	bne.n	8001770 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e00c      	b.n	80016d4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80016ba:	7bfc      	ldrb	r4, [r7, #15]
 80016bc:	f7ff fe0a 	bl	80012d4 <SPI_RxByte>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4423      	add	r3, r4
 80016ca:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d9ef      	bls.n	80016ba <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80016da:	7a3b      	ldrb	r3, [r7, #8]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SD_disk_initialize+0x108>
 80016e4:	2306      	movs	r3, #6
 80016e6:	e000      	b.n	80016ea <SD_disk_initialize+0x10a>
 80016e8:	2302      	movs	r3, #2
 80016ea:	73bb      	strb	r3, [r7, #14]
 80016ec:	e040      	b.n	8001770 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80016ee:	2100      	movs	r1, #0
 80016f0:	2077      	movs	r0, #119	; 0x77
 80016f2:	f7ff ff23 	bl	800153c <SD_SendCmd>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d808      	bhi.n	800170e <SD_disk_initialize+0x12e>
 80016fc:	2100      	movs	r1, #0
 80016fe:	2069      	movs	r0, #105	; 0x69
 8001700:	f7ff ff1c 	bl	800153c <SD_SendCmd>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d801      	bhi.n	800170e <SD_disk_initialize+0x12e>
 800170a:	2302      	movs	r3, #2
 800170c:	e000      	b.n	8001710 <SD_disk_initialize+0x130>
 800170e:	2301      	movs	r3, #1
 8001710:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d10e      	bne.n	8001736 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001718:	2100      	movs	r1, #0
 800171a:	2077      	movs	r0, #119	; 0x77
 800171c:	f7ff ff0e 	bl	800153c <SD_SendCmd>
 8001720:	4603      	mov	r3, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d80e      	bhi.n	8001744 <SD_disk_initialize+0x164>
 8001726:	2100      	movs	r1, #0
 8001728:	2069      	movs	r0, #105	; 0x69
 800172a:	f7ff ff07 	bl	800153c <SD_SendCmd>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001734:	e00d      	b.n	8001752 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001736:	2100      	movs	r1, #0
 8001738:	2041      	movs	r0, #65	; 0x41
 800173a:	f7ff feff 	bl	800153c <SD_SendCmd>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <SD_disk_initialize+0x1cc>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1e1      	bne.n	8001712 <SD_disk_initialize+0x132>
 800174e:	e000      	b.n	8001752 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001750:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <SD_disk_initialize+0x1cc>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <SD_disk_initialize+0x18c>
 800175c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001760:	2050      	movs	r0, #80	; 0x50
 8001762:	f7ff feeb 	bl	800153c <SD_SendCmd>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <SD_disk_initialize+0x1d0>)
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001776:	f7ff fd87 	bl	8001288 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800177a:	f7ff fdab 	bl	80012d4 <SPI_RxByte>

  if (type)
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <SD_disk_initialize+0x1c8>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SD_disk_initialize+0x1c8>)
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e001      	b.n	800179a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001796:	f7ff fe31 	bl	80013fc <SD_PowerOff>
  }

  return Stat;
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <SD_disk_initialize+0x1c8>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b2db      	uxtb	r3, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000f1d 	.word	0x20000f1d
 80017b0:	200000a4 	.word	0x200000a4

080017b4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SD_disk_status+0x14>
    return STA_NOINIT;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e002      	b.n	80017ce <SD_disk_status+0x1a>

  return Stat;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <SD_disk_status+0x24>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b2db      	uxtb	r3, r3
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000000 	.word	0x20000000

080017dc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <SD_disk_read+0x1c>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <SD_disk_read+0x20>
    return RES_PARERR;
 80017f8:	2304      	movs	r3, #4
 80017fa:	e051      	b.n	80018a0 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <SD_disk_read+0xcc>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800180a:	2303      	movs	r3, #3
 800180c:	e048      	b.n	80018a0 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <SD_disk_read+0xd0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001820:	f7ff fd26 	bl	8001270 <SELECT>

  if (count == 1)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d111      	bne.n	800184e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	2051      	movs	r0, #81	; 0x51
 800182e:	f7ff fe85 	bl	800153c <SD_SendCmd>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d129      	bne.n	800188c <SD_disk_read+0xb0>
 8001838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	f7ff fdf3 	bl	8001428 <SD_RxDataBlock>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d021      	beq.n	800188c <SD_disk_read+0xb0>
      count = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	e01e      	b.n	800188c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	2052      	movs	r0, #82	; 0x52
 8001852:	f7ff fe73 	bl	800153c <SD_SendCmd>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d117      	bne.n	800188c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800185c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001860:	68b8      	ldr	r0, [r7, #8]
 8001862:	f7ff fde1 	bl	8001428 <SD_RxDataBlock>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001872:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	3b01      	subs	r3, #1
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ed      	bne.n	800185c <SD_disk_read+0x80>
 8001880:	e000      	b.n	8001884 <SD_disk_read+0xa8>
          break;
 8001882:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001884:	2100      	movs	r1, #0
 8001886:	204c      	movs	r0, #76	; 0x4c
 8001888:	f7ff fe58 	bl	800153c <SD_SendCmd>
    }
  }

  DESELECT();
 800188c:	f7ff fcfc 	bl	8001288 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001890:	f7ff fd20 	bl	80012d4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	200000a4 	.word	0x200000a4

080018b0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <SD_disk_write+0x1c>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <SD_disk_write+0x20>
    return RES_PARERR;
 80018cc:	2304      	movs	r3, #4
 80018ce:	e06b      	b.n	80019a8 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <SD_disk_write+0x100>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80018de:	2303      	movs	r3, #3
 80018e0:	e062      	b.n	80019a8 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <SD_disk_write+0x100>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SD_disk_write+0x44>
    return RES_WRPRT;
 80018f0:	2302      	movs	r3, #2
 80018f2:	e059      	b.n	80019a8 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <SD_disk_write+0x104>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	607b      	str	r3, [r7, #4]

  SELECT();
 8001906:	f7ff fcb3 	bl	8001270 <SELECT>

  if (count == 1)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d110      	bne.n	8001932 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	2058      	movs	r0, #88	; 0x58
 8001914:	f7ff fe12 	bl	800153c <SD_SendCmd>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d13a      	bne.n	8001994 <SD_disk_write+0xe4>
 800191e:	21fe      	movs	r1, #254	; 0xfe
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f7ff fdb7 	bl	8001494 <SD_TxDataBlock>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d033      	beq.n	8001994 <SD_disk_write+0xe4>
      count = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	e030      	b.n	8001994 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <SD_disk_write+0x104>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800193e:	2100      	movs	r1, #0
 8001940:	2077      	movs	r0, #119	; 0x77
 8001942:	f7ff fdfb 	bl	800153c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	2057      	movs	r0, #87	; 0x57
 800194a:	f7ff fdf7 	bl	800153c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	2059      	movs	r0, #89	; 0x59
 8001952:	f7ff fdf3 	bl	800153c <SD_SendCmd>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d11b      	bne.n	8001994 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800195c:	21fc      	movs	r1, #252	; 0xfc
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f7ff fd98 	bl	8001494 <SD_TxDataBlock>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00a      	beq.n	8001980 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001970:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ee      	bne.n	800195c <SD_disk_write+0xac>
 800197e:	e000      	b.n	8001982 <SD_disk_write+0xd2>
          break;
 8001980:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001982:	21fd      	movs	r1, #253	; 0xfd
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fd85 	bl	8001494 <SD_TxDataBlock>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <SD_disk_write+0xe4>
      {
        count = 1;
 8001990:	2301      	movs	r3, #1
 8001992:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001994:	f7ff fc78 	bl	8001288 <DESELECT>
  SPI_RxByte();
 8001998:	f7ff fc9c 	bl	80012d4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000
 80019b4:	200000a4 	.word	0x200000a4

080019b8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b08b      	sub	sp, #44	; 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	603a      	str	r2, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	460b      	mov	r3, r1
 80019c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80019d2:	2304      	movs	r3, #4
 80019d4:	e11b      	b.n	8001c0e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d129      	bne.n	8001a36 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d017      	beq.n	8001a1a <SD_disk_ioctl+0x62>
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	dc1f      	bgt.n	8001a2e <SD_disk_ioctl+0x76>
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <SD_disk_ioctl+0x40>
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d00b      	beq.n	8001a0e <SD_disk_ioctl+0x56>
 80019f6:	e01a      	b.n	8001a2e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80019f8:	f7ff fd0c 	bl	8001414 <SD_CheckPower>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001a02:	f7ff fcfb 	bl	80013fc <SD_PowerOff>
      res = RES_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a0c:	e0fd      	b.n	8001c0a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001a0e:	f7ff fca9 	bl	8001364 <SD_PowerOn>
      res = RES_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a18:	e0f7      	b.n	8001c0a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	1c5c      	adds	r4, r3, #1
 8001a1e:	f7ff fcf9 	bl	8001414 <SD_CheckPower>
 8001a22:	4603      	mov	r3, r0
 8001a24:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a2c:	e0ed      	b.n	8001c0a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a34:	e0e9      	b.n	8001c0a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001a36:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <SD_disk_ioctl+0x260>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0e2      	b.n	8001c0e <SD_disk_ioctl+0x256>

    SELECT();
 8001a48:	f7ff fc12 	bl	8001270 <SELECT>

    switch (ctrl)
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	2b0d      	cmp	r3, #13
 8001a50:	f200 80cc 	bhi.w	8001bec <SD_disk_ioctl+0x234>
 8001a54:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <SD_disk_ioctl+0xa4>)
 8001a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5a:	bf00      	nop
 8001a5c:	08001b57 	.word	0x08001b57
 8001a60:	08001a95 	.word	0x08001a95
 8001a64:	08001b47 	.word	0x08001b47
 8001a68:	08001bed 	.word	0x08001bed
 8001a6c:	08001bed 	.word	0x08001bed
 8001a70:	08001bed 	.word	0x08001bed
 8001a74:	08001bed 	.word	0x08001bed
 8001a78:	08001bed 	.word	0x08001bed
 8001a7c:	08001bed 	.word	0x08001bed
 8001a80:	08001bed 	.word	0x08001bed
 8001a84:	08001bed 	.word	0x08001bed
 8001a88:	08001b69 	.word	0x08001b69
 8001a8c:	08001b8d 	.word	0x08001b8d
 8001a90:	08001bb1 	.word	0x08001bb1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a94:	2100      	movs	r1, #0
 8001a96:	2049      	movs	r0, #73	; 0x49
 8001a98:	f7ff fd50 	bl	800153c <SD_SendCmd>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 80a8 	bne.w	8001bf4 <SD_disk_ioctl+0x23c>
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fcbc 	bl	8001428 <SD_RxDataBlock>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 809e 	beq.w	8001bf4 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001ab8:	7b3b      	ldrb	r3, [r7, #12]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10e      	bne.n	8001ae0 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001ac2:	7d7b      	ldrb	r3, [r7, #21]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	7d3b      	ldrb	r3, [r7, #20]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001ad6:	8bfb      	ldrh	r3, [r7, #30]
 8001ad8:	029a      	lsls	r2, r3, #10
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e02e      	b.n	8001b3e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ae0:	7c7b      	ldrb	r3, [r7, #17]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	7dbb      	ldrb	r3, [r7, #22]
 8001aea:	09db      	lsrs	r3, r3, #7
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	7d7b      	ldrb	r3, [r7, #21]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f003 0306 	and.w	r3, r3, #6
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	3302      	adds	r3, #2
 8001b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b08:	7d3b      	ldrb	r3, [r7, #20]
 8001b0a:	099b      	lsrs	r3, r3, #6
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	7cfb      	ldrb	r3, [r7, #19]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	7cbb      	ldrb	r3, [r7, #18]
 8001b1e:	029b      	lsls	r3, r3, #10
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b30:	8bfa      	ldrh	r2, [r7, #30]
 8001b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b36:	3b09      	subs	r3, #9
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001b44:	e056      	b.n	8001bf4 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b54:	e055      	b.n	8001c02 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001b56:	f7ff fbe9 	bl	800132c <SD_ReadyWait>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d14b      	bne.n	8001bf8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b66:	e047      	b.n	8001bf8 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2049      	movs	r0, #73	; 0x49
 8001b6c:	f7ff fce6 	bl	800153c <SD_SendCmd>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d142      	bne.n	8001bfc <SD_disk_ioctl+0x244>
 8001b76:	2110      	movs	r1, #16
 8001b78:	6a38      	ldr	r0, [r7, #32]
 8001b7a:	f7ff fc55 	bl	8001428 <SD_RxDataBlock>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d03b      	beq.n	8001bfc <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b8a:	e037      	b.n	8001bfc <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	204a      	movs	r0, #74	; 0x4a
 8001b90:	f7ff fcd4 	bl	800153c <SD_SendCmd>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d132      	bne.n	8001c00 <SD_disk_ioctl+0x248>
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	6a38      	ldr	r0, [r7, #32]
 8001b9e:	f7ff fc43 	bl	8001428 <SD_RxDataBlock>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d02b      	beq.n	8001c00 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bae:	e027      	b.n	8001c00 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	207a      	movs	r0, #122	; 0x7a
 8001bb4:	f7ff fcc2 	bl	800153c <SD_SendCmd>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bc4:	e00b      	b.n	8001bde <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001bc6:	6a3c      	ldr	r4, [r7, #32]
 8001bc8:	1c63      	adds	r3, r4, #1
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	f7ff fb82 	bl	80012d4 <SPI_RxByte>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d9ef      	bls.n	8001bc6 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001bec:	2304      	movs	r3, #4
 8001bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bf2:	e006      	b.n	8001c02 <SD_disk_ioctl+0x24a>
      break;
 8001bf4:	bf00      	nop
 8001bf6:	e004      	b.n	8001c02 <SD_disk_ioctl+0x24a>
      break;
 8001bf8:	bf00      	nop
 8001bfa:	e002      	b.n	8001c02 <SD_disk_ioctl+0x24a>
      break;
 8001bfc:	bf00      	nop
 8001bfe:	e000      	b.n	8001c02 <SD_disk_ioctl+0x24a>
      break;
 8001c00:	bf00      	nop
    }

    DESELECT();
 8001c02:	f7ff fb41 	bl	8001288 <DESELECT>
    SPI_RxByte();
 8001c06:	f7ff fb65 	bl	80012d4 <SPI_RxByte>
  }

  return res;
 8001c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	372c      	adds	r7, #44	; 0x2c
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd90      	pop	{r4, r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <forceGauge_uart_Init_DMA>:

/*
 *	Função que inicia a leitura
 */
void forceGauge_uart_Init_DMA(fGauge_HandleTypeDef *hfGauge)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	//hfGauge->result = HAL_UART_Init(hfGauge->huart);
	hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f008 fd4b 	bl	800a6ca <HAL_UART_Receive_DMA>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <forceGauge_getForce>:
/*
 * 	Função que lê os valores no buffer e converte a string em um int.
 * 	Essa função tambem detecta se a celula de carga foi desconectada e reinicia a leitura quando possivel.
 */
void forceGauge_getForce(fGauge_HandleTypeDef *hfGauge)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	int force = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]

	/*	Logica para reiniciar a leitura	*/
	if (hfGauge->huart->hdmatx->State != HAL_DMA_STATE_BUSY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d00b      	beq.n	8001c76 <forceGauge_getForce+0x32>
		hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2210      	movs	r2, #16
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f008 fd2e 	bl	800a6ca <HAL_UART_Receive_DMA>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	761a      	strb	r2, [r3, #24]
	//hfGauge->result = HAL_UART_Receive(hfGauge->huart, hfGauge->rxbuffer, 16, 10000);

	/*	Conversão string to int	*/
	if (hfGauge->rxbuffer[14] >=48 && hfGauge->rxbuffer[14] <= 57)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7c9b      	ldrb	r3, [r3, #18]
 8001c7a:	2b2f      	cmp	r3, #47	; 0x2f
 8001c7c:	d94d      	bls.n	8001d1a <forceGauge_getForce+0xd6>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7c9b      	ldrb	r3, [r3, #18]
 8001c82:	2b39      	cmp	r3, #57	; 0x39
 8001c84:	d849      	bhi.n	8001d1a <forceGauge_getForce+0xd6>
	{
		force += (hfGauge->rxbuffer[14] - 48) * 1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7c9b      	ldrb	r3, [r3, #18]
 8001c8a:	3b30      	subs	r3, #48	; 0x30
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[13] - 48) * 10;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7c5b      	ldrb	r3, [r3, #17]
 8001c96:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[12] - 48) * 100;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7c1b      	ldrb	r3, [r3, #16]
 8001cae:	3b30      	subs	r3, #48	; 0x30
 8001cb0:	2264      	movs	r2, #100	; 0x64
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[11] - 48) * 1000;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7bdb      	ldrb	r3, [r3, #15]
 8001cc0:	3b30      	subs	r3, #48	; 0x30
 8001cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[10] - 48) * 10000;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7b9b      	ldrb	r3, [r3, #14]
 8001cd4:	3b30      	subs	r3, #48	; 0x30
 8001cd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[9] - 48) * 100000;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7b5b      	ldrb	r3, [r3, #13]
 8001ce8:	3b30      	subs	r3, #48	; 0x30
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <forceGauge_getForce+0xe4>)
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[8] - 48) * 1000000;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7b1b      	ldrb	r3, [r3, #12]
 8001cfa:	3b30      	subs	r3, #48	; 0x30
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <forceGauge_getForce+0xe8>)
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[7] - 48) * 10000000;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7adb      	ldrb	r3, [r3, #11]
 8001d0c:	3b30      	subs	r3, #48	; 0x30
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <forceGauge_getForce+0xec>)
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
	}

	hfGauge->force = force;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	615a      	str	r2, [r3, #20]
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	000186a0 	.word	0x000186a0
 8001d2c:	000f4240 	.word	0x000f4240
 8001d30:	00989680 	.word	0x00989680

08001d34 <indutivo_Init>:

/*
 * 	Função para iniciar a leitura
 */
HAL_StatusTypeDef indutivo_Init(indutivo_typedef *hindutivo)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	hindutivo->value_raw = 0;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
	hindutivo->freq = 0;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
	hindutivo->count = 0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]

	result = HAL_TIM_Base_Start_IT(hindutivo->htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	4618      	mov	r0, r3
 8001d54:	f007 fd94 	bl	8009880 <HAL_TIM_Base_Start_IT>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]
	result = HAL_TIM_IC_Start_IT(hindutivo->htim, hindutivo->channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f007 fe34 	bl	80099d4 <HAL_TIM_IC_Start_IT>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]

	return result;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <indutivo_filtro>:

/*
 * 	Função para o filtro de dados, calcula o value
 */
void indutivo_filtro(indutivo_typedef *hindutivo)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	hindutivo->value = 0;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	605a      	str	r2, [r3, #4]

	if (hindutivo->value_raw > 9999)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d92:	4293      	cmp	r3, r2
 8001d94:	dd03      	ble.n	8001d9e <indutivo_filtro+0x22>
		hindutivo->value_raw = hindutivo->buf[4];
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 4; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e00f      	b.n	8001dc4 <indutivo_filtro+0x48>
		hindutivo->buf[i] = hindutivo->buf[i+1];
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3304      	adds	r3, #4
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	ddec      	ble.n	8001da4 <indutivo_filtro+0x28>

	hindutivo->buf[4] = hindutivo->value_raw;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24

	for (int i = 0; i < 5; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	e00d      	b.n	8001df4 <indutivo_filtro+0x78>
		hindutivo->value += hindutivo->buf[i];
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3304      	adds	r3, #4
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	441a      	add	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	ddee      	ble.n	8001dd8 <indutivo_filtro+0x5c>

	hindutivo->value = (int)hindutivo->value/5.0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fbac 	bl	800055c <__aeabi_i2d>
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <indutivo_filtro+0xac>)
 8001e0a:	f7fe fd3b 	bl	8000884 <__aeabi_ddiv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe fe1d 	bl	8000a54 <__aeabi_d2iz>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	605a      	str	r2, [r3, #4]
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40140000 	.word	0x40140000
 8001e2c:	00000000 	.word	0x00000000

08001e30 <indutivo_calc>:
/*
 * 	Função pra ser chamada quando ocorre a interrupção de sinal
 * 	Calcula o value_raw
 */
void indutivo_calc(indutivo_typedef *hindutivo)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	hindutivo->count += __HAL_TIM_GET_COMPARE(hindutivo->htim, hindutivo->channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d104      	bne.n	8001e4a <indutivo_calc+0x1a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	e015      	b.n	8001e76 <indutivo_calc+0x46>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d104      	bne.n	8001e5c <indutivo_calc+0x2c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	e00c      	b.n	8001e76 <indutivo_calc+0x46>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d104      	bne.n	8001e6e <indutivo_calc+0x3e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	e003      	b.n	8001e76 <indutivo_calc+0x46>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68d2      	ldr	r2, [r2, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(hindutivo->htim, 0);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
	hindutivo->freq = (int)(100000000.0 / hindutivo->count);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb63 	bl	800055c <__aeabi_i2d>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	a115      	add	r1, pc, #84	; (adr r1, 8001ef0 <indutivo_calc+0xc0>)
 8001e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ea0:	f7fe fcf0 	bl	8000884 <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe fdd2 	bl	8000a54 <__aeabi_d2iz>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]
	hindutivo->value_raw = (int)(hindutivo->constante*hindutivo->freq);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681c      	ldr	r4, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fefa 	bl	8000cb8 <__aeabi_i2f>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7fe f941 	bl	8000150 <__aeabi_fmul>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ff45 	bl	8000d60 <__aeabi_f2iz>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
	indutivo_filtro(hindutivo);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff4d 	bl	8001d7c <indutivo_filtro>
	hindutivo->count = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	4197d784 	.word	0x4197d784

08001ef8 <indutivo_reset>:
/*
 * 	Função pra ser chamada quando o timer atinge valor maximo
 * 	Zera os valores
 */
void indutivo_reset(indutivo_typedef *hindutivo)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	if(hindutivo->count<1000000)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <indutivo_reset+0x3c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	dc07      	bgt.n	8001f1a <indutivo_reset+0x22>
	{
		hindutivo->count+=50000;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8001f12:	3350      	adds	r3, #80	; 0x50
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	60d3      	str	r3, [r2, #12]
	{
		hindutivo->freq=0;
		hindutivo->value_raw=0;
		indutivo_filtro(hindutivo);
	}
}
 8001f18:	e008      	b.n	8001f2c <indutivo_reset+0x34>
		hindutivo->freq=0;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
		hindutivo->value_raw=0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
		indutivo_filtro(hindutivo);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff28 	bl	8001d7c <indutivo_filtro>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	000f423f 	.word	0x000f423f

08001f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3c:	f001 fd1e 	bl	800397c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f40:	f000 f85a 	bl	8001ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f44:	f000 fb9e 	bl	8002684 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f48:	f000 fb6e 	bl	8002628 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f4c:	f000 f8b0 	bl	80020b0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001f50:	f000 f932 	bl	80021b8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001f54:	f000 f95e 	bl	8002214 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001f58:	f000 fa06 	bl	8002368 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f5c:	f000 fa74 	bl	8002448 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001f60:	f009 f8c6 	bl	800b0f0 <MX_FATFS_Init>
  MX_TIM4_Init();
 8001f64:	f000 fabe 	bl	80024e4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f68:	f000 f98a 	bl	8002280 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001f6c:	f000 fb08 	bl	8002580 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8001f70:	f000 f8ec 	bl	800214c <MX_CAN_Init>
  MX_USART2_UART_Init();
 8001f74:	f000 fb2e 	bl	80025d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	fresult = SD_Init();
 8001f78:	f000 fc58 	bl	800282c <SD_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <main+0xb4>)
 8001f82:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NOT_READY)
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <main+0xb4>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d103      	bne.n	8001f94 <main+0x5c>
		sdCard.mode = 9;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <main+0xb8>)
 8001f8e:	2209      	movs	r2, #9
 8001f90:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754

	if (sdCard.mode == 0)
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <main+0xb8>)
 8001f96:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <main+0x70>
	{
	  rot_Init();
 8001f9e:	f000 fbe5 	bl	800276c <rot_Init>
	  vel_Init();
 8001fa2:	f001 fc9b 	bl	80038dc <vel_Init>
 8001fa6:	e01f      	b.n	8001fe8 <main+0xb0>
	}
	else if (sdCard.mode == 1)
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <main+0xb8>)
 8001faa:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d104      	bne.n	8001fbc <main+0x84>
	{
		dina_Init();
 8001fb2:	f7ff f945 	bl	8001240 <dina_Init>
		rot_Init();
 8001fb6:	f000 fbd9 	bl	800276c <rot_Init>
 8001fba:	e015      	b.n	8001fe8 <main+0xb0>
	}
	else if (sdCard.mode == 2)
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <main+0xb8>)
 8001fbe:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d107      	bne.n	8001fd6 <main+0x9e>
	{
		can_bus_Init();
 8001fc6:	f7ff f883 	bl	80010d0 <can_bus_Init>
		aceGir_Init(&hi2c2);
 8001fca:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <main+0xbc>)
 8001fcc:	f7fe ff08 	bl	8000de0 <aceGir_Init>
		ADC_DMA_Init();
 8001fd0:	f7fe feec 	bl	8000dac <ADC_DMA_Init>
 8001fd4:	e008      	b.n	8001fe8 <main+0xb0>
	}
	else if (sdCard.mode == 3)
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <main+0xb8>)
 8001fd8:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d103      	bne.n	8001fe8 <main+0xb0>
	{
		traction_Init();
 8001fe0:	f001 fc56 	bl	8003890 <traction_Init>
		can_bus_Init();
 8001fe4:	f7ff f874 	bl	80010d0 <can_bus_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <main+0xb0>
 8001fea:	bf00      	nop
 8001fec:	20000e78 	.word	0x20000e78
 8001ff0:	200004c4 	.word	0x200004c4
 8001ff4:	20000c60 	.word	0x20000c60

08001ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b094      	sub	sp, #80	; 0x50
 8001ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002002:	2228      	movs	r2, #40	; 0x28
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f00c fbf6 	bl	800e7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002028:	2301      	movs	r3, #1
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800202c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002036:	2301      	movs	r3, #1
 8002038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800203a:	2302      	movs	r3, #2
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800203e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002042:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002044:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002048:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800204a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800204e:	4618      	mov	r0, r3
 8002050:	f006 f91a 	bl	8008288 <HAL_RCC_OscConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800205a:	f000 fb81 	bl	8002760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800205e:	230f      	movs	r3, #15
 8002060:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800206a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2102      	movs	r1, #2
 800207a:	4618      	mov	r0, r3
 800207c:	f006 fb84 	bl	8008788 <HAL_RCC_ClockConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002086:	f000 fb6b 	bl	8002760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800208a:	2302      	movs	r3, #2
 800208c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800208e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002092:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4618      	mov	r0, r3
 8002098:	f006 fd10 	bl	8008abc <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80020a2:	f000 fb5d 	bl	8002760 <Error_Handler>
  }
}
 80020a6:	bf00      	nop
 80020a8:	3750      	adds	r7, #80	; 0x50
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <MX_ADC1_Init+0x94>)
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <MX_ADC1_Init+0x98>)
 80020c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MX_ADC1_Init+0x94>)
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MX_ADC1_Init+0x94>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <MX_ADC1_Init+0x94>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <MX_ADC1_Init+0x94>)
 80020dc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_ADC1_Init+0x94>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <MX_ADC1_Init+0x94>)
 80020ea:	2202      	movs	r2, #2
 80020ec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ee:	4815      	ldr	r0, [pc, #84]	; (8002144 <MX_ADC1_Init+0x94>)
 80020f0:	f001 fca6 	bl	8003a40 <HAL_ADC_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020fa:	f000 fb31 	bl	8002760 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020fe:	2307      	movs	r3, #7
 8002100:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002102:	2301      	movs	r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002106:	2307      	movs	r3, #7
 8002108:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4619      	mov	r1, r3
 800210e:	480d      	ldr	r0, [pc, #52]	; (8002144 <MX_ADC1_Init+0x94>)
 8002110:	f001 fe68 	bl	8003de4 <HAL_ADC_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800211a:	f000 fb21 	bl	8002760 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800211e:	2309      	movs	r3, #9
 8002120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002122:	2302      	movs	r3, #2
 8002124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <MX_ADC1_Init+0x94>)
 800212c:	f001 fe5a 	bl	8003de4 <HAL_ADC_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002136:	f000 fb13 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200002e4 	.word	0x200002e4
 8002148:	40012400 	.word	0x40012400

0800214c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <MX_CAN_Init+0x64>)
 8002152:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <MX_CAN_Init+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <MX_CAN_Init+0x64>)
 8002158:	2212      	movs	r2, #18
 800215a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <MX_CAN_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <MX_CAN_Init+0x64>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <MX_CAN_Init+0x64>)
 800216a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800216e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <MX_CAN_Init+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <MX_CAN_Init+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <MX_CAN_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <MX_CAN_Init+0x64>)
 8002184:	2200      	movs	r2, #0
 8002186:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <MX_CAN_Init+0x64>)
 800218a:	2200      	movs	r2, #0
 800218c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <MX_CAN_Init+0x64>)
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <MX_CAN_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800219a:	4805      	ldr	r0, [pc, #20]	; (80021b0 <MX_CAN_Init+0x64>)
 800219c:	f002 f8c8 	bl	8004330 <HAL_CAN_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80021a6:	f000 fadb 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000040c 	.word	0x2000040c
 80021b4:	40006400 	.word	0x40006400

080021b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_I2C2_Init+0x50>)
 80021be:	4a13      	ldr	r2, [pc, #76]	; (800220c <MX_I2C2_Init+0x54>)
 80021c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_I2C2_Init+0x50>)
 80021c4:	4a12      	ldr	r2, [pc, #72]	; (8002210 <MX_I2C2_Init+0x58>)
 80021c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_I2C2_Init+0x50>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_I2C2_Init+0x50>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_I2C2_Init+0x50>)
 80021d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MX_I2C2_Init+0x50>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_I2C2_Init+0x50>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <MX_I2C2_Init+0x50>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_I2C2_Init+0x50>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_I2C2_Init+0x50>)
 80021f6:	f003 fb73 	bl	80058e0 <HAL_I2C_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002200:	f000 faae 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000c60 	.word	0x20000c60
 800220c:	40005800 	.word	0x40005800
 8002210:	000186a0 	.word	0x000186a0

08002214 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_SPI1_Init+0x64>)
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <MX_SPI1_Init+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_SPI1_Init+0x64>)
 8002220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_SPI1_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_SPI1_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_SPI1_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_SPI1_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_SPI1_Init+0x64>)
 8002240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002244:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_SPI1_Init+0x64>)
 8002248:	2210      	movs	r2, #16
 800224a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <MX_SPI1_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_SPI1_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <MX_SPI1_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_SPI1_Init+0x64>)
 8002260:	220a      	movs	r2, #10
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_SPI1_Init+0x64>)
 8002266:	f006 fda3 	bl	8008db0 <HAL_SPI_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002270:	f000 fa76 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000e7c 	.word	0x20000e7c
 800227c:	40013000 	.word	0x40013000

08002280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800229e:	463b      	mov	r3, r7
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022ac:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <MX_TIM1_Init+0xe4>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022b2:	2247      	movs	r2, #71	; 0x47
 80022b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022be:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80022c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022d6:	4822      	ldr	r0, [pc, #136]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022d8:	f007 fa82 	bl	80097e0 <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80022e2:	f000 fa3d 	bl	8002760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022ec:	f107 0318 	add.w	r3, r7, #24
 80022f0:	4619      	mov	r1, r3
 80022f2:	481b      	ldr	r0, [pc, #108]	; (8002360 <MX_TIM1_Init+0xe0>)
 80022f4:	f007 fe10 	bl	8009f18 <HAL_TIM_ConfigClockSource>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80022fe:	f000 fa2f 	bl	8002760 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002302:	4817      	ldr	r0, [pc, #92]	; (8002360 <MX_TIM1_Init+0xe0>)
 8002304:	f007 fb0e 	bl	8009924 <HAL_TIM_IC_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800230e:	f000 fa27 	bl	8002760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	4619      	mov	r1, r3
 8002320:	480f      	ldr	r0, [pc, #60]	; (8002360 <MX_TIM1_Init+0xe0>)
 8002322:	f008 f915 	bl	800a550 <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800232c:	f000 fa18 	bl	8002760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002330:	2300      	movs	r3, #0
 8002332:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002334:	2301      	movs	r3, #1
 8002336:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800233c:	230f      	movs	r3, #15
 800233e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002340:	463b      	mov	r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_TIM1_Init+0xe0>)
 8002348:	f007 fd52 	bl	8009df0 <HAL_TIM_IC_ConfigChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002352:	f000 fa05 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	; 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000df8 	.word	0x20000df8
 8002364:	40012c00 	.word	0x40012c00

08002368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236e:	f107 0318 	add.w	r3, r7, #24
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002386:	463b      	mov	r3, r7
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <MX_TIM2_Init+0xdc>)
 8002394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002398:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <MX_TIM2_Init+0xdc>)
 800239c:	2247      	movs	r2, #71	; 0x47
 800239e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <MX_TIM2_Init+0xdc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <MX_TIM2_Init+0xdc>)
 80023a8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80023ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <MX_TIM2_Init+0xdc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <MX_TIM2_Init+0xdc>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023ba:	4822      	ldr	r0, [pc, #136]	; (8002444 <MX_TIM2_Init+0xdc>)
 80023bc:	f007 fa10 	bl	80097e0 <HAL_TIM_Base_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80023c6:	f000 f9cb 	bl	8002760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023d0:	f107 0318 	add.w	r3, r7, #24
 80023d4:	4619      	mov	r1, r3
 80023d6:	481b      	ldr	r0, [pc, #108]	; (8002444 <MX_TIM2_Init+0xdc>)
 80023d8:	f007 fd9e 	bl	8009f18 <HAL_TIM_ConfigClockSource>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80023e2:	f000 f9bd 	bl	8002760 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023e6:	4817      	ldr	r0, [pc, #92]	; (8002444 <MX_TIM2_Init+0xdc>)
 80023e8:	f007 fa9c 	bl	8009924 <HAL_TIM_IC_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80023f2:	f000 f9b5 	bl	8002760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	4619      	mov	r1, r3
 8002404:	480f      	ldr	r0, [pc, #60]	; (8002444 <MX_TIM2_Init+0xdc>)
 8002406:	f008 f8a3 	bl	800a550 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002410:	f000 f9a6 	bl	8002760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002414:	2300      	movs	r3, #0
 8002416:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002418:	2301      	movs	r3, #1
 800241a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002420:	230f      	movs	r3, #15
 8002422:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002424:	463b      	mov	r3, r7
 8002426:	2200      	movs	r2, #0
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <MX_TIM2_Init+0xdc>)
 800242c:	f007 fce0 	bl	8009df0 <HAL_TIM_IC_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002436:	f000 f993 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000ed4 	.word	0x20000ed4

08002448 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	463b      	mov	r3, r7
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <MX_TIM3_Init+0x94>)
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <MX_TIM3_Init+0x98>)
 8002468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <MX_TIM3_Init+0x94>)
 800246c:	2247      	movs	r2, #71	; 0x47
 800246e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <MX_TIM3_Init+0x94>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <MX_TIM3_Init+0x94>)
 8002478:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800247c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <MX_TIM3_Init+0x94>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <MX_TIM3_Init+0x94>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800248a:	4814      	ldr	r0, [pc, #80]	; (80024dc <MX_TIM3_Init+0x94>)
 800248c:	f007 f9a8 	bl	80097e0 <HAL_TIM_Base_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002496:	f000 f963 	bl	8002760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024a0:	f107 0308 	add.w	r3, r7, #8
 80024a4:	4619      	mov	r1, r3
 80024a6:	480d      	ldr	r0, [pc, #52]	; (80024dc <MX_TIM3_Init+0x94>)
 80024a8:	f007 fd36 	bl	8009f18 <HAL_TIM_ConfigClockSource>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80024b2:	f000 f955 	bl	8002760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024be:	463b      	mov	r3, r7
 80024c0:	4619      	mov	r1, r3
 80024c2:	4806      	ldr	r0, [pc, #24]	; (80024dc <MX_TIM3_Init+0x94>)
 80024c4:	f008 f844 	bl	800a550 <HAL_TIMEx_MasterConfigSynchronization>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80024ce:	f000 f947 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000cb4 	.word	0x20000cb4
 80024e0:	40000400 	.word	0x40000400

080024e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	463b      	mov	r3, r7
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <MX_TIM4_Init+0x94>)
 8002502:	4a1e      	ldr	r2, [pc, #120]	; (800257c <MX_TIM4_Init+0x98>)
 8002504:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <MX_TIM4_Init+0x94>)
 8002508:	2247      	movs	r2, #71	; 0x47
 800250a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <MX_TIM4_Init+0x94>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <MX_TIM4_Init+0x94>)
 8002514:	f242 720f 	movw	r2, #9999	; 0x270f
 8002518:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <MX_TIM4_Init+0x94>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <MX_TIM4_Init+0x94>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002526:	4814      	ldr	r0, [pc, #80]	; (8002578 <MX_TIM4_Init+0x94>)
 8002528:	f007 f95a 	bl	80097e0 <HAL_TIM_Base_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002532:	f000 f915 	bl	8002760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800253a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4619      	mov	r1, r3
 8002542:	480d      	ldr	r0, [pc, #52]	; (8002578 <MX_TIM4_Init+0x94>)
 8002544:	f007 fce8 	bl	8009f18 <HAL_TIM_ConfigClockSource>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800254e:	f000 f907 	bl	8002760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800255a:	463b      	mov	r3, r7
 800255c:	4619      	mov	r1, r3
 800255e:	4806      	ldr	r0, [pc, #24]	; (8002578 <MX_TIM4_Init+0x94>)
 8002560:	f007 fff6 	bl	800a550 <HAL_TIMEx_MasterConfigSynchronization>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800256a:	f000 f8f9 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000314 	.word	0x20000314
 800257c:	40000800 	.word	0x40000800

08002580 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <MX_USART1_UART_Init+0x50>)
 8002588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 800258c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 80025a6:	220c      	movs	r2, #12
 80025a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_USART1_UART_Init+0x4c>)
 80025b8:	f008 f83a 	bl	800a630 <HAL_UART_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025c2:	f000 f8cd 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000d70 	.word	0x20000d70
 80025d0:	40013800 	.word	0x40013800

080025d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <MX_USART2_UART_Init+0x50>)
 80025dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 80025e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 80025fa:	220c      	movs	r2, #12
 80025fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_USART2_UART_Init+0x4c>)
 800260c:	f008 f810 	bl	800a630 <HAL_UART_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002616:	f000 f8a3 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000450 	.word	0x20000450
 8002624:	40004400 	.word	0x40004400

08002628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <MX_DMA_Init+0x58>)
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	4a13      	ldr	r2, [pc, #76]	; (8002680 <MX_DMA_Init+0x58>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6153      	str	r3, [r2, #20]
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <MX_DMA_Init+0x58>)
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	200b      	movs	r0, #11
 800264c:	f002 fcb1 	bl	8004fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002650:	200b      	movs	r0, #11
 8002652:	f002 fcca 	bl	8004fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	200f      	movs	r0, #15
 800265c:	f002 fca9 	bl	8004fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002660:	200f      	movs	r0, #15
 8002662:	f002 fcc2 	bl	8004fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	2010      	movs	r0, #16
 800266c:	f002 fca1 	bl	8004fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002670:	2010      	movs	r0, #16
 8002672:	f002 fcba 	bl	8004fea <HAL_NVIC_EnableIRQ>

}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	f107 0310 	add.w	r3, r7, #16
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <MX_GPIO_Init+0xd0>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a2d      	ldr	r2, [pc, #180]	; (8002754 <MX_GPIO_Init+0xd0>)
 800269e:	f043 0310 	orr.w	r3, r3, #16
 80026a2:	6193      	str	r3, [r2, #24]
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b0:	4b28      	ldr	r3, [pc, #160]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026b6:	f043 0320 	orr.w	r3, r3, #32
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a21      	ldr	r2, [pc, #132]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	6193      	str	r3, [r2, #24]
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <MX_GPIO_Init+0xd0>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
 80026fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026fe:	4816      	ldr	r0, [pc, #88]	; (8002758 <MX_GPIO_Init+0xd4>)
 8002700:	f003 f8bc 	bl	800587c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800270a:	4814      	ldr	r0, [pc, #80]	; (800275c <MX_GPIO_Init+0xd8>)
 800270c:	f003 f8b6 	bl	800587c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8002710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2302      	movs	r3, #2
 8002720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4619      	mov	r1, r3
 8002728:	480b      	ldr	r0, [pc, #44]	; (8002758 <MX_GPIO_Init+0xd4>)
 800272a:	f002 ff23 	bl	8005574 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800272e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800273c:	2301      	movs	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	4619      	mov	r1, r3
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_GPIO_Init+0xd8>)
 8002748:	f002 ff14 	bl	8005574 <HAL_GPIO_Init>

}
 800274c:	bf00      	nop
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	40011000 	.word	0x40011000
 800275c:	40010800 	.word	0x40010800

08002760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002764:	b672      	cpsid	i
}
 8002766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002768:	e7fe      	b.n	8002768 <Error_Handler+0x8>
	...

0800276c <rot_Init>:

/*
 * 	Função de inicialização
 */
void rot_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	rot.constante = 0.6;			/* < Salva a constante para calculo da rotação do motor */
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <rot_Init+0x20>)
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <rot_Init+0x24>)
 8002774:	601a      	str	r2, [r3, #0]
	rot.htim = &htim1;				/* < Salva o ponteiro do Timer que será utilizado */
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <rot_Init+0x20>)
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <rot_Init+0x28>)
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
	rot.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <rot_Init+0x20>)
 800277e:	2200      	movs	r2, #0
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c

    indutivo_Init(&rot);			/* < Chama função de inicialização */
 8002782:	4802      	ldr	r0, [pc, #8]	; (800278c <rot_Init+0x20>)
 8002784:	f7ff fad6 	bl	8001d34 <indutivo_Init>
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000494 	.word	0x20000494
 8002790:	3f19999a 	.word	0x3f19999a
 8002794:	20000df8 	.word	0x20000df8

08002798 <rot_Reset>:

/*
 * 	Função de reset
 */
void rot_Reset(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	indutivo_reset(&rot);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <rot_Reset+0x10>)
 800279e:	f7ff fbab 	bl	8001ef8 <indutivo_reset>
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000494 	.word	0x20000494

080027ac <rot_Calc>:

/*
 * 	Função de calculo
 */
void rot_Calc(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	indutivo_calc(&rot);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <rot_Calc+0x10>)
 80027b2:	f7ff fb3d 	bl	8001e30 <indutivo_calc>
	//LDEBUG;
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000494 	.word	0x20000494

080027c0 <bufsize>:

/*
 * 	Função para calcular tamanho de um buffer
 */
int bufsize(char *buf)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 80027cc:	e002      	b.n	80027d4 <bufsize+0x14>
		i++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3301      	adds	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f6      	bne.n	80027ce <bufsize+0xe>
	return i;
 80027e0:	68fb      	ldr	r3, [r7, #12]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <bufclear>:

/*
 * 	Função para limpar um buffer
 */
void bufclear(SD_CARD_typedef *buf)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	for (int i=0; i<bufsize(buf->buffer); i++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e009      	b.n	800280e <bufclear+0x22>
		buf->buffer[i] = '\0';
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<bufsize(buf->buffer); i++)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3301      	adds	r3, #1
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ffd3 	bl	80027c0 <bufsize>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4293      	cmp	r3, r2
 8002820:	dbeb      	blt.n	80027fa <bufclear+0xe>
}
 8002822:	bf00      	nop
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <SD_Init>:

/*
 * 	Inicialização do cartão sd
 */
FRESULT SD_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 8002830:	2200      	movs	r2, #0
 8002832:	4926      	ldr	r1, [pc, #152]	; (80028cc <SD_Init+0xa0>)
 8002834:	4826      	ldr	r0, [pc, #152]	; (80028d0 <SD_Init+0xa4>)
 8002836:	f00a ff9f 	bl	800d778 <f_mount>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <SD_Init+0xa8>)
 8002840:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <SD_Init+0xa8>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <SD_Init+0x24>
		return fresult;
 800284a:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <SD_Init+0xa8>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	e03a      	b.n	80028c6 <SD_Init+0x9a>

	fresult = SD_loadSettings();
 8002850:	f000 f846 	bl	80028e0 <SD_loadSettings>
 8002854:	4603      	mov	r3, r0
 8002856:	461a      	mov	r2, r3
 8002858:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <SD_Init+0xa8>)
 800285a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <SD_Init+0xa8>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <SD_Init+0x3e>
		return fresult;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <SD_Init+0xa8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	e02d      	b.n	80028c6 <SD_Init+0x9a>


	fresult = SD_createFile();
 800286a:	f000 f969 	bl	8002b40 <SD_createFile>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <SD_Init+0xa8>)
 8002874:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <SD_Init+0xa8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <SD_Init+0x58>
		return fresult;
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <SD_Init+0xa8>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	e020      	b.n	80028c6 <SD_Init+0x9a>

	bufclear(&sdCard);
 8002884:	4812      	ldr	r0, [pc, #72]	; (80028d0 <SD_Init+0xa4>)
 8002886:	f7ff ffb1 	bl	80027ec <bufclear>

	LDEBUG;
 800288a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800288e:	4812      	ldr	r0, [pc, #72]	; (80028d8 <SD_Init+0xac>)
 8002890:	f003 f80c 	bl	80058ac <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <SD_Init+0xa4>)
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	sdCard.blen = 0;
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <SD_Init+0xa4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <SD_Init+0xa4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <SD_Init+0xa4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
	sdCard.timer = 0;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <SD_Init+0xa4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736

	HAL_TIM_Base_Start_IT(&htim4);
 80028bc:	4807      	ldr	r0, [pc, #28]	; (80028dc <SD_Init+0xb0>)
 80028be:	f006 ffdf 	bl	8009880 <HAL_TIM_Base_Start_IT>

	return fresult;
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SD_Init+0xa8>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	0800f094 	.word	0x0800f094
 80028d0:	200004c4 	.word	0x200004c4
 80028d4:	20000e78 	.word	0x20000e78
 80028d8:	40011000 	.word	0x40011000
 80028dc:	20000314 	.word	0x20000314

080028e0 <SD_loadSettings>:

/*
 * 	Função para ler o settings.ini
 */
FRESULT SD_loadSettings(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 80028e4:	4912      	ldr	r1, [pc, #72]	; (8002930 <SD_loadSettings+0x50>)
 80028e6:	4813      	ldr	r0, [pc, #76]	; (8002934 <SD_loadSettings+0x54>)
 80028e8:	f00b ff8e 	bl	800e808 <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 80028ec:	2201      	movs	r2, #1
 80028ee:	4911      	ldr	r1, [pc, #68]	; (8002934 <SD_loadSettings+0x54>)
 80028f0:	4811      	ldr	r0, [pc, #68]	; (8002938 <SD_loadSettings+0x58>)
 80028f2:	f00a ff89 	bl	800d808 <f_open>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <SD_loadSettings+0x5c>)
 80028fc:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <SD_loadSettings+0x5c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d106      	bne.n	8002914 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 8002906:	f000 f81b 	bl	8002940 <SD_createSettings>
 800290a:	4603      	mov	r3, r0
 800290c:	461a      	mov	r2, r3
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <SD_loadSettings+0x5c>)
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e009      	b.n	8002928 <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <SD_loadSettings+0x5c>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 800291c:	f000 f866 	bl	80029ec <SD_searchSettings>
 8002920:	4603      	mov	r3, r0
 8002922:	461a      	mov	r2, r3
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SD_loadSettings+0x5c>)
 8002926:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <SD_loadSettings+0x5c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	0800f098 	.word	0x0800f098
 8002934:	20000be8 	.word	0x20000be8
 8002938:	200008f4 	.word	0x200008f4
 800293c:	20000e78 	.word	0x20000e78

08002940 <SD_createSettings>:

/*
 * 	Função para criar o settings.ini quando não disponivel
 */
FRESULT SD_createSettings(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 8002946:	4822      	ldr	r0, [pc, #136]	; (80029d0 <SD_createSettings+0x90>)
 8002948:	f00b fc69 	bl	800e21e <f_close>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <SD_createSettings+0x94>)
 8002952:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 8002954:	2212      	movs	r2, #18
 8002956:	4920      	ldr	r1, [pc, #128]	; (80029d8 <SD_createSettings+0x98>)
 8002958:	481d      	ldr	r0, [pc, #116]	; (80029d0 <SD_createSettings+0x90>)
 800295a:	f00a ff55 	bl	800d808 <f_open>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <SD_createSettings+0x94>)
 8002964:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <SD_createSettings+0x94>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <SD_createSettings+0x34>
		return fresult;
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <SD_createSettings+0x94>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	e029      	b.n	80029c8 <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 8002974:	4919      	ldr	r1, [pc, #100]	; (80029dc <SD_createSettings+0x9c>)
 8002976:	481a      	ldr	r0, [pc, #104]	; (80029e0 <SD_createSettings+0xa0>)
 8002978:	f00b ff46 	bl	800e808 <siprintf>
 800297c:	6078      	str	r0, [r7, #4]
			";Mode 0 para teste de AV do 19 (Padrão)\n"
			";Mode 1 para Teste de Dinamometro\n"
			";Mode 2 testes com o MPU6050 no 20\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <SD_createSettings+0xa4>)
 8002982:	4917      	ldr	r1, [pc, #92]	; (80029e0 <SD_createSettings+0xa0>)
 8002984:	4812      	ldr	r0, [pc, #72]	; (80029d0 <SD_createSettings+0x90>)
 8002986:	f00b fa14 	bl	800ddb2 <f_write>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <SD_createSettings+0x94>)
 8002990:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <SD_createSettings+0x94>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <SD_createSettings+0x60>
		return fresult;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <SD_createSettings+0x94>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	e013      	b.n	80029c8 <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 80029a0:	480b      	ldr	r0, [pc, #44]	; (80029d0 <SD_createSettings+0x90>)
 80029a2:	f00b fc3c 	bl	800e21e <f_close>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <SD_createSettings+0x94>)
 80029ac:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <SD_createSettings+0x94>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <SD_createSettings+0x7c>
		return fresult;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <SD_createSettings+0x94>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	e005      	b.n	80029c8 <SD_createSettings+0x88>

	sdCard.mode = 0;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <SD_createSettings+0xa8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754

	return fresult;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <SD_createSettings+0x94>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200008f4 	.word	0x200008f4
 80029d4:	20000e78 	.word	0x20000e78
 80029d8:	20000be8 	.word	0x20000be8
 80029dc:	0800f0a8 	.word	0x0800f0a8
 80029e0:	20000968 	.word	0x20000968
 80029e4:	20000c04 	.word	0x20000c04
 80029e8:	200004c4 	.word	0x200004c4

080029ec <SD_searchSettings>:

/*
 * 	Função que lê o conteudo do settings.ini
 */
FRESULT SD_searchSettings(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
	int index = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 80029fa:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <SD_searchSettings+0x140>)
 80029fc:	f240 227f 	movw	r2, #639	; 0x27f
 8002a00:	494b      	ldr	r1, [pc, #300]	; (8002b30 <SD_searchSettings+0x144>)
 8002a02:	484c      	ldr	r0, [pc, #304]	; (8002b34 <SD_searchSettings+0x148>)
 8002a04:	f00b f880 	bl	800db08 <f_read>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	; (8002b38 <SD_searchSettings+0x14c>)
 8002a0e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002a10:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <SD_searchSettings+0x14c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <SD_searchSettings+0x38>
		return fresult;
 8002a18:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <SD_searchSettings+0x14c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	e082      	b.n	8002b24 <SD_searchSettings+0x138>

	for (index; sdCard.longBuffer[index] != '='; index++);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3301      	adds	r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	4a45      	ldr	r2, [pc, #276]	; (8002b3c <SD_searchSettings+0x150>)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b3d      	cmp	r3, #61	; 0x3d
 8002a32:	d1f4      	bne.n	8002a1e <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f240 227d 	movw	r2, #637	; 0x27d
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	dd0b      	ble.n	8002a56 <SD_searchSettings+0x6a>
	{
		fresult = SD_createSettings();
 8002a3e:	f7ff ff7f 	bl	8002940 <SD_createSettings>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <SD_searchSettings+0x14c>)
 8002a48:	701a      	strb	r2, [r3, #0]
		return fresult;
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <SD_searchSettings+0x14c>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	e069      	b.n	8002b24 <SD_searchSettings+0x138>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	3301      	adds	r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	4a37      	ldr	r2, [pc, #220]	; (8002b3c <SD_searchSettings+0x150>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d908      	bls.n	8002a7a <SD_searchSettings+0x8e>
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	4a33      	ldr	r2, [pc, #204]	; (8002b3c <SD_searchSettings+0x150>)
 8002a70:	4413      	add	r3, r2
 8002a72:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 8002a76:	2b5a      	cmp	r3, #90	; 0x5a
 8002a78:	d9ea      	bls.n	8002a50 <SD_searchSettings+0x64>
	deindex--;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	e012      	b.n	8002aac <SD_searchSettings+0xc0>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <SD_searchSettings+0x150>)
 8002a92:	4413      	add	r3, r2
 8002a94:	f893 14a4 	ldrb.w	r1, [r3, #1188]	; 0x4a4
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <SD_searchSettings+0x150>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8002aa2:	460a      	mov	r2, r1
 8002aa4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dde7      	ble.n	8002a86 <SD_searchSettings+0x9a>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <SD_searchSettings+0x150>)
 8002ab8:	f893 3744 	ldrb.w	r3, [r3, #1860]	; 0x744
 8002abc:	2b4d      	cmp	r3, #77	; 0x4d
 8002abe:	d129      	bne.n	8002b14 <SD_searchSettings+0x128>
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <SD_searchSettings+0x150>)
 8002ac2:	f893 3745 	ldrb.w	r3, [r3, #1861]	; 0x745
 8002ac6:	2b4f      	cmp	r3, #79	; 0x4f
 8002ac8:	d124      	bne.n	8002b14 <SD_searchSettings+0x128>
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <SD_searchSettings+0x150>)
 8002acc:	f893 3746 	ldrb.w	r3, [r3, #1862]	; 0x746
 8002ad0:	2b44      	cmp	r3, #68	; 0x44
 8002ad2:	d11f      	bne.n	8002b14 <SD_searchSettings+0x128>
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <SD_searchSettings+0x150>)
 8002ad6:	f893 3747 	ldrb.w	r3, [r3, #1863]	; 0x747
 8002ada:	2b45      	cmp	r3, #69	; 0x45
 8002adc:	d11a      	bne.n	8002b14 <SD_searchSettings+0x128>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <SD_searchSettings+0x150>)
 8002ae0:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8002ae6:	d90e      	bls.n	8002b06 <SD_searchSettings+0x11a>
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <SD_searchSettings+0x150>)
 8002aea:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002aee:	2b39      	cmp	r3, #57	; 0x39
 8002af0:	d809      	bhi.n	8002b06 <SD_searchSettings+0x11a>
			sdCard.mode = sdCard.setting[5] - 48;
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <SD_searchSettings+0x150>)
 8002af4:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b30      	subs	r3, #48	; 0x30
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <SD_searchSettings+0x150>)
 8002b00:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002b04:	e00c      	b.n	8002b20 <SD_searchSettings+0x134>
		else
			fresult = SD_createSettings();
 8002b06:	f7ff ff1b 	bl	8002940 <SD_createSettings>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <SD_searchSettings+0x14c>)
 8002b10:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002b12:	e005      	b.n	8002b20 <SD_searchSettings+0x134>
	}
	else
		fresult = SD_createSettings();
 8002b14:	f7ff ff14 	bl	8002940 <SD_createSettings>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <SD_searchSettings+0x14c>)
 8002b1e:	701a      	strb	r2, [r3, #0]

	return fresult;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SD_searchSettings+0x14c>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000c00 	.word	0x20000c00
 8002b30:	20000968 	.word	0x20000968
 8002b34:	200008f4 	.word	0x200008f4
 8002b38:	20000e78 	.word	0x20000e78
 8002b3c:	200004c4 	.word	0x200004c4

08002b40 <SD_createFile>:

/*
 * 	Função que cria o fileXXX.txt
 */
FRESULT SD_createFile(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4921      	ldr	r1, [pc, #132]	; (8002bd4 <SD_createFile+0x94>)
 8002b4e:	4822      	ldr	r0, [pc, #136]	; (8002bd8 <SD_createFile+0x98>)
 8002b50:	f00b fe5a 	bl	800e808 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 8002b54:	2206      	movs	r2, #6
 8002b56:	4920      	ldr	r1, [pc, #128]	; (8002bd8 <SD_createFile+0x98>)
 8002b58:	4820      	ldr	r0, [pc, #128]	; (8002bdc <SD_createFile+0x9c>)
 8002b5a:	f00a fe55 	bl	800d808 <f_open>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <SD_createFile+0xa0>)
 8002b64:	701a      	strb	r2, [r3, #0]
		filnum++;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8002b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b70:	481c      	ldr	r0, [pc, #112]	; (8002be4 <SD_createFile+0xa4>)
 8002b72:	f002 fe9b 	bl	80058ac <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <SD_createFile+0xa0>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d0e5      	beq.n	8002b4a <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 8002b7e:	491a      	ldr	r1, [pc, #104]	; (8002be8 <SD_createFile+0xa8>)
 8002b80:	481a      	ldr	r0, [pc, #104]	; (8002bec <SD_createFile+0xac>)
 8002b82:	f00b fe41 	bl	800e808 <siprintf>
 8002b86:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <SD_createFile+0xb0>)
 8002b8c:	4917      	ldr	r1, [pc, #92]	; (8002bec <SD_createFile+0xac>)
 8002b8e:	4813      	ldr	r0, [pc, #76]	; (8002bdc <SD_createFile+0x9c>)
 8002b90:	f00b f90f 	bl	800ddb2 <f_write>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <SD_createFile+0xa0>)
 8002b9a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <SD_createFile+0xa0>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <SD_createFile+0x6a>
		return fresult;
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <SD_createFile+0xa0>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	e00f      	b.n	8002bca <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 8002baa:	480c      	ldr	r0, [pc, #48]	; (8002bdc <SD_createFile+0x9c>)
 8002bac:	f00b fb37 	bl	800e21e <f_close>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <SD_createFile+0xa0>)
 8002bb6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <SD_createFile+0xa0>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <SD_createFile+0x86>
		return fresult;
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <SD_createFile+0xa0>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	e001      	b.n	8002bca <SD_createFile+0x8a>

	return fresult;
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <SD_createFile+0xa0>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	0800f148 	.word	0x0800f148
 8002bd8:	20000be8 	.word	0x20000be8
 8002bdc:	200008f4 	.word	0x200008f4
 8002be0:	20000e78 	.word	0x20000e78
 8002be4:	40011000 	.word	0x40011000
 8002be8:	0800f158 	.word	0x0800f158
 8002bec:	20000928 	.word	0x20000928
 8002bf0:	20000c04 	.word	0x20000c04

08002bf4 <SD_write>:

/*
 * 	Função que escreve em um arquivo
 */
FRESULT SD_write(int bsize, char wBuf[bsize])
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_WRITE);
 8002bfe:	2202      	movs	r2, #2
 8002c00:	4925      	ldr	r1, [pc, #148]	; (8002c98 <SD_write+0xa4>)
 8002c02:	4826      	ldr	r0, [pc, #152]	; (8002c9c <SD_write+0xa8>)
 8002c04:	f00a fe00 	bl	800d808 <f_open>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <SD_write+0xac>)
 8002c0e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <SD_write+0xac>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <SD_write+0x2a>
		return fresult;
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <SD_write+0xac>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	e037      	b.n	8002c8e <SD_write+0x9a>

	fresult = f_lseek(&sdCard.fil, sdCard.fil.fsize);
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <SD_write+0xb0>)
 8002c20:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002c24:	4619      	mov	r1, r3
 8002c26:	481d      	ldr	r0, [pc, #116]	; (8002c9c <SD_write+0xa8>)
 8002c28:	f00b fb1f 	bl	800e26a <f_lseek>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <SD_write+0xac>)
 8002c32:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <SD_write+0xac>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <SD_write+0x4e>
		return fresult;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <SD_write+0xac>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	e025      	b.n	8002c8e <SD_write+0x9a>

	fresult = f_write(&sdCard.fil, wBuf, bsize, &sdCard.bw);
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <SD_write+0xb4>)
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	4814      	ldr	r0, [pc, #80]	; (8002c9c <SD_write+0xa8>)
 8002c4a:	f00b f8b2 	bl	800ddb2 <f_write>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <SD_write+0xac>)
 8002c54:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <SD_write+0xac>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <SD_write+0x70>
		return fresult;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <SD_write+0xac>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	e014      	b.n	8002c8e <SD_write+0x9a>

	fresult = f_close(&sdCard.fil);
 8002c64:	480d      	ldr	r0, [pc, #52]	; (8002c9c <SD_write+0xa8>)
 8002c66:	f00b fada 	bl	800e21e <f_close>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <SD_write+0xac>)
 8002c70:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <SD_write+0xac>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <SD_write+0x8c>
		return fresult;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <SD_write+0xac>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	e006      	b.n	8002c8e <SD_write+0x9a>

	LDEBUG;
 8002c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c84:	4809      	ldr	r0, [pc, #36]	; (8002cac <SD_write+0xb8>)
 8002c86:	f002 fe11 	bl	80058ac <HAL_GPIO_TogglePin>

	return fresult;
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SD_write+0xac>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000be8 	.word	0x20000be8
 8002c9c:	200008f4 	.word	0x200008f4
 8002ca0:	20000e78 	.word	0x20000e78
 8002ca4:	200004c4 	.word	0x200004c4
 8002ca8:	20000c04 	.word	0x20000c04
 8002cac:	40011000 	.word	0x40011000

08002cb0 <SD_logger>:

/*
 * 	Função de datalogger
 */
FRESULT SD_logger(void)
{
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	b08f      	sub	sp, #60	; 0x3c
 8002cb4:	af0a      	add	r7, sp, #40	; 0x28
	if (sdCard.counter < 9999)
 8002cb6:	4b84      	ldr	r3, [pc, #528]	; (8002ec8 <SD_logger+0x218>)
 8002cb8:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8002cbc:	f242 720e 	movw	r2, #9998	; 0x270e
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d808      	bhi.n	8002cd6 <SD_logger+0x26>
		sdCard.counter++;
 8002cc4:	4b80      	ldr	r3, [pc, #512]	; (8002ec8 <SD_logger+0x218>)
 8002cc6:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8002cca:	3301      	adds	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	4b7e      	ldr	r3, [pc, #504]	; (8002ec8 <SD_logger+0x218>)
 8002cd0:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
 8002cd4:	e003      	b.n	8002cde <SD_logger+0x2e>
	else
		sdCard.counter = 0;
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <SD_logger+0x218>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734

	if (sdCard.mode == 0)
 8002cde:	4b7a      	ldr	r3, [pc, #488]	; (8002ec8 <SD_logger+0x218>)
 8002ce0:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d110      	bne.n	8002d0a <SD_logger+0x5a>
			sdCard.blen = sprintf(sdCard.buffer,
 8002ce8:	4b78      	ldr	r3, [pc, #480]	; (8002ecc <SD_logger+0x21c>)
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <SD_logger+0x220>)
 8002cee:	685b      	ldr	r3, [r3, #4]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, vel.value,
					sdCard.counter);
 8002cf0:	4975      	ldr	r1, [pc, #468]	; (8002ec8 <SD_logger+0x218>)
 8002cf2:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002cf6:	9100      	str	r1, [sp, #0]
 8002cf8:	4976      	ldr	r1, [pc, #472]	; (8002ed4 <SD_logger+0x224>)
 8002cfa:	4877      	ldr	r0, [pc, #476]	; (8002ed8 <SD_logger+0x228>)
 8002cfc:	f00b fd84 	bl	800e808 <siprintf>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4a71      	ldr	r2, [pc, #452]	; (8002ec8 <SD_logger+0x218>)
 8002d04:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002d08:	e092      	b.n	8002e30 <SD_logger+0x180>

	else if (sdCard.mode == 1)
 8002d0a:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <SD_logger+0x218>)
 8002d0c:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d110      	bne.n	8002d36 <SD_logger+0x86>
			sdCard.blen = sprintf(sdCard.buffer,
 8002d14:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <SD_logger+0x21c>)
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	4b70      	ldr	r3, [pc, #448]	; (8002edc <SD_logger+0x22c>)
 8002d1a:	695b      	ldr	r3, [r3, #20]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, dina.force,
					sdCard.counter);
 8002d1c:	496a      	ldr	r1, [pc, #424]	; (8002ec8 <SD_logger+0x218>)
 8002d1e:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002d22:	9100      	str	r1, [sp, #0]
 8002d24:	496b      	ldr	r1, [pc, #428]	; (8002ed4 <SD_logger+0x224>)
 8002d26:	486c      	ldr	r0, [pc, #432]	; (8002ed8 <SD_logger+0x228>)
 8002d28:	f00b fd6e 	bl	800e808 <siprintf>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4a66      	ldr	r2, [pc, #408]	; (8002ec8 <SD_logger+0x218>)
 8002d30:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002d34:	e07c      	b.n	8002e30 <SD_logger+0x180>

	else if (sdCard.mode == 2)
 8002d36:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <SD_logger+0x218>)
 8002d38:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d156      	bne.n	8002dee <SD_logger+0x13e>
					"%05d%05d%05d"
					"%05d%05d%05d"
					"%04d%04d"
					"%04d"
					"\n",
					canBus.rx.rpm, canBus.rx.vel,
 8002d40:	4b67      	ldr	r3, [pc, #412]	; (8002ee0 <SD_logger+0x230>)
 8002d42:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			sdCard.blen = sprintf(sdCard.buffer,
 8002d46:	469c      	mov	ip, r3
					canBus.rx.rpm, canBus.rx.vel,
 8002d48:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <SD_logger+0x230>)
 8002d4a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			sdCard.blen = sprintf(sdCard.buffer,
 8002d4e:	469e      	mov	lr, r3
					((uint16_t)(aceGir.accel.X_RAW+32768)),
 8002d50:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <SD_logger+0x234>)
 8002d52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d5c:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002d5e:	461a      	mov	r2, r3
					((uint16_t)(aceGir.accel.Y_RAW+32768)),
 8002d60:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <SD_logger+0x234>)
 8002d62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d6c:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002d6e:	4619      	mov	r1, r3
					((uint16_t)(aceGir.accel.Z_RAW+32768)),
 8002d70:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <SD_logger+0x234>)
 8002d72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d7c:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002d7e:	4618      	mov	r0, r3
					((uint16_t)(aceGir.gyro.X_RAW+32768)),
 8002d80:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <SD_logger+0x234>)
 8002d82:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d8c:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002d8e:	461c      	mov	r4, r3
					((uint16_t)(aceGir.gyro.Y_RAW+32768)),
 8002d90:	4b54      	ldr	r3, [pc, #336]	; (8002ee4 <SD_logger+0x234>)
 8002d92:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d9c:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002d9e:	461d      	mov	r5, r3
					((uint16_t)(aceGir.gyro.Z_RAW+32768)),
 8002da0:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <SD_logger+0x234>)
 8002da2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002dac:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002dae:	461e      	mov	r6, r3
					analog.buffer[0], analog.buffer[1],
 8002db0:	4b4d      	ldr	r3, [pc, #308]	; (8002ee8 <SD_logger+0x238>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
			sdCard.blen = sprintf(sdCard.buffer,
 8002db4:	607b      	str	r3, [r7, #4]
					analog.buffer[0], analog.buffer[1],
 8002db6:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <SD_logger+0x238>)
 8002db8:	885b      	ldrh	r3, [r3, #2]
			sdCard.blen = sprintf(sdCard.buffer,
 8002dba:	603b      	str	r3, [r7, #0]
					sdCard.counter);
 8002dbc:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <SD_logger+0x218>)
 8002dbe:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002dc2:	9308      	str	r3, [sp, #32]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	9307      	str	r3, [sp, #28]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	9306      	str	r3, [sp, #24]
 8002dcc:	9605      	str	r6, [sp, #20]
 8002dce:	9504      	str	r5, [sp, #16]
 8002dd0:	9403      	str	r4, [sp, #12]
 8002dd2:	9002      	str	r0, [sp, #8]
 8002dd4:	9101      	str	r1, [sp, #4]
 8002dd6:	9200      	str	r2, [sp, #0]
 8002dd8:	4673      	mov	r3, lr
 8002dda:	4662      	mov	r2, ip
 8002ddc:	4943      	ldr	r1, [pc, #268]	; (8002eec <SD_logger+0x23c>)
 8002dde:	483e      	ldr	r0, [pc, #248]	; (8002ed8 <SD_logger+0x228>)
 8002de0:	f00b fd12 	bl	800e808 <siprintf>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <SD_logger+0x218>)
 8002de8:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002dec:	e020      	b.n	8002e30 <SD_logger+0x180>

	else if (sdCard.mode == 3)
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <SD_logger+0x218>)
 8002df0:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d11b      	bne.n	8002e30 <SD_logger+0x180>
			sdCard.blen = sprintf(sdCard.buffer,
					"%04d%04d"
					"%04d%04d"
					"%04d"
					"\n",
					canBus.rx.rpm, canBus.rx.vel,
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <SD_logger+0x230>)
 8002dfa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			sdCard.blen = sprintf(sdCard.buffer,
 8002dfe:	4618      	mov	r0, r3
					canBus.rx.rpm, canBus.rx.vel,
 8002e00:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <SD_logger+0x230>)
 8002e02:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			sdCard.blen = sprintf(sdCard.buffer,
 8002e06:	461c      	mov	r4, r3
 8002e08:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <SD_logger+0x240>)
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4a38      	ldr	r2, [pc, #224]	; (8002ef0 <SD_logger+0x240>)
 8002e0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
					traction.cell1.force, traction.cell2.force,
					sdCard.counter);
 8002e10:	492d      	ldr	r1, [pc, #180]	; (8002ec8 <SD_logger+0x218>)
 8002e12:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002e16:	9102      	str	r1, [sp, #8]
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4623      	mov	r3, r4
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4934      	ldr	r1, [pc, #208]	; (8002ef4 <SD_logger+0x244>)
 8002e22:	482d      	ldr	r0, [pc, #180]	; (8002ed8 <SD_logger+0x228>)
 8002e24:	f00b fcf0 	bl	800e808 <siprintf>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <SD_logger+0x218>)
 8002e2c:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

	for (int i = 0; i < sdCard.blen; i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e012      	b.n	8002e5c <SD_logger+0x1ac>
		sdCard.longBuffer[i+sdCard.blenLong] = sdCard.buffer[i];
 8002e36:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <SD_logger+0x218>)
 8002e38:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4921      	ldr	r1, [pc, #132]	; (8002ec8 <SD_logger+0x218>)
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	440a      	add	r2, r1
 8002e46:	f202 4264 	addw	r2, r2, #1124	; 0x464
 8002e4a:	7811      	ldrb	r1, [r2, #0]
 8002e4c:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <SD_logger+0x218>)
 8002e4e:	4413      	add	r3, r2
 8002e50:	460a      	mov	r2, r1
 8002e52:	f883 24a4 	strb.w	r2, [r3, #1188]	; 0x4a4
	for (int i = 0; i < sdCard.blen; i++)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <SD_logger+0x218>)
 8002e5e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	dbe6      	blt.n	8002e36 <SD_logger+0x186>
	sdCard.longCounter++;
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <SD_logger+0x218>)
 8002e6a:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8002e6e:	3301      	adds	r3, #1
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <SD_logger+0x218>)
 8002e74:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	sdCard.blenLong += sdCard.blen;
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <SD_logger+0x218>)
 8002e7a:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <SD_logger+0x218>)
 8002e80:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002e84:	4413      	add	r3, r2
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <SD_logger+0x218>)
 8002e88:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	if (sdCard.longCounter >= SD_BUFFSIZE_LONG)
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <SD_logger+0x218>)
 8002e8e:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	d912      	bls.n	8002ebc <SD_logger+0x20c>
	{
		fresult = SD_write(sdCard.blenLong, sdCard.longBuffer);
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <SD_logger+0x218>)
 8002e98:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <SD_logger+0x248>)
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fea8 	bl	8002bf4 <SD_write>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <SD_logger+0x24c>)
 8002eaa:	701a      	strb	r2, [r3, #0]
		sdCard.longCounter = 0;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <SD_logger+0x218>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
		sdCard.blenLong = 0;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SD_logger+0x218>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	}

	//LDEBUG;

	return fresult;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <SD_logger+0x24c>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec8:	200004c4 	.word	0x200004c4
 8002ecc:	20000494 	.word	0x20000494
 8002ed0:	20000cfc 	.word	0x20000cfc
 8002ed4:	0800f15c 	.word	0x0800f15c
 8002ed8:	20000928 	.word	0x20000928
 8002edc:	20000434 	.word	0x20000434
 8002ee0:	20000388 	.word	0x20000388
 8002ee4:	2000035c 	.word	0x2000035c
 8002ee8:	200002e0 	.word	0x200002e0
 8002eec:	0800f16c 	.word	0x0800f16c
 8002ef0:	20000e40 	.word	0x20000e40
 8002ef4:	0800f19c 	.word	0x0800f19c
 8002ef8:	20000968 	.word	0x20000968
 8002efc:	20000e78 	.word	0x20000e78

08002f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_MspInit+0x5c>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_MspInit+0x5c>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6193      	str	r3, [r2, #24]
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_MspInit+0x5c>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_MspInit+0x5c>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <HAL_MspInit+0x5c>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	61d3      	str	r3, [r2, #28]
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_MspInit+0x5c>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_MspInit+0x60>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <HAL_MspInit+0x60>)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010000 	.word	0x40010000

08002f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0318 	add.w	r3, r7, #24
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a33      	ldr	r2, [pc, #204]	; (800304c <HAL_ADC_MspInit+0xe8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d15f      	bne.n	8003044 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a31      	ldr	r2, [pc, #196]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b29      	ldr	r3, [pc, #164]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb4:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a25      	ldr	r2, [pc, #148]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_ADC_MspInit+0xec>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd4:	f107 0318 	add.w	r3, r7, #24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	481e      	ldr	r0, [pc, #120]	; (8003054 <HAL_ADC_MspInit+0xf0>)
 8002fdc:	f002 faca 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe8:	f107 0318 	add.w	r3, r7, #24
 8002fec:	4619      	mov	r1, r3
 8002fee:	481a      	ldr	r0, [pc, #104]	; (8003058 <HAL_ADC_MspInit+0xf4>)
 8002ff0:	f002 fac0 	bl	8005574 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_ADC_MspInit+0xf8>)
 8002ff6:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <HAL_ADC_MspInit+0xfc>)
 8002ff8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_ADC_MspInit+0xf8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003000:	4b16      	ldr	r3, [pc, #88]	; (800305c <HAL_ADC_MspInit+0xf8>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_ADC_MspInit+0xf8>)
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_ADC_MspInit+0xf8>)
 800300e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003012:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_ADC_MspInit+0xf8>)
 8003016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800301a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_ADC_MspInit+0xf8>)
 800301e:	2220      	movs	r2, #32
 8003020:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_ADC_MspInit+0xf8>)
 8003024:	2200      	movs	r2, #0
 8003026:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003028:	480c      	ldr	r0, [pc, #48]	; (800305c <HAL_ADC_MspInit+0xf8>)
 800302a:	f001 fff9 	bl	8005020 <HAL_DMA_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8003034:	f7ff fb94 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a08      	ldr	r2, [pc, #32]	; (800305c <HAL_ADC_MspInit+0xf8>)
 800303c:	621a      	str	r2, [r3, #32]
 800303e:	4a07      	ldr	r2, [pc, #28]	; (800305c <HAL_ADC_MspInit+0xf8>)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003044:	bf00      	nop
 8003046:	3728      	adds	r7, #40	; 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40012400 	.word	0x40012400
 8003050:	40021000 	.word	0x40021000
 8003054:	40010800 	.word	0x40010800
 8003058:	40010c00 	.word	0x40010c00
 800305c:	20000db4 	.word	0x20000db4
 8003060:	40020008 	.word	0x40020008

08003064 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 0310 	add.w	r3, r7, #16
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_CAN_MspInit+0x9c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d139      	bne.n	80030f8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003084:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <HAL_CAN_MspInit+0xa0>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <HAL_CAN_MspInit+0xa0>)
 800308a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308e:	61d3      	str	r3, [r2, #28]
 8003090:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <HAL_CAN_MspInit+0xa0>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_CAN_MspInit+0xa0>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	4a18      	ldr	r2, [pc, #96]	; (8003104 <HAL_CAN_MspInit+0xa0>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6193      	str	r3, [r2, #24]
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_CAN_MspInit+0xa0>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	4619      	mov	r1, r3
 80030c8:	480f      	ldr	r0, [pc, #60]	; (8003108 <HAL_CAN_MspInit+0xa4>)
 80030ca:	f002 fa53 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d8:	2303      	movs	r3, #3
 80030da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030dc:	f107 0310 	add.w	r3, r7, #16
 80030e0:	4619      	mov	r1, r3
 80030e2:	4809      	ldr	r0, [pc, #36]	; (8003108 <HAL_CAN_MspInit+0xa4>)
 80030e4:	f002 fa46 	bl	8005574 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2100      	movs	r1, #0
 80030ec:	2014      	movs	r0, #20
 80030ee:	f001 ff60 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80030f2:	2014      	movs	r0, #20
 80030f4:	f001 ff79 	bl	8004fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80030f8:	bf00      	nop
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40006400 	.word	0x40006400
 8003104:	40021000 	.word	0x40021000
 8003108:	40010800 	.word	0x40010800

0800310c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_I2C_MspInit+0x94>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d134      	bne.n	8003196 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <HAL_I2C_MspInit+0x98>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <HAL_I2C_MspInit+0x98>)
 8003132:	f043 0308 	orr.w	r3, r3, #8
 8003136:	6193      	str	r3, [r2, #24]
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_I2C_MspInit+0x98>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003144:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003148:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800314a:	2312      	movs	r3, #18
 800314c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003152:	f107 0310 	add.w	r3, r7, #16
 8003156:	4619      	mov	r1, r3
 8003158:	4813      	ldr	r0, [pc, #76]	; (80031a8 <HAL_I2C_MspInit+0x9c>)
 800315a:	f002 fa0b 	bl	8005574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_I2C_MspInit+0x98>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <HAL_I2C_MspInit+0x98>)
 8003164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003168:	61d3      	str	r3, [r2, #28]
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <HAL_I2C_MspInit+0x98>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 15, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	210f      	movs	r1, #15
 800317a:	2021      	movs	r0, #33	; 0x21
 800317c:	f001 ff19 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003180:	2021      	movs	r0, #33	; 0x21
 8003182:	f001 ff32 	bl	8004fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	210f      	movs	r1, #15
 800318a:	2022      	movs	r0, #34	; 0x22
 800318c:	f001 ff11 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003190:	2022      	movs	r0, #34	; 0x22
 8003192:	f001 ff2a 	bl	8004fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003196:	bf00      	nop
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40005800 	.word	0x40005800
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010c00 	.word	0x40010c00

080031ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a26      	ldr	r2, [pc, #152]	; (8003260 <HAL_SPI_MspInit+0xb4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d145      	bne.n	8003258 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031cc:	4b25      	ldr	r3, [pc, #148]	; (8003264 <HAL_SPI_MspInit+0xb8>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <HAL_SPI_MspInit+0xb8>)
 80031d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_SPI_MspInit+0xb8>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e4:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <HAL_SPI_MspInit+0xb8>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_SPI_MspInit+0xb8>)
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <HAL_SPI_MspInit+0xb8>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80031fc:	2328      	movs	r3, #40	; 0x28
 80031fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003204:	2303      	movs	r3, #3
 8003206:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	4816      	ldr	r0, [pc, #88]	; (8003268 <HAL_SPI_MspInit+0xbc>)
 8003210:	f002 f9b0 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003214:	2310      	movs	r3, #16
 8003216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4619      	mov	r1, r3
 8003226:	4810      	ldr	r0, [pc, #64]	; (8003268 <HAL_SPI_MspInit+0xbc>)
 8003228:	f002 f9a4 	bl	8005574 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_SPI_MspInit+0xc0>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <HAL_SPI_MspInit+0xc0>)
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 15, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	210f      	movs	r1, #15
 800324c:	2023      	movs	r0, #35	; 0x23
 800324e:	f001 feb0 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003252:	2023      	movs	r0, #35	; 0x23
 8003254:	f001 fec9 	bl	8004fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003258:	bf00      	nop
 800325a:	3728      	adds	r7, #40	; 0x28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40013000 	.word	0x40013000
 8003264:	40021000 	.word	0x40021000
 8003268:	40010c00 	.word	0x40010c00
 800326c:	40010000 	.word	0x40010000

08003270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0320 	add.w	r3, r7, #32
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a51      	ldr	r2, [pc, #324]	; (80033d0 <HAL_TIM_Base_MspInit+0x160>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d135      	bne.n	80032fc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003290:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a4f      	ldr	r2, [pc, #316]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 8003296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a8:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4a49      	ldr	r2, [pc, #292]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	6193      	str	r3, [r2, #24]
 80032b4:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032ca:	2302      	movs	r3, #2
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f107 0320 	add.w	r3, r7, #32
 80032d2:	4619      	mov	r1, r3
 80032d4:	4840      	ldr	r0, [pc, #256]	; (80033d8 <HAL_TIM_Base_MspInit+0x168>)
 80032d6:	f002 f94d 	bl	8005574 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 14, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	210e      	movs	r1, #14
 80032de:	2019      	movs	r0, #25
 80032e0:	f001 fe67 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032e4:	2019      	movs	r0, #25
 80032e6:	f001 fe80 	bl	8004fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 14, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	210e      	movs	r1, #14
 80032ee:	201b      	movs	r0, #27
 80032f0:	f001 fe5f 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032f4:	201b      	movs	r0, #27
 80032f6:	f001 fe78 	bl	8004fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032fa:	e064      	b.n	80033c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d12c      	bne.n	8003360 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003306:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4a32      	ldr	r2, [pc, #200]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	61d3      	str	r3, [r2, #28]
 8003312:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	4a2c      	ldr	r2, [pc, #176]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6193      	str	r3, [r2, #24]
 800332a:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003336:	2301      	movs	r3, #1
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800333e:	2302      	movs	r3, #2
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 0320 	add.w	r3, r7, #32
 8003346:	4619      	mov	r1, r3
 8003348:	4823      	ldr	r0, [pc, #140]	; (80033d8 <HAL_TIM_Base_MspInit+0x168>)
 800334a:	f002 f913 	bl	8005574 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800334e:	2200      	movs	r2, #0
 8003350:	210f      	movs	r1, #15
 8003352:	201c      	movs	r0, #28
 8003354:	f001 fe2d 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003358:	201c      	movs	r0, #28
 800335a:	f001 fe46 	bl	8004fea <HAL_NVIC_EnableIRQ>
}
 800335e:	e032      	b.n	80033c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_TIM_Base_MspInit+0x16c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d114      	bne.n	8003394 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800336a:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	61d3      	str	r3, [r2, #28]
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	210f      	movs	r1, #15
 8003386:	201d      	movs	r0, #29
 8003388:	f001 fe13 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800338c:	201d      	movs	r0, #29
 800338e:	f001 fe2c 	bl	8004fea <HAL_NVIC_EnableIRQ>
}
 8003392:	e018      	b.n	80033c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a11      	ldr	r2, [pc, #68]	; (80033e0 <HAL_TIM_Base_MspInit+0x170>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d113      	bne.n	80033c6 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	61d3      	str	r3, [r2, #28]
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_TIM_Base_MspInit+0x164>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	210f      	movs	r1, #15
 80033ba:	201e      	movs	r0, #30
 80033bc:	f001 fdf9 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033c0:	201e      	movs	r0, #30
 80033c2:	f001 fe12 	bl	8004fea <HAL_NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3730      	adds	r7, #48	; 0x30
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010800 	.word	0x40010800
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800

080033e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	; 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 0318 	add.w	r3, r7, #24
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a65      	ldr	r2, [pc, #404]	; (8003594 <HAL_UART_MspInit+0x1b0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d160      	bne.n	80034c6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003404:	4b64      	ldr	r3, [pc, #400]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	4a63      	ldr	r2, [pc, #396]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 800340a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800340e:	6193      	str	r3, [r2, #24]
 8003410:	4b61      	ldr	r3, [pc, #388]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341c:	4b5e      	ldr	r3, [pc, #376]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	4a5d      	ldr	r2, [pc, #372]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6193      	str	r3, [r2, #24]
 8003428:	4b5b      	ldr	r3, [pc, #364]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	f107 0318 	add.w	r3, r7, #24
 8003446:	4619      	mov	r1, r3
 8003448:	4854      	ldr	r0, [pc, #336]	; (800359c <HAL_UART_MspInit+0x1b8>)
 800344a:	f002 f893 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800344e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	f107 0318 	add.w	r3, r7, #24
 8003460:	4619      	mov	r1, r3
 8003462:	484e      	ldr	r0, [pc, #312]	; (800359c <HAL_UART_MspInit+0x1b8>)
 8003464:	f002 f886 	bl	8005574 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003468:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 800346a:	4a4e      	ldr	r2, [pc, #312]	; (80035a4 <HAL_UART_MspInit+0x1c0>)
 800346c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800346e:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 8003470:	2200      	movs	r2, #0
 8003472:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003474:	4b4a      	ldr	r3, [pc, #296]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800347a:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003480:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003486:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 8003488:	2200      	movs	r2, #0
 800348a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800348c:	4b44      	ldr	r3, [pc, #272]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 800348e:	2220      	movs	r2, #32
 8003490:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 8003494:	2200      	movs	r2, #0
 8003496:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003498:	4841      	ldr	r0, [pc, #260]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 800349a:	f001 fdc1 	bl	8005020 <HAL_DMA_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80034a4:	f7ff f95c 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3d      	ldr	r2, [pc, #244]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
 80034ae:	4a3c      	ldr	r2, [pc, #240]	; (80035a0 <HAL_UART_MspInit+0x1bc>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	210f      	movs	r1, #15
 80034b8:	2025      	movs	r0, #37	; 0x25
 80034ba:	f001 fd7a 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034be:	2025      	movs	r0, #37	; 0x25
 80034c0:	f001 fd93 	bl	8004fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034c4:	e062      	b.n	800358c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a37      	ldr	r2, [pc, #220]	; (80035a8 <HAL_UART_MspInit+0x1c4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d15d      	bne.n	800358c <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034d0:	4b31      	ldr	r3, [pc, #196]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4a30      	ldr	r2, [pc, #192]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 80034d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034da:	61d3      	str	r3, [r2, #28]
 80034dc:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	6193      	str	r3, [r2, #24]
 80034f4:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_UART_MspInit+0x1b4>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003500:	2304      	movs	r3, #4
 8003502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003508:	2303      	movs	r3, #3
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	f107 0318 	add.w	r3, r7, #24
 8003510:	4619      	mov	r1, r3
 8003512:	4822      	ldr	r0, [pc, #136]	; (800359c <HAL_UART_MspInit+0x1b8>)
 8003514:	f002 f82e 	bl	8005574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003518:	2308      	movs	r3, #8
 800351a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003524:	f107 0318 	add.w	r3, r7, #24
 8003528:	4619      	mov	r1, r3
 800352a:	481c      	ldr	r0, [pc, #112]	; (800359c <HAL_UART_MspInit+0x1b8>)
 800352c:	f002 f822 	bl	8005574 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003530:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 8003532:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_UART_MspInit+0x1cc>)
 8003534:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 8003538:	2200      	movs	r2, #0
 800353a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 800354a:	2200      	movs	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 8003550:	2200      	movs	r2, #0
 8003552:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003554:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 8003556:	2220      	movs	r2, #32
 8003558:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800355a:	4b14      	ldr	r3, [pc, #80]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 800355c:	2200      	movs	r2, #0
 800355e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003560:	4812      	ldr	r0, [pc, #72]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 8003562:	f001 fd5d 	bl	8005020 <HAL_DMA_Init>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 800356c:	f7ff f8f8 	bl	8002760 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
 8003576:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <HAL_UART_MspInit+0x1c8>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800357c:	2200      	movs	r2, #0
 800357e:	210f      	movs	r1, #15
 8003580:	2026      	movs	r0, #38	; 0x26
 8003582:	f001 fd16 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003586:	2026      	movs	r0, #38	; 0x26
 8003588:	f001 fd2f 	bl	8004fea <HAL_NVIC_EnableIRQ>
}
 800358c:	bf00      	nop
 800358e:	3728      	adds	r7, #40	; 0x28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40013800 	.word	0x40013800
 8003598:	40021000 	.word	0x40021000
 800359c:	40010800 	.word	0x40010800
 80035a0:	20000d2c 	.word	0x20000d2c
 80035a4:	40020058 	.word	0x40020058
 80035a8:	40004400 	.word	0x40004400
 80035ac:	20000c1c 	.word	0x20000c1c
 80035b0:	4002006c 	.word	0x4002006c

080035b4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <SDTimer_Handler+0x3c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <SDTimer_Handler+0x1c>
    Timer1--;
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <SDTimer_Handler+0x3c>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <SDTimer_Handler+0x3c>)
 80035ce:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <SDTimer_Handler+0x40>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <SDTimer_Handler+0x34>
    Timer2--;
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <SDTimer_Handler+0x40>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <SDTimer_Handler+0x40>)
 80035e6:	701a      	strb	r2, [r3, #0]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20000f1d 	.word	0x20000f1d
 80035f4:	20000f1c 	.word	0x20000f1c

080035f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <NMI_Handler+0x4>

080035fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003602:	e7fe      	b.n	8003602 <HardFault_Handler+0x4>

08003604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003608:	e7fe      	b.n	8003608 <MemManage_Handler+0x4>

0800360a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800360e:	e7fe      	b.n	800360e <BusFault_Handler+0x4>

08003610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <UsageFault_Handler+0x4>

08003616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <SysTick_Handler+0x30>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3301      	adds	r3, #1
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <SysTick_Handler+0x30>)
 800364c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <SysTick_Handler+0x30>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b09      	cmp	r3, #9
 8003656:	d904      	bls.n	8003662 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <SysTick_Handler+0x30>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800365e:	f7ff ffa9 	bl	80035b4 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003662:	f000 f9d1 	bl	8003a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200000a6 	.word	0x200000a6

08003670 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <DMA1_Channel1_IRQHandler+0x10>)
 8003676:	f001 fe3d 	bl	80052f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000db4 	.word	0x20000db4

08003684 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <DMA1_Channel5_IRQHandler+0x10>)
 800368a:	f001 fe33 	bl	80052f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000d2c 	.word	0x20000d2c

08003698 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <DMA1_Channel6_IRQHandler+0x10>)
 800369e:	f001 fe29 	bl	80052f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000c1c 	.word	0x20000c1c

080036ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	can_bus_Recieve();
 80036b0:	f7fd fd56 	bl	8001160 <can_bus_Recieve>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80036b4:	4802      	ldr	r0, [pc, #8]	; (80036c0 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80036b6:	f001 f979 	bl	80049ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	2000040c 	.word	0x2000040c

080036c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_UPDATE) != RESET)
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <TIM1_UP_IRQHandler+0x20>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <TIM1_UP_IRQHandler+0x16>
		rot_Reset();
 80036d6:	f7ff f85f 	bl	8002798 <rot_Reset>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036da:	4802      	ldr	r0, [pc, #8]	; (80036e4 <TIM1_UP_IRQHandler+0x20>)
 80036dc:	f006 fa80 	bl	8009be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000df8 	.word	0x20000df8

080036e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_CC2) != RESET)
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <TIM1_CC_IRQHandler+0x20>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d101      	bne.n	80036fe <TIM1_CC_IRQHandler+0x16>
		rot_Calc();
 80036fa:	f7ff f857 	bl	80027ac <rot_Calc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036fe:	4802      	ldr	r0, [pc, #8]	; (8003708 <TIM1_CC_IRQHandler+0x20>)
 8003700:	f006 fa6e 	bl	8009be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000df8 	.word	0x20000df8

0800370c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1) != RESET)
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <TIM2_IRQHandler+0x34>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d101      	bne.n	8003722 <TIM2_IRQHandler+0x16>
		vel_Calc();
 800371e:	f000 f8fd 	bl	800391c <vel_Calc>
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_UPDATE) != RESET)
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <TIM2_IRQHandler+0x34>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <TIM2_IRQHandler+0x28>
		vel_Reset();
 8003730:	f000 f8ea 	bl	8003908 <vel_Reset>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <TIM2_IRQHandler+0x34>)
 8003736:	f006 fa53 	bl	8009be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000ed4 	.word	0x20000ed4

08003744 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <TIM3_IRQHandler+0x10>)
 800374a:	f006 fa49 	bl	8009be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000cb4 	.word	0x20000cb4

08003758 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (sdCard.mode == 1)
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <TIM4_IRQHandler+0x50>)
 800375e:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <TIM4_IRQHandler+0x12>
		dina_Update();
 8003766:	f7fd fd79 	bl	800125c <dina_Update>
	if (sdCard.mode == 3)
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <TIM4_IRQHandler+0x50>)
 800376c:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8003770:	2b03      	cmp	r3, #3
 8003772:	d101      	bne.n	8003778 <TIM4_IRQHandler+0x20>
		traction_Update();
 8003774:	f000 f8a4 	bl	80038c0 <traction_Update>
	if (sdCard.mode == 2)
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <TIM4_IRQHandler+0x50>)
 800377a:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800377e:	2b02      	cmp	r3, #2
 8003780:	d101      	bne.n	8003786 <TIM4_IRQHandler+0x2e>
	{
		aceGir_Read();
 8003782:	f7fd fbbd 	bl	8000f00 <aceGir_Read>
	}
	if (sdCard.mode != 9)
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <TIM4_IRQHandler+0x50>)
 8003788:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800378c:	2b09      	cmp	r3, #9
 800378e:	d005      	beq.n	800379c <TIM4_IRQHandler+0x44>
		fresult = SD_logger();
 8003790:	f7ff fa8e 	bl	8002cb0 <SD_logger>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <TIM4_IRQHandler+0x54>)
 800379a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <TIM4_IRQHandler+0x58>)
 800379e:	f006 fa1f 	bl	8009be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200004c4 	.word	0x200004c4
 80037ac:	20000e78 	.word	0x20000e78
 80037b0:	20000314 	.word	0x20000314

080037b4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <I2C2_EV_IRQHandler+0x10>)
 80037ba:	f002 fd37 	bl	800622c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000c60 	.word	0x20000c60

080037c8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <I2C2_ER_IRQHandler+0x10>)
 80037ce:	f002 fe9e 	bl	800650e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000c60 	.word	0x20000c60

080037dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <SPI1_IRQHandler+0x10>)
 80037e2:	f005 fe47 	bl	8009474 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000e7c 	.word	0x20000e7c

080037f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <USART1_IRQHandler+0x10>)
 80037f6:	f006 ff99 	bl	800a72c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000d70 	.word	0x20000d70

08003804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <USART2_IRQHandler+0x10>)
 800380a:	f006 ff8f 	bl	800a72c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000450 	.word	0x20000450

08003818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <_sbrk+0x5c>)
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <_sbrk+0x60>)
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800382c:	4b13      	ldr	r3, [pc, #76]	; (800387c <_sbrk+0x64>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <_sbrk+0x64>)
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <_sbrk+0x68>)
 8003838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <_sbrk+0x64>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d207      	bcs.n	8003858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003848:	f00a ffac 	bl	800e7a4 <__errno>
 800384c:	4603      	mov	r3, r0
 800384e:	220c      	movs	r2, #12
 8003850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e009      	b.n	800386c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <_sbrk+0x64>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <_sbrk+0x64>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <_sbrk+0x64>)
 8003868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20005000 	.word	0x20005000
 8003878:	00000400 	.word	0x00000400
 800387c:	200000a8 	.word	0x200000a8
 8003880:	20001398 	.word	0x20001398

08003884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <traction_Init>:
 */

#include "traction.h"

void traction_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
	traction.cell1.huart = &huart1;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <traction_Init+0x20>)
 8003896:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <traction_Init+0x24>)
 8003898:	601a      	str	r2, [r3, #0]
	traction.cell2.huart = &huart2;
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <traction_Init+0x20>)
 800389c:	4a06      	ldr	r2, [pc, #24]	; (80038b8 <traction_Init+0x28>)
 800389e:	61da      	str	r2, [r3, #28]
	forceGauge_uart_Init_DMA(&traction.cell1);
 80038a0:	4803      	ldr	r0, [pc, #12]	; (80038b0 <traction_Init+0x20>)
 80038a2:	f7fe f9bb 	bl	8001c1c <forceGauge_uart_Init_DMA>
	forceGauge_uart_Init_DMA(&traction.cell2);
 80038a6:	4805      	ldr	r0, [pc, #20]	; (80038bc <traction_Init+0x2c>)
 80038a8:	f7fe f9b8 	bl	8001c1c <forceGauge_uart_Init_DMA>
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000e40 	.word	0x20000e40
 80038b4:	20000d70 	.word	0x20000d70
 80038b8:	20000450 	.word	0x20000450
 80038bc:	20000e5c 	.word	0x20000e5c

080038c0 <traction_Update>:

void traction_Update(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
	forceGauge_getForce(&traction.cell1);
 80038c4:	4803      	ldr	r0, [pc, #12]	; (80038d4 <traction_Update+0x14>)
 80038c6:	f7fe f9bd 	bl	8001c44 <forceGauge_getForce>
	forceGauge_getForce(&traction.cell2);
 80038ca:	4803      	ldr	r0, [pc, #12]	; (80038d8 <traction_Update+0x18>)
 80038cc:	f7fe f9ba 	bl	8001c44 <forceGauge_getForce>
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000e40 	.word	0x20000e40
 80038d8:	20000e5c 	.word	0x20000e5c

080038dc <vel_Init>:

/*
 * 	Função de inicialização
 */
void vel_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
	vel.constante = 1.5082;			/* < Salva a constante para calculo da velocidade */
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <vel_Init+0x20>)
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <vel_Init+0x24>)
 80038e4:	601a      	str	r2, [r3, #0]
	vel.htim = &htim2;				/* < Salva o ponteiro do Timer que será utilizado */
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <vel_Init+0x20>)
 80038e8:	4a06      	ldr	r2, [pc, #24]	; (8003904 <vel_Init+0x28>)
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
	vel.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <vel_Init+0x20>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&vel);			/* < Chama função de inicialização */
 80038f2:	4802      	ldr	r0, [pc, #8]	; (80038fc <vel_Init+0x20>)
 80038f4:	f7fe fa1e 	bl	8001d34 <indutivo_Init>
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000cfc 	.word	0x20000cfc
 8003900:	3fc10cb3 	.word	0x3fc10cb3
 8003904:	20000ed4 	.word	0x20000ed4

08003908 <vel_Reset>:

/*
 * 	Função de reset
 */
void vel_Reset(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
	indutivo_reset(&vel);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <vel_Reset+0x10>)
 800390e:	f7fe faf3 	bl	8001ef8 <indutivo_reset>
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000cfc 	.word	0x20000cfc

0800391c <vel_Calc>:

/*
 * 	Função de calculo
 */
void vel_Calc(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	indutivo_calc(&vel);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <vel_Calc+0x10>)
 8003922:	f7fe fa85 	bl	8001e30 <indutivo_calc>
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000cfc 	.word	0x20000cfc

08003930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003930:	480c      	ldr	r0, [pc, #48]	; (8003964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003932:	490d      	ldr	r1, [pc, #52]	; (8003968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003938:	e002      	b.n	8003940 <LoopCopyDataInit>

0800393a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800393a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800393c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800393e:	3304      	adds	r3, #4

08003940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003944:	d3f9      	bcc.n	800393a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003948:	4c0a      	ldr	r4, [pc, #40]	; (8003974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800394a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800394c:	e001      	b.n	8003952 <LoopFillZerobss>

0800394e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800394e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003950:	3204      	adds	r2, #4

08003952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003954:	d3fb      	bcc.n	800394e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003956:	f7ff ff95 	bl	8003884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800395a:	f00a ff29 	bl	800e7b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800395e:	f7fe faeb 	bl	8001f38 <main>
  bx lr
 8003962:	4770      	bx	lr
  ldr r0, =_sdata
 8003964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003968:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800396c:	0800f7c0 	.word	0x0800f7c0
  ldr r2, =_sbss
 8003970:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003974:	20001398 	.word	0x20001398

08003978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003978:	e7fe      	b.n	8003978 <ADC1_2_IRQHandler>
	...

0800397c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <HAL_Init+0x28>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a07      	ldr	r2, [pc, #28]	; (80039a4 <HAL_Init+0x28>)
 8003986:	f043 0310 	orr.w	r3, r3, #16
 800398a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800398c:	2003      	movs	r0, #3
 800398e:	f001 fb05 	bl	8004f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003992:	2000      	movs	r0, #0
 8003994:	f000 f808 	bl	80039a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003998:	f7ff fab2 	bl	8002f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40022000 	.word	0x40022000

080039a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_InitTick+0x54>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <HAL_InitTick+0x58>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039be:	fbb3 f3f1 	udiv	r3, r3, r1
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 fb1d 	bl	8005006 <HAL_SYSTICK_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e00e      	b.n	80039f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b0f      	cmp	r3, #15
 80039da:	d80a      	bhi.n	80039f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039dc:	2200      	movs	r2, #0
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295
 80039e4:	f001 fae5 	bl	8004fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039e8:	4a06      	ldr	r2, [pc, #24]	; (8003a04 <HAL_InitTick+0x5c>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000004 	.word	0x20000004
 8003a00:	2000000c 	.word	0x2000000c
 8003a04:	20000008 	.word	0x20000008

08003a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_IncTick+0x1c>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_IncTick+0x20>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4413      	add	r3, r2
 8003a18:	4a03      	ldr	r2, [pc, #12]	; (8003a28 <HAL_IncTick+0x20>)
 8003a1a:	6013      	str	r3, [r2, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	2000000c 	.word	0x2000000c
 8003a28:	20000f20 	.word	0x20000f20

08003a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a30:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <HAL_GetTick+0x10>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	20000f20 	.word	0x20000f20

08003a40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0be      	b.n	8003be0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fa70 	bl	8002f64 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 faff 	bl	8004088 <ADC_ConversionStop_Disable>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 8099 	bne.w	8003bce <HAL_ADC_Init+0x18e>
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 8095 	bne.w	8003bce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003aac:	f023 0302 	bic.w	r3, r3, #2
 8003ab0:	f043 0202 	orr.w	r2, r3, #2
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ac0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7b1b      	ldrb	r3, [r3, #12]
 8003ac6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ac8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad8:	d003      	beq.n	8003ae2 <HAL_ADC_Init+0xa2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d102      	bne.n	8003ae8 <HAL_ADC_Init+0xa8>
 8003ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae6:	e000      	b.n	8003aea <HAL_ADC_Init+0xaa>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7d1b      	ldrb	r3, [r3, #20]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d119      	bne.n	8003b2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7b1b      	ldrb	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	035a      	lsls	r2, r3, #13
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	e00b      	b.n	8003b2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_ADC_Init+0x1a8>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d003      	beq.n	8003b66 <HAL_ADC_Init+0x126>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d104      	bne.n	8003b70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	051b      	lsls	r3, r3, #20
 8003b6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	4b18      	ldr	r3, [pc, #96]	; (8003bec <HAL_ADC_Init+0x1ac>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d10b      	bne.n	8003bac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003baa:	e018      	b.n	8003bde <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f023 0312 	bic.w	r3, r3, #18
 8003bb4:	f043 0210 	orr.w	r2, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003bcc:	e007      	b.n	8003bde <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	f043 0210 	orr.w	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	ffe1f7fd 	.word	0xffe1f7fd
 8003bec:	ff1f0efe 	.word	0xff1f0efe

08003bf0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a64      	ldr	r2, [pc, #400]	; (8003d98 <HAL_ADC_Start_DMA+0x1a8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_ADC_Start_DMA+0x24>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a63      	ldr	r2, [pc, #396]	; (8003d9c <HAL_ADC_Start_DMA+0x1ac>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d106      	bne.n	8003c22 <HAL_ADC_Start_DMA+0x32>
 8003c14:	4b60      	ldr	r3, [pc, #384]	; (8003d98 <HAL_ADC_Start_DMA+0x1a8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 80b3 	bne.w	8003d88 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_Start_DMA+0x40>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0ae      	b.n	8003d8e <HAL_ADC_Start_DMA+0x19e>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f9cb 	bl	8003fd4 <ADC_Enable>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 809a 	bne.w	8003d7e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a4e      	ldr	r2, [pc, #312]	; (8003d9c <HAL_ADC_Start_DMA+0x1ac>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d105      	bne.n	8003c74 <HAL_ADC_Start_DMA+0x84>
 8003c68:	4b4b      	ldr	r3, [pc, #300]	; (8003d98 <HAL_ADC_Start_DMA+0x1a8>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d115      	bne.n	8003ca0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d026      	beq.n	8003cdc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c9e:	e01d      	b.n	8003cdc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a39      	ldr	r2, [pc, #228]	; (8003d98 <HAL_ADC_Start_DMA+0x1a8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_ADC_Start_DMA+0xd0>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a38      	ldr	r2, [pc, #224]	; (8003d9c <HAL_ADC_Start_DMA+0x1ac>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10d      	bne.n	8003cdc <HAL_ADC_Start_DMA+0xec>
 8003cc0:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <HAL_ADC_Start_DMA+0x1a8>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d006      	beq.n	8003cf6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f023 0206 	bic.w	r2, r3, #6
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cf4:	e002      	b.n	8003cfc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <HAL_ADC_Start_DMA+0x1b0>)
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <HAL_ADC_Start_DMA+0x1b4>)
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	4a23      	ldr	r2, [pc, #140]	; (8003da8 <HAL_ADC_Start_DMA+0x1b8>)
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0202 	mvn.w	r2, #2
 8003d24:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d34:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a18      	ldr	r0, [r3, #32]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	334c      	adds	r3, #76	; 0x4c
 8003d40:	4619      	mov	r1, r3
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f001 f9c5 	bl	80050d4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d54:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d58:	d108      	bne.n	8003d6c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003d68:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003d6a:	e00f      	b.n	8003d8c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d7a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003d7c:	e006      	b.n	8003d8c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003d86:	e001      	b.n	8003d8c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40012400 	.word	0x40012400
 8003d9c:	40012800 	.word	0x40012800
 8003da0:	0800410b 	.word	0x0800410b
 8003da4:	08004187 	.word	0x08004187
 8003da8:	080041a3 	.word	0x080041a3

08003dac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x20>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e0dc      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x1da>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b06      	cmp	r3, #6
 8003e12:	d81c      	bhi.n	8003e4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b05      	subs	r3, #5
 8003e26:	221f      	movs	r2, #31
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	4019      	ands	r1, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3b05      	subs	r3, #5
 8003e40:	fa00 f203 	lsl.w	r2, r0, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e4c:	e03c      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d81c      	bhi.n	8003e90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	3b23      	subs	r3, #35	; 0x23
 8003e68:	221f      	movs	r2, #31
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	4019      	ands	r1, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	3b23      	subs	r3, #35	; 0x23
 8003e82:	fa00 f203 	lsl.w	r2, r0, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e8e:	e01b      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3b41      	subs	r3, #65	; 0x41
 8003ea2:	221f      	movs	r2, #31
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	4019      	ands	r1, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	3b41      	subs	r3, #65	; 0x41
 8003ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d91c      	bls.n	8003f0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68d9      	ldr	r1, [r3, #12]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	3b1e      	subs	r3, #30
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	4019      	ands	r1, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6898      	ldr	r0, [r3, #8]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	3b1e      	subs	r3, #30
 8003efc:	fa00 f203 	lsl.w	r2, r0, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	60da      	str	r2, [r3, #12]
 8003f08:	e019      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6919      	ldr	r1, [r3, #16]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	2207      	movs	r2, #7
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	4019      	ands	r1, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6898      	ldr	r0, [r3, #8]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	fa00 f203 	lsl.w	r2, r0, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d003      	beq.n	8003f4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003f4a:	2b11      	cmp	r3, #17
 8003f4c:	d132      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d125      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d126      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003f74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b10      	cmp	r3, #16
 8003f7c:	d11a      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_ADC_ConfigChannel+0x1e8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	0c9a      	lsrs	r2, r3, #18
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f94:	e002      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f9      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x1b2>
 8003fa2:	e007      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40012400 	.word	0x40012400
 8003fcc:	20000004 	.word	0x20000004
 8003fd0:	431bde83 	.word	0x431bde83

08003fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d040      	beq.n	8004074 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004002:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <ADC_Enable+0xac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <ADC_Enable+0xb0>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	0c9b      	lsrs	r3, r3, #18
 800400e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004010:	e002      	b.n	8004018 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3b01      	subs	r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f9      	bne.n	8004012 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800401e:	f7ff fd05 	bl	8003a2c <HAL_GetTick>
 8004022:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004024:	e01f      	b.n	8004066 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004026:	f7ff fd01 	bl	8003a2c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d918      	bls.n	8004066 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d011      	beq.n	8004066 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	f043 0210 	orr.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e007      	b.n	8004076 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d1d8      	bne.n	8004026 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000004 	.word	0x20000004
 8004084:	431bde83 	.word	0x431bde83

08004088 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d12e      	bne.n	8004100 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040b2:	f7ff fcbb 	bl	8003a2c <HAL_GetTick>
 80040b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80040b8:	e01b      	b.n	80040f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040ba:	f7ff fcb7 	bl	8003a2c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d914      	bls.n	80040f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d10d      	bne.n	80040f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	f043 0210 	orr.w	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e007      	b.n	8004102 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d0dc      	beq.n	80040ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004120:	2b00      	cmp	r3, #0
 8004122:	d127      	bne.n	8004174 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800413a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800413e:	d115      	bne.n	800416c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004144:	2b00      	cmp	r3, #0
 8004146:	d111      	bne.n	800416c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	f043 0201 	orr.w	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff fe1d 	bl	8003dac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004172:	e004      	b.n	800417e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff fe12 	bl	8003dbe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f043 0204 	orr.w	r2, r3, #4
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff fe01 	bl	8003dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_ADCEx_Calibration_Start+0x1e>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e095      	b.n	8004322 <HAL_ADCEx_Calibration_Start+0x14a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff42 	bl	8004088 <ADC_ConversionStop_Disable>
 8004204:	4603      	mov	r3, r0
 8004206:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 8084 	bne.w	8004318 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004218:	f023 0302 	bic.w	r3, r3, #2
 800421c:	f043 0202 	orr.w	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004224:	4b41      	ldr	r3, [pc, #260]	; (800432c <HAL_ADCEx_Calibration_Start+0x154>)
 8004226:	681c      	ldr	r4, [r3, #0]
 8004228:	2002      	movs	r0, #2
 800422a:	f004 fcfd 	bl	8008c28 <HAL_RCCEx_GetPeriphCLKFreq>
 800422e:	4603      	mov	r3, r0
 8004230:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004234:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004236:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004238:	e002      	b.n	8004240 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b01      	subs	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f9      	bne.n	800423a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff fec4 	bl	8003fd4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800425c:	f7ff fbe6 	bl	8003a2c <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004262:	e01b      	b.n	800429c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004264:	f7ff fbe2 	bl	8003a2c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b0a      	cmp	r3, #10
 8004270:	d914      	bls.n	800429c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	f023 0312 	bic.w	r3, r3, #18
 8004288:	f043 0210 	orr.w	r2, r3, #16
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e042      	b.n	8004322 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1dc      	bne.n	8004264 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0204 	orr.w	r2, r2, #4
 80042b8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80042ba:	f7ff fbb7 	bl	8003a2c <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042c0:	e01b      	b.n	80042fa <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80042c2:	f7ff fbb3 	bl	8003a2c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b0a      	cmp	r3, #10
 80042ce:	d914      	bls.n	80042fa <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	f023 0312 	bic.w	r3, r3, #18
 80042e6:	f043 0210 	orr.w	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e013      	b.n	8004322 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1dc      	bne.n	80042c2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f023 0303 	bic.w	r3, r3, #3
 8004310:	f043 0201 	orr.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004320:	7dfb      	ldrb	r3, [r7, #23]
}
 8004322:	4618      	mov	r0, r3
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	bf00      	nop
 800432c:	20000004 	.word	0x20000004

08004330 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0ed      	b.n	800451e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe fe88 	bl	8003064 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004364:	f7ff fb62 	bl	8003a2c <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800436a:	e012      	b.n	8004392 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800436c:	f7ff fb5e 	bl	8003a2c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b0a      	cmp	r3, #10
 8004378:	d90b      	bls.n	8004392 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2205      	movs	r2, #5
 800438a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0c5      	b.n	800451e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0e5      	beq.n	800436c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0202 	bic.w	r2, r2, #2
 80043ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043b0:	f7ff fb3c 	bl	8003a2c <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043b6:	e012      	b.n	80043de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043b8:	f7ff fb38 	bl	8003a2c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b0a      	cmp	r3, #10
 80043c4:	d90b      	bls.n	80043de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2205      	movs	r2, #5
 80043d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e09f      	b.n	800451e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e5      	bne.n	80043b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7e1b      	ldrb	r3, [r3, #24]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d108      	bne.n	8004406 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e007      	b.n	8004416 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7e5b      	ldrb	r3, [r3, #25]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d108      	bne.n	8004430 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e007      	b.n	8004440 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	7e9b      	ldrb	r3, [r3, #26]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d108      	bne.n	800445a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0220 	orr.w	r2, r2, #32
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e007      	b.n	800446a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0220 	bic.w	r2, r2, #32
 8004468:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	7edb      	ldrb	r3, [r3, #27]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d108      	bne.n	8004484 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0210 	bic.w	r2, r2, #16
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e007      	b.n	8004494 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0210 	orr.w	r2, r2, #16
 8004492:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7f1b      	ldrb	r3, [r3, #28]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d108      	bne.n	80044ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0208 	orr.w	r2, r2, #8
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e007      	b.n	80044be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0208 	bic.w	r2, r2, #8
 80044bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	7f5b      	ldrb	r3, [r3, #29]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d108      	bne.n	80044d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0204 	orr.w	r2, r2, #4
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e007      	b.n	80044e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0204 	bic.w	r2, r2, #4
 80044e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	ea42 0103 	orr.w	r1, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	1e5a      	subs	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004526:	b480      	push	{r7}
 8004528:	b087      	sub	sp, #28
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800453c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800453e:	7cfb      	ldrb	r3, [r7, #19]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d003      	beq.n	800454c <HAL_CAN_ConfigFilter+0x26>
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b02      	cmp	r3, #2
 8004548:	f040 80aa 	bne.w	80046a0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004552:	f043 0201 	orr.w	r2, r3, #1
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2201      	movs	r2, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d123      	bne.n	80045ce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	43db      	mvns	r3, r3
 8004590:	401a      	ands	r2, r3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3248      	adds	r2, #72	; 0x48
 80045ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045c4:	6979      	ldr	r1, [r7, #20]
 80045c6:	3348      	adds	r3, #72	; 0x48
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	440b      	add	r3, r1
 80045cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d122      	bne.n	800461c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	431a      	orrs	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3248      	adds	r2, #72	; 0x48
 80045fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004610:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004612:	6979      	ldr	r1, [r7, #20]
 8004614:	3348      	adds	r3, #72	; 0x48
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	440b      	add	r3, r1
 800461a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	43db      	mvns	r3, r3
 800462e:	401a      	ands	r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004636:	e007      	b.n	8004648 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	431a      	orrs	r2, r3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	43db      	mvns	r3, r3
 800465a:	401a      	ands	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004662:	e007      	b.n	8004674 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	431a      	orrs	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d107      	bne.n	800468c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	431a      	orrs	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e006      	b.n	80046ae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d12e      	bne.n	800472a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046e4:	f7ff f9a2 	bl	8003a2c <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046ea:	e012      	b.n	8004712 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046ec:	f7ff f99e 	bl	8003a2c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b0a      	cmp	r3, #10
 80046f8:	d90b      	bls.n	8004712 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2205      	movs	r2, #5
 800470a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e012      	b.n	8004738 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e5      	bne.n	80046ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e006      	b.n	8004738 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
  }
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004754:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d003      	beq.n	8004764 <HAL_CAN_GetRxMessage+0x24>
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b02      	cmp	r3, #2
 8004760:	f040 80f3 	bne.w	800494a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10e      	bne.n	8004788 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d116      	bne.n	80047a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0e7      	b.n	8004958 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d107      	bne.n	80047a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e0d8      	b.n	8004958 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	331b      	adds	r3, #27
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	4413      	add	r3, r2
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0204 	and.w	r2, r3, #4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10c      	bne.n	80047de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	331b      	adds	r3, #27
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	4413      	add	r3, r2
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0d5b      	lsrs	r3, r3, #21
 80047d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e00b      	b.n	80047f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	331b      	adds	r3, #27
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	4413      	add	r3, r2
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	08db      	lsrs	r3, r3, #3
 80047ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	331b      	adds	r3, #27
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	4413      	add	r3, r2
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0202 	and.w	r2, r3, #2
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	331b      	adds	r3, #27
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	4413      	add	r3, r2
 8004818:	3304      	adds	r3, #4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 020f 	and.w	r2, r3, #15
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	331b      	adds	r3, #27
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	4413      	add	r3, r2
 8004830:	3304      	adds	r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	b2da      	uxtb	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	331b      	adds	r3, #27
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	4413      	add	r3, r2
 8004848:	3304      	adds	r3, #4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	4413      	add	r3, r2
 800485e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	4413      	add	r3, r2
 8004874:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	0a1a      	lsrs	r2, r3, #8
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	4413      	add	r3, r2
 800488e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0c1a      	lsrs	r2, r3, #16
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	3302      	adds	r3, #2
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	0e1a      	lsrs	r2, r3, #24
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	3303      	adds	r3, #3
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	3304      	adds	r3, #4
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0a1a      	lsrs	r2, r3, #8
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	3305      	adds	r3, #5
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	0c1a      	lsrs	r2, r3, #16
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	3306      	adds	r3, #6
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	4413      	add	r3, r2
 800490e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	0e1a      	lsrs	r2, r3, #24
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	3307      	adds	r3, #7
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d108      	bne.n	8004936 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0220 	orr.w	r2, r2, #32
 8004932:	60da      	str	r2, [r3, #12]
 8004934:	e007      	b.n	8004946 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0220 	orr.w	r2, r2, #32
 8004944:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e006      	b.n	8004958 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004972:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d002      	beq.n	8004980 <HAL_CAN_ActivateNotification+0x1e>
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d109      	bne.n	8004994 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6959      	ldr	r1, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e006      	b.n	80049a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d07c      	beq.n	8004aec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d023      	beq.n	8004a44 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f983 	bl	8004d1a <HAL_CAN_TxMailbox0CompleteCallback>
 8004a14:	e016      	b.n	8004a44 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
 8004a28:	e00c      	b.n	8004a44 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3c:	e002      	b.n	8004a44 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f986 	bl	8004d50 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d024      	beq.n	8004a98 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f962 	bl	8004d2c <HAL_CAN_TxMailbox1CompleteCallback>
 8004a68:	e016      	b.n	8004a98 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	e00c      	b.n	8004a98 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a90:	e002      	b.n	8004a98 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f965 	bl	8004d62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d024      	beq.n	8004aec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f941 	bl	8004d3e <HAL_CAN_TxMailbox2CompleteCallback>
 8004abc:	e016      	b.n	8004aec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad0:	e00c      	b.n	8004aec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	e002      	b.n	8004aec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f944 	bl	8004d74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00c      	beq.n	8004b10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d006      	beq.n	8004b32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2208      	movs	r2, #8
 8004b2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f933 	bl	8004d98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f91b 	bl	8004d86 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2210      	movs	r2, #16
 8004b72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f913 	bl	8004dbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8fb 	bl	8004daa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2210      	movs	r2, #16
 8004bce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f8fc 	bl	8004dce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d006      	beq.n	8004bf8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2208      	movs	r2, #8
 8004bf0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8f4 	bl	8004de0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d07b      	beq.n	8004cfa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d072      	beq.n	8004cf2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	f043 0302 	orr.w	r3, r3, #2
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d043      	beq.n	8004cf2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d03e      	beq.n	8004cf2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c7a:	2b60      	cmp	r3, #96	; 0x60
 8004c7c:	d02b      	beq.n	8004cd6 <HAL_CAN_IRQHandler+0x32a>
 8004c7e:	2b60      	cmp	r3, #96	; 0x60
 8004c80:	d82e      	bhi.n	8004ce0 <HAL_CAN_IRQHandler+0x334>
 8004c82:	2b50      	cmp	r3, #80	; 0x50
 8004c84:	d022      	beq.n	8004ccc <HAL_CAN_IRQHandler+0x320>
 8004c86:	2b50      	cmp	r3, #80	; 0x50
 8004c88:	d82a      	bhi.n	8004ce0 <HAL_CAN_IRQHandler+0x334>
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d019      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x316>
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d826      	bhi.n	8004ce0 <HAL_CAN_IRQHandler+0x334>
 8004c92:	2b30      	cmp	r3, #48	; 0x30
 8004c94:	d010      	beq.n	8004cb8 <HAL_CAN_IRQHandler+0x30c>
 8004c96:	2b30      	cmp	r3, #48	; 0x30
 8004c98:	d822      	bhi.n	8004ce0 <HAL_CAN_IRQHandler+0x334>
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d002      	beq.n	8004ca4 <HAL_CAN_IRQHandler+0x2f8>
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d005      	beq.n	8004cae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004ca2:	e01d      	b.n	8004ce0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	f043 0308 	orr.w	r3, r3, #8
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cac:	e019      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	f043 0310 	orr.w	r3, r3, #16
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cb6:	e014      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	f043 0320 	orr.w	r3, r3, #32
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cc0:	e00f      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cca:	e00a      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cd4:	e005      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cde:	e000      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x336>
            break;
 8004ce0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cf0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f870 	bl	8004df2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004d12:	bf00      	nop
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr

08004d62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr

08004daa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr

08004dbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <__NVIC_SetPriorityGrouping+0x44>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e20:	4013      	ands	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e36:	4a04      	ldr	r2, [pc, #16]	; (8004e48 <__NVIC_SetPriorityGrouping+0x44>)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	60d3      	str	r3, [r2, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <__NVIC_GetPriorityGrouping+0x18>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	0a1b      	lsrs	r3, r3, #8
 8004e56:	f003 0307 	and.w	r3, r3, #7
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	e000ed00 	.word	0xe000ed00

08004e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	db0b      	blt.n	8004e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	f003 021f 	and.w	r2, r3, #31
 8004e80:	4906      	ldr	r1, [pc, #24]	; (8004e9c <__NVIC_EnableIRQ+0x34>)
 8004e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2001      	movs	r0, #1
 8004e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	e000e100 	.word	0xe000e100

08004ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	6039      	str	r1, [r7, #0]
 8004eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	db0a      	blt.n	8004eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	490c      	ldr	r1, [pc, #48]	; (8004eec <__NVIC_SetPriority+0x4c>)
 8004eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebe:	0112      	lsls	r2, r2, #4
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ec8:	e00a      	b.n	8004ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <__NVIC_SetPriority+0x50>)
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	3b04      	subs	r3, #4
 8004ed8:	0112      	lsls	r2, r2, #4
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	440b      	add	r3, r1
 8004ede:	761a      	strb	r2, [r3, #24]
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	e000e100 	.word	0xe000e100
 8004ef0:	e000ed00 	.word	0xe000ed00

08004ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b089      	sub	sp, #36	; 0x24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f1c3 0307 	rsb	r3, r3, #7
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	bf28      	it	cs
 8004f12:	2304      	movcs	r3, #4
 8004f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d902      	bls.n	8004f24 <NVIC_EncodePriority+0x30>
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3b03      	subs	r3, #3
 8004f22:	e000      	b.n	8004f26 <NVIC_EncodePriority+0x32>
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43da      	mvns	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	401a      	ands	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	43d9      	mvns	r1, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f4c:	4313      	orrs	r3, r2
         );
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3724      	adds	r7, #36	; 0x24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f68:	d301      	bcc.n	8004f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e00f      	b.n	8004f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <SysTick_Config+0x40>)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f76:	210f      	movs	r1, #15
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	f7ff ff90 	bl	8004ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <SysTick_Config+0x40>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f86:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <SysTick_Config+0x40>)
 8004f88:	2207      	movs	r2, #7
 8004f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	e000e010 	.word	0xe000e010

08004f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ff2d 	bl	8004e04 <__NVIC_SetPriorityGrouping>
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	4603      	mov	r3, r0
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fc4:	f7ff ff42 	bl	8004e4c <__NVIC_GetPriorityGrouping>
 8004fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	6978      	ldr	r0, [r7, #20]
 8004fd0:	f7ff ff90 	bl	8004ef4 <NVIC_EncodePriority>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff ff5f 	bl	8004ea0 <__NVIC_SetPriority>
}
 8004fe2:	bf00      	nop
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff ff35 	bl	8004e68 <__NVIC_EnableIRQ>
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff ffa2 	bl	8004f58 <SysTick_Config>
 8005014:	4603      	mov	r3, r0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e043      	b.n	80050be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <HAL_DMA_Init+0xa8>)
 800503e:	4413      	add	r3, r2
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_DMA_Init+0xac>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	009a      	lsls	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <HAL_DMA_Init+0xb0>)
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800506a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800506e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr
 80050c8:	bffdfff8 	.word	0xbffdfff8
 80050cc:	cccccccd 	.word	0xcccccccd
 80050d0:	40020000 	.word	0x40020000

080050d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_DMA_Start_IT+0x20>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e04a      	b.n	800518a <HAL_DMA_Start_IT+0xb6>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005102:	2b01      	cmp	r3, #1
 8005104:	d13a      	bne.n	800517c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f9f4 	bl	8005518 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 020e 	orr.w	r2, r2, #14
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e00f      	b.n	800516a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0204 	bic.w	r2, r2, #4
 8005158:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 020a 	orr.w	r2, r2, #10
 8005168:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e005      	b.n	8005188 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005184:	2302      	movs	r3, #2
 8005186:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d008      	beq.n	80051ba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2204      	movs	r2, #4
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e020      	b.n	80051fc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 020e 	bic.w	r2, r2, #14
 80051c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	2101      	movs	r1, #1
 80051e4:	fa01 f202 	lsl.w	r2, r1, r2
 80051e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
	...

08005208 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800521a:	2b02      	cmp	r3, #2
 800521c:	d005      	beq.n	800522a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2204      	movs	r2, #4
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
 8005228:	e051      	b.n	80052ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 020e 	bic.w	r2, r2, #14
 8005238:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <HAL_DMA_Abort_IT+0xd0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d029      	beq.n	80052a8 <HAL_DMA_Abort_IT+0xa0>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a20      	ldr	r2, [pc, #128]	; (80052dc <HAL_DMA_Abort_IT+0xd4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d022      	beq.n	80052a4 <HAL_DMA_Abort_IT+0x9c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_DMA_Abort_IT+0xd8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d01a      	beq.n	800529e <HAL_DMA_Abort_IT+0x96>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <HAL_DMA_Abort_IT+0xdc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d012      	beq.n	8005298 <HAL_DMA_Abort_IT+0x90>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <HAL_DMA_Abort_IT+0xe0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00a      	beq.n	8005292 <HAL_DMA_Abort_IT+0x8a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_DMA_Abort_IT+0xe4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d102      	bne.n	800528c <HAL_DMA_Abort_IT+0x84>
 8005286:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800528a:	e00e      	b.n	80052aa <HAL_DMA_Abort_IT+0xa2>
 800528c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005290:	e00b      	b.n	80052aa <HAL_DMA_Abort_IT+0xa2>
 8005292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005296:	e008      	b.n	80052aa <HAL_DMA_Abort_IT+0xa2>
 8005298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800529c:	e005      	b.n	80052aa <HAL_DMA_Abort_IT+0xa2>
 800529e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052a2:	e002      	b.n	80052aa <HAL_DMA_Abort_IT+0xa2>
 80052a4:	2310      	movs	r3, #16
 80052a6:	e000      	b.n	80052aa <HAL_DMA_Abort_IT+0xa2>
 80052a8:	2301      	movs	r3, #1
 80052aa:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <HAL_DMA_Abort_IT+0xe8>)
 80052ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
    } 
  }
  return status;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40020008 	.word	0x40020008
 80052dc:	4002001c 	.word	0x4002001c
 80052e0:	40020030 	.word	0x40020030
 80052e4:	40020044 	.word	0x40020044
 80052e8:	40020058 	.word	0x40020058
 80052ec:	4002006c 	.word	0x4002006c
 80052f0:	40020000 	.word	0x40020000

080052f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	2204      	movs	r2, #4
 8005312:	409a      	lsls	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d04f      	beq.n	80053bc <HAL_DMA_IRQHandler+0xc8>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d04a      	beq.n	80053bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d107      	bne.n	8005344 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0204 	bic.w	r2, r2, #4
 8005342:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a66      	ldr	r2, [pc, #408]	; (80054e4 <HAL_DMA_IRQHandler+0x1f0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d029      	beq.n	80053a2 <HAL_DMA_IRQHandler+0xae>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a65      	ldr	r2, [pc, #404]	; (80054e8 <HAL_DMA_IRQHandler+0x1f4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d022      	beq.n	800539e <HAL_DMA_IRQHandler+0xaa>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a63      	ldr	r2, [pc, #396]	; (80054ec <HAL_DMA_IRQHandler+0x1f8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01a      	beq.n	8005398 <HAL_DMA_IRQHandler+0xa4>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a62      	ldr	r2, [pc, #392]	; (80054f0 <HAL_DMA_IRQHandler+0x1fc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d012      	beq.n	8005392 <HAL_DMA_IRQHandler+0x9e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a60      	ldr	r2, [pc, #384]	; (80054f4 <HAL_DMA_IRQHandler+0x200>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00a      	beq.n	800538c <HAL_DMA_IRQHandler+0x98>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5f      	ldr	r2, [pc, #380]	; (80054f8 <HAL_DMA_IRQHandler+0x204>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d102      	bne.n	8005386 <HAL_DMA_IRQHandler+0x92>
 8005380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005384:	e00e      	b.n	80053a4 <HAL_DMA_IRQHandler+0xb0>
 8005386:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800538a:	e00b      	b.n	80053a4 <HAL_DMA_IRQHandler+0xb0>
 800538c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005390:	e008      	b.n	80053a4 <HAL_DMA_IRQHandler+0xb0>
 8005392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005396:	e005      	b.n	80053a4 <HAL_DMA_IRQHandler+0xb0>
 8005398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539c:	e002      	b.n	80053a4 <HAL_DMA_IRQHandler+0xb0>
 800539e:	2340      	movs	r3, #64	; 0x40
 80053a0:	e000      	b.n	80053a4 <HAL_DMA_IRQHandler+0xb0>
 80053a2:	2304      	movs	r3, #4
 80053a4:	4a55      	ldr	r2, [pc, #340]	; (80054fc <HAL_DMA_IRQHandler+0x208>)
 80053a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8094 	beq.w	80054da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80053ba:	e08e      	b.n	80054da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	2202      	movs	r2, #2
 80053c2:	409a      	lsls	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d056      	beq.n	800547a <HAL_DMA_IRQHandler+0x186>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d051      	beq.n	800547a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 020a 	bic.w	r2, r2, #10
 80053f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a38      	ldr	r2, [pc, #224]	; (80054e4 <HAL_DMA_IRQHandler+0x1f0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d029      	beq.n	800545a <HAL_DMA_IRQHandler+0x166>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a37      	ldr	r2, [pc, #220]	; (80054e8 <HAL_DMA_IRQHandler+0x1f4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d022      	beq.n	8005456 <HAL_DMA_IRQHandler+0x162>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a35      	ldr	r2, [pc, #212]	; (80054ec <HAL_DMA_IRQHandler+0x1f8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01a      	beq.n	8005450 <HAL_DMA_IRQHandler+0x15c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <HAL_DMA_IRQHandler+0x1fc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d012      	beq.n	800544a <HAL_DMA_IRQHandler+0x156>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a32      	ldr	r2, [pc, #200]	; (80054f4 <HAL_DMA_IRQHandler+0x200>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00a      	beq.n	8005444 <HAL_DMA_IRQHandler+0x150>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a31      	ldr	r2, [pc, #196]	; (80054f8 <HAL_DMA_IRQHandler+0x204>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d102      	bne.n	800543e <HAL_DMA_IRQHandler+0x14a>
 8005438:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800543c:	e00e      	b.n	800545c <HAL_DMA_IRQHandler+0x168>
 800543e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005442:	e00b      	b.n	800545c <HAL_DMA_IRQHandler+0x168>
 8005444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005448:	e008      	b.n	800545c <HAL_DMA_IRQHandler+0x168>
 800544a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800544e:	e005      	b.n	800545c <HAL_DMA_IRQHandler+0x168>
 8005450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005454:	e002      	b.n	800545c <HAL_DMA_IRQHandler+0x168>
 8005456:	2320      	movs	r3, #32
 8005458:	e000      	b.n	800545c <HAL_DMA_IRQHandler+0x168>
 800545a:	2302      	movs	r3, #2
 800545c:	4a27      	ldr	r2, [pc, #156]	; (80054fc <HAL_DMA_IRQHandler+0x208>)
 800545e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	d034      	beq.n	80054da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005478:	e02f      	b.n	80054da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2208      	movs	r2, #8
 8005480:	409a      	lsls	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d028      	beq.n	80054dc <HAL_DMA_IRQHandler+0x1e8>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d023      	beq.n	80054dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 020e 	bic.w	r2, r2, #14
 80054a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	2101      	movs	r1, #1
 80054ae:	fa01 f202 	lsl.w	r2, r1, r2
 80054b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
    }
  }
  return;
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
}
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40020008 	.word	0x40020008
 80054e8:	4002001c 	.word	0x4002001c
 80054ec:	40020030 	.word	0x40020030
 80054f0:	40020044 	.word	0x40020044
 80054f4:	40020058 	.word	0x40020058
 80054f8:	4002006c 	.word	0x4002006c
 80054fc:	40020000 	.word	0x40020000

08005500 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f202 	lsl.w	r2, r1, r2
 8005534:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b10      	cmp	r3, #16
 8005544:	d108      	bne.n	8005558 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005556:	e007      	b.n	8005568 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr
	...

08005574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005574:	b480      	push	{r7}
 8005576:	b08b      	sub	sp, #44	; 0x2c
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800557e:	2300      	movs	r3, #0
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005582:	2300      	movs	r3, #0
 8005584:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005586:	e169      	b.n	800585c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005588:	2201      	movs	r2, #1
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	f040 8158 	bne.w	8005856 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4a9a      	ldr	r2, [pc, #616]	; (8005814 <HAL_GPIO_Init+0x2a0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d05e      	beq.n	800566e <HAL_GPIO_Init+0xfa>
 80055b0:	4a98      	ldr	r2, [pc, #608]	; (8005814 <HAL_GPIO_Init+0x2a0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d875      	bhi.n	80056a2 <HAL_GPIO_Init+0x12e>
 80055b6:	4a98      	ldr	r2, [pc, #608]	; (8005818 <HAL_GPIO_Init+0x2a4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d058      	beq.n	800566e <HAL_GPIO_Init+0xfa>
 80055bc:	4a96      	ldr	r2, [pc, #600]	; (8005818 <HAL_GPIO_Init+0x2a4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d86f      	bhi.n	80056a2 <HAL_GPIO_Init+0x12e>
 80055c2:	4a96      	ldr	r2, [pc, #600]	; (800581c <HAL_GPIO_Init+0x2a8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d052      	beq.n	800566e <HAL_GPIO_Init+0xfa>
 80055c8:	4a94      	ldr	r2, [pc, #592]	; (800581c <HAL_GPIO_Init+0x2a8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d869      	bhi.n	80056a2 <HAL_GPIO_Init+0x12e>
 80055ce:	4a94      	ldr	r2, [pc, #592]	; (8005820 <HAL_GPIO_Init+0x2ac>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d04c      	beq.n	800566e <HAL_GPIO_Init+0xfa>
 80055d4:	4a92      	ldr	r2, [pc, #584]	; (8005820 <HAL_GPIO_Init+0x2ac>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d863      	bhi.n	80056a2 <HAL_GPIO_Init+0x12e>
 80055da:	4a92      	ldr	r2, [pc, #584]	; (8005824 <HAL_GPIO_Init+0x2b0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d046      	beq.n	800566e <HAL_GPIO_Init+0xfa>
 80055e0:	4a90      	ldr	r2, [pc, #576]	; (8005824 <HAL_GPIO_Init+0x2b0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d85d      	bhi.n	80056a2 <HAL_GPIO_Init+0x12e>
 80055e6:	2b12      	cmp	r3, #18
 80055e8:	d82a      	bhi.n	8005640 <HAL_GPIO_Init+0xcc>
 80055ea:	2b12      	cmp	r3, #18
 80055ec:	d859      	bhi.n	80056a2 <HAL_GPIO_Init+0x12e>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <HAL_GPIO_Init+0x80>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	0800566f 	.word	0x0800566f
 80055f8:	08005649 	.word	0x08005649
 80055fc:	0800565b 	.word	0x0800565b
 8005600:	0800569d 	.word	0x0800569d
 8005604:	080056a3 	.word	0x080056a3
 8005608:	080056a3 	.word	0x080056a3
 800560c:	080056a3 	.word	0x080056a3
 8005610:	080056a3 	.word	0x080056a3
 8005614:	080056a3 	.word	0x080056a3
 8005618:	080056a3 	.word	0x080056a3
 800561c:	080056a3 	.word	0x080056a3
 8005620:	080056a3 	.word	0x080056a3
 8005624:	080056a3 	.word	0x080056a3
 8005628:	080056a3 	.word	0x080056a3
 800562c:	080056a3 	.word	0x080056a3
 8005630:	080056a3 	.word	0x080056a3
 8005634:	080056a3 	.word	0x080056a3
 8005638:	08005651 	.word	0x08005651
 800563c:	08005665 	.word	0x08005665
 8005640:	4a79      	ldr	r2, [pc, #484]	; (8005828 <HAL_GPIO_Init+0x2b4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005646:	e02c      	b.n	80056a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	623b      	str	r3, [r7, #32]
          break;
 800564e:	e029      	b.n	80056a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	3304      	adds	r3, #4
 8005656:	623b      	str	r3, [r7, #32]
          break;
 8005658:	e024      	b.n	80056a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	3308      	adds	r3, #8
 8005660:	623b      	str	r3, [r7, #32]
          break;
 8005662:	e01f      	b.n	80056a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	330c      	adds	r3, #12
 800566a:	623b      	str	r3, [r7, #32]
          break;
 800566c:	e01a      	b.n	80056a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005676:	2304      	movs	r3, #4
 8005678:	623b      	str	r3, [r7, #32]
          break;
 800567a:	e013      	b.n	80056a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005684:	2308      	movs	r3, #8
 8005686:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	611a      	str	r2, [r3, #16]
          break;
 800568e:	e009      	b.n	80056a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005690:	2308      	movs	r3, #8
 8005692:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	615a      	str	r2, [r3, #20]
          break;
 800569a:	e003      	b.n	80056a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800569c:	2300      	movs	r3, #0
 800569e:	623b      	str	r3, [r7, #32]
          break;
 80056a0:	e000      	b.n	80056a4 <HAL_GPIO_Init+0x130>
          break;
 80056a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	2bff      	cmp	r3, #255	; 0xff
 80056a8:	d801      	bhi.n	80056ae <HAL_GPIO_Init+0x13a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	e001      	b.n	80056b2 <HAL_GPIO_Init+0x13e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3304      	adds	r3, #4
 80056b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2bff      	cmp	r3, #255	; 0xff
 80056b8:	d802      	bhi.n	80056c0 <HAL_GPIO_Init+0x14c>
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	e002      	b.n	80056c6 <HAL_GPIO_Init+0x152>
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	3b08      	subs	r3, #8
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	210f      	movs	r1, #15
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	401a      	ands	r2, r3
 80056d8:	6a39      	ldr	r1, [r7, #32]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	431a      	orrs	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80b1 	beq.w	8005856 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80056f4:	4b4d      	ldr	r3, [pc, #308]	; (800582c <HAL_GPIO_Init+0x2b8>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	4a4c      	ldr	r2, [pc, #304]	; (800582c <HAL_GPIO_Init+0x2b8>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6193      	str	r3, [r2, #24]
 8005700:	4b4a      	ldr	r3, [pc, #296]	; (800582c <HAL_GPIO_Init+0x2b8>)
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800570c:	4a48      	ldr	r2, [pc, #288]	; (8005830 <HAL_GPIO_Init+0x2bc>)
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	089b      	lsrs	r3, r3, #2
 8005712:	3302      	adds	r3, #2
 8005714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005718:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	220f      	movs	r2, #15
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4013      	ands	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a40      	ldr	r2, [pc, #256]	; (8005834 <HAL_GPIO_Init+0x2c0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_GPIO_Init+0x1ec>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a3f      	ldr	r2, [pc, #252]	; (8005838 <HAL_GPIO_Init+0x2c4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00d      	beq.n	800575c <HAL_GPIO_Init+0x1e8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a3e      	ldr	r2, [pc, #248]	; (800583c <HAL_GPIO_Init+0x2c8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d007      	beq.n	8005758 <HAL_GPIO_Init+0x1e4>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a3d      	ldr	r2, [pc, #244]	; (8005840 <HAL_GPIO_Init+0x2cc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d101      	bne.n	8005754 <HAL_GPIO_Init+0x1e0>
 8005750:	2303      	movs	r3, #3
 8005752:	e006      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 8005754:	2304      	movs	r3, #4
 8005756:	e004      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 8005758:	2302      	movs	r3, #2
 800575a:	e002      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 8005760:	2300      	movs	r3, #0
 8005762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005764:	f002 0203 	and.w	r2, r2, #3
 8005768:	0092      	lsls	r2, r2, #2
 800576a:	4093      	lsls	r3, r2
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005772:	492f      	ldr	r1, [pc, #188]	; (8005830 <HAL_GPIO_Init+0x2bc>)
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	3302      	adds	r3, #2
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d006      	beq.n	800579a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800578c:	4b2d      	ldr	r3, [pc, #180]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	492c      	ldr	r1, [pc, #176]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	4313      	orrs	r3, r2
 8005796:	600b      	str	r3, [r1, #0]
 8005798:	e006      	b.n	80057a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800579a:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	4928      	ldr	r1, [pc, #160]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80057b4:	4b23      	ldr	r3, [pc, #140]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	4922      	ldr	r1, [pc, #136]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	604b      	str	r3, [r1, #4]
 80057c0:	e006      	b.n	80057d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	491e      	ldr	r1, [pc, #120]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	4918      	ldr	r1, [pc, #96]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	608b      	str	r3, [r1, #8]
 80057e8:	e006      	b.n	80057f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80057ea:	4b16      	ldr	r3, [pc, #88]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	43db      	mvns	r3, r3
 80057f2:	4914      	ldr	r1, [pc, #80]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d021      	beq.n	8005848 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	490e      	ldr	r1, [pc, #56]	; (8005844 <HAL_GPIO_Init+0x2d0>)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	4313      	orrs	r3, r2
 800580e:	60cb      	str	r3, [r1, #12]
 8005810:	e021      	b.n	8005856 <HAL_GPIO_Init+0x2e2>
 8005812:	bf00      	nop
 8005814:	10320000 	.word	0x10320000
 8005818:	10310000 	.word	0x10310000
 800581c:	10220000 	.word	0x10220000
 8005820:	10210000 	.word	0x10210000
 8005824:	10120000 	.word	0x10120000
 8005828:	10110000 	.word	0x10110000
 800582c:	40021000 	.word	0x40021000
 8005830:	40010000 	.word	0x40010000
 8005834:	40010800 	.word	0x40010800
 8005838:	40010c00 	.word	0x40010c00
 800583c:	40011000 	.word	0x40011000
 8005840:	40011400 	.word	0x40011400
 8005844:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <HAL_GPIO_Init+0x304>)
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	43db      	mvns	r3, r3
 8005850:	4909      	ldr	r1, [pc, #36]	; (8005878 <HAL_GPIO_Init+0x304>)
 8005852:	4013      	ands	r3, r2
 8005854:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	3301      	adds	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	fa22 f303 	lsr.w	r3, r2, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	f47f ae8e 	bne.w	8005588 <HAL_GPIO_Init+0x14>
  }
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	372c      	adds	r7, #44	; 0x2c
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr
 8005878:	40010400 	.word	0x40010400

0800587c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	807b      	strh	r3, [r7, #2]
 8005888:	4613      	mov	r3, r2
 800588a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800588c:	787b      	ldrb	r3, [r7, #1]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005892:	887a      	ldrh	r2, [r7, #2]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005898:	e003      	b.n	80058a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800589a:	887b      	ldrh	r3, [r7, #2]
 800589c:	041a      	lsls	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	611a      	str	r2, [r3, #16]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058be:	887a      	ldrh	r2, [r7, #2]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4013      	ands	r3, r2
 80058c4:	041a      	lsls	r2, r3, #16
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	43d9      	mvns	r1, r3
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	400b      	ands	r3, r1
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	611a      	str	r2, [r3, #16]
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr
	...

080058e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e12b      	b.n	8005b4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fd fc00 	bl	800310c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005944:	f003 f874 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 8005948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4a81      	ldr	r2, [pc, #516]	; (8005b54 <HAL_I2C_Init+0x274>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d807      	bhi.n	8005964 <HAL_I2C_Init+0x84>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4a80      	ldr	r2, [pc, #512]	; (8005b58 <HAL_I2C_Init+0x278>)
 8005958:	4293      	cmp	r3, r2
 800595a:	bf94      	ite	ls
 800595c:	2301      	movls	r3, #1
 800595e:	2300      	movhi	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e006      	b.n	8005972 <HAL_I2C_Init+0x92>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a7d      	ldr	r2, [pc, #500]	; (8005b5c <HAL_I2C_Init+0x27c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	bf94      	ite	ls
 800596c:	2301      	movls	r3, #1
 800596e:	2300      	movhi	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0e7      	b.n	8005b4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a78      	ldr	r2, [pc, #480]	; (8005b60 <HAL_I2C_Init+0x280>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	0c9b      	lsrs	r3, r3, #18
 8005984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4a6a      	ldr	r2, [pc, #424]	; (8005b54 <HAL_I2C_Init+0x274>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d802      	bhi.n	80059b4 <HAL_I2C_Init+0xd4>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3301      	adds	r3, #1
 80059b2:	e009      	b.n	80059c8 <HAL_I2C_Init+0xe8>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	4a69      	ldr	r2, [pc, #420]	; (8005b64 <HAL_I2C_Init+0x284>)
 80059c0:	fba2 2303 	umull	r2, r3, r2, r3
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	3301      	adds	r3, #1
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	495c      	ldr	r1, [pc, #368]	; (8005b54 <HAL_I2C_Init+0x274>)
 80059e4:	428b      	cmp	r3, r1
 80059e6:	d819      	bhi.n	8005a1c <HAL_I2C_Init+0x13c>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	1e59      	subs	r1, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059fc:	400b      	ands	r3, r1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_I2C_Init+0x138>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1e59      	subs	r1, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a10:	3301      	adds	r3, #1
 8005a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a16:	e051      	b.n	8005abc <HAL_I2C_Init+0x1dc>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	e04f      	b.n	8005abc <HAL_I2C_Init+0x1dc>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d111      	bne.n	8005a48 <HAL_I2C_Init+0x168>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1e58      	subs	r0, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	440b      	add	r3, r1
 8005a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a36:	3301      	adds	r3, #1
 8005a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bf0c      	ite	eq
 8005a40:	2301      	moveq	r3, #1
 8005a42:	2300      	movne	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e012      	b.n	8005a6e <HAL_I2C_Init+0x18e>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	1e58      	subs	r0, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	0099      	lsls	r1, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_I2C_Init+0x196>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e022      	b.n	8005abc <HAL_I2C_Init+0x1dc>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10e      	bne.n	8005a9c <HAL_I2C_Init+0x1bc>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1e58      	subs	r0, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	440b      	add	r3, r1
 8005a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a90:	3301      	adds	r3, #1
 8005a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9a:	e00f      	b.n	8005abc <HAL_I2C_Init+0x1dc>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1e58      	subs	r0, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	0099      	lsls	r1, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	6809      	ldr	r1, [r1, #0]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69da      	ldr	r2, [r3, #28]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6911      	ldr	r1, [r2, #16]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68d2      	ldr	r2, [r2, #12]
 8005af6:	4311      	orrs	r1, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	000186a0 	.word	0x000186a0
 8005b58:	001e847f 	.word	0x001e847f
 8005b5c:	003d08ff 	.word	0x003d08ff
 8005b60:	431bde83 	.word	0x431bde83
 8005b64:	10624dd3 	.word	0x10624dd3

08005b68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	817b      	strh	r3, [r7, #10]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	813b      	strh	r3, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b82:	f7fd ff53 	bl	8003a2c <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	f040 80d9 	bne.w	8005d48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	2319      	movs	r3, #25
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	496d      	ldr	r1, [pc, #436]	; (8005d54 <HAL_I2C_Mem_Write+0x1ec>)
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f002 f949 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
 8005bae:	e0cc      	b.n	8005d4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2C_Mem_Write+0x56>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e0c5      	b.n	8005d4a <HAL_I2C_Mem_Write+0x1e2>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d007      	beq.n	8005be4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2221      	movs	r2, #33	; 0x21
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2240      	movs	r2, #64	; 0x40
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a4d      	ldr	r2, [pc, #308]	; (8005d58 <HAL_I2C_Mem_Write+0x1f0>)
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c26:	88f8      	ldrh	r0, [r7, #6]
 8005c28:	893a      	ldrh	r2, [r7, #8]
 8005c2a:	8979      	ldrh	r1, [r7, #10]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	4603      	mov	r3, r0
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f001 fed8 	bl	80079ec <I2C_RequestMemoryWrite>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d052      	beq.n	8005ce8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e081      	b.n	8005d4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f002 f9ca 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00d      	beq.n	8005c72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d107      	bne.n	8005c6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e06b      	b.n	8005d4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	781a      	ldrb	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d11b      	bne.n	8005ce8 <HAL_I2C_Mem_Write+0x180>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d017      	beq.n	8005ce8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	781a      	ldrb	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1aa      	bne.n	8005c46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f002 f9b6 	bl	8008066 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d107      	bne.n	8005d18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e016      	b.n	8005d4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	00100002 	.word	0x00100002
 8005d58:	ffff0000 	.word	0xffff0000

08005d5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08c      	sub	sp, #48	; 0x30
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	817b      	strh	r3, [r7, #10]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	813b      	strh	r3, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d7a:	f7fd fe57 	bl	8003a2c <HAL_GetTick>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	f040 8244 	bne.w	8006216 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	2319      	movs	r3, #25
 8005d94:	2201      	movs	r2, #1
 8005d96:	4982      	ldr	r1, [pc, #520]	; (8005fa0 <HAL_I2C_Mem_Read+0x244>)
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f002 f84d 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
 8005da6:	e237      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_I2C_Mem_Read+0x5a>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e230      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d007      	beq.n	8005ddc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2222      	movs	r2, #34	; 0x22
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2240      	movs	r2, #64	; 0x40
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4a62      	ldr	r2, [pc, #392]	; (8005fa4 <HAL_I2C_Mem_Read+0x248>)
 8005e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e1e:	88f8      	ldrh	r0, [r7, #6]
 8005e20:	893a      	ldrh	r2, [r7, #8]
 8005e22:	8979      	ldrh	r1, [r7, #10]
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f001 fe72 	bl	8007b18 <I2C_RequestMemoryRead>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e1ec      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d113      	bne.n	8005e6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e1c0      	b.n	80061f0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d11e      	bne.n	8005eb4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e86:	b672      	cpsid	i
}
 8005e88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005eb0:	b662      	cpsie	i
}
 8005eb2:	e035      	b.n	8005f20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d11e      	bne.n	8005efa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ecc:	b672      	cpsid	i
}
 8005ece:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ef6:	b662      	cpsie	i
}
 8005ef8:	e012      	b.n	8005f20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005f20:	e166      	b.n	80061f0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	f200 811f 	bhi.w	800616a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d123      	bne.n	8005f7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f002 f907 	bl	800814c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e167      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f7a:	e139      	b.n	80061f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d152      	bne.n	800602a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	4906      	ldr	r1, [pc, #24]	; (8005fa8 <HAL_I2C_Mem_Read+0x24c>)
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 ff52 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e13c      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
 8005f9e:	bf00      	nop
 8005fa0:	00100002 	.word	0x00100002
 8005fa4:	ffff0000 	.word	0xffff0000
 8005fa8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005fac:	b672      	cpsid	i
}
 8005fae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ff2:	b662      	cpsie	i
}
 8005ff4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006028:	e0e2      	b.n	80061f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	2200      	movs	r2, #0
 8006032:	497b      	ldr	r1, [pc, #492]	; (8006220 <HAL_I2C_Mem_Read+0x4c4>)
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f001 feff 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0e9      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006052:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006054:	b672      	cpsid	i
}
 8006056:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800608a:	4b66      	ldr	r3, [pc, #408]	; (8006224 <HAL_I2C_Mem_Read+0x4c8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	4a65      	ldr	r2, [pc, #404]	; (8006228 <HAL_I2C_Mem_Read+0x4cc>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	0a1a      	lsrs	r2, r3, #8
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00da      	lsls	r2, r3, #3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d118      	bne.n	80060e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f043 0220 	orr.w	r2, r3, #32
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80060d2:	b662      	cpsie	i
}
 80060d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e09a      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d1d9      	bne.n	80060a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006132:	b662      	cpsie	i
}
 8006134:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006168:	e042      	b.n	80061f0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800616a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f001 ffec 	bl	800814c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e04c      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d118      	bne.n	80061f0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f47f ae94 	bne.w	8005f22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006216:	2302      	movs	r3, #2
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	3728      	adds	r7, #40	; 0x28
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	00010004 	.word	0x00010004
 8006224:	20000004 	.word	0x20000004
 8006228:	14f8b589 	.word	0x14f8b589

0800622c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800624c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b10      	cmp	r3, #16
 800625a:	d003      	beq.n	8006264 <HAL_I2C_EV_IRQHandler+0x38>
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b40      	cmp	r3, #64	; 0x40
 8006260:	f040 80c1 	bne.w	80063e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10d      	bne.n	800629a <HAL_I2C_EV_IRQHandler+0x6e>
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006284:	d003      	beq.n	800628e <HAL_I2C_EV_IRQHandler+0x62>
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800628c:	d101      	bne.n	8006292 <HAL_I2C_EV_IRQHandler+0x66>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <HAL_I2C_EV_IRQHandler+0x68>
 8006292:	2300      	movs	r3, #0
 8006294:	2b01      	cmp	r3, #1
 8006296:	f000 8132 	beq.w	80064fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00c      	beq.n	80062be <HAL_I2C_EV_IRQHandler+0x92>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	0a5b      	lsrs	r3, r3, #9
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d006      	beq.n	80062be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 ffcf 	bl	8008254 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fd77 	bl	8006daa <I2C_Master_SB>
 80062bc:	e092      	b.n	80063e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	08db      	lsrs	r3, r3, #3
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <HAL_I2C_EV_IRQHandler+0xb2>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	0a5b      	lsrs	r3, r3, #9
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fdec 	bl	8006eb4 <I2C_Master_ADD10>
 80062dc:	e082      	b.n	80063e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <HAL_I2C_EV_IRQHandler+0xd2>
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	0a5b      	lsrs	r3, r3, #9
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fe05 	bl	8006f06 <I2C_Master_ADDR>
 80062fc:	e072      	b.n	80063e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	089b      	lsrs	r3, r3, #2
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03b      	beq.n	8006382 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006318:	f000 80f3 	beq.w	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00f      	beq.n	8006348 <HAL_I2C_EV_IRQHandler+0x11c>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	0a9b      	lsrs	r3, r3, #10
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <HAL_I2C_EV_IRQHandler+0x11c>
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	089b      	lsrs	r3, r3, #2
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d103      	bne.n	8006348 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f9f1 	bl	8006728 <I2C_MasterTransmit_TXE>
 8006346:	e04d      	b.n	80063e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	089b      	lsrs	r3, r3, #2
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80d6 	beq.w	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	0a5b      	lsrs	r3, r3, #9
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 80cf 	beq.w	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b21      	cmp	r3, #33	; 0x21
 8006368:	d103      	bne.n	8006372 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fa78 	bl	8006860 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006370:	e0c7      	b.n	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	f040 80c4 	bne.w	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fae6 	bl	800694c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006380:	e0bf      	b.n	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006390:	f000 80b7 	beq.w	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00f      	beq.n	80063c0 <HAL_I2C_EV_IRQHandler+0x194>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	0a9b      	lsrs	r3, r3, #10
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d009      	beq.n	80063c0 <HAL_I2C_EV_IRQHandler+0x194>
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fb5b 	bl	8006a74 <I2C_MasterReceive_RXNE>
 80063be:	e011      	b.n	80063e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 809a 	beq.w	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	0a5b      	lsrs	r3, r3, #9
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8093 	beq.w	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fbfa 	bl	8006bd6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063e2:	e08e      	b.n	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
 80063e4:	e08d      	b.n	8006502 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e007      	b.n	8006408 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <HAL_I2C_EV_IRQHandler+0x20e>
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	0a5b      	lsrs	r3, r3, #9
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00c      	beq.n	800643a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006430:	69b9      	ldr	r1, [r7, #24]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 ffbe 	bl	80073b4 <I2C_Slave_ADDR>
 8006438:	e066      	b.n	8006508 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <HAL_I2C_EV_IRQHandler+0x22e>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	0a5b      	lsrs	r3, r3, #9
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fff8 	bl	8007448 <I2C_Slave_STOPF>
 8006458:	e056      	b.n	8006508 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b21      	cmp	r3, #33	; 0x21
 800645e:	d002      	beq.n	8006466 <HAL_I2C_EV_IRQHandler+0x23a>
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	2b29      	cmp	r3, #41	; 0x29
 8006464:	d125      	bne.n	80064b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	09db      	lsrs	r3, r3, #7
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00f      	beq.n	8006492 <HAL_I2C_EV_IRQHandler+0x266>
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	0a9b      	lsrs	r3, r3, #10
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <HAL_I2C_EV_IRQHandler+0x266>
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	089b      	lsrs	r3, r3, #2
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fed6 	bl	800723c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006490:	e039      	b.n	8006506 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d033      	beq.n	8006506 <HAL_I2C_EV_IRQHandler+0x2da>
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	0a5b      	lsrs	r3, r3, #9
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02d      	beq.n	8006506 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 ff03 	bl	80072b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064b0:	e029      	b.n	8006506 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	099b      	lsrs	r3, r3, #6
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00f      	beq.n	80064de <HAL_I2C_EV_IRQHandler+0x2b2>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	0a9b      	lsrs	r3, r3, #10
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <HAL_I2C_EV_IRQHandler+0x2b2>
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	089b      	lsrs	r3, r3, #2
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 ff0d 	bl	80072f6 <I2C_SlaveReceive_RXNE>
 80064dc:	e014      	b.n	8006508 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00e      	beq.n	8006508 <HAL_I2C_EV_IRQHandler+0x2dc>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	0a5b      	lsrs	r3, r3, #9
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 ff3b 	bl	8007372 <I2C_SlaveReceive_BTF>
 80064fc:	e004      	b.n	8006508 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006506:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b08a      	sub	sp, #40	; 0x28
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006526:	2300      	movs	r3, #0
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006530:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d016      	beq.n	800656c <HAL_I2C_ER_IRQHandler+0x5e>
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	0a1b      	lsrs	r3, r3, #8
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d010      	beq.n	800656c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800655a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800656a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	0a5b      	lsrs	r3, r3, #9
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00e      	beq.n	8006596 <HAL_I2C_ER_IRQHandler+0x88>
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	f043 0302 	orr.w	r3, r3, #2
 800658a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006594:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	0a9b      	lsrs	r3, r3, #10
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d03f      	beq.n	8006622 <HAL_I2C_ER_IRQHandler+0x114>
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	0a1b      	lsrs	r3, r3, #8
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d039      	beq.n	8006622 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80065ae:	7efb      	ldrb	r3, [r7, #27]
 80065b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80065c8:	7ebb      	ldrb	r3, [r7, #26]
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d112      	bne.n	80065f4 <HAL_I2C_ER_IRQHandler+0xe6>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10f      	bne.n	80065f4 <HAL_I2C_ER_IRQHandler+0xe6>
 80065d4:	7cfb      	ldrb	r3, [r7, #19]
 80065d6:	2b21      	cmp	r3, #33	; 0x21
 80065d8:	d008      	beq.n	80065ec <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80065da:	7cfb      	ldrb	r3, [r7, #19]
 80065dc:	2b29      	cmp	r3, #41	; 0x29
 80065de:	d005      	beq.n	80065ec <HAL_I2C_ER_IRQHandler+0xde>
 80065e0:	7cfb      	ldrb	r3, [r7, #19]
 80065e2:	2b28      	cmp	r3, #40	; 0x28
 80065e4:	d106      	bne.n	80065f4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b21      	cmp	r3, #33	; 0x21
 80065ea:	d103      	bne.n	80065f4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 f85b 	bl	80076a8 <I2C_Slave_AF>
 80065f2:	e016      	b.n	8006622 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	f043 0304 	orr.w	r3, r3, #4
 8006604:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006606:	7efb      	ldrb	r3, [r7, #27]
 8006608:	2b10      	cmp	r3, #16
 800660a:	d002      	beq.n	8006612 <HAL_I2C_ER_IRQHandler+0x104>
 800660c:	7efb      	ldrb	r3, [r7, #27]
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d107      	bne.n	8006622 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006620:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	0adb      	lsrs	r3, r3, #11
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <HAL_I2C_ER_IRQHandler+0x13e>
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	0a1b      	lsrs	r3, r3, #8
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	f043 0308 	orr.w	r3, r3, #8
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800664a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 f892 	bl	8007788 <I2C_ITError>
  }
}
 8006664:	bf00      	nop
 8006666:	3728      	adds	r7, #40	; 0x28
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr

0800667e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr

08006690 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
 80066c0:	4613      	mov	r3, r2
 80066c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr

080066e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr

08006716 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006736:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800673e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674a:	2b00      	cmp	r3, #0
 800674c:	d150      	bne.n	80067f0 <I2C_MasterTransmit_TXE+0xc8>
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b21      	cmp	r3, #33	; 0x21
 8006752:	d14d      	bne.n	80067f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b08      	cmp	r3, #8
 8006758:	d01d      	beq.n	8006796 <I2C_MasterTransmit_TXE+0x6e>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b20      	cmp	r3, #32
 800675e:	d01a      	beq.n	8006796 <I2C_MasterTransmit_TXE+0x6e>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006766:	d016      	beq.n	8006796 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006776:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2211      	movs	r2, #17
 800677c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ff6c 	bl	800666c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006794:	e060      	b.n	8006858 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d107      	bne.n	80067e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff ff81 	bl	80066e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067de:	e03b      	b.n	8006858 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff3f 	bl	800666c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067ee:	e033      	b.n	8006858 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	2b21      	cmp	r3, #33	; 0x21
 80067f4:	d005      	beq.n	8006802 <I2C_MasterTransmit_TXE+0xda>
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d12d      	bne.n	8006858 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	2b22      	cmp	r3, #34	; 0x22
 8006800:	d12a      	bne.n	8006858 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d108      	bne.n	800681e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800681a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800681c:	e01c      	b.n	8006858 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d103      	bne.n	8006832 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f88e 	bl	800694c <I2C_MemoryTransmit_TXE_BTF>
}
 8006830:	e012      	b.n	8006858 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	781a      	ldrb	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006856:	e7ff      	b.n	8006858 <I2C_MasterTransmit_TXE+0x130>
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b21      	cmp	r3, #33	; 0x21
 8006878:	d164      	bne.n	8006944 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d012      	beq.n	80068aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80068a8:	e04c      	b.n	8006944 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d01d      	beq.n	80068ec <I2C_MasterTransmit_BTF+0x8c>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d01a      	beq.n	80068ec <I2C_MasterTransmit_BTF+0x8c>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068bc:	d016      	beq.n	80068ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2211      	movs	r2, #17
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fec1 	bl	800666c <HAL_I2C_MasterTxCpltCallback>
}
 80068ea:	e02b      	b.n	8006944 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b40      	cmp	r3, #64	; 0x40
 8006924:	d107      	bne.n	8006936 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff fed6 	bl	80066e0 <HAL_I2C_MemTxCpltCallback>
}
 8006934:	e006      	b.n	8006944 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fe94 	bl	800666c <HAL_I2C_MasterTxCpltCallback>
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006960:	2b00      	cmp	r3, #0
 8006962:	d11d      	bne.n	80069a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d10b      	bne.n	8006984 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006970:	b2da      	uxtb	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697c:	1c9a      	adds	r2, r3, #2
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006982:	e073      	b.n	8006a6c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006988:	b29b      	uxth	r3, r3
 800698a:	121b      	asrs	r3, r3, #8
 800698c:	b2da      	uxtb	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800699e:	e065      	b.n	8006a6c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d10b      	bne.n	80069c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069be:	e055      	b.n	8006a6c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d151      	bne.n	8006a6c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2b22      	cmp	r3, #34	; 0x22
 80069cc:	d10d      	bne.n	80069ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069e8:	e040      	b.n	8006a6c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d015      	beq.n	8006a20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b21      	cmp	r3, #33	; 0x21
 80069f8:	d112      	bne.n	8006a20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	781a      	ldrb	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a1e:	e025      	b.n	8006a6c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d120      	bne.n	8006a6c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b21      	cmp	r3, #33	; 0x21
 8006a2e:	d11d      	bne.n	8006a6c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a3e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fe3a 	bl	80066e0 <HAL_I2C_MemTxCpltCallback>
}
 8006a6c:	bf00      	nop
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b22      	cmp	r3, #34	; 0x22
 8006a86:	f040 80a2 	bne.w	8006bce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d921      	bls.n	8006adc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	f040 8082 	bne.w	8006bce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006ada:	e078      	b.n	8006bce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d074      	beq.n	8006bce <I2C_MasterReceive_RXNE+0x15a>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d002      	beq.n	8006af0 <I2C_MasterReceive_RXNE+0x7c>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d16e      	bne.n	8006bce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 faf9 	bl	80080e8 <I2C_WaitOnSTOPRequestThroughIT>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d142      	bne.n	8006b82 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d10a      	bne.n	8006b6c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff fdc4 	bl	80066f2 <HAL_I2C_MemRxCpltCallback>
}
 8006b6a:	e030      	b.n	8006bce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2212      	movs	r2, #18
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff fd7f 	bl	800667e <HAL_I2C_MasterRxCpltCallback>
}
 8006b80:	e025      	b.n	8006bce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff fd9b 	bl	8006704 <HAL_I2C_ErrorCallback>
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	d11b      	bne.n	8006c26 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bfc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006c24:	e0bd      	b.n	8006da2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d129      	bne.n	8006c84 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d00a      	beq.n	8006c5c <I2C_MasterReceive_BTF+0x86>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d007      	beq.n	8006c5c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c82:	e08e      	b.n	8006da2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d176      	bne.n	8006d7c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d002      	beq.n	8006c9a <I2C_MasterReceive_BTF+0xc4>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b10      	cmp	r3, #16
 8006c98:	d108      	bne.n	8006cac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e019      	b.n	8006ce0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d002      	beq.n	8006cb8 <I2C_MasterReceive_BTF+0xe2>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d108      	bne.n	8006cca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e00a      	b.n	8006ce0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d007      	beq.n	8006ce0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cde:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b40      	cmp	r3, #64	; 0x40
 8006d4e:	d10a      	bne.n	8006d66 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff fcc7 	bl	80066f2 <HAL_I2C_MemRxCpltCallback>
}
 8006d64:	e01d      	b.n	8006da2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2212      	movs	r2, #18
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fc82 	bl	800667e <HAL_I2C_MasterRxCpltCallback>
}
 8006d7a:	e012      	b.n	8006da2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b40      	cmp	r3, #64	; 0x40
 8006dbc:	d117      	bne.n	8006dee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dd6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006dd8:	e067      	b.n	8006eaa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f043 0301 	orr.w	r3, r3, #1
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	611a      	str	r2, [r3, #16]
}
 8006dec:	e05d      	b.n	8006eaa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df6:	d133      	bne.n	8006e60 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b21      	cmp	r3, #33	; 0x21
 8006e02:	d109      	bne.n	8006e18 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e14:	611a      	str	r2, [r3, #16]
 8006e16:	e008      	b.n	8006e2a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <I2C_Master_SB+0x92>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d108      	bne.n	8006e4e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d032      	beq.n	8006eaa <I2C_Master_SB+0x100>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d02d      	beq.n	8006eaa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e5c:	605a      	str	r2, [r3, #4]
}
 8006e5e:	e024      	b.n	8006eaa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10e      	bne.n	8006e86 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	11db      	asrs	r3, r3, #7
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0306 	and.w	r3, r3, #6
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f063 030f 	orn	r3, r3, #15
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	611a      	str	r2, [r3, #16]
}
 8006e84:	e011      	b.n	8006eaa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d10d      	bne.n	8006eaa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	11db      	asrs	r3, r3, #7
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 0306 	and.w	r3, r3, #6
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f063 030e 	orn	r3, r3, #14
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	611a      	str	r2, [r3, #16]
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <I2C_Master_ADD10+0x26>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d108      	bne.n	8006eec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00c      	beq.n	8006efc <I2C_Master_ADD10+0x48>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006efa:	605a      	str	r2, [r3, #4]
  }
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr

08006f06 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b091      	sub	sp, #68	; 0x44
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b22      	cmp	r3, #34	; 0x22
 8006f2e:	f040 8174 	bne.w	800721a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10f      	bne.n	8006f5a <I2C_Master_ADDR+0x54>
 8006f3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d10b      	bne.n	8006f5a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f42:	2300      	movs	r3, #0
 8006f44:	633b      	str	r3, [r7, #48]	; 0x30
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	e16b      	b.n	8007232 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d11d      	bne.n	8006f9e <I2C_Master_ADDR+0x98>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f6a:	d118      	bne.n	8006f9e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f90:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	651a      	str	r2, [r3, #80]	; 0x50
 8006f9c:	e149      	b.n	8007232 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d113      	bne.n	8006fd0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e120      	b.n	8007212 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	f040 808a 	bne.w	80070f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fe2:	d137      	bne.n	8007054 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007002:	d113      	bne.n	800702c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007012:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007014:	2300      	movs	r3, #0
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	e0f2      	b.n	8007212 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800702c:	2300      	movs	r3, #0
 800702e:	623b      	str	r3, [r7, #32]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	623b      	str	r3, [r7, #32]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	e0de      	b.n	8007212 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	2b08      	cmp	r3, #8
 8007058:	d02e      	beq.n	80070b8 <I2C_Master_ADDR+0x1b2>
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	2b20      	cmp	r3, #32
 800705e:	d02b      	beq.n	80070b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	2b12      	cmp	r3, #18
 8007064:	d102      	bne.n	800706c <I2C_Master_ADDR+0x166>
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	2b01      	cmp	r3, #1
 800706a:	d125      	bne.n	80070b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	2b04      	cmp	r3, #4
 8007070:	d00e      	beq.n	8007090 <I2C_Master_ADDR+0x18a>
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	2b02      	cmp	r3, #2
 8007076:	d00b      	beq.n	8007090 <I2C_Master_ADDR+0x18a>
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	2b10      	cmp	r3, #16
 800707c:	d008      	beq.n	8007090 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e007      	b.n	80070a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800709e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a0:	2300      	movs	r3, #0
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	e0ac      	b.n	8007212 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	61bb      	str	r3, [r7, #24]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	e090      	b.n	8007212 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d158      	bne.n	80071ac <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d021      	beq.n	8007144 <I2C_Master_ADDR+0x23e>
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	2b02      	cmp	r3, #2
 8007104:	d01e      	beq.n	8007144 <I2C_Master_ADDR+0x23e>
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	2b10      	cmp	r3, #16
 800710a:	d01b      	beq.n	8007144 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800711a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e012      	b.n	800716a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007152:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007178:	d14b      	bne.n	8007212 <I2C_Master_ADDR+0x30c>
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007180:	d00b      	beq.n	800719a <I2C_Master_ADDR+0x294>
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	2b01      	cmp	r3, #1
 8007186:	d008      	beq.n	800719a <I2C_Master_ADDR+0x294>
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	2b08      	cmp	r3, #8
 800718c:	d005      	beq.n	800719a <I2C_Master_ADDR+0x294>
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	2b10      	cmp	r3, #16
 8007192:	d002      	beq.n	800719a <I2C_Master_ADDR+0x294>
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	2b20      	cmp	r3, #32
 8007198:	d13b      	bne.n	8007212 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071a8:	605a      	str	r2, [r3, #4]
 80071aa:	e032      	b.n	8007212 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ca:	d117      	bne.n	80071fc <I2C_Master_ADDR+0x2f6>
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071d2:	d00b      	beq.n	80071ec <I2C_Master_ADDR+0x2e6>
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d008      	beq.n	80071ec <I2C_Master_ADDR+0x2e6>
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d005      	beq.n	80071ec <I2C_Master_ADDR+0x2e6>
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	2b10      	cmp	r3, #16
 80071e4:	d002      	beq.n	80071ec <I2C_Master_ADDR+0x2e6>
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	d107      	bne.n	80071fc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007218:	e00b      	b.n	8007232 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800721a:	2300      	movs	r3, #0
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	60bb      	str	r3, [r7, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	68bb      	ldr	r3, [r7, #8]
}
 8007230:	e7ff      	b.n	8007232 <I2C_Master_ADDR+0x32c>
 8007232:	bf00      	nop
 8007234:	3744      	adds	r7, #68	; 0x44
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d02b      	beq.n	80072ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d114      	bne.n	80072ae <I2C_SlaveTransmit_TXE+0x72>
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	2b29      	cmp	r3, #41	; 0x29
 8007288:	d111      	bne.n	80072ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007298:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2221      	movs	r2, #33	; 0x21
 800729e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2228      	movs	r2, #40	; 0x28
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff f9f1 	bl	8006690 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80072ae:	bf00      	nop
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d011      	beq.n	80072ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr

080072f6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007304:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730a:	b29b      	uxth	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d02c      	beq.n	800736a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d114      	bne.n	800736a <I2C_SlaveReceive_RXNE+0x74>
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2b2a      	cmp	r3, #42	; 0x2a
 8007344:	d111      	bne.n	800736a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007354:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2222      	movs	r2, #34	; 0x22
 800735a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2228      	movs	r2, #40	; 0x28
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff f99c 	bl	80066a2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d012      	beq.n	80073aa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr

080073b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073ce:	2b28      	cmp	r3, #40	; 0x28
 80073d0:	d127      	bne.n	8007422 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	089b      	lsrs	r3, r3, #2
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	09db      	lsrs	r3, r3, #7
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	81bb      	strh	r3, [r7, #12]
 8007404:	e002      	b.n	800740c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007414:	89ba      	ldrh	r2, [r7, #12]
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff f94a 	bl	80066b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007420:	e00e      	b.n	8007440 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007456:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007466:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007468:	2300      	movs	r3, #0
 800746a:	60bb      	str	r3, [r7, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	60bb      	str	r3, [r7, #8]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0201 	orr.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007494:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a4:	d172      	bne.n	800758c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	2b22      	cmp	r3, #34	; 0x22
 80074aa:	d002      	beq.n	80074b2 <I2C_Slave_STOPF+0x6a>
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b2a      	cmp	r3, #42	; 0x2a
 80074b0:	d135      	bne.n	800751e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f043 0204 	orr.w	r2, r3, #4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe f808 	bl	8005500 <HAL_DMA_GetState>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d049      	beq.n	800758a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	4a69      	ldr	r2, [pc, #420]	; (80076a0 <I2C_Slave_STOPF+0x258>)
 80074fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd fe80 	bl	8005208 <HAL_DMA_Abort_IT>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d03d      	beq.n	800758a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800751c:	e035      	b.n	800758a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f043 0204 	orr.w	r2, r3, #4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007550:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007556:	4618      	mov	r0, r3
 8007558:	f7fd ffd2 	bl	8005500 <HAL_DMA_GetState>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d014      	beq.n	800758c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007566:	4a4e      	ldr	r2, [pc, #312]	; (80076a0 <I2C_Slave_STOPF+0x258>)
 8007568:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	4618      	mov	r0, r3
 8007570:	f7fd fe4a 	bl	8005208 <HAL_DMA_Abort_IT>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d008      	beq.n	800758c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	e000      	b.n	800758c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800758a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d03e      	beq.n	8007614 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d112      	bne.n	80075ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d112      	bne.n	80075fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	f043 0204 	orr.w	r2, r3, #4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f8b3 	bl	8007788 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007622:	e039      	b.n	8007698 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2b2a      	cmp	r3, #42	; 0x2a
 8007628:	d109      	bne.n	800763e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2228      	movs	r2, #40	; 0x28
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff f832 	bl	80066a2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b28      	cmp	r3, #40	; 0x28
 8007648:	d111      	bne.n	800766e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <I2C_Slave_STOPF+0x25c>)
 800764e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7ff f831 	bl	80066ce <HAL_I2C_ListenCpltCallback>
}
 800766c:	e014      	b.n	8007698 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	2b22      	cmp	r3, #34	; 0x22
 8007674:	d002      	beq.n	800767c <I2C_Slave_STOPF+0x234>
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b22      	cmp	r3, #34	; 0x22
 800767a:	d10d      	bne.n	8007698 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff f805 	bl	80066a2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	08007ce9 	.word	0x08007ce9
 80076a4:	ffff0000 	.word	0xffff0000

080076a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d002      	beq.n	80076ca <I2C_Slave_AF+0x22>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d129      	bne.n	800771e <I2C_Slave_AF+0x76>
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	2b28      	cmp	r3, #40	; 0x28
 80076ce:	d126      	bne.n	800771e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a2c      	ldr	r2, [pc, #176]	; (8007784 <I2C_Slave_AF+0xdc>)
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fe ffd9 	bl	80066ce <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800771c:	e02e      	b.n	800777c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b21      	cmp	r3, #33	; 0x21
 8007722:	d126      	bne.n	8007772 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a17      	ldr	r2, [pc, #92]	; (8007784 <I2C_Slave_AF+0xdc>)
 8007728:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2221      	movs	r2, #33	; 0x21
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800774e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007758:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007768:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fe ff90 	bl	8006690 <HAL_I2C_SlaveTxCpltCallback>
}
 8007770:	e004      	b.n	800777c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800777a:	615a      	str	r2, [r3, #20]
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	ffff0000 	.word	0xffff0000

08007788 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007796:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800779e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d002      	beq.n	80077ac <I2C_ITError+0x24>
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d10a      	bne.n	80077c2 <I2C_ITError+0x3a>
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b22      	cmp	r3, #34	; 0x22
 80077b0:	d107      	bne.n	80077c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077c8:	2b28      	cmp	r3, #40	; 0x28
 80077ca:	d107      	bne.n	80077dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2228      	movs	r2, #40	; 0x28
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077da:	e015      	b.n	8007808 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ea:	d00a      	beq.n	8007802 <I2C_ITError+0x7a>
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	2b60      	cmp	r3, #96	; 0x60
 80077f0:	d007      	beq.n	8007802 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007816:	d161      	bne.n	80078dc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007826:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007830:	2b01      	cmp	r3, #1
 8007832:	d020      	beq.n	8007876 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	4a6a      	ldr	r2, [pc, #424]	; (80079e4 <I2C_ITError+0x25c>)
 800783a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	4618      	mov	r0, r3
 8007842:	f7fd fce1 	bl	8005208 <HAL_DMA_Abort_IT>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 8089 	beq.w	8007960 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0201 	bic.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	e074      	b.n	8007960 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	4a5a      	ldr	r2, [pc, #360]	; (80079e4 <I2C_ITError+0x25c>)
 800787c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	4618      	mov	r0, r3
 8007884:	f7fd fcc0 	bl	8005208 <HAL_DMA_Abort_IT>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d068      	beq.n	8007960 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d10b      	bne.n	80078b4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078d6:	4610      	mov	r0, r2
 80078d8:	4798      	blx	r3
 80078da:	e041      	b.n	8007960 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b60      	cmp	r3, #96	; 0x60
 80078e6:	d125      	bne.n	8007934 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007900:	2b40      	cmp	r3, #64	; 0x40
 8007902:	d10b      	bne.n	800791c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	691a      	ldr	r2, [r3, #16]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7fe fef2 	bl	8006716 <HAL_I2C_AbortCpltCallback>
 8007932:	e015      	b.n	8007960 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d10b      	bne.n	800795a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fe fed2 	bl	8006704 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10e      	bne.n	800798e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800798a:	2b00      	cmp	r3, #0
 800798c:	d007      	beq.n	800799e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800799c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d113      	bne.n	80079da <I2C_ITError+0x252>
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	2b28      	cmp	r3, #40	; 0x28
 80079b6:	d110      	bne.n	80079da <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a0b      	ldr	r2, [pc, #44]	; (80079e8 <I2C_ITError+0x260>)
 80079bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7fe fe7a 	bl	80066ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	08007ce9 	.word	0x08007ce9
 80079e8:	ffff0000 	.word	0xffff0000

080079ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	4608      	mov	r0, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	817b      	strh	r3, [r7, #10]
 80079fe:	460b      	mov	r3, r1
 8007a00:	813b      	strh	r3, [r7, #8]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa08 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00d      	beq.n	8007a4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3c:	d103      	bne.n	8007a46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e05f      	b.n	8007b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a4a:	897b      	ldrh	r3, [r7, #10]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	6a3a      	ldr	r2, [r7, #32]
 8007a5e:	492d      	ldr	r1, [pc, #180]	; (8007b14 <I2C_RequestMemoryWrite+0x128>)
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fa40 	bl	8007ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e04c      	b.n	8007b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a88:	6a39      	ldr	r1, [r7, #32]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 faaa 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00d      	beq.n	8007ab2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d107      	bne.n	8007aae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e02b      	b.n	8007b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d105      	bne.n	8007ac4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ab8:	893b      	ldrh	r3, [r7, #8]
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	611a      	str	r2, [r3, #16]
 8007ac2:	e021      	b.n	8007b08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ac4:	893b      	ldrh	r3, [r7, #8]
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad4:	6a39      	ldr	r1, [r7, #32]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fa84 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00d      	beq.n	8007afe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d107      	bne.n	8007afa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e005      	b.n	8007b0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007afe:	893b      	ldrh	r3, [r7, #8]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	00010002 	.word	0x00010002

08007b18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	4608      	mov	r0, r1
 8007b22:	4611      	mov	r1, r2
 8007b24:	461a      	mov	r2, r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	817b      	strh	r3, [r7, #10]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	813b      	strh	r3, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f96a 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00d      	beq.n	8007b86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b78:	d103      	bne.n	8007b82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e0aa      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b86:	897b      	ldrh	r3, [r7, #10]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	6a3a      	ldr	r2, [r7, #32]
 8007b9a:	4952      	ldr	r1, [pc, #328]	; (8007ce4 <I2C_RequestMemoryRead+0x1cc>)
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 f9a2 	bl	8007ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e097      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bac:	2300      	movs	r3, #0
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc4:	6a39      	ldr	r1, [r7, #32]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fa0c 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d107      	bne.n	8007bea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e076      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d105      	bne.n	8007c00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf4:	893b      	ldrh	r3, [r7, #8]
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	611a      	str	r2, [r3, #16]
 8007bfe:	e021      	b.n	8007c44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c00:	893b      	ldrh	r3, [r7, #8]
 8007c02:	0a1b      	lsrs	r3, r3, #8
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c10:	6a39      	ldr	r1, [r7, #32]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f9e6 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00d      	beq.n	8007c3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d107      	bne.n	8007c36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e050      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c3a:	893b      	ldrh	r3, [r7, #8]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	6a39      	ldr	r1, [r7, #32]
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f9cb 	bl	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00d      	beq.n	8007c70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d107      	bne.n	8007c6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e035      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f8d3 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00d      	beq.n	8007cb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca6:	d103      	bne.n	8007cb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e013      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007cb4:	897b      	ldrh	r3, [r7, #10]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	6a3a      	ldr	r2, [r7, #32]
 8007cc8:	4906      	ldr	r1, [pc, #24]	; (8007ce4 <I2C_RequestMemoryRead+0x1cc>)
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f90b 	bl	8007ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	00010002 	.word	0x00010002

08007ce8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007d02:	4b4b      	ldr	r3, [pc, #300]	; (8007e30 <I2C_DMAAbort+0x148>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	08db      	lsrs	r3, r3, #3
 8007d08:	4a4a      	ldr	r2, [pc, #296]	; (8007e34 <I2C_DMAAbort+0x14c>)
 8007d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0e:	0a1a      	lsrs	r2, r3, #8
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	00da      	lsls	r2, r3, #3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007d2e:	e00a      	b.n	8007d46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d44:	d0ea      	beq.n	8007d1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	2200      	movs	r2, #0
 8007d54:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	2200      	movs	r2, #0
 8007d64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d88:	2200      	movs	r2, #0
 8007d8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	2200      	movs	r2, #0
 8007d9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b60      	cmp	r3, #96	; 0x60
 8007db6:	d10e      	bne.n	8007dd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dce:	6978      	ldr	r0, [r7, #20]
 8007dd0:	f7fe fca1 	bl	8006716 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007dd4:	e027      	b.n	8007e26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007dd6:	7cfb      	ldrb	r3, [r7, #19]
 8007dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ddc:	2b28      	cmp	r3, #40	; 0x28
 8007dde:	d117      	bne.n	8007e10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2228      	movs	r2, #40	; 0x28
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e0e:	e007      	b.n	8007e20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007e20:	6978      	ldr	r0, [r7, #20]
 8007e22:	f7fe fc6f 	bl	8006704 <HAL_I2C_ErrorCallback>
}
 8007e26:	bf00      	nop
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000004 	.word	0x20000004
 8007e34:	14f8b589 	.word	0x14f8b589

08007e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	4613      	mov	r3, r2
 8007e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e48:	e025      	b.n	8007e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d021      	beq.n	8007e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e52:	f7fb fdeb 	bl	8003a2c <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d302      	bcc.n	8007e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d116      	bne.n	8007e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	f043 0220 	orr.w	r2, r3, #32
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e023      	b.n	8007ede <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10d      	bne.n	8007ebc <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	43da      	mvns	r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bf0c      	ite	eq
 8007eb2:	2301      	moveq	r3, #1
 8007eb4:	2300      	movne	r3, #0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	e00c      	b.n	8007ed6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	43da      	mvns	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bf0c      	ite	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d0b6      	beq.n	8007e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ef4:	e051      	b.n	8007f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f04:	d123      	bne.n	8007f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f043 0204 	orr.w	r2, r3, #4
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e046      	b.n	8007fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d021      	beq.n	8007f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f56:	f7fb fd69 	bl	8003a2c <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d302      	bcc.n	8007f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d116      	bne.n	8007f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	f043 0220 	orr.w	r2, r3, #32
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e020      	b.n	8007fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d10c      	bne.n	8007fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	43da      	mvns	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	e00b      	b.n	8007fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	43da      	mvns	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bf14      	ite	ne
 8007fd0:	2301      	movne	r3, #1
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d18d      	bne.n	8007ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ff0:	e02d      	b.n	800804e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 f900 	bl	80081f8 <I2C_IsAcknowledgeFailed>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e02d      	b.n	800805e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d021      	beq.n	800804e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800a:	f7fb fd0f 	bl	8003a2c <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d116      	bne.n	800804e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2220      	movs	r2, #32
 800802a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	f043 0220 	orr.w	r2, r3, #32
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e007      	b.n	800805e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008058:	2b80      	cmp	r3, #128	; 0x80
 800805a:	d1ca      	bne.n	8007ff2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008072:	e02d      	b.n	80080d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f8bf 	bl	80081f8 <I2C_IsAcknowledgeFailed>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e02d      	b.n	80080e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d021      	beq.n	80080d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808c:	f7fb fcce 	bl	8003a2c <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	429a      	cmp	r2, r3
 800809a:	d302      	bcc.n	80080a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d116      	bne.n	80080d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080bc:	f043 0220 	orr.w	r2, r3, #32
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e007      	b.n	80080e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d1ca      	bne.n	8008074 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80080f4:	4b13      	ldr	r3, [pc, #76]	; (8008144 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	08db      	lsrs	r3, r3, #3
 80080fa:	4a13      	ldr	r2, [pc, #76]	; (8008148 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	0a1a      	lsrs	r2, r3, #8
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3b01      	subs	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d107      	bne.n	8008126 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0220 	orr.w	r2, r3, #32
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e008      	b.n	8008138 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008134:	d0e9      	beq.n	800810a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20000004 	.word	0x20000004
 8008148:	14f8b589 	.word	0x14f8b589

0800814c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008158:	e042      	b.n	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b10      	cmp	r3, #16
 8008166:	d119      	bne.n	800819c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0210 	mvn.w	r2, #16
 8008170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e029      	b.n	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819c:	f7fb fc46 	bl	8003a2c <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d302      	bcc.n	80081b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d116      	bne.n	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	f043 0220 	orr.w	r2, r3, #32
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e007      	b.n	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d1b5      	bne.n	800815a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800820a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820e:	d11b      	bne.n	8008248 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008218:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	f043 0204 	orr.w	r2, r3, #4
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008264:	d103      	bne.n	800826e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800826c:	e007      	b.n	800827e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008276:	d102      	bne.n	800827e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2208      	movs	r2, #8
 800827c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr

08008288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e26c      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8087 	beq.w	80083b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082a8:	4b92      	ldr	r3, [pc, #584]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f003 030c 	and.w	r3, r3, #12
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d00c      	beq.n	80082ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80082b4:	4b8f      	ldr	r3, [pc, #572]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f003 030c 	and.w	r3, r3, #12
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d112      	bne.n	80082e6 <HAL_RCC_OscConfig+0x5e>
 80082c0:	4b8c      	ldr	r3, [pc, #560]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082cc:	d10b      	bne.n	80082e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ce:	4b89      	ldr	r3, [pc, #548]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d06c      	beq.n	80083b4 <HAL_RCC_OscConfig+0x12c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d168      	bne.n	80083b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e246      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ee:	d106      	bne.n	80082fe <HAL_RCC_OscConfig+0x76>
 80082f0:	4b80      	ldr	r3, [pc, #512]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a7f      	ldr	r2, [pc, #508]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80082f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	e02e      	b.n	800835c <HAL_RCC_OscConfig+0xd4>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10c      	bne.n	8008320 <HAL_RCC_OscConfig+0x98>
 8008306:	4b7b      	ldr	r3, [pc, #492]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a7a      	ldr	r2, [pc, #488]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 800830c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	4b78      	ldr	r3, [pc, #480]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a77      	ldr	r2, [pc, #476]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	e01d      	b.n	800835c <HAL_RCC_OscConfig+0xd4>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008328:	d10c      	bne.n	8008344 <HAL_RCC_OscConfig+0xbc>
 800832a:	4b72      	ldr	r3, [pc, #456]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a71      	ldr	r2, [pc, #452]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	4b6f      	ldr	r3, [pc, #444]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a6e      	ldr	r2, [pc, #440]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 800833c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	e00b      	b.n	800835c <HAL_RCC_OscConfig+0xd4>
 8008344:	4b6b      	ldr	r3, [pc, #428]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a6a      	ldr	r2, [pc, #424]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 800834a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	4b68      	ldr	r3, [pc, #416]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a67      	ldr	r2, [pc, #412]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800835a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d013      	beq.n	800838c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008364:	f7fb fb62 	bl	8003a2c <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800836c:	f7fb fb5e 	bl	8003a2c <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b64      	cmp	r3, #100	; 0x64
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e1fa      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800837e:	4b5d      	ldr	r3, [pc, #372]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0f0      	beq.n	800836c <HAL_RCC_OscConfig+0xe4>
 800838a:	e014      	b.n	80083b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800838c:	f7fb fb4e 	bl	8003a2c <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008394:	f7fb fb4a 	bl	8003a2c <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b64      	cmp	r3, #100	; 0x64
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e1e6      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083a6:	4b53      	ldr	r3, [pc, #332]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f0      	bne.n	8008394 <HAL_RCC_OscConfig+0x10c>
 80083b2:	e000      	b.n	80083b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d063      	beq.n	800848a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083c2:	4b4c      	ldr	r3, [pc, #304]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f003 030c 	and.w	r3, r3, #12
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80083ce:	4b49      	ldr	r3, [pc, #292]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f003 030c 	and.w	r3, r3, #12
 80083d6:	2b08      	cmp	r3, #8
 80083d8:	d11c      	bne.n	8008414 <HAL_RCC_OscConfig+0x18c>
 80083da:	4b46      	ldr	r3, [pc, #280]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d116      	bne.n	8008414 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083e6:	4b43      	ldr	r3, [pc, #268]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d005      	beq.n	80083fe <HAL_RCC_OscConfig+0x176>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d001      	beq.n	80083fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e1ba      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083fe:	4b3d      	ldr	r3, [pc, #244]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	4939      	ldr	r1, [pc, #228]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 800840e:	4313      	orrs	r3, r2
 8008410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008412:	e03a      	b.n	800848a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d020      	beq.n	800845e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800841c:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <HAL_RCC_OscConfig+0x270>)
 800841e:	2201      	movs	r2, #1
 8008420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008422:	f7fb fb03 	bl	8003a2c <HAL_GetTick>
 8008426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008428:	e008      	b.n	800843c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800842a:	f7fb faff 	bl	8003a2c <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d901      	bls.n	800843c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e19b      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800843c:	4b2d      	ldr	r3, [pc, #180]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0f0      	beq.n	800842a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008448:	4b2a      	ldr	r3, [pc, #168]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	4927      	ldr	r1, [pc, #156]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008458:	4313      	orrs	r3, r2
 800845a:	600b      	str	r3, [r1, #0]
 800845c:	e015      	b.n	800848a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800845e:	4b26      	ldr	r3, [pc, #152]	; (80084f8 <HAL_RCC_OscConfig+0x270>)
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008464:	f7fb fae2 	bl	8003a2c <HAL_GetTick>
 8008468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800846c:	f7fb fade 	bl	8003a2c <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e17a      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800847e:	4b1d      	ldr	r3, [pc, #116]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1f0      	bne.n	800846c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d03a      	beq.n	800850c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d019      	beq.n	80084d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800849e:	4b17      	ldr	r3, [pc, #92]	; (80084fc <HAL_RCC_OscConfig+0x274>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084a4:	f7fb fac2 	bl	8003a2c <HAL_GetTick>
 80084a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ac:	f7fb fabe 	bl	8003a2c <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e15a      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084be:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <HAL_RCC_OscConfig+0x26c>)
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0f0      	beq.n	80084ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80084ca:	2001      	movs	r0, #1
 80084cc:	f000 fad8 	bl	8008a80 <RCC_Delay>
 80084d0:	e01c      	b.n	800850c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d2:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <HAL_RCC_OscConfig+0x274>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084d8:	f7fb faa8 	bl	8003a2c <HAL_GetTick>
 80084dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084de:	e00f      	b.n	8008500 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084e0:	f7fb faa4 	bl	8003a2c <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d908      	bls.n	8008500 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e140      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
 80084f2:	bf00      	nop
 80084f4:	40021000 	.word	0x40021000
 80084f8:	42420000 	.word	0x42420000
 80084fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008500:	4b9e      	ldr	r3, [pc, #632]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e9      	bne.n	80084e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 80a6 	beq.w	8008666 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800851e:	4b97      	ldr	r3, [pc, #604]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10d      	bne.n	8008546 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800852a:	4b94      	ldr	r3, [pc, #592]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	4a93      	ldr	r2, [pc, #588]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008534:	61d3      	str	r3, [r2, #28]
 8008536:	4b91      	ldr	r3, [pc, #580]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800853e:	60bb      	str	r3, [r7, #8]
 8008540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008546:	4b8e      	ldr	r3, [pc, #568]	; (8008780 <HAL_RCC_OscConfig+0x4f8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854e:	2b00      	cmp	r3, #0
 8008550:	d118      	bne.n	8008584 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008552:	4b8b      	ldr	r3, [pc, #556]	; (8008780 <HAL_RCC_OscConfig+0x4f8>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a8a      	ldr	r2, [pc, #552]	; (8008780 <HAL_RCC_OscConfig+0x4f8>)
 8008558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800855e:	f7fb fa65 	bl	8003a2c <HAL_GetTick>
 8008562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008564:	e008      	b.n	8008578 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008566:	f7fb fa61 	bl	8003a2c <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b64      	cmp	r3, #100	; 0x64
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e0fd      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008578:	4b81      	ldr	r3, [pc, #516]	; (8008780 <HAL_RCC_OscConfig+0x4f8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0f0      	beq.n	8008566 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d106      	bne.n	800859a <HAL_RCC_OscConfig+0x312>
 800858c:	4b7b      	ldr	r3, [pc, #492]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	4a7a      	ldr	r2, [pc, #488]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008592:	f043 0301 	orr.w	r3, r3, #1
 8008596:	6213      	str	r3, [r2, #32]
 8008598:	e02d      	b.n	80085f6 <HAL_RCC_OscConfig+0x36e>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10c      	bne.n	80085bc <HAL_RCC_OscConfig+0x334>
 80085a2:	4b76      	ldr	r3, [pc, #472]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	4a75      	ldr	r2, [pc, #468]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	6213      	str	r3, [r2, #32]
 80085ae:	4b73      	ldr	r3, [pc, #460]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	4a72      	ldr	r2, [pc, #456]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085b4:	f023 0304 	bic.w	r3, r3, #4
 80085b8:	6213      	str	r3, [r2, #32]
 80085ba:	e01c      	b.n	80085f6 <HAL_RCC_OscConfig+0x36e>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d10c      	bne.n	80085de <HAL_RCC_OscConfig+0x356>
 80085c4:	4b6d      	ldr	r3, [pc, #436]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	4a6c      	ldr	r2, [pc, #432]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085ca:	f043 0304 	orr.w	r3, r3, #4
 80085ce:	6213      	str	r3, [r2, #32]
 80085d0:	4b6a      	ldr	r3, [pc, #424]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	4a69      	ldr	r2, [pc, #420]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	6213      	str	r3, [r2, #32]
 80085dc:	e00b      	b.n	80085f6 <HAL_RCC_OscConfig+0x36e>
 80085de:	4b67      	ldr	r3, [pc, #412]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	4a66      	ldr	r2, [pc, #408]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	6213      	str	r3, [r2, #32]
 80085ea:	4b64      	ldr	r3, [pc, #400]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	4a63      	ldr	r2, [pc, #396]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085f0:	f023 0304 	bic.w	r3, r3, #4
 80085f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d015      	beq.n	800862a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085fe:	f7fb fa15 	bl	8003a2c <HAL_GetTick>
 8008602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008604:	e00a      	b.n	800861c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008606:	f7fb fa11 	bl	8003a2c <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	f241 3288 	movw	r2, #5000	; 0x1388
 8008614:	4293      	cmp	r3, r2
 8008616:	d901      	bls.n	800861c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e0ab      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800861c:	4b57      	ldr	r3, [pc, #348]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d0ee      	beq.n	8008606 <HAL_RCC_OscConfig+0x37e>
 8008628:	e014      	b.n	8008654 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800862a:	f7fb f9ff 	bl	8003a2c <HAL_GetTick>
 800862e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008630:	e00a      	b.n	8008648 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008632:	f7fb f9fb 	bl	8003a2c <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008640:	4293      	cmp	r3, r2
 8008642:	d901      	bls.n	8008648 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e095      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008648:	4b4c      	ldr	r3, [pc, #304]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1ee      	bne.n	8008632 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d105      	bne.n	8008666 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800865a:	4b48      	ldr	r3, [pc, #288]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	4a47      	ldr	r2, [pc, #284]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008664:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 8081 	beq.w	8008772 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008670:	4b42      	ldr	r3, [pc, #264]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f003 030c 	and.w	r3, r3, #12
 8008678:	2b08      	cmp	r3, #8
 800867a:	d061      	beq.n	8008740 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	2b02      	cmp	r3, #2
 8008682:	d146      	bne.n	8008712 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008684:	4b3f      	ldr	r3, [pc, #252]	; (8008784 <HAL_RCC_OscConfig+0x4fc>)
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868a:	f7fb f9cf 	bl	8003a2c <HAL_GetTick>
 800868e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008690:	e008      	b.n	80086a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008692:	f7fb f9cb 	bl	8003a2c <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d901      	bls.n	80086a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e067      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80086a4:	4b35      	ldr	r3, [pc, #212]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1f0      	bne.n	8008692 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b8:	d108      	bne.n	80086cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80086ba:	4b30      	ldr	r3, [pc, #192]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	492d      	ldr	r1, [pc, #180]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086cc:	4b2b      	ldr	r3, [pc, #172]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a19      	ldr	r1, [r3, #32]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	430b      	orrs	r3, r1
 80086de:	4927      	ldr	r1, [pc, #156]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086e4:	4b27      	ldr	r3, [pc, #156]	; (8008784 <HAL_RCC_OscConfig+0x4fc>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086ea:	f7fb f99f 	bl	8003a2c <HAL_GetTick>
 80086ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80086f0:	e008      	b.n	8008704 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086f2:	f7fb f99b 	bl	8003a2c <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d901      	bls.n	8008704 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e037      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008704:	4b1d      	ldr	r3, [pc, #116]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0f0      	beq.n	80086f2 <HAL_RCC_OscConfig+0x46a>
 8008710:	e02f      	b.n	8008772 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008712:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <HAL_RCC_OscConfig+0x4fc>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008718:	f7fb f988 	bl	8003a2c <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008720:	f7fb f984 	bl	8003a2c <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e020      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008732:	4b12      	ldr	r3, [pc, #72]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0x498>
 800873e:	e018      	b.n	8008772 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e013      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800874c:	4b0b      	ldr	r3, [pc, #44]	; (800877c <HAL_RCC_OscConfig+0x4f4>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	429a      	cmp	r2, r3
 800875e:	d106      	bne.n	800876e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800876a:	429a      	cmp	r2, r3
 800876c:	d001      	beq.n	8008772 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e000      	b.n	8008774 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40021000 	.word	0x40021000
 8008780:	40007000 	.word	0x40007000
 8008784:	42420060 	.word	0x42420060

08008788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e0d0      	b.n	800893e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800879c:	4b6a      	ldr	r3, [pc, #424]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d910      	bls.n	80087cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087aa:	4b67      	ldr	r3, [pc, #412]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f023 0207 	bic.w	r2, r3, #7
 80087b2:	4965      	ldr	r1, [pc, #404]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ba:	4b63      	ldr	r3, [pc, #396]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d001      	beq.n	80087cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e0b8      	b.n	800893e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d020      	beq.n	800881a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087e4:	4b59      	ldr	r3, [pc, #356]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4a58      	ldr	r2, [pc, #352]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 80087ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80087ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087fc:	4b53      	ldr	r3, [pc, #332]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	4a52      	ldr	r2, [pc, #328]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008808:	4b50      	ldr	r3, [pc, #320]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	494d      	ldr	r1, [pc, #308]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008816:	4313      	orrs	r3, r2
 8008818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d040      	beq.n	80088a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d107      	bne.n	800883e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800882e:	4b47      	ldr	r3, [pc, #284]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d115      	bne.n	8008866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e07f      	b.n	800893e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d107      	bne.n	8008856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008846:	4b41      	ldr	r3, [pc, #260]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e073      	b.n	800893e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008856:	4b3d      	ldr	r3, [pc, #244]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e06b      	b.n	800893e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008866:	4b39      	ldr	r3, [pc, #228]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f023 0203 	bic.w	r2, r3, #3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	4936      	ldr	r1, [pc, #216]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008874:	4313      	orrs	r3, r2
 8008876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008878:	f7fb f8d8 	bl	8003a2c <HAL_GetTick>
 800887c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800887e:	e00a      	b.n	8008896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008880:	f7fb f8d4 	bl	8003a2c <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	f241 3288 	movw	r2, #5000	; 0x1388
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e053      	b.n	800893e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008896:	4b2d      	ldr	r3, [pc, #180]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f003 020c 	and.w	r2, r3, #12
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d1eb      	bne.n	8008880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088a8:	4b27      	ldr	r3, [pc, #156]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0307 	and.w	r3, r3, #7
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d210      	bcs.n	80088d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088b6:	4b24      	ldr	r3, [pc, #144]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f023 0207 	bic.w	r2, r3, #7
 80088be:	4922      	ldr	r1, [pc, #136]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c6:	4b20      	ldr	r3, [pc, #128]	; (8008948 <HAL_RCC_ClockConfig+0x1c0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d001      	beq.n	80088d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e032      	b.n	800893e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d008      	beq.n	80088f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088e4:	4b19      	ldr	r3, [pc, #100]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	4916      	ldr	r1, [pc, #88]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0308 	and.w	r3, r3, #8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008902:	4b12      	ldr	r3, [pc, #72]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	490e      	ldr	r1, [pc, #56]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 8008912:	4313      	orrs	r3, r2
 8008914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008916:	f000 f821 	bl	800895c <HAL_RCC_GetSysClockFreq>
 800891a:	4602      	mov	r2, r0
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <HAL_RCC_ClockConfig+0x1c4>)
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	091b      	lsrs	r3, r3, #4
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	490a      	ldr	r1, [pc, #40]	; (8008950 <HAL_RCC_ClockConfig+0x1c8>)
 8008928:	5ccb      	ldrb	r3, [r1, r3]
 800892a:	fa22 f303 	lsr.w	r3, r2, r3
 800892e:	4a09      	ldr	r2, [pc, #36]	; (8008954 <HAL_RCC_ClockConfig+0x1cc>)
 8008930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008932:	4b09      	ldr	r3, [pc, #36]	; (8008958 <HAL_RCC_ClockConfig+0x1d0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fb f836 	bl	80039a8 <HAL_InitTick>

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	40022000 	.word	0x40022000
 800894c:	40021000 	.word	0x40021000
 8008950:	0800f21c 	.word	0x0800f21c
 8008954:	20000004 	.word	0x20000004
 8008958:	20000008 	.word	0x20000008

0800895c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800895c:	b490      	push	{r4, r7}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008962:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8008964:	1d3c      	adds	r4, r7, #4
 8008966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800896c:	f240 2301 	movw	r3, #513	; 0x201
 8008970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	2300      	movs	r3, #0
 8008978:	61bb      	str	r3, [r7, #24]
 800897a:	2300      	movs	r3, #0
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008986:	4b22      	ldr	r3, [pc, #136]	; (8008a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f003 030c 	and.w	r3, r3, #12
 8008992:	2b04      	cmp	r3, #4
 8008994:	d002      	beq.n	800899c <HAL_RCC_GetSysClockFreq+0x40>
 8008996:	2b08      	cmp	r3, #8
 8008998:	d003      	beq.n	80089a2 <HAL_RCC_GetSysClockFreq+0x46>
 800899a:	e02d      	b.n	80089f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800899c:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800899e:	623b      	str	r3, [r7, #32]
      break;
 80089a0:	e02d      	b.n	80089fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	0c9b      	lsrs	r3, r3, #18
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80089ae:	4413      	add	r3, r2
 80089b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80089b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d013      	beq.n	80089e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80089c0:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	0c5b      	lsrs	r3, r3, #17
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80089ce:	4413      	add	r3, r2
 80089d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80089d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	4a0e      	ldr	r2, [pc, #56]	; (8008a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089da:	fb02 f203 	mul.w	r2, r2, r3
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
 80089e6:	e004      	b.n	80089f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	4a0b      	ldr	r2, [pc, #44]	; (8008a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80089ec:	fb02 f303 	mul.w	r3, r2, r3
 80089f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	623b      	str	r3, [r7, #32]
      break;
 80089f6:	e002      	b.n	80089fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089fa:	623b      	str	r3, [r7, #32]
      break;
 80089fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089fe:	6a3b      	ldr	r3, [r7, #32]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3728      	adds	r7, #40	; 0x28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc90      	pop	{r4, r7}
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	0800f1b4 	.word	0x0800f1b4
 8008a10:	40021000 	.word	0x40021000
 8008a14:	007a1200 	.word	0x007a1200
 8008a18:	003d0900 	.word	0x003d0900

08008a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a20:	4b02      	ldr	r3, [pc, #8]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8008a22:	681b      	ldr	r3, [r3, #0]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr
 8008a2c:	20000004 	.word	0x20000004

08008a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008a34:	f7ff fff2 	bl	8008a1c <HAL_RCC_GetHCLKFreq>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	0a1b      	lsrs	r3, r3, #8
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	4903      	ldr	r1, [pc, #12]	; (8008a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a46:	5ccb      	ldrb	r3, [r1, r3]
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40021000 	.word	0x40021000
 8008a54:	0800f22c 	.word	0x0800f22c

08008a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008a5c:	f7ff ffde 	bl	8008a1c <HAL_RCC_GetHCLKFreq>
 8008a60:	4602      	mov	r2, r0
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	0adb      	lsrs	r3, r3, #11
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	4903      	ldr	r1, [pc, #12]	; (8008a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a6e:	5ccb      	ldrb	r3, [r1, r3]
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	40021000 	.word	0x40021000
 8008a7c:	0800f22c 	.word	0x0800f22c

08008a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <RCC_Delay+0x34>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <RCC_Delay+0x38>)
 8008a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a92:	0a5b      	lsrs	r3, r3, #9
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	fb02 f303 	mul.w	r3, r2, r3
 8008a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008a9c:	bf00      	nop
  }
  while (Delay --);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	1e5a      	subs	r2, r3, #1
 8008aa2:	60fa      	str	r2, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f9      	bne.n	8008a9c <RCC_Delay+0x1c>
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr
 8008ab4:	20000004 	.word	0x20000004
 8008ab8:	10624dd3 	.word	0x10624dd3

08008abc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d07d      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008adc:	4b4f      	ldr	r3, [pc, #316]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ae8:	4b4c      	ldr	r3, [pc, #304]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	4a4b      	ldr	r2, [pc, #300]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af2:	61d3      	str	r3, [r2, #28]
 8008af4:	4b49      	ldr	r3, [pc, #292]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008afc:	60bb      	str	r3, [r7, #8]
 8008afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b00:	2301      	movs	r3, #1
 8008b02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b04:	4b46      	ldr	r3, [pc, #280]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d118      	bne.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b10:	4b43      	ldr	r3, [pc, #268]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a42      	ldr	r2, [pc, #264]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b1c:	f7fa ff86 	bl	8003a2c <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b22:	e008      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b24:	f7fa ff82 	bl	8003a2c <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b64      	cmp	r3, #100	; 0x64
 8008b30:	d901      	bls.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e06d      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b36:	4b3a      	ldr	r3, [pc, #232]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f0      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b42:	4b36      	ldr	r3, [pc, #216]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d02e      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d027      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b60:	4b2e      	ldr	r3, [pc, #184]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b6a:	4b2e      	ldr	r3, [pc, #184]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b70:	4b2c      	ldr	r3, [pc, #176]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008b76:	4a29      	ldr	r2, [pc, #164]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d014      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b86:	f7fa ff51 	bl	8003a2c <HAL_GetTick>
 8008b8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b8c:	e00a      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b8e:	f7fa ff4d 	bl	8003a2c <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d901      	bls.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e036      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	f003 0302 	and.w	r3, r3, #2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0ee      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bb0:	4b1a      	ldr	r3, [pc, #104]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	4917      	ldr	r1, [pc, #92]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d105      	bne.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	4a13      	ldr	r2, [pc, #76]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008be0:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	490b      	ldr	r1, [pc, #44]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0310 	and.w	r3, r3, #16
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d008      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bfe:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	4904      	ldr	r1, [pc, #16]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	40007000 	.word	0x40007000
 8008c24:	42420440 	.word	0x42420440

08008c28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c28:	b590      	push	{r4, r7, lr}
 8008c2a:	b08d      	sub	sp, #52	; 0x34
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008c30:	4b5a      	ldr	r3, [pc, #360]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8008c32:	f107 040c 	add.w	r4, r7, #12
 8008c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008c3c:	f240 2301 	movw	r3, #513	; 0x201
 8008c40:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
 8008c46:	2300      	movs	r3, #0
 8008c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	2300      	movs	r3, #0
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b10      	cmp	r3, #16
 8008c5a:	d00a      	beq.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b10      	cmp	r3, #16
 8008c60:	f200 8091 	bhi.w	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d04c      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d07c      	beq.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008c70:	e089      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8008c72:	4b4b      	ldr	r3, [pc, #300]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008c78:	4b49      	ldr	r3, [pc, #292]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 8082 	beq.w	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	0c9b      	lsrs	r3, r3, #18
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c92:	4413      	add	r3, r2
 8008c94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008c98:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d018      	beq.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ca4:	4b3e      	ldr	r3, [pc, #248]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	0c5b      	lsrs	r3, r3, #17
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00d      	beq.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008cc4:	4a37      	ldr	r2, [pc, #220]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	fb02 f303 	mul.w	r3, r2, r3
 8008cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cd4:	e004      	b.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	4a33      	ldr	r2, [pc, #204]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8008cda:	fb02 f303 	mul.w	r3, r2, r3
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008ce0:	4b2f      	ldr	r3, [pc, #188]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cec:	d102      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008cf2:	e04a      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	4a2c      	ldr	r2, [pc, #176]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8008cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008d02:	e042      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8008d04:	4b26      	ldr	r3, [pc, #152]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d14:	d108      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8008d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d26:	e01f      	b.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d32:	d109      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008d34:	4b1a      	ldr	r3, [pc, #104]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	f003 0302 	and.w	r3, r3, #2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8008d40:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d46:	e00f      	b.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d52:	d11c      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008d54:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d016      	beq.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8008d60:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008d64:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008d66:	e012      	b.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008d68:	e011      	b.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008d6a:	f7ff fe75 	bl	8008a58 <HAL_RCC_GetPCLK2Freq>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	0b9b      	lsrs	r3, r3, #14
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008d84:	e004      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008d86:	bf00      	nop
 8008d88:	e002      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008d8a:	bf00      	nop
 8008d8c:	e000      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008d8e:	bf00      	nop
    }
  }
  return (frequency);
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3734      	adds	r7, #52	; 0x34
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd90      	pop	{r4, r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0800f1c4 	.word	0x0800f1c4
 8008da0:	40021000 	.word	0x40021000
 8008da4:	007a1200 	.word	0x007a1200
 8008da8:	003d0900 	.word	0x003d0900
 8008dac:	aaaaaaab 	.word	0xaaaaaaab

08008db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e076      	b.n	8008eb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d108      	bne.n	8008ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dd2:	d009      	beq.n	8008de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	61da      	str	r2, [r3, #28]
 8008dda:	e005      	b.n	8008de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d106      	bne.n	8008e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7fa f9d2 	bl	80031ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e30:	431a      	orrs	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	431a      	orrs	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6c:	ea42 0103 	orr.w	r1, r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	0c1a      	lsrs	r2, r3, #16
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f002 0204 	and.w	r2, r2, #4
 8008e8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69da      	ldr	r2, [r3, #28]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d101      	bne.n	8008eda <HAL_SPI_Transmit+0x22>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	e126      	b.n	8009128 <HAL_SPI_Transmit+0x270>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ee2:	f7fa fda3 	bl	8003a2c <HAL_GetTick>
 8008ee6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d002      	beq.n	8008efe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008efc:	e10b      	b.n	8009116 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <HAL_SPI_Transmit+0x52>
 8008f04:	88fb      	ldrh	r3, [r7, #6]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d102      	bne.n	8008f10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f0e:	e102      	b.n	8009116 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2203      	movs	r2, #3
 8008f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	88fa      	ldrh	r2, [r7, #6]
 8008f2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f56:	d10f      	bne.n	8008f78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f82:	2b40      	cmp	r3, #64	; 0x40
 8008f84:	d007      	beq.n	8008f96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f9e:	d14b      	bne.n	8009038 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <HAL_SPI_Transmit+0xf6>
 8008fa8:	8afb      	ldrh	r3, [r7, #22]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d13e      	bne.n	800902c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	881a      	ldrh	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbe:	1c9a      	adds	r2, r3, #2
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008fd2:	e02b      	b.n	800902c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d112      	bne.n	8009008 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe6:	881a      	ldrh	r2, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	1c9a      	adds	r2, r3, #2
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	3b01      	subs	r3, #1
 8009000:	b29a      	uxth	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	86da      	strh	r2, [r3, #54]	; 0x36
 8009006:	e011      	b.n	800902c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009008:	f7fa fd10 	bl	8003a2c <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d803      	bhi.n	8009020 <HAL_SPI_Transmit+0x168>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901e:	d102      	bne.n	8009026 <HAL_SPI_Transmit+0x16e>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	77fb      	strb	r3, [r7, #31]
          goto error;
 800902a:	e074      	b.n	8009116 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009030:	b29b      	uxth	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1ce      	bne.n	8008fd4 <HAL_SPI_Transmit+0x11c>
 8009036:	e04c      	b.n	80090d2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <HAL_SPI_Transmit+0x18e>
 8009040:	8afb      	ldrh	r3, [r7, #22]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d140      	bne.n	80090c8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	330c      	adds	r3, #12
 8009050:	7812      	ldrb	r2, [r2, #0]
 8009052:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009062:	b29b      	uxth	r3, r3
 8009064:	3b01      	subs	r3, #1
 8009066:	b29a      	uxth	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800906c:	e02c      	b.n	80090c8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b02      	cmp	r3, #2
 800907a:	d113      	bne.n	80090a4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	330c      	adds	r3, #12
 8009086:	7812      	ldrb	r2, [r2, #0]
 8009088:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009098:	b29b      	uxth	r3, r3
 800909a:	3b01      	subs	r3, #1
 800909c:	b29a      	uxth	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80090a2:	e011      	b.n	80090c8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090a4:	f7fa fcc2 	bl	8003a2c <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d803      	bhi.n	80090bc <HAL_SPI_Transmit+0x204>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ba:	d102      	bne.n	80090c2 <HAL_SPI_Transmit+0x20a>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d102      	bne.n	80090c8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80090c6:	e026      	b.n	8009116 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1cd      	bne.n	800906e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 fb64 	bl	80097a4 <SPI_EndRxTxTransaction>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2220      	movs	r2, #32
 80090e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090f0:	2300      	movs	r3, #0
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	613b      	str	r3, [r7, #16]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	613b      	str	r3, [r7, #16]
 8009104:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	77fb      	strb	r3, [r7, #31]
 8009112:	e000      	b.n	8009116 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009114:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009126:	7ffb      	ldrb	r3, [r7, #31]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	; 0x30
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800913e:	2301      	movs	r3, #1
 8009140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800914e:	2b01      	cmp	r3, #1
 8009150:	d101      	bne.n	8009156 <HAL_SPI_TransmitReceive+0x26>
 8009152:	2302      	movs	r3, #2
 8009154:	e18a      	b.n	800946c <HAL_SPI_TransmitReceive+0x33c>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800915e:	f7fa fc65 	bl	8003a2c <HAL_GetTick>
 8009162:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800916a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009174:	887b      	ldrh	r3, [r7, #2]
 8009176:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800917c:	2b01      	cmp	r3, #1
 800917e:	d00f      	beq.n	80091a0 <HAL_SPI_TransmitReceive+0x70>
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009186:	d107      	bne.n	8009198 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d103      	bne.n	8009198 <HAL_SPI_TransmitReceive+0x68>
 8009190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009194:	2b04      	cmp	r3, #4
 8009196:	d003      	beq.n	80091a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009198:	2302      	movs	r3, #2
 800919a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800919e:	e15b      	b.n	8009458 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <HAL_SPI_TransmitReceive+0x82>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <HAL_SPI_TransmitReceive+0x82>
 80091ac:	887b      	ldrh	r3, [r7, #2]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091b8:	e14e      	b.n	8009458 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d003      	beq.n	80091ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2205      	movs	r2, #5
 80091ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	887a      	ldrh	r2, [r7, #2]
 80091de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	887a      	ldrh	r2, [r7, #2]
 80091e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	887a      	ldrh	r2, [r7, #2]
 80091f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	887a      	ldrh	r2, [r7, #2]
 80091f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920e:	2b40      	cmp	r3, #64	; 0x40
 8009210:	d007      	beq.n	8009222 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800922a:	d178      	bne.n	800931e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <HAL_SPI_TransmitReceive+0x10a>
 8009234:	8b7b      	ldrh	r3, [r7, #26]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d166      	bne.n	8009308 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923e:	881a      	ldrh	r2, [r3, #0]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	1c9a      	adds	r2, r3, #2
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009254:	b29b      	uxth	r3, r3
 8009256:	3b01      	subs	r3, #1
 8009258:	b29a      	uxth	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800925e:	e053      	b.n	8009308 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b02      	cmp	r3, #2
 800926c:	d11b      	bne.n	80092a6 <HAL_SPI_TransmitReceive+0x176>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009272:	b29b      	uxth	r3, r3
 8009274:	2b00      	cmp	r3, #0
 8009276:	d016      	beq.n	80092a6 <HAL_SPI_TransmitReceive+0x176>
 8009278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927a:	2b01      	cmp	r3, #1
 800927c:	d113      	bne.n	80092a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009282:	881a      	ldrh	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	1c9a      	adds	r2, r3, #2
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	b29a      	uxth	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d119      	bne.n	80092e8 <HAL_SPI_TransmitReceive+0x1b8>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d014      	beq.n	80092e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	b292      	uxth	r2, r2
 80092ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	1c9a      	adds	r2, r3, #2
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092da:	b29b      	uxth	r3, r3
 80092dc:	3b01      	subs	r3, #1
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092e4:	2301      	movs	r3, #1
 80092e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80092e8:	f7fa fba0 	bl	8003a2c <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d807      	bhi.n	8009308 <HAL_SPI_TransmitReceive+0x1d8>
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d003      	beq.n	8009308 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009306:	e0a7      	b.n	8009458 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800930c:	b29b      	uxth	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1a6      	bne.n	8009260 <HAL_SPI_TransmitReceive+0x130>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009316:	b29b      	uxth	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1a1      	bne.n	8009260 <HAL_SPI_TransmitReceive+0x130>
 800931c:	e07c      	b.n	8009418 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <HAL_SPI_TransmitReceive+0x1fc>
 8009326:	8b7b      	ldrh	r3, [r7, #26]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d16b      	bne.n	8009404 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009348:	b29b      	uxth	r3, r3
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009352:	e057      	b.n	8009404 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b02      	cmp	r3, #2
 8009360:	d11c      	bne.n	800939c <HAL_SPI_TransmitReceive+0x26c>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009366:	b29b      	uxth	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d017      	beq.n	800939c <HAL_SPI_TransmitReceive+0x26c>
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	2b01      	cmp	r3, #1
 8009370:	d114      	bne.n	800939c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	330c      	adds	r3, #12
 800937c:	7812      	ldrb	r2, [r2, #0]
 800937e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800938e:	b29b      	uxth	r3, r3
 8009390:	3b01      	subs	r3, #1
 8009392:	b29a      	uxth	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d119      	bne.n	80093de <HAL_SPI_TransmitReceive+0x2ae>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d014      	beq.n	80093de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	3b01      	subs	r3, #1
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093da:	2301      	movs	r3, #1
 80093dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80093de:	f7fa fb25 	bl	8003a2c <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d803      	bhi.n	80093f6 <HAL_SPI_TransmitReceive+0x2c6>
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	d102      	bne.n	80093fc <HAL_SPI_TransmitReceive+0x2cc>
 80093f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d103      	bne.n	8009404 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009402:	e029      	b.n	8009458 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009408:	b29b      	uxth	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1a2      	bne.n	8009354 <HAL_SPI_TransmitReceive+0x224>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009412:	b29b      	uxth	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	d19d      	bne.n	8009354 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f9c1 	bl	80097a4 <SPI_EndRxTxTransaction>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d006      	beq.n	8009436 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2220      	movs	r2, #32
 8009432:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009434:	e010      	b.n	8009458 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10b      	bne.n	8009456 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	617b      	str	r3, [r7, #20]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	e000      	b.n	8009458 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009468:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800946c:	4618      	mov	r0, r3
 800946e:	3730      	adds	r7, #48	; 0x30
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	099b      	lsrs	r3, r3, #6
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10f      	bne.n	80094b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	099b      	lsrs	r3, r3, #6
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
    return;
 80094b6:	e0be      	b.n	8009636 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <HAL_SPI_IRQHandler+0x66>
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	09db      	lsrs	r3, r3, #7
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d004      	beq.n	80094da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	4798      	blx	r3
    return;
 80094d8:	e0ad      	b.n	8009636 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d106      	bne.n	80094f4 <HAL_SPI_IRQHandler+0x80>
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	099b      	lsrs	r3, r3, #6
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 80a1 	beq.w	8009636 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	095b      	lsrs	r3, r3, #5
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 809a 	beq.w	8009636 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	099b      	lsrs	r3, r3, #6
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d023      	beq.n	8009556 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b03      	cmp	r3, #3
 8009518:	d011      	beq.n	800953e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951e:	f043 0204 	orr.w	r2, r3, #4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	e00b      	b.n	8009556 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	693b      	ldr	r3, [r7, #16]
        return;
 8009554:	e06f      	b.n	8009636 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d014      	beq.n	800958c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009566:	f043 0201 	orr.w	r2, r3, #1
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009590:	2b00      	cmp	r3, #0
 8009592:	d04f      	beq.n	8009634 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d104      	bne.n	80095c0 <HAL_SPI_IRQHandler+0x14c>
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d034      	beq.n	800962a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0203 	bic.w	r2, r2, #3
 80095ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d011      	beq.n	80095fc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095dc:	4a17      	ldr	r2, [pc, #92]	; (800963c <HAL_SPI_IRQHandler+0x1c8>)
 80095de:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fb fe0f 	bl	8005208 <HAL_DMA_Abort_IT>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009600:	2b00      	cmp	r3, #0
 8009602:	d016      	beq.n	8009632 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009608:	4a0c      	ldr	r2, [pc, #48]	; (800963c <HAL_SPI_IRQHandler+0x1c8>)
 800960a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009610:	4618      	mov	r0, r3
 8009612:	f7fb fdf9 	bl	8005208 <HAL_DMA_Abort_IT>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00a      	beq.n	8009632 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009620:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009628:	e003      	b.n	8009632 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f808 	bl	8009640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009630:	e000      	b.n	8009634 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8009632:	bf00      	nop
    return;
 8009634:	bf00      	nop
  }
}
 8009636:	3720      	adds	r7, #32
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	0800966d 	.word	0x0800966d

08009640 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr

08009652 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009660:	b2db      	uxtb	r3, r3
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr

0800966c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff ffda 	bl	8009640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096a4:	f7fa f9c2 	bl	8003a2c <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	1a9b      	subs	r3, r3, r2
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	4413      	add	r3, r2
 80096b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096b4:	f7fa f9ba 	bl	8003a2c <HAL_GetTick>
 80096b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096ba:	4b39      	ldr	r3, [pc, #228]	; (80097a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	015b      	lsls	r3, r3, #5
 80096c0:	0d1b      	lsrs	r3, r3, #20
 80096c2:	69fa      	ldr	r2, [r7, #28]
 80096c4:	fb02 f303 	mul.w	r3, r2, r3
 80096c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096ca:	e054      	b.n	8009776 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d2:	d050      	beq.n	8009776 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096d4:	f7fa f9aa 	bl	8003a2c <HAL_GetTick>
 80096d8:	4602      	mov	r2, r0
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	69fa      	ldr	r2, [r7, #28]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d902      	bls.n	80096ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d13d      	bne.n	8009766 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009702:	d111      	bne.n	8009728 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800970c:	d004      	beq.n	8009718 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009716:	d107      	bne.n	8009728 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009730:	d10f      	bne.n	8009752 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e017      	b.n	8009796 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	3b01      	subs	r3, #1
 8009774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4013      	ands	r3, r2
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	429a      	cmp	r2, r3
 8009784:	bf0c      	ite	eq
 8009786:	2301      	moveq	r3, #1
 8009788:	2300      	movne	r3, #0
 800978a:	b2db      	uxtb	r3, r3
 800978c:	461a      	mov	r2, r3
 800978e:	79fb      	ldrb	r3, [r7, #7]
 8009790:	429a      	cmp	r2, r3
 8009792:	d19b      	bne.n	80096cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3720      	adds	r7, #32
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000004 	.word	0x20000004

080097a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2200      	movs	r2, #0
 80097b8:	2180      	movs	r1, #128	; 0x80
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7ff ff6a 	bl	8009694 <SPI_WaitFlagStateUntilTimeout>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ca:	f043 0220 	orr.w	r2, r3, #32
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e000      	b.n	80097d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e041      	b.n	8009876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d106      	bne.n	800980c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7f9 fd32 	bl	8003270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3304      	adds	r3, #4
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f000 fc6c 	bl	800a0fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b01      	cmp	r3, #1
 8009892:	d001      	beq.n	8009898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e03a      	b.n	800990e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68da      	ldr	r2, [r3, #12]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f042 0201 	orr.w	r2, r2, #1
 80098ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a18      	ldr	r2, [pc, #96]	; (8009918 <HAL_TIM_Base_Start_IT+0x98>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00e      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x58>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c2:	d009      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x58>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a14      	ldr	r2, [pc, #80]	; (800991c <HAL_TIM_Base_Start_IT+0x9c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d004      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x58>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a13      	ldr	r2, [pc, #76]	; (8009920 <HAL_TIM_Base_Start_IT+0xa0>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d111      	bne.n	80098fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b06      	cmp	r3, #6
 80098e8:	d010      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0201 	orr.w	r2, r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fa:	e007      	b.n	800990c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0201 	orr.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr
 8009918:	40012c00 	.word	0x40012c00
 800991c:	40000400 	.word	0x40000400
 8009920:	40000800 	.word	0x40000800

08009924 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e041      	b.n	80099ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f839 	bl	80099c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3304      	adds	r3, #4
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f000 fbca 	bl	800a0fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bc80      	pop	{r7}
 80099d2:	4770      	bx	lr

080099d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <HAL_TIM_IC_Start_IT+0x1a>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	e013      	b.n	8009a16 <HAL_TIM_IC_Start_IT+0x42>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b04      	cmp	r3, #4
 80099f2:	d104      	bne.n	80099fe <HAL_TIM_IC_Start_IT+0x2a>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	e00b      	b.n	8009a16 <HAL_TIM_IC_Start_IT+0x42>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d104      	bne.n	8009a0e <HAL_TIM_IC_Start_IT+0x3a>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	e003      	b.n	8009a16 <HAL_TIM_IC_Start_IT+0x42>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <HAL_TIM_IC_Start_IT+0x54>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	e013      	b.n	8009a50 <HAL_TIM_IC_Start_IT+0x7c>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d104      	bne.n	8009a38 <HAL_TIM_IC_Start_IT+0x64>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	e00b      	b.n	8009a50 <HAL_TIM_IC_Start_IT+0x7c>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b08      	cmp	r3, #8
 8009a3c:	d104      	bne.n	8009a48 <HAL_TIM_IC_Start_IT+0x74>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	e003      	b.n	8009a50 <HAL_TIM_IC_Start_IT+0x7c>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d102      	bne.n	8009a5e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d001      	beq.n	8009a62 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e0b3      	b.n	8009bca <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d104      	bne.n	8009a72 <HAL_TIM_IC_Start_IT+0x9e>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a70:	e013      	b.n	8009a9a <HAL_TIM_IC_Start_IT+0xc6>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d104      	bne.n	8009a82 <HAL_TIM_IC_Start_IT+0xae>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a80:	e00b      	b.n	8009a9a <HAL_TIM_IC_Start_IT+0xc6>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	d104      	bne.n	8009a92 <HAL_TIM_IC_Start_IT+0xbe>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a90:	e003      	b.n	8009a9a <HAL_TIM_IC_Start_IT+0xc6>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2202      	movs	r2, #2
 8009a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d104      	bne.n	8009aaa <HAL_TIM_IC_Start_IT+0xd6>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aa8:	e013      	b.n	8009ad2 <HAL_TIM_IC_Start_IT+0xfe>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d104      	bne.n	8009aba <HAL_TIM_IC_Start_IT+0xe6>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ab8:	e00b      	b.n	8009ad2 <HAL_TIM_IC_Start_IT+0xfe>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b08      	cmp	r3, #8
 8009abe:	d104      	bne.n	8009aca <HAL_TIM_IC_Start_IT+0xf6>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ac8:	e003      	b.n	8009ad2 <HAL_TIM_IC_Start_IT+0xfe>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2202      	movs	r2, #2
 8009ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b0c      	cmp	r3, #12
 8009ad6:	d841      	bhi.n	8009b5c <HAL_TIM_IC_Start_IT+0x188>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <HAL_TIM_IC_Start_IT+0x10c>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009b5d 	.word	0x08009b5d
 8009ae8:	08009b5d 	.word	0x08009b5d
 8009aec:	08009b5d 	.word	0x08009b5d
 8009af0:	08009b27 	.word	0x08009b27
 8009af4:	08009b5d 	.word	0x08009b5d
 8009af8:	08009b5d 	.word	0x08009b5d
 8009afc:	08009b5d 	.word	0x08009b5d
 8009b00:	08009b39 	.word	0x08009b39
 8009b04:	08009b5d 	.word	0x08009b5d
 8009b08:	08009b5d 	.word	0x08009b5d
 8009b0c:	08009b5d 	.word	0x08009b5d
 8009b10:	08009b4b 	.word	0x08009b4b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0202 	orr.w	r2, r2, #2
 8009b22:	60da      	str	r2, [r3, #12]
      break;
 8009b24:	e01b      	b.n	8009b5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f042 0204 	orr.w	r2, r2, #4
 8009b34:	60da      	str	r2, [r3, #12]
      break;
 8009b36:	e012      	b.n	8009b5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 0208 	orr.w	r2, r2, #8
 8009b46:	60da      	str	r2, [r3, #12]
      break;
 8009b48:	e009      	b.n	8009b5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f042 0210 	orr.w	r2, r2, #16
 8009b58:	60da      	str	r2, [r3, #12]
      break;
 8009b5a:	e000      	b.n	8009b5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8009b5c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2201      	movs	r2, #1
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fccd 	bl	800a506 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <HAL_TIM_IC_Start_IT+0x200>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00e      	beq.n	8009b94 <HAL_TIM_IC_Start_IT+0x1c0>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7e:	d009      	beq.n	8009b94 <HAL_TIM_IC_Start_IT+0x1c0>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a14      	ldr	r2, [pc, #80]	; (8009bd8 <HAL_TIM_IC_Start_IT+0x204>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d004      	beq.n	8009b94 <HAL_TIM_IC_Start_IT+0x1c0>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a13      	ldr	r2, [pc, #76]	; (8009bdc <HAL_TIM_IC_Start_IT+0x208>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d111      	bne.n	8009bb8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2b06      	cmp	r3, #6
 8009ba4:	d010      	beq.n	8009bc8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0201 	orr.w	r2, r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb6:	e007      	b.n	8009bc8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 0201 	orr.w	r2, r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	40012c00 	.word	0x40012c00
 8009bd8:	40000400 	.word	0x40000400
 8009bdc:	40000800 	.word	0x40000800

08009be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d122      	bne.n	8009c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d11b      	bne.n	8009c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f06f 0202 	mvn.w	r2, #2
 8009c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa4e 	bl	800a0c4 <HAL_TIM_IC_CaptureCallback>
 8009c28:	e005      	b.n	8009c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa41 	bl	800a0b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fa50 	bl	800a0d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f003 0304 	and.w	r3, r3, #4
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d122      	bne.n	8009c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d11b      	bne.n	8009c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f06f 0204 	mvn.w	r2, #4
 8009c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2202      	movs	r2, #2
 8009c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa24 	bl	800a0c4 <HAL_TIM_IC_CaptureCallback>
 8009c7c:	e005      	b.n	8009c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fa17 	bl	800a0b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fa26 	bl	800a0d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	d122      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f003 0308 	and.w	r3, r3, #8
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d11b      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f06f 0208 	mvn.w	r2, #8
 8009cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2204      	movs	r2, #4
 8009cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f9fa 	bl	800a0c4 <HAL_TIM_IC_CaptureCallback>
 8009cd0:	e005      	b.n	8009cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f9ed 	bl	800a0b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f9fc 	bl	800a0d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f003 0310 	and.w	r3, r3, #16
 8009cee:	2b10      	cmp	r3, #16
 8009cf0:	d122      	bne.n	8009d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	2b10      	cmp	r3, #16
 8009cfe:	d11b      	bne.n	8009d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f06f 0210 	mvn.w	r2, #16
 8009d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2208      	movs	r2, #8
 8009d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f9d0 	bl	800a0c4 <HAL_TIM_IC_CaptureCallback>
 8009d24:	e005      	b.n	8009d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f9c3 	bl	800a0b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f9d2 	bl	800a0d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d10e      	bne.n	8009d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d107      	bne.n	8009d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f06f 0201 	mvn.w	r2, #1
 8009d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f99e 	bl	800a0a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6e:	2b80      	cmp	r3, #128	; 0x80
 8009d70:	d10e      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7c:	2b80      	cmp	r3, #128	; 0x80
 8009d7e:	d107      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fc47 	bl	800a61e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9a:	2b40      	cmp	r3, #64	; 0x40
 8009d9c:	d10e      	bne.n	8009dbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da8:	2b40      	cmp	r3, #64	; 0x40
 8009daa:	d107      	bne.n	8009dbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f996 	bl	800a0e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	f003 0320 	and.w	r3, r3, #32
 8009dc6:	2b20      	cmp	r3, #32
 8009dc8:	d10e      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f003 0320 	and.w	r3, r3, #32
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	d107      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f06f 0220 	mvn.w	r2, #32
 8009de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fc12 	bl	800a60c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d101      	bne.n	8009e0a <HAL_TIM_IC_ConfigChannel+0x1a>
 8009e06:	2302      	movs	r3, #2
 8009e08:	e082      	b.n	8009f10 <HAL_TIM_IC_ConfigChannel+0x120>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d11b      	bne.n	8009e50 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6818      	ldr	r0, [r3, #0]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	6819      	ldr	r1, [r3, #0]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f000 f9ca 	bl	800a1c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	699a      	ldr	r2, [r3, #24]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f022 020c 	bic.w	r2, r2, #12
 8009e3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6999      	ldr	r1, [r3, #24]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	689a      	ldr	r2, [r3, #8]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	619a      	str	r2, [r3, #24]
 8009e4e:	e05a      	b.n	8009f06 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d11c      	bne.n	8009e90 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	6819      	ldr	r1, [r3, #0]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f000 fa33 	bl	800a2d0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	699a      	ldr	r2, [r3, #24]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009e78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6999      	ldr	r1, [r3, #24]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	021a      	lsls	r2, r3, #8
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	619a      	str	r2, [r3, #24]
 8009e8e:	e03a      	b.n	8009f06 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b08      	cmp	r3, #8
 8009e94:	d11b      	bne.n	8009ece <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6819      	ldr	r1, [r3, #0]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f000 fa7e 	bl	800a3a6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	69da      	ldr	r2, [r3, #28]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 020c 	bic.w	r2, r2, #12
 8009eb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	69d9      	ldr	r1, [r3, #28]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	61da      	str	r2, [r3, #28]
 8009ecc:	e01b      	b.n	8009f06 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6819      	ldr	r1, [r3, #0]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f000 fa9d 	bl	800a41c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69da      	ldr	r2, [r3, #28]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ef0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	69d9      	ldr	r1, [r3, #28]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	021a      	lsls	r2, r3, #8
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d101      	bne.n	8009f30 <HAL_TIM_ConfigClockSource+0x18>
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e0b3      	b.n	800a098 <HAL_TIM_ConfigClockSource+0x180>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f68:	d03e      	beq.n	8009fe8 <HAL_TIM_ConfigClockSource+0xd0>
 8009f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f6e:	f200 8087 	bhi.w	800a080 <HAL_TIM_ConfigClockSource+0x168>
 8009f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f76:	f000 8085 	beq.w	800a084 <HAL_TIM_ConfigClockSource+0x16c>
 8009f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7e:	d87f      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x168>
 8009f80:	2b70      	cmp	r3, #112	; 0x70
 8009f82:	d01a      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0xa2>
 8009f84:	2b70      	cmp	r3, #112	; 0x70
 8009f86:	d87b      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x168>
 8009f88:	2b60      	cmp	r3, #96	; 0x60
 8009f8a:	d050      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0x116>
 8009f8c:	2b60      	cmp	r3, #96	; 0x60
 8009f8e:	d877      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x168>
 8009f90:	2b50      	cmp	r3, #80	; 0x50
 8009f92:	d03c      	beq.n	800a00e <HAL_TIM_ConfigClockSource+0xf6>
 8009f94:	2b50      	cmp	r3, #80	; 0x50
 8009f96:	d873      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x168>
 8009f98:	2b40      	cmp	r3, #64	; 0x40
 8009f9a:	d058      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x136>
 8009f9c:	2b40      	cmp	r3, #64	; 0x40
 8009f9e:	d86f      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x168>
 8009fa0:	2b30      	cmp	r3, #48	; 0x30
 8009fa2:	d064      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x156>
 8009fa4:	2b30      	cmp	r3, #48	; 0x30
 8009fa6:	d86b      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x168>
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d060      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x156>
 8009fac:	2b20      	cmp	r3, #32
 8009fae:	d867      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x168>
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d05c      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x156>
 8009fb4:	2b10      	cmp	r3, #16
 8009fb6:	d05a      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009fb8:	e062      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	6899      	ldr	r1, [r3, #8]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f000 fa7d 	bl	800a4c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	609a      	str	r2, [r3, #8]
      break;
 8009fe6:	e04e      	b.n	800a086 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	6899      	ldr	r1, [r3, #8]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f000 fa66 	bl	800a4c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a00a:	609a      	str	r2, [r3, #8]
      break;
 800a00c:	e03b      	b.n	800a086 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6859      	ldr	r1, [r3, #4]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	461a      	mov	r2, r3
 800a01c:	f000 f92a 	bl	800a274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2150      	movs	r1, #80	; 0x50
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fa34 	bl	800a494 <TIM_ITRx_SetConfig>
      break;
 800a02c:	e02b      	b.n	800a086 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	6859      	ldr	r1, [r3, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	461a      	mov	r2, r3
 800a03c:	f000 f984 	bl	800a348 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2160      	movs	r1, #96	; 0x60
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fa24 	bl	800a494 <TIM_ITRx_SetConfig>
      break;
 800a04c:	e01b      	b.n	800a086 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	6859      	ldr	r1, [r3, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	461a      	mov	r2, r3
 800a05c:	f000 f90a 	bl	800a274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2140      	movs	r1, #64	; 0x40
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fa14 	bl	800a494 <TIM_ITRx_SetConfig>
      break;
 800a06c:	e00b      	b.n	800a086 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f000 fa0b 	bl	800a494 <TIM_ITRx_SetConfig>
        break;
 800a07e:	e002      	b.n	800a086 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a080:	bf00      	nop
 800a082:	e000      	b.n	800a086 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bc80      	pop	{r7}
 800a0b0:	4770      	bx	lr

0800a0b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b083      	sub	sp, #12
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0ba:	bf00      	nop
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bc80      	pop	{r7}
 800a0c2:	4770      	bx	lr

0800a0c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bc80      	pop	{r7}
 800a0d4:	4770      	bx	lr

0800a0d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bc80      	pop	{r7}
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bc80      	pop	{r7}
 800a0f8:	4770      	bx	lr
	...

0800a0fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a29      	ldr	r2, [pc, #164]	; (800a1b4 <TIM_Base_SetConfig+0xb8>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d00b      	beq.n	800a12c <TIM_Base_SetConfig+0x30>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11a:	d007      	beq.n	800a12c <TIM_Base_SetConfig+0x30>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a26      	ldr	r2, [pc, #152]	; (800a1b8 <TIM_Base_SetConfig+0xbc>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d003      	beq.n	800a12c <TIM_Base_SetConfig+0x30>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a25      	ldr	r2, [pc, #148]	; (800a1bc <TIM_Base_SetConfig+0xc0>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d108      	bne.n	800a13e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a1c      	ldr	r2, [pc, #112]	; (800a1b4 <TIM_Base_SetConfig+0xb8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00b      	beq.n	800a15e <TIM_Base_SetConfig+0x62>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a14c:	d007      	beq.n	800a15e <TIM_Base_SetConfig+0x62>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a19      	ldr	r2, [pc, #100]	; (800a1b8 <TIM_Base_SetConfig+0xbc>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d003      	beq.n	800a15e <TIM_Base_SetConfig+0x62>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a18      	ldr	r2, [pc, #96]	; (800a1bc <TIM_Base_SetConfig+0xc0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d108      	bne.n	800a170 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a07      	ldr	r2, [pc, #28]	; (800a1b4 <TIM_Base_SetConfig+0xb8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d103      	bne.n	800a1a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	691a      	ldr	r2, [r3, #16]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	615a      	str	r2, [r3, #20]
}
 800a1aa:	bf00      	nop
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bc80      	pop	{r7}
 800a1b2:	4770      	bx	lr
 800a1b4:	40012c00 	.word	0x40012c00
 800a1b8:	40000400 	.word	0x40000400
 800a1bc:	40000800 	.word	0x40000800

0800a1c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	f023 0201 	bic.w	r2, r3, #1
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4a1f      	ldr	r2, [pc, #124]	; (800a268 <TIM_TI1_SetConfig+0xa8>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00b      	beq.n	800a206 <TIM_TI1_SetConfig+0x46>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f4:	d007      	beq.n	800a206 <TIM_TI1_SetConfig+0x46>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4a1c      	ldr	r2, [pc, #112]	; (800a26c <TIM_TI1_SetConfig+0xac>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d003      	beq.n	800a206 <TIM_TI1_SetConfig+0x46>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4a1b      	ldr	r2, [pc, #108]	; (800a270 <TIM_TI1_SetConfig+0xb0>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d101      	bne.n	800a20a <TIM_TI1_SetConfig+0x4a>
 800a206:	2301      	movs	r3, #1
 800a208:	e000      	b.n	800a20c <TIM_TI1_SetConfig+0x4c>
 800a20a:	2300      	movs	r3, #0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d008      	beq.n	800a222 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]
 800a220:	e003      	b.n	800a22a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f043 0301 	orr.w	r3, r3, #1
 800a228:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	b2db      	uxtb	r3, r3
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f023 030a 	bic.w	r3, r3, #10
 800a244:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f003 030a 	and.w	r3, r3, #10
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4313      	orrs	r3, r2
 800a250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr
 800a268:	40012c00 	.word	0x40012c00
 800a26c:	40000400 	.word	0x40000400
 800a270:	40000800 	.word	0x40000800

0800a274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	f023 0201 	bic.w	r2, r3, #1
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a29e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	011b      	lsls	r3, r3, #4
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f023 030a 	bic.w	r3, r3, #10
 800a2b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	621a      	str	r2, [r3, #32]
}
 800a2c6:	bf00      	nop
 800a2c8:	371c      	adds	r7, #28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr

0800a2d0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b087      	sub	sp, #28
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	f023 0210 	bic.w	r2, r3, #16
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	4313      	orrs	r3, r2
 800a306:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a30e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	031b      	lsls	r3, r3, #12
 800a314:	b29b      	uxth	r3, r3
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	4313      	orrs	r3, r2
 800a31a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a322:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	011b      	lsls	r3, r3, #4
 800a328:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	621a      	str	r2, [r3, #32]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	bc80      	pop	{r7}
 800a346:	4770      	bx	lr

0800a348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	f023 0210 	bic.w	r2, r3, #16
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a372:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	031b      	lsls	r3, r3, #12
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a384:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	011b      	lsls	r3, r3, #4
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	621a      	str	r2, [r3, #32]
}
 800a39c:	bf00      	nop
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr

0800a3a6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b087      	sub	sp, #28
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f023 0303 	bic.w	r3, r3, #3
 800a3d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	011b      	lsls	r3, r3, #4
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	021b      	lsls	r3, r3, #8
 800a3fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4313      	orrs	r3, r2
 800a404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	621a      	str	r2, [r3, #32]
}
 800a412:	bf00      	nop
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr

0800a41c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a448:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	021b      	lsls	r3, r3, #8
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	4313      	orrs	r3, r2
 800a452:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a45a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	031b      	lsls	r3, r3, #12
 800a460:	b29b      	uxth	r3, r3
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	4313      	orrs	r3, r2
 800a466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a46e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	031b      	lsls	r3, r3, #12
 800a474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	621a      	str	r2, [r3, #32]
}
 800a48a:	bf00      	nop
 800a48c:	371c      	adds	r7, #28
 800a48e:	46bd      	mov	sp, r7
 800a490:	bc80      	pop	{r7}
 800a492:	4770      	bx	lr

0800a494 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	f043 0307 	orr.w	r3, r3, #7
 800a4b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	609a      	str	r2, [r3, #8]
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bc80      	pop	{r7}
 800a4c6:	4770      	bx	lr

0800a4c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	021a      	lsls	r2, r3, #8
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	609a      	str	r2, [r3, #8]
}
 800a4fc:	bf00      	nop
 800a4fe:	371c      	adds	r7, #28
 800a500:	46bd      	mov	sp, r7
 800a502:	bc80      	pop	{r7}
 800a504:	4770      	bx	lr

0800a506 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a506:	b480      	push	{r7}
 800a508:	b087      	sub	sp, #28
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f003 031f 	and.w	r3, r3, #31
 800a518:	2201      	movs	r2, #1
 800a51a:	fa02 f303 	lsl.w	r3, r2, r3
 800a51e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6a1a      	ldr	r2, [r3, #32]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	43db      	mvns	r3, r3
 800a528:	401a      	ands	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a1a      	ldr	r2, [r3, #32]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	f003 031f 	and.w	r3, r3, #31
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	fa01 f303 	lsl.w	r3, r1, r3
 800a53e:	431a      	orrs	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	621a      	str	r2, [r3, #32]
}
 800a544:	bf00      	nop
 800a546:	371c      	adds	r7, #28
 800a548:	46bd      	mov	sp, r7
 800a54a:	bc80      	pop	{r7}
 800a54c:	4770      	bx	lr
	...

0800a550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a560:	2b01      	cmp	r3, #1
 800a562:	d101      	bne.n	800a568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a564:	2302      	movs	r3, #2
 800a566:	e046      	b.n	800a5f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a58e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a16      	ldr	r2, [pc, #88]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d00e      	beq.n	800a5ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b4:	d009      	beq.n	800a5ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a12      	ldr	r2, [pc, #72]	; (800a604 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d004      	beq.n	800a5ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a10      	ldr	r2, [pc, #64]	; (800a608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d10c      	bne.n	800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bc80      	pop	{r7}
 800a5fe:	4770      	bx	lr
 800a600:	40012c00 	.word	0x40012c00
 800a604:	40000400 	.word	0x40000400
 800a608:	40000800 	.word	0x40000800

0800a60c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	bc80      	pop	{r7}
 800a61c:	4770      	bx	lr

0800a61e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bc80      	pop	{r7}
 800a62e:	4770      	bx	lr

0800a630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e03f      	b.n	800a6c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7f8 fec4 	bl	80033e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2224      	movs	r2, #36	; 0x24
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fcad 	bl	800afd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	691a      	ldr	r2, [r3, #16]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	695a      	ldr	r2, [r3, #20]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2220      	movs	r2, #32
 800a6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2220      	movs	r2, #32
 800a6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	d11d      	bne.n	800a720 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <HAL_UART_Receive_DMA+0x26>
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e016      	b.n	800a722 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <HAL_UART_Receive_DMA+0x38>
 800a6fe:	2302      	movs	r3, #2
 800a700:	e00f      	b.n	800a722 <HAL_UART_Receive_DMA+0x58>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a710:	88fb      	ldrh	r3, [r7, #6]
 800a712:	461a      	mov	r2, r3
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 fa92 	bl	800ac40 <UART_Start_Receive_DMA>
 800a71c:	4603      	mov	r3, r0
 800a71e:	e000      	b.n	800a722 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a720:	2302      	movs	r3, #2
  }
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08a      	sub	sp, #40	; 0x28
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a750:	2300      	movs	r3, #0
 800a752:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10d      	bne.n	800a77e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	f003 0320 	and.w	r3, r3, #32
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d008      	beq.n	800a77e <HAL_UART_IRQHandler+0x52>
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fb82 	bl	800ae80 <UART_Receive_IT>
      return;
 800a77c:	e17b      	b.n	800aa76 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 80b1 	beq.w	800a8e8 <HAL_UART_IRQHandler+0x1bc>
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d105      	bne.n	800a79c <HAL_UART_IRQHandler+0x70>
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 80a6 	beq.w	800a8e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <HAL_UART_IRQHandler+0x90>
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	f043 0201 	orr.w	r2, r3, #1
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	f003 0304 	and.w	r3, r3, #4
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00a      	beq.n	800a7dc <HAL_UART_IRQHandler+0xb0>
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d005      	beq.n	800a7dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	f043 0202 	orr.w	r2, r3, #2
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <HAL_UART_IRQHandler+0xd0>
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f4:	f043 0204 	orr.w	r2, r3, #4
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	f003 0308 	and.w	r3, r3, #8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00f      	beq.n	800a826 <HAL_UART_IRQHandler+0xfa>
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	f003 0320 	and.w	r3, r3, #32
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d104      	bne.n	800a81a <HAL_UART_IRQHandler+0xee>
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	d005      	beq.n	800a826 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81e:	f043 0208 	orr.w	r2, r3, #8
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f000 811e 	beq.w	800aa6c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d007      	beq.n	800a84a <HAL_UART_IRQHandler+0x11e>
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	f003 0320 	and.w	r3, r3, #32
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb1b 	bl	800ae80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a854:	2b00      	cmp	r3, #0
 800a856:	bf14      	ite	ne
 800a858:	2301      	movne	r3, #1
 800a85a:	2300      	moveq	r3, #0
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a864:	f003 0308 	and.w	r3, r3, #8
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d102      	bne.n	800a872 <HAL_UART_IRQHandler+0x146>
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d031      	beq.n	800a8d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa5d 	bl	800ad32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	695b      	ldr	r3, [r3, #20]
 800a87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a882:	2b00      	cmp	r3, #0
 800a884:	d023      	beq.n	800a8ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	695a      	ldr	r2, [r3, #20]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a894:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d013      	beq.n	800a8c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a2:	4a76      	ldr	r2, [pc, #472]	; (800aa7c <HAL_UART_IRQHandler+0x350>)
 800a8a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fa fcac 	bl	8005208 <HAL_DMA_Abort_IT>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d016      	beq.n	800a8e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c4:	e00e      	b.n	800a8e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f8f5 	bl	800aab6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8cc:	e00a      	b.n	800a8e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f8f1 	bl	800aab6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d4:	e006      	b.n	800a8e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f8ed 	bl	800aab6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a8e2:	e0c3      	b.n	800aa6c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e4:	bf00      	nop
    return;
 800a8e6:	e0c1      	b.n	800aa6c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	f040 80a1 	bne.w	800aa34 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	f003 0310 	and.w	r3, r3, #16
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 809b 	beq.w	800aa34 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	f003 0310 	and.w	r3, r3, #16
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8095 	beq.w	800aa34 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d04e      	beq.n	800a9cc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a938:	8a3b      	ldrh	r3, [r7, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 8098 	beq.w	800aa70 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a944:	8a3a      	ldrh	r2, [r7, #16]
 800a946:	429a      	cmp	r2, r3
 800a948:	f080 8092 	bcs.w	800aa70 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	8a3a      	ldrh	r2, [r7, #16]
 800a950:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	2b20      	cmp	r3, #32
 800a95a:	d02b      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68da      	ldr	r2, [r3, #12]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a96a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	695a      	ldr	r2, [r3, #20]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f022 0201 	bic.w	r2, r2, #1
 800a97a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	695a      	ldr	r2, [r3, #20]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a98a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2220      	movs	r2, #32
 800a990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f022 0210 	bic.w	r2, r2, #16
 800a9a8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fa fbef 	bl	8005192 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f87f 	bl	800aac8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a9ca:	e051      	b.n	800aa70 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d047      	beq.n	800aa74 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a9e4:	8a7b      	ldrh	r3, [r7, #18]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d044      	beq.n	800aa74 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a9f8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	695a      	ldr	r2, [r3, #20]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0201 	bic.w	r2, r2, #1
 800aa08:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68da      	ldr	r2, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0210 	bic.w	r2, r2, #16
 800aa26:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa28:	8a7b      	ldrh	r3, [r7, #18]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f84b 	bl	800aac8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800aa32:	e01f      	b.n	800aa74 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d008      	beq.n	800aa50 <HAL_UART_IRQHandler+0x324>
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f9b2 	bl	800adb2 <UART_Transmit_IT>
    return;
 800aa4e:	e012      	b.n	800aa76 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00d      	beq.n	800aa76 <HAL_UART_IRQHandler+0x34a>
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d008      	beq.n	800aa76 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f9f3 	bl	800ae50 <UART_EndTransmit_IT>
    return;
 800aa6a:	e004      	b.n	800aa76 <HAL_UART_IRQHandler+0x34a>
    return;
 800aa6c:	bf00      	nop
 800aa6e:	e002      	b.n	800aa76 <HAL_UART_IRQHandler+0x34a>
      return;
 800aa70:	bf00      	nop
 800aa72:	e000      	b.n	800aa76 <HAL_UART_IRQHandler+0x34a>
      return;
 800aa74:	bf00      	nop
  }
}
 800aa76:	3728      	adds	r7, #40	; 0x28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	0800ad8b 	.word	0x0800ad8b

0800aa80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bc80      	pop	{r7}
 800aa90:	4770      	bx	lr

0800aa92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aa9a:	bf00      	nop
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bc80      	pop	{r7}
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bc80      	pop	{r7}
 800aab4:	4770      	bx	lr

0800aab6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aabe:	bf00      	nop
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bc80      	pop	{r7}
 800aac6:	4770      	bx	lr

0800aac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr

0800aade <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0320 	and.w	r3, r3, #32
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d12a      	bne.n	800ab50 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68da      	ldr	r2, [r3, #12]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab0e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	695a      	ldr	r2, [r3, #20]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f022 0201 	bic.w	r2, r2, #1
 800ab1e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	695a      	ldr	r2, [r3, #20]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab2e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2220      	movs	r2, #32
 800ab34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d107      	bne.n	800ab50 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f022 0210 	bic.w	r2, r2, #16
 800ab4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d106      	bne.n	800ab66 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f7ff ffb2 	bl	800aac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab64:	e002      	b.n	800ab6c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7ff ff93 	bl	800aa92 <HAL_UART_RxCpltCallback>
}
 800ab6c:	bf00      	nop
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d108      	bne.n	800ab9c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	4619      	mov	r1, r3
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f7ff ff97 	bl	800aac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab9a:	e002      	b.n	800aba2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f7ff ff81 	bl	800aaa4 <HAL_UART_RxHalfCpltCallback>
}
 800aba2:	bf00      	nop
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	bf14      	ite	ne
 800abca:	2301      	movne	r3, #1
 800abcc:	2300      	moveq	r3, #0
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b21      	cmp	r3, #33	; 0x21
 800abdc:	d108      	bne.n	800abf0 <UART_DMAError+0x46>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d005      	beq.n	800abf0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2200      	movs	r2, #0
 800abe8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800abea:	68b8      	ldr	r0, [r7, #8]
 800abec:	f000 f88c 	bl	800ad08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	bf14      	ite	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	2300      	moveq	r3, #0
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b22      	cmp	r3, #34	; 0x22
 800ac10:	d108      	bne.n	800ac24 <UART_DMAError+0x7a>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d005      	beq.n	800ac24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac1e:	68b8      	ldr	r0, [r7, #8]
 800ac20:	f000 f887 	bl	800ad32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	f043 0210 	orr.w	r2, r3, #16
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac30:	68b8      	ldr	r0, [r7, #8]
 800ac32:	f7ff ff40 	bl	800aab6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac36:	bf00      	nop
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
	...

0800ac40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	88fa      	ldrh	r2, [r7, #6]
 800ac58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2222      	movs	r2, #34	; 0x22
 800ac64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6c:	4a23      	ldr	r2, [pc, #140]	; (800acfc <UART_Start_Receive_DMA+0xbc>)
 800ac6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac74:	4a22      	ldr	r2, [pc, #136]	; (800ad00 <UART_Start_Receive_DMA+0xc0>)
 800ac76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7c:	4a21      	ldr	r2, [pc, #132]	; (800ad04 <UART_Start_Receive_DMA+0xc4>)
 800ac7e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac84:	2200      	movs	r2, #0
 800ac86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ac88:	f107 0308 	add.w	r3, r7, #8
 800ac8c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3304      	adds	r3, #4
 800ac98:	4619      	mov	r1, r3
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	f7fa fa18 	bl	80050d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aca4:	2300      	movs	r3, #0
 800aca6:	613b      	str	r3, [r7, #16]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	613b      	str	r3, [r7, #16]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	613b      	str	r3, [r7, #16]
 800acb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68da      	ldr	r2, [r3, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acd0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	695a      	ldr	r2, [r3, #20]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f042 0201 	orr.w	r2, r2, #1
 800ace0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	695a      	ldr	r2, [r3, #20]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acf0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	0800aadf 	.word	0x0800aadf
 800ad00:	0800ab75 	.word	0x0800ab75
 800ad04:	0800abab 	.word	0x0800abab

0800ad08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68da      	ldr	r2, [r3, #12]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ad1e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr

0800ad32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68da      	ldr	r2, [r3, #12]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	695a      	ldr	r2, [r3, #20]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f022 0201 	bic.w	r2, r2, #1
 800ad58:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d107      	bne.n	800ad72 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68da      	ldr	r2, [r3, #12]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f022 0210 	bic.w	r2, r2, #16
 800ad70:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2220      	movs	r2, #32
 800ad76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bc80      	pop	{r7}
 800ad88:	4770      	bx	lr

0800ad8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f7ff fe86 	bl	800aab6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adaa:	bf00      	nop
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b085      	sub	sp, #20
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b21      	cmp	r3, #33	; 0x21
 800adc4:	d13e      	bne.n	800ae44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adce:	d114      	bne.n	800adfa <UART_Transmit_IT+0x48>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d110      	bne.n	800adfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	1c9a      	adds	r2, r3, #2
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	621a      	str	r2, [r3, #32]
 800adf8:	e008      	b.n	800ae0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	1c59      	adds	r1, r3, #1
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6211      	str	r1, [r2, #32]
 800ae04:	781a      	ldrb	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	3b01      	subs	r3, #1
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10f      	bne.n	800ae40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	e000      	b.n	800ae46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae44:	2302      	movs	r3, #2
  }
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bc80      	pop	{r7}
 800ae4e:	4770      	bx	lr

0800ae50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68da      	ldr	r2, [r3, #12]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff fe05 	bl	800aa80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b22      	cmp	r3, #34	; 0x22
 800ae92:	f040 8099 	bne.w	800afc8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae9e:	d117      	bne.n	800aed0 <UART_Receive_IT+0x50>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d113      	bne.n	800aed0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec8:	1c9a      	adds	r2, r3, #2
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	629a      	str	r2, [r3, #40]	; 0x28
 800aece:	e026      	b.n	800af1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800aed6:	2300      	movs	r3, #0
 800aed8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aee2:	d007      	beq.n	800aef4 <UART_Receive_IT+0x74>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10a      	bne.n	800af02 <UART_Receive_IT+0x82>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d106      	bne.n	800af02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	e008      	b.n	800af14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af22:	b29b      	uxth	r3, r3
 800af24:	3b01      	subs	r3, #1
 800af26:	b29b      	uxth	r3, r3
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	4619      	mov	r1, r3
 800af2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d148      	bne.n	800afc4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68da      	ldr	r2, [r3, #12]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f022 0220 	bic.w	r2, r2, #32
 800af40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68da      	ldr	r2, [r3, #12]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	695a      	ldr	r2, [r3, #20]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0201 	bic.w	r2, r2, #1
 800af60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2220      	movs	r2, #32
 800af66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d123      	bne.n	800afba <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f022 0210 	bic.w	r2, r2, #16
 800af86:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0310 	and.w	r3, r3, #16
 800af92:	2b10      	cmp	r3, #16
 800af94:	d10a      	bne.n	800afac <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff fd88 	bl	800aac8 <HAL_UARTEx_RxEventCallback>
 800afb8:	e002      	b.n	800afc0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff fd69 	bl	800aa92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	e002      	b.n	800afca <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e000      	b.n	800afca <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800afc8:	2302      	movs	r3, #2
  }
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3718      	adds	r7, #24
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68da      	ldr	r2, [r3, #12]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	430a      	orrs	r2, r1
 800aff0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	431a      	orrs	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	4313      	orrs	r3, r2
 800b002:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b00e:	f023 030c 	bic.w	r3, r3, #12
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	6812      	ldr	r2, [r2, #0]
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	430b      	orrs	r3, r1
 800b01a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	699a      	ldr	r2, [r3, #24]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	430a      	orrs	r2, r1
 800b030:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a2c      	ldr	r2, [pc, #176]	; (800b0e8 <UART_SetConfig+0x114>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d103      	bne.n	800b044 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b03c:	f7fd fd0c 	bl	8008a58 <HAL_RCC_GetPCLK2Freq>
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	e002      	b.n	800b04a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b044:	f7fd fcf4 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800b048:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4613      	mov	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	009a      	lsls	r2, r3, #2
 800b054:	441a      	add	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b060:	4a22      	ldr	r2, [pc, #136]	; (800b0ec <UART_SetConfig+0x118>)
 800b062:	fba2 2303 	umull	r2, r3, r2, r3
 800b066:	095b      	lsrs	r3, r3, #5
 800b068:	0119      	lsls	r1, r3, #4
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	009a      	lsls	r2, r3, #2
 800b074:	441a      	add	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b080:	4b1a      	ldr	r3, [pc, #104]	; (800b0ec <UART_SetConfig+0x118>)
 800b082:	fba3 0302 	umull	r0, r3, r3, r2
 800b086:	095b      	lsrs	r3, r3, #5
 800b088:	2064      	movs	r0, #100	; 0x64
 800b08a:	fb00 f303 	mul.w	r3, r0, r3
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	3332      	adds	r3, #50	; 0x32
 800b094:	4a15      	ldr	r2, [pc, #84]	; (800b0ec <UART_SetConfig+0x118>)
 800b096:	fba2 2303 	umull	r2, r3, r2, r3
 800b09a:	095b      	lsrs	r3, r3, #5
 800b09c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0a0:	4419      	add	r1, r3
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	009a      	lsls	r2, r3, #2
 800b0ac:	441a      	add	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0b8:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <UART_SetConfig+0x118>)
 800b0ba:	fba3 0302 	umull	r0, r3, r3, r2
 800b0be:	095b      	lsrs	r3, r3, #5
 800b0c0:	2064      	movs	r0, #100	; 0x64
 800b0c2:	fb00 f303 	mul.w	r3, r0, r3
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	011b      	lsls	r3, r3, #4
 800b0ca:	3332      	adds	r3, #50	; 0x32
 800b0cc:	4a07      	ldr	r2, [pc, #28]	; (800b0ec <UART_SetConfig+0x118>)
 800b0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d2:	095b      	lsrs	r3, r3, #5
 800b0d4:	f003 020f 	and.w	r2, r3, #15
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	440a      	add	r2, r1
 800b0de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	40013800 	.word	0x40013800
 800b0ec:	51eb851f 	.word	0x51eb851f

0800b0f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b0f4:	4904      	ldr	r1, [pc, #16]	; (800b108 <MX_FATFS_Init+0x18>)
 800b0f6:	4805      	ldr	r0, [pc, #20]	; (800b10c <MX_FATFS_Init+0x1c>)
 800b0f8:	f003 fadc 	bl	800e6b4 <FATFS_LinkDriver>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	461a      	mov	r2, r3
 800b100:	4b03      	ldr	r3, [pc, #12]	; (800b110 <MX_FATFS_Init+0x20>)
 800b102:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b104:	bf00      	nop
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20000f24 	.word	0x20000f24
 800b10c:	20000010 	.word	0x20000010
 800b110:	20000f28 	.word	0x20000f28

0800b114 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b114:	b480      	push	{r7}
 800b116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b118:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bc80      	pop	{r7}
 800b120:	4770      	bx	lr
	...

0800b124 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800b12e:	79fb      	ldrb	r3, [r7, #7]
 800b130:	4618      	mov	r0, r3
 800b132:	f7f6 fa55 	bl	80015e0 <SD_disk_initialize>
 800b136:	4603      	mov	r3, r0
 800b138:	461a      	mov	r2, r3
 800b13a:	4b04      	ldr	r3, [pc, #16]	; (800b14c <USER_initialize+0x28>)
 800b13c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b13e:	4b03      	ldr	r3, [pc, #12]	; (800b14c <USER_initialize+0x28>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	2000000d 	.word	0x2000000d

0800b150 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7f6 fb29 	bl	80017b4 <SD_disk_status>
 800b162:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800b17c:	7bf8      	ldrb	r0, [r7, #15]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	68b9      	ldr	r1, [r7, #8]
 800b184:	f7f6 fb2a 	bl	80017dc <SD_disk_read>
 800b188:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]
 800b19e:	4603      	mov	r3, r0
 800b1a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800b1a2:	7bf8      	ldrb	r0, [r7, #15]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	68b9      	ldr	r1, [r7, #8]
 800b1aa:	f7f6 fb81 	bl	80018b0 <SD_disk_write>
 800b1ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	603a      	str	r2, [r7, #0]
 800b1c2:	71fb      	strb	r3, [r7, #7]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800b1c8:	79b9      	ldrb	r1, [r7, #6]
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7f6 fbf2 	bl	80019b8 <SD_disk_ioctl>
 800b1d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	4a08      	ldr	r2, [pc, #32]	; (800b210 <disk_status+0x30>)
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	79fa      	ldrb	r2, [r7, #7]
 800b1f8:	4905      	ldr	r1, [pc, #20]	; (800b210 <disk_status+0x30>)
 800b1fa:	440a      	add	r2, r1
 800b1fc:	7a12      	ldrb	r2, [r2, #8]
 800b1fe:	4610      	mov	r0, r2
 800b200:	4798      	blx	r3
 800b202:	4603      	mov	r3, r0
 800b204:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b206:	7bfb      	ldrb	r3, [r7, #15]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	200002cc 	.word	0x200002cc

0800b214 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	4a0d      	ldr	r2, [pc, #52]	; (800b25c <disk_initialize+0x48>)
 800b226:	5cd3      	ldrb	r3, [r2, r3]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d111      	bne.n	800b250 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800b22c:	79fb      	ldrb	r3, [r7, #7]
 800b22e:	4a0b      	ldr	r2, [pc, #44]	; (800b25c <disk_initialize+0x48>)
 800b230:	2101      	movs	r1, #1
 800b232:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	4a09      	ldr	r2, [pc, #36]	; (800b25c <disk_initialize+0x48>)
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	79fa      	ldrb	r2, [r7, #7]
 800b242:	4906      	ldr	r1, [pc, #24]	; (800b25c <disk_initialize+0x48>)
 800b244:	440a      	add	r2, r1
 800b246:	7a12      	ldrb	r2, [r2, #8]
 800b248:	4610      	mov	r0, r2
 800b24a:	4798      	blx	r3
 800b24c:	4603      	mov	r3, r0
 800b24e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	200002cc 	.word	0x200002cc

0800b260 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b260:	b590      	push	{r4, r7, lr}
 800b262:	b087      	sub	sp, #28
 800b264:	af00      	add	r7, sp, #0
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	4603      	mov	r3, r0
 800b26e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	4a0a      	ldr	r2, [pc, #40]	; (800b29c <disk_read+0x3c>)
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	689c      	ldr	r4, [r3, #8]
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	4a07      	ldr	r2, [pc, #28]	; (800b29c <disk_read+0x3c>)
 800b280:	4413      	add	r3, r2
 800b282:	7a18      	ldrb	r0, [r3, #8]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	47a0      	blx	r4
 800b28c:	4603      	mov	r3, r0
 800b28e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b290:	7dfb      	ldrb	r3, [r7, #23]
}
 800b292:	4618      	mov	r0, r3
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	bd90      	pop	{r4, r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200002cc 	.word	0x200002cc

0800b2a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b2a0:	b590      	push	{r4, r7, lr}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
 800b2aa:	603b      	str	r3, [r7, #0]
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
 800b2b2:	4a0a      	ldr	r2, [pc, #40]	; (800b2dc <disk_write+0x3c>)
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	68dc      	ldr	r4, [r3, #12]
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	4a07      	ldr	r2, [pc, #28]	; (800b2dc <disk_write+0x3c>)
 800b2c0:	4413      	add	r3, r2
 800b2c2:	7a18      	ldrb	r0, [r3, #8]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	68b9      	ldr	r1, [r7, #8]
 800b2ca:	47a0      	blx	r4
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd90      	pop	{r4, r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	200002cc 	.word	0x200002cc

0800b2e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	603a      	str	r2, [r7, #0]
 800b2ea:	71fb      	strb	r3, [r7, #7]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b2f0:	79fb      	ldrb	r3, [r7, #7]
 800b2f2:	4a09      	ldr	r2, [pc, #36]	; (800b318 <disk_ioctl+0x38>)
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	79fa      	ldrb	r2, [r7, #7]
 800b2fe:	4906      	ldr	r1, [pc, #24]	; (800b318 <disk_ioctl+0x38>)
 800b300:	440a      	add	r2, r1
 800b302:	7a10      	ldrb	r0, [r2, #8]
 800b304:	79b9      	ldrb	r1, [r7, #6]
 800b306:	683a      	ldr	r2, [r7, #0]
 800b308:	4798      	blx	r3
 800b30a:	4603      	mov	r3, r0
 800b30c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	200002cc 	.word	0x200002cc

0800b31c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b31c:	b480      	push	{r7}
 800b31e:	b087      	sub	sp, #28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800b330:	e007      	b.n	800b342 <mem_cpy+0x26>
		*d++ = *s++;
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	1c53      	adds	r3, r2, #1
 800b336:	613b      	str	r3, [r7, #16]
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	1c59      	adds	r1, r3, #1
 800b33c:	6179      	str	r1, [r7, #20]
 800b33e:	7812      	ldrb	r2, [r2, #0]
 800b340:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	1e5a      	subs	r2, r3, #1
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1f2      	bne.n	800b332 <mem_cpy+0x16>
}
 800b34c:	bf00      	nop
 800b34e:	bf00      	nop
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	bc80      	pop	{r7}
 800b356:	4770      	bx	lr

0800b358 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800b368:	e005      	b.n	800b376 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	617a      	str	r2, [r7, #20]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	1e5a      	subs	r2, r3, #1
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1f4      	bne.n	800b36a <mem_set+0x12>
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	371c      	adds	r7, #28
 800b386:	46bd      	mov	sp, r7
 800b388:	bc80      	pop	{r7}
 800b38a:	4770      	bx	lr

0800b38c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800b38c:	b480      	push	{r7}
 800b38e:	b089      	sub	sp, #36	; 0x24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	61fb      	str	r3, [r7, #28]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800b3a4:	bf00      	nop
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	1e5a      	subs	r2, r3, #1
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00d      	beq.n	800b3cc <mem_cmp+0x40>
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	61fa      	str	r2, [r7, #28]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	1c5a      	adds	r2, r3, #1
 800b3be:	61ba      	str	r2, [r7, #24]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	1acb      	subs	r3, r1, r3
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d0ec      	beq.n	800b3a6 <mem_cmp+0x1a>
	return r;
 800b3cc:	697b      	ldr	r3, [r7, #20]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3724      	adds	r7, #36	; 0x24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bc80      	pop	{r7}
 800b3d6:	4770      	bx	lr

0800b3d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b3e2:	e002      	b.n	800b3ea <chk_chr+0x12>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d005      	beq.n	800b3fe <chk_chr+0x26>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d1f2      	bne.n	800b3e4 <chk_chr+0xc>
	return *str;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	781b      	ldrb	r3, [r3, #0]
}
 800b402:	4618      	mov	r0, r3
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	bc80      	pop	{r7}
 800b40a:	4770      	bx	lr

0800b40c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b416:	2300      	movs	r3, #0
 800b418:	60bb      	str	r3, [r7, #8]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	60fb      	str	r3, [r7, #12]
 800b41e:	e035      	b.n	800b48c <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 800b420:	492e      	ldr	r1, [pc, #184]	; (800b4dc <chk_lock+0xd0>)
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	4613      	mov	r3, r2
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	4413      	add	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	440b      	add	r3, r1
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d026      	beq.n	800b482 <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b434:	4929      	ldr	r1, [pc, #164]	; (800b4dc <chk_lock+0xd0>)
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4613      	mov	r3, r2
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d11c      	bne.n	800b486 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 800b44c:	4923      	ldr	r1, [pc, #140]	; (800b4dc <chk_lock+0xd0>)
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	4613      	mov	r3, r2
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	4413      	add	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	440b      	add	r3, r1
 800b45a:	3304      	adds	r3, #4
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b462:	429a      	cmp	r2, r3
 800b464:	d10f      	bne.n	800b486 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800b466:	491d      	ldr	r1, [pc, #116]	; (800b4dc <chk_lock+0xd0>)
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	4613      	mov	r3, r2
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	4413      	add	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	440b      	add	r3, r1
 800b474:	3308      	adds	r3, #8
 800b476:	881a      	ldrh	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d102      	bne.n	800b486 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800b480:	e007      	b.n	800b492 <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 800b482:	2301      	movs	r3, #1
 800b484:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3301      	adds	r3, #1
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d9c6      	bls.n	800b420 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d109      	bne.n	800b4ac <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d102      	bne.n	800b4a4 <chk_lock+0x98>
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d101      	bne.n	800b4a8 <chk_lock+0x9c>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e013      	b.n	800b4d0 <chk_lock+0xc4>
 800b4a8:	2312      	movs	r3, #18
 800b4aa:	e011      	b.n	800b4d0 <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10b      	bne.n	800b4ca <chk_lock+0xbe>
 800b4b2:	490a      	ldr	r1, [pc, #40]	; (800b4dc <chk_lock+0xd0>)
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	4413      	add	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	440b      	add	r3, r1
 800b4c0:	330a      	adds	r3, #10
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c8:	d101      	bne.n	800b4ce <chk_lock+0xc2>
 800b4ca:	2310      	movs	r3, #16
 800b4cc:	e000      	b.n	800b4d0 <chk_lock+0xc4>
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bc80      	pop	{r7}
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	200000b4 	.word	0x200000b4

0800b4e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	607b      	str	r3, [r7, #4]
 800b4ea:	e002      	b.n	800b4f2 <enq_lock+0x12>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	607b      	str	r3, [r7, #4]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d809      	bhi.n	800b50c <enq_lock+0x2c>
 800b4f8:	490a      	ldr	r1, [pc, #40]	; (800b524 <enq_lock+0x44>)
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	005b      	lsls	r3, r3, #1
 800b500:	4413      	add	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	440b      	add	r3, r1
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1ef      	bne.n	800b4ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	bf14      	ite	ne
 800b512:	2301      	movne	r3, #1
 800b514:	2300      	moveq	r3, #0
 800b516:	b2db      	uxtb	r3, r3
}
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	200000b4 	.word	0x200000b4

0800b528 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]
 800b536:	e028      	b.n	800b58a <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 800b538:	4952      	ldr	r1, [pc, #328]	; (800b684 <inc_lock+0x15c>)
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4613      	mov	r3, r2
 800b53e:	005b      	lsls	r3, r3, #1
 800b540:	4413      	add	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	440b      	add	r3, r1
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d119      	bne.n	800b584 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 800b550:	494c      	ldr	r1, [pc, #304]	; (800b684 <inc_lock+0x15c>)
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	4613      	mov	r3, r2
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	4413      	add	r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	440b      	add	r3, r1
 800b55e:	3304      	adds	r3, #4
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800b566:	429a      	cmp	r2, r3
 800b568:	d10c      	bne.n	800b584 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 800b56a:	4946      	ldr	r1, [pc, #280]	; (800b684 <inc_lock+0x15c>)
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4613      	mov	r3, r2
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	440b      	add	r3, r1
 800b578:	3308      	adds	r3, #8
 800b57a:	881a      	ldrh	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800b580:	429a      	cmp	r2, r3
 800b582:	d006      	beq.n	800b592 <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	3301      	adds	r3, #1
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d9d3      	bls.n	800b538 <inc_lock+0x10>
 800b590:	e000      	b.n	800b594 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800b592:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d142      	bne.n	800b620 <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	e002      	b.n	800b5a6 <inc_lock+0x7e>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	60fb      	str	r3, [r7, #12]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d809      	bhi.n	800b5c0 <inc_lock+0x98>
 800b5ac:	4935      	ldr	r1, [pc, #212]	; (800b684 <inc_lock+0x15c>)
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	4413      	add	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	440b      	add	r3, r1
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1ef      	bne.n	800b5a0 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d101      	bne.n	800b5ca <inc_lock+0xa2>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	e057      	b.n	800b67a <inc_lock+0x152>
		Files[i].fs = dp->fs;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6819      	ldr	r1, [r3, #0]
 800b5ce:	482d      	ldr	r0, [pc, #180]	; (800b684 <inc_lock+0x15c>)
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4403      	add	r3, r0
 800b5dc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6899      	ldr	r1, [r3, #8]
 800b5e2:	4828      	ldr	r0, [pc, #160]	; (800b684 <inc_lock+0x15c>)
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4403      	add	r3, r0
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	88d8      	ldrh	r0, [r3, #6]
 800b5f8:	4922      	ldr	r1, [pc, #136]	; (800b684 <inc_lock+0x15c>)
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	005b      	lsls	r3, r3, #1
 800b600:	4413      	add	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	440b      	add	r3, r1
 800b606:	3308      	adds	r3, #8
 800b608:	4602      	mov	r2, r0
 800b60a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800b60c:	491d      	ldr	r1, [pc, #116]	; (800b684 <inc_lock+0x15c>)
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	4613      	mov	r3, r2
 800b612:	005b      	lsls	r3, r3, #1
 800b614:	4413      	add	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	330a      	adds	r3, #10
 800b61c:	2200      	movs	r2, #0
 800b61e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00c      	beq.n	800b640 <inc_lock+0x118>
 800b626:	4917      	ldr	r1, [pc, #92]	; (800b684 <inc_lock+0x15c>)
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4613      	mov	r3, r2
 800b62c:	005b      	lsls	r3, r3, #1
 800b62e:	4413      	add	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	440b      	add	r3, r1
 800b634:	330a      	adds	r3, #10
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <inc_lock+0x118>
 800b63c:	2300      	movs	r3, #0
 800b63e:	e01c      	b.n	800b67a <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10b      	bne.n	800b65e <inc_lock+0x136>
 800b646:	490f      	ldr	r1, [pc, #60]	; (800b684 <inc_lock+0x15c>)
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4613      	mov	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4413      	add	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	440b      	add	r3, r1
 800b654:	330a      	adds	r3, #10
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	3301      	adds	r3, #1
 800b65a:	b299      	uxth	r1, r3
 800b65c:	e001      	b.n	800b662 <inc_lock+0x13a>
 800b65e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b662:	4808      	ldr	r0, [pc, #32]	; (800b684 <inc_lock+0x15c>)
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4613      	mov	r3, r2
 800b668:	005b      	lsls	r3, r3, #1
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4403      	add	r3, r0
 800b670:	330a      	adds	r3, #10
 800b672:	460a      	mov	r2, r1
 800b674:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3301      	adds	r3, #1
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	bc80      	pop	{r7}
 800b682:	4770      	bx	lr
 800b684:	200000b4 	.word	0x200000b4

0800b688 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3b01      	subs	r3, #1
 800b694:	607b      	str	r3, [r7, #4]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d82e      	bhi.n	800b6fa <dec_lock+0x72>
		n = Files[i].ctr;
 800b69c:	491b      	ldr	r1, [pc, #108]	; (800b70c <dec_lock+0x84>)
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	4413      	add	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	440b      	add	r3, r1
 800b6aa:	330a      	adds	r3, #10
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b6b0:	89fb      	ldrh	r3, [r7, #14]
 800b6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6b6:	d101      	bne.n	800b6bc <dec_lock+0x34>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800b6bc:	89fb      	ldrh	r3, [r7, #14]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <dec_lock+0x40>
 800b6c2:	89fb      	ldrh	r3, [r7, #14]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b6c8:	4910      	ldr	r1, [pc, #64]	; (800b70c <dec_lock+0x84>)
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	005b      	lsls	r3, r3, #1
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	440b      	add	r3, r1
 800b6d6:	330a      	adds	r3, #10
 800b6d8:	89fa      	ldrh	r2, [r7, #14]
 800b6da:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b6dc:	89fb      	ldrh	r3, [r7, #14]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d108      	bne.n	800b6f4 <dec_lock+0x6c>
 800b6e2:	490a      	ldr	r1, [pc, #40]	; (800b70c <dec_lock+0x84>)
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	4413      	add	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	440b      	add	r3, r1
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	737b      	strb	r3, [r7, #13]
 800b6f8:	e001      	b.n	800b6fe <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b6fe:	7b7b      	ldrb	r3, [r7, #13]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	bc80      	pop	{r7}
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	200000b4 	.word	0x200000b4

0800b710 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b718:	2300      	movs	r3, #0
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	e016      	b.n	800b74c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b71e:	4910      	ldr	r1, [pc, #64]	; (800b760 <clear_lock+0x50>)
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	4613      	mov	r3, r2
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	4413      	add	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	440b      	add	r3, r1
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	429a      	cmp	r2, r3
 800b732:	d108      	bne.n	800b746 <clear_lock+0x36>
 800b734:	490a      	ldr	r1, [pc, #40]	; (800b760 <clear_lock+0x50>)
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	4613      	mov	r3, r2
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	4413      	add	r3, r2
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	440b      	add	r3, r1
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3301      	adds	r3, #1
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d9e5      	bls.n	800b71e <clear_lock+0xe>
	}
}
 800b752:	bf00      	nop
 800b754:	bf00      	nop
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	bc80      	pop	{r7}
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	200000b4 	.word	0x200000b4

0800b764 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800b776:	2b00      	cmp	r3, #0
 800b778:	d038      	beq.n	800b7ec <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800b780:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b788:	6879      	ldr	r1, [r7, #4]
 800b78a:	2301      	movs	r3, #1
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	f7ff fd87 	bl	800b2a0 <disk_write>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <sync_window+0x3a>
			res = FR_DISK_ERR;
 800b798:	2301      	movs	r3, #1
 800b79a:	73fb      	strb	r3, [r7, #15]
 800b79c:	e026      	b.n	800b7ec <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d218      	bcs.n	800b7ec <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800b7c0:	613b      	str	r3, [r7, #16]
 800b7c2:	e010      	b.n	800b7e6 <sync_window+0x82>
					wsect += fs->fsize;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	2301      	movs	r3, #1
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	f7ff fd60 	bl	800b2a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	613b      	str	r3, [r7, #16]
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d8eb      	bhi.n	800b7c4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b084      	sub	sp, #16
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d01b      	beq.n	800b848 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff ffa7 	bl	800b764 <sync_window>
 800b816:	4603      	mov	r3, r0
 800b818:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b81a:	7bfb      	ldrb	r3, [r7, #15]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d113      	bne.n	800b848 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	2301      	movs	r3, #1
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	f7ff fd18 	bl	800b260 <disk_read>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d004      	beq.n	800b840 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b836:	f04f 33ff 	mov.w	r3, #4294967295
 800b83a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff ff82 	bl	800b764 <sync_window>
 800b860:	4603      	mov	r3, r0
 800b862:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	2b00      	cmp	r3, #0
 800b868:	f040 809c 	bne.w	800b9a4 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b872:	2b03      	cmp	r3, #3
 800b874:	f040 8089 	bne.w	800b98a <sync_fs+0x138>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800b87e:	2b01      	cmp	r3, #1
 800b880:	f040 8083 	bne.w	800b98a <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b88c:	461a      	mov	r2, r3
 800b88e:	2100      	movs	r1, #0
 800b890:	f7ff fd62 	bl	800b358 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2255      	movs	r2, #85	; 0x55
 800b898:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	22aa      	movs	r2, #170	; 0xaa
 800b8a0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2252      	movs	r2, #82	; 0x52
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2252      	movs	r2, #82	; 0x52
 800b8ae:	705a      	strb	r2, [r3, #1]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2261      	movs	r2, #97	; 0x61
 800b8b4:	709a      	strb	r2, [r3, #2]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2241      	movs	r2, #65	; 0x41
 800b8ba:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2272      	movs	r2, #114	; 0x72
 800b8c0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2272      	movs	r2, #114	; 0x72
 800b8c8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2241      	movs	r2, #65	; 0x41
 800b8d0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2261      	movs	r2, #97	; 0x61
 800b8d8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	0a1b      	lsrs	r3, r3, #8
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	b2da      	uxtb	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b904:	0c1b      	lsrs	r3, r3, #16
 800b906:	b2da      	uxtb	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b914:	0e1b      	lsrs	r3, r3, #24
 800b916:	b2da      	uxtb	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b924:	b2da      	uxtb	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b932:	b29b      	uxth	r3, r3
 800b934:	0a1b      	lsrs	r3, r3, #8
 800b936:	b29b      	uxth	r3, r3
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b946:	0c1b      	lsrs	r3, r3, #16
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b956:	0e1b      	lsrs	r3, r3, #24
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b966:	1c5a      	adds	r2, r3, #1
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b974:	6879      	ldr	r1, [r7, #4]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800b97c:	2301      	movs	r3, #1
 800b97e:	f7ff fc8f 	bl	800b2a0 <disk_write>
			fs->fsi_flag = 0;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800b990:	2200      	movs	r2, #0
 800b992:	2100      	movs	r1, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff fca3 	bl	800b2e0 <disk_ioctl>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <sync_fs+0x152>
			res = FR_DISK_ERR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	3b02      	subs	r3, #2
 800b9bc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b9c4:	3b02      	subs	r3, #2
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d301      	bcc.n	800b9d0 <clust2sect+0x22>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e00a      	b.n	800b9e6 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	fb03 f202 	mul.w	r2, r3, r2
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800b9e4:	4413      	add	r3, r2
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bc80      	pop	{r7}
 800b9ee:	4770      	bx	lr

0800b9f0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d905      	bls.n	800ba0c <get_fat+0x1c>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d302      	bcc.n	800ba12 <get_fat+0x22>
		val = 1;	/* Internal error */
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	617b      	str	r3, [r7, #20]
 800ba10:	e0d7      	b.n	800bbc2 <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ba12:	f04f 33ff 	mov.w	r3, #4294967295
 800ba16:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	f000 808f 	beq.w	800bb42 <get_fat+0x152>
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	f300 80c2 	bgt.w	800bbae <get_fat+0x1be>
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d002      	beq.n	800ba34 <get_fat+0x44>
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d059      	beq.n	800bae6 <get_fat+0xf6>
 800ba32:	e0bc      	b.n	800bbae <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	60fb      	str	r3, [r7, #12]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	085b      	lsrs	r3, r3, #1
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	4413      	add	r3, r2
 800ba40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba56:	4413      	add	r3, r2
 800ba58:	4619      	mov	r1, r3
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fecb 	bl	800b7f6 <move_window>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f040 80a6 	bne.w	800bbb4 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	60fa      	str	r2, [r7, #12]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ba74:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba78:	fb02 f201 	mul.w	r2, r2, r1
 800ba7c:	1a9b      	subs	r3, r3, r2
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	5cd3      	ldrb	r3, [r2, r3]
 800ba82:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ba90:	4619      	mov	r1, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba98:	4413      	add	r3, r2
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7ff feaa 	bl	800b7f6 <move_window>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f040 8087 	bne.w	800bbb8 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bab0:	461a      	mov	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bab8:	fb02 f201 	mul.w	r2, r2, r1
 800babc:	1a9b      	subs	r3, r3, r2
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	5cd3      	ldrb	r3, [r2, r3]
 800bac2:	021b      	lsls	r3, r3, #8
 800bac4:	461a      	mov	r2, r3
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	4313      	orrs	r3, r2
 800baca:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <get_fat+0xec>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	091b      	lsrs	r3, r3, #4
 800bada:	e002      	b.n	800bae2 <get_fat+0xf2>
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bae2:	617b      	str	r3, [r7, #20]
			break;
 800bae4:	e06d      	b.n	800bbc2 <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800baf2:	085b      	lsrs	r3, r3, #1
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	4619      	mov	r1, r3
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	fbb3 f3f1 	udiv	r3, r3, r1
 800bafe:	4413      	add	r3, r2
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7ff fe77 	bl	800b7f6 <move_window>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d156      	bne.n	800bbbc <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800bb18:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb1c:	fb02 f201 	mul.w	r2, r2, r1
 800bb20:	1a9b      	subs	r3, r3, r2
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	4413      	add	r3, r2
 800bb26:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	021b      	lsls	r3, r3, #8
 800bb30:	b21a      	sxth	r2, r3
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	b21b      	sxth	r3, r3
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	b21b      	sxth	r3, r3
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	617b      	str	r3, [r7, #20]
			break;
 800bb40:	e03f      	b.n	800bbc2 <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bb4e:	089b      	lsrs	r3, r3, #2
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	4619      	mov	r1, r3
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb5a:	4413      	add	r3, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7ff fe49 	bl	800b7f6 <move_window>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d12a      	bne.n	800bbc0 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800bb74:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb78:	fb02 f201 	mul.w	r2, r2, r1
 800bb7c:	1a9b      	subs	r3, r3, r2
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	4413      	add	r3, r2
 800bb82:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	3303      	adds	r3, #3
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	061a      	lsls	r2, r3, #24
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	3302      	adds	r3, #2
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	041b      	lsls	r3, r3, #16
 800bb94:	4313      	orrs	r3, r2
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	3201      	adds	r2, #1
 800bb9a:	7812      	ldrb	r2, [r2, #0]
 800bb9c:	0212      	lsls	r2, r2, #8
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	7812      	ldrb	r2, [r2, #0]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bbaa:	617b      	str	r3, [r7, #20]
			break;
 800bbac:	e009      	b.n	800bbc2 <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 800bbae:	2301      	movs	r3, #1
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e006      	b.n	800bbc2 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbb4:	bf00      	nop
 800bbb6:	e004      	b.n	800bbc2 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbb8:	bf00      	nop
 800bbba:	e002      	b.n	800bbc2 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbbc:	bf00      	nop
 800bbbe:	e000      	b.n	800bbc2 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbc0:	bf00      	nop
		}
	}

	return val;
 800bbc2:	697b      	ldr	r3, [r7, #20]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d905      	bls.n	800bbea <put_fat+0x1e>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d302      	bcc.n	800bbf0 <put_fat+0x24>
		res = FR_INT_ERR;
 800bbea:	2302      	movs	r3, #2
 800bbec:	77fb      	strb	r3, [r7, #31]
 800bbee:	e128      	b.n	800be42 <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	f000 80c3 	beq.w	800bd82 <put_fat+0x1b6>
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	f300 8116 	bgt.w	800be2e <put_fat+0x262>
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d003      	beq.n	800bc0e <put_fat+0x42>
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	f000 8087 	beq.w	800bd1a <put_fat+0x14e>
 800bc0c:	e10f      	b.n	800be2e <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	617b      	str	r3, [r7, #20]
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	085b      	lsrs	r3, r3, #1
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	4413      	add	r3, r2
 800bc1a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bc28:	4619      	mov	r1, r3
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc30:	4413      	add	r3, r2
 800bc32:	4619      	mov	r1, r3
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff fdde 	bl	800b7f6 <move_window>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc3e:	7ffb      	ldrb	r3, [r7, #31]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f040 80f7 	bne.w	800be34 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	617a      	str	r2, [r7, #20]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800bc52:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc56:	fb02 f201 	mul.w	r2, r2, r1
 800bc5a:	1a9b      	subs	r3, r3, r2
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4413      	add	r3, r2
 800bc60:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00d      	beq.n	800bc88 <put_fat+0xbc>
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	b25b      	sxtb	r3, r3
 800bc72:	f003 030f 	and.w	r3, r3, #15
 800bc76:	b25a      	sxtb	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	011b      	lsls	r3, r3, #4
 800bc7e:	b25b      	sxtb	r3, r3
 800bc80:	4313      	orrs	r3, r2
 800bc82:	b25b      	sxtb	r3, r3
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	e001      	b.n	800bc8c <put_fat+0xc0>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	69ba      	ldr	r2, [r7, #24]
 800bc8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bca4:	4619      	mov	r1, r3
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcac:	4413      	add	r3, r2
 800bcae:	4619      	mov	r1, r3
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f7ff fda0 	bl	800b7f6 <move_window>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcba:	7ffb      	ldrb	r3, [r7, #31]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f040 80bb 	bne.w	800be38 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bcc8:	461a      	mov	r2, r3
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcd0:	fb02 f201 	mul.w	r2, r2, r1
 800bcd4:	1a9b      	subs	r3, r3, r2
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	4413      	add	r3, r2
 800bcda:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	f003 0301 	and.w	r3, r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <put_fat+0x122>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	091b      	lsrs	r3, r3, #4
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	e00e      	b.n	800bd0c <put_fat+0x140>
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	b25b      	sxtb	r3, r3
 800bcf4:	f023 030f 	bic.w	r3, r3, #15
 800bcf8:	b25a      	sxtb	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	0a1b      	lsrs	r3, r3, #8
 800bcfe:	b25b      	sxtb	r3, r3
 800bd00:	f003 030f 	and.w	r3, r3, #15
 800bd04:	b25b      	sxtb	r3, r3
 800bd06:	4313      	orrs	r3, r2
 800bd08:	b25b      	sxtb	r3, r3
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	69ba      	ldr	r2, [r7, #24]
 800bd0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800bd18:	e093      	b.n	800be42 <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bd26:	085b      	lsrs	r3, r3, #1
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd32:	4413      	add	r3, r2
 800bd34:	4619      	mov	r1, r3
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f7ff fd5d 	bl	800b7f6 <move_window>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd40:	7ffb      	ldrb	r3, [r7, #31]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d17a      	bne.n	800be3c <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	005b      	lsls	r3, r3, #1
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800bd50:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd54:	fb02 f201 	mul.w	r2, r2, r1
 800bd58:	1a9b      	subs	r3, r3, r2
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	0a1b      	lsrs	r3, r3, #8
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	3301      	adds	r3, #1
 800bd74:	b2d2      	uxtb	r2, r2
 800bd76:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800bd80:	e05f      	b.n	800be42 <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bd8e:	089b      	lsrs	r3, r3, #2
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	4619      	mov	r1, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd9a:	4413      	add	r3, r2
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f7ff fd29 	bl	800b7f6 <move_window>
 800bda4:	4603      	mov	r3, r0
 800bda6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bda8:	7ffb      	ldrb	r3, [r7, #31]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d148      	bne.n	800be40 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800bdb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdbc:	fb02 f201 	mul.w	r2, r2, r1
 800bdc0:	1a9b      	subs	r3, r3, r2
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	3303      	adds	r3, #3
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	061a      	lsls	r2, r3, #24
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	3302      	adds	r3, #2
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	041b      	lsls	r3, r3, #16
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	3201      	adds	r2, #1
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	0212      	lsls	r2, r2, #8
 800bde2:	4313      	orrs	r3, r2
 800bde4:	69ba      	ldr	r2, [r7, #24]
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	701a      	strb	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	0a1b      	lsrs	r3, r3, #8
 800be02:	b29a      	uxth	r2, r3
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	3301      	adds	r3, #1
 800be08:	b2d2      	uxtb	r2, r2
 800be0a:	701a      	strb	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	0c1a      	lsrs	r2, r3, #16
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	3302      	adds	r3, #2
 800be14:	b2d2      	uxtb	r2, r2
 800be16:	701a      	strb	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	0e1a      	lsrs	r2, r3, #24
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	3303      	adds	r3, #3
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2201      	movs	r2, #1
 800be28:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800be2c:	e009      	b.n	800be42 <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800be2e:	2302      	movs	r3, #2
 800be30:	77fb      	strb	r3, [r7, #31]
 800be32:	e006      	b.n	800be42 <put_fat+0x276>
			if (res != FR_OK) break;
 800be34:	bf00      	nop
 800be36:	e004      	b.n	800be42 <put_fat+0x276>
			if (res != FR_OK) break;
 800be38:	bf00      	nop
 800be3a:	e002      	b.n	800be42 <put_fat+0x276>
			if (res != FR_OK) break;
 800be3c:	bf00      	nop
 800be3e:	e000      	b.n	800be42 <put_fat+0x276>
			if (res != FR_OK) break;
 800be40:	bf00      	nop
		}
	}

	return res;
 800be42:	7ffb      	ldrb	r3, [r7, #31]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3720      	adds	r7, #32
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d905      	bls.n	800be68 <remove_chain+0x1c>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	429a      	cmp	r2, r3
 800be66:	d302      	bcc.n	800be6e <remove_chain+0x22>
		res = FR_INT_ERR;
 800be68:	2302      	movs	r3, #2
 800be6a:	73fb      	strb	r3, [r7, #15]
 800be6c:	e043      	b.n	800bef6 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800be72:	e036      	b.n	800bee2 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7ff fdba 	bl	800b9f0 <get_fat>
 800be7c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d035      	beq.n	800bef0 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d102      	bne.n	800be90 <remove_chain+0x44>
 800be8a:	2302      	movs	r3, #2
 800be8c:	73fb      	strb	r3, [r7, #15]
 800be8e:	e032      	b.n	800bef6 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be96:	d102      	bne.n	800be9e <remove_chain+0x52>
 800be98:	2301      	movs	r3, #1
 800be9a:	73fb      	strb	r3, [r7, #15]
 800be9c:	e02b      	b.n	800bef6 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800be9e:	2200      	movs	r2, #0
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7ff fe92 	bl	800bbcc <put_fat>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d120      	bne.n	800bef4 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800beb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebc:	d00f      	beq.n	800bede <remove_chain+0x92>
				fs->free_clust++;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800bed2:	f043 0301 	orr.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	429a      	cmp	r2, r3
 800beec:	d3c2      	bcc.n	800be74 <remove_chain+0x28>
 800beee:	e002      	b.n	800bef6 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800bef0:	bf00      	nop
 800bef2:	e000      	b.n	800bef6 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800bef4:	bf00      	nop
		}
	}

	return res;
 800bef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10f      	bne.n	800bf30 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800bf16:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d005      	beq.n	800bf2a <create_chain+0x2a>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d31c      	bcc.n	800bf64 <create_chain+0x64>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	613b      	str	r3, [r7, #16]
 800bf2e:	e019      	b.n	800bf64 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff fd5c 	bl	800b9f0 <get_fat>
 800bf38:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d801      	bhi.n	800bf44 <create_chain+0x44>
 800bf40:	2301      	movs	r3, #1
 800bf42:	e076      	b.n	800c032 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4a:	d101      	bne.n	800bf50 <create_chain+0x50>
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	e070      	b.n	800c032 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d201      	bcs.n	800bf60 <create_chain+0x60>
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	e068      	b.n	800c032 <create_chain+0x132>
		scl = clst;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d307      	bcc.n	800bf8a <create_chain+0x8a>
			ncl = 2;
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d901      	bls.n	800bf8a <create_chain+0x8a>
 800bf86:	2300      	movs	r3, #0
 800bf88:	e053      	b.n	800c032 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800bf8a:	6979      	ldr	r1, [r7, #20]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff fd2f 	bl	800b9f0 <get_fat>
 800bf92:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00e      	beq.n	800bfb8 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa0:	d002      	beq.n	800bfa8 <create_chain+0xa8>
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d101      	bne.n	800bfac <create_chain+0xac>
			return cs;
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	e042      	b.n	800c032 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800bfac:	697a      	ldr	r2, [r7, #20]
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d1d9      	bne.n	800bf68 <create_chain+0x68>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	e03c      	b.n	800c032 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800bfb8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800bfba:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800bfbe:	6979      	ldr	r1, [r7, #20]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff fe03 	bl	800bbcc <put_fat>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d109      	bne.n	800bfe4 <create_chain+0xe4>
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d006      	beq.n	800bfe4 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff fdf6 	bl	800bbcc <put_fat>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d11a      	bne.n	800c020 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800bff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffc:	d018      	beq.n	800c030 <create_chain+0x130>
			fs->free_clust--;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800c004:	1e5a      	subs	r2, r3, #1
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800c012:	f043 0301 	orr.w	r3, r3, #1
 800c016:	b2da      	uxtb	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800c01e:	e007      	b.n	800c030 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d102      	bne.n	800c02c <create_chain+0x12c>
 800c026:	f04f 33ff 	mov.w	r3, #4294967295
 800c02a:	e000      	b.n	800c02e <create_chain+0x12e>
 800c02c:	2301      	movs	r3, #1
 800c02e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800c030:	697b      	ldr	r3, [r7, #20]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b087      	sub	sp, #28
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c048:	3304      	adds	r3, #4
 800c04a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c054:	461a      	mov	r2, r3
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	fbb3 f3f2 	udiv	r3, r3, r2
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	6812      	ldr	r2, [r2, #0]
 800c060:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c064:	fbb3 f3f2 	udiv	r3, r3, r2
 800c068:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	1d1a      	adds	r2, r3, #4
 800c06e:	613a      	str	r2, [r7, #16]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <clmt_clust+0x44>
 800c07a:	2300      	movs	r3, #0
 800c07c:	e010      	b.n	800c0a0 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800c07e:	697a      	ldr	r2, [r7, #20]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	429a      	cmp	r2, r3
 800c084:	d307      	bcc.n	800c096 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	617b      	str	r3, [r7, #20]
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	3304      	adds	r3, #4
 800c092:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c094:	e7e9      	b.n	800c06a <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 800c096:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	4413      	add	r3, r2
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	371c      	adds	r7, #28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bc80      	pop	{r7}
 800c0a8:	4770      	bx	lr

0800c0aa <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b086      	sub	sp, #24
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d006      	beq.n	800c0d6 <dir_sdi+0x2c>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d301      	bcc.n	800c0da <dir_sdi+0x30>
		return FR_INT_ERR;
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	e082      	b.n	800c1e0 <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <dir_sdi+0x4c>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d104      	bne.n	800c0f6 <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800c0f4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10f      	bne.n	800c11c <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800c104:	461a      	mov	r2, r3
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	4293      	cmp	r3, r2
 800c10a:	d301      	bcc.n	800c110 <dir_sdi+0x66>
			return FR_INT_ERR;
 800c10c:	2302      	movs	r3, #2
 800c10e:	e067      	b.n	800c1e0 <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	e036      	b.n	800c18a <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c124:	095b      	lsrs	r3, r3, #5
 800c126:	b29b      	uxth	r3, r3
 800c128:	461a      	mov	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c132:	fb03 f302 	mul.w	r3, r3, r2
 800c136:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800c138:	e01c      	b.n	800c174 <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	6979      	ldr	r1, [r7, #20]
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff fc55 	bl	800b9f0 <get_fat>
 800c146:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14e:	d101      	bne.n	800c154 <dir_sdi+0xaa>
 800c150:	2301      	movs	r3, #1
 800c152:	e045      	b.n	800c1e0 <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d906      	bls.n	800c168 <dir_sdi+0xbe>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	429a      	cmp	r2, r3
 800c166:	d301      	bcc.n	800c16c <dir_sdi+0xc2>
				return FR_INT_ERR;
 800c168:	2302      	movs	r3, #2
 800c16a:	e039      	b.n	800c1e0 <dir_sdi+0x136>
			idx -= ic;
 800c16c:	683a      	ldr	r2, [r7, #0]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d2de      	bcs.n	800c13a <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6979      	ldr	r1, [r7, #20]
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff fc13 	bl	800b9ae <clust2sect>
 800c188:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <dir_sdi+0xf0>
 800c196:	2302      	movs	r3, #2
 800c198:	e022      	b.n	800c1e0 <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c1a2:	095b      	lsrs	r3, r3, #5
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	441a      	add	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c1c4:	095b      	lsrs	r3, r3, #5
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1d0:	fb02 f201 	mul.w	r2, r2, r1
 800c1d4:	1a9b      	subs	r3, r3, r2
 800c1d6:	015b      	lsls	r3, r3, #5
 800c1d8:	18c2      	adds	r2, r0, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c1e8:	b590      	push	{r4, r7, lr}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	88db      	ldrh	r3, [r3, #6]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <dir_next+0x22>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <dir_next+0x26>
		return FR_NO_FILE;
 800c20a:	2304      	movs	r3, #4
 800c20c:	e0e2      	b.n	800c3d4 <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c216:	095b      	lsrs	r3, r3, #5
 800c218:	b29b      	uxth	r3, r3
 800c21a:	461a      	mov	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c222:	fb02 f201 	mul.w	r2, r2, r1
 800c226:	1a9b      	subs	r3, r3, r2
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f040 80ba 	bne.w	800c3a2 <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800c248:	461a      	mov	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4293      	cmp	r3, r2
 800c24e:	f0c0 80a8 	bcc.w	800c3a2 <dir_next+0x1ba>
				return FR_NO_FILE;
 800c252:	2304      	movs	r3, #4
 800c254:	e0be      	b.n	800c3d4 <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c25e:	095b      	lsrs	r3, r3, #5
 800c260:	b29b      	uxth	r3, r3
 800c262:	461a      	mov	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	fbb3 f3f2 	udiv	r3, r3, r2
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	6812      	ldr	r2, [r2, #0]
 800c26e:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c272:	3a01      	subs	r2, #1
 800c274:	4013      	ands	r3, r2
 800c276:	2b00      	cmp	r3, #0
 800c278:	f040 8093 	bne.w	800c3a2 <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	4619      	mov	r1, r3
 800c286:	4610      	mov	r0, r2
 800c288:	f7ff fbb2 	bl	800b9f0 <get_fat>
 800c28c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d801      	bhi.n	800c298 <dir_next+0xb0>
 800c294:	2302      	movs	r3, #2
 800c296:	e09d      	b.n	800c3d4 <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29e:	d101      	bne.n	800c2a4 <dir_next+0xbc>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e097      	b.n	800c3d4 <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800c2ac:	697a      	ldr	r2, [r7, #20]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d36b      	bcc.n	800c38a <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d101      	bne.n	800c2bc <dir_next+0xd4>
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	e08b      	b.n	800c3d4 <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	4610      	mov	r0, r2
 800c2c8:	f7ff fe1a 	bl	800bf00 <create_chain>
 800c2cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <dir_next+0xf0>
 800c2d4:	2307      	movs	r3, #7
 800c2d6:	e07d      	b.n	800c3d4 <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d101      	bne.n	800c2e2 <dir_next+0xfa>
 800c2de:	2302      	movs	r3, #2
 800c2e0:	e078      	b.n	800c3d4 <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e8:	d101      	bne.n	800c2ee <dir_next+0x106>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e072      	b.n	800c3d4 <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7ff fa36 	bl	800b764 <sync_window>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <dir_next+0x11a>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e068      	b.n	800c3d4 <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4618      	mov	r0, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c310:	461a      	mov	r2, r3
 800c312:	2100      	movs	r1, #0
 800c314:	f7ff f820 	bl	800b358 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681c      	ldr	r4, [r3, #0]
 800c320:	6979      	ldr	r1, [r7, #20]
 800c322:	4610      	mov	r0, r2
 800c324:	f7ff fb43 	bl	800b9ae <clust2sect>
 800c328:	4603      	mov	r3, r0
 800c32a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c32e:	2300      	movs	r3, #0
 800c330:	613b      	str	r3, [r7, #16]
 800c332:	e018      	b.n	800c366 <dir_next+0x17e>
						dp->fs->wflag = 1;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4618      	mov	r0, r3
 800c344:	f7ff fa0e 	bl	800b764 <sync_window>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <dir_next+0x16a>
 800c34e:	2301      	movs	r3, #1
 800c350:	e040      	b.n	800c3d4 <dir_next+0x1ec>
						dp->fs->winsect++;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c35a:	3201      	adds	r2, #1
 800c35c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	3301      	adds	r3, #1
 800c364:	613b      	str	r3, [r7, #16]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c36e:	461a      	mov	r2, r3
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	4293      	cmp	r3, r2
 800c374:	d3de      	bcc.n	800c334 <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	1a8a      	subs	r2, r1, r2
 800c386:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6979      	ldr	r1, [r7, #20]
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff fb09 	bl	800b9ae <clust2sect>
 800c39c:	4602      	mov	r2, r0
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c3b8:	095b      	lsrs	r3, r3, #5
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	461a      	mov	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3c4:	fb02 f201 	mul.w	r2, r2, r1
 800c3c8:	1a9b      	subs	r3, r3, r2
 800c3ca:	015b      	lsls	r3, r3, #5
 800c3cc:	18c2      	adds	r2, r0, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	371c      	adds	r7, #28
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd90      	pop	{r4, r7, pc}

0800c3dc <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff fe5e 	bl	800c0aa <dir_sdi>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d12d      	bne.n	800c454 <dir_alloc+0x78>
		n = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f7ff f9f5 	bl	800b7f6 <move_window>
 800c40c:	4603      	mov	r3, r0
 800c40e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d11d      	bne.n	800c452 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	2be5      	cmp	r3, #229	; 0xe5
 800c41e:	d004      	beq.n	800c42a <dir_alloc+0x4e>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d107      	bne.n	800c43a <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	3301      	adds	r3, #1
 800c42e:	60bb      	str	r3, [r7, #8]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	429a      	cmp	r2, r3
 800c436:	d102      	bne.n	800c43e <dir_alloc+0x62>
 800c438:	e00c      	b.n	800c454 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c43a:	2300      	movs	r3, #0
 800c43c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800c43e:	2101      	movs	r1, #1
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7ff fed1 	bl	800c1e8 <dir_next>
 800c446:	4603      	mov	r3, r0
 800c448:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0d5      	beq.n	800c3fc <dir_alloc+0x20>
 800c450:	e000      	b.n	800c454 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800c452:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	2b04      	cmp	r3, #4
 800c458:	d101      	bne.n	800c45e <dir_alloc+0x82>
 800c45a:	2307      	movs	r3, #7
 800c45c:	73fb      	strb	r3, [r7, #15]
	return res;
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	331b      	adds	r3, #27
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	021b      	lsls	r3, r3, #8
 800c47a:	b21a      	sxth	r2, r3
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	331a      	adds	r3, #26
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	b21b      	sxth	r3, r3
 800c484:	4313      	orrs	r3, r2
 800c486:	b21b      	sxth	r3, r3
 800c488:	b29b      	uxth	r3, r3
 800c48a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800c492:	2b03      	cmp	r3, #3
 800c494:	d10f      	bne.n	800c4b6 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	3315      	adds	r3, #21
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	021b      	lsls	r3, r3, #8
 800c49e:	b21a      	sxth	r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	3314      	adds	r3, #20
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	b21b      	sxth	r3, r3
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	b21b      	sxth	r3, r3
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	041b      	lsls	r3, r3, #16
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]

	return cl;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bc80      	pop	{r7}
 800c4c0:	4770      	bx	lr

0800c4c2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800c4c2:	b480      	push	{r7}
 800c4c4:	b083      	sub	sp, #12
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	331a      	adds	r3, #26
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	b2d2      	uxtb	r2, r2
 800c4d4:	701a      	strb	r2, [r3, #0]
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	0a1b      	lsrs	r3, r3, #8
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	331b      	adds	r3, #27
 800c4e2:	b2d2      	uxtb	r2, r2
 800c4e4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	0c1a      	lsrs	r2, r3, #16
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3314      	adds	r3, #20
 800c4ee:	b2d2      	uxtb	r2, r2
 800c4f0:	701a      	strb	r2, [r3, #0]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	0c1b      	lsrs	r3, r3, #16
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	0a1b      	lsrs	r3, r3, #8
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3315      	adds	r3, #21
 800c500:	b2d2      	uxtb	r2, r2
 800c502:	701a      	strb	r2, [r3, #0]
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	bc80      	pop	{r7}
 800c50c:	4770      	bx	lr
	...

0800c510 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c522:	1e5a      	subs	r2, r3, #1
 800c524:	4613      	mov	r3, r2
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	4413      	add	r3, r2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4413      	add	r3, r2
 800c52e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800c530:	2300      	movs	r3, #0
 800c532:	613b      	str	r3, [r7, #16]
 800c534:	2301      	movs	r3, #1
 800c536:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800c538:	4a2b      	ldr	r2, [pc, #172]	; (800c5e8 <cmp_lfn+0xd8>)
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	4413      	add	r3, r2
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	3301      	adds	r3, #1
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	4413      	add	r3, r2
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	021b      	lsls	r3, r3, #8
 800c54a:	b21a      	sxth	r2, r3
 800c54c:	4926      	ldr	r1, [pc, #152]	; (800c5e8 <cmp_lfn+0xd8>)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	440b      	add	r3, r1
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	4619      	mov	r1, r3
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	440b      	add	r3, r1
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	b21b      	sxth	r3, r3
 800c55e:	4313      	orrs	r3, r2
 800c560:	b21b      	sxth	r3, r3
 800c562:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800c564:	89fb      	ldrh	r3, [r7, #14]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d019      	beq.n	800c59e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800c56a:	89bb      	ldrh	r3, [r7, #12]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f002 f8eb 	bl	800e748 <ff_wtoupper>
 800c572:	4603      	mov	r3, r0
 800c574:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	2bfe      	cmp	r3, #254	; 0xfe
 800c57a:	d80e      	bhi.n	800c59a <cmp_lfn+0x8a>
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	617a      	str	r2, [r7, #20]
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	4413      	add	r3, r2
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f002 f8dc 	bl	800e748 <ff_wtoupper>
 800c590:	4603      	mov	r3, r0
 800c592:	461a      	mov	r2, r3
 800c594:	89fb      	ldrh	r3, [r7, #14]
 800c596:	4293      	cmp	r3, r2
 800c598:	d008      	beq.n	800c5ac <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800c59a:	2300      	movs	r3, #0
 800c59c:	e01f      	b.n	800c5de <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800c59e:	89bb      	ldrh	r3, [r7, #12]
 800c5a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d001      	beq.n	800c5ac <cmp_lfn+0x9c>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	e018      	b.n	800c5de <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	613b      	str	r3, [r7, #16]
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2b0c      	cmp	r3, #12
 800c5b6:	d9bf      	bls.n	800c538 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00b      	beq.n	800c5dc <cmp_lfn+0xcc>
 800c5c4:	89fb      	ldrh	r3, [r7, #14]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d008      	beq.n	800c5dc <cmp_lfn+0xcc>
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	005b      	lsls	r3, r3, #1
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d001      	beq.n	800c5dc <cmp_lfn+0xcc>
		return 0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	e000      	b.n	800c5de <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800c5dc:	2301      	movs	r3, #1
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	0800f2b4 	.word	0x0800f2b4

0800c5ec <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b089      	sub	sp, #36	; 0x24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	71fb      	strb	r3, [r7, #7]
 800c5fe:	4613      	mov	r3, r2
 800c600:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	330d      	adds	r3, #13
 800c606:	79ba      	ldrb	r2, [r7, #6]
 800c608:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	330b      	adds	r3, #11
 800c60e:	220f      	movs	r2, #15
 800c610:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	330c      	adds	r3, #12
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	331a      	adds	r3, #26
 800c61e:	2200      	movs	r2, #0
 800c620:	701a      	strb	r2, [r3, #0]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	331b      	adds	r3, #27
 800c626:	2200      	movs	r2, #0
 800c628:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800c62a:	79fb      	ldrb	r3, [r7, #7]
 800c62c:	1e5a      	subs	r2, r3, #1
 800c62e:	4613      	mov	r3, r2
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	4413      	add	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	82fb      	strh	r3, [r7, #22]
 800c63e:	2300      	movs	r3, #0
 800c640:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800c642:	8afb      	ldrh	r3, [r7, #22]
 800c644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c648:	4293      	cmp	r3, r2
 800c64a:	d007      	beq.n	800c65c <fit_lfn+0x70>
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	61fa      	str	r2, [r7, #28]
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800c65c:	4a1c      	ldr	r2, [pc, #112]	; (800c6d0 <fit_lfn+0xe4>)
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	4413      	add	r3, r2
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	4413      	add	r3, r2
 800c66a:	8afa      	ldrh	r2, [r7, #22]
 800c66c:	b2d2      	uxtb	r2, r2
 800c66e:	701a      	strb	r2, [r3, #0]
 800c670:	8afb      	ldrh	r3, [r7, #22]
 800c672:	0a1b      	lsrs	r3, r3, #8
 800c674:	b299      	uxth	r1, r3
 800c676:	4a16      	ldr	r2, [pc, #88]	; (800c6d0 <fit_lfn+0xe4>)
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	4413      	add	r3, r2
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	3301      	adds	r3, #1
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	4413      	add	r3, r2
 800c684:	b2ca      	uxtb	r2, r1
 800c686:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800c688:	8afb      	ldrh	r3, [r7, #22]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d102      	bne.n	800c694 <fit_lfn+0xa8>
 800c68e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c692:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	3301      	adds	r3, #1
 800c698:	61bb      	str	r3, [r7, #24]
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	2b0c      	cmp	r3, #12
 800c69e:	d9d0      	bls.n	800c642 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800c6a0:	8afb      	ldrh	r3, [r7, #22]
 800c6a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d006      	beq.n	800c6b8 <fit_lfn+0xcc>
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	68fa      	ldr	r2, [r7, #12]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d103      	bne.n	800c6c0 <fit_lfn+0xd4>
 800c6b8:	79fb      	ldrb	r3, [r7, #7]
 800c6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	79fa      	ldrb	r2, [r7, #7]
 800c6c4:	701a      	strb	r2, [r3, #0]
}
 800c6c6:	bf00      	nop
 800c6c8:	3724      	adds	r7, #36	; 0x24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bc80      	pop	{r7}
 800c6ce:	4770      	bx	lr
 800c6d0:	0800f2b4 	.word	0x0800f2b4

0800c6d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08c      	sub	sp, #48	; 0x30
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c6e2:	220b      	movs	r2, #11
 800c6e4:	68b9      	ldr	r1, [r7, #8]
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f7fe fe18 	bl	800b31c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	2b05      	cmp	r3, #5
 800c6f0:	d92b      	bls.n	800c74a <gen_numname+0x76>
		sr = seq;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c6f6:	e022      	b.n	800c73e <gen_numname+0x6a>
			wc = *lfn++;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	1c9a      	adds	r2, r3, #2
 800c6fc:	607a      	str	r2, [r7, #4]
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c702:	2300      	movs	r3, #0
 800c704:	62bb      	str	r3, [r7, #40]	; 0x28
 800c706:	e017      	b.n	800c738 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	005a      	lsls	r2, r3, #1
 800c70c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c70e:	f003 0301 	and.w	r3, r3, #1
 800c712:	4413      	add	r3, r2
 800c714:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c718:	085b      	lsrs	r3, r3, #1
 800c71a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d005      	beq.n	800c732 <gen_numname+0x5e>
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c72c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c730:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	3301      	adds	r3, #1
 800c736:	62bb      	str	r3, [r7, #40]	; 0x28
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	2b0f      	cmp	r3, #15
 800c73c:	d9e4      	bls.n	800c708 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	881b      	ldrh	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1d8      	bne.n	800c6f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c74a:	2307      	movs	r3, #7
 800c74c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	b2db      	uxtb	r3, r3
 800c752:	f003 030f 	and.w	r3, r3, #15
 800c756:	b2db      	uxtb	r3, r3
 800c758:	3330      	adds	r3, #48	; 0x30
 800c75a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c75e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c762:	2b39      	cmp	r3, #57	; 0x39
 800c764:	d904      	bls.n	800c770 <gen_numname+0x9c>
 800c766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c76a:	3307      	adds	r3, #7
 800c76c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	1e5a      	subs	r2, r3, #1
 800c774:	62ba      	str	r2, [r7, #40]	; 0x28
 800c776:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c77a:	4413      	add	r3, r2
 800c77c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c780:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	091b      	lsrs	r3, r3, #4
 800c788:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1de      	bne.n	800c74e <gen_numname+0x7a>
	ns[i] = '~';
 800c790:	f107 0214 	add.w	r2, r7, #20
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	4413      	add	r3, r2
 800c798:	227e      	movs	r2, #126	; 0x7e
 800c79a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c79c:	2300      	movs	r3, #0
 800c79e:	627b      	str	r3, [r7, #36]	; 0x24
 800c7a0:	e002      	b.n	800c7a8 <gen_numname+0xd4>
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	627b      	str	r3, [r7, #36]	; 0x24
 800c7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d205      	bcs.n	800c7bc <gen_numname+0xe8>
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b4:	4413      	add	r3, r2
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b20      	cmp	r3, #32
 800c7ba:	d1f2      	bne.n	800c7a2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	2b07      	cmp	r3, #7
 800c7c0:	d808      	bhi.n	800c7d4 <gen_numname+0x100>
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	1c5a      	adds	r2, r3, #1
 800c7c6:	62ba      	str	r2, [r7, #40]	; 0x28
 800c7c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c7cc:	4413      	add	r3, r2
 800c7ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c7d2:	e000      	b.n	800c7d6 <gen_numname+0x102>
 800c7d4:	2120      	movs	r1, #32
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	627a      	str	r2, [r7, #36]	; 0x24
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	460a      	mov	r2, r1
 800c7e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e6:	2b07      	cmp	r3, #7
 800c7e8:	d9e8      	bls.n	800c7bc <gen_numname+0xe8>
}
 800c7ea:	bf00      	nop
 800c7ec:	bf00      	nop
 800c7ee:	3730      	adds	r7, #48	; 0x30
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c800:	230b      	movs	r3, #11
 800c802:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	b2da      	uxtb	r2, r3
 800c808:	0852      	lsrs	r2, r2, #1
 800c80a:	01db      	lsls	r3, r3, #7
 800c80c:	4313      	orrs	r3, r2
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	1c59      	adds	r1, r3, #1
 800c814:	6079      	str	r1, [r7, #4]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	4413      	add	r3, r2
 800c81a:	73fb      	strb	r3, [r7, #15]
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	3b01      	subs	r3, #1
 800c820:	60bb      	str	r3, [r7, #8]
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1ed      	bne.n	800c804 <sum_sfn+0x10>
	return sum;
 800c828:	7bfb      	ldrb	r3, [r7, #15]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	bc80      	pop	{r7}
 800c832:	4770      	bx	lr

0800c834 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c83c:	2100      	movs	r1, #0
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff fc33 	bl	800c0aa <dir_sdi>
 800c844:	4603      	mov	r3, r0
 800c846:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c848:	7dfb      	ldrb	r3, [r7, #23]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <dir_find+0x1e>
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	e0a0      	b.n	800c994 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c852:	23ff      	movs	r3, #255	; 0xff
 800c854:	753b      	strb	r3, [r7, #20]
 800c856:	7d3b      	ldrb	r3, [r7, #20]
 800c858:	757b      	strb	r3, [r7, #21]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c860:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	4619      	mov	r1, r3
 800c86c:	4610      	mov	r0, r2
 800c86e:	f7fe ffc2 	bl	800b7f6 <move_window>
 800c872:	4603      	mov	r3, r0
 800c874:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c876:	7dfb      	ldrb	r3, [r7, #23]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f040 8085 	bne.w	800c988 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	695b      	ldr	r3, [r3, #20]
 800c882:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c88a:	7dbb      	ldrb	r3, [r7, #22]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d102      	bne.n	800c896 <dir_find+0x62>
 800c890:	2304      	movs	r3, #4
 800c892:	75fb      	strb	r3, [r7, #23]
 800c894:	e07d      	b.n	800c992 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	330b      	adds	r3, #11
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8a0:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c8a2:	7dbb      	ldrb	r3, [r7, #22]
 800c8a4:	2be5      	cmp	r3, #229	; 0xe5
 800c8a6:	d007      	beq.n	800c8b8 <dir_find+0x84>
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
 800c8aa:	f003 0308 	and.w	r3, r3, #8
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d009      	beq.n	800c8c6 <dir_find+0x92>
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
 800c8b4:	2b0f      	cmp	r3, #15
 800c8b6:	d006      	beq.n	800c8c6 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c8b8:	23ff      	movs	r3, #255	; 0xff
 800c8ba:	757b      	strb	r3, [r7, #21]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8c2:	849a      	strh	r2, [r3, #36]	; 0x24
 800c8c4:	e055      	b.n	800c972 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	2b0f      	cmp	r3, #15
 800c8ca:	d12f      	bne.n	800c92c <dir_find+0xf8>
				if (dp->lfn) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a1b      	ldr	r3, [r3, #32]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d04e      	beq.n	800c972 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c8d4:	7dbb      	ldrb	r3, [r7, #22]
 800c8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00c      	beq.n	800c8f8 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	7b5b      	ldrb	r3, [r3, #13]
 800c8e2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800c8e4:	7dbb      	ldrb	r3, [r7, #22]
 800c8e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8ea:	75bb      	strb	r3, [r7, #22]
 800c8ec:	7dbb      	ldrb	r3, [r7, #22]
 800c8ee:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	88da      	ldrh	r2, [r3, #6]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800c8f8:	7dba      	ldrb	r2, [r7, #22]
 800c8fa:	7d7b      	ldrb	r3, [r7, #21]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d112      	bne.n	800c926 <dir_find+0xf2>
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	330d      	adds	r3, #13
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	7d3a      	ldrb	r2, [r7, #20]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d10c      	bne.n	800c926 <dir_find+0xf2>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	6939      	ldr	r1, [r7, #16]
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff fdfc 	bl	800c510 <cmp_lfn>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <dir_find+0xf2>
 800c91e:	7d7b      	ldrb	r3, [r7, #21]
 800c920:	3b01      	subs	r3, #1
 800c922:	b2db      	uxtb	r3, r3
 800c924:	e000      	b.n	800c928 <dir_find+0xf4>
 800c926:	23ff      	movs	r3, #255	; 0xff
 800c928:	757b      	strb	r3, [r7, #21]
 800c92a:	e022      	b.n	800c972 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c92c:	7d7b      	ldrb	r3, [r7, #21]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d107      	bne.n	800c942 <dir_find+0x10e>
 800c932:	6938      	ldr	r0, [r7, #16]
 800c934:	f7ff ff5e 	bl	800c7f4 <sum_sfn>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	7d3b      	ldrb	r3, [r7, #20]
 800c93e:	4293      	cmp	r3, r2
 800c940:	d024      	beq.n	800c98c <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	330b      	adds	r3, #11
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d109      	bne.n	800c966 <dir_find+0x132>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	220b      	movs	r2, #11
 800c958:	4619      	mov	r1, r3
 800c95a:	6938      	ldr	r0, [r7, #16]
 800c95c:	f7fe fd16 	bl	800b38c <mem_cmp>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d014      	beq.n	800c990 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c966:	23ff      	movs	r3, #255	; 0xff
 800c968:	757b      	strb	r3, [r7, #21]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c970:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800c972:	2100      	movs	r1, #0
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7ff fc37 	bl	800c1e8 <dir_next>
 800c97a:	4603      	mov	r3, r0
 800c97c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	2b00      	cmp	r3, #0
 800c982:	f43f af6e 	beq.w	800c862 <dir_find+0x2e>
 800c986:	e004      	b.n	800c992 <dir_find+0x15e>
		if (res != FR_OK) break;
 800c988:	bf00      	nop
 800c98a:	e002      	b.n	800c992 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c98c:	bf00      	nop
 800c98e:	e000      	b.n	800c992 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c990:	bf00      	nop

	return res;
 800c992:	7dfb      	ldrb	r3, [r7, #23]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08c      	sub	sp, #48	; 0x30
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	623b      	str	r3, [r7, #32]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800c9b0:	f107 030c 	add.w	r3, r7, #12
 800c9b4:	220c      	movs	r2, #12
 800c9b6:	6a39      	ldr	r1, [r7, #32]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7fe fcaf 	bl	800b31c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c9be:	7dfb      	ldrb	r3, [r7, #23]
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d035      	beq.n	800ca34 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
 800c9ca:	330b      	adds	r3, #11
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	701a      	strb	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9da:	e013      	b.n	800ca04 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800c9dc:	f107 010c 	add.w	r1, r7, #12
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	69fa      	ldr	r2, [r7, #28]
 800c9e4:	6a38      	ldr	r0, [r7, #32]
 800c9e6:	f7ff fe75 	bl	800c6d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff ff22 	bl	800c834 <dir_find>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c9f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	3301      	adds	r3, #1
 800ca02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca06:	2b63      	cmp	r3, #99	; 0x63
 800ca08:	d9e8      	bls.n	800c9dc <dir_register+0x40>
 800ca0a:	e000      	b.n	800ca0e <dir_register+0x72>
			if (res != FR_OK) break;
 800ca0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	2b64      	cmp	r3, #100	; 0x64
 800ca12:	d101      	bne.n	800ca18 <dir_register+0x7c>
 800ca14:	2307      	movs	r3, #7
 800ca16:	e0b5      	b.n	800cb84 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ca18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca1c:	2b04      	cmp	r3, #4
 800ca1e:	d002      	beq.n	800ca26 <dir_register+0x8a>
 800ca20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca24:	e0ae      	b.n	800cb84 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	330b      	adds	r3, #11
 800ca2a:	7dfa      	ldrb	r2, [r7, #23]
 800ca2c:	701a      	strb	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	69fa      	ldr	r2, [r7, #28]
 800ca32:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	f003 0302 	and.w	r3, r3, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d014      	beq.n	800ca68 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca42:	e002      	b.n	800ca4a <dir_register+0xae>
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca46:	3301      	adds	r3, #1
 800ca48:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	69fa      	ldr	r2, [r7, #28]
 800ca50:	4413      	add	r3, r2
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1f5      	bne.n	800ca44 <dir_register+0xa8>
		nent = (n + 25) / 13;
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	3319      	adds	r3, #25
 800ca5c:	4a4b      	ldr	r2, [pc, #300]	; (800cb8c <dir_register+0x1f0>)
 800ca5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca62:	089b      	lsrs	r3, r3, #2
 800ca64:	627b      	str	r3, [r7, #36]	; 0x24
 800ca66:	e001      	b.n	800ca6c <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ca6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff fcb4 	bl	800c3dc <dir_alloc>
 800ca74:	4603      	mov	r3, r0
 800ca76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ca7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d14c      	bne.n	800cb1c <dir_register+0x180>
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	3b01      	subs	r3, #1
 800ca86:	627b      	str	r3, [r7, #36]	; 0x24
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d046      	beq.n	800cb1c <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	88db      	ldrh	r3, [r3, #6]
 800ca92:	461a      	mov	r2, r3
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff fb05 	bl	800c0aa <dir_sdi>
 800caa0:	4603      	mov	r3, r0
 800caa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800caa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d136      	bne.n	800cb1c <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7ff fe9e 	bl	800c7f4 <sum_sfn>
 800cab8:	4603      	mov	r3, r0
 800caba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	4619      	mov	r1, r3
 800cac6:	4610      	mov	r0, r2
 800cac8:	f7fe fe95 	bl	800b7f6 <move_window>
 800cacc:	4603      	mov	r3, r0
 800cace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d11f      	bne.n	800cb1a <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a18      	ldr	r0, [r3, #32]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6959      	ldr	r1, [r3, #20]
 800cae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	7efb      	ldrb	r3, [r7, #27]
 800cae8:	f7ff fd80 	bl	800c5ec <fit_lfn>
				dp->fs->wflag = 1;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2201      	movs	r2, #1
 800caf2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 800caf6:	2100      	movs	r1, #0
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff fb75 	bl	800c1e8 <dir_next>
 800cafe:	4603      	mov	r3, r0
 800cb00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cb04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d107      	bne.n	800cb1c <dir_register+0x180>
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	627b      	str	r3, [r7, #36]	; 0x24
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1d1      	bne.n	800cabc <dir_register+0x120>
 800cb18:	e000      	b.n	800cb1c <dir_register+0x180>
				if (res != FR_OK) break;
 800cb1a:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800cb1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d12d      	bne.n	800cb80 <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4610      	mov	r0, r2
 800cb30:	f7fe fe61 	bl	800b7f6 <move_window>
 800cb34:	4603      	mov	r3, r0
 800cb36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cb3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d11e      	bne.n	800cb80 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	2220      	movs	r2, #32
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe fc04 	bl	800b358 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6958      	ldr	r0, [r3, #20]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	699b      	ldr	r3, [r3, #24]
 800cb58:	220b      	movs	r2, #11
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	f7fe fbde 	bl	800b31c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	699b      	ldr	r3, [r3, #24]
 800cb64:	330b      	adds	r3, #11
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	330c      	adds	r3, #12
 800cb6e:	f002 0218 	and.w	r2, r2, #24
 800cb72:	b2d2      	uxtb	r2, r2
 800cb74:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800cb80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3730      	adds	r7, #48	; 0x30
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	4ec4ec4f 	.word	0x4ec4ec4f

0800cb90 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b08a      	sub	sp, #40	; 0x28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	613b      	str	r3, [r7, #16]
 800cba0:	e002      	b.n	800cba8 <create_name+0x18>
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	3301      	adds	r3, #1
 800cba6:	613b      	str	r3, [r7, #16]
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b2f      	cmp	r3, #47	; 0x2f
 800cbae:	d0f8      	beq.n	800cba2 <create_name+0x12>
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	2b5c      	cmp	r3, #92	; 0x5c
 800cbb6:	d0f4      	beq.n	800cba2 <create_name+0x12>
	lfn = dp->lfn;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	617b      	str	r3, [r7, #20]
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	61ba      	str	r2, [r7, #24]
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	4413      	add	r3, r2
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800cbd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbd6:	2b1f      	cmp	r3, #31
 800cbd8:	d92f      	bls.n	800cc3a <create_name+0xaa>
 800cbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbdc:	2b2f      	cmp	r3, #47	; 0x2f
 800cbde:	d02c      	beq.n	800cc3a <create_name+0xaa>
 800cbe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbe2:	2b5c      	cmp	r3, #92	; 0x5c
 800cbe4:	d029      	beq.n	800cc3a <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	2bfe      	cmp	r3, #254	; 0xfe
 800cbea:	d901      	bls.n	800cbf0 <create_name+0x60>
			return FR_INVALID_NAME;
 800cbec:	2306      	movs	r3, #6
 800cbee:	e176      	b.n	800cede <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cbf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cbf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f001 fd6a 	bl	800e6d4 <ff_convert>
 800cc00:	4603      	mov	r3, r0
 800cc02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cc04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d101      	bne.n	800cc0e <create_name+0x7e>
 800cc0a:	2306      	movs	r3, #6
 800cc0c:	e167      	b.n	800cede <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800cc0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc10:	2b7f      	cmp	r3, #127	; 0x7f
 800cc12:	d809      	bhi.n	800cc28 <create_name+0x98>
 800cc14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc16:	4619      	mov	r1, r3
 800cc18:	48b3      	ldr	r0, [pc, #716]	; (800cee8 <create_name+0x358>)
 800cc1a:	f7fe fbdd 	bl	800b3d8 <chk_chr>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <create_name+0x98>
			return FR_INVALID_NAME;
 800cc24:	2306      	movs	r3, #6
 800cc26:	e15a      	b.n	800cede <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	617a      	str	r2, [r7, #20]
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc36:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cc38:	e7c5      	b.n	800cbc6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cc3a:	693a      	ldr	r2, [r7, #16]
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	441a      	add	r2, r3
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800cc44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc46:	2b1f      	cmp	r3, #31
 800cc48:	d801      	bhi.n	800cc4e <create_name+0xbe>
 800cc4a:	2304      	movs	r3, #4
 800cc4c:	e000      	b.n	800cc50 <create_name+0xc0>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800cc54:	e011      	b.n	800cc7a <create_name+0xea>
		w = lfn[di - 1];
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cc68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc6a:	2b20      	cmp	r3, #32
 800cc6c:	d002      	beq.n	800cc74 <create_name+0xe4>
 800cc6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc70:	2b2e      	cmp	r3, #46	; 0x2e
 800cc72:	d106      	bne.n	800cc82 <create_name+0xf2>
		di--;
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1ea      	bne.n	800cc56 <create_name+0xc6>
 800cc80:	e000      	b.n	800cc84 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 800cc82:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <create_name+0xfe>
 800cc8a:	2306      	movs	r3, #6
 800cc8c:	e127      	b.n	800cede <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	005b      	lsls	r3, r3, #1
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	4413      	add	r3, r2
 800cc96:	2200      	movs	r2, #0
 800cc98:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	220b      	movs	r2, #11
 800cca0:	2120      	movs	r1, #32
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fe fb58 	bl	800b358 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cca8:	2300      	movs	r3, #0
 800ccaa:	61bb      	str	r3, [r7, #24]
 800ccac:	e002      	b.n	800ccb4 <create_name+0x124>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	4413      	add	r3, r2
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	2b20      	cmp	r3, #32
 800ccc0:	d0f5      	beq.n	800ccae <create_name+0x11e>
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	4413      	add	r3, r2
 800ccca:	881b      	ldrh	r3, [r3, #0]
 800cccc:	2b2e      	cmp	r3, #46	; 0x2e
 800ccce:	d0ee      	beq.n	800ccae <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d009      	beq.n	800ccea <create_name+0x15a>
 800ccd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccda:	f043 0303 	orr.w	r3, r3, #3
 800ccde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cce2:	e002      	b.n	800ccea <create_name+0x15a>
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	617b      	str	r3, [r7, #20]
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d009      	beq.n	800cd04 <create_name+0x174>
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	2b2e      	cmp	r3, #46	; 0x2e
 800cd02:	d1ef      	bne.n	800cce4 <create_name+0x154>

	b = i = 0; ni = 8;
 800cd04:	2300      	movs	r3, #0
 800cd06:	623b      	str	r3, [r7, #32]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd0e:	2308      	movs	r3, #8
 800cd10:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	1c5a      	adds	r2, r3, #1
 800cd16:	61ba      	str	r2, [r7, #24]
 800cd18:	005b      	lsls	r3, r3, #1
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	881b      	ldrh	r3, [r3, #0]
 800cd20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cd22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 808f 	beq.w	800ce48 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cd2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd2c:	2b20      	cmp	r3, #32
 800cd2e:	d006      	beq.n	800cd3e <create_name+0x1ae>
 800cd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd32:	2b2e      	cmp	r3, #46	; 0x2e
 800cd34:	d10a      	bne.n	800cd4c <create_name+0x1bc>
 800cd36:	69ba      	ldr	r2, [r7, #24]
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d006      	beq.n	800cd4c <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 800cd3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd42:	f043 0303 	orr.w	r3, r3, #3
 800cd46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd4a:	e07c      	b.n	800ce46 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cd4c:	6a3a      	ldr	r2, [r7, #32]
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d203      	bcs.n	800cd5c <create_name+0x1cc>
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d123      	bne.n	800cda4 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	2b0b      	cmp	r3, #11
 800cd60:	d106      	bne.n	800cd70 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 800cd62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd66:	f043 0303 	orr.w	r3, r3, #3
 800cd6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd6e:	e06e      	b.n	800ce4e <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cd70:	69ba      	ldr	r2, [r7, #24]
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d005      	beq.n	800cd84 <create_name+0x1f4>
 800cd78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd7c:	f043 0303 	orr.w	r3, r3, #3
 800cd80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cd84:	69ba      	ldr	r2, [r7, #24]
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d85f      	bhi.n	800ce4c <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	61bb      	str	r3, [r7, #24]
 800cd90:	2308      	movs	r3, #8
 800cd92:	623b      	str	r3, [r7, #32]
 800cd94:	230b      	movs	r3, #11
 800cd96:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cd98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cda2:	e050      	b.n	800ce46 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cda4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cda6:	2b7f      	cmp	r3, #127	; 0x7f
 800cda8:	d914      	bls.n	800cdd4 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cdaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdac:	2100      	movs	r1, #0
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f001 fc90 	bl	800e6d4 <ff_convert>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cdb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d004      	beq.n	800cdc8 <create_name+0x238>
 800cdbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdc0:	3b80      	subs	r3, #128	; 0x80
 800cdc2:	4a4a      	ldr	r2, [pc, #296]	; (800ceec <create_name+0x35c>)
 800cdc4:	5cd3      	ldrb	r3, [r2, r3]
 800cdc6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdcc:	f043 0302 	orr.w	r3, r3, #2
 800cdd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cdd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d007      	beq.n	800cdea <create_name+0x25a>
 800cdda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cddc:	4619      	mov	r1, r3
 800cdde:	4844      	ldr	r0, [pc, #272]	; (800cef0 <create_name+0x360>)
 800cde0:	f7fe fafa 	bl	800b3d8 <chk_chr>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d008      	beq.n	800cdfc <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cdea:	235f      	movs	r3, #95	; 0x5f
 800cdec:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cdee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf2:	f043 0303 	orr.w	r3, r3, #3
 800cdf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdfa:	e01b      	b.n	800ce34 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cdfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdfe:	2b40      	cmp	r3, #64	; 0x40
 800ce00:	d909      	bls.n	800ce16 <create_name+0x286>
 800ce02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce04:	2b5a      	cmp	r3, #90	; 0x5a
 800ce06:	d806      	bhi.n	800ce16 <create_name+0x286>
					b |= 2;
 800ce08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce0c:	f043 0302 	orr.w	r3, r3, #2
 800ce10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce14:	e00e      	b.n	800ce34 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ce16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce18:	2b60      	cmp	r3, #96	; 0x60
 800ce1a:	d90b      	bls.n	800ce34 <create_name+0x2a4>
 800ce1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce1e:	2b7a      	cmp	r3, #122	; 0x7a
 800ce20:	d808      	bhi.n	800ce34 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 800ce22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce26:	f043 0301 	orr.w	r3, r3, #1
 800ce2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce30:	3b20      	subs	r3, #32
 800ce32:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	699a      	ldr	r2, [r3, #24]
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	1c59      	adds	r1, r3, #1
 800ce3c:	6239      	str	r1, [r7, #32]
 800ce3e:	4413      	add	r3, r2
 800ce40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ce42:	b2d2      	uxtb	r2, r2
 800ce44:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800ce46:	e764      	b.n	800cd12 <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 800ce48:	bf00      	nop
 800ce4a:	e000      	b.n	800ce4e <create_name+0x2be>
			if (si > di) break;			/* No extension */
 800ce4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	699b      	ldr	r3, [r3, #24]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2be5      	cmp	r3, #229	; 0xe5
 800ce56:	d103      	bne.n	800ce60 <create_name+0x2d0>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	2205      	movs	r2, #5
 800ce5e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	2b08      	cmp	r3, #8
 800ce64:	d104      	bne.n	800ce70 <create_name+0x2e0>
 800ce66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800ce70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce74:	f003 030c 	and.w	r3, r3, #12
 800ce78:	2b0c      	cmp	r3, #12
 800ce7a:	d005      	beq.n	800ce88 <create_name+0x2f8>
 800ce7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce80:	f003 0303 	and.w	r3, r3, #3
 800ce84:	2b03      	cmp	r3, #3
 800ce86:	d105      	bne.n	800ce94 <create_name+0x304>
		cf |= NS_LFN;
 800ce88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce8c:	f043 0302 	orr.w	r3, r3, #2
 800ce90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ce94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce98:	f003 0302 	and.w	r3, r3, #2
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d117      	bne.n	800ced0 <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cea4:	f003 0303 	and.w	r3, r3, #3
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d105      	bne.n	800ceb8 <create_name+0x328>
 800ceac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceb0:	f043 0310 	orr.w	r3, r3, #16
 800ceb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ceb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cebc:	f003 030c 	and.w	r3, r3, #12
 800cec0:	2b04      	cmp	r3, #4
 800cec2:	d105      	bne.n	800ced0 <create_name+0x340>
 800cec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec8:	f043 0308 	orr.w	r3, r3, #8
 800cecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	330b      	adds	r3, #11
 800ced6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ceda:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cedc:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3728      	adds	r7, #40	; 0x28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	0800f1d4 	.word	0x0800f1d4
 800ceec:	0800f234 	.word	0x0800f234
 800cef0:	0800f1e0 	.word	0x0800f1e0

0800cef4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b2f      	cmp	r3, #47	; 0x2f
 800cf04:	d003      	beq.n	800cf0e <follow_path+0x1a>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b5c      	cmp	r3, #92	; 0x5c
 800cf0c:	d102      	bne.n	800cf14 <follow_path+0x20>
		path++;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	3301      	adds	r3, #1
 800cf12:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	2b1f      	cmp	r3, #31
 800cf20:	d809      	bhi.n	800cf36 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 800cf22:	2100      	movs	r1, #0
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f7ff f8c0 	bl	800c0aa <dir_sdi>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	615a      	str	r2, [r3, #20]
 800cf34:	e041      	b.n	800cfba <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf36:	463b      	mov	r3, r7
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff fe28 	bl	800cb90 <create_name>
 800cf40:	4603      	mov	r3, r0
 800cf42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d132      	bne.n	800cfb0 <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7ff fc72 	bl	800c834 <dir_find>
 800cf50:	4603      	mov	r3, r0
 800cf52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	7adb      	ldrb	r3, [r3, #11]
 800cf5a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00a      	beq.n	800cf78 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d125      	bne.n	800cfb4 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cf68:	7bbb      	ldrb	r3, [r7, #14]
 800cf6a:	f003 0304 	and.w	r3, r3, #4
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d120      	bne.n	800cfb4 <follow_path+0xc0>
 800cf72:	2305      	movs	r3, #5
 800cf74:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800cf76:	e01d      	b.n	800cfb4 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
 800cf7a:	f003 0304 	and.w	r3, r3, #4
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d11a      	bne.n	800cfb8 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	695b      	ldr	r3, [r3, #20]
 800cf86:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	330b      	adds	r3, #11
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	f003 0310 	and.w	r3, r3, #16
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d102      	bne.n	800cf9c <follow_path+0xa8>
				res = FR_NO_PATH; break;
 800cf96:	2305      	movs	r3, #5
 800cf98:	73fb      	strb	r3, [r7, #15]
 800cf9a:	e00e      	b.n	800cfba <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68b9      	ldr	r1, [r7, #8]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff fa60 	bl	800c468 <ld_clust>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cfae:	e7c2      	b.n	800cf36 <follow_path+0x42>
			if (res != FR_OK) break;
 800cfb0:	bf00      	nop
 800cfb2:	e002      	b.n	800cfba <follow_path+0xc6>
				break;
 800cfb4:	bf00      	nop
 800cfb6:	e000      	b.n	800cfba <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cfb8:	bf00      	nop
		}
	}

	return res;
 800cfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b087      	sub	sp, #28
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d031      	beq.n	800d03e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e002      	b.n	800cfe8 <get_ldnumber+0x24>
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	617b      	str	r3, [r7, #20]
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b1f      	cmp	r3, #31
 800cfee:	d903      	bls.n	800cff8 <get_ldnumber+0x34>
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b3a      	cmp	r3, #58	; 0x3a
 800cff6:	d1f4      	bne.n	800cfe2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2b3a      	cmp	r3, #58	; 0x3a
 800cffe:	d11c      	bne.n	800d03a <get_ldnumber+0x76>
			tp = *path;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	1c5a      	adds	r2, r3, #1
 800d00a:	60fa      	str	r2, [r7, #12]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	3b30      	subs	r3, #48	; 0x30
 800d010:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	2b09      	cmp	r3, #9
 800d016:	d80e      	bhi.n	800d036 <get_ldnumber+0x72>
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d10a      	bne.n	800d036 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d107      	bne.n	800d036 <get_ldnumber+0x72>
					vol = (int)i;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	3301      	adds	r3, #1
 800d02e:	617b      	str	r3, [r7, #20]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	e002      	b.n	800d040 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d03a:	2300      	movs	r3, #0
 800d03c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d03e:	693b      	ldr	r3, [r7, #16]
}
 800d040:	4618      	mov	r0, r3
 800d042:	371c      	adds	r7, #28
 800d044:	46bd      	mov	sp, r7
 800d046:	bc80      	pop	{r7}
 800d048:	4770      	bx	lr
	...

0800d04c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f04f 32ff 	mov.w	r2, #4294967295
 800d064:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7fe fbc3 	bl	800b7f6 <move_window>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <check_fs+0x2e>
		return 3;
 800d076:	2303      	movs	r3, #3
 800d078:	e04a      	b.n	800d110 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d080:	3301      	adds	r3, #1
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	021b      	lsls	r3, r3, #8
 800d086:	b21a      	sxth	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d08e:	b21b      	sxth	r3, r3
 800d090:	4313      	orrs	r3, r2
 800d092:	b21b      	sxth	r3, r3
 800d094:	4a20      	ldr	r2, [pc, #128]	; (800d118 <check_fs+0xcc>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d001      	beq.n	800d09e <check_fs+0x52>
		return 2;
 800d09a:	2302      	movs	r3, #2
 800d09c:	e038      	b.n	800d110 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	3336      	adds	r3, #54	; 0x36
 800d0a2:	3303      	adds	r3, #3
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	061a      	lsls	r2, r3, #24
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3336      	adds	r3, #54	; 0x36
 800d0ac:	3302      	adds	r3, #2
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	041b      	lsls	r3, r3, #16
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	3236      	adds	r2, #54	; 0x36
 800d0b8:	3201      	adds	r2, #1
 800d0ba:	7812      	ldrb	r2, [r2, #0]
 800d0bc:	0212      	lsls	r2, r2, #8
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d0cc:	4a13      	ldr	r2, [pc, #76]	; (800d11c <check_fs+0xd0>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d101      	bne.n	800d0d6 <check_fs+0x8a>
		return 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	e01c      	b.n	800d110 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	3352      	adds	r3, #82	; 0x52
 800d0da:	3303      	adds	r3, #3
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	061a      	lsls	r2, r3, #24
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3352      	adds	r3, #82	; 0x52
 800d0e4:	3302      	adds	r3, #2
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	041b      	lsls	r3, r3, #16
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	3252      	adds	r2, #82	; 0x52
 800d0f0:	3201      	adds	r2, #1
 800d0f2:	7812      	ldrb	r2, [r2, #0]
 800d0f4:	0212      	lsls	r2, r2, #8
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800d0fe:	4313      	orrs	r3, r2
 800d100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d104:	4a05      	ldr	r2, [pc, #20]	; (800d11c <check_fs+0xd0>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d101      	bne.n	800d10e <check_fs+0xc2>
		return 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	e000      	b.n	800d110 <check_fs+0xc4>

	return 1;
 800d10e:	2301      	movs	r3, #1
}
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	ffffaa55 	.word	0xffffaa55
 800d11c:	00544146 	.word	0x00544146

0800d120 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b096      	sub	sp, #88	; 0x58
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	4613      	mov	r3, r2
 800d12c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2200      	movs	r2, #0
 800d132:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d134:	68b8      	ldr	r0, [r7, #8]
 800d136:	f7ff ff45 	bl	800cfc4 <get_ldnumber>
 800d13a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	da01      	bge.n	800d146 <find_volume+0x26>
 800d142:	230b      	movs	r3, #11
 800d144:	e2de      	b.n	800d704 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d146:	4ab1      	ldr	r2, [pc, #708]	; (800d40c <find_volume+0x2ec>)
 800d148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d14e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <find_volume+0x3a>
 800d156:	230c      	movs	r3, #12
 800d158:	e2d4      	b.n	800d704 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d15e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800d160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d162:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800d166:	2b00      	cmp	r3, #0
 800d168:	d01b      	beq.n	800d1a2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe f835 	bl	800b1e0 <disk_status>
 800d176:	4603      	mov	r3, r0
 800d178:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d17c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10c      	bne.n	800d1a2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800d188:	79fb      	ldrb	r3, [r7, #7]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d007      	beq.n	800d19e <find_volume+0x7e>
 800d18e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d192:	f003 0304 	and.w	r3, r3, #4
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800d19a:	230a      	movs	r3, #10
 800d19c:	e2b2      	b.n	800d704 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e2b0      	b.n	800d704 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe f82a 	bl	800b214 <disk_initialize>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800d1c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1ca:	f003 0301 	and.w	r3, r3, #1
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e296      	b.n	800d704 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800d1d6:	79fb      	ldrb	r3, [r7, #7]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d007      	beq.n	800d1ec <find_volume+0xcc>
 800d1dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1e0:	f003 0304 	and.w	r3, r3, #4
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d1e8:	230a      	movs	r3, #10
 800d1ea:	e28b      	b.n	800d704 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ee:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f4:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	2102      	movs	r1, #2
 800d1fc:	f7fe f870 	bl	800b2e0 <disk_ioctl>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10b      	bne.n	800d21e <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800d206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d208:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d20c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d210:	d305      	bcc.n	800d21e <find_volume+0xfe>
 800d212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d214:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d21c:	d901      	bls.n	800d222 <find_volume+0x102>
 800d21e:	2301      	movs	r3, #1
 800d220:	e270      	b.n	800d704 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800d222:	2300      	movs	r3, #0
 800d224:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800d226:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d228:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d22a:	f7ff ff0f 	bl	800d04c <check_fs>
 800d22e:	4603      	mov	r3, r0
 800d230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800d234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d155      	bne.n	800d2e8 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d23c:	2300      	movs	r3, #0
 800d23e:	643b      	str	r3, [r7, #64]	; 0x40
 800d240:	e029      	b.n	800d296 <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800d242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d246:	011b      	lsls	r3, r3, #4
 800d248:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d24c:	4413      	add	r3, r2
 800d24e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d252:	3304      	adds	r3, #4
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d012      	beq.n	800d280 <find_volume+0x160>
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	330b      	adds	r3, #11
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	061a      	lsls	r2, r3, #24
 800d262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d264:	330a      	adds	r3, #10
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	041b      	lsls	r3, r3, #16
 800d26a:	4313      	orrs	r3, r2
 800d26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d26e:	3209      	adds	r2, #9
 800d270:	7812      	ldrb	r2, [r2, #0]
 800d272:	0212      	lsls	r2, r2, #8
 800d274:	4313      	orrs	r3, r2
 800d276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d278:	3208      	adds	r2, #8
 800d27a:	7812      	ldrb	r2, [r2, #0]
 800d27c:	431a      	orrs	r2, r3
 800d27e:	e000      	b.n	800d282 <find_volume+0x162>
 800d280:	2200      	movs	r2, #0
 800d282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d28a:	440b      	add	r3, r1
 800d28c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d292:	3301      	adds	r3, #1
 800d294:	643b      	str	r3, [r7, #64]	; 0x40
 800d296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d9d2      	bls.n	800d242 <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800d29c:	2300      	movs	r3, #0
 800d29e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <find_volume+0x18c>
 800d2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800d2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d2b4:	4413      	add	r3, r2
 800d2b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d2ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800d2bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d005      	beq.n	800d2ce <find_volume+0x1ae>
 800d2c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d2c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2c6:	f7ff fec1 	bl	800d04c <check_fs>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	e000      	b.n	800d2d0 <find_volume+0x1b0>
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800d2d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d005      	beq.n	800d2e8 <find_volume+0x1c8>
 800d2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2de:	3301      	adds	r3, #1
 800d2e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d9e1      	bls.n	800d2ac <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d2e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2ec:	2b03      	cmp	r3, #3
 800d2ee:	d101      	bne.n	800d2f4 <find_volume+0x1d4>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e207      	b.n	800d704 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800d2f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <find_volume+0x1e0>
 800d2fc:	230d      	movs	r3, #13
 800d2fe:	e201      	b.n	800d704 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d302:	7b1b      	ldrb	r3, [r3, #12]
 800d304:	021b      	lsls	r3, r3, #8
 800d306:	b21a      	sxth	r2, r3
 800d308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30a:	7adb      	ldrb	r3, [r3, #11]
 800d30c:	b21b      	sxth	r3, r3
 800d30e:	4313      	orrs	r3, r2
 800d310:	b21a      	sxth	r2, r3
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d318:	b21b      	sxth	r3, r3
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d001      	beq.n	800d322 <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 800d31e:	230d      	movs	r3, #13
 800d320:	e1f0      	b.n	800d704 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800d322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d324:	7ddb      	ldrb	r3, [r3, #23]
 800d326:	021b      	lsls	r3, r3, #8
 800d328:	b21a      	sxth	r2, r3
 800d32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32c:	7d9b      	ldrb	r3, [r3, #22]
 800d32e:	b21b      	sxth	r3, r3
 800d330:	4313      	orrs	r3, r2
 800d332:	b21b      	sxth	r3, r3
 800d334:	b29b      	uxth	r3, r3
 800d336:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800d338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d112      	bne.n	800d364 <find_volume+0x244>
 800d33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d340:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800d344:	061a      	lsls	r2, r3, #24
 800d346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d348:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d34c:	041b      	lsls	r3, r3, #16
 800d34e:	4313      	orrs	r3, r2
 800d350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d352:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d356:	0212      	lsls	r2, r2, #8
 800d358:	4313      	orrs	r3, r2
 800d35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d35c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d360:	4313      	orrs	r3, r2
 800d362:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d368:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36e:	7c1a      	ldrb	r2, [r3, #16]
 800d370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d372:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d006      	beq.n	800d38e <find_volume+0x26e>
 800d380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d382:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800d386:	2b02      	cmp	r3, #2
 800d388:	d001      	beq.n	800d38e <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 800d38a:	230d      	movs	r3, #13
 800d38c:	e1ba      	b.n	800d704 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800d38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d390:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800d394:	461a      	mov	r2, r3
 800d396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d398:	fb02 f303 	mul.w	r3, r2, r3
 800d39c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800d39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a0:	7b5a      	ldrb	r2, [r3, #13]
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a4:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3aa:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00a      	beq.n	800d3c8 <find_volume+0x2a8>
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3bc:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 800d3c8:	230d      	movs	r3, #13
 800d3ca:	e19b      	b.n	800d704 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	7c9b      	ldrb	r3, [r3, #18]
 800d3d0:	021b      	lsls	r3, r3, #8
 800d3d2:	b21a      	sxth	r2, r3
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d6:	7c5b      	ldrb	r3, [r3, #17]
 800d3d8:	b21b      	sxth	r3, r3
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	b21b      	sxth	r3, r3
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800d3ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3ee:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d3f2:	0952      	lsrs	r2, r2, #5
 800d3f4:	b292      	uxth	r2, r2
 800d3f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3fa:	fb02 f201 	mul.w	r2, r2, r1
 800d3fe:	1a9b      	subs	r3, r3, r2
 800d400:	b29b      	uxth	r3, r3
 800d402:	2b00      	cmp	r3, #0
 800d404:	d004      	beq.n	800d410 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800d406:	230d      	movs	r3, #13
 800d408:	e17c      	b.n	800d704 <find_volume+0x5e4>
 800d40a:	bf00      	nop
 800d40c:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800d410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d412:	7d1b      	ldrb	r3, [r3, #20]
 800d414:	021b      	lsls	r3, r3, #8
 800d416:	b21a      	sxth	r2, r3
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	7cdb      	ldrb	r3, [r3, #19]
 800d41c:	b21b      	sxth	r3, r3
 800d41e:	4313      	orrs	r3, r2
 800d420:	b21b      	sxth	r3, r3
 800d422:	b29b      	uxth	r3, r3
 800d424:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800d426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d112      	bne.n	800d452 <find_volume+0x332>
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d432:	061a      	lsls	r2, r3, #24
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d43a:	041b      	lsls	r3, r3, #16
 800d43c:	4313      	orrs	r3, r2
 800d43e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d440:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d444:	0212      	lsls	r2, r2, #8
 800d446:	4313      	orrs	r3, r2
 800d448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d44a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d44e:	4313      	orrs	r3, r2
 800d450:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800d452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d454:	7bdb      	ldrb	r3, [r3, #15]
 800d456:	021b      	lsls	r3, r3, #8
 800d458:	b21a      	sxth	r2, r3
 800d45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45c:	7b9b      	ldrb	r3, [r3, #14]
 800d45e:	b21b      	sxth	r3, r3
 800d460:	4313      	orrs	r3, r2
 800d462:	b21b      	sxth	r3, r3
 800d464:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800d466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d101      	bne.n	800d470 <find_volume+0x350>
 800d46c:	230d      	movs	r3, #13
 800d46e:	e149      	b.n	800d704 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800d470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d474:	4413      	add	r3, r2
 800d476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d478:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 800d47c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d47e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d482:	0952      	lsrs	r2, r2, #5
 800d484:	b292      	uxth	r2, r2
 800d486:	fbb1 f2f2 	udiv	r2, r1, r2
 800d48a:	b292      	uxth	r2, r2
 800d48c:	4413      	add	r3, r2
 800d48e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	429a      	cmp	r2, r3
 800d496:	d201      	bcs.n	800d49c <find_volume+0x37c>
 800d498:	230d      	movs	r3, #13
 800d49a:	e133      	b.n	800d704 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800d49c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4a4:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800d4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4ac:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d101      	bne.n	800d4b8 <find_volume+0x398>
 800d4b4:	230d      	movs	r3, #13
 800d4b6:	e125      	b.n	800d704 <find_volume+0x5e4>
	fmt = FS_FAT12;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d902      	bls.n	800d4ce <find_volume+0x3ae>
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d902      	bls.n	800d4de <find_volume+0x3be>
 800d4d8:	2303      	movs	r3, #3
 800d4da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800d4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e0:	1c9a      	adds	r2, r3, #2
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4ec:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800d4f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4f4:	441a      	add	r2, r3
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f8:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 800d4fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	441a      	add	r2, r3
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800d508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d121      	bne.n	800d554 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800d510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d512:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <find_volume+0x3fe>
 800d51a:	230d      	movs	r3, #13
 800d51c:	e0f2      	b.n	800d704 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800d51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d520:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d524:	061a      	lsls	r2, r3, #24
 800d526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d528:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d52c:	041b      	lsls	r3, r3, #16
 800d52e:	4313      	orrs	r3, r2
 800d530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d532:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d536:	0212      	lsls	r2, r2, #8
 800d538:	4313      	orrs	r3, r2
 800d53a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d53c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d540:	431a      	orrs	r2, r3
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	647b      	str	r3, [r7, #68]	; 0x44
 800d552:	e025      	b.n	800d5a0 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d101      	bne.n	800d562 <find_volume+0x442>
 800d55e:	230d      	movs	r3, #13
 800d560:	e0d0      	b.n	800d704 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d564:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800d568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d56a:	441a      	add	r2, r3
 800d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d572:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d576:	2b02      	cmp	r3, #2
 800d578:	d104      	bne.n	800d584 <find_volume+0x464>
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	e00c      	b.n	800d59e <find_volume+0x47e>
 800d584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d586:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800d58a:	4613      	mov	r3, r2
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	4413      	add	r3, r2
 800d590:	085a      	lsrs	r2, r3, #1
 800d592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d594:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d598:	f003 0301 	and.w	r3, r3, #1
 800d59c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800d59e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5b0:	440b      	add	r3, r1
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5b6:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 800d5ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d201      	bcs.n	800d5c6 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800d5c2:	230d      	movs	r3, #13
 800d5c4:	e09e      	b.n	800d704 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5cc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	2280      	movs	r2, #128	; 0x80
 800d5e0:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800d5e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5e8:	2b03      	cmp	r3, #3
 800d5ea:	d177      	bne.n	800d6dc <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5f2:	021b      	lsls	r3, r3, #8
 800d5f4:	b21a      	sxth	r2, r3
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5fc:	b21b      	sxth	r3, r3
 800d5fe:	4313      	orrs	r3, r2
 800d600:	b21b      	sxth	r3, r3
 800d602:	2b01      	cmp	r3, #1
 800d604:	d16a      	bne.n	800d6dc <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 800d606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d608:	3301      	adds	r3, #1
 800d60a:	4619      	mov	r1, r3
 800d60c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d60e:	f7fe f8f2 	bl	800b7f6 <move_window>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d161      	bne.n	800d6dc <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 800d618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d622:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800d626:	021b      	lsls	r3, r3, #8
 800d628:	b21a      	sxth	r2, r3
 800d62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d630:	b21b      	sxth	r3, r3
 800d632:	4313      	orrs	r3, r2
 800d634:	b21b      	sxth	r3, r3
 800d636:	4a35      	ldr	r2, [pc, #212]	; (800d70c <find_volume+0x5ec>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d14f      	bne.n	800d6dc <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	78db      	ldrb	r3, [r3, #3]
 800d640:	061a      	lsls	r2, r3, #24
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	789b      	ldrb	r3, [r3, #2]
 800d646:	041b      	lsls	r3, r3, #16
 800d648:	4313      	orrs	r3, r2
 800d64a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d64c:	7852      	ldrb	r2, [r2, #1]
 800d64e:	0212      	lsls	r2, r2, #8
 800d650:	4313      	orrs	r3, r2
 800d652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d654:	7812      	ldrb	r2, [r2, #0]
 800d656:	4313      	orrs	r3, r2
 800d658:	4a2d      	ldr	r2, [pc, #180]	; (800d710 <find_volume+0x5f0>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d13e      	bne.n	800d6dc <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800d65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d660:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800d664:	061a      	lsls	r2, r3, #24
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800d66c:	041b      	lsls	r3, r3, #16
 800d66e:	4313      	orrs	r3, r2
 800d670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d672:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800d676:	0212      	lsls	r2, r2, #8
 800d678:	4313      	orrs	r3, r2
 800d67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d67c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800d680:	4313      	orrs	r3, r2
 800d682:	4a24      	ldr	r2, [pc, #144]	; (800d714 <find_volume+0x5f4>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d129      	bne.n	800d6dc <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800d68e:	061a      	lsls	r2, r3, #24
 800d690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d692:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800d696:	041b      	lsls	r3, r3, #16
 800d698:	4313      	orrs	r3, r2
 800d69a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d69c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800d6a0:	0212      	lsls	r2, r2, #8
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6a6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800d6aa:	431a      	orrs	r2, r3
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ae:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800d6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800d6b8:	061a      	lsls	r2, r3, #24
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800d6c0:	041b      	lsls	r3, r3, #16
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6c6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800d6ca:	0212      	lsls	r2, r2, #8
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6d0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800d6d4:	431a      	orrs	r2, r3
 800d6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d6e2:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <find_volume+0x5f8>)
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	4b0a      	ldr	r3, [pc, #40]	; (800d718 <find_volume+0x5f8>)
 800d6f0:	801a      	strh	r2, [r3, #0]
 800d6f2:	4b09      	ldr	r3, [pc, #36]	; (800d718 <find_volume+0x5f8>)
 800d6f4:	881a      	ldrh	r2, [r3, #0]
 800d6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800d6fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6fe:	f7fe f807 	bl	800b710 <clear_lock>
#endif

	return FR_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3758      	adds	r7, #88	; 0x58
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	ffffaa55 	.word	0xffffaa55
 800d710:	41615252 	.word	0x41615252
 800d714:	61417272 	.word	0x61417272
 800d718:	200000b0 	.word	0x200000b0

0800d71c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d01d      	beq.n	800d76a <validate+0x4e>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d019      	beq.n	800d76a <validate+0x4e>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d013      	beq.n	800d76a <validate+0x4e>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	889b      	ldrh	r3, [r3, #4]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d10b      	bne.n	800d76a <validate+0x4e>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fd fd40 	bl	800b1e0 <disk_status>
 800d760:	4603      	mov	r3, r0
 800d762:	f003 0301 	and.w	r3, r3, #1
 800d766:	2b00      	cmp	r3, #0
 800d768:	d001      	beq.n	800d76e <validate+0x52>
		return FR_INVALID_OBJECT;
 800d76a:	2309      	movs	r3, #9
 800d76c:	e000      	b.n	800d770 <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	4613      	mov	r3, r2
 800d784:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800d78a:	f107 0310 	add.w	r3, r7, #16
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff fc18 	bl	800cfc4 <get_ldnumber>
 800d794:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	da01      	bge.n	800d7a0 <f_mount+0x28>
 800d79c:	230b      	movs	r3, #11
 800d79e:	e02d      	b.n	800d7fc <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d7a0:	4a18      	ldr	r2, [pc, #96]	; (800d804 <f_mount+0x8c>)
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d006      	beq.n	800d7be <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800d7b0:	69b8      	ldr	r0, [r7, #24]
 800d7b2:	f7fd ffad 	bl	800b710 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d003      	beq.n	800d7cc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	490d      	ldr	r1, [pc, #52]	; (800d804 <f_mount+0x8c>)
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <f_mount+0x6a>
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d001      	beq.n	800d7e6 <f_mount+0x6e>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	e00a      	b.n	800d7fc <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800d7e6:	f107 0108 	add.w	r1, r7, #8
 800d7ea:	f107 030c 	add.w	r3, r7, #12
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7ff fc95 	bl	800d120 <find_volume>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3720      	adds	r7, #32
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	200000ac 	.word	0x200000ac

0800d808 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b096      	sub	sp, #88	; 0x58
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	4613      	mov	r3, r2
 800d814:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d101      	bne.n	800d820 <f_open+0x18>
 800d81c:	2309      	movs	r3, #9
 800d81e:	e16d      	b.n	800dafc <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	f003 031f 	and.w	r3, r3, #31
 800d82c:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800d82e:	79fb      	ldrb	r3, [r7, #7]
 800d830:	f023 0301 	bic.w	r3, r3, #1
 800d834:	b2da      	uxtb	r2, r3
 800d836:	f107 0108 	add.w	r1, r7, #8
 800d83a:	f107 0320 	add.w	r3, r7, #32
 800d83e:	4618      	mov	r0, r3
 800d840:	f7ff fc6e 	bl	800d120 <find_volume>
 800d844:	4603      	mov	r3, r0
 800d846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800d84a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f040 8152 	bne.w	800daf8 <f_open+0x2f0>
		INIT_BUF(dj);
 800d854:	f107 0314 	add.w	r3, r7, #20
 800d858:	63bb      	str	r3, [r7, #56]	; 0x38
 800d85a:	4baa      	ldr	r3, [pc, #680]	; (800db04 <f_open+0x2fc>)
 800d85c:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	f107 0320 	add.w	r3, r7, #32
 800d864:	4611      	mov	r1, r2
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff fb44 	bl	800cef4 <follow_path>
 800d86c:	4603      	mov	r3, r0
 800d86e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 800d872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d874:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d118      	bne.n	800d8b0 <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800d87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d880:	2b00      	cmp	r3, #0
 800d882:	d103      	bne.n	800d88c <f_open+0x84>
				res = FR_INVALID_NAME;
 800d884:	2306      	movs	r3, #6
 800d886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d88a:	e011      	b.n	800d8b0 <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d88c:	79fb      	ldrb	r3, [r7, #7]
 800d88e:	f023 0301 	bic.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	bf14      	ite	ne
 800d896:	2301      	movne	r3, #1
 800d898:	2300      	moveq	r3, #0
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	461a      	mov	r2, r3
 800d89e:	f107 0320 	add.w	r3, r7, #32
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fd fdb1 	bl	800b40c <chk_lock>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d8b0:	79fb      	ldrb	r3, [r7, #7]
 800d8b2:	f003 031c 	and.w	r3, r3, #28
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f000 809a 	beq.w	800d9f0 <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 800d8bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d019      	beq.n	800d8f8 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800d8c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8c8:	2b04      	cmp	r3, #4
 800d8ca:	d10e      	bne.n	800d8ea <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d8cc:	f7fd fe08 	bl	800b4e0 <enq_lock>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d006      	beq.n	800d8e4 <f_open+0xdc>
 800d8d6:	f107 0320 	add.w	r3, r7, #32
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff f85e 	bl	800c99c <dir_register>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	e000      	b.n	800d8e6 <f_open+0xde>
 800d8e4:	2312      	movs	r3, #18
 800d8e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d8ea:	79fb      	ldrb	r3, [r7, #7]
 800d8ec:	f043 0308 	orr.w	r3, r3, #8
 800d8f0:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 800d8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f4:	653b      	str	r3, [r7, #80]	; 0x50
 800d8f6:	e012      	b.n	800d91e <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8fa:	330b      	adds	r3, #11
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	f003 0311 	and.w	r3, r3, #17
 800d902:	2b00      	cmp	r3, #0
 800d904:	d003      	beq.n	800d90e <f_open+0x106>
					res = FR_DENIED;
 800d906:	2307      	movs	r3, #7
 800d908:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d90c:	e007      	b.n	800d91e <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800d90e:	79fb      	ldrb	r3, [r7, #7]
 800d910:	f003 0304 	and.w	r3, r3, #4
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <f_open+0x116>
						res = FR_EXIST;
 800d918:	2308      	movs	r3, #8
 800d91a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d91e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d922:	2b00      	cmp	r3, #0
 800d924:	f040 8082 	bne.w	800da2c <f_open+0x224>
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	f003 0308 	and.w	r3, r3, #8
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d07c      	beq.n	800da2c <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 800d932:	f7fd fbef 	bl	800b114 <get_fattime>
 800d936:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800d938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d93a:	330e      	adds	r3, #14
 800d93c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d93e:	b2d2      	uxtb	r2, r2
 800d940:	701a      	strb	r2, [r3, #0]
 800d942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d944:	b29b      	uxth	r3, r3
 800d946:	0a1b      	lsrs	r3, r3, #8
 800d948:	b29a      	uxth	r2, r3
 800d94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d94c:	330f      	adds	r3, #15
 800d94e:	b2d2      	uxtb	r2, r2
 800d950:	701a      	strb	r2, [r3, #0]
 800d952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d954:	0c1a      	lsrs	r2, r3, #16
 800d956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d958:	3310      	adds	r3, #16
 800d95a:	b2d2      	uxtb	r2, r2
 800d95c:	701a      	strb	r2, [r3, #0]
 800d95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d960:	0e1a      	lsrs	r2, r3, #24
 800d962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d964:	3311      	adds	r3, #17
 800d966:	b2d2      	uxtb	r2, r2
 800d968:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800d96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d96c:	330b      	adds	r3, #11
 800d96e:	2200      	movs	r2, #0
 800d970:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800d972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d974:	331c      	adds	r3, #28
 800d976:	2200      	movs	r2, #0
 800d978:	701a      	strb	r2, [r3, #0]
 800d97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d97c:	331d      	adds	r3, #29
 800d97e:	2200      	movs	r2, #0
 800d980:	701a      	strb	r2, [r3, #0]
 800d982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d984:	331e      	adds	r3, #30
 800d986:	2200      	movs	r2, #0
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d98c:	331f      	adds	r3, #31
 800d98e:	2200      	movs	r2, #0
 800d990:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d996:	4618      	mov	r0, r3
 800d998:	f7fe fd66 	bl	800c468 <ld_clust>
 800d99c:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 800d99e:	2100      	movs	r1, #0
 800d9a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d9a2:	f7fe fd8e 	bl	800c4c2 <st_clust>
				dj.fs->wflag = 1;
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800d9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d03b      	beq.n	800da2c <f_open+0x224>
					dw = dj.fs->winsect;
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800d9ba:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7fe fa43 	bl	800be4c <remove_chain>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 800d9cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d12b      	bne.n	800da2c <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9d8:	3a01      	subs	r2, #1
 800d9da:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800d9de:	6a3b      	ldr	r3, [r7, #32]
 800d9e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fd ff07 	bl	800b7f6 <move_window>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d9ee:	e01d      	b.n	800da2c <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800d9f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d119      	bne.n	800da2c <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800d9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9fa:	330b      	adds	r3, #11
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	f003 0310 	and.w	r3, r3, #16
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <f_open+0x206>
					res = FR_NO_FILE;
 800da06:	2304      	movs	r3, #4
 800da08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800da0c:	e00e      	b.n	800da2c <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800da0e:	79fb      	ldrb	r3, [r7, #7]
 800da10:	f003 0302 	and.w	r3, r3, #2
 800da14:	2b00      	cmp	r3, #0
 800da16:	d009      	beq.n	800da2c <f_open+0x224>
 800da18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da1a:	330b      	adds	r3, #11
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	d002      	beq.n	800da2c <f_open+0x224>
						res = FR_DENIED;
 800da26:	2307      	movs	r3, #7
 800da28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 800da2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da30:	2b00      	cmp	r3, #0
 800da32:	d129      	bne.n	800da88 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	f003 0308 	and.w	r3, r3, #8
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <f_open+0x23e>
				mode |= FA__WRITTEN;
 800da3e:	79fb      	ldrb	r3, [r7, #7]
 800da40:	f043 0320 	orr.w	r3, r3, #32
 800da44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da54:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	f023 0301 	bic.w	r3, r3, #1
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	bf14      	ite	ne
 800da60:	2301      	movne	r3, #1
 800da62:	2300      	moveq	r3, #0
 800da64:	b2db      	uxtb	r3, r3
 800da66:	461a      	mov	r2, r3
 800da68:	f107 0320 	add.w	r3, r7, #32
 800da6c:	4611      	mov	r1, r2
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fd fd5a 	bl	800b528 <inc_lock>
 800da74:	4602      	mov	r2, r0
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d102      	bne.n	800da88 <f_open+0x280>
 800da82:	2302      	movs	r3, #2
 800da84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800da88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d133      	bne.n	800daf8 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	79fa      	ldrb	r2, [r7, #7]
 800da94:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fe fce1 	bl	800c468 <ld_clust>
 800daa6:	4602      	mov	r2, r0
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800daac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daae:	331f      	adds	r3, #31
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	061a      	lsls	r2, r3, #24
 800dab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dab6:	331e      	adds	r3, #30
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	041b      	lsls	r3, r3, #16
 800dabc:	4313      	orrs	r3, r2
 800dabe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dac0:	321d      	adds	r2, #29
 800dac2:	7812      	ldrb	r2, [r2, #0]
 800dac4:	0212      	lsls	r2, r2, #8
 800dac6:	4313      	orrs	r3, r2
 800dac8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800daca:	321c      	adds	r2, #28
 800dacc:	7812      	ldrb	r2, [r2, #0]
 800dace:	431a      	orrs	r2, r3
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800dae6:	6a3a      	ldr	r2, [r7, #32]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800daf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3758      	adds	r7, #88	; 0x58
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	200000cc 	.word	0x200000cc

0800db08 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b08c      	sub	sp, #48	; 0x30
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	2200      	movs	r2, #0
 800db1e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f7ff fdfb 	bl	800d71c <validate>
 800db26:	4603      	mov	r3, r0
 800db28:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800db2a:	7ffb      	ldrb	r3, [r7, #31]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <f_read+0x2c>
 800db30:	7ffb      	ldrb	r3, [r7, #31]
 800db32:	e13a      	b.n	800ddaa <f_read+0x2a2>
	if (fp->err)								/* Check error */
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	79db      	ldrb	r3, [r3, #7]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	79db      	ldrb	r3, [r3, #7]
 800db40:	e133      	b.n	800ddaa <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	799b      	ldrb	r3, [r3, #6]
 800db46:	f003 0301 	and.w	r3, r3, #1
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800db4e:	2307      	movs	r3, #7
 800db50:	e12b      	b.n	800ddaa <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	68da      	ldr	r2, [r3, #12]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	429a      	cmp	r2, r3
 800db64:	f240 811c 	bls.w	800dda0 <f_read+0x298>
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800db6c:	e118      	b.n	800dda0 <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	6812      	ldr	r2, [r2, #0]
 800db76:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800db7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800db7e:	fb02 f201 	mul.w	r2, r2, r1
 800db82:	1a9b      	subs	r3, r3, r2
 800db84:	2b00      	cmp	r3, #0
 800db86:	f040 80bc 	bne.w	800dd02 <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	6812      	ldr	r2, [r2, #0]
 800db92:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800db96:	fbb3 f3f2 	udiv	r3, r3, r2
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800dba4:	3b01      	subs	r3, #1
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	4013      	ands	r3, r2
 800dbaa:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d130      	bne.n	800dc14 <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d103      	bne.n	800dbc2 <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbc0:	e014      	b.n	800dbec <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d007      	beq.n	800dbda <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	4619      	mov	r1, r3
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f7fe fa32 	bl	800c03a <clmt_clust>
 800dbd6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dbd8:	e008      	b.n	800dbec <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	f7fd ff03 	bl	800b9f0 <get_fat>
 800dbea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d804      	bhi.n	800dbfc <f_read+0xf4>
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	71da      	strb	r2, [r3, #7]
 800dbf8:	2302      	movs	r3, #2
 800dbfa:	e0d6      	b.n	800ddaa <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc02:	d104      	bne.n	800dc0e <f_read+0x106>
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2201      	movs	r2, #1
 800dc08:	71da      	strb	r2, [r3, #7]
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e0cd      	b.n	800ddaa <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc12:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	695b      	ldr	r3, [r3, #20]
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	4610      	mov	r0, r2
 800dc20:	f7fd fec5 	bl	800b9ae <clust2sect>
 800dc24:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d104      	bne.n	800dc36 <f_read+0x12e>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2202      	movs	r2, #2
 800dc30:	71da      	strb	r2, [r3, #7]
 800dc32:	2302      	movs	r3, #2
 800dc34:	e0b9      	b.n	800ddaa <f_read+0x2a2>
			sect += csect;
 800dc36:	7dfb      	ldrb	r3, [r7, #23]
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dc46:	461a      	mov	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc4e:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d052      	beq.n	800dcfc <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800dc56:	7dfa      	ldrb	r2, [r7, #23]
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	4413      	add	r3, r2
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d907      	bls.n	800dc78 <f_read+0x170>
					cc = fp->fs->csize - csect;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800dc70:	461a      	mov	r2, r3
 800dc72:	7dfb      	ldrb	r3, [r7, #23]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	6a39      	ldr	r1, [r7, #32]
 800dc86:	f7fd faeb 	bl	800b260 <disk_read>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d004      	beq.n	800dc9a <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2201      	movs	r2, #1
 800dc94:	71da      	strb	r2, [r3, #7]
 800dc96:	2301      	movs	r3, #1
 800dc98:	e087      	b.n	800ddaa <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d020      	beq.n	800dce8 <f_read+0x1e0>
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d917      	bls.n	800dce8 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	1ad3      	subs	r3, r2, r3
 800dcc4:	68fa      	ldr	r2, [r7, #12]
 800dcc6:	6812      	ldr	r2, [r2, #0]
 800dcc8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dccc:	fb02 f303 	mul.w	r3, r2, r3
 800dcd0:	6a3a      	ldr	r2, [r7, #32]
 800dcd2:	18d0      	adds	r0, r2, r3
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4619      	mov	r1, r3
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dce2:	461a      	mov	r2, r3
 800dce4:	f7fd fb1a 	bl	800b31c <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	fb02 f303 	mul.w	r3, r2, r3
 800dcf8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800dcfa:	e03d      	b.n	800dd78 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	693a      	ldr	r2, [r7, #16]
 800dd00:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	6812      	ldr	r2, [r2, #0]
 800dd14:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dd18:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd1c:	fb02 f201 	mul.w	r2, r2, r1
 800dd20:	1a9b      	subs	r3, r3, r2
 800dd22:	1ac3      	subs	r3, r0, r3
 800dd24:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800dd26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d901      	bls.n	800dd32 <f_read+0x22a>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	699b      	ldr	r3, [r3, #24]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	f7fd fd5a 	bl	800b7f6 <move_window>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d004      	beq.n	800dd52 <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	71da      	strb	r2, [r3, #7]
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e02b      	b.n	800ddaa <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6819      	ldr	r1, [r3, #0]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	6812      	ldr	r2, [r2, #0]
 800dd5e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dd62:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd66:	fb02 f200 	mul.w	r2, r2, r0
 800dd6a:	1a9b      	subs	r3, r3, r2
 800dd6c:	440b      	add	r3, r1
 800dd6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd70:	4619      	mov	r1, r3
 800dd72:	6a38      	ldr	r0, [r7, #32]
 800dd74:	f7fd fad2 	bl	800b31c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dd78:	6a3a      	ldr	r2, [r7, #32]
 800dd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7c:	4413      	add	r3, r2
 800dd7e:	623b      	str	r3, [r7, #32]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	689a      	ldr	r2, [r3, #8]
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	441a      	add	r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	609a      	str	r2, [r3, #8]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	441a      	add	r2, r3
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f47f aee3 	bne.w	800db6e <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3730      	adds	r7, #48	; 0x30
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b08a      	sub	sp, #40	; 0x28
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	60f8      	str	r0, [r7, #12]
 800ddba:	60b9      	str	r1, [r7, #8]
 800ddbc:	607a      	str	r2, [r7, #4]
 800ddbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f7ff fca6 	bl	800d71c <validate>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <f_write+0x2c>
 800ddda:	7dfb      	ldrb	r3, [r7, #23]
 800dddc:	e191      	b.n	800e102 <f_write+0x350>
	if (fp->err)							/* Check error */
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	79db      	ldrb	r3, [r3, #7]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d002      	beq.n	800ddec <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	79db      	ldrb	r3, [r3, #7]
 800ddea:	e18a      	b.n	800e102 <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	799b      	ldrb	r3, [r3, #6]
 800ddf0:	f003 0302 	and.w	r3, r3, #2
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d101      	bne.n	800ddfc <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ddf8:	2307      	movs	r3, #7
 800ddfa:	e182      	b.n	800e102 <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	689a      	ldr	r2, [r3, #8]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	441a      	add	r2, r3
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	429a      	cmp	r2, r3
 800de0a:	f080 8162 	bcs.w	800e0d2 <f_write+0x320>
 800de0e:	2300      	movs	r3, #0
 800de10:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800de12:	e15e      	b.n	800e0d2 <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	6812      	ldr	r2, [r2, #0]
 800de1c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800de20:	fbb3 f1f2 	udiv	r1, r3, r2
 800de24:	fb02 f201 	mul.w	r2, r2, r1
 800de28:	1a9b      	subs	r3, r3, r2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f040 80fd 	bne.w	800e02a <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	6812      	ldr	r2, [r2, #0]
 800de38:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800de3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800de40:	b2da      	uxtb	r2, r3
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800de4a:	3b01      	subs	r3, #1
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	4013      	ands	r3, r2
 800de50:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800de52:	7dbb      	ldrb	r3, [r7, #22]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d145      	bne.n	800dee4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10d      	bne.n	800de7c <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800de66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d11c      	bne.n	800dea6 <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2100      	movs	r1, #0
 800de72:	4618      	mov	r0, r3
 800de74:	f7fe f844 	bl	800bf00 <create_chain>
 800de78:	6278      	str	r0, [r7, #36]	; 0x24
 800de7a:	e014      	b.n	800dea6 <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de80:	2b00      	cmp	r3, #0
 800de82:	d007      	beq.n	800de94 <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	4619      	mov	r1, r3
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f7fe f8d5 	bl	800c03a <clmt_clust>
 800de90:	6278      	str	r0, [r7, #36]	; 0x24
 800de92:	e008      	b.n	800dea6 <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	4619      	mov	r1, r3
 800de9e:	4610      	mov	r0, r2
 800dea0:	f7fe f82e 	bl	800bf00 <create_chain>
 800dea4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 8117 	beq.w	800e0dc <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800deae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d104      	bne.n	800debe <f_write+0x10c>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2202      	movs	r2, #2
 800deb8:	71da      	strb	r2, [r3, #7]
 800deba:	2302      	movs	r3, #2
 800debc:	e121      	b.n	800e102 <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec4:	d104      	bne.n	800ded0 <f_write+0x11e>
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2201      	movs	r2, #1
 800deca:	71da      	strb	r2, [r3, #7]
 800decc:	2301      	movs	r3, #1
 800dece:	e118      	b.n	800e102 <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ded4:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d102      	bne.n	800dee4 <f_write+0x132>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dee2:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	699b      	ldr	r3, [r3, #24]
 800def0:	429a      	cmp	r2, r3
 800def2:	d10c      	bne.n	800df0e <f_write+0x15c>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4618      	mov	r0, r3
 800defa:	f7fd fc33 	bl	800b764 <sync_window>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d004      	beq.n	800df0e <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2201      	movs	r2, #1
 800df08:	71da      	strb	r2, [r3, #7]
 800df0a:	2301      	movs	r3, #1
 800df0c:	e0f9      	b.n	800e102 <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	4619      	mov	r1, r3
 800df18:	4610      	mov	r0, r2
 800df1a:	f7fd fd48 	bl	800b9ae <clust2sect>
 800df1e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d104      	bne.n	800df30 <f_write+0x17e>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2202      	movs	r2, #2
 800df2a:	71da      	strb	r2, [r3, #7]
 800df2c:	2302      	movs	r3, #2
 800df2e:	e0e8      	b.n	800e102 <f_write+0x350>
			sect += csect;
 800df30:	7dbb      	ldrb	r3, [r7, #22]
 800df32:	693a      	ldr	r2, [r7, #16]
 800df34:	4413      	add	r3, r2
 800df36:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800df40:	461a      	mov	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	fbb3 f3f2 	udiv	r3, r3, r2
 800df48:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d051      	beq.n	800dff4 <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800df50:	7dba      	ldrb	r2, [r7, #22]
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	4413      	add	r3, r2
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	6812      	ldr	r2, [r2, #0]
 800df5a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800df5e:	4293      	cmp	r3, r2
 800df60:	d907      	bls.n	800df72 <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800df6a:	461a      	mov	r2, r3
 800df6c:	7dbb      	ldrb	r3, [r7, #22]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	69b9      	ldr	r1, [r7, #24]
 800df80:	f7fd f98e 	bl	800b2a0 <disk_write>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d004      	beq.n	800df94 <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2201      	movs	r2, #1
 800df8e:	71da      	strb	r2, [r3, #7]
 800df90:	2301      	movs	r3, #1
 800df92:	e0b6      	b.n	800e102 <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	1ad3      	subs	r3, r2, r3
 800dfa0:	69fa      	ldr	r2, [r7, #28]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d91c      	bls.n	800dfe0 <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	6812      	ldr	r2, [r2, #0]
 800dfbc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dfc0:	fb02 f303 	mul.w	r3, r2, r3
 800dfc4:	69ba      	ldr	r2, [r7, #24]
 800dfc6:	18d1      	adds	r1, r2, r3
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	f7fd f9a3 	bl	800b31c <mem_cpy>
					fp->fs->wflag = 0;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dfe8:	461a      	mov	r2, r3
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	fb02 f303 	mul.w	r3, r2, r3
 800dff0:	623b      	str	r3, [r7, #32]
				continue;
 800dff2:	e05a      	b.n	800e0aa <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	689a      	ldr	r2, [r3, #8]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d311      	bcc.n	800e024 <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4618      	mov	r0, r3
 800e006:	f7fd fbad 	bl	800b764 <sync_window>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d004      	beq.n	800e01a <f_write+0x268>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2201      	movs	r2, #1
 800e014:	71da      	strb	r2, [r3, #7]
 800e016:	2301      	movs	r3, #1
 800e018:	e073      	b.n	800e102 <f_write+0x350>
				fp->fs->winsect = sect;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	693a      	ldr	r2, [r7, #16]
 800e020:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800e032:	4618      	mov	r0, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	6812      	ldr	r2, [r2, #0]
 800e03c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800e040:	fbb3 f1f2 	udiv	r1, r3, r2
 800e044:	fb02 f201 	mul.w	r2, r2, r1
 800e048:	1a9b      	subs	r3, r3, r2
 800e04a:	1ac3      	subs	r3, r0, r3
 800e04c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800e04e:	6a3a      	ldr	r2, [r7, #32]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	429a      	cmp	r2, r3
 800e054:	d901      	bls.n	800e05a <f_write+0x2a8>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	4619      	mov	r1, r3
 800e064:	4610      	mov	r0, r2
 800e066:	f7fd fbc6 	bl	800b7f6 <move_window>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d004      	beq.n	800e07a <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2201      	movs	r2, #1
 800e074:	71da      	strb	r2, [r3, #7]
 800e076:	2301      	movs	r3, #1
 800e078:	e043      	b.n	800e102 <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6819      	ldr	r1, [r3, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	6812      	ldr	r2, [r2, #0]
 800e086:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800e08a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e08e:	fb02 f200 	mul.w	r2, r2, r0
 800e092:	1a9b      	subs	r3, r3, r2
 800e094:	440b      	add	r3, r1
 800e096:	6a3a      	ldr	r2, [r7, #32]
 800e098:	69b9      	ldr	r1, [r7, #24]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7fd f93e 	bl	800b31c <mem_cpy>
		fp->fs->wflag = 1;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800e0aa:	69ba      	ldr	r2, [r7, #24]
 800e0ac:	6a3b      	ldr	r3, [r7, #32]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	61bb      	str	r3, [r7, #24]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	689a      	ldr	r2, [r3, #8]
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	441a      	add	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	609a      	str	r2, [r3, #8]
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	6a3b      	ldr	r3, [r7, #32]
 800e0c4:	441a      	add	r2, r3
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	601a      	str	r2, [r3, #0]
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f47f ae9d 	bne.w	800de14 <f_write+0x62>
 800e0da:	e000      	b.n	800e0de <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e0dc:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	689a      	ldr	r2, [r3, #8]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d903      	bls.n	800e0f2 <f_write+0x340>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	689a      	ldr	r2, [r3, #8]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	799b      	ldrb	r3, [r3, #6]
 800e0f6:	f043 0320 	orr.w	r3, r3, #32
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3728      	adds	r7, #40	; 0x28
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b086      	sub	sp, #24
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7ff fb02 	bl	800d71c <validate>
 800e118:	4603      	mov	r3, r0
 800e11a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e11c:	7dfb      	ldrb	r3, [r7, #23]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d178      	bne.n	800e214 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	799b      	ldrb	r3, [r3, #6]
 800e126:	f003 0320 	and.w	r3, r3, #32
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d072      	beq.n	800e214 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	69db      	ldr	r3, [r3, #28]
 800e136:	4619      	mov	r1, r3
 800e138:	4610      	mov	r0, r2
 800e13a:	f7fd fb5c 	bl	800b7f6 <move_window>
 800e13e:	4603      	mov	r3, r0
 800e140:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800e142:	7dfb      	ldrb	r3, [r7, #23]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d165      	bne.n	800e214 <f_sync+0x10a>
				dir = fp->dir_ptr;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a1b      	ldr	r3, [r3, #32]
 800e14c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	330b      	adds	r3, #11
 800e152:	781a      	ldrb	r2, [r3, #0]
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	330b      	adds	r3, #11
 800e158:	f042 0220 	orr.w	r2, r2, #32
 800e15c:	b2d2      	uxtb	r2, r2
 800e15e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68da      	ldr	r2, [r3, #12]
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	331c      	adds	r3, #28
 800e168:	b2d2      	uxtb	r2, r2
 800e16a:	701a      	strb	r2, [r3, #0]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	b29b      	uxth	r3, r3
 800e172:	0a1b      	lsrs	r3, r3, #8
 800e174:	b29a      	uxth	r2, r3
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	331d      	adds	r3, #29
 800e17a:	b2d2      	uxtb	r2, r2
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	0c1a      	lsrs	r2, r3, #16
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	331e      	adds	r3, #30
 800e188:	b2d2      	uxtb	r2, r2
 800e18a:	701a      	strb	r2, [r3, #0]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	0e1a      	lsrs	r2, r3, #24
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	331f      	adds	r3, #31
 800e196:	b2d2      	uxtb	r2, r2
 800e198:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	6938      	ldr	r0, [r7, #16]
 800e1a2:	f7fe f98e 	bl	800c4c2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800e1a6:	f7fc ffb5 	bl	800b114 <get_fattime>
 800e1aa:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	3316      	adds	r3, #22
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	b2d2      	uxtb	r2, r2
 800e1b4:	701a      	strb	r2, [r3, #0]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	0a1b      	lsrs	r3, r3, #8
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	3317      	adds	r3, #23
 800e1c2:	b2d2      	uxtb	r2, r2
 800e1c4:	701a      	strb	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	0c1a      	lsrs	r2, r3, #16
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	3318      	adds	r3, #24
 800e1ce:	b2d2      	uxtb	r2, r2
 800e1d0:	701a      	strb	r2, [r3, #0]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	0e1a      	lsrs	r2, r3, #24
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	3319      	adds	r3, #25
 800e1da:	b2d2      	uxtb	r2, r2
 800e1dc:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	3312      	adds	r3, #18
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	701a      	strb	r2, [r3, #0]
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	3313      	adds	r3, #19
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	799b      	ldrb	r3, [r3, #6]
 800e1f2:	f023 0320 	bic.w	r3, r3, #32
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fd fb21 	bl	800b852 <sync_fs>
 800e210:	4603      	mov	r3, r0
 800e212:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800e214:	7dfb      	ldrb	r3, [r7, #23]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b084      	sub	sp, #16
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7ff ff6f 	bl	800e10a <f_sync>
 800e22c:	4603      	mov	r3, r0
 800e22e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e230:	7bfb      	ldrb	r3, [r7, #15]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d114      	bne.n	800e260 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff fa70 	bl	800d71c <validate>
 800e23c:	4603      	mov	r3, r0
 800e23e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e240:	7bfb      	ldrb	r3, [r7, #15]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d10c      	bne.n	800e260 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fd fa1c 	bl	800b688 <dec_lock>
 800e250:	4603      	mov	r3, r0
 800e252:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e254:	7bfb      	ldrb	r3, [r7, #15]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d102      	bne.n	800e260 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e260:	7bfb      	ldrb	r3, [r7, #15]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b090      	sub	sp, #64	; 0x40
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f7ff fa51 	bl	800d71c <validate>
 800e27a:	4603      	mov	r3, r0
 800e27c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800e280:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <f_lseek+0x24>
 800e288:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e28c:	e1c4      	b.n	800e618 <f_lseek+0x3ae>
	if (fp->err)						/* Check error */
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	79db      	ldrb	r3, [r3, #7]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <f_lseek+0x32>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	79db      	ldrb	r3, [r3, #7]
 800e29a:	e1bd      	b.n	800e618 <f_lseek+0x3ae>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 80b4 	beq.w	800e40e <f_lseek+0x1a4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ac:	d15d      	bne.n	800e36a <f_lseek+0x100>
			tbl = fp->cltbl;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	1d1a      	adds	r2, r3, #4
 800e2b8:	627a      	str	r2, [r7, #36]	; 0x24
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	2302      	movs	r3, #2
 800e2c0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d03d      	beq.n	800e34a <f_lseek+0xe0>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	613b      	str	r3, [r7, #16]
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	3302      	adds	r3, #2
 800e2da:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	60fb      	str	r3, [r7, #12]
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fd fb7f 	bl	800b9f0 <get_fat>
 800e2f2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d804      	bhi.n	800e304 <f_lseek+0x9a>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2202      	movs	r2, #2
 800e2fe:	71da      	strb	r2, [r3, #7]
 800e300:	2302      	movs	r3, #2
 800e302:	e189      	b.n	800e618 <f_lseek+0x3ae>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30a:	d104      	bne.n	800e316 <f_lseek+0xac>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	71da      	strb	r2, [r3, #7]
 800e312:	2301      	movs	r3, #1
 800e314:	e180      	b.n	800e618 <f_lseek+0x3ae>
					} while (cl == pcl + 1);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	3301      	adds	r3, #1
 800e31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d0dd      	beq.n	800e2dc <f_lseek+0x72>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	429a      	cmp	r2, r3
 800e326:	d809      	bhi.n	800e33c <f_lseek+0xd2>
						*tbl++ = ncl; *tbl++ = tcl;
 800e328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32a:	1d1a      	adds	r2, r3, #4
 800e32c:	627a      	str	r2, [r7, #36]	; 0x24
 800e32e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e334:	1d1a      	adds	r2, r3, #4
 800e336:	627a      	str	r2, [r7, #36]	; 0x24
 800e338:	693a      	ldr	r2, [r7, #16]
 800e33a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800e344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e346:	429a      	cmp	r2, r3
 800e348:	d3c1      	bcc.n	800e2ce <f_lseek+0x64>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e34e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e350:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800e352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	429a      	cmp	r2, r3
 800e358:	d803      	bhi.n	800e362 <f_lseek+0xf8>
				*tbl = 0;		/* Terminate table */
 800e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35c:	2200      	movs	r2, #0
 800e35e:	601a      	str	r2, [r3, #0]
 800e360:	e158      	b.n	800e614 <f_lseek+0x3aa>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e362:	2311      	movs	r3, #17
 800e364:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e368:	e154      	b.n	800e614 <f_lseek+0x3aa>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	683a      	ldr	r2, [r7, #0]
 800e370:	429a      	cmp	r2, r3
 800e372:	d902      	bls.n	800e37a <f_lseek+0x110>
				ofs = fp->fsize;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	683a      	ldr	r2, [r7, #0]
 800e37e:	609a      	str	r2, [r3, #8]
			if (ofs) {
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	f000 8146 	beq.w	800e614 <f_lseek+0x3aa>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	3b01      	subs	r3, #1
 800e38c:	4619      	mov	r1, r3
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f7fd fe53 	bl	800c03a <clmt_clust>
 800e394:	4602      	mov	r2, r0
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	695b      	ldr	r3, [r3, #20]
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	f7fd fb02 	bl	800b9ae <clust2sect>
 800e3aa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d104      	bne.n	800e3bc <f_lseek+0x152>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2202      	movs	r2, #2
 800e3b6:	71da      	strb	r2, [r3, #7]
 800e3b8:	2302      	movs	r3, #2
 800e3ba:	e12d      	b.n	800e618 <f_lseek+0x3ae>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	6812      	ldr	r2, [r2, #0]
 800e3c4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800e3c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	6812      	ldr	r2, [r2, #0]
 800e3d0:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800e3d4:	3a01      	subs	r2, #1
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	69ba      	ldr	r2, [r7, #24]
 800e3da:	4413      	add	r3, r2
 800e3dc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	6812      	ldr	r2, [r2, #0]
 800e3e6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800e3ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3ee:	fb02 f201 	mul.w	r2, r2, r1
 800e3f2:	1a9b      	subs	r3, r3, r2
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 810d 	beq.w	800e614 <f_lseek+0x3aa>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	699b      	ldr	r3, [r3, #24]
 800e3fe:	69ba      	ldr	r2, [r7, #24]
 800e400:	429a      	cmp	r2, r3
 800e402:	f000 8107 	beq.w	800e614 <f_lseek+0x3aa>
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
						ABORT(fp->fs, FR_DISK_ERR);
#endif
					fp->dsect = dsc;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	69ba      	ldr	r2, [r7, #24]
 800e40a:	619a      	str	r2, [r3, #24]
 800e40c:	e102      	b.n	800e614 <f_lseek+0x3aa>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	429a      	cmp	r2, r3
 800e416:	d908      	bls.n	800e42a <f_lseek+0x1c0>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	799b      	ldrb	r3, [r3, #6]
 800e41c:	f003 0302 	and.w	r3, r3, #2
 800e420:	2b00      	cmp	r3, #0
 800e422:	d102      	bne.n	800e42a <f_lseek+0x1c0>
#endif
			) ofs = fp->fsize;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e430:	2300      	movs	r3, #0
 800e432:	637b      	str	r3, [r7, #52]	; 0x34
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e438:	609a      	str	r2, [r3, #8]
		if (ofs) {
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f000 80c3 	beq.w	800e5c8 <f_lseek+0x35e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800e44a:	461a      	mov	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800e454:	fb03 f302 	mul.w	r3, r3, r2
 800e458:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e45a:	6a3b      	ldr	r3, [r7, #32]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d01b      	beq.n	800e498 <f_lseek+0x22e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	1e5a      	subs	r2, r3, #1
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	fbb2 f2f3 	udiv	r2, r2, r3
 800e46a:	6a3b      	ldr	r3, [r7, #32]
 800e46c:	1e59      	subs	r1, r3, #1
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e474:	429a      	cmp	r2, r3
 800e476:	d30f      	bcc.n	800e498 <f_lseek+0x22e>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800e478:	6a3b      	ldr	r3, [r7, #32]
 800e47a:	1e5a      	subs	r2, r3, #1
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	425b      	negs	r3, r3
 800e480:	401a      	ands	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	683a      	ldr	r2, [r7, #0]
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	63bb      	str	r3, [r7, #56]	; 0x38
 800e496:	e023      	b.n	800e4e0 <f_lseek+0x276>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	691b      	ldr	r3, [r3, #16]
 800e49c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d11a      	bne.n	800e4da <f_lseek+0x270>
					clst = create_chain(fp->fs, 0);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fd fd28 	bl	800bf00 <create_chain>
 800e4b0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d104      	bne.n	800e4c2 <f_lseek+0x258>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	71da      	strb	r2, [r3, #7]
 800e4be:	2302      	movs	r3, #2
 800e4c0:	e0aa      	b.n	800e618 <f_lseek+0x3ae>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c8:	d104      	bne.n	800e4d4 <f_lseek+0x26a>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	71da      	strb	r2, [r3, #7]
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e0a1      	b.n	800e618 <f_lseek+0x3ae>
					fp->sclust = clst;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4d8:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4de:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 800e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d070      	beq.n	800e5c8 <f_lseek+0x35e>
				while (ofs > bcs) {						/* Cluster following loop */
 800e4e6:	e03e      	b.n	800e566 <f_lseek+0x2fc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	799b      	ldrb	r3, [r3, #6]
 800e4ec:	f003 0302 	and.w	r3, r3, #2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00c      	beq.n	800e50e <f_lseek+0x2a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fd fd00 	bl	800bf00 <create_chain>
 800e500:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	2b00      	cmp	r3, #0
 800e506:	d109      	bne.n	800e51c <f_lseek+0x2b2>
							ofs = bcs; break;
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	603b      	str	r3, [r7, #0]
 800e50c:	e02f      	b.n	800e56e <f_lseek+0x304>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e514:	4618      	mov	r0, r3
 800e516:	f7fd fa6b 	bl	800b9f0 <get_fat>
 800e51a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e522:	d104      	bne.n	800e52e <f_lseek+0x2c4>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	71da      	strb	r2, [r3, #7]
 800e52a:	2301      	movs	r3, #1
 800e52c:	e074      	b.n	800e618 <f_lseek+0x3ae>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800e52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e530:	2b01      	cmp	r3, #1
 800e532:	d906      	bls.n	800e542 <f_lseek+0x2d8>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800e53c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e53e:	429a      	cmp	r2, r3
 800e540:	d304      	bcc.n	800e54c <f_lseek+0x2e2>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2202      	movs	r2, #2
 800e546:	71da      	strb	r2, [r3, #7]
 800e548:	2302      	movs	r3, #2
 800e54a:	e065      	b.n	800e618 <f_lseek+0x3ae>
					fp->clust = clst;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e550:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	689a      	ldr	r2, [r3, #8]
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	441a      	add	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d8bc      	bhi.n	800e4e8 <f_lseek+0x27e>
				}
				fp->fptr += ofs;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	441a      	add	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800e582:	461a      	mov	r2, r3
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	fbb3 f1f2 	udiv	r1, r3, r2
 800e58a:	fb02 f201 	mul.w	r2, r2, r1
 800e58e:	1a9b      	subs	r3, r3, r2
 800e590:	2b00      	cmp	r3, #0
 800e592:	d019      	beq.n	800e5c8 <f_lseek+0x35e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fd fa07 	bl	800b9ae <clust2sect>
 800e5a0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800e5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d104      	bne.n	800e5b2 <f_lseek+0x348>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2202      	movs	r2, #2
 800e5ac:	71da      	strb	r2, [r3, #7]
 800e5ae:	2302      	movs	r3, #2
 800e5b0:	e032      	b.n	800e618 <f_lseek+0x3ae>
					nsect += ofs / SS(fp->fs);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5c4:	4413      	add	r3, r2
 800e5c6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	6812      	ldr	r2, [r2, #0]
 800e5d0:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800e5d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5d8:	fb02 f201 	mul.w	r2, r2, r1
 800e5dc:	1a9b      	subs	r3, r3, r2
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d007      	beq.n	800e5f2 <f_lseek+0x388>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	699b      	ldr	r3, [r3, #24]
 800e5e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d002      	beq.n	800e5f2 <f_lseek+0x388>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5f0:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	689a      	ldr	r2, [r3, #8]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d90a      	bls.n	800e614 <f_lseek+0x3aa>
			fp->fsize = fp->fptr;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	689a      	ldr	r2, [r3, #8]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	799b      	ldrb	r3, [r3, #6]
 800e60a:	f043 0320 	orr.w	r3, r3, #32
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800e614:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3740      	adds	r7, #64	; 0x40
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e620:	b480      	push	{r7}
 800e622:	b087      	sub	sp, #28
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	4613      	mov	r3, r2
 800e62c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e62e:	2301      	movs	r3, #1
 800e630:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e632:	2300      	movs	r3, #0
 800e634:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800e636:	4b1e      	ldr	r3, [pc, #120]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e638:	7a5b      	ldrb	r3, [r3, #9]
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d831      	bhi.n	800e6a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e640:	4b1b      	ldr	r3, [pc, #108]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e642:	7a5b      	ldrb	r3, [r3, #9]
 800e644:	b2db      	uxtb	r3, r3
 800e646:	461a      	mov	r2, r3
 800e648:	4b19      	ldr	r3, [pc, #100]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e64a:	2100      	movs	r1, #0
 800e64c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800e64e:	4b18      	ldr	r3, [pc, #96]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e650:	7a5b      	ldrb	r3, [r3, #9]
 800e652:	b2db      	uxtb	r3, r3
 800e654:	4a16      	ldr	r2, [pc, #88]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800e65e:	4b14      	ldr	r3, [pc, #80]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e660:	7a5b      	ldrb	r3, [r3, #9]
 800e662:	b2db      	uxtb	r3, r3
 800e664:	461a      	mov	r2, r3
 800e666:	4b12      	ldr	r3, [pc, #72]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e668:	4413      	add	r3, r2
 800e66a:	79fa      	ldrb	r2, [r7, #7]
 800e66c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e66e:	4b10      	ldr	r3, [pc, #64]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e670:	7a5b      	ldrb	r3, [r3, #9]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	1c5a      	adds	r2, r3, #1
 800e676:	b2d1      	uxtb	r1, r2
 800e678:	4a0d      	ldr	r2, [pc, #52]	; (800e6b0 <FATFS_LinkDriverEx+0x90>)
 800e67a:	7251      	strb	r1, [r2, #9]
 800e67c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e67e:	7dbb      	ldrb	r3, [r7, #22]
 800e680:	3330      	adds	r3, #48	; 0x30
 800e682:	b2da      	uxtb	r2, r3
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	3301      	adds	r3, #1
 800e68c:	223a      	movs	r2, #58	; 0x3a
 800e68e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	3302      	adds	r3, #2
 800e694:	222f      	movs	r2, #47	; 0x2f
 800e696:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	3303      	adds	r3, #3
 800e69c:	2200      	movs	r2, #0
 800e69e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800e6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	371c      	adds	r7, #28
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bc80      	pop	{r7}
 800e6ae:	4770      	bx	lr
 800e6b0:	200002cc 	.word	0x200002cc

0800e6b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e6be:	2200      	movs	r2, #0
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7ff ffac 	bl	800e620 <FATFS_LinkDriverEx>
 800e6c8:	4603      	mov	r3, r0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
	...

0800e6d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	4603      	mov	r3, r0
 800e6dc:	6039      	str	r1, [r7, #0]
 800e6de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e6e0:	88fb      	ldrh	r3, [r7, #6]
 800e6e2:	2b7f      	cmp	r3, #127	; 0x7f
 800e6e4:	d802      	bhi.n	800e6ec <ff_convert+0x18>
		c = chr;
 800e6e6:	88fb      	ldrh	r3, [r7, #6]
 800e6e8:	81fb      	strh	r3, [r7, #14]
 800e6ea:	e025      	b.n	800e738 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00b      	beq.n	800e70a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e6f2:	88fb      	ldrh	r3, [r7, #6]
 800e6f4:	2bff      	cmp	r3, #255	; 0xff
 800e6f6:	d805      	bhi.n	800e704 <ff_convert+0x30>
 800e6f8:	88fb      	ldrh	r3, [r7, #6]
 800e6fa:	3b80      	subs	r3, #128	; 0x80
 800e6fc:	4a11      	ldr	r2, [pc, #68]	; (800e744 <ff_convert+0x70>)
 800e6fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e702:	e000      	b.n	800e706 <ff_convert+0x32>
 800e704:	2300      	movs	r3, #0
 800e706:	81fb      	strh	r3, [r7, #14]
 800e708:	e016      	b.n	800e738 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800e70a:	2300      	movs	r3, #0
 800e70c:	81fb      	strh	r3, [r7, #14]
 800e70e:	e009      	b.n	800e724 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e710:	89fb      	ldrh	r3, [r7, #14]
 800e712:	4a0c      	ldr	r2, [pc, #48]	; (800e744 <ff_convert+0x70>)
 800e714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e718:	88fa      	ldrh	r2, [r7, #6]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d006      	beq.n	800e72c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e71e:	89fb      	ldrh	r3, [r7, #14]
 800e720:	3301      	adds	r3, #1
 800e722:	81fb      	strh	r3, [r7, #14]
 800e724:	89fb      	ldrh	r3, [r7, #14]
 800e726:	2b7f      	cmp	r3, #127	; 0x7f
 800e728:	d9f2      	bls.n	800e710 <ff_convert+0x3c>
 800e72a:	e000      	b.n	800e72e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e72c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e72e:	89fb      	ldrh	r3, [r7, #14]
 800e730:	3380      	adds	r3, #128	; 0x80
 800e732:	b29b      	uxth	r3, r3
 800e734:	b2db      	uxtb	r3, r3
 800e736:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e738:	89fb      	ldrh	r3, [r7, #14]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3714      	adds	r7, #20
 800e73e:	46bd      	mov	sp, r7
 800e740:	bc80      	pop	{r7}
 800e742:	4770      	bx	lr
 800e744:	0800f2c4 	.word	0x0800f2c4

0800e748 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	4603      	mov	r3, r0
 800e750:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800e752:	2300      	movs	r3, #0
 800e754:	60fb      	str	r3, [r7, #12]
 800e756:	e002      	b.n	800e75e <ff_wtoupper+0x16>
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	3301      	adds	r3, #1
 800e75c:	60fb      	str	r3, [r7, #12]
 800e75e:	4a0f      	ldr	r2, [pc, #60]	; (800e79c <ff_wtoupper+0x54>)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d006      	beq.n	800e778 <ff_wtoupper+0x30>
 800e76a:	4a0c      	ldr	r2, [pc, #48]	; (800e79c <ff_wtoupper+0x54>)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e772:	88fa      	ldrh	r2, [r7, #6]
 800e774:	429a      	cmp	r2, r3
 800e776:	d1ef      	bne.n	800e758 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800e778:	4a08      	ldr	r2, [pc, #32]	; (800e79c <ff_wtoupper+0x54>)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d004      	beq.n	800e78e <ff_wtoupper+0x46>
 800e784:	4a06      	ldr	r2, [pc, #24]	; (800e7a0 <ff_wtoupper+0x58>)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e78c:	e000      	b.n	800e790 <ff_wtoupper+0x48>
 800e78e:	88fb      	ldrh	r3, [r7, #6]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3714      	adds	r7, #20
 800e794:	46bd      	mov	sp, r7
 800e796:	bc80      	pop	{r7}
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	0800f3c4 	.word	0x0800f3c4
 800e7a0:	0800f5a4 	.word	0x0800f5a4

0800e7a4 <__errno>:
 800e7a4:	4b01      	ldr	r3, [pc, #4]	; (800e7ac <__errno+0x8>)
 800e7a6:	6818      	ldr	r0, [r3, #0]
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	20000024 	.word	0x20000024

0800e7b0 <__libc_init_array>:
 800e7b0:	b570      	push	{r4, r5, r6, lr}
 800e7b2:	2600      	movs	r6, #0
 800e7b4:	4d0c      	ldr	r5, [pc, #48]	; (800e7e8 <__libc_init_array+0x38>)
 800e7b6:	4c0d      	ldr	r4, [pc, #52]	; (800e7ec <__libc_init_array+0x3c>)
 800e7b8:	1b64      	subs	r4, r4, r5
 800e7ba:	10a4      	asrs	r4, r4, #2
 800e7bc:	42a6      	cmp	r6, r4
 800e7be:	d109      	bne.n	800e7d4 <__libc_init_array+0x24>
 800e7c0:	f000 fc5c 	bl	800f07c <_init>
 800e7c4:	2600      	movs	r6, #0
 800e7c6:	4d0a      	ldr	r5, [pc, #40]	; (800e7f0 <__libc_init_array+0x40>)
 800e7c8:	4c0a      	ldr	r4, [pc, #40]	; (800e7f4 <__libc_init_array+0x44>)
 800e7ca:	1b64      	subs	r4, r4, r5
 800e7cc:	10a4      	asrs	r4, r4, #2
 800e7ce:	42a6      	cmp	r6, r4
 800e7d0:	d105      	bne.n	800e7de <__libc_init_array+0x2e>
 800e7d2:	bd70      	pop	{r4, r5, r6, pc}
 800e7d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7d8:	4798      	blx	r3
 800e7da:	3601      	adds	r6, #1
 800e7dc:	e7ee      	b.n	800e7bc <__libc_init_array+0xc>
 800e7de:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7e2:	4798      	blx	r3
 800e7e4:	3601      	adds	r6, #1
 800e7e6:	e7f2      	b.n	800e7ce <__libc_init_array+0x1e>
 800e7e8:	0800f7b8 	.word	0x0800f7b8
 800e7ec:	0800f7b8 	.word	0x0800f7b8
 800e7f0:	0800f7b8 	.word	0x0800f7b8
 800e7f4:	0800f7bc 	.word	0x0800f7bc

0800e7f8 <memset>:
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	4402      	add	r2, r0
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d100      	bne.n	800e802 <memset+0xa>
 800e800:	4770      	bx	lr
 800e802:	f803 1b01 	strb.w	r1, [r3], #1
 800e806:	e7f9      	b.n	800e7fc <memset+0x4>

0800e808 <siprintf>:
 800e808:	b40e      	push	{r1, r2, r3}
 800e80a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e80e:	b500      	push	{lr}
 800e810:	b09c      	sub	sp, #112	; 0x70
 800e812:	ab1d      	add	r3, sp, #116	; 0x74
 800e814:	9002      	str	r0, [sp, #8]
 800e816:	9006      	str	r0, [sp, #24]
 800e818:	9107      	str	r1, [sp, #28]
 800e81a:	9104      	str	r1, [sp, #16]
 800e81c:	4808      	ldr	r0, [pc, #32]	; (800e840 <siprintf+0x38>)
 800e81e:	4909      	ldr	r1, [pc, #36]	; (800e844 <siprintf+0x3c>)
 800e820:	f853 2b04 	ldr.w	r2, [r3], #4
 800e824:	9105      	str	r1, [sp, #20]
 800e826:	6800      	ldr	r0, [r0, #0]
 800e828:	a902      	add	r1, sp, #8
 800e82a:	9301      	str	r3, [sp, #4]
 800e82c:	f000 f868 	bl	800e900 <_svfiprintf_r>
 800e830:	2200      	movs	r2, #0
 800e832:	9b02      	ldr	r3, [sp, #8]
 800e834:	701a      	strb	r2, [r3, #0]
 800e836:	b01c      	add	sp, #112	; 0x70
 800e838:	f85d eb04 	ldr.w	lr, [sp], #4
 800e83c:	b003      	add	sp, #12
 800e83e:	4770      	bx	lr
 800e840:	20000024 	.word	0x20000024
 800e844:	ffff0208 	.word	0xffff0208

0800e848 <__ssputs_r>:
 800e848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e84c:	688e      	ldr	r6, [r1, #8]
 800e84e:	4682      	mov	sl, r0
 800e850:	429e      	cmp	r6, r3
 800e852:	460c      	mov	r4, r1
 800e854:	4690      	mov	r8, r2
 800e856:	461f      	mov	r7, r3
 800e858:	d838      	bhi.n	800e8cc <__ssputs_r+0x84>
 800e85a:	898a      	ldrh	r2, [r1, #12]
 800e85c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e860:	d032      	beq.n	800e8c8 <__ssputs_r+0x80>
 800e862:	6825      	ldr	r5, [r4, #0]
 800e864:	6909      	ldr	r1, [r1, #16]
 800e866:	3301      	adds	r3, #1
 800e868:	eba5 0901 	sub.w	r9, r5, r1
 800e86c:	6965      	ldr	r5, [r4, #20]
 800e86e:	444b      	add	r3, r9
 800e870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e878:	106d      	asrs	r5, r5, #1
 800e87a:	429d      	cmp	r5, r3
 800e87c:	bf38      	it	cc
 800e87e:	461d      	movcc	r5, r3
 800e880:	0553      	lsls	r3, r2, #21
 800e882:	d531      	bpl.n	800e8e8 <__ssputs_r+0xa0>
 800e884:	4629      	mov	r1, r5
 800e886:	f000 fb53 	bl	800ef30 <_malloc_r>
 800e88a:	4606      	mov	r6, r0
 800e88c:	b950      	cbnz	r0, 800e8a4 <__ssputs_r+0x5c>
 800e88e:	230c      	movs	r3, #12
 800e890:	f04f 30ff 	mov.w	r0, #4294967295
 800e894:	f8ca 3000 	str.w	r3, [sl]
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e89e:	81a3      	strh	r3, [r4, #12]
 800e8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a4:	464a      	mov	r2, r9
 800e8a6:	6921      	ldr	r1, [r4, #16]
 800e8a8:	f000 face 	bl	800ee48 <memcpy>
 800e8ac:	89a3      	ldrh	r3, [r4, #12]
 800e8ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8b6:	81a3      	strh	r3, [r4, #12]
 800e8b8:	6126      	str	r6, [r4, #16]
 800e8ba:	444e      	add	r6, r9
 800e8bc:	6026      	str	r6, [r4, #0]
 800e8be:	463e      	mov	r6, r7
 800e8c0:	6165      	str	r5, [r4, #20]
 800e8c2:	eba5 0509 	sub.w	r5, r5, r9
 800e8c6:	60a5      	str	r5, [r4, #8]
 800e8c8:	42be      	cmp	r6, r7
 800e8ca:	d900      	bls.n	800e8ce <__ssputs_r+0x86>
 800e8cc:	463e      	mov	r6, r7
 800e8ce:	4632      	mov	r2, r6
 800e8d0:	4641      	mov	r1, r8
 800e8d2:	6820      	ldr	r0, [r4, #0]
 800e8d4:	f000 fac6 	bl	800ee64 <memmove>
 800e8d8:	68a3      	ldr	r3, [r4, #8]
 800e8da:	6822      	ldr	r2, [r4, #0]
 800e8dc:	1b9b      	subs	r3, r3, r6
 800e8de:	4432      	add	r2, r6
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	60a3      	str	r3, [r4, #8]
 800e8e4:	6022      	str	r2, [r4, #0]
 800e8e6:	e7db      	b.n	800e8a0 <__ssputs_r+0x58>
 800e8e8:	462a      	mov	r2, r5
 800e8ea:	f000 fb7b 	bl	800efe4 <_realloc_r>
 800e8ee:	4606      	mov	r6, r0
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d1e1      	bne.n	800e8b8 <__ssputs_r+0x70>
 800e8f4:	4650      	mov	r0, sl
 800e8f6:	6921      	ldr	r1, [r4, #16]
 800e8f8:	f000 face 	bl	800ee98 <_free_r>
 800e8fc:	e7c7      	b.n	800e88e <__ssputs_r+0x46>
	...

0800e900 <_svfiprintf_r>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	4698      	mov	r8, r3
 800e906:	898b      	ldrh	r3, [r1, #12]
 800e908:	4607      	mov	r7, r0
 800e90a:	061b      	lsls	r3, r3, #24
 800e90c:	460d      	mov	r5, r1
 800e90e:	4614      	mov	r4, r2
 800e910:	b09d      	sub	sp, #116	; 0x74
 800e912:	d50e      	bpl.n	800e932 <_svfiprintf_r+0x32>
 800e914:	690b      	ldr	r3, [r1, #16]
 800e916:	b963      	cbnz	r3, 800e932 <_svfiprintf_r+0x32>
 800e918:	2140      	movs	r1, #64	; 0x40
 800e91a:	f000 fb09 	bl	800ef30 <_malloc_r>
 800e91e:	6028      	str	r0, [r5, #0]
 800e920:	6128      	str	r0, [r5, #16]
 800e922:	b920      	cbnz	r0, 800e92e <_svfiprintf_r+0x2e>
 800e924:	230c      	movs	r3, #12
 800e926:	603b      	str	r3, [r7, #0]
 800e928:	f04f 30ff 	mov.w	r0, #4294967295
 800e92c:	e0d1      	b.n	800ead2 <_svfiprintf_r+0x1d2>
 800e92e:	2340      	movs	r3, #64	; 0x40
 800e930:	616b      	str	r3, [r5, #20]
 800e932:	2300      	movs	r3, #0
 800e934:	9309      	str	r3, [sp, #36]	; 0x24
 800e936:	2320      	movs	r3, #32
 800e938:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e93c:	2330      	movs	r3, #48	; 0x30
 800e93e:	f04f 0901 	mov.w	r9, #1
 800e942:	f8cd 800c 	str.w	r8, [sp, #12]
 800e946:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eaec <_svfiprintf_r+0x1ec>
 800e94a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e94e:	4623      	mov	r3, r4
 800e950:	469a      	mov	sl, r3
 800e952:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e956:	b10a      	cbz	r2, 800e95c <_svfiprintf_r+0x5c>
 800e958:	2a25      	cmp	r2, #37	; 0x25
 800e95a:	d1f9      	bne.n	800e950 <_svfiprintf_r+0x50>
 800e95c:	ebba 0b04 	subs.w	fp, sl, r4
 800e960:	d00b      	beq.n	800e97a <_svfiprintf_r+0x7a>
 800e962:	465b      	mov	r3, fp
 800e964:	4622      	mov	r2, r4
 800e966:	4629      	mov	r1, r5
 800e968:	4638      	mov	r0, r7
 800e96a:	f7ff ff6d 	bl	800e848 <__ssputs_r>
 800e96e:	3001      	adds	r0, #1
 800e970:	f000 80aa 	beq.w	800eac8 <_svfiprintf_r+0x1c8>
 800e974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e976:	445a      	add	r2, fp
 800e978:	9209      	str	r2, [sp, #36]	; 0x24
 800e97a:	f89a 3000 	ldrb.w	r3, [sl]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 80a2 	beq.w	800eac8 <_svfiprintf_r+0x1c8>
 800e984:	2300      	movs	r3, #0
 800e986:	f04f 32ff 	mov.w	r2, #4294967295
 800e98a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e98e:	f10a 0a01 	add.w	sl, sl, #1
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	9307      	str	r3, [sp, #28]
 800e996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e99a:	931a      	str	r3, [sp, #104]	; 0x68
 800e99c:	4654      	mov	r4, sl
 800e99e:	2205      	movs	r2, #5
 800e9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a4:	4851      	ldr	r0, [pc, #324]	; (800eaec <_svfiprintf_r+0x1ec>)
 800e9a6:	f000 fa41 	bl	800ee2c <memchr>
 800e9aa:	9a04      	ldr	r2, [sp, #16]
 800e9ac:	b9d8      	cbnz	r0, 800e9e6 <_svfiprintf_r+0xe6>
 800e9ae:	06d0      	lsls	r0, r2, #27
 800e9b0:	bf44      	itt	mi
 800e9b2:	2320      	movmi	r3, #32
 800e9b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b8:	0711      	lsls	r1, r2, #28
 800e9ba:	bf44      	itt	mi
 800e9bc:	232b      	movmi	r3, #43	; 0x2b
 800e9be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c6:	2b2a      	cmp	r3, #42	; 0x2a
 800e9c8:	d015      	beq.n	800e9f6 <_svfiprintf_r+0xf6>
 800e9ca:	4654      	mov	r4, sl
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	f04f 0c0a 	mov.w	ip, #10
 800e9d2:	9a07      	ldr	r2, [sp, #28]
 800e9d4:	4621      	mov	r1, r4
 800e9d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9da:	3b30      	subs	r3, #48	; 0x30
 800e9dc:	2b09      	cmp	r3, #9
 800e9de:	d94e      	bls.n	800ea7e <_svfiprintf_r+0x17e>
 800e9e0:	b1b0      	cbz	r0, 800ea10 <_svfiprintf_r+0x110>
 800e9e2:	9207      	str	r2, [sp, #28]
 800e9e4:	e014      	b.n	800ea10 <_svfiprintf_r+0x110>
 800e9e6:	eba0 0308 	sub.w	r3, r0, r8
 800e9ea:	fa09 f303 	lsl.w	r3, r9, r3
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	46a2      	mov	sl, r4
 800e9f2:	9304      	str	r3, [sp, #16]
 800e9f4:	e7d2      	b.n	800e99c <_svfiprintf_r+0x9c>
 800e9f6:	9b03      	ldr	r3, [sp, #12]
 800e9f8:	1d19      	adds	r1, r3, #4
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	9103      	str	r1, [sp, #12]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	bfbb      	ittet	lt
 800ea02:	425b      	neglt	r3, r3
 800ea04:	f042 0202 	orrlt.w	r2, r2, #2
 800ea08:	9307      	strge	r3, [sp, #28]
 800ea0a:	9307      	strlt	r3, [sp, #28]
 800ea0c:	bfb8      	it	lt
 800ea0e:	9204      	strlt	r2, [sp, #16]
 800ea10:	7823      	ldrb	r3, [r4, #0]
 800ea12:	2b2e      	cmp	r3, #46	; 0x2e
 800ea14:	d10c      	bne.n	800ea30 <_svfiprintf_r+0x130>
 800ea16:	7863      	ldrb	r3, [r4, #1]
 800ea18:	2b2a      	cmp	r3, #42	; 0x2a
 800ea1a:	d135      	bne.n	800ea88 <_svfiprintf_r+0x188>
 800ea1c:	9b03      	ldr	r3, [sp, #12]
 800ea1e:	3402      	adds	r4, #2
 800ea20:	1d1a      	adds	r2, r3, #4
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	9203      	str	r2, [sp, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	bfb8      	it	lt
 800ea2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea2e:	9305      	str	r3, [sp, #20]
 800ea30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eafc <_svfiprintf_r+0x1fc>
 800ea34:	2203      	movs	r2, #3
 800ea36:	4650      	mov	r0, sl
 800ea38:	7821      	ldrb	r1, [r4, #0]
 800ea3a:	f000 f9f7 	bl	800ee2c <memchr>
 800ea3e:	b140      	cbz	r0, 800ea52 <_svfiprintf_r+0x152>
 800ea40:	2340      	movs	r3, #64	; 0x40
 800ea42:	eba0 000a 	sub.w	r0, r0, sl
 800ea46:	fa03 f000 	lsl.w	r0, r3, r0
 800ea4a:	9b04      	ldr	r3, [sp, #16]
 800ea4c:	3401      	adds	r4, #1
 800ea4e:	4303      	orrs	r3, r0
 800ea50:	9304      	str	r3, [sp, #16]
 800ea52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea56:	2206      	movs	r2, #6
 800ea58:	4825      	ldr	r0, [pc, #148]	; (800eaf0 <_svfiprintf_r+0x1f0>)
 800ea5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea5e:	f000 f9e5 	bl	800ee2c <memchr>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d038      	beq.n	800ead8 <_svfiprintf_r+0x1d8>
 800ea66:	4b23      	ldr	r3, [pc, #140]	; (800eaf4 <_svfiprintf_r+0x1f4>)
 800ea68:	bb1b      	cbnz	r3, 800eab2 <_svfiprintf_r+0x1b2>
 800ea6a:	9b03      	ldr	r3, [sp, #12]
 800ea6c:	3307      	adds	r3, #7
 800ea6e:	f023 0307 	bic.w	r3, r3, #7
 800ea72:	3308      	adds	r3, #8
 800ea74:	9303      	str	r3, [sp, #12]
 800ea76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea78:	4433      	add	r3, r6
 800ea7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea7c:	e767      	b.n	800e94e <_svfiprintf_r+0x4e>
 800ea7e:	460c      	mov	r4, r1
 800ea80:	2001      	movs	r0, #1
 800ea82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea86:	e7a5      	b.n	800e9d4 <_svfiprintf_r+0xd4>
 800ea88:	2300      	movs	r3, #0
 800ea8a:	f04f 0c0a 	mov.w	ip, #10
 800ea8e:	4619      	mov	r1, r3
 800ea90:	3401      	adds	r4, #1
 800ea92:	9305      	str	r3, [sp, #20]
 800ea94:	4620      	mov	r0, r4
 800ea96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea9a:	3a30      	subs	r2, #48	; 0x30
 800ea9c:	2a09      	cmp	r2, #9
 800ea9e:	d903      	bls.n	800eaa8 <_svfiprintf_r+0x1a8>
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d0c5      	beq.n	800ea30 <_svfiprintf_r+0x130>
 800eaa4:	9105      	str	r1, [sp, #20]
 800eaa6:	e7c3      	b.n	800ea30 <_svfiprintf_r+0x130>
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	2301      	movs	r3, #1
 800eaac:	fb0c 2101 	mla	r1, ip, r1, r2
 800eab0:	e7f0      	b.n	800ea94 <_svfiprintf_r+0x194>
 800eab2:	ab03      	add	r3, sp, #12
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	462a      	mov	r2, r5
 800eab8:	4638      	mov	r0, r7
 800eaba:	4b0f      	ldr	r3, [pc, #60]	; (800eaf8 <_svfiprintf_r+0x1f8>)
 800eabc:	a904      	add	r1, sp, #16
 800eabe:	f3af 8000 	nop.w
 800eac2:	1c42      	adds	r2, r0, #1
 800eac4:	4606      	mov	r6, r0
 800eac6:	d1d6      	bne.n	800ea76 <_svfiprintf_r+0x176>
 800eac8:	89ab      	ldrh	r3, [r5, #12]
 800eaca:	065b      	lsls	r3, r3, #25
 800eacc:	f53f af2c 	bmi.w	800e928 <_svfiprintf_r+0x28>
 800ead0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ead2:	b01d      	add	sp, #116	; 0x74
 800ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead8:	ab03      	add	r3, sp, #12
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	462a      	mov	r2, r5
 800eade:	4638      	mov	r0, r7
 800eae0:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <_svfiprintf_r+0x1f8>)
 800eae2:	a904      	add	r1, sp, #16
 800eae4:	f000 f87c 	bl	800ebe0 <_printf_i>
 800eae8:	e7eb      	b.n	800eac2 <_svfiprintf_r+0x1c2>
 800eaea:	bf00      	nop
 800eaec:	0800f784 	.word	0x0800f784
 800eaf0:	0800f78e 	.word	0x0800f78e
 800eaf4:	00000000 	.word	0x00000000
 800eaf8:	0800e849 	.word	0x0800e849
 800eafc:	0800f78a 	.word	0x0800f78a

0800eb00 <_printf_common>:
 800eb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb04:	4616      	mov	r6, r2
 800eb06:	4699      	mov	r9, r3
 800eb08:	688a      	ldr	r2, [r1, #8]
 800eb0a:	690b      	ldr	r3, [r1, #16]
 800eb0c:	4607      	mov	r7, r0
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	bfb8      	it	lt
 800eb12:	4613      	movlt	r3, r2
 800eb14:	6033      	str	r3, [r6, #0]
 800eb16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb20:	b10a      	cbz	r2, 800eb26 <_printf_common+0x26>
 800eb22:	3301      	adds	r3, #1
 800eb24:	6033      	str	r3, [r6, #0]
 800eb26:	6823      	ldr	r3, [r4, #0]
 800eb28:	0699      	lsls	r1, r3, #26
 800eb2a:	bf42      	ittt	mi
 800eb2c:	6833      	ldrmi	r3, [r6, #0]
 800eb2e:	3302      	addmi	r3, #2
 800eb30:	6033      	strmi	r3, [r6, #0]
 800eb32:	6825      	ldr	r5, [r4, #0]
 800eb34:	f015 0506 	ands.w	r5, r5, #6
 800eb38:	d106      	bne.n	800eb48 <_printf_common+0x48>
 800eb3a:	f104 0a19 	add.w	sl, r4, #25
 800eb3e:	68e3      	ldr	r3, [r4, #12]
 800eb40:	6832      	ldr	r2, [r6, #0]
 800eb42:	1a9b      	subs	r3, r3, r2
 800eb44:	42ab      	cmp	r3, r5
 800eb46:	dc28      	bgt.n	800eb9a <_printf_common+0x9a>
 800eb48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb4c:	1e13      	subs	r3, r2, #0
 800eb4e:	6822      	ldr	r2, [r4, #0]
 800eb50:	bf18      	it	ne
 800eb52:	2301      	movne	r3, #1
 800eb54:	0692      	lsls	r2, r2, #26
 800eb56:	d42d      	bmi.n	800ebb4 <_printf_common+0xb4>
 800eb58:	4649      	mov	r1, r9
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb60:	47c0      	blx	r8
 800eb62:	3001      	adds	r0, #1
 800eb64:	d020      	beq.n	800eba8 <_printf_common+0xa8>
 800eb66:	6823      	ldr	r3, [r4, #0]
 800eb68:	68e5      	ldr	r5, [r4, #12]
 800eb6a:	f003 0306 	and.w	r3, r3, #6
 800eb6e:	2b04      	cmp	r3, #4
 800eb70:	bf18      	it	ne
 800eb72:	2500      	movne	r5, #0
 800eb74:	6832      	ldr	r2, [r6, #0]
 800eb76:	f04f 0600 	mov.w	r6, #0
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	bf08      	it	eq
 800eb7e:	1aad      	subeq	r5, r5, r2
 800eb80:	6922      	ldr	r2, [r4, #16]
 800eb82:	bf08      	it	eq
 800eb84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	bfc4      	itt	gt
 800eb8c:	1a9b      	subgt	r3, r3, r2
 800eb8e:	18ed      	addgt	r5, r5, r3
 800eb90:	341a      	adds	r4, #26
 800eb92:	42b5      	cmp	r5, r6
 800eb94:	d11a      	bne.n	800ebcc <_printf_common+0xcc>
 800eb96:	2000      	movs	r0, #0
 800eb98:	e008      	b.n	800ebac <_printf_common+0xac>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4652      	mov	r2, sl
 800eb9e:	4649      	mov	r1, r9
 800eba0:	4638      	mov	r0, r7
 800eba2:	47c0      	blx	r8
 800eba4:	3001      	adds	r0, #1
 800eba6:	d103      	bne.n	800ebb0 <_printf_common+0xb0>
 800eba8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb0:	3501      	adds	r5, #1
 800ebb2:	e7c4      	b.n	800eb3e <_printf_common+0x3e>
 800ebb4:	2030      	movs	r0, #48	; 0x30
 800ebb6:	18e1      	adds	r1, r4, r3
 800ebb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebc2:	4422      	add	r2, r4
 800ebc4:	3302      	adds	r3, #2
 800ebc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebca:	e7c5      	b.n	800eb58 <_printf_common+0x58>
 800ebcc:	2301      	movs	r3, #1
 800ebce:	4622      	mov	r2, r4
 800ebd0:	4649      	mov	r1, r9
 800ebd2:	4638      	mov	r0, r7
 800ebd4:	47c0      	blx	r8
 800ebd6:	3001      	adds	r0, #1
 800ebd8:	d0e6      	beq.n	800eba8 <_printf_common+0xa8>
 800ebda:	3601      	adds	r6, #1
 800ebdc:	e7d9      	b.n	800eb92 <_printf_common+0x92>
	...

0800ebe0 <_printf_i>:
 800ebe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	7e27      	ldrb	r7, [r4, #24]
 800ebe8:	4691      	mov	r9, r2
 800ebea:	2f78      	cmp	r7, #120	; 0x78
 800ebec:	4680      	mov	r8, r0
 800ebee:	469a      	mov	sl, r3
 800ebf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ebf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebf6:	d807      	bhi.n	800ec08 <_printf_i+0x28>
 800ebf8:	2f62      	cmp	r7, #98	; 0x62
 800ebfa:	d80a      	bhi.n	800ec12 <_printf_i+0x32>
 800ebfc:	2f00      	cmp	r7, #0
 800ebfe:	f000 80d9 	beq.w	800edb4 <_printf_i+0x1d4>
 800ec02:	2f58      	cmp	r7, #88	; 0x58
 800ec04:	f000 80a4 	beq.w	800ed50 <_printf_i+0x170>
 800ec08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec10:	e03a      	b.n	800ec88 <_printf_i+0xa8>
 800ec12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec16:	2b15      	cmp	r3, #21
 800ec18:	d8f6      	bhi.n	800ec08 <_printf_i+0x28>
 800ec1a:	a001      	add	r0, pc, #4	; (adr r0, 800ec20 <_printf_i+0x40>)
 800ec1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ec20:	0800ec79 	.word	0x0800ec79
 800ec24:	0800ec8d 	.word	0x0800ec8d
 800ec28:	0800ec09 	.word	0x0800ec09
 800ec2c:	0800ec09 	.word	0x0800ec09
 800ec30:	0800ec09 	.word	0x0800ec09
 800ec34:	0800ec09 	.word	0x0800ec09
 800ec38:	0800ec8d 	.word	0x0800ec8d
 800ec3c:	0800ec09 	.word	0x0800ec09
 800ec40:	0800ec09 	.word	0x0800ec09
 800ec44:	0800ec09 	.word	0x0800ec09
 800ec48:	0800ec09 	.word	0x0800ec09
 800ec4c:	0800ed9b 	.word	0x0800ed9b
 800ec50:	0800ecbd 	.word	0x0800ecbd
 800ec54:	0800ed7d 	.word	0x0800ed7d
 800ec58:	0800ec09 	.word	0x0800ec09
 800ec5c:	0800ec09 	.word	0x0800ec09
 800ec60:	0800edbd 	.word	0x0800edbd
 800ec64:	0800ec09 	.word	0x0800ec09
 800ec68:	0800ecbd 	.word	0x0800ecbd
 800ec6c:	0800ec09 	.word	0x0800ec09
 800ec70:	0800ec09 	.word	0x0800ec09
 800ec74:	0800ed85 	.word	0x0800ed85
 800ec78:	680b      	ldr	r3, [r1, #0]
 800ec7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec7e:	1d1a      	adds	r2, r3, #4
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	600a      	str	r2, [r1, #0]
 800ec84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e0a4      	b.n	800edd6 <_printf_i+0x1f6>
 800ec8c:	6825      	ldr	r5, [r4, #0]
 800ec8e:	6808      	ldr	r0, [r1, #0]
 800ec90:	062e      	lsls	r6, r5, #24
 800ec92:	f100 0304 	add.w	r3, r0, #4
 800ec96:	d50a      	bpl.n	800ecae <_printf_i+0xce>
 800ec98:	6805      	ldr	r5, [r0, #0]
 800ec9a:	600b      	str	r3, [r1, #0]
 800ec9c:	2d00      	cmp	r5, #0
 800ec9e:	da03      	bge.n	800eca8 <_printf_i+0xc8>
 800eca0:	232d      	movs	r3, #45	; 0x2d
 800eca2:	426d      	negs	r5, r5
 800eca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eca8:	230a      	movs	r3, #10
 800ecaa:	485e      	ldr	r0, [pc, #376]	; (800ee24 <_printf_i+0x244>)
 800ecac:	e019      	b.n	800ece2 <_printf_i+0x102>
 800ecae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ecb2:	6805      	ldr	r5, [r0, #0]
 800ecb4:	600b      	str	r3, [r1, #0]
 800ecb6:	bf18      	it	ne
 800ecb8:	b22d      	sxthne	r5, r5
 800ecba:	e7ef      	b.n	800ec9c <_printf_i+0xbc>
 800ecbc:	680b      	ldr	r3, [r1, #0]
 800ecbe:	6825      	ldr	r5, [r4, #0]
 800ecc0:	1d18      	adds	r0, r3, #4
 800ecc2:	6008      	str	r0, [r1, #0]
 800ecc4:	0628      	lsls	r0, r5, #24
 800ecc6:	d501      	bpl.n	800eccc <_printf_i+0xec>
 800ecc8:	681d      	ldr	r5, [r3, #0]
 800ecca:	e002      	b.n	800ecd2 <_printf_i+0xf2>
 800eccc:	0669      	lsls	r1, r5, #25
 800ecce:	d5fb      	bpl.n	800ecc8 <_printf_i+0xe8>
 800ecd0:	881d      	ldrh	r5, [r3, #0]
 800ecd2:	2f6f      	cmp	r7, #111	; 0x6f
 800ecd4:	bf0c      	ite	eq
 800ecd6:	2308      	moveq	r3, #8
 800ecd8:	230a      	movne	r3, #10
 800ecda:	4852      	ldr	r0, [pc, #328]	; (800ee24 <_printf_i+0x244>)
 800ecdc:	2100      	movs	r1, #0
 800ecde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ece2:	6866      	ldr	r6, [r4, #4]
 800ece4:	2e00      	cmp	r6, #0
 800ece6:	bfa8      	it	ge
 800ece8:	6821      	ldrge	r1, [r4, #0]
 800ecea:	60a6      	str	r6, [r4, #8]
 800ecec:	bfa4      	itt	ge
 800ecee:	f021 0104 	bicge.w	r1, r1, #4
 800ecf2:	6021      	strge	r1, [r4, #0]
 800ecf4:	b90d      	cbnz	r5, 800ecfa <_printf_i+0x11a>
 800ecf6:	2e00      	cmp	r6, #0
 800ecf8:	d04d      	beq.n	800ed96 <_printf_i+0x1b6>
 800ecfa:	4616      	mov	r6, r2
 800ecfc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed00:	fb03 5711 	mls	r7, r3, r1, r5
 800ed04:	5dc7      	ldrb	r7, [r0, r7]
 800ed06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed0a:	462f      	mov	r7, r5
 800ed0c:	42bb      	cmp	r3, r7
 800ed0e:	460d      	mov	r5, r1
 800ed10:	d9f4      	bls.n	800ecfc <_printf_i+0x11c>
 800ed12:	2b08      	cmp	r3, #8
 800ed14:	d10b      	bne.n	800ed2e <_printf_i+0x14e>
 800ed16:	6823      	ldr	r3, [r4, #0]
 800ed18:	07df      	lsls	r7, r3, #31
 800ed1a:	d508      	bpl.n	800ed2e <_printf_i+0x14e>
 800ed1c:	6923      	ldr	r3, [r4, #16]
 800ed1e:	6861      	ldr	r1, [r4, #4]
 800ed20:	4299      	cmp	r1, r3
 800ed22:	bfde      	ittt	le
 800ed24:	2330      	movle	r3, #48	; 0x30
 800ed26:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed2e:	1b92      	subs	r2, r2, r6
 800ed30:	6122      	str	r2, [r4, #16]
 800ed32:	464b      	mov	r3, r9
 800ed34:	4621      	mov	r1, r4
 800ed36:	4640      	mov	r0, r8
 800ed38:	f8cd a000 	str.w	sl, [sp]
 800ed3c:	aa03      	add	r2, sp, #12
 800ed3e:	f7ff fedf 	bl	800eb00 <_printf_common>
 800ed42:	3001      	adds	r0, #1
 800ed44:	d14c      	bne.n	800ede0 <_printf_i+0x200>
 800ed46:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4a:	b004      	add	sp, #16
 800ed4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed50:	4834      	ldr	r0, [pc, #208]	; (800ee24 <_printf_i+0x244>)
 800ed52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed56:	680e      	ldr	r6, [r1, #0]
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ed5e:	061f      	lsls	r7, r3, #24
 800ed60:	600e      	str	r6, [r1, #0]
 800ed62:	d514      	bpl.n	800ed8e <_printf_i+0x1ae>
 800ed64:	07d9      	lsls	r1, r3, #31
 800ed66:	bf44      	itt	mi
 800ed68:	f043 0320 	orrmi.w	r3, r3, #32
 800ed6c:	6023      	strmi	r3, [r4, #0]
 800ed6e:	b91d      	cbnz	r5, 800ed78 <_printf_i+0x198>
 800ed70:	6823      	ldr	r3, [r4, #0]
 800ed72:	f023 0320 	bic.w	r3, r3, #32
 800ed76:	6023      	str	r3, [r4, #0]
 800ed78:	2310      	movs	r3, #16
 800ed7a:	e7af      	b.n	800ecdc <_printf_i+0xfc>
 800ed7c:	6823      	ldr	r3, [r4, #0]
 800ed7e:	f043 0320 	orr.w	r3, r3, #32
 800ed82:	6023      	str	r3, [r4, #0]
 800ed84:	2378      	movs	r3, #120	; 0x78
 800ed86:	4828      	ldr	r0, [pc, #160]	; (800ee28 <_printf_i+0x248>)
 800ed88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed8c:	e7e3      	b.n	800ed56 <_printf_i+0x176>
 800ed8e:	065e      	lsls	r6, r3, #25
 800ed90:	bf48      	it	mi
 800ed92:	b2ad      	uxthmi	r5, r5
 800ed94:	e7e6      	b.n	800ed64 <_printf_i+0x184>
 800ed96:	4616      	mov	r6, r2
 800ed98:	e7bb      	b.n	800ed12 <_printf_i+0x132>
 800ed9a:	680b      	ldr	r3, [r1, #0]
 800ed9c:	6826      	ldr	r6, [r4, #0]
 800ed9e:	1d1d      	adds	r5, r3, #4
 800eda0:	6960      	ldr	r0, [r4, #20]
 800eda2:	600d      	str	r5, [r1, #0]
 800eda4:	0635      	lsls	r5, r6, #24
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	d501      	bpl.n	800edae <_printf_i+0x1ce>
 800edaa:	6018      	str	r0, [r3, #0]
 800edac:	e002      	b.n	800edb4 <_printf_i+0x1d4>
 800edae:	0671      	lsls	r1, r6, #25
 800edb0:	d5fb      	bpl.n	800edaa <_printf_i+0x1ca>
 800edb2:	8018      	strh	r0, [r3, #0]
 800edb4:	2300      	movs	r3, #0
 800edb6:	4616      	mov	r6, r2
 800edb8:	6123      	str	r3, [r4, #16]
 800edba:	e7ba      	b.n	800ed32 <_printf_i+0x152>
 800edbc:	680b      	ldr	r3, [r1, #0]
 800edbe:	1d1a      	adds	r2, r3, #4
 800edc0:	600a      	str	r2, [r1, #0]
 800edc2:	681e      	ldr	r6, [r3, #0]
 800edc4:	2100      	movs	r1, #0
 800edc6:	4630      	mov	r0, r6
 800edc8:	6862      	ldr	r2, [r4, #4]
 800edca:	f000 f82f 	bl	800ee2c <memchr>
 800edce:	b108      	cbz	r0, 800edd4 <_printf_i+0x1f4>
 800edd0:	1b80      	subs	r0, r0, r6
 800edd2:	6060      	str	r0, [r4, #4]
 800edd4:	6863      	ldr	r3, [r4, #4]
 800edd6:	6123      	str	r3, [r4, #16]
 800edd8:	2300      	movs	r3, #0
 800edda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edde:	e7a8      	b.n	800ed32 <_printf_i+0x152>
 800ede0:	4632      	mov	r2, r6
 800ede2:	4649      	mov	r1, r9
 800ede4:	4640      	mov	r0, r8
 800ede6:	6923      	ldr	r3, [r4, #16]
 800ede8:	47d0      	blx	sl
 800edea:	3001      	adds	r0, #1
 800edec:	d0ab      	beq.n	800ed46 <_printf_i+0x166>
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	079b      	lsls	r3, r3, #30
 800edf2:	d413      	bmi.n	800ee1c <_printf_i+0x23c>
 800edf4:	68e0      	ldr	r0, [r4, #12]
 800edf6:	9b03      	ldr	r3, [sp, #12]
 800edf8:	4298      	cmp	r0, r3
 800edfa:	bfb8      	it	lt
 800edfc:	4618      	movlt	r0, r3
 800edfe:	e7a4      	b.n	800ed4a <_printf_i+0x16a>
 800ee00:	2301      	movs	r3, #1
 800ee02:	4632      	mov	r2, r6
 800ee04:	4649      	mov	r1, r9
 800ee06:	4640      	mov	r0, r8
 800ee08:	47d0      	blx	sl
 800ee0a:	3001      	adds	r0, #1
 800ee0c:	d09b      	beq.n	800ed46 <_printf_i+0x166>
 800ee0e:	3501      	adds	r5, #1
 800ee10:	68e3      	ldr	r3, [r4, #12]
 800ee12:	9903      	ldr	r1, [sp, #12]
 800ee14:	1a5b      	subs	r3, r3, r1
 800ee16:	42ab      	cmp	r3, r5
 800ee18:	dcf2      	bgt.n	800ee00 <_printf_i+0x220>
 800ee1a:	e7eb      	b.n	800edf4 <_printf_i+0x214>
 800ee1c:	2500      	movs	r5, #0
 800ee1e:	f104 0619 	add.w	r6, r4, #25
 800ee22:	e7f5      	b.n	800ee10 <_printf_i+0x230>
 800ee24:	0800f795 	.word	0x0800f795
 800ee28:	0800f7a6 	.word	0x0800f7a6

0800ee2c <memchr>:
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	b510      	push	{r4, lr}
 800ee30:	b2c9      	uxtb	r1, r1
 800ee32:	4402      	add	r2, r0
 800ee34:	4293      	cmp	r3, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	d101      	bne.n	800ee3e <memchr+0x12>
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	e003      	b.n	800ee46 <memchr+0x1a>
 800ee3e:	7804      	ldrb	r4, [r0, #0]
 800ee40:	3301      	adds	r3, #1
 800ee42:	428c      	cmp	r4, r1
 800ee44:	d1f6      	bne.n	800ee34 <memchr+0x8>
 800ee46:	bd10      	pop	{r4, pc}

0800ee48 <memcpy>:
 800ee48:	440a      	add	r2, r1
 800ee4a:	4291      	cmp	r1, r2
 800ee4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee50:	d100      	bne.n	800ee54 <memcpy+0xc>
 800ee52:	4770      	bx	lr
 800ee54:	b510      	push	{r4, lr}
 800ee56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee5a:	4291      	cmp	r1, r2
 800ee5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee60:	d1f9      	bne.n	800ee56 <memcpy+0xe>
 800ee62:	bd10      	pop	{r4, pc}

0800ee64 <memmove>:
 800ee64:	4288      	cmp	r0, r1
 800ee66:	b510      	push	{r4, lr}
 800ee68:	eb01 0402 	add.w	r4, r1, r2
 800ee6c:	d902      	bls.n	800ee74 <memmove+0x10>
 800ee6e:	4284      	cmp	r4, r0
 800ee70:	4623      	mov	r3, r4
 800ee72:	d807      	bhi.n	800ee84 <memmove+0x20>
 800ee74:	1e43      	subs	r3, r0, #1
 800ee76:	42a1      	cmp	r1, r4
 800ee78:	d008      	beq.n	800ee8c <memmove+0x28>
 800ee7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee82:	e7f8      	b.n	800ee76 <memmove+0x12>
 800ee84:	4601      	mov	r1, r0
 800ee86:	4402      	add	r2, r0
 800ee88:	428a      	cmp	r2, r1
 800ee8a:	d100      	bne.n	800ee8e <memmove+0x2a>
 800ee8c:	bd10      	pop	{r4, pc}
 800ee8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee96:	e7f7      	b.n	800ee88 <memmove+0x24>

0800ee98 <_free_r>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	2900      	cmp	r1, #0
 800ee9e:	d043      	beq.n	800ef28 <_free_r+0x90>
 800eea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eea4:	1f0c      	subs	r4, r1, #4
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	bfb8      	it	lt
 800eeaa:	18e4      	addlt	r4, r4, r3
 800eeac:	f000 f8d0 	bl	800f050 <__malloc_lock>
 800eeb0:	4a1e      	ldr	r2, [pc, #120]	; (800ef2c <_free_r+0x94>)
 800eeb2:	6813      	ldr	r3, [r2, #0]
 800eeb4:	4610      	mov	r0, r2
 800eeb6:	b933      	cbnz	r3, 800eec6 <_free_r+0x2e>
 800eeb8:	6063      	str	r3, [r4, #4]
 800eeba:	6014      	str	r4, [r2, #0]
 800eebc:	4628      	mov	r0, r5
 800eebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eec2:	f000 b8cb 	b.w	800f05c <__malloc_unlock>
 800eec6:	42a3      	cmp	r3, r4
 800eec8:	d90a      	bls.n	800eee0 <_free_r+0x48>
 800eeca:	6821      	ldr	r1, [r4, #0]
 800eecc:	1862      	adds	r2, r4, r1
 800eece:	4293      	cmp	r3, r2
 800eed0:	bf01      	itttt	eq
 800eed2:	681a      	ldreq	r2, [r3, #0]
 800eed4:	685b      	ldreq	r3, [r3, #4]
 800eed6:	1852      	addeq	r2, r2, r1
 800eed8:	6022      	streq	r2, [r4, #0]
 800eeda:	6063      	str	r3, [r4, #4]
 800eedc:	6004      	str	r4, [r0, #0]
 800eede:	e7ed      	b.n	800eebc <_free_r+0x24>
 800eee0:	461a      	mov	r2, r3
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	b10b      	cbz	r3, 800eeea <_free_r+0x52>
 800eee6:	42a3      	cmp	r3, r4
 800eee8:	d9fa      	bls.n	800eee0 <_free_r+0x48>
 800eeea:	6811      	ldr	r1, [r2, #0]
 800eeec:	1850      	adds	r0, r2, r1
 800eeee:	42a0      	cmp	r0, r4
 800eef0:	d10b      	bne.n	800ef0a <_free_r+0x72>
 800eef2:	6820      	ldr	r0, [r4, #0]
 800eef4:	4401      	add	r1, r0
 800eef6:	1850      	adds	r0, r2, r1
 800eef8:	4283      	cmp	r3, r0
 800eefa:	6011      	str	r1, [r2, #0]
 800eefc:	d1de      	bne.n	800eebc <_free_r+0x24>
 800eefe:	6818      	ldr	r0, [r3, #0]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	4401      	add	r1, r0
 800ef04:	6011      	str	r1, [r2, #0]
 800ef06:	6053      	str	r3, [r2, #4]
 800ef08:	e7d8      	b.n	800eebc <_free_r+0x24>
 800ef0a:	d902      	bls.n	800ef12 <_free_r+0x7a>
 800ef0c:	230c      	movs	r3, #12
 800ef0e:	602b      	str	r3, [r5, #0]
 800ef10:	e7d4      	b.n	800eebc <_free_r+0x24>
 800ef12:	6820      	ldr	r0, [r4, #0]
 800ef14:	1821      	adds	r1, r4, r0
 800ef16:	428b      	cmp	r3, r1
 800ef18:	bf01      	itttt	eq
 800ef1a:	6819      	ldreq	r1, [r3, #0]
 800ef1c:	685b      	ldreq	r3, [r3, #4]
 800ef1e:	1809      	addeq	r1, r1, r0
 800ef20:	6021      	streq	r1, [r4, #0]
 800ef22:	6063      	str	r3, [r4, #4]
 800ef24:	6054      	str	r4, [r2, #4]
 800ef26:	e7c9      	b.n	800eebc <_free_r+0x24>
 800ef28:	bd38      	pop	{r3, r4, r5, pc}
 800ef2a:	bf00      	nop
 800ef2c:	200002d8 	.word	0x200002d8

0800ef30 <_malloc_r>:
 800ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef32:	1ccd      	adds	r5, r1, #3
 800ef34:	f025 0503 	bic.w	r5, r5, #3
 800ef38:	3508      	adds	r5, #8
 800ef3a:	2d0c      	cmp	r5, #12
 800ef3c:	bf38      	it	cc
 800ef3e:	250c      	movcc	r5, #12
 800ef40:	2d00      	cmp	r5, #0
 800ef42:	4606      	mov	r6, r0
 800ef44:	db01      	blt.n	800ef4a <_malloc_r+0x1a>
 800ef46:	42a9      	cmp	r1, r5
 800ef48:	d903      	bls.n	800ef52 <_malloc_r+0x22>
 800ef4a:	230c      	movs	r3, #12
 800ef4c:	6033      	str	r3, [r6, #0]
 800ef4e:	2000      	movs	r0, #0
 800ef50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef52:	f000 f87d 	bl	800f050 <__malloc_lock>
 800ef56:	4921      	ldr	r1, [pc, #132]	; (800efdc <_malloc_r+0xac>)
 800ef58:	680a      	ldr	r2, [r1, #0]
 800ef5a:	4614      	mov	r4, r2
 800ef5c:	b99c      	cbnz	r4, 800ef86 <_malloc_r+0x56>
 800ef5e:	4f20      	ldr	r7, [pc, #128]	; (800efe0 <_malloc_r+0xb0>)
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	b923      	cbnz	r3, 800ef6e <_malloc_r+0x3e>
 800ef64:	4621      	mov	r1, r4
 800ef66:	4630      	mov	r0, r6
 800ef68:	f000 f862 	bl	800f030 <_sbrk_r>
 800ef6c:	6038      	str	r0, [r7, #0]
 800ef6e:	4629      	mov	r1, r5
 800ef70:	4630      	mov	r0, r6
 800ef72:	f000 f85d 	bl	800f030 <_sbrk_r>
 800ef76:	1c43      	adds	r3, r0, #1
 800ef78:	d123      	bne.n	800efc2 <_malloc_r+0x92>
 800ef7a:	230c      	movs	r3, #12
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	6033      	str	r3, [r6, #0]
 800ef80:	f000 f86c 	bl	800f05c <__malloc_unlock>
 800ef84:	e7e3      	b.n	800ef4e <_malloc_r+0x1e>
 800ef86:	6823      	ldr	r3, [r4, #0]
 800ef88:	1b5b      	subs	r3, r3, r5
 800ef8a:	d417      	bmi.n	800efbc <_malloc_r+0x8c>
 800ef8c:	2b0b      	cmp	r3, #11
 800ef8e:	d903      	bls.n	800ef98 <_malloc_r+0x68>
 800ef90:	6023      	str	r3, [r4, #0]
 800ef92:	441c      	add	r4, r3
 800ef94:	6025      	str	r5, [r4, #0]
 800ef96:	e004      	b.n	800efa2 <_malloc_r+0x72>
 800ef98:	6863      	ldr	r3, [r4, #4]
 800ef9a:	42a2      	cmp	r2, r4
 800ef9c:	bf0c      	ite	eq
 800ef9e:	600b      	streq	r3, [r1, #0]
 800efa0:	6053      	strne	r3, [r2, #4]
 800efa2:	4630      	mov	r0, r6
 800efa4:	f000 f85a 	bl	800f05c <__malloc_unlock>
 800efa8:	f104 000b 	add.w	r0, r4, #11
 800efac:	1d23      	adds	r3, r4, #4
 800efae:	f020 0007 	bic.w	r0, r0, #7
 800efb2:	1ac2      	subs	r2, r0, r3
 800efb4:	d0cc      	beq.n	800ef50 <_malloc_r+0x20>
 800efb6:	1a1b      	subs	r3, r3, r0
 800efb8:	50a3      	str	r3, [r4, r2]
 800efba:	e7c9      	b.n	800ef50 <_malloc_r+0x20>
 800efbc:	4622      	mov	r2, r4
 800efbe:	6864      	ldr	r4, [r4, #4]
 800efc0:	e7cc      	b.n	800ef5c <_malloc_r+0x2c>
 800efc2:	1cc4      	adds	r4, r0, #3
 800efc4:	f024 0403 	bic.w	r4, r4, #3
 800efc8:	42a0      	cmp	r0, r4
 800efca:	d0e3      	beq.n	800ef94 <_malloc_r+0x64>
 800efcc:	1a21      	subs	r1, r4, r0
 800efce:	4630      	mov	r0, r6
 800efd0:	f000 f82e 	bl	800f030 <_sbrk_r>
 800efd4:	3001      	adds	r0, #1
 800efd6:	d1dd      	bne.n	800ef94 <_malloc_r+0x64>
 800efd8:	e7cf      	b.n	800ef7a <_malloc_r+0x4a>
 800efda:	bf00      	nop
 800efdc:	200002d8 	.word	0x200002d8
 800efe0:	200002dc 	.word	0x200002dc

0800efe4 <_realloc_r>:
 800efe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe6:	4607      	mov	r7, r0
 800efe8:	4614      	mov	r4, r2
 800efea:	460e      	mov	r6, r1
 800efec:	b921      	cbnz	r1, 800eff8 <_realloc_r+0x14>
 800efee:	4611      	mov	r1, r2
 800eff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eff4:	f7ff bf9c 	b.w	800ef30 <_malloc_r>
 800eff8:	b922      	cbnz	r2, 800f004 <_realloc_r+0x20>
 800effa:	f7ff ff4d 	bl	800ee98 <_free_r>
 800effe:	4625      	mov	r5, r4
 800f000:	4628      	mov	r0, r5
 800f002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f004:	f000 f830 	bl	800f068 <_malloc_usable_size_r>
 800f008:	42a0      	cmp	r0, r4
 800f00a:	d20f      	bcs.n	800f02c <_realloc_r+0x48>
 800f00c:	4621      	mov	r1, r4
 800f00e:	4638      	mov	r0, r7
 800f010:	f7ff ff8e 	bl	800ef30 <_malloc_r>
 800f014:	4605      	mov	r5, r0
 800f016:	2800      	cmp	r0, #0
 800f018:	d0f2      	beq.n	800f000 <_realloc_r+0x1c>
 800f01a:	4631      	mov	r1, r6
 800f01c:	4622      	mov	r2, r4
 800f01e:	f7ff ff13 	bl	800ee48 <memcpy>
 800f022:	4631      	mov	r1, r6
 800f024:	4638      	mov	r0, r7
 800f026:	f7ff ff37 	bl	800ee98 <_free_r>
 800f02a:	e7e9      	b.n	800f000 <_realloc_r+0x1c>
 800f02c:	4635      	mov	r5, r6
 800f02e:	e7e7      	b.n	800f000 <_realloc_r+0x1c>

0800f030 <_sbrk_r>:
 800f030:	b538      	push	{r3, r4, r5, lr}
 800f032:	2300      	movs	r3, #0
 800f034:	4d05      	ldr	r5, [pc, #20]	; (800f04c <_sbrk_r+0x1c>)
 800f036:	4604      	mov	r4, r0
 800f038:	4608      	mov	r0, r1
 800f03a:	602b      	str	r3, [r5, #0]
 800f03c:	f7f4 fbec 	bl	8003818 <_sbrk>
 800f040:	1c43      	adds	r3, r0, #1
 800f042:	d102      	bne.n	800f04a <_sbrk_r+0x1a>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	b103      	cbz	r3, 800f04a <_sbrk_r+0x1a>
 800f048:	6023      	str	r3, [r4, #0]
 800f04a:	bd38      	pop	{r3, r4, r5, pc}
 800f04c:	20001388 	.word	0x20001388

0800f050 <__malloc_lock>:
 800f050:	4801      	ldr	r0, [pc, #4]	; (800f058 <__malloc_lock+0x8>)
 800f052:	f000 b811 	b.w	800f078 <__retarget_lock_acquire_recursive>
 800f056:	bf00      	nop
 800f058:	20001390 	.word	0x20001390

0800f05c <__malloc_unlock>:
 800f05c:	4801      	ldr	r0, [pc, #4]	; (800f064 <__malloc_unlock+0x8>)
 800f05e:	f000 b80c 	b.w	800f07a <__retarget_lock_release_recursive>
 800f062:	bf00      	nop
 800f064:	20001390 	.word	0x20001390

0800f068 <_malloc_usable_size_r>:
 800f068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f06c:	1f18      	subs	r0, r3, #4
 800f06e:	2b00      	cmp	r3, #0
 800f070:	bfbc      	itt	lt
 800f072:	580b      	ldrlt	r3, [r1, r0]
 800f074:	18c0      	addlt	r0, r0, r3
 800f076:	4770      	bx	lr

0800f078 <__retarget_lock_acquire_recursive>:
 800f078:	4770      	bx	lr

0800f07a <__retarget_lock_release_recursive>:
 800f07a:	4770      	bx	lr

0800f07c <_init>:
 800f07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07e:	bf00      	nop
 800f080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f082:	bc08      	pop	{r3}
 800f084:	469e      	mov	lr, r3
 800f086:	4770      	bx	lr

0800f088 <_fini>:
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f08a:	bf00      	nop
 800f08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f08e:	bc08      	pop	{r3}
 800f090:	469e      	mov	lr, r3
 800f092:	4770      	bx	lr
