
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800ee44  0800ee44  0001ee44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f550  0800f550  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800f550  0800f550  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f550  0800f550  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f550  0800f550  0001f550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f554  0800f554  0001f554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800f558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  20000088  0800f5e0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012d8  0800f5e0  000212d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234e8  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004968  00000000  00000000  00043599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00047f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00049898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c840  00000000  00000000  0004b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021996  00000000  00000000  00067888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988fa  00000000  00000000  0008921e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121b18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee0  00000000  00000000  00121b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ee2c 	.word	0x0800ee2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800ee2c 	.word	0x0800ee2c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_frsub>:
 8000b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	e002      	b.n	8000b50 <__addsf3>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fsub>:
 8000b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b50 <__addsf3>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	bf1f      	itttt	ne
 8000b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b58:	ea92 0f03 	teqne	r2, r3
 8000b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b64:	d06a      	beq.n	8000c3c <__addsf3+0xec>
 8000b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6e:	bfc1      	itttt	gt
 8000b70:	18d2      	addgt	r2, r2, r3
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	4048      	eorgt	r0, r1
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	2b19      	cmp	r3, #25
 8000b7e:	bf88      	it	hi
 8000b80:	4770      	bxhi	lr
 8000b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9e:	bf18      	it	ne
 8000ba0:	4249      	negne	r1, r1
 8000ba2:	ea92 0f03 	teq	r2, r3
 8000ba6:	d03f      	beq.n	8000c28 <__addsf3+0xd8>
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb0:	eb10 000c 	adds.w	r0, r0, ip
 8000bb4:	f1c3 0320 	rsb	r3, r3, #32
 8000bb8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__addsf3+0x78>
 8000bc2:	4249      	negs	r1, r1
 8000bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bcc:	d313      	bcc.n	8000bf6 <__addsf3+0xa6>
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d306      	bcc.n	8000be2 <__addsf3+0x92>
 8000bd4:	0840      	lsrs	r0, r0, #1
 8000bd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bda:	f102 0201 	add.w	r2, r2, #1
 8000bde:	2afe      	cmp	r2, #254	; 0xfe
 8000be0:	d251      	bcs.n	8000c86 <__addsf3+0x136>
 8000be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bea:	bf08      	it	eq
 8000bec:	f020 0001 	biceq.w	r0, r0, #1
 8000bf0:	ea40 0003 	orr.w	r0, r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	0049      	lsls	r1, r1, #1
 8000bf8:	eb40 0000 	adc.w	r0, r0, r0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	bf28      	it	cs
 8000c00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c04:	d2ed      	bcs.n	8000be2 <__addsf3+0x92>
 8000c06:	fab0 fc80 	clz	ip, r0
 8000c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c16:	bfaa      	itet	ge
 8000c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c1c:	4252      	neglt	r2, r2
 8000c1e:	4318      	orrge	r0, r3
 8000c20:	bfbc      	itt	lt
 8000c22:	40d0      	lsrlt	r0, r2
 8000c24:	4318      	orrlt	r0, r3
 8000c26:	4770      	bx	lr
 8000c28:	f092 0f00 	teq	r2, #0
 8000c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c30:	bf06      	itte	eq
 8000c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c36:	3201      	addeq	r2, #1
 8000c38:	3b01      	subne	r3, #1
 8000c3a:	e7b5      	b.n	8000ba8 <__addsf3+0x58>
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	bf18      	it	ne
 8000c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4a:	d021      	beq.n	8000c90 <__addsf3+0x140>
 8000c4c:	ea92 0f03 	teq	r2, r3
 8000c50:	d004      	beq.n	8000c5c <__addsf3+0x10c>
 8000c52:	f092 0f00 	teq	r2, #0
 8000c56:	bf08      	it	eq
 8000c58:	4608      	moveq	r0, r1
 8000c5a:	4770      	bx	lr
 8000c5c:	ea90 0f01 	teq	r0, r1
 8000c60:	bf1c      	itt	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	4770      	bxne	lr
 8000c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6a:	d104      	bne.n	8000c76 <__addsf3+0x126>
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7a:	bf3c      	itt	cc
 8000c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c80:	4770      	bxcc	lr
 8000c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c94:	bf16      	itet	ne
 8000c96:	4608      	movne	r0, r1
 8000c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c9c:	4601      	movne	r1, r0
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	bf06      	itte	eq
 8000ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca6:	ea90 0f01 	teqeq	r0, r1
 8000caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_ui2f>:
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e004      	b.n	8000cc0 <__aeabi_i2f+0x8>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_i2f>:
 8000cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	bf48      	it	mi
 8000cbe:	4240      	negmi	r0, r0
 8000cc0:	ea5f 0c00 	movs.w	ip, r0
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ccc:	4601      	mov	r1, r0
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	e01c      	b.n	8000d0e <__aeabi_l2f+0x2a>

08000cd4 <__aeabi_ul2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e00a      	b.n	8000cf8 <__aeabi_l2f+0x14>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_l2f>:
 8000ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__aeabi_l2f+0x14>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	ea5f 0c01 	movs.w	ip, r1
 8000cfc:	bf02      	ittt	eq
 8000cfe:	4684      	moveq	ip, r0
 8000d00:	4601      	moveq	r1, r0
 8000d02:	2000      	moveq	r0, #0
 8000d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d08:	bf08      	it	eq
 8000d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d12:	fabc f28c 	clz	r2, ip
 8000d16:	3a08      	subs	r2, #8
 8000d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d1c:	db10      	blt.n	8000d40 <__aeabi_l2f+0x5c>
 8000d1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d30:	fa20 f202 	lsr.w	r2, r0, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f102 0220 	add.w	r2, r2, #32
 8000d44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d50:	fa21 f202 	lsr.w	r2, r1, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_f2iz>:
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d68:	d30f      	bcc.n	8000d8a <__aeabi_f2iz+0x2a>
 8000d6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_f2iz+0x30>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d7c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	bf18      	it	ne
 8000d86:	4240      	negne	r0, r0
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2iz+0x3a>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d105      	bne.n	8000da6 <__aeabi_f2iz+0x46>
 8000d9a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr

08000dac <ADC_DMA_Init>:
 */

#include <ADC_DMA.h>

void ADC_DMA_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <ADC_DMA_Init+0x2c>)
 8000db2:	f003 f8e9 	bl	8003f88 <HAL_ADCEx_Calibration_Start>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <ADC_DMA_Init+0x14>
		Error_Handler();
 8000dbc:	f001 fc7a 	bl	80026b4 <Error_Handler>
	if (HAL_ADC_Start_DMA(&hadc1, &analog.buffer, ADC_BUF_SIZE) != HAL_OK)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4906      	ldr	r1, [pc, #24]	; (8000ddc <ADC_DMA_Init+0x30>)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <ADC_DMA_Init+0x2c>)
 8000dc6:	f002 fdeb 	bl	80039a0 <HAL_ADC_Start_DMA>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <ADC_DMA_Init+0x28>
		Error_Handler();
 8000dd0:	f001 fc70 	bl	80026b4 <Error_Handler>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002e4 	.word	0x200002e4
 8000ddc:	200002e0 	.word	0x200002e0

08000de0 <aceGir_Init>:
 */

#include "ace_gir.h"

HAL_StatusTypeDef aceGir_Init(I2C_HandleTypeDef *hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	6078      	str	r0, [r7, #4]

	aceGir.hi2c = hi2c;
 8000de8:	4a42      	ldr	r2, [pc, #264]	; (8000ef4 <aceGir_Init+0x114>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef result;
	uint8_t check;
	uint8_t dados;

	// checar se o módulo está conectado
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000dee:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <aceGir_Init+0x114>)
 8000df0:	6818      	ldr	r0, [r3, #0]
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f107 030e 	add.w	r3, r7, #14
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	2275      	movs	r2, #117	; 0x75
 8000e06:	21d0      	movs	r1, #208	; 0xd0
 8000e08:	f004 fe80 	bl	8005b0c <HAL_I2C_Mem_Read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK)
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <aceGir_Init+0x3a>
		return result;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	e068      	b.n	8000eec <aceGir_Init+0x10c>

	if (check == 104)  // 0x68 = 104 -> será retornado seu o modulo estiver OK
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2b68      	cmp	r3, #104	; 0x68
 8000e1e:	d15f      	bne.n	8000ee0 <aceGir_Init+0x100>
	{
		// ligar sensor
		dados = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&dados, 1, 1000);
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <aceGir_Init+0x114>)
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	f107 030d 	add.w	r3, r7, #13
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	226b      	movs	r2, #107	; 0x6b
 8000e3c:	21d0      	movs	r1, #208	; 0xd0
 8000e3e:	f004 fd6b 	bl	8005918 <HAL_I2C_Mem_Write>
 8000e42:	4603      	mov	r3, r0
 8000e44:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <aceGir_Init+0x70>
			return result;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	e04d      	b.n	8000eec <aceGir_Init+0x10c>

		// definir frequencia de 1khz
		dados = 0x07;
 8000e50:	2307      	movs	r3, #7
 8000e52:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &dados, 1, 1000);
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <aceGir_Init+0x114>)
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	f107 030d 	add.w	r3, r7, #13
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2219      	movs	r2, #25
 8000e6c:	21d0      	movs	r1, #208	; 0xd0
 8000e6e:	f004 fd53 	bl	8005918 <HAL_I2C_Mem_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <aceGir_Init+0xa0>
			return result;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	e035      	b.n	8000eec <aceGir_Init+0x10c>

		// definir configuracao de acelerometro
		dados = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &dados, 1, 1000);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <aceGir_Init+0x114>)
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	f107 030d 	add.w	r3, r7, #13
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	221c      	movs	r2, #28
 8000e9c:	21d0      	movs	r1, #208	; 0xd0
 8000e9e:	f004 fd3b 	bl	8005918 <HAL_I2C_Mem_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <aceGir_Init+0xd0>
			return result;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	e01d      	b.n	8000eec <aceGir_Init+0x10c>

		// definir configuracao de giroscopio
		dados = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &dados, 1, 1000);
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <aceGir_Init+0x114>)
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	f107 030d 	add.w	r3, r7, #13
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	221b      	movs	r2, #27
 8000ecc:	21d0      	movs	r1, #208	; 0xd0
 8000ece:	f004 fd23 	bl	8005918 <HAL_I2C_Mem_Write>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <aceGir_Init+0x100>
			return result;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	e005      	b.n	8000eec <aceGir_Init+0x10c>
	}

	result = HAL_TIM_Base_Start_IT(&htim4);
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <aceGir_Init+0x118>)
 8000ee2:	f008 fba5 	bl	8009630 <HAL_TIM_Base_Start_IT>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]

	return result;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000035c 	.word	0x2000035c
 8000ef8:	20000314 	.word	0x20000314
 8000efc:	00000000 	.word	0x00000000

08000f00 <aceGir_Read>:

HAL_StatusTypeDef aceGir_Read(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef result;
	uint8_t buf[6];

	/*	Leitura do Acelerometro	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, buf, 6, 1000);
 8000f06:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2306      	movs	r3, #6
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	463b      	mov	r3, r7
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	223b      	movs	r2, #59	; 0x3b
 8000f1c:	21d0      	movs	r1, #208	; 0xd0
 8000f1e:	f004 fdf5 	bl	8005b0c <HAL_I2C_Mem_Read>
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <aceGir_Read+0x30>
		return result;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	e0c3      	b.n	80010b8 <aceGir_Read+0x1b8>

	aceGir.accel.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8000f30:	783b      	ldrb	r3, [r7, #0]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	787b      	ldrb	r3, [r7, #1]
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f40:	809a      	strh	r2, [r3, #4]
	aceGir.accel.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 8000f42:	78bb      	ldrb	r3, [r7, #2]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f52:	80da      	strh	r2, [r3, #6]
	aceGir.accel.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 8000f54:	793b      	ldrb	r3, [r7, #4]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f64:	811a      	strh	r2, [r3, #8]

	//converter valores em 'g', dividindo por 16384 (FS_SEL)=0
	aceGir.accel.x = aceGir.accel.X_RAW/16384.0;
 8000f66:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff faf5 	bl	800055c <__aeabi_i2d>
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b55      	ldr	r3, [pc, #340]	; (80010cc <aceGir_Read+0x1cc>)
 8000f78:	f7ff fc84 	bl	8000884 <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd8e 	bl	8000aa4 <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f8c:	60d3      	str	r3, [r2, #12]
	aceGir.accel.y = aceGir.accel.Y_RAW/16384.0;
 8000f8e:	4b4e      	ldr	r3, [pc, #312]	; (80010c8 <aceGir_Read+0x1c8>)
 8000f90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fae1 	bl	800055c <__aeabi_i2d>
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <aceGir_Read+0x1cc>)
 8000fa0:	f7ff fc70 	bl	8000884 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fd7a 	bl	8000aa4 <__aeabi_d2f>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a45      	ldr	r2, [pc, #276]	; (80010c8 <aceGir_Read+0x1c8>)
 8000fb4:	6113      	str	r3, [r2, #16]
	aceGir.accel.z = aceGir.accel.Z_RAW/16384.0;
 8000fb6:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <aceGir_Read+0x1c8>)
 8000fb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff facd 	bl	800055c <__aeabi_i2d>
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <aceGir_Read+0x1cc>)
 8000fc8:	f7ff fc5c 	bl	8000884 <__aeabi_ddiv>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fd66 	bl	8000aa4 <__aeabi_d2f>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a3b      	ldr	r2, [pc, #236]	; (80010c8 <aceGir_Read+0x1c8>)
 8000fdc:	6153      	str	r3, [r2, #20]

	/*	Leitura do Giroscopio	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, buf, 6, 1000);
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <aceGir_Read+0x1c8>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2306      	movs	r3, #6
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	463b      	mov	r3, r7
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	2243      	movs	r2, #67	; 0x43
 8000ff4:	21d0      	movs	r1, #208	; 0xd0
 8000ff6:	f004 fd89 	bl	8005b0c <HAL_I2C_Mem_Read>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <aceGir_Read+0x108>
		return result;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	e057      	b.n	80010b8 <aceGir_Read+0x1b8>

	aceGir.gyro.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8001008:	783b      	ldrb	r3, [r7, #0]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <aceGir_Read+0x1c8>)
 8001018:	831a      	strh	r2, [r3, #24]
	aceGir.gyro.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 800101a:	78bb      	ldrb	r3, [r7, #2]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <aceGir_Read+0x1c8>)
 800102a:	835a      	strh	r2, [r3, #26]
	aceGir.gyro.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 800102c:	793b      	ldrb	r3, [r7, #4]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <aceGir_Read+0x1c8>)
 800103c:	839a      	strh	r2, [r3, #28]

	//converter valores em 'graus/segundo', dividindo por 131 (FS_SEL)=0
	aceGir.gyro.x = aceGir.gyro.X_RAW/131.0;
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <aceGir_Read+0x1c8>)
 8001040:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa89 	bl	800055c <__aeabi_i2d>
 800104a:	a31d      	add	r3, pc, #116	; (adr r3, 80010c0 <aceGir_Read+0x1c0>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fc18 	bl	8000884 <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fd22 	bl	8000aa4 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <aceGir_Read+0x1c8>)
 8001064:	6213      	str	r3, [r2, #32]
	aceGir.gyro.y = aceGir.gyro.Y_RAW/131.0;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <aceGir_Read+0x1c8>)
 8001068:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa75 	bl	800055c <__aeabi_i2d>
 8001072:	a313      	add	r3, pc, #76	; (adr r3, 80010c0 <aceGir_Read+0x1c0>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fc04 	bl	8000884 <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd0e 	bl	8000aa4 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <aceGir_Read+0x1c8>)
 800108c:	6253      	str	r3, [r2, #36]	; 0x24
	aceGir.gyro.z = aceGir.gyro.Z_RAW/131.0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <aceGir_Read+0x1c8>)
 8001090:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa61 	bl	800055c <__aeabi_i2d>
 800109a:	a309      	add	r3, pc, #36	; (adr r3, 80010c0 <aceGir_Read+0x1c0>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fbf0 	bl	8000884 <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fcfa 	bl	8000aa4 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <aceGir_Read+0x1c8>)
 80010b4:	6293      	str	r3, [r2, #40]	; 0x28



	return result;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40606000 	.word	0x40606000
 80010c8:	2000035c 	.word	0x2000035c
 80010cc:	40d00000 	.word	0x40d00000

080010d0 <can_bus_Init>:

#include "can_bus.h"
#include "ace_gir.h"

void can_bus_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	canBus.tx_header.DLC = 8;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <can_bus_Init+0x84>)
 80010d8:	2208      	movs	r2, #8
 80010da:	61da      	str	r2, [r3, #28]
	canBus.tx_header.IDE = CAN_ID_STD;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <can_bus_Init+0x84>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
	canBus.tx_header.RTR = CAN_RTR_DATA;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <can_bus_Init+0x84>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
	canBus.tx_header.StdId = 0x010;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <can_bus_Init+0x84>)
 80010ea:	2210      	movs	r2, #16
 80010ec:	60da      	str	r2, [r3, #12]
	canBus.filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <can_bus_Init+0x84>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	651a      	str	r2, [r3, #80]	; 0x50
	canBus.filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <can_bus_Init+0x84>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	659a      	str	r2, [r3, #88]	; 0x58
	canBus.filter.FilterBank = 0;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <can_bus_Init+0x84>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	655a      	str	r2, [r3, #84]	; 0x54
	canBus.filter.FilterIdHigh = 0x249 << 5;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <can_bus_Init+0x84>)
 8001102:	f644 1220 	movw	r2, #18720	; 0x4920
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
	canBus.filter.FilterIdLow = 0x240 << 5;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <can_bus_Init+0x84>)
 800110a:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800110e:	645a      	str	r2, [r3, #68]	; 0x44
	canBus.filter.FilterMaskIdHigh = 0x200 << 5;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <can_bus_Init+0x84>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	649a      	str	r2, [r3, #72]	; 0x48
	canBus.filter.FilterMaskIdLow = 0;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <can_bus_Init+0x84>)
 800111a:	2200      	movs	r2, #0
 800111c:	64da      	str	r2, [r3, #76]	; 0x4c
	canBus.filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <can_bus_Init+0x84>)
 8001120:	2201      	movs	r2, #1
 8001122:	65da      	str	r2, [r3, #92]	; 0x5c
	canBus.filter.FilterActivation = ENABLE;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <can_bus_Init+0x84>)
 8001126:	2201      	movs	r2, #1
 8001128:	661a      	str	r2, [r3, #96]	; 0x60
	result = HAL_CAN_ConfigFilter(&hcan, &canBus.filter);
 800112a:	490b      	ldr	r1, [pc, #44]	; (8001158 <can_bus_Init+0x88>)
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <can_bus_Init+0x8c>)
 800112e:	f003 f8d2 	bl	80042d6 <HAL_CAN_ConfigFilter>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_Start(&hcan);
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <can_bus_Init+0x8c>)
 8001138:	f003 f996 	bl	8004468 <HAL_CAN_Start>
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001140:	2102      	movs	r1, #2
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <can_bus_Init+0x8c>)
 8001144:	f003 fae5 	bl	8004712 <HAL_CAN_ActivateNotification>
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000388 	.word	0x20000388
 8001158:	200003c8 	.word	0x200003c8
 800115c:	2000040c 	.word	0x2000040c

08001160 <can_bus_Recieve>:
	if (canBus.count>50000)
		canBus.count = 0;
}

void can_bus_Recieve(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canBus.rx_header, canBus.recieve);
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <can_bus_Recieve+0xa0>)
 8001166:	4a27      	ldr	r2, [pc, #156]	; (8001204 <can_bus_Recieve+0xa4>)
 8001168:	2100      	movs	r1, #0
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <can_bus_Recieve+0xa8>)
 800116c:	f003 f9c0 	bl	80044f0 <HAL_CAN_GetRxMessage>

	if (canBus.rx_header.StdId == 0x242)
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <can_bus_Recieve+0xac>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f240 2242 	movw	r2, #578	; 0x242
 8001178:	4293      	cmp	r3, r2
 800117a:	d13b      	bne.n	80011f4 <can_bus_Recieve+0x94>
	{
		canBus.rx.fuel = (canBus.recieve[1] << 8) + canBus.recieve[0];
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <can_bus_Recieve+0xac>)
 800117e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001182:	b29b      	uxth	r3, r3
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b20      	ldr	r3, [pc, #128]	; (800120c <can_bus_Recieve+0xac>)
 800118a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800118e:	b29b      	uxth	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <can_bus_Recieve+0xac>)
 8001196:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		canBus.rx.vel = (canBus.recieve[3] << 8) + canBus.recieve[2];
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <can_bus_Recieve+0xac>)
 800119c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <can_bus_Recieve+0xac>)
 80011a8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <can_bus_Recieve+0xac>)
 80011b4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		canBus.rx.rpm = (canBus.recieve[5] << 8) + canBus.recieve[4];
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <can_bus_Recieve+0xac>)
 80011ba:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80011be:	b29b      	uxth	r3, r3
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <can_bus_Recieve+0xac>)
 80011c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <can_bus_Recieve+0xac>)
 80011d2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		canBus.rx.counter = (canBus.recieve[7] << 8) + canBus.recieve[6];
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <can_bus_Recieve+0xac>)
 80011d8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80011dc:	b29b      	uxth	r3, r3
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <can_bus_Recieve+0xac>)
 80011e4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <can_bus_Recieve+0xac>)
 80011f0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		can_rData.gyro.x = (canBus.recieve[1] << 8) + canBus.recieve[0];
		can_rData.gyro.y = (canBus.recieve[3] << 8) + canBus.recieve[2];
		can_rData.gyro.z = (canBus.recieve[5] << 8) + canBus.recieve[4];
	}*/

	canBus.count=0;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <can_bus_Recieve+0xac>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200003fc 	.word	0x200003fc
 8001204:	200003ac 	.word	0x200003ac
 8001208:	2000040c 	.word	0x2000040c
 800120c:	20000388 	.word	0x20000388

08001210 <dina_Init>:
 */

#include "dina.h"

void dina_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	dina.huart = &huart1;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <dina_Init+0x14>)
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <dina_Init+0x18>)
 8001218:	601a      	str	r2, [r3, #0]
	forceGauge_uart_Init_DMA(&dina);
 800121a:	4802      	ldr	r0, [pc, #8]	; (8001224 <dina_Init+0x14>)
 800121c:	f000 fce6 	bl	8001bec <forceGauge_uart_Init_DMA>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000478 	.word	0x20000478
 8001228:	20000434 	.word	0x20000434

0800122c <dina_Update>:

void dina_Update(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	forceGauge_getForce(&dina);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <dina_Update+0x10>)
 8001232:	f000 fcef 	bl	8001c14 <forceGauge_getForce>
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000478 	.word	0x20000478

08001240 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <SELECT+0x14>)
 800124c:	f004 f9ee 	bl	800562c <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40010800 	.word	0x40010800

08001258 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <DESELECT+0x14>)
 8001264:	f004 f9e2 	bl	800562c <HAL_GPIO_WritePin>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010800 	.word	0x40010800

08001270 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800127a:	bf00      	nop
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <SPI_TxByte+0x30>)
 800127e:	f008 f8c0 	bl	8009402 <HAL_SPI_GetState>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d1f9      	bne.n	800127c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001288:	1df9      	adds	r1, r7, #7
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	2201      	movs	r2, #1
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <SPI_TxByte+0x30>)
 8001292:	f007 fce9 	bl	8008c68 <HAL_SPI_Transmit>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000dbc 	.word	0x20000dbc

080012a4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80012aa:	23ff      	movs	r3, #255	; 0xff
 80012ac:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80012b2:	bf00      	nop
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <SPI_RxByte+0x38>)
 80012b6:	f008 f8a4 	bl	8009402 <HAL_SPI_GetState>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d1f9      	bne.n	80012b4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80012c0:	1dba      	adds	r2, r7, #6
 80012c2:	1df9      	adds	r1, r7, #7
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <SPI_RxByte+0x38>)
 80012ce:	f007 fe07 	bl	8008ee0 <HAL_SPI_TransmitReceive>

  return data;
 80012d2:	79bb      	ldrb	r3, [r7, #6]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000dbc 	.word	0x20000dbc

080012e0 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80012e8:	f7ff ffdc 	bl	80012a4 <SPI_RxByte>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	701a      	strb	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <SD_ReadyWait+0x34>)
 8001304:	2232      	movs	r2, #50	; 0x32
 8001306:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001308:	f7ff ffcc 	bl	80012a4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800130c:	f7ff ffca 	bl	80012a4 <SPI_RxByte>
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d004      	beq.n	8001324 <SD_ReadyWait+0x28>
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SD_ReadyWait+0x34>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f3      	bne.n	800130c <SD_ReadyWait+0x10>

  return res;
 8001324:	79fb      	ldrb	r3, [r7, #7]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000e5c 	.word	0x20000e5c

08001334 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800133a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800133e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001340:	f7ff ff8a 	bl	8001258 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	e005      	b.n	8001356 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800134a:	20ff      	movs	r0, #255	; 0xff
 800134c:	f7ff ff90 	bl	8001270 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	3301      	adds	r3, #1
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	2b09      	cmp	r3, #9
 800135a:	ddf6      	ble.n	800134a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800135c:	f7ff ff70 	bl	8001240 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001374:	2395      	movs	r3, #149	; 0x95
 8001376:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e009      	b.n	8001392 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800137e:	1d3a      	adds	r2, r7, #4
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff72 	bl	8001270 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3301      	adds	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b05      	cmp	r3, #5
 8001396:	ddf2      	ble.n	800137e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001398:	e002      	b.n	80013a0 <SD_PowerOn+0x6c>
  {
    Count--;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3b01      	subs	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80013a0:	f7ff ff80 	bl	80012a4 <SPI_RxByte>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d002      	beq.n	80013b0 <SD_PowerOn+0x7c>
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f4      	bne.n	800139a <SD_PowerOn+0x66>
  }

  DESELECT();
 80013b0:	f7ff ff52 	bl	8001258 <DESELECT>
  SPI_TxByte(0XFF);
 80013b4:	20ff      	movs	r0, #255	; 0xff
 80013b6:	f7ff ff5b 	bl	8001270 <SPI_TxByte>

  PowerFlag = 1;
 80013ba:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <SD_PowerOn+0x94>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200000a5 	.word	0x200000a5

080013cc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <SD_PowerOff+0x14>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	200000a5 	.word	0x200000a5

080013e4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <SD_CheckPower+0x10>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	200000a5 	.word	0x200000a5

080013f8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <SD_RxDataBlock+0x68>)
 8001404:	220a      	movs	r2, #10
 8001406:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001408:	f7ff ff4c 	bl	80012a4 <SPI_RxByte>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	d104      	bne.n	8001420 <SD_RxDataBlock+0x28>
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <SD_RxDataBlock+0x68>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f3      	bne.n	8001408 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2bfe      	cmp	r3, #254	; 0xfe
 8001424:	d001      	beq.n	800142a <SD_RxDataBlock+0x32>
    return FALSE;
 8001426:	2300      	movs	r3, #0
 8001428:	e016      	b.n	8001458 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff55 	bl	80012e0 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff4f 	bl	80012e0 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3b02      	subs	r3, #2
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ed      	bne.n	800142a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800144e:	f7ff ff29 	bl	80012a4 <SPI_RxByte>
  SPI_RxByte();
 8001452:	f7ff ff27 	bl	80012a4 <SPI_RxByte>

  return TRUE;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000e5d 	.word	0x20000e5d

08001464 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001474:	f7ff ff42 	bl	80012fc <SD_ReadyWait>
 8001478:	4603      	mov	r3, r0
 800147a:	2bff      	cmp	r3, #255	; 0xff
 800147c:	d001      	beq.n	8001482 <SD_TxDataBlock+0x1e>
    return FALSE;
 800147e:	2300      	movs	r3, #0
 8001480:	e040      	b.n	8001504 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fef3 	bl	8001270 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2bfd      	cmp	r3, #253	; 0xfd
 800148e:	d031      	beq.n	80014f4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fee7 	bl	8001270 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fee0 	bl	8001270 <SPI_TxByte>
    } while (--wc);
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	73bb      	strb	r3, [r7, #14]
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1eb      	bne.n	8001494 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80014bc:	f7ff fef2 	bl	80012a4 <SPI_RxByte>
    SPI_RxByte();
 80014c0:	f7ff fef0 	bl	80012a4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80014c4:	e00b      	b.n	80014de <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80014c6:	f7ff feed 	bl	80012a4 <SPI_RxByte>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d006      	beq.n	80014e6 <SD_TxDataBlock+0x82>
        break;

      i++;
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	3301      	adds	r3, #1
 80014dc:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	2b40      	cmp	r3, #64	; 0x40
 80014e2:	d9f0      	bls.n	80014c6 <SD_TxDataBlock+0x62>
 80014e4:	e000      	b.n	80014e8 <SD_TxDataBlock+0x84>
        break;
 80014e6:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80014e8:	bf00      	nop
 80014ea:	f7ff fedb 	bl	80012a4 <SPI_RxByte>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0fa      	beq.n	80014ea <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d101      	bne.n	8001502 <SD_TxDataBlock+0x9e>
    return TRUE;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001518:	f7ff fef0 	bl	80012fc <SD_ReadyWait>
 800151c:	4603      	mov	r3, r0
 800151e:	2bff      	cmp	r3, #255	; 0xff
 8001520:	d001      	beq.n	8001526 <SD_SendCmd+0x1a>
    return 0xFF;
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	e040      	b.n	80015a8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fea1 	bl	8001270 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	0e1b      	lsrs	r3, r3, #24
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fe9b 	bl	8001270 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe95 	bl	8001270 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe8f 	bl	8001270 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe8a 	bl	8001270 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b40      	cmp	r3, #64	; 0x40
 8001564:	d101      	bne.n	800156a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001566:	2395      	movs	r3, #149	; 0x95
 8001568:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b48      	cmp	r3, #72	; 0x48
 800156e:	d101      	bne.n	8001574 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001570:	2387      	movs	r3, #135	; 0x87
 8001572:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe7a 	bl	8001270 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b4c      	cmp	r3, #76	; 0x4c
 8001580:	d101      	bne.n	8001586 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001582:	f7ff fe8f 	bl	80012a4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001586:	230a      	movs	r3, #10
 8001588:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800158a:	f7ff fe8b 	bl	80012a4 <SPI_RxByte>
 800158e:	4603      	mov	r3, r0
 8001590:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001592:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001596:	2b00      	cmp	r3, #0
 8001598:	da05      	bge.n	80015a6 <SD_SendCmd+0x9a>
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	3b01      	subs	r3, #1
 800159e:	73bb      	strb	r3, [r7, #14]
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f1      	bne.n	800158a <SD_SendCmd+0x7e>

  return res;
 80015a6:	7b7b      	ldrb	r3, [r7, #13]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0d5      	b.n	8001770 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80015c4:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <SD_disk_initialize+0x1c8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <SD_disk_initialize+0x2a>
    return Stat;
 80015d2:	4b69      	ldr	r3, [pc, #420]	; (8001778 <SD_disk_initialize+0x1c8>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	e0ca      	b.n	8001770 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80015da:	f7ff feab 	bl	8001334 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80015de:	f7ff fe2f 	bl	8001240 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80015e6:	2100      	movs	r1, #0
 80015e8:	2040      	movs	r0, #64	; 0x40
 80015ea:	f7ff ff8f 	bl	800150c <SD_SendCmd>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	f040 80a5 	bne.w	8001740 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80015f6:	4b61      	ldr	r3, [pc, #388]	; (800177c <SD_disk_initialize+0x1cc>)
 80015f8:	2264      	movs	r2, #100	; 0x64
 80015fa:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80015fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001600:	2048      	movs	r0, #72	; 0x48
 8001602:	f7ff ff83 	bl	800150c <SD_SendCmd>
 8001606:	4603      	mov	r3, r0
 8001608:	2b01      	cmp	r3, #1
 800160a:	d158      	bne.n	80016be <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e00c      	b.n	800162c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001612:	7bfc      	ldrb	r4, [r7, #15]
 8001614:	f7ff fe46 	bl	80012a4 <SPI_RxByte>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4423      	add	r3, r4
 8001622:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	3301      	adds	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d9ef      	bls.n	8001612 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001632:	7abb      	ldrb	r3, [r7, #10]
 8001634:	2b01      	cmp	r3, #1
 8001636:	f040 8083 	bne.w	8001740 <SD_disk_initialize+0x190>
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	2baa      	cmp	r3, #170	; 0xaa
 800163e:	d17f      	bne.n	8001740 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001640:	2100      	movs	r1, #0
 8001642:	2077      	movs	r0, #119	; 0x77
 8001644:	f7ff ff62 	bl	800150c <SD_SendCmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b01      	cmp	r3, #1
 800164c:	d807      	bhi.n	800165e <SD_disk_initialize+0xae>
 800164e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001652:	2069      	movs	r0, #105	; 0x69
 8001654:	f7ff ff5a 	bl	800150c <SD_SendCmd>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <SD_disk_initialize+0x1cc>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1eb      	bne.n	8001640 <SD_disk_initialize+0x90>
 8001668:	e000      	b.n	800166c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800166a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800166c:	4b43      	ldr	r3, [pc, #268]	; (800177c <SD_disk_initialize+0x1cc>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d064      	beq.n	8001740 <SD_disk_initialize+0x190>
 8001676:	2100      	movs	r1, #0
 8001678:	207a      	movs	r0, #122	; 0x7a
 800167a:	f7ff ff47 	bl	800150c <SD_SendCmd>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d15d      	bne.n	8001740 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e00c      	b.n	80016a4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800168a:	7bfc      	ldrb	r4, [r7, #15]
 800168c:	f7ff fe0a 	bl	80012a4 <SPI_RxByte>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4423      	add	r3, r4
 800169a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	3301      	adds	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d9ef      	bls.n	800168a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80016aa:	7a3b      	ldrb	r3, [r7, #8]
 80016ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SD_disk_initialize+0x108>
 80016b4:	2306      	movs	r3, #6
 80016b6:	e000      	b.n	80016ba <SD_disk_initialize+0x10a>
 80016b8:	2302      	movs	r3, #2
 80016ba:	73bb      	strb	r3, [r7, #14]
 80016bc:	e040      	b.n	8001740 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80016be:	2100      	movs	r1, #0
 80016c0:	2077      	movs	r0, #119	; 0x77
 80016c2:	f7ff ff23 	bl	800150c <SD_SendCmd>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d808      	bhi.n	80016de <SD_disk_initialize+0x12e>
 80016cc:	2100      	movs	r1, #0
 80016ce:	2069      	movs	r0, #105	; 0x69
 80016d0:	f7ff ff1c 	bl	800150c <SD_SendCmd>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d801      	bhi.n	80016de <SD_disk_initialize+0x12e>
 80016da:	2302      	movs	r3, #2
 80016dc:	e000      	b.n	80016e0 <SD_disk_initialize+0x130>
 80016de:	2301      	movs	r3, #1
 80016e0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d10e      	bne.n	8001706 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80016e8:	2100      	movs	r1, #0
 80016ea:	2077      	movs	r0, #119	; 0x77
 80016ec:	f7ff ff0e 	bl	800150c <SD_SendCmd>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d80e      	bhi.n	8001714 <SD_disk_initialize+0x164>
 80016f6:	2100      	movs	r1, #0
 80016f8:	2069      	movs	r0, #105	; 0x69
 80016fa:	f7ff ff07 	bl	800150c <SD_SendCmd>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001704:	e00d      	b.n	8001722 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001706:	2100      	movs	r1, #0
 8001708:	2041      	movs	r0, #65	; 0x41
 800170a:	f7ff feff 	bl	800150c <SD_SendCmd>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <SD_disk_initialize+0x1cc>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e1      	bne.n	80016e2 <SD_disk_initialize+0x132>
 800171e:	e000      	b.n	8001722 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001720:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <SD_disk_initialize+0x1cc>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <SD_disk_initialize+0x18c>
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	2050      	movs	r0, #80	; 0x50
 8001732:	f7ff feeb 	bl	800150c <SD_SendCmd>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <SD_disk_initialize+0x1d0>)
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001746:	f7ff fd87 	bl	8001258 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800174a:	f7ff fdab 	bl	80012a4 <SPI_RxByte>

  if (type)
 800174e:	7bbb      	ldrb	r3, [r7, #14]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <SD_disk_initialize+0x1c8>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SD_disk_initialize+0x1c8>)
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e001      	b.n	800176a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001766:	f7ff fe31 	bl	80013cc <SD_PowerOff>
  }

  return Stat;
 800176a:	4b03      	ldr	r3, [pc, #12]	; (8001778 <SD_disk_initialize+0x1c8>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000e5d 	.word	0x20000e5d
 8001780:	200000a4 	.word	0x200000a4

08001784 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001794:	2301      	movs	r3, #1
 8001796:	e002      	b.n	800179e <SD_disk_status+0x1a>

  return Stat;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <SD_disk_status+0x24>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000000 	.word	0x20000000

080017ac <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <SD_disk_read+0x1c>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <SD_disk_read+0x20>
    return RES_PARERR;
 80017c8:	2304      	movs	r3, #4
 80017ca:	e051      	b.n	8001870 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <SD_disk_read+0xcc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SD_disk_read+0x32>
    return RES_NOTRDY;
 80017da:	2303      	movs	r3, #3
 80017dc:	e048      	b.n	8001870 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <SD_disk_read+0xd0>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	607b      	str	r3, [r7, #4]

  SELECT();
 80017f0:	f7ff fd26 	bl	8001240 <SELECT>

  if (count == 1)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d111      	bne.n	800181e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	2051      	movs	r0, #81	; 0x51
 80017fe:	f7ff fe85 	bl	800150c <SD_SendCmd>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d129      	bne.n	800185c <SD_disk_read+0xb0>
 8001808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180c:	68b8      	ldr	r0, [r7, #8]
 800180e:	f7ff fdf3 	bl	80013f8 <SD_RxDataBlock>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d021      	beq.n	800185c <SD_disk_read+0xb0>
      count = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	e01e      	b.n	800185c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	2052      	movs	r0, #82	; 0x52
 8001822:	f7ff fe73 	bl	800150c <SD_SendCmd>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d117      	bne.n	800185c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800182c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001830:	68b8      	ldr	r0, [r7, #8]
 8001832:	f7ff fde1 	bl	80013f8 <SD_RxDataBlock>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00a      	beq.n	8001852 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001842:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3b01      	subs	r3, #1
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ed      	bne.n	800182c <SD_disk_read+0x80>
 8001850:	e000      	b.n	8001854 <SD_disk_read+0xa8>
          break;
 8001852:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001854:	2100      	movs	r1, #0
 8001856:	204c      	movs	r0, #76	; 0x4c
 8001858:	f7ff fe58 	bl	800150c <SD_SendCmd>
    }
  }

  DESELECT();
 800185c:	f7ff fcfc 	bl	8001258 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001860:	f7ff fd20 	bl	80012a4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	200000a4 	.word	0x200000a4

08001880 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <SD_disk_write+0x1c>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <SD_disk_write+0x20>
    return RES_PARERR;
 800189c:	2304      	movs	r3, #4
 800189e:	e06b      	b.n	8001978 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80018a0:	4b37      	ldr	r3, [pc, #220]	; (8001980 <SD_disk_write+0x100>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e062      	b.n	8001978 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <SD_disk_write+0x100>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SD_disk_write+0x44>
    return RES_WRPRT;
 80018c0:	2302      	movs	r3, #2
 80018c2:	e059      	b.n	8001978 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <SD_disk_write+0x104>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	025b      	lsls	r3, r3, #9
 80018d4:	607b      	str	r3, [r7, #4]

  SELECT();
 80018d6:	f7ff fcb3 	bl	8001240 <SELECT>

  if (count == 1)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d110      	bne.n	8001902 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	2058      	movs	r0, #88	; 0x58
 80018e4:	f7ff fe12 	bl	800150c <SD_SendCmd>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d13a      	bne.n	8001964 <SD_disk_write+0xe4>
 80018ee:	21fe      	movs	r1, #254	; 0xfe
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f7ff fdb7 	bl	8001464 <SD_TxDataBlock>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d033      	beq.n	8001964 <SD_disk_write+0xe4>
      count = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	e030      	b.n	8001964 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <SD_disk_write+0x104>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800190e:	2100      	movs	r1, #0
 8001910:	2077      	movs	r0, #119	; 0x77
 8001912:	f7ff fdfb 	bl	800150c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	2057      	movs	r0, #87	; 0x57
 800191a:	f7ff fdf7 	bl	800150c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	2059      	movs	r0, #89	; 0x59
 8001922:	f7ff fdf3 	bl	800150c <SD_SendCmd>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d11b      	bne.n	8001964 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800192c:	21fc      	movs	r1, #252	; 0xfc
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff fd98 	bl	8001464 <SD_TxDataBlock>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00a      	beq.n	8001950 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001940:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ee      	bne.n	800192c <SD_disk_write+0xac>
 800194e:	e000      	b.n	8001952 <SD_disk_write+0xd2>
          break;
 8001950:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001952:	21fd      	movs	r1, #253	; 0xfd
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fd85 	bl	8001464 <SD_TxDataBlock>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <SD_disk_write+0xe4>
      {
        count = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001964:	f7ff fc78 	bl	8001258 <DESELECT>
  SPI_RxByte();
 8001968:	f7ff fc9c 	bl	80012a4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000000 	.word	0x20000000
 8001984:	200000a4 	.word	0x200000a4

08001988 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b08b      	sub	sp, #44	; 0x2c
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	603a      	str	r2, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	460b      	mov	r3, r1
 8001996:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80019a2:	2304      	movs	r3, #4
 80019a4:	e11b      	b.n	8001bde <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d129      	bne.n	8001a06 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d017      	beq.n	80019ea <SD_disk_ioctl+0x62>
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	dc1f      	bgt.n	80019fe <SD_disk_ioctl+0x76>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <SD_disk_ioctl+0x40>
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d00b      	beq.n	80019de <SD_disk_ioctl+0x56>
 80019c6:	e01a      	b.n	80019fe <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80019c8:	f7ff fd0c 	bl	80013e4 <SD_CheckPower>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80019d2:	f7ff fcfb 	bl	80013cc <SD_PowerOff>
      res = RES_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019dc:	e0fd      	b.n	8001bda <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80019de:	f7ff fca9 	bl	8001334 <SD_PowerOn>
      res = RES_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019e8:	e0f7      	b.n	8001bda <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	1c5c      	adds	r4, r3, #1
 80019ee:	f7ff fcf9 	bl	80013e4 <SD_CheckPower>
 80019f2:	4603      	mov	r3, r0
 80019f4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019fc:	e0ed      	b.n	8001bda <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80019fe:	2304      	movs	r3, #4
 8001a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a04:	e0e9      	b.n	8001bda <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001a06:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <SD_disk_ioctl+0x260>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0e2      	b.n	8001bde <SD_disk_ioctl+0x256>

    SELECT();
 8001a18:	f7ff fc12 	bl	8001240 <SELECT>

    switch (ctrl)
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	2b0d      	cmp	r3, #13
 8001a20:	f200 80cc 	bhi.w	8001bbc <SD_disk_ioctl+0x234>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <SD_disk_ioctl+0xa4>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001b27 	.word	0x08001b27
 8001a30:	08001a65 	.word	0x08001a65
 8001a34:	08001b17 	.word	0x08001b17
 8001a38:	08001bbd 	.word	0x08001bbd
 8001a3c:	08001bbd 	.word	0x08001bbd
 8001a40:	08001bbd 	.word	0x08001bbd
 8001a44:	08001bbd 	.word	0x08001bbd
 8001a48:	08001bbd 	.word	0x08001bbd
 8001a4c:	08001bbd 	.word	0x08001bbd
 8001a50:	08001bbd 	.word	0x08001bbd
 8001a54:	08001bbd 	.word	0x08001bbd
 8001a58:	08001b39 	.word	0x08001b39
 8001a5c:	08001b5d 	.word	0x08001b5d
 8001a60:	08001b81 	.word	0x08001b81
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a64:	2100      	movs	r1, #0
 8001a66:	2049      	movs	r0, #73	; 0x49
 8001a68:	f7ff fd50 	bl	800150c <SD_SendCmd>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 80a8 	bne.w	8001bc4 <SD_disk_ioctl+0x23c>
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	2110      	movs	r1, #16
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fcbc 	bl	80013f8 <SD_RxDataBlock>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 809e 	beq.w	8001bc4 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001a88:	7b3b      	ldrb	r3, [r7, #12]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10e      	bne.n	8001ab0 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a92:	7d7b      	ldrb	r3, [r7, #21]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	7d3b      	ldrb	r3, [r7, #20]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001aa6:	8bfb      	ldrh	r3, [r7, #30]
 8001aa8:	029a      	lsls	r2, r3, #10
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e02e      	b.n	8001b0e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ab0:	7c7b      	ldrb	r3, [r7, #17]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	7dbb      	ldrb	r3, [r7, #22]
 8001aba:	09db      	lsrs	r3, r3, #7
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	7d7b      	ldrb	r3, [r7, #21]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f003 0306 	and.w	r3, r3, #6
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001ad8:	7d3b      	ldrb	r3, [r7, #20]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	7cfb      	ldrb	r3, [r7, #19]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	7cbb      	ldrb	r3, [r7, #18]
 8001aee:	029b      	lsls	r3, r3, #10
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b00:	8bfa      	ldrh	r2, [r7, #30]
 8001b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b06:	3b09      	subs	r3, #9
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001b14:	e056      	b.n	8001bc4 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b24:	e055      	b.n	8001bd2 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001b26:	f7ff fbe9 	bl	80012fc <SD_ReadyWait>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2bff      	cmp	r3, #255	; 0xff
 8001b2e:	d14b      	bne.n	8001bc8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b36:	e047      	b.n	8001bc8 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2049      	movs	r0, #73	; 0x49
 8001b3c:	f7ff fce6 	bl	800150c <SD_SendCmd>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d142      	bne.n	8001bcc <SD_disk_ioctl+0x244>
 8001b46:	2110      	movs	r1, #16
 8001b48:	6a38      	ldr	r0, [r7, #32]
 8001b4a:	f7ff fc55 	bl	80013f8 <SD_RxDataBlock>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03b      	beq.n	8001bcc <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b5a:	e037      	b.n	8001bcc <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	204a      	movs	r0, #74	; 0x4a
 8001b60:	f7ff fcd4 	bl	800150c <SD_SendCmd>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d132      	bne.n	8001bd0 <SD_disk_ioctl+0x248>
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	6a38      	ldr	r0, [r7, #32]
 8001b6e:	f7ff fc43 	bl	80013f8 <SD_RxDataBlock>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d02b      	beq.n	8001bd0 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b7e:	e027      	b.n	8001bd0 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001b80:	2100      	movs	r1, #0
 8001b82:	207a      	movs	r0, #122	; 0x7a
 8001b84:	f7ff fcc2 	bl	800150c <SD_SendCmd>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d116      	bne.n	8001bbc <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b94:	e00b      	b.n	8001bae <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001b96:	6a3c      	ldr	r4, [r7, #32]
 8001b98:	1c63      	adds	r3, r4, #1
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	f7ff fb82 	bl	80012a4 <SPI_RxByte>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d9ef      	bls.n	8001b96 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bc2:	e006      	b.n	8001bd2 <SD_disk_ioctl+0x24a>
      break;
 8001bc4:	bf00      	nop
 8001bc6:	e004      	b.n	8001bd2 <SD_disk_ioctl+0x24a>
      break;
 8001bc8:	bf00      	nop
 8001bca:	e002      	b.n	8001bd2 <SD_disk_ioctl+0x24a>
      break;
 8001bcc:	bf00      	nop
 8001bce:	e000      	b.n	8001bd2 <SD_disk_ioctl+0x24a>
      break;
 8001bd0:	bf00      	nop
    }

    DESELECT();
 8001bd2:	f7ff fb41 	bl	8001258 <DESELECT>
    SPI_RxByte();
 8001bd6:	f7ff fb65 	bl	80012a4 <SPI_RxByte>
  }

  return res;
 8001bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	372c      	adds	r7, #44	; 0x2c
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000

08001bec <forceGauge_uart_Init_DMA>:

/*
 *	Função que inicia a leitura
 */
void forceGauge_uart_Init_DMA(fGauge_HandleTypeDef *hfGauge)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	//hfGauge->result = HAL_UART_Init(hfGauge->huart);
	hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f008 fc3b 	bl	800a47a <HAL_UART_Receive_DMA>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <forceGauge_getForce>:
/*
 * 	Função que lê os valores no buffer e converte a string em um int.
 * 	Essa função tambem detecta se a celula de carga foi desconectada e reinicia a leitura quando possivel.
 */
void forceGauge_getForce(fGauge_HandleTypeDef *hfGauge)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	int force = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]

	/*	Logica para reiniciar a leitura	*/
	if (hfGauge->huart->hdmatx->State != HAL_DMA_STATE_BUSY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d00b      	beq.n	8001c46 <forceGauge_getForce+0x32>
		hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2210      	movs	r2, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f008 fc1e 	bl	800a47a <HAL_UART_Receive_DMA>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	761a      	strb	r2, [r3, #24]

	/*	Conversão string to int	*/
	if (hfGauge->rxbuffer[14] >=48 && hfGauge->rxbuffer[14] <= 57)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7c9b      	ldrb	r3, [r3, #18]
 8001c4a:	2b2f      	cmp	r3, #47	; 0x2f
 8001c4c:	d94d      	bls.n	8001cea <forceGauge_getForce+0xd6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7c9b      	ldrb	r3, [r3, #18]
 8001c52:	2b39      	cmp	r3, #57	; 0x39
 8001c54:	d849      	bhi.n	8001cea <forceGauge_getForce+0xd6>
	{
		force += (hfGauge->rxbuffer[14] - 48) * 1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7c9b      	ldrb	r3, [r3, #18]
 8001c5a:	3b30      	subs	r3, #48	; 0x30
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[13] - 48) * 10;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7c5b      	ldrb	r3, [r3, #17]
 8001c66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[12] - 48) * 100;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7c1b      	ldrb	r3, [r3, #16]
 8001c7e:	3b30      	subs	r3, #48	; 0x30
 8001c80:	2264      	movs	r2, #100	; 0x64
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[11] - 48) * 1000;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7bdb      	ldrb	r3, [r3, #15]
 8001c90:	3b30      	subs	r3, #48	; 0x30
 8001c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[10] - 48) * 10000;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7b9b      	ldrb	r3, [r3, #14]
 8001ca4:	3b30      	subs	r3, #48	; 0x30
 8001ca6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[9] - 48) * 100000;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7b5b      	ldrb	r3, [r3, #13]
 8001cb8:	3b30      	subs	r3, #48	; 0x30
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <forceGauge_getForce+0xe4>)
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[8] - 48) * 1000000;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7b1b      	ldrb	r3, [r3, #12]
 8001cca:	3b30      	subs	r3, #48	; 0x30
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <forceGauge_getForce+0xe8>)
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[7] - 48) * 10000000;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7adb      	ldrb	r3, [r3, #11]
 8001cdc:	3b30      	subs	r3, #48	; 0x30
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <forceGauge_getForce+0xec>)
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
	}

	hfGauge->force = force;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	615a      	str	r2, [r3, #20]
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	000186a0 	.word	0x000186a0
 8001cfc:	000f4240 	.word	0x000f4240
 8001d00:	00989680 	.word	0x00989680

08001d04 <indutivo_Init>:

/*
 * 	Função para iniciar a leitura
 */
HAL_StatusTypeDef indutivo_Init(indutivo_typedef *hindutivo)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	hindutivo->value_raw = 0;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
	hindutivo->freq = 0;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
	hindutivo->count = 0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]

	result = HAL_TIM_Base_Start_IT(hindutivo->htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	4618      	mov	r0, r3
 8001d24:	f007 fc84 	bl	8009630 <HAL_TIM_Base_Start_IT>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]
	result = HAL_TIM_IC_Start_IT(hindutivo->htim, hindutivo->channel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f007 fd24 	bl	8009784 <HAL_TIM_IC_Start_IT>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	73fb      	strb	r3, [r7, #15]

	return result;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <indutivo_filtro>:

/*
 * 	Função para o filtro de dados, calcula o value
 */
void indutivo_filtro(indutivo_typedef *hindutivo)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	hindutivo->value = 0;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]

	if (hindutivo->value_raw > 9999)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d62:	4293      	cmp	r3, r2
 8001d64:	dd03      	ble.n	8001d6e <indutivo_filtro+0x22>
		hindutivo->value_raw = hindutivo->buf[4];
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 4; i++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e00f      	b.n	8001d94 <indutivo_filtro+0x48>
		hindutivo->buf[i] = hindutivo->buf[i+1];
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3301      	adds	r3, #1
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3304      	adds	r3, #4
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	ddec      	ble.n	8001d74 <indutivo_filtro+0x28>

	hindutivo->buf[4] = hindutivo->value_raw;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

	for (int i = 0; i < 5; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	e00d      	b.n	8001dc4 <indutivo_filtro+0x78>
		hindutivo->value += hindutivo->buf[i];
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3304      	adds	r3, #4
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	441a      	add	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	ddee      	ble.n	8001da8 <indutivo_filtro+0x5c>

	hindutivo->value = (int)hindutivo->value/5.0;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fbc4 	bl	800055c <__aeabi_i2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <indutivo_filtro+0xac>)
 8001dda:	f7fe fd53 	bl	8000884 <__aeabi_ddiv>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7fe fe35 	bl	8000a54 <__aeabi_d2iz>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]
}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40140000 	.word	0x40140000
 8001dfc:	00000000 	.word	0x00000000

08001e00 <indutivo_calc>:
/*
 * 	Função pra ser chamada quando ocorre a interrupção de sinal
 * 	Calcula o value_raw
 */
void indutivo_calc(indutivo_typedef *hindutivo)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	hindutivo->count += __HAL_TIM_GET_COMPARE(hindutivo->htim, hindutivo->channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d104      	bne.n	8001e1a <indutivo_calc+0x1a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	e015      	b.n	8001e46 <indutivo_calc+0x46>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d104      	bne.n	8001e2c <indutivo_calc+0x2c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2a:	e00c      	b.n	8001e46 <indutivo_calc+0x46>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d104      	bne.n	8001e3e <indutivo_calc+0x3e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	e003      	b.n	8001e46 <indutivo_calc+0x46>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68d2      	ldr	r2, [r2, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(hindutivo->htim, 0);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
	hindutivo->freq = (int)(100000000.0 / hindutivo->count);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb7b 	bl	800055c <__aeabi_i2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	a115      	add	r1, pc, #84	; (adr r1, 8001ec0 <indutivo_calc+0xc0>)
 8001e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e70:	f7fe fd08 	bl	8000884 <__aeabi_ddiv>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fdea 	bl	8000a54 <__aeabi_d2iz>
 8001e80:	4602      	mov	r2, r0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
	hindutivo->value_raw = (int)(hindutivo->constante*hindutivo->freq);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681c      	ldr	r4, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe ff12 	bl	8000cb8 <__aeabi_i2f>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4619      	mov	r1, r3
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7fe f959 	bl	8000150 <__aeabi_fmul>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff5d 	bl	8000d60 <__aeabi_f2iz>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
	indutivo_filtro(hindutivo);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff4d 	bl	8001d4c <indutivo_filtro>
	hindutivo->count = 0;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	4197d784 	.word	0x4197d784

08001ec8 <indutivo_reset>:
/*
 * 	Função pra ser chamada quando o timer atinge valor maximo
 * 	Zera os valores
 */
void indutivo_reset(indutivo_typedef *hindutivo)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	if(hindutivo->count<1000000)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <indutivo_reset+0x3c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	dc07      	bgt.n	8001eea <indutivo_reset+0x22>
	{
		hindutivo->count+=50000;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8001ee2:	3350      	adds	r3, #80	; 0x50
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	60d3      	str	r3, [r2, #12]
	{
		hindutivo->freq=0;
		hindutivo->value_raw=0;
		indutivo_filtro(hindutivo);
	}
}
 8001ee8:	e008      	b.n	8001efc <indutivo_reset+0x34>
		hindutivo->freq=0;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
		hindutivo->value_raw=0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
		indutivo_filtro(hindutivo);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ff28 	bl	8001d4c <indutivo_filtro>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	000f423f 	.word	0x000f423f

08001f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0c:	f001 fc0e 	bl	800372c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f10:	f000 f84e 	bl	8001fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f14:	f000 fb60 	bl	80025d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f18:	f000 fb38 	bl	800258c <MX_DMA_Init>
  MX_ADC1_Init();
 8001f1c:	f000 f8a4 	bl	8002068 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001f20:	f000 f926 	bl	8002170 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001f24:	f000 f952 	bl	80021cc <MX_SPI1_Init>
  MX_TIM2_Init();
 8001f28:	f000 f9fa 	bl	8002320 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f2c:	f000 fa68 	bl	8002400 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001f30:	f008 ffb6 	bl	800aea0 <MX_FATFS_Init>
  MX_TIM4_Init();
 8001f34:	f000 fab2 	bl	800249c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f38:	f000 f97e 	bl	8002238 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001f3c:	f000 fafc 	bl	8002538 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8001f40:	f000 f8e0 	bl	8002104 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	fresult = SD_Init();
 8001f44:	f000 fc1c 	bl	8002780 <SD_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <main+0x9c>)
 8001f4e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NOT_READY)
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <main+0x9c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d103      	bne.n	8001f60 <main+0x58>
		sdCard.mode = 9;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <main+0xa0>)
 8001f5a:	2209      	movs	r2, #9
 8001f5c:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754

	if (sdCard.mode == 0)
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <main+0xa0>)
 8001f62:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d104      	bne.n	8001f74 <main+0x6c>
	{
	  rot_Init();
 8001f6a:	f000 fba9 	bl	80026c0 <rot_Init>
	  vel_Init();
 8001f6e:	f001 fb8d 	bl	800368c <vel_Init>
 8001f72:	e015      	b.n	8001fa0 <main+0x98>
	}
	else if (sdCard.mode == 1)
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <main+0xa0>)
 8001f76:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d104      	bne.n	8001f88 <main+0x80>
	{
		dina_Init();
 8001f7e:	f7ff f947 	bl	8001210 <dina_Init>
		rot_Init();
 8001f82:	f000 fb9d 	bl	80026c0 <rot_Init>
 8001f86:	e00b      	b.n	8001fa0 <main+0x98>
	}
	else if (sdCard.mode == 2)
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <main+0xa0>)
 8001f8a:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d106      	bne.n	8001fa0 <main+0x98>
	{
		can_bus_Init();
 8001f92:	f7ff f89d 	bl	80010d0 <can_bus_Init>
		aceGir_Init(&hi2c2);
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <main+0xa4>)
 8001f98:	f7fe ff22 	bl	8000de0 <aceGir_Init>
		ADC_DMA_Init();
 8001f9c:	f7fe ff06 	bl	8000dac <ADC_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <main+0x98>
 8001fa2:	bf00      	nop
 8001fa4:	20000db8 	.word	0x20000db8
 8001fa8:	200004c4 	.word	0x200004c4
 8001fac:	20000c1c 	.word	0x20000c1c

08001fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b094      	sub	sp, #80	; 0x50
 8001fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fba:	2228      	movs	r2, #40	; 0x28
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00c faf2 	bl	800e5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ffc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002000:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002006:	4618      	mov	r0, r3
 8002008:	f006 f816 	bl	8008038 <HAL_RCC_OscConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002012:	f000 fb4f 	bl	80026b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002016:	230f      	movs	r3, #15
 8002018:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002026:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2102      	movs	r1, #2
 8002032:	4618      	mov	r0, r3
 8002034:	f006 fa80 	bl	8008538 <HAL_RCC_ClockConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800203e:	f000 fb39 	bl	80026b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002042:	2302      	movs	r3, #2
 8002044:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f006 fc0c 	bl	800886c <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800205a:	f000 fb2b 	bl	80026b4 <Error_Handler>
  }
}
 800205e:	bf00      	nop
 8002060:	3750      	adds	r7, #80	; 0x50
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <MX_ADC1_Init+0x94>)
 800207a:	4a21      	ldr	r2, [pc, #132]	; (8002100 <MX_ADC1_Init+0x98>)
 800207c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <MX_ADC1_Init+0x94>)
 8002080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002084:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <MX_ADC1_Init+0x94>)
 8002088:	2201      	movs	r2, #1
 800208a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <MX_ADC1_Init+0x94>)
 800208e:	2200      	movs	r2, #0
 8002090:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_ADC1_Init+0x94>)
 8002094:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002098:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <MX_ADC1_Init+0x94>)
 800209c:	2200      	movs	r2, #0
 800209e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <MX_ADC1_Init+0x94>)
 80020a2:	2202      	movs	r2, #2
 80020a4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a6:	4815      	ldr	r0, [pc, #84]	; (80020fc <MX_ADC1_Init+0x94>)
 80020a8:	f001 fba2 	bl	80037f0 <HAL_ADC_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020b2:	f000 faff 	bl	80026b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020b6:	2307      	movs	r3, #7
 80020b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020be:	2307      	movs	r3, #7
 80020c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <MX_ADC1_Init+0x94>)
 80020c8:	f001 fd64 	bl	8003b94 <HAL_ADC_ConfigChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020d2:	f000 faef 	bl	80026b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80020d6:	2309      	movs	r3, #9
 80020d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020da:	2302      	movs	r3, #2
 80020dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <MX_ADC1_Init+0x94>)
 80020e4:	f001 fd56 	bl	8003b94 <HAL_ADC_ConfigChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80020ee:	f000 fae1 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200002e4 	.word	0x200002e4
 8002100:	40012400 	.word	0x40012400

08002104 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_CAN_Init+0x64>)
 800210a:	4a18      	ldr	r2, [pc, #96]	; (800216c <MX_CAN_Init+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <MX_CAN_Init+0x64>)
 8002110:	2212      	movs	r2, #18
 8002112:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_CAN_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <MX_CAN_Init+0x64>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_CAN_Init+0x64>)
 8002122:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002126:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_CAN_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_CAN_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_CAN_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_CAN_Init+0x64>)
 800213c:	2200      	movs	r2, #0
 800213e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_CAN_Init+0x64>)
 8002142:	2200      	movs	r2, #0
 8002144:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_CAN_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_CAN_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_CAN_Init+0x64>)
 8002154:	f001 ffc4 	bl	80040e0 <HAL_CAN_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800215e:	f000 faa9 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000040c 	.word	0x2000040c
 800216c:	40006400 	.word	0x40006400

08002170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <MX_I2C2_Init+0x50>)
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <MX_I2C2_Init+0x54>)
 8002178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_I2C2_Init+0x50>)
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <MX_I2C2_Init+0x58>)
 800217e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_I2C2_Init+0x50>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_I2C2_Init+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_I2C2_Init+0x50>)
 800218e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002192:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <MX_I2C2_Init+0x50>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_I2C2_Init+0x50>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <MX_I2C2_Init+0x50>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_I2C2_Init+0x50>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_I2C2_Init+0x50>)
 80021ae:	f003 fa6f 	bl	8005690 <HAL_I2C_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021b8:	f000 fa7c 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000c1c 	.word	0x20000c1c
 80021c4:	40005800 	.word	0x40005800
 80021c8:	000186a0 	.word	0x000186a0

080021cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <MX_SPI1_Init+0x64>)
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <MX_SPI1_Init+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_SPI1_Init+0x64>)
 80021d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <MX_SPI1_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <MX_SPI1_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_SPI1_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <MX_SPI1_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_SPI1_Init+0x64>)
 80021f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_SPI1_Init+0x64>)
 8002200:	2210      	movs	r2, #16
 8002202:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <MX_SPI1_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_SPI1_Init+0x64>)
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <MX_SPI1_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_SPI1_Init+0x64>)
 8002218:	220a      	movs	r2, #10
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <MX_SPI1_Init+0x64>)
 800221e:	f006 fc9f 	bl	8008b60 <HAL_SPI_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002228:	f000 fa44 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000dbc 	.word	0x20000dbc
 8002234:	40013000 	.word	0x40013000

08002238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223e:	f107 0318 	add.w	r3, r7, #24
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002256:	463b      	mov	r3, r7
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <MX_TIM1_Init+0xe0>)
 8002264:	4a2d      	ldr	r2, [pc, #180]	; (800231c <MX_TIM1_Init+0xe4>)
 8002266:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <MX_TIM1_Init+0xe0>)
 800226a:	2247      	movs	r2, #71	; 0x47
 800226c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <MX_TIM1_Init+0xe0>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <MX_TIM1_Init+0xe0>)
 8002276:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800227a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <MX_TIM1_Init+0xe0>)
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002282:	4b25      	ldr	r3, [pc, #148]	; (8002318 <MX_TIM1_Init+0xe0>)
 8002284:	2200      	movs	r2, #0
 8002286:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <MX_TIM1_Init+0xe0>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800228e:	4822      	ldr	r0, [pc, #136]	; (8002318 <MX_TIM1_Init+0xe0>)
 8002290:	f007 f97e 	bl	8009590 <HAL_TIM_Base_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800229a:	f000 fa0b 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	4619      	mov	r1, r3
 80022aa:	481b      	ldr	r0, [pc, #108]	; (8002318 <MX_TIM1_Init+0xe0>)
 80022ac:	f007 fd0c 	bl	8009cc8 <HAL_TIM_ConfigClockSource>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80022b6:	f000 f9fd 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80022ba:	4817      	ldr	r0, [pc, #92]	; (8002318 <MX_TIM1_Init+0xe0>)
 80022bc:	f007 fa0a 	bl	80096d4 <HAL_TIM_IC_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80022c6:	f000 f9f5 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	4619      	mov	r1, r3
 80022d8:	480f      	ldr	r0, [pc, #60]	; (8002318 <MX_TIM1_Init+0xe0>)
 80022da:	f008 f811 	bl	800a300 <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80022e4:	f000 f9e6 	bl	80026b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022e8:	2300      	movs	r3, #0
 80022ea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022ec:	2301      	movs	r3, #1
 80022ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80022f4:	230f      	movs	r3, #15
 80022f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	2200      	movs	r2, #0
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <MX_TIM1_Init+0xe0>)
 8002300:	f007 fc4e 	bl	8009ba0 <HAL_TIM_IC_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800230a:	f000 f9d3 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000d70 	.word	0x20000d70
 800231c:	40012c00 	.word	0x40012c00

08002320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002326:	f107 0318 	add.w	r3, r7, #24
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800233e:	463b      	mov	r3, r7
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <MX_TIM2_Init+0xdc>)
 800234c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002350:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <MX_TIM2_Init+0xdc>)
 8002354:	2247      	movs	r2, #71	; 0x47
 8002356:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b28      	ldr	r3, [pc, #160]	; (80023fc <MX_TIM2_Init+0xdc>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800235e:	4b27      	ldr	r3, [pc, #156]	; (80023fc <MX_TIM2_Init+0xdc>)
 8002360:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002364:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <MX_TIM2_Init+0xdc>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <MX_TIM2_Init+0xdc>)
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002372:	4822      	ldr	r0, [pc, #136]	; (80023fc <MX_TIM2_Init+0xdc>)
 8002374:	f007 f90c 	bl	8009590 <HAL_TIM_Base_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800237e:	f000 f999 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002386:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002388:	f107 0318 	add.w	r3, r7, #24
 800238c:	4619      	mov	r1, r3
 800238e:	481b      	ldr	r0, [pc, #108]	; (80023fc <MX_TIM2_Init+0xdc>)
 8002390:	f007 fc9a 	bl	8009cc8 <HAL_TIM_ConfigClockSource>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800239a:	f000 f98b 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800239e:	4817      	ldr	r0, [pc, #92]	; (80023fc <MX_TIM2_Init+0xdc>)
 80023a0:	f007 f998 	bl	80096d4 <HAL_TIM_IC_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80023aa:	f000 f983 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4619      	mov	r1, r3
 80023bc:	480f      	ldr	r0, [pc, #60]	; (80023fc <MX_TIM2_Init+0xdc>)
 80023be:	f007 ff9f 	bl	800a300 <HAL_TIMEx_MasterConfigSynchronization>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80023c8:	f000 f974 	bl	80026b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023cc:	2300      	movs	r3, #0
 80023ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023d0:	2301      	movs	r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80023d8:	230f      	movs	r3, #15
 80023da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023dc:	463b      	mov	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	4619      	mov	r1, r3
 80023e2:	4806      	ldr	r0, [pc, #24]	; (80023fc <MX_TIM2_Init+0xdc>)
 80023e4:	f007 fbdc 	bl	8009ba0 <HAL_TIM_IC_ConfigChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80023ee:	f000 f961 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	3728      	adds	r7, #40	; 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000e14 	.word	0x20000e14

08002400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	463b      	mov	r3, r7
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800241c:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <MX_TIM3_Init+0x94>)
 800241e:	4a1e      	ldr	r2, [pc, #120]	; (8002498 <MX_TIM3_Init+0x98>)
 8002420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <MX_TIM3_Init+0x94>)
 8002424:	2247      	movs	r2, #71	; 0x47
 8002426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <MX_TIM3_Init+0x94>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <MX_TIM3_Init+0x94>)
 8002430:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <MX_TIM3_Init+0x94>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <MX_TIM3_Init+0x94>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002442:	4814      	ldr	r0, [pc, #80]	; (8002494 <MX_TIM3_Init+0x94>)
 8002444:	f007 f8a4 	bl	8009590 <HAL_TIM_Base_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800244e:	f000 f931 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	4619      	mov	r1, r3
 800245e:	480d      	ldr	r0, [pc, #52]	; (8002494 <MX_TIM3_Init+0x94>)
 8002460:	f007 fc32 	bl	8009cc8 <HAL_TIM_ConfigClockSource>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800246a:	f000 f923 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002476:	463b      	mov	r3, r7
 8002478:	4619      	mov	r1, r3
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <MX_TIM3_Init+0x94>)
 800247c:	f007 ff40 	bl	800a300 <HAL_TIMEx_MasterConfigSynchronization>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002486:	f000 f915 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000c70 	.word	0x20000c70
 8002498:	40000400 	.word	0x40000400

0800249c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b0:	463b      	mov	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_TIM4_Init+0x94>)
 80024ba:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <MX_TIM4_Init+0x98>)
 80024bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <MX_TIM4_Init+0x94>)
 80024c0:	2247      	movs	r2, #71	; 0x47
 80024c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_TIM4_Init+0x94>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <MX_TIM4_Init+0x94>)
 80024cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80024d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <MX_TIM4_Init+0x94>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MX_TIM4_Init+0x94>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024de:	4814      	ldr	r0, [pc, #80]	; (8002530 <MX_TIM4_Init+0x94>)
 80024e0:	f007 f856 	bl	8009590 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80024ea:	f000 f8e3 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4619      	mov	r1, r3
 80024fa:	480d      	ldr	r0, [pc, #52]	; (8002530 <MX_TIM4_Init+0x94>)
 80024fc:	f007 fbe4 	bl	8009cc8 <HAL_TIM_ConfigClockSource>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002506:	f000 f8d5 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <MX_TIM4_Init+0x94>)
 8002518:	f007 fef2 	bl	800a300 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002522:	f000 f8c7 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000314 	.word	0x20000314
 8002534:	40000800 	.word	0x40000800

08002538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 800253e:	4a12      	ldr	r2, [pc, #72]	; (8002588 <MX_USART1_UART_Init+0x50>)
 8002540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 8002544:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 800255e:	220c      	movs	r2, #12
 8002560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_USART1_UART_Init+0x4c>)
 8002570:	f007 ff36 	bl	800a3e0 <HAL_UART_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800257a:	f000 f89b 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000434 	.word	0x20000434
 8002588:	40013800 	.word	0x40013800

0800258c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <MX_DMA_Init+0x48>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <MX_DMA_Init+0x48>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6153      	str	r3, [r2, #20]
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <MX_DMA_Init+0x48>)
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	200b      	movs	r0, #11
 80025b0:	f002 fbd7 	bl	8004d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025b4:	200b      	movs	r0, #11
 80025b6:	f002 fbf0 	bl	8004d9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	200f      	movs	r0, #15
 80025c0:	f002 fbcf 	bl	8004d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80025c4:	200f      	movs	r0, #15
 80025c6:	f002 fbe8 	bl	8004d9a <HAL_NVIC_EnableIRQ>

}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000

080025d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 0310 	add.w	r3, r7, #16
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ec:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <MX_GPIO_Init+0xd0>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <MX_GPIO_Init+0xd0>)
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <MX_GPIO_Init+0xd0>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <MX_GPIO_Init+0xd0>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <MX_GPIO_Init+0xd0>)
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <MX_GPIO_Init+0xd0>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <MX_GPIO_Init+0xd0>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <MX_GPIO_Init+0xd0>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <MX_GPIO_Init+0xd0>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <MX_GPIO_Init+0xd0>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <MX_GPIO_Init+0xd0>)
 800263a:	f043 0308 	orr.w	r3, r3, #8
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <MX_GPIO_Init+0xd0>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800264c:	2200      	movs	r2, #0
 800264e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002652:	4816      	ldr	r0, [pc, #88]	; (80026ac <MX_GPIO_Init+0xd4>)
 8002654:	f002 ffea 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265e:	4814      	ldr	r0, [pc, #80]	; (80026b0 <MX_GPIO_Init+0xd8>)
 8002660:	f002 ffe4 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8002664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266a:	2301      	movs	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2302      	movs	r3, #2
 8002674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	4619      	mov	r1, r3
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <MX_GPIO_Init+0xd4>)
 800267e:	f002 fe51 	bl	8005324 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	2301      	movs	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002690:	2301      	movs	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	4619      	mov	r1, r3
 800269a:	4805      	ldr	r0, [pc, #20]	; (80026b0 <MX_GPIO_Init+0xd8>)
 800269c:	f002 fe42 	bl	8005324 <HAL_GPIO_Init>

}
 80026a0:	bf00      	nop
 80026a2:	3720      	adds	r7, #32
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40011000 	.word	0x40011000
 80026b0:	40010800 	.word	0x40010800

080026b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b8:	b672      	cpsid	i
}
 80026ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026bc:	e7fe      	b.n	80026bc <Error_Handler+0x8>
	...

080026c0 <rot_Init>:

/*
 * 	Função de inicialização
 */
void rot_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	rot.constante = 0.6;			/* < Salva a constante para calculo da rotação do motor */
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <rot_Init+0x20>)
 80026c6:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <rot_Init+0x24>)
 80026c8:	601a      	str	r2, [r3, #0]
	rot.htim = &htim1;				/* < Salva o ponteiro do Timer que será utilizado */
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <rot_Init+0x20>)
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <rot_Init+0x28>)
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
	rot.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <rot_Init+0x20>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c

    	indutivo_Init(&rot);			/* < Chama função de inicialização */
 80026d6:	4802      	ldr	r0, [pc, #8]	; (80026e0 <rot_Init+0x20>)
 80026d8:	f7ff fb14 	bl	8001d04 <indutivo_Init>
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000494 	.word	0x20000494
 80026e4:	3f19999a 	.word	0x3f19999a
 80026e8:	20000d70 	.word	0x20000d70

080026ec <rot_Reset>:

/*
 * 	Função de reset
 */
void rot_Reset(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	indutivo_reset(&rot);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <rot_Reset+0x10>)
 80026f2:	f7ff fbe9 	bl	8001ec8 <indutivo_reset>
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000494 	.word	0x20000494

08002700 <rot_Calc>:

/*
 * 	Função de calculo
 */
void rot_Calc(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	indutivo_calc(&rot);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <rot_Calc+0x10>)
 8002706:	f7ff fb7b 	bl	8001e00 <indutivo_calc>
	//LDEBUG;
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000494 	.word	0x20000494

08002714 <bufsize>:

/*
 * 	Função para calcular tamanho de um buffer
 */
int bufsize(char *buf)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8002720:	e002      	b.n	8002728 <bufsize+0x14>
		i++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3301      	adds	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f6      	bne.n	8002722 <bufsize+0xe>
	return i;
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <bufclear>:

/*
 * 	Função para limpar um buffer
 */
void bufclear(SD_CARD_typedef *buf)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	for (int i=0; i<bufsize(buf->buffer); i++)
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e009      	b.n	8002762 <bufclear+0x22>
		buf->buffer[i] = '\0';
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<bufsize(buf->buffer); i++)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3301      	adds	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ffd3 	bl	8002714 <bufsize>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4293      	cmp	r3, r2
 8002774:	dbeb      	blt.n	800274e <bufclear+0xe>
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <SD_Init>:

/*
 * 	Inicialização do cartão sd
 */
FRESULT SD_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 8002784:	2200      	movs	r2, #0
 8002786:	4926      	ldr	r1, [pc, #152]	; (8002820 <SD_Init+0xa0>)
 8002788:	4826      	ldr	r0, [pc, #152]	; (8002824 <SD_Init+0xa4>)
 800278a:	f00a fecd 	bl	800d528 <f_mount>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	4b25      	ldr	r3, [pc, #148]	; (8002828 <SD_Init+0xa8>)
 8002794:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <SD_Init+0xa8>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <SD_Init+0x24>
		return fresult;
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <SD_Init+0xa8>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	e03a      	b.n	800281a <SD_Init+0x9a>

	fresult = SD_loadSettings();
 80027a4:	f000 f846 	bl	8002834 <SD_loadSettings>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <SD_Init+0xa8>)
 80027ae:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80027b0:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <SD_Init+0xa8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <SD_Init+0x3e>
		return fresult;
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <SD_Init+0xa8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	e02d      	b.n	800281a <SD_Init+0x9a>


	fresult = SD_createFile();
 80027be:	f000 f969 	bl	8002a94 <SD_createFile>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <SD_Init+0xa8>)
 80027c8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <SD_Init+0xa8>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <SD_Init+0x58>
		return fresult;
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <SD_Init+0xa8>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	e020      	b.n	800281a <SD_Init+0x9a>

	bufclear(&sdCard);
 80027d8:	4812      	ldr	r0, [pc, #72]	; (8002824 <SD_Init+0xa4>)
 80027da:	f7ff ffb1 	bl	8002740 <bufclear>

	LDEBUG;
 80027de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027e2:	4812      	ldr	r0, [pc, #72]	; (800282c <SD_Init+0xac>)
 80027e4:	f002 ff3a 	bl	800565c <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <SD_Init+0xa4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	sdCard.blen = 0;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <SD_Init+0xa4>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <SD_Init+0xa4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <SD_Init+0xa4>)
 8002802:	2200      	movs	r2, #0
 8002804:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
	sdCard.timer = 0;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <SD_Init+0xa4>)
 800280a:	2200      	movs	r2, #0
 800280c:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736

	HAL_TIM_Base_Start_IT(&htim4);
 8002810:	4807      	ldr	r0, [pc, #28]	; (8002830 <SD_Init+0xb0>)
 8002812:	f006 ff0d 	bl	8009630 <HAL_TIM_Base_Start_IT>

	return fresult;
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <SD_Init+0xa8>)
 8002818:	781b      	ldrb	r3, [r3, #0]
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	0800ee44 	.word	0x0800ee44
 8002824:	200004c4 	.word	0x200004c4
 8002828:	20000db8 	.word	0x20000db8
 800282c:	40011000 	.word	0x40011000
 8002830:	20000314 	.word	0x20000314

08002834 <SD_loadSettings>:

/*
 * 	Função para ler o settings.ini
 */
FRESULT SD_loadSettings(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 8002838:	4912      	ldr	r1, [pc, #72]	; (8002884 <SD_loadSettings+0x50>)
 800283a:	4813      	ldr	r0, [pc, #76]	; (8002888 <SD_loadSettings+0x54>)
 800283c:	f00b febc 	bl	800e5b8 <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 8002840:	2201      	movs	r2, #1
 8002842:	4911      	ldr	r1, [pc, #68]	; (8002888 <SD_loadSettings+0x54>)
 8002844:	4811      	ldr	r0, [pc, #68]	; (800288c <SD_loadSettings+0x58>)
 8002846:	f00a feb7 	bl	800d5b8 <f_open>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <SD_loadSettings+0x5c>)
 8002850:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <SD_loadSettings+0x5c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b04      	cmp	r3, #4
 8002858:	d106      	bne.n	8002868 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 800285a:	f000 f81b 	bl	8002894 <SD_createSettings>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <SD_loadSettings+0x5c>)
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e009      	b.n	800287c <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <SD_loadSettings+0x5c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 8002870:	f000 f866 	bl	8002940 <SD_searchSettings>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <SD_loadSettings+0x5c>)
 800287a:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <SD_loadSettings+0x5c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	0800ee48 	.word	0x0800ee48
 8002888:	20000be8 	.word	0x20000be8
 800288c:	200008f4 	.word	0x200008f4
 8002890:	20000db8 	.word	0x20000db8

08002894 <SD_createSettings>:

/*
 * 	Função para criar o settings.ini quando não disponivel
 */
FRESULT SD_createSettings(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 800289a:	4822      	ldr	r0, [pc, #136]	; (8002924 <SD_createSettings+0x90>)
 800289c:	f00b fb97 	bl	800dfce <f_close>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <SD_createSettings+0x94>)
 80028a6:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 80028a8:	2212      	movs	r2, #18
 80028aa:	4920      	ldr	r1, [pc, #128]	; (800292c <SD_createSettings+0x98>)
 80028ac:	481d      	ldr	r0, [pc, #116]	; (8002924 <SD_createSettings+0x90>)
 80028ae:	f00a fe83 	bl	800d5b8 <f_open>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <SD_createSettings+0x94>)
 80028b8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <SD_createSettings+0x94>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <SD_createSettings+0x34>
		return fresult;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <SD_createSettings+0x94>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	e029      	b.n	800291c <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 80028c8:	4919      	ldr	r1, [pc, #100]	; (8002930 <SD_createSettings+0x9c>)
 80028ca:	481a      	ldr	r0, [pc, #104]	; (8002934 <SD_createSettings+0xa0>)
 80028cc:	f00b fe74 	bl	800e5b8 <siprintf>
 80028d0:	6078      	str	r0, [r7, #4]
			";Mode 0 para teste de AV do 19 (Padrão)\n"
			";Mode 1 para Teste de Dinamometro\n"
			";Mode 2 testes com o MPU6050 no 20\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <SD_createSettings+0xa4>)
 80028d6:	4917      	ldr	r1, [pc, #92]	; (8002934 <SD_createSettings+0xa0>)
 80028d8:	4812      	ldr	r0, [pc, #72]	; (8002924 <SD_createSettings+0x90>)
 80028da:	f00b f942 	bl	800db62 <f_write>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <SD_createSettings+0x94>)
 80028e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <SD_createSettings+0x94>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <SD_createSettings+0x60>
		return fresult;
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <SD_createSettings+0x94>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	e013      	b.n	800291c <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 80028f4:	480b      	ldr	r0, [pc, #44]	; (8002924 <SD_createSettings+0x90>)
 80028f6:	f00b fb6a 	bl	800dfce <f_close>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <SD_createSettings+0x94>)
 8002900:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <SD_createSettings+0x94>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <SD_createSettings+0x7c>
		return fresult;
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <SD_createSettings+0x94>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	e005      	b.n	800291c <SD_createSettings+0x88>

	sdCard.mode = 0;
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <SD_createSettings+0xa8>)
 8002912:	2200      	movs	r2, #0
 8002914:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754

	return fresult;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <SD_createSettings+0x94>)
 800291a:	781b      	ldrb	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200008f4 	.word	0x200008f4
 8002928:	20000db8 	.word	0x20000db8
 800292c:	20000be8 	.word	0x20000be8
 8002930:	0800ee58 	.word	0x0800ee58
 8002934:	20000968 	.word	0x20000968
 8002938:	20000c04 	.word	0x20000c04
 800293c:	200004c4 	.word	0x200004c4

08002940 <SD_searchSettings>:

/*
 * 	Função que lê o conteudo do settings.ini
 */
FRESULT SD_searchSettings(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
	int index = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <SD_searchSettings+0x140>)
 8002950:	f240 227f 	movw	r2, #639	; 0x27f
 8002954:	494b      	ldr	r1, [pc, #300]	; (8002a84 <SD_searchSettings+0x144>)
 8002956:	484c      	ldr	r0, [pc, #304]	; (8002a88 <SD_searchSettings+0x148>)
 8002958:	f00a ffae 	bl	800d8b8 <f_read>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <SD_searchSettings+0x14c>)
 8002962:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002964:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <SD_searchSettings+0x14c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <SD_searchSettings+0x38>
		return fresult;
 800296c:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <SD_searchSettings+0x14c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	e082      	b.n	8002a78 <SD_searchSettings+0x138>

	for (index; sdCard.longBuffer[index] != '='; index++);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3301      	adds	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	4a45      	ldr	r2, [pc, #276]	; (8002a90 <SD_searchSettings+0x150>)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4413      	add	r3, r2
 800297e:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b3d      	cmp	r3, #61	; 0x3d
 8002986:	d1f4      	bne.n	8002972 <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f240 227d 	movw	r2, #637	; 0x27d
 800298e:	4293      	cmp	r3, r2
 8002990:	dd0b      	ble.n	80029aa <SD_searchSettings+0x6a>
	{
		fresult = SD_createSettings();
 8002992:	f7ff ff7f 	bl	8002894 <SD_createSettings>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <SD_searchSettings+0x14c>)
 800299c:	701a      	strb	r2, [r3, #0]
		return fresult;
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <SD_searchSettings+0x14c>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	e069      	b.n	8002a78 <SD_searchSettings+0x138>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	4a37      	ldr	r2, [pc, #220]	; (8002a90 <SD_searchSettings+0x150>)
 80029b2:	4413      	add	r3, r2
 80029b4:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d908      	bls.n	80029ce <SD_searchSettings+0x8e>
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	4a33      	ldr	r2, [pc, #204]	; (8002a90 <SD_searchSettings+0x150>)
 80029c4:	4413      	add	r3, r2
 80029c6:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 80029ca:	2b5a      	cmp	r3, #90	; 0x5a
 80029cc:	d9ea      	bls.n	80029a4 <SD_searchSettings+0x64>
	deindex--;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	e012      	b.n	8002a00 <SD_searchSettings+0xc0>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <SD_searchSettings+0x150>)
 80029e6:	4413      	add	r3, r2
 80029e8:	f893 14a4 	ldrb.w	r1, [r3, #1188]	; 0x4a4
 80029ec:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <SD_searchSettings+0x150>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	f203 7344 	addw	r3, r3, #1860	; 0x744
 80029f6:	460a      	mov	r2, r1
 80029f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3301      	adds	r3, #1
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	3301      	adds	r3, #1
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	dde7      	ble.n	80029da <SD_searchSettings+0x9a>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <SD_searchSettings+0x150>)
 8002a0c:	f893 3744 	ldrb.w	r3, [r3, #1860]	; 0x744
 8002a10:	2b4d      	cmp	r3, #77	; 0x4d
 8002a12:	d129      	bne.n	8002a68 <SD_searchSettings+0x128>
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <SD_searchSettings+0x150>)
 8002a16:	f893 3745 	ldrb.w	r3, [r3, #1861]	; 0x745
 8002a1a:	2b4f      	cmp	r3, #79	; 0x4f
 8002a1c:	d124      	bne.n	8002a68 <SD_searchSettings+0x128>
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <SD_searchSettings+0x150>)
 8002a20:	f893 3746 	ldrb.w	r3, [r3, #1862]	; 0x746
 8002a24:	2b44      	cmp	r3, #68	; 0x44
 8002a26:	d11f      	bne.n	8002a68 <SD_searchSettings+0x128>
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <SD_searchSettings+0x150>)
 8002a2a:	f893 3747 	ldrb.w	r3, [r3, #1863]	; 0x747
 8002a2e:	2b45      	cmp	r3, #69	; 0x45
 8002a30:	d11a      	bne.n	8002a68 <SD_searchSettings+0x128>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <SD_searchSettings+0x150>)
 8002a34:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002a38:	2b2f      	cmp	r3, #47	; 0x2f
 8002a3a:	d90e      	bls.n	8002a5a <SD_searchSettings+0x11a>
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <SD_searchSettings+0x150>)
 8002a3e:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002a42:	2b39      	cmp	r3, #57	; 0x39
 8002a44:	d809      	bhi.n	8002a5a <SD_searchSettings+0x11a>
			sdCard.mode = sdCard.setting[5] - 48;
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <SD_searchSettings+0x150>)
 8002a48:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b30      	subs	r3, #48	; 0x30
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <SD_searchSettings+0x150>)
 8002a54:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002a58:	e00c      	b.n	8002a74 <SD_searchSettings+0x134>
		else
			fresult = SD_createSettings();
 8002a5a:	f7ff ff1b 	bl	8002894 <SD_createSettings>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <SD_searchSettings+0x14c>)
 8002a64:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002a66:	e005      	b.n	8002a74 <SD_searchSettings+0x134>
	}
	else
		fresult = SD_createSettings();
 8002a68:	f7ff ff14 	bl	8002894 <SD_createSettings>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <SD_searchSettings+0x14c>)
 8002a72:	701a      	strb	r2, [r3, #0]

	return fresult;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <SD_searchSettings+0x14c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000c00 	.word	0x20000c00
 8002a84:	20000968 	.word	0x20000968
 8002a88:	200008f4 	.word	0x200008f4
 8002a8c:	20000db8 	.word	0x20000db8
 8002a90:	200004c4 	.word	0x200004c4

08002a94 <SD_createFile>:

/*
 * 	Função que cria o fileXXX.txt
 */
FRESULT SD_createFile(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4921      	ldr	r1, [pc, #132]	; (8002b28 <SD_createFile+0x94>)
 8002aa2:	4822      	ldr	r0, [pc, #136]	; (8002b2c <SD_createFile+0x98>)
 8002aa4:	f00b fd88 	bl	800e5b8 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 8002aa8:	2206      	movs	r2, #6
 8002aaa:	4920      	ldr	r1, [pc, #128]	; (8002b2c <SD_createFile+0x98>)
 8002aac:	4820      	ldr	r0, [pc, #128]	; (8002b30 <SD_createFile+0x9c>)
 8002aae:	f00a fd83 	bl	800d5b8 <f_open>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <SD_createFile+0xa0>)
 8002ab8:	701a      	strb	r2, [r3, #0]
		filnum++;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3301      	adds	r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8002ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ac4:	481c      	ldr	r0, [pc, #112]	; (8002b38 <SD_createFile+0xa4>)
 8002ac6:	f002 fdc9 	bl	800565c <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <SD_createFile+0xa0>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d0e5      	beq.n	8002a9e <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 8002ad2:	491a      	ldr	r1, [pc, #104]	; (8002b3c <SD_createFile+0xa8>)
 8002ad4:	481a      	ldr	r0, [pc, #104]	; (8002b40 <SD_createFile+0xac>)
 8002ad6:	f00b fd6f 	bl	800e5b8 <siprintf>
 8002ada:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <SD_createFile+0xb0>)
 8002ae0:	4917      	ldr	r1, [pc, #92]	; (8002b40 <SD_createFile+0xac>)
 8002ae2:	4813      	ldr	r0, [pc, #76]	; (8002b30 <SD_createFile+0x9c>)
 8002ae4:	f00b f83d 	bl	800db62 <f_write>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <SD_createFile+0xa0>)
 8002aee:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <SD_createFile+0xa0>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <SD_createFile+0x6a>
		return fresult;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <SD_createFile+0xa0>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	e00f      	b.n	8002b1e <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 8002afe:	480c      	ldr	r0, [pc, #48]	; (8002b30 <SD_createFile+0x9c>)
 8002b00:	f00b fa65 	bl	800dfce <f_close>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <SD_createFile+0xa0>)
 8002b0a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <SD_createFile+0xa0>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <SD_createFile+0x86>
		return fresult;
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <SD_createFile+0xa0>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	e001      	b.n	8002b1e <SD_createFile+0x8a>

	return fresult;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <SD_createFile+0xa0>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	0800eef8 	.word	0x0800eef8
 8002b2c:	20000be8 	.word	0x20000be8
 8002b30:	200008f4 	.word	0x200008f4
 8002b34:	20000db8 	.word	0x20000db8
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	0800ef08 	.word	0x0800ef08
 8002b40:	20000928 	.word	0x20000928
 8002b44:	20000c04 	.word	0x20000c04

08002b48 <SD_write>:

/*
 * 	Função que escreve em um arquivo
 */
FRESULT SD_write(int bsize, char wBuf[bsize])
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_WRITE);
 8002b52:	2202      	movs	r2, #2
 8002b54:	4925      	ldr	r1, [pc, #148]	; (8002bec <SD_write+0xa4>)
 8002b56:	4826      	ldr	r0, [pc, #152]	; (8002bf0 <SD_write+0xa8>)
 8002b58:	f00a fd2e 	bl	800d5b8 <f_open>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <SD_write+0xac>)
 8002b62:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <SD_write+0xac>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <SD_write+0x2a>
		return fresult;
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <SD_write+0xac>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	e037      	b.n	8002be2 <SD_write+0x9a>

	fresult = f_lseek(&sdCard.fil, sdCard.fil.fsize);
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <SD_write+0xb0>)
 8002b74:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002b78:	4619      	mov	r1, r3
 8002b7a:	481d      	ldr	r0, [pc, #116]	; (8002bf0 <SD_write+0xa8>)
 8002b7c:	f00b fa4d 	bl	800e01a <f_lseek>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <SD_write+0xac>)
 8002b86:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <SD_write+0xac>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <SD_write+0x4e>
		return fresult;
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <SD_write+0xac>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	e025      	b.n	8002be2 <SD_write+0x9a>

	fresult = f_write(&sdCard.fil, wBuf, bsize, &sdCard.bw);
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <SD_write+0xb4>)
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <SD_write+0xa8>)
 8002b9e:	f00a ffe0 	bl	800db62 <f_write>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <SD_write+0xac>)
 8002ba8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <SD_write+0xac>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <SD_write+0x70>
		return fresult;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <SD_write+0xac>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	e014      	b.n	8002be2 <SD_write+0x9a>

	fresult = f_close(&sdCard.fil);
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <SD_write+0xa8>)
 8002bba:	f00b fa08 	bl	800dfce <f_close>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <SD_write+0xac>)
 8002bc4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <SD_write+0xac>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <SD_write+0x8c>
		return fresult;
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <SD_write+0xac>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	e006      	b.n	8002be2 <SD_write+0x9a>

	LDEBUG;
 8002bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bd8:	4809      	ldr	r0, [pc, #36]	; (8002c00 <SD_write+0xb8>)
 8002bda:	f002 fd3f 	bl	800565c <HAL_GPIO_TogglePin>

	return fresult;
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <SD_write+0xac>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000be8 	.word	0x20000be8
 8002bf0:	200008f4 	.word	0x200008f4
 8002bf4:	20000db8 	.word	0x20000db8
 8002bf8:	200004c4 	.word	0x200004c4
 8002bfc:	20000c04 	.word	0x20000c04
 8002c00:	40011000 	.word	0x40011000

08002c04 <SD_logger>:

/*
 * 	Função de datalogger
 */
FRESULT SD_logger(void)
{
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b08f      	sub	sp, #60	; 0x3c
 8002c08:	af0a      	add	r7, sp, #40	; 0x28
	if (sdCard.counter < 9999)
 8002c0a:	4b73      	ldr	r3, [pc, #460]	; (8002dd8 <SD_logger+0x1d4>)
 8002c0c:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8002c10:	f242 720e 	movw	r2, #9998	; 0x270e
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d808      	bhi.n	8002c2a <SD_logger+0x26>
		sdCard.counter++;
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <SD_logger+0x1d4>)
 8002c1a:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <SD_logger+0x1d4>)
 8002c24:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
 8002c28:	e003      	b.n	8002c32 <SD_logger+0x2e>
	else
		sdCard.counter = 0;
 8002c2a:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <SD_logger+0x1d4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734

	if (sdCard.mode == 0)
 8002c32:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <SD_logger+0x1d4>)
 8002c34:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d110      	bne.n	8002c5e <SD_logger+0x5a>
			sdCard.blen = sprintf(sdCard.buffer,
 8002c3c:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <SD_logger+0x1d8>)
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <SD_logger+0x1dc>)
 8002c42:	685b      	ldr	r3, [r3, #4]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, vel.value,
					sdCard.counter);
 8002c44:	4964      	ldr	r1, [pc, #400]	; (8002dd8 <SD_logger+0x1d4>)
 8002c46:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002c4a:	9100      	str	r1, [sp, #0]
 8002c4c:	4965      	ldr	r1, [pc, #404]	; (8002de4 <SD_logger+0x1e0>)
 8002c4e:	4866      	ldr	r0, [pc, #408]	; (8002de8 <SD_logger+0x1e4>)
 8002c50:	f00b fcb2 	bl	800e5b8 <siprintf>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a60      	ldr	r2, [pc, #384]	; (8002dd8 <SD_logger+0x1d4>)
 8002c58:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002c5c:	e070      	b.n	8002d40 <SD_logger+0x13c>

	else if (sdCard.mode == 1)
 8002c5e:	4b5e      	ldr	r3, [pc, #376]	; (8002dd8 <SD_logger+0x1d4>)
 8002c60:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d110      	bne.n	8002c8a <SD_logger+0x86>
			sdCard.blen = sprintf(sdCard.buffer,
 8002c68:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <SD_logger+0x1d8>)
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <SD_logger+0x1e8>)
 8002c6e:	695b      	ldr	r3, [r3, #20]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, dina.force,
					sdCard.counter);
 8002c70:	4959      	ldr	r1, [pc, #356]	; (8002dd8 <SD_logger+0x1d4>)
 8002c72:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002c76:	9100      	str	r1, [sp, #0]
 8002c78:	495a      	ldr	r1, [pc, #360]	; (8002de4 <SD_logger+0x1e0>)
 8002c7a:	485b      	ldr	r0, [pc, #364]	; (8002de8 <SD_logger+0x1e4>)
 8002c7c:	f00b fc9c 	bl	800e5b8 <siprintf>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4a55      	ldr	r2, [pc, #340]	; (8002dd8 <SD_logger+0x1d4>)
 8002c84:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002c88:	e05a      	b.n	8002d40 <SD_logger+0x13c>

	else if (sdCard.mode == 2)
 8002c8a:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <SD_logger+0x1d4>)
 8002c8c:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d155      	bne.n	8002d40 <SD_logger+0x13c>
					"%05d%05d%05d"
					"%05d%05d%05d"
					"%04d%04d"
					"%04d"
					"\n",
					canBus.rx.rpm, canBus.rx.vel,
 8002c94:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <SD_logger+0x1ec>)
 8002c96:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			sdCard.blen = sprintf(sdCard.buffer,
 8002c9a:	469c      	mov	ip, r3
					canBus.rx.rpm, canBus.rx.vel,
 8002c9c:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <SD_logger+0x1ec>)
 8002c9e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			sdCard.blen = sprintf(sdCard.buffer,
 8002ca2:	469e      	mov	lr, r3
					((uint16_t)(aceGir.accel.X_RAW+32768)),
 8002ca4:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <SD_logger+0x1f0>)
 8002ca6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002cb0:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002cb2:	461a      	mov	r2, r3
					((uint16_t)(aceGir.accel.Y_RAW+32768)),
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <SD_logger+0x1f0>)
 8002cb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002cc0:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002cc2:	4619      	mov	r1, r3
					((uint16_t)(aceGir.accel.Z_RAW+32768)),
 8002cc4:	4b4b      	ldr	r3, [pc, #300]	; (8002df4 <SD_logger+0x1f0>)
 8002cc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002cd0:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002cd2:	4618      	mov	r0, r3
					((uint16_t)(aceGir.gyro.X_RAW+32768)),
 8002cd4:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <SD_logger+0x1f0>)
 8002cd6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002ce0:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002ce2:	461c      	mov	r4, r3
					((uint16_t)(aceGir.gyro.Y_RAW+32768)),
 8002ce4:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <SD_logger+0x1f0>)
 8002ce6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002cf0:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002cf2:	461d      	mov	r5, r3
					((uint16_t)(aceGir.gyro.Z_RAW+32768)),
 8002cf4:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <SD_logger+0x1f0>)
 8002cf6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d00:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002d02:	461e      	mov	r6, r3
					analog.buffer[0], analog.buffer[1],
 8002d04:	4b3c      	ldr	r3, [pc, #240]	; (8002df8 <SD_logger+0x1f4>)
 8002d06:	881b      	ldrh	r3, [r3, #0]
			sdCard.blen = sprintf(sdCard.buffer,
 8002d08:	607b      	str	r3, [r7, #4]
					analog.buffer[0], analog.buffer[1],
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <SD_logger+0x1f4>)
 8002d0c:	885b      	ldrh	r3, [r3, #2]
			sdCard.blen = sprintf(sdCard.buffer,
 8002d0e:	603b      	str	r3, [r7, #0]
					sdCard.counter);
 8002d10:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <SD_logger+0x1d4>)
 8002d12:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002d16:	9308      	str	r3, [sp, #32]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	9307      	str	r3, [sp, #28]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	9306      	str	r3, [sp, #24]
 8002d20:	9605      	str	r6, [sp, #20]
 8002d22:	9504      	str	r5, [sp, #16]
 8002d24:	9403      	str	r4, [sp, #12]
 8002d26:	9002      	str	r0, [sp, #8]
 8002d28:	9101      	str	r1, [sp, #4]
 8002d2a:	9200      	str	r2, [sp, #0]
 8002d2c:	4673      	mov	r3, lr
 8002d2e:	4662      	mov	r2, ip
 8002d30:	4932      	ldr	r1, [pc, #200]	; (8002dfc <SD_logger+0x1f8>)
 8002d32:	482d      	ldr	r0, [pc, #180]	; (8002de8 <SD_logger+0x1e4>)
 8002d34:	f00b fc40 	bl	800e5b8 <siprintf>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <SD_logger+0x1d4>)
 8002d3c:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

	for (int i = 0; i < sdCard.blen; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e012      	b.n	8002d6c <SD_logger+0x168>
		sdCard.longBuffer[i+sdCard.blenLong] = sdCard.buffer[i];
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <SD_logger+0x1d4>)
 8002d48:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4921      	ldr	r1, [pc, #132]	; (8002dd8 <SD_logger+0x1d4>)
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	440a      	add	r2, r1
 8002d56:	f202 4264 	addw	r2, r2, #1124	; 0x464
 8002d5a:	7811      	ldrb	r1, [r2, #0]
 8002d5c:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <SD_logger+0x1d4>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	460a      	mov	r2, r1
 8002d62:	f883 24a4 	strb.w	r2, [r3, #1188]	; 0x4a4
	for (int i = 0; i < sdCard.blen; i++)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <SD_logger+0x1d4>)
 8002d6e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbe6      	blt.n	8002d46 <SD_logger+0x142>
	sdCard.longCounter++;
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <SD_logger+0x1d4>)
 8002d7a:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8002d7e:	3301      	adds	r3, #1
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <SD_logger+0x1d4>)
 8002d84:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	sdCard.blenLong += sdCard.blen;
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <SD_logger+0x1d4>)
 8002d8a:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <SD_logger+0x1d4>)
 8002d90:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002d94:	4413      	add	r3, r2
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <SD_logger+0x1d4>)
 8002d98:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	if (sdCard.longCounter >= SD_BUFFSIZE_LONG)
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <SD_logger+0x1d4>)
 8002d9e:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8002da2:	2b09      	cmp	r3, #9
 8002da4:	d912      	bls.n	8002dcc <SD_logger+0x1c8>
	{
		fresult = SD_write(sdCard.blenLong, sdCard.longBuffer);
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <SD_logger+0x1d4>)
 8002da8:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8002dac:	4914      	ldr	r1, [pc, #80]	; (8002e00 <SD_logger+0x1fc>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff feca 	bl	8002b48 <SD_write>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <SD_logger+0x200>)
 8002dba:	701a      	strb	r2, [r3, #0]
		sdCard.longCounter = 0;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <SD_logger+0x1d4>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
		sdCard.blenLong = 0;
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <SD_logger+0x1d4>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	}

	//LDEBUG;

	return fresult;
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <SD_logger+0x200>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dd8:	200004c4 	.word	0x200004c4
 8002ddc:	20000494 	.word	0x20000494
 8002de0:	20000cb8 	.word	0x20000cb8
 8002de4:	0800ef0c 	.word	0x0800ef0c
 8002de8:	20000928 	.word	0x20000928
 8002dec:	20000478 	.word	0x20000478
 8002df0:	20000388 	.word	0x20000388
 8002df4:	2000035c 	.word	0x2000035c
 8002df8:	200002e0 	.word	0x200002e0
 8002dfc:	0800ef1c 	.word	0x0800ef1c
 8002e00:	20000968 	.word	0x20000968
 8002e04:	20000db8 	.word	0x20000db8

08002e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_MspInit+0x5c>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <HAL_MspInit+0x5c>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6193      	str	r3, [r2, #24]
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_MspInit+0x5c>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_MspInit+0x5c>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <HAL_MspInit+0x5c>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	61d3      	str	r3, [r2, #28]
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_MspInit+0x5c>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_MspInit+0x60>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_MspInit+0x60>)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40010000 	.word	0x40010000

08002e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0318 	add.w	r3, r7, #24
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a33      	ldr	r2, [pc, #204]	; (8002f54 <HAL_ADC_MspInit+0xe8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d15f      	bne.n	8002f4c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	4a31      	ldr	r2, [pc, #196]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e96:	6193      	str	r3, [r2, #24]
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002ec2:	f043 0308 	orr.w	r3, r3, #8
 8002ec6:	6193      	str	r3, [r2, #24]
 8002ec8:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_ADC_MspInit+0xec>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002edc:	f107 0318 	add.w	r3, r7, #24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	481e      	ldr	r0, [pc, #120]	; (8002f5c <HAL_ADC_MspInit+0xf0>)
 8002ee4:	f002 fa1e 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eec:	2303      	movs	r3, #3
 8002eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0318 	add.w	r3, r7, #24
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	481a      	ldr	r0, [pc, #104]	; (8002f60 <HAL_ADC_MspInit+0xf4>)
 8002ef8:	f002 fa14 	bl	8005324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002efe:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_ADC_MspInit+0xfc>)
 8002f00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f26:	2220      	movs	r2, #32
 8002f28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f30:	480c      	ldr	r0, [pc, #48]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f32:	f001 ff4d 	bl	8004dd0 <HAL_DMA_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002f3c:	f7ff fbba 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f44:	621a      	str	r2, [r3, #32]
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_ADC_MspInit+0xf8>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f4c:	bf00      	nop
 8002f4e:	3728      	adds	r7, #40	; 0x28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40012400 	.word	0x40012400
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40010800 	.word	0x40010800
 8002f60:	40010c00 	.word	0x40010c00
 8002f64:	20000d2c 	.word	0x20000d2c
 8002f68:	40020008 	.word	0x40020008

08002f6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a20      	ldr	r2, [pc, #128]	; (8003008 <HAL_CAN_MspInit+0x9c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d139      	bne.n	8003000 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_CAN_MspInit+0xa0>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	4a1e      	ldr	r2, [pc, #120]	; (800300c <HAL_CAN_MspInit+0xa0>)
 8002f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f96:	61d3      	str	r3, [r2, #28]
 8002f98:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_CAN_MspInit+0xa0>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_CAN_MspInit+0xa0>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_CAN_MspInit+0xa0>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_CAN_MspInit+0xa0>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fca:	f107 0310 	add.w	r3, r7, #16
 8002fce:	4619      	mov	r1, r3
 8002fd0:	480f      	ldr	r0, [pc, #60]	; (8003010 <HAL_CAN_MspInit+0xa4>)
 8002fd2:	f002 f9a7 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4809      	ldr	r0, [pc, #36]	; (8003010 <HAL_CAN_MspInit+0xa4>)
 8002fec:	f002 f99a 	bl	8005324 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2014      	movs	r0, #20
 8002ff6:	f001 feb4 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002ffa:	2014      	movs	r0, #20
 8002ffc:	f001 fecd 	bl	8004d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003000:	bf00      	nop
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40006400 	.word	0x40006400
 800300c:	40021000 	.word	0x40021000
 8003010:	40010800 	.word	0x40010800

08003014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <HAL_I2C_MspInit+0x94>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d134      	bne.n	800309e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_I2C_MspInit+0x98>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <HAL_I2C_MspInit+0x98>)
 800303a:	f043 0308 	orr.w	r3, r3, #8
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_I2C_MspInit+0x98>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800304c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003052:	2312      	movs	r3, #18
 8003054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003056:	2303      	movs	r3, #3
 8003058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305a:	f107 0310 	add.w	r3, r7, #16
 800305e:	4619      	mov	r1, r3
 8003060:	4813      	ldr	r0, [pc, #76]	; (80030b0 <HAL_I2C_MspInit+0x9c>)
 8003062:	f002 f95f 	bl	8005324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_I2C_MspInit+0x98>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4a10      	ldr	r2, [pc, #64]	; (80030ac <HAL_I2C_MspInit+0x98>)
 800306c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003070:	61d3      	str	r3, [r2, #28]
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_I2C_MspInit+0x98>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 15, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	210f      	movs	r1, #15
 8003082:	2021      	movs	r0, #33	; 0x21
 8003084:	f001 fe6d 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003088:	2021      	movs	r0, #33	; 0x21
 800308a:	f001 fe86 	bl	8004d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	210f      	movs	r1, #15
 8003092:	2022      	movs	r0, #34	; 0x22
 8003094:	f001 fe65 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003098:	2022      	movs	r0, #34	; 0x22
 800309a:	f001 fe7e 	bl	8004d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800309e:	bf00      	nop
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40005800 	.word	0x40005800
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40010c00 	.word	0x40010c00

080030b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_SPI_MspInit+0xb4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d145      	bne.n	8003160 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_SPI_MspInit+0xb8>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4a24      	ldr	r2, [pc, #144]	; (800316c <HAL_SPI_MspInit+0xb8>)
 80030da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030de:	6193      	str	r3, [r2, #24]
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_SPI_MspInit+0xb8>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_SPI_MspInit+0xb8>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <HAL_SPI_MspInit+0xb8>)
 80030f2:	f043 0308 	orr.w	r3, r3, #8
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <HAL_SPI_MspInit+0xb8>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003104:	2328      	movs	r3, #40	; 0x28
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	4619      	mov	r1, r3
 8003116:	4816      	ldr	r0, [pc, #88]	; (8003170 <HAL_SPI_MspInit+0xbc>)
 8003118:	f002 f904 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800311c:	2310      	movs	r3, #16
 800311e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	4619      	mov	r1, r3
 800312e:	4810      	ldr	r0, [pc, #64]	; (8003170 <HAL_SPI_MspInit+0xbc>)
 8003130:	f002 f8f8 	bl	8005324 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_SPI_MspInit+0xc0>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_SPI_MspInit+0xc0>)
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 15, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	210f      	movs	r1, #15
 8003154:	2023      	movs	r0, #35	; 0x23
 8003156:	f001 fe04 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800315a:	2023      	movs	r0, #35	; 0x23
 800315c:	f001 fe1d 	bl	8004d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003160:	bf00      	nop
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40013000 	.word	0x40013000
 800316c:	40021000 	.word	0x40021000
 8003170:	40010c00 	.word	0x40010c00
 8003174:	40010000 	.word	0x40010000

08003178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08c      	sub	sp, #48	; 0x30
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0320 	add.w	r3, r7, #32
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a51      	ldr	r2, [pc, #324]	; (80032d8 <HAL_TIM_Base_MspInit+0x160>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d135      	bne.n	8003204 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003198:	4b50      	ldr	r3, [pc, #320]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	4a4f      	ldr	r2, [pc, #316]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 800319e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a2:	6193      	str	r3, [r2, #24]
 80031a4:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b0:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a49      	ldr	r2, [pc, #292]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031d2:	2302      	movs	r3, #2
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d6:	f107 0320 	add.w	r3, r7, #32
 80031da:	4619      	mov	r1, r3
 80031dc:	4840      	ldr	r0, [pc, #256]	; (80032e0 <HAL_TIM_Base_MspInit+0x168>)
 80031de:	f002 f8a1 	bl	8005324 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 14, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	210e      	movs	r1, #14
 80031e6:	2019      	movs	r0, #25
 80031e8:	f001 fdbb 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031ec:	2019      	movs	r0, #25
 80031ee:	f001 fdd4 	bl	8004d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 14, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	210e      	movs	r1, #14
 80031f6:	201b      	movs	r0, #27
 80031f8:	f001 fdb3 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031fc:	201b      	movs	r0, #27
 80031fe:	f001 fdcc 	bl	8004d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003202:	e064      	b.n	80032ce <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320c:	d12c      	bne.n	8003268 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800320e:	4b33      	ldr	r3, [pc, #204]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4a32      	ldr	r2, [pc, #200]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	61d3      	str	r3, [r2, #28]
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	6193      	str	r3, [r2, #24]
 8003232:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800323e:	2301      	movs	r3, #1
 8003240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003246:	2302      	movs	r3, #2
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324a:	f107 0320 	add.w	r3, r7, #32
 800324e:	4619      	mov	r1, r3
 8003250:	4823      	ldr	r0, [pc, #140]	; (80032e0 <HAL_TIM_Base_MspInit+0x168>)
 8003252:	f002 f867 	bl	8005324 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	210f      	movs	r1, #15
 800325a:	201c      	movs	r0, #28
 800325c:	f001 fd81 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003260:	201c      	movs	r0, #28
 8003262:	f001 fd9a 	bl	8004d9a <HAL_NVIC_EnableIRQ>
}
 8003266:	e032      	b.n	80032ce <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1d      	ldr	r2, [pc, #116]	; (80032e4 <HAL_TIM_Base_MspInit+0x16c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d114      	bne.n	800329c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 8003278:	f043 0302 	orr.w	r3, r3, #2
 800327c:	61d3      	str	r3, [r2, #28]
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	210f      	movs	r1, #15
 800328e:	201d      	movs	r0, #29
 8003290:	f001 fd67 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003294:	201d      	movs	r0, #29
 8003296:	f001 fd80 	bl	8004d9a <HAL_NVIC_EnableIRQ>
}
 800329a:	e018      	b.n	80032ce <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a11      	ldr	r2, [pc, #68]	; (80032e8 <HAL_TIM_Base_MspInit+0x170>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d113      	bne.n	80032ce <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	61d3      	str	r3, [r2, #28]
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_TIM_Base_MspInit+0x164>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	210f      	movs	r1, #15
 80032c2:	201e      	movs	r0, #30
 80032c4:	f001 fd4d 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032c8:	201e      	movs	r0, #30
 80032ca:	f001 fd66 	bl	8004d9a <HAL_NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	3730      	adds	r7, #48	; 0x30
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40010800 	.word	0x40010800
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800

080032ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a33      	ldr	r2, [pc, #204]	; (80033d4 <HAL_UART_MspInit+0xe8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d15f      	bne.n	80033cc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_UART_MspInit+0xec>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <HAL_UART_MspInit+0xec>)
 8003312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003316:	6193      	str	r3, [r2, #24]
 8003318:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_UART_MspInit+0xec>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003324:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_UART_MspInit+0xec>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <HAL_UART_MspInit+0xec>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6193      	str	r3, [r2, #24]
 8003330:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_UART_MspInit+0xec>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800333c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334a:	f107 0310 	add.w	r3, r7, #16
 800334e:	4619      	mov	r1, r3
 8003350:	4822      	ldr	r0, [pc, #136]	; (80033dc <HAL_UART_MspInit+0xf0>)
 8003352:	f001 ffe7 	bl	8005324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003364:	f107 0310 	add.w	r3, r7, #16
 8003368:	4619      	mov	r1, r3
 800336a:	481c      	ldr	r0, [pc, #112]	; (80033dc <HAL_UART_MspInit+0xf0>)
 800336c:	f001 ffda 	bl	8005324 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003372:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <HAL_UART_MspInit+0xf8>)
 8003374:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003390:	2200      	movs	r2, #0
 8003392:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003396:	2220      	movs	r2, #32
 8003398:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 800339c:	2200      	movs	r2, #0
 800339e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033a0:	480f      	ldr	r0, [pc, #60]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 80033a2:	f001 fd15 	bl	8004dd0 <HAL_DMA_Init>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80033ac:	f7ff f982 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a0b      	ldr	r2, [pc, #44]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	210f      	movs	r1, #15
 80033c0:	2025      	movs	r0, #37	; 0x25
 80033c2:	f001 fcce 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033c6:	2025      	movs	r0, #37	; 0x25
 80033c8:	f001 fce7 	bl	8004d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033cc:	bf00      	nop
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40013800 	.word	0x40013800
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40010800 	.word	0x40010800
 80033e0:	20000ce8 	.word	0x20000ce8
 80033e4:	40020058 	.word	0x40020058

080033e8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <SDTimer_Handler+0x3c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <SDTimer_Handler+0x1c>
    Timer1--;
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <SDTimer_Handler+0x3c>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <SDTimer_Handler+0x3c>)
 8003402:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <SDTimer_Handler+0x40>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <SDTimer_Handler+0x34>
    Timer2--;
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <SDTimer_Handler+0x40>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <SDTimer_Handler+0x40>)
 800341a:	701a      	strb	r2, [r3, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000e5d 	.word	0x20000e5d
 8003428:	20000e5c 	.word	0x20000e5c

0800342c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003430:	e7fe      	b.n	8003430 <NMI_Handler+0x4>

08003432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003436:	e7fe      	b.n	8003436 <HardFault_Handler+0x4>

08003438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800343c:	e7fe      	b.n	800343c <MemManage_Handler+0x4>

0800343e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003442:	e7fe      	b.n	8003442 <BusFault_Handler+0x4>

08003444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003448:	e7fe      	b.n	8003448 <UsageFault_Handler+0x4>

0800344a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <SysTick_Handler+0x30>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <SysTick_Handler+0x30>)
 8003480:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <SysTick_Handler+0x30>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b09      	cmp	r3, #9
 800348a:	d904      	bls.n	8003496 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <SysTick_Handler+0x30>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003492:	f7ff ffa9 	bl	80033e8 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003496:	f000 f98f 	bl	80037b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200000a6 	.word	0x200000a6

080034a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <DMA1_Channel1_IRQHandler+0x10>)
 80034aa:	f001 fdfb 	bl	80050a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000d2c 	.word	0x20000d2c

080034b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA1_Channel5_IRQHandler+0x10>)
 80034be:	f001 fdf1 	bl	80050a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000ce8 	.word	0x20000ce8

080034cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	can_bus_Recieve();
 80034d0:	f7fd fe46 	bl	8001160 <can_bus_Recieve>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80034d4:	4802      	ldr	r0, [pc, #8]	; (80034e0 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80034d6:	f001 f941 	bl	800475c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	2000040c 	.word	0x2000040c

080034e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_UPDATE) != RESET)
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <TIM1_UP_IRQHandler+0x20>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <TIM1_UP_IRQHandler+0x16>
		rot_Reset();
 80034f6:	f7ff f8f9 	bl	80026ec <rot_Reset>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034fa:	4802      	ldr	r0, [pc, #8]	; (8003504 <TIM1_UP_IRQHandler+0x20>)
 80034fc:	f006 fa48 	bl	8009990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000d70 	.word	0x20000d70

08003508 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_CC2) != RESET)
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <TIM1_CC_IRQHandler+0x20>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d101      	bne.n	800351e <TIM1_CC_IRQHandler+0x16>
		rot_Calc();
 800351a:	f7ff f8f1 	bl	8002700 <rot_Calc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800351e:	4802      	ldr	r0, [pc, #8]	; (8003528 <TIM1_CC_IRQHandler+0x20>)
 8003520:	f006 fa36 	bl	8009990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000d70 	.word	0x20000d70

0800352c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1) != RESET)
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <TIM2_IRQHandler+0x34>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d101      	bne.n	8003542 <TIM2_IRQHandler+0x16>
		vel_Calc();
 800353e:	f000 f8c5 	bl	80036cc <vel_Calc>
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_UPDATE) != RESET)
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <TIM2_IRQHandler+0x34>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <TIM2_IRQHandler+0x28>
		vel_Reset();
 8003550:	f000 f8b2 	bl	80036b8 <vel_Reset>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <TIM2_IRQHandler+0x34>)
 8003556:	f006 fa1b 	bl	8009990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000e14 	.word	0x20000e14

08003564 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <TIM3_IRQHandler+0x10>)
 800356a:	f006 fa11 	bl	8009990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000c70 	.word	0x20000c70

08003578 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (sdCard.mode == 1)
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <TIM4_IRQHandler+0x40>)
 800357e:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <TIM4_IRQHandler+0x12>
		dina_Update();
 8003586:	f7fd fe51 	bl	800122c <dina_Update>
	if (sdCard.mode == 2)
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <TIM4_IRQHandler+0x40>)
 800358c:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8003590:	2b02      	cmp	r3, #2
 8003592:	d101      	bne.n	8003598 <TIM4_IRQHandler+0x20>
	{
		aceGir_Read();
 8003594:	f7fd fcb4 	bl	8000f00 <aceGir_Read>
	}
	if (sdCard.mode != 9)
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <TIM4_IRQHandler+0x40>)
 800359a:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800359e:	2b09      	cmp	r3, #9
 80035a0:	d005      	beq.n	80035ae <TIM4_IRQHandler+0x36>
		fresult = SD_logger();
 80035a2:	f7ff fb2f 	bl	8002c04 <SD_logger>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <TIM4_IRQHandler+0x44>)
 80035ac:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035ae:	4804      	ldr	r0, [pc, #16]	; (80035c0 <TIM4_IRQHandler+0x48>)
 80035b0:	f006 f9ee 	bl	8009990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035b4:	bf00      	nop
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200004c4 	.word	0x200004c4
 80035bc:	20000db8 	.word	0x20000db8
 80035c0:	20000314 	.word	0x20000314

080035c4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <I2C2_EV_IRQHandler+0x10>)
 80035ca:	f002 fd07 	bl	8005fdc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000c1c 	.word	0x20000c1c

080035d8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <I2C2_ER_IRQHandler+0x10>)
 80035de:	f002 fe6e 	bl	80062be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000c1c 	.word	0x20000c1c

080035ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <SPI1_IRQHandler+0x10>)
 80035f2:	f005 fe17 	bl	8009224 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000dbc 	.word	0x20000dbc

08003600 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART1_IRQHandler+0x10>)
 8003606:	f006 ff69 	bl	800a4dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000434 	.word	0x20000434

08003614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <_sbrk+0x5c>)
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <_sbrk+0x60>)
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <_sbrk+0x64>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <_sbrk+0x64>)
 8003632:	4a12      	ldr	r2, [pc, #72]	; (800367c <_sbrk+0x68>)
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <_sbrk+0x64>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	429a      	cmp	r2, r3
 8003642:	d207      	bcs.n	8003654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003644:	f00a ff86 	bl	800e554 <__errno>
 8003648:	4603      	mov	r3, r0
 800364a:	220c      	movs	r2, #12
 800364c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	e009      	b.n	8003668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003654:	4b08      	ldr	r3, [pc, #32]	; (8003678 <_sbrk+0x64>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <_sbrk+0x64>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <_sbrk+0x64>)
 8003664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20005000 	.word	0x20005000
 8003674:	00000400 	.word	0x00000400
 8003678:	200000a8 	.word	0x200000a8
 800367c:	200012d8 	.word	0x200012d8

08003680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <vel_Init>:

/*
 * 	Função de inicialização
 */
void vel_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
	vel.constante = 1.5082;			/* < Salva a constante para calculo da velocidade */
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <vel_Init+0x20>)
 8003692:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <vel_Init+0x24>)
 8003694:	601a      	str	r2, [r3, #0]
	vel.htim = &htim2;				/* < Salva o ponteiro do Timer que será utilizado */
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <vel_Init+0x20>)
 8003698:	4a06      	ldr	r2, [pc, #24]	; (80036b4 <vel_Init+0x28>)
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
	vel.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <vel_Init+0x20>)
 800369e:	2200      	movs	r2, #0
 80036a0:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&vel);			/* < Chama função de inicialização */
 80036a2:	4802      	ldr	r0, [pc, #8]	; (80036ac <vel_Init+0x20>)
 80036a4:	f7fe fb2e 	bl	8001d04 <indutivo_Init>
}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000cb8 	.word	0x20000cb8
 80036b0:	3fc10cb3 	.word	0x3fc10cb3
 80036b4:	20000e14 	.word	0x20000e14

080036b8 <vel_Reset>:

/*
 * 	Função de reset
 */
void vel_Reset(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	indutivo_reset(&vel);
 80036bc:	4802      	ldr	r0, [pc, #8]	; (80036c8 <vel_Reset+0x10>)
 80036be:	f7fe fc03 	bl	8001ec8 <indutivo_reset>
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000cb8 	.word	0x20000cb8

080036cc <vel_Calc>:

/*
 * 	Função de calculo
 */
void vel_Calc(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	indutivo_calc(&vel);
 80036d0:	4802      	ldr	r0, [pc, #8]	; (80036dc <vel_Calc+0x10>)
 80036d2:	f7fe fb95 	bl	8001e00 <indutivo_calc>
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000cb8 	.word	0x20000cb8

080036e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036e0:	480c      	ldr	r0, [pc, #48]	; (8003714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036e2:	490d      	ldr	r1, [pc, #52]	; (8003718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e8:	e002      	b.n	80036f0 <LoopCopyDataInit>

080036ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ee:	3304      	adds	r3, #4

080036f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f4:	d3f9      	bcc.n	80036ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036f8:	4c0a      	ldr	r4, [pc, #40]	; (8003724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036fc:	e001      	b.n	8003702 <LoopFillZerobss>

080036fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003700:	3204      	adds	r2, #4

08003702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003704:	d3fb      	bcc.n	80036fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003706:	f7ff ffbb 	bl	8003680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800370a:	f00a ff29 	bl	800e560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800370e:	f7fe fbfb 	bl	8001f08 <main>
  bx lr
 8003712:	4770      	bx	lr
  ldr r0, =_sdata
 8003714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003718:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800371c:	0800f558 	.word	0x0800f558
  ldr r2, =_sbss
 8003720:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003724:	200012d8 	.word	0x200012d8

08003728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003728:	e7fe      	b.n	8003728 <ADC1_2_IRQHandler>
	...

0800372c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_Init+0x28>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a07      	ldr	r2, [pc, #28]	; (8003754 <HAL_Init+0x28>)
 8003736:	f043 0310 	orr.w	r3, r3, #16
 800373a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800373c:	2003      	movs	r0, #3
 800373e:	f001 fb05 	bl	8004d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003742:	2000      	movs	r0, #0
 8003744:	f000 f808 	bl	8003758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003748:	f7ff fb5e 	bl	8002e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40022000 	.word	0x40022000

08003758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_InitTick+0x54>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_InitTick+0x58>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800376e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fb1d 	bl	8004db6 <HAL_SYSTICK_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e00e      	b.n	80037a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0f      	cmp	r3, #15
 800378a:	d80a      	bhi.n	80037a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800378c:	2200      	movs	r2, #0
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f001 fae5 	bl	8004d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003798:	4a06      	ldr	r2, [pc, #24]	; (80037b4 <HAL_InitTick+0x5c>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e000      	b.n	80037a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000004 	.word	0x20000004
 80037b0:	2000000c 	.word	0x2000000c
 80037b4:	20000008 	.word	0x20000008

080037b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_IncTick+0x1c>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_IncTick+0x20>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	4a03      	ldr	r2, [pc, #12]	; (80037d8 <HAL_IncTick+0x20>)
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	2000000c 	.word	0x2000000c
 80037d8:	20000e60 	.word	0x20000e60

080037dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return uwTick;
 80037e0:	4b02      	ldr	r3, [pc, #8]	; (80037ec <HAL_GetTick+0x10>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	20000e60 	.word	0x20000e60

080037f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0be      	b.n	8003990 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fb1c 	bl	8002e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 faff 	bl	8003e38 <ADC_ConversionStop_Disable>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 8099 	bne.w	800397e <HAL_ADC_Init+0x18e>
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 8095 	bne.w	800397e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800385c:	f023 0302 	bic.w	r3, r3, #2
 8003860:	f043 0202 	orr.w	r2, r3, #2
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003870:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7b1b      	ldrb	r3, [r3, #12]
 8003876:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003878:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	4313      	orrs	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003888:	d003      	beq.n	8003892 <HAL_ADC_Init+0xa2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d102      	bne.n	8003898 <HAL_ADC_Init+0xa8>
 8003892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003896:	e000      	b.n	800389a <HAL_ADC_Init+0xaa>
 8003898:	2300      	movs	r3, #0
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7d1b      	ldrb	r3, [r3, #20]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d119      	bne.n	80038dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	7b1b      	ldrb	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	035a      	lsls	r2, r3, #13
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e00b      	b.n	80038dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f043 0201 	orr.w	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	4b28      	ldr	r3, [pc, #160]	; (8003998 <HAL_ADC_Init+0x1a8>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	430b      	orrs	r3, r1
 8003902:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390c:	d003      	beq.n	8003916 <HAL_ADC_Init+0x126>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d104      	bne.n	8003920 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	3b01      	subs	r3, #1
 800391c:	051b      	lsls	r3, r3, #20
 800391e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	430a      	orrs	r2, r1
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_ADC_Init+0x1ac>)
 800393c:	4013      	ands	r3, r2
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d10b      	bne.n	800395c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800395a:	e018      	b.n	800398e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	f023 0312 	bic.w	r3, r3, #18
 8003964:	f043 0210 	orr.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800397c:	e007      	b.n	800398e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	f043 0210 	orr.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	ffe1f7fd 	.word	0xffe1f7fd
 800399c:	ff1f0efe 	.word	0xff1f0efe

080039a0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a64      	ldr	r2, [pc, #400]	; (8003b48 <HAL_ADC_Start_DMA+0x1a8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_ADC_Start_DMA+0x24>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a63      	ldr	r2, [pc, #396]	; (8003b4c <HAL_ADC_Start_DMA+0x1ac>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d106      	bne.n	80039d2 <HAL_ADC_Start_DMA+0x32>
 80039c4:	4b60      	ldr	r3, [pc, #384]	; (8003b48 <HAL_ADC_Start_DMA+0x1a8>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 80b3 	bne.w	8003b38 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_Start_DMA+0x40>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0ae      	b.n	8003b3e <HAL_ADC_Start_DMA+0x19e>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f9cb 	bl	8003d84 <ADC_Enable>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 809a 	bne.w	8003b2e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4e      	ldr	r2, [pc, #312]	; (8003b4c <HAL_ADC_Start_DMA+0x1ac>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d105      	bne.n	8003a24 <HAL_ADC_Start_DMA+0x84>
 8003a18:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <HAL_ADC_Start_DMA+0x1a8>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d115      	bne.n	8003a50 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d026      	beq.n	8003a8c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a4e:	e01d      	b.n	8003a8c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a39      	ldr	r2, [pc, #228]	; (8003b48 <HAL_ADC_Start_DMA+0x1a8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_ADC_Start_DMA+0xd0>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <HAL_ADC_Start_DMA+0x1ac>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10d      	bne.n	8003a8c <HAL_ADC_Start_DMA+0xec>
 8003a70:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <HAL_ADC_Start_DMA+0x1a8>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f023 0206 	bic.w	r2, r3, #6
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aa4:	e002      	b.n	8003aac <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a25      	ldr	r2, [pc, #148]	; (8003b50 <HAL_ADC_Start_DMA+0x1b0>)
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <HAL_ADC_Start_DMA+0x1b4>)
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <HAL_ADC_Start_DMA+0x1b8>)
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0202 	mvn.w	r2, #2
 8003ad4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a18      	ldr	r0, [r3, #32]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	334c      	adds	r3, #76	; 0x4c
 8003af0:	4619      	mov	r1, r3
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f001 f9c5 	bl	8004e84 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b08:	d108      	bne.n	8003b1c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003b18:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003b1a:	e00f      	b.n	8003b3c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b2a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003b2c:	e006      	b.n	8003b3c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003b36:	e001      	b.n	8003b3c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40012400 	.word	0x40012400
 8003b4c:	40012800 	.word	0x40012800
 8003b50:	08003ebb 	.word	0x08003ebb
 8003b54:	08003f37 	.word	0x08003f37
 8003b58:	08003f53 	.word	0x08003f53

08003b5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x20>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e0dc      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x1da>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d81c      	bhi.n	8003bfe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3b05      	subs	r3, #5
 8003bd6:	221f      	movs	r2, #31
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	4019      	ands	r1, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	3b05      	subs	r3, #5
 8003bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34
 8003bfc:	e03c      	b.n	8003c78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d81c      	bhi.n	8003c40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	3b23      	subs	r3, #35	; 0x23
 8003c18:	221f      	movs	r2, #31
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	4019      	ands	r1, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	3b23      	subs	r3, #35	; 0x23
 8003c32:	fa00 f203 	lsl.w	r2, r0, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c3e:	e01b      	b.n	8003c78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	3b41      	subs	r3, #65	; 0x41
 8003c52:	221f      	movs	r2, #31
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	4019      	ands	r1, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	3b41      	subs	r3, #65	; 0x41
 8003c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b09      	cmp	r3, #9
 8003c7e:	d91c      	bls.n	8003cba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68d9      	ldr	r1, [r3, #12]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	3b1e      	subs	r3, #30
 8003c92:	2207      	movs	r2, #7
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	4019      	ands	r1, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6898      	ldr	r0, [r3, #8]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	3b1e      	subs	r3, #30
 8003cac:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	e019      	b.n	8003cee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6919      	ldr	r1, [r3, #16]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	2207      	movs	r2, #7
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	4019      	ands	r1, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6898      	ldr	r0, [r3, #8]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d003      	beq.n	8003cfe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cfa:	2b11      	cmp	r3, #17
 8003cfc:	d132      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_ADC_ConfigChannel+0x1e4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d125      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d126      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003d24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d11a      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_ADC_ConfigChannel+0x1e8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_ADC_ConfigChannel+0x1ec>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	0c9a      	lsrs	r2, r3, #18
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d44:	e002      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f9      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x1b2>
 8003d52:	e007      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012400 	.word	0x40012400
 8003d7c:	20000004 	.word	0x20000004
 8003d80:	431bde83 	.word	0x431bde83

08003d84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d040      	beq.n	8003e24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <ADC_Enable+0xac>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <ADC_Enable+0xb0>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	0c9b      	lsrs	r3, r3, #18
 8003dbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003dc0:	e002      	b.n	8003dc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f9      	bne.n	8003dc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dce:	f7ff fd05 	bl	80037dc <HAL_GetTick>
 8003dd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003dd4:	e01f      	b.n	8003e16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dd6:	f7ff fd01 	bl	80037dc <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d918      	bls.n	8003e16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d011      	beq.n	8003e16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	f043 0210 	orr.w	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e007      	b.n	8003e26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d1d8      	bne.n	8003dd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000004 	.word	0x20000004
 8003e34:	431bde83 	.word	0x431bde83

08003e38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d12e      	bne.n	8003eb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e62:	f7ff fcbb 	bl	80037dc <HAL_GetTick>
 8003e66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e68:	e01b      	b.n	8003ea2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e6a:	f7ff fcb7 	bl	80037dc <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d914      	bls.n	8003ea2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10d      	bne.n	8003ea2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	f043 0210 	orr.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e007      	b.n	8003eb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d0dc      	beq.n	8003e6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d127      	bne.n	8003f24 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003eea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003eee:	d115      	bne.n	8003f1c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d111      	bne.n	8003f1c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f043 0201 	orr.w	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fe1d 	bl	8003b5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003f22:	e004      	b.n	8003f2e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff fe12 	bl	8003b6e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff fe01 	bl	8003b80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADCEx_Calibration_Start+0x1e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e095      	b.n	80040d2 <HAL_ADCEx_Calibration_Start+0x14a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ff42 	bl	8003e38 <ADC_ConversionStop_Disable>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 8084 	bne.w	80040c8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fc8:	f023 0302 	bic.w	r3, r3, #2
 8003fcc:	f043 0202 	orr.w	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003fd4:	4b41      	ldr	r3, [pc, #260]	; (80040dc <HAL_ADCEx_Calibration_Start+0x154>)
 8003fd6:	681c      	ldr	r4, [r3, #0]
 8003fd8:	2002      	movs	r0, #2
 8003fda:	f004 fcfd 	bl	80089d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003fe4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003fe6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003fe8:	e002      	b.n	8003ff0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f9      	bne.n	8003fea <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fec4 	bl	8003d84 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800400c:	f7ff fbe6 	bl	80037dc <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004012:	e01b      	b.n	800404c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004014:	f7ff fbe2 	bl	80037dc <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b0a      	cmp	r3, #10
 8004020:	d914      	bls.n	800404c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	f023 0312 	bic.w	r3, r3, #18
 8004038:	f043 0210 	orr.w	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e042      	b.n	80040d2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1dc      	bne.n	8004014 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0204 	orr.w	r2, r2, #4
 8004068:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800406a:	f7ff fbb7 	bl	80037dc <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004070:	e01b      	b.n	80040aa <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004072:	f7ff fbb3 	bl	80037dc <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b0a      	cmp	r3, #10
 800407e:	d914      	bls.n	80040aa <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	f023 0312 	bic.w	r3, r3, #18
 8004096:	f043 0210 	orr.w	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e013      	b.n	80040d2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1dc      	bne.n	8004072 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	f023 0303 	bic.w	r3, r3, #3
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000004 	.word	0x20000004

080040e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0ed      	b.n	80042ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fe ff34 	bl	8002f6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004114:	f7ff fb62 	bl	80037dc <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800411a:	e012      	b.n	8004142 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800411c:	f7ff fb5e 	bl	80037dc <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b0a      	cmp	r3, #10
 8004128:	d90b      	bls.n	8004142 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2205      	movs	r2, #5
 800413a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0c5      	b.n	80042ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0e5      	beq.n	800411c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0202 	bic.w	r2, r2, #2
 800415e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004160:	f7ff fb3c 	bl	80037dc <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004166:	e012      	b.n	800418e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004168:	f7ff fb38 	bl	80037dc <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b0a      	cmp	r3, #10
 8004174:	d90b      	bls.n	800418e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2205      	movs	r2, #5
 8004186:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e09f      	b.n	80042ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7e1b      	ldrb	r3, [r3, #24]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d108      	bne.n	80041b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e007      	b.n	80041c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	7e5b      	ldrb	r3, [r3, #25]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d108      	bne.n	80041e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e007      	b.n	80041f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7e9b      	ldrb	r3, [r3, #26]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d108      	bne.n	800420a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0220 	orr.w	r2, r2, #32
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e007      	b.n	800421a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0220 	bic.w	r2, r2, #32
 8004218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7edb      	ldrb	r3, [r3, #27]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d108      	bne.n	8004234 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0210 	bic.w	r2, r2, #16
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e007      	b.n	8004244 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0210 	orr.w	r2, r2, #16
 8004242:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7f1b      	ldrb	r3, [r3, #28]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d108      	bne.n	800425e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	e007      	b.n	800426e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0208 	bic.w	r2, r2, #8
 800426c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7f5b      	ldrb	r3, [r3, #29]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d108      	bne.n	8004288 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0204 	orr.w	r2, r2, #4
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e007      	b.n	8004298 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	ea42 0103 	orr.w	r1, r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	1e5a      	subs	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80042ee:	7cfb      	ldrb	r3, [r7, #19]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d003      	beq.n	80042fc <HAL_CAN_ConfigFilter+0x26>
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	f040 80aa 	bne.w	8004450 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004302:	f043 0201 	orr.w	r2, r3, #1
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2201      	movs	r2, #1
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	43db      	mvns	r3, r3
 8004326:	401a      	ands	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d123      	bne.n	800437e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004358:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3248      	adds	r2, #72	; 0x48
 800435e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004372:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	3348      	adds	r3, #72	; 0x48
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	440b      	add	r3, r1
 800437c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d122      	bne.n	80043cc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	431a      	orrs	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3248      	adds	r2, #72	; 0x48
 80043ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043c2:	6979      	ldr	r1, [r7, #20]
 80043c4:	3348      	adds	r3, #72	; 0x48
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	43db      	mvns	r3, r3
 80043de:	401a      	ands	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80043e6:	e007      	b.n	80043f8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	43db      	mvns	r3, r3
 800440a:	401a      	ands	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004412:	e007      	b.n	8004424 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	431a      	orrs	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	431a      	orrs	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e006      	b.n	800445e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d12e      	bne.n	80044da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004494:	f7ff f9a2 	bl	80037dc <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800449a:	e012      	b.n	80044c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800449c:	f7ff f99e 	bl	80037dc <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b0a      	cmp	r3, #10
 80044a8:	d90b      	bls.n	80044c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2205      	movs	r2, #5
 80044ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e012      	b.n	80044e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	e006      	b.n	80044e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004504:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d003      	beq.n	8004514 <HAL_CAN_GetRxMessage+0x24>
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b02      	cmp	r3, #2
 8004510:	f040 80f3 	bne.w	80046fa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10e      	bne.n	8004538 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0e7      	b.n	8004708 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d107      	bne.n	8004556 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0d8      	b.n	8004708 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	331b      	adds	r3, #27
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	4413      	add	r3, r2
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0204 	and.w	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10c      	bne.n	800458e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	331b      	adds	r3, #27
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	4413      	add	r3, r2
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0d5b      	lsrs	r3, r3, #21
 8004584:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e00b      	b.n	80045a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	331b      	adds	r3, #27
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	4413      	add	r3, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	08db      	lsrs	r3, r3, #3
 800459e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	331b      	adds	r3, #27
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	4413      	add	r3, r2
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0202 	and.w	r2, r3, #2
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	331b      	adds	r3, #27
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	331b      	adds	r3, #27
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4413      	add	r3, r2
 80045e0:	3304      	adds	r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	331b      	adds	r3, #27
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	4413      	add	r3, r2
 800460e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	4413      	add	r3, r2
 8004624:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	0a1a      	lsrs	r2, r3, #8
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	3301      	adds	r3, #1
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	4413      	add	r3, r2
 800463e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	0c1a      	lsrs	r2, r3, #16
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	3302      	adds	r3, #2
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	4413      	add	r3, r2
 8004658:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	0e1a      	lsrs	r2, r3, #24
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	3303      	adds	r3, #3
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	4413      	add	r3, r2
 8004672:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	3304      	adds	r3, #4
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	4413      	add	r3, r2
 800468a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0a1a      	lsrs	r2, r3, #8
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	3305      	adds	r3, #5
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	0c1a      	lsrs	r2, r3, #16
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	3306      	adds	r3, #6
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	4413      	add	r3, r2
 80046be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	0e1a      	lsrs	r2, r3, #24
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	3307      	adds	r3, #7
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d108      	bne.n	80046e6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0220 	orr.w	r2, r2, #32
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	e007      	b.n	80046f6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0220 	orr.w	r2, r2, #32
 80046f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e006      	b.n	8004708 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004722:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d002      	beq.n	8004730 <HAL_CAN_ActivateNotification+0x1e>
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d109      	bne.n	8004744 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6959      	ldr	r1, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e006      	b.n	8004752 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d07c      	beq.n	800489c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d023      	beq.n	80047f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2201      	movs	r2, #1
 80047b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f983 	bl	8004aca <HAL_CAN_TxMailbox0CompleteCallback>
 80047c4:	e016      	b.n	80047f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	e00c      	b.n	80047f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d004      	beq.n	80047ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
 80047ec:	e002      	b.n	80047f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f986 	bl	8004b00 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d024      	beq.n	8004848 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004806:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f962 	bl	8004adc <HAL_CAN_TxMailbox1CompleteCallback>
 8004818:	e016      	b.n	8004848 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
 800482c:	e00c      	b.n	8004848 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
 8004840:	e002      	b.n	8004848 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f965 	bl	8004b12 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d024      	beq.n	800489c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800485a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f941 	bl	8004aee <HAL_CAN_TxMailbox2CompleteCallback>
 800486c:	e016      	b.n	800489c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
 8004880:	e00c      	b.n	800489c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
 8004894:	e002      	b.n	800489c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f944 	bl	8004b24 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00c      	beq.n	80048c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2208      	movs	r2, #8
 80048da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f933 	bl	8004b48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f91b 	bl	8004b36 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800491a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2210      	movs	r2, #16
 8004922:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d006      	beq.n	8004946 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2208      	movs	r2, #8
 800493e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f913 	bl	8004b6c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f8fb 	bl	8004b5a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2210      	movs	r2, #16
 800497e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8fc 	bl	8004b7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00b      	beq.n	80049a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d006      	beq.n	80049a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2208      	movs	r2, #8
 80049a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f8f4 	bl	8004b90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d07b      	beq.n	8004aaa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d072      	beq.n	8004aa2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	f043 0302 	orr.w	r3, r3, #2
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d043      	beq.n	8004aa2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03e      	beq.n	8004aa2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a2a:	2b60      	cmp	r3, #96	; 0x60
 8004a2c:	d02b      	beq.n	8004a86 <HAL_CAN_IRQHandler+0x32a>
 8004a2e:	2b60      	cmp	r3, #96	; 0x60
 8004a30:	d82e      	bhi.n	8004a90 <HAL_CAN_IRQHandler+0x334>
 8004a32:	2b50      	cmp	r3, #80	; 0x50
 8004a34:	d022      	beq.n	8004a7c <HAL_CAN_IRQHandler+0x320>
 8004a36:	2b50      	cmp	r3, #80	; 0x50
 8004a38:	d82a      	bhi.n	8004a90 <HAL_CAN_IRQHandler+0x334>
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d019      	beq.n	8004a72 <HAL_CAN_IRQHandler+0x316>
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d826      	bhi.n	8004a90 <HAL_CAN_IRQHandler+0x334>
 8004a42:	2b30      	cmp	r3, #48	; 0x30
 8004a44:	d010      	beq.n	8004a68 <HAL_CAN_IRQHandler+0x30c>
 8004a46:	2b30      	cmp	r3, #48	; 0x30
 8004a48:	d822      	bhi.n	8004a90 <HAL_CAN_IRQHandler+0x334>
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d002      	beq.n	8004a54 <HAL_CAN_IRQHandler+0x2f8>
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d005      	beq.n	8004a5e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004a52:	e01d      	b.n	8004a90 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	f043 0308 	orr.w	r3, r3, #8
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a5c:	e019      	b.n	8004a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f043 0310 	orr.w	r3, r3, #16
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a66:	e014      	b.n	8004a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	f043 0320 	orr.w	r3, r3, #32
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a70:	e00f      	b.n	8004a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a7a:	e00a      	b.n	8004a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a84:	e005      	b.n	8004a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a8e:	e000      	b.n	8004a92 <HAL_CAN_IRQHandler+0x336>
            break;
 8004a90:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699a      	ldr	r2, [r3, #24]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004aa0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f870 	bl	8004ba2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	60d3      	str	r3, [r2, #12]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <__NVIC_GetPriorityGrouping+0x18>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	f003 0307 	and.w	r3, r3, #7
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	db0b      	blt.n	8004c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	f003 021f 	and.w	r2, r3, #31
 8004c30:	4906      	ldr	r1, [pc, #24]	; (8004c4c <__NVIC_EnableIRQ+0x34>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	2001      	movs	r0, #1
 8004c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	e000e100 	.word	0xe000e100

08004c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	6039      	str	r1, [r7, #0]
 8004c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	db0a      	blt.n	8004c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	490c      	ldr	r1, [pc, #48]	; (8004c9c <__NVIC_SetPriority+0x4c>)
 8004c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6e:	0112      	lsls	r2, r2, #4
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	440b      	add	r3, r1
 8004c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c78:	e00a      	b.n	8004c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4908      	ldr	r1, [pc, #32]	; (8004ca0 <__NVIC_SetPriority+0x50>)
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	3b04      	subs	r3, #4
 8004c88:	0112      	lsls	r2, r2, #4
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	761a      	strb	r2, [r3, #24]
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	e000e100 	.word	0xe000e100
 8004ca0:	e000ed00 	.word	0xe000ed00

08004ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	; 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f1c3 0307 	rsb	r3, r3, #7
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	bf28      	it	cs
 8004cc2:	2304      	movcs	r3, #4
 8004cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d902      	bls.n	8004cd4 <NVIC_EncodePriority+0x30>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3b03      	subs	r3, #3
 8004cd2:	e000      	b.n	8004cd6 <NVIC_EncodePriority+0x32>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43da      	mvns	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cec:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf6:	43d9      	mvns	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cfc:	4313      	orrs	r3, r2
         );
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3724      	adds	r7, #36	; 0x24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d18:	d301      	bcc.n	8004d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e00f      	b.n	8004d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d1e:	4a0a      	ldr	r2, [pc, #40]	; (8004d48 <SysTick_Config+0x40>)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d26:	210f      	movs	r1, #15
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	f7ff ff90 	bl	8004c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <SysTick_Config+0x40>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <SysTick_Config+0x40>)
 8004d38:	2207      	movs	r2, #7
 8004d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	e000e010 	.word	0xe000e010

08004d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff2d 	bl	8004bb4 <__NVIC_SetPriorityGrouping>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b086      	sub	sp, #24
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	4603      	mov	r3, r0
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d74:	f7ff ff42 	bl	8004bfc <__NVIC_GetPriorityGrouping>
 8004d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	6978      	ldr	r0, [r7, #20]
 8004d80:	f7ff ff90 	bl	8004ca4 <NVIC_EncodePriority>
 8004d84:	4602      	mov	r2, r0
 8004d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff ff5f 	bl	8004c50 <__NVIC_SetPriority>
}
 8004d92:	bf00      	nop
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	4603      	mov	r3, r0
 8004da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ff35 	bl	8004c18 <__NVIC_EnableIRQ>
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff ffa2 	bl	8004d08 <SysTick_Config>
 8004dc4:	4603      	mov	r3, r0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e043      	b.n	8004e6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <HAL_DMA_Init+0xa8>)
 8004dee:	4413      	add	r3, r2
 8004df0:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <HAL_DMA_Init+0xac>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	009a      	lsls	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <HAL_DMA_Init+0xb0>)
 8004e02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004e1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	bffdfff8 	.word	0xbffdfff8
 8004e7c:	cccccccd 	.word	0xcccccccd
 8004e80:	40020000 	.word	0x40020000

08004e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DMA_Start_IT+0x20>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e04a      	b.n	8004f3a <HAL_DMA_Start_IT+0xb6>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d13a      	bne.n	8004f2c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f9f4 	bl	80052c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 020e 	orr.w	r2, r2, #14
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e00f      	b.n	8004f1a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0204 	bic.w	r2, r2, #4
 8004f08:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 020a 	orr.w	r2, r2, #10
 8004f18:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e005      	b.n	8004f38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d008      	beq.n	8004f6a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e020      	b.n	8004fac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 020e 	bic.w	r2, r2, #14
 8004f78:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2101      	movs	r1, #1
 8004f94:	fa01 f202 	lsl.w	r2, r1, r2
 8004f98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d005      	beq.n	8004fda <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	e051      	b.n	800507e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 020e 	bic.w	r2, r2, #14
 8004fe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_DMA_Abort_IT+0xd0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d029      	beq.n	8005058 <HAL_DMA_Abort_IT+0xa0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a20      	ldr	r2, [pc, #128]	; (800508c <HAL_DMA_Abort_IT+0xd4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <HAL_DMA_Abort_IT+0x9c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <HAL_DMA_Abort_IT+0xd8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d01a      	beq.n	800504e <HAL_DMA_Abort_IT+0x96>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <HAL_DMA_Abort_IT+0xdc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d012      	beq.n	8005048 <HAL_DMA_Abort_IT+0x90>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <HAL_DMA_Abort_IT+0xe0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00a      	beq.n	8005042 <HAL_DMA_Abort_IT+0x8a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1a      	ldr	r2, [pc, #104]	; (800509c <HAL_DMA_Abort_IT+0xe4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d102      	bne.n	800503c <HAL_DMA_Abort_IT+0x84>
 8005036:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800503a:	e00e      	b.n	800505a <HAL_DMA_Abort_IT+0xa2>
 800503c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005040:	e00b      	b.n	800505a <HAL_DMA_Abort_IT+0xa2>
 8005042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005046:	e008      	b.n	800505a <HAL_DMA_Abort_IT+0xa2>
 8005048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800504c:	e005      	b.n	800505a <HAL_DMA_Abort_IT+0xa2>
 800504e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005052:	e002      	b.n	800505a <HAL_DMA_Abort_IT+0xa2>
 8005054:	2310      	movs	r3, #16
 8005056:	e000      	b.n	800505a <HAL_DMA_Abort_IT+0xa2>
 8005058:	2301      	movs	r3, #1
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <HAL_DMA_Abort_IT+0xe8>)
 800505c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	4798      	blx	r3
    } 
  }
  return status;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40020008 	.word	0x40020008
 800508c:	4002001c 	.word	0x4002001c
 8005090:	40020030 	.word	0x40020030
 8005094:	40020044 	.word	0x40020044
 8005098:	40020058 	.word	0x40020058
 800509c:	4002006c 	.word	0x4002006c
 80050a0:	40020000 	.word	0x40020000

080050a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	2204      	movs	r2, #4
 80050c2:	409a      	lsls	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d04f      	beq.n	800516c <HAL_DMA_IRQHandler+0xc8>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d04a      	beq.n	800516c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a66      	ldr	r2, [pc, #408]	; (8005294 <HAL_DMA_IRQHandler+0x1f0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d029      	beq.n	8005152 <HAL_DMA_IRQHandler+0xae>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a65      	ldr	r2, [pc, #404]	; (8005298 <HAL_DMA_IRQHandler+0x1f4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_DMA_IRQHandler+0xaa>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a63      	ldr	r2, [pc, #396]	; (800529c <HAL_DMA_IRQHandler+0x1f8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01a      	beq.n	8005148 <HAL_DMA_IRQHandler+0xa4>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a62      	ldr	r2, [pc, #392]	; (80052a0 <HAL_DMA_IRQHandler+0x1fc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d012      	beq.n	8005142 <HAL_DMA_IRQHandler+0x9e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a60      	ldr	r2, [pc, #384]	; (80052a4 <HAL_DMA_IRQHandler+0x200>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00a      	beq.n	800513c <HAL_DMA_IRQHandler+0x98>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a5f      	ldr	r2, [pc, #380]	; (80052a8 <HAL_DMA_IRQHandler+0x204>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d102      	bne.n	8005136 <HAL_DMA_IRQHandler+0x92>
 8005130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005134:	e00e      	b.n	8005154 <HAL_DMA_IRQHandler+0xb0>
 8005136:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800513a:	e00b      	b.n	8005154 <HAL_DMA_IRQHandler+0xb0>
 800513c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005140:	e008      	b.n	8005154 <HAL_DMA_IRQHandler+0xb0>
 8005142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005146:	e005      	b.n	8005154 <HAL_DMA_IRQHandler+0xb0>
 8005148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514c:	e002      	b.n	8005154 <HAL_DMA_IRQHandler+0xb0>
 800514e:	2340      	movs	r3, #64	; 0x40
 8005150:	e000      	b.n	8005154 <HAL_DMA_IRQHandler+0xb0>
 8005152:	2304      	movs	r3, #4
 8005154:	4a55      	ldr	r2, [pc, #340]	; (80052ac <HAL_DMA_IRQHandler+0x208>)
 8005156:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8094 	beq.w	800528a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800516a:	e08e      	b.n	800528a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	2202      	movs	r2, #2
 8005172:	409a      	lsls	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d056      	beq.n	800522a <HAL_DMA_IRQHandler+0x186>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d051      	beq.n	800522a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 020a 	bic.w	r2, r2, #10
 80051a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a38      	ldr	r2, [pc, #224]	; (8005294 <HAL_DMA_IRQHandler+0x1f0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d029      	beq.n	800520a <HAL_DMA_IRQHandler+0x166>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a37      	ldr	r2, [pc, #220]	; (8005298 <HAL_DMA_IRQHandler+0x1f4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d022      	beq.n	8005206 <HAL_DMA_IRQHandler+0x162>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a35      	ldr	r2, [pc, #212]	; (800529c <HAL_DMA_IRQHandler+0x1f8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d01a      	beq.n	8005200 <HAL_DMA_IRQHandler+0x15c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a34      	ldr	r2, [pc, #208]	; (80052a0 <HAL_DMA_IRQHandler+0x1fc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d012      	beq.n	80051fa <HAL_DMA_IRQHandler+0x156>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a32      	ldr	r2, [pc, #200]	; (80052a4 <HAL_DMA_IRQHandler+0x200>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00a      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x150>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a31      	ldr	r2, [pc, #196]	; (80052a8 <HAL_DMA_IRQHandler+0x204>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d102      	bne.n	80051ee <HAL_DMA_IRQHandler+0x14a>
 80051e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051ec:	e00e      	b.n	800520c <HAL_DMA_IRQHandler+0x168>
 80051ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f2:	e00b      	b.n	800520c <HAL_DMA_IRQHandler+0x168>
 80051f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051f8:	e008      	b.n	800520c <HAL_DMA_IRQHandler+0x168>
 80051fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051fe:	e005      	b.n	800520c <HAL_DMA_IRQHandler+0x168>
 8005200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005204:	e002      	b.n	800520c <HAL_DMA_IRQHandler+0x168>
 8005206:	2320      	movs	r3, #32
 8005208:	e000      	b.n	800520c <HAL_DMA_IRQHandler+0x168>
 800520a:	2302      	movs	r3, #2
 800520c:	4a27      	ldr	r2, [pc, #156]	; (80052ac <HAL_DMA_IRQHandler+0x208>)
 800520e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	d034      	beq.n	800528a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005228:	e02f      	b.n	800528a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2208      	movs	r2, #8
 8005230:	409a      	lsls	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d028      	beq.n	800528c <HAL_DMA_IRQHandler+0x1e8>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d023      	beq.n	800528c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 020e 	bic.w	r2, r2, #14
 8005252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f202 	lsl.w	r2, r1, r2
 8005262:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
    }
  }
  return;
 800528a:	bf00      	nop
 800528c:	bf00      	nop
}
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40020008 	.word	0x40020008
 8005298:	4002001c 	.word	0x4002001c
 800529c:	40020030 	.word	0x40020030
 80052a0:	40020044 	.word	0x40020044
 80052a4:	40020058 	.word	0x40020058
 80052a8:	4002006c 	.word	0x4002006c
 80052ac:	40020000 	.word	0x40020000

080052b0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f202 	lsl.w	r2, r1, r2
 80052e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d108      	bne.n	8005308 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005306:	e007      	b.n	8005318 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	60da      	str	r2, [r3, #12]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr
	...

08005324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005324:	b480      	push	{r7}
 8005326:	b08b      	sub	sp, #44	; 0x2c
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800532e:	2300      	movs	r3, #0
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005332:	2300      	movs	r3, #0
 8005334:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005336:	e169      	b.n	800560c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005338:	2201      	movs	r2, #1
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	429a      	cmp	r2, r3
 8005352:	f040 8158 	bne.w	8005606 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4a9a      	ldr	r2, [pc, #616]	; (80055c4 <HAL_GPIO_Init+0x2a0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d05e      	beq.n	800541e <HAL_GPIO_Init+0xfa>
 8005360:	4a98      	ldr	r2, [pc, #608]	; (80055c4 <HAL_GPIO_Init+0x2a0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d875      	bhi.n	8005452 <HAL_GPIO_Init+0x12e>
 8005366:	4a98      	ldr	r2, [pc, #608]	; (80055c8 <HAL_GPIO_Init+0x2a4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d058      	beq.n	800541e <HAL_GPIO_Init+0xfa>
 800536c:	4a96      	ldr	r2, [pc, #600]	; (80055c8 <HAL_GPIO_Init+0x2a4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d86f      	bhi.n	8005452 <HAL_GPIO_Init+0x12e>
 8005372:	4a96      	ldr	r2, [pc, #600]	; (80055cc <HAL_GPIO_Init+0x2a8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d052      	beq.n	800541e <HAL_GPIO_Init+0xfa>
 8005378:	4a94      	ldr	r2, [pc, #592]	; (80055cc <HAL_GPIO_Init+0x2a8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d869      	bhi.n	8005452 <HAL_GPIO_Init+0x12e>
 800537e:	4a94      	ldr	r2, [pc, #592]	; (80055d0 <HAL_GPIO_Init+0x2ac>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d04c      	beq.n	800541e <HAL_GPIO_Init+0xfa>
 8005384:	4a92      	ldr	r2, [pc, #584]	; (80055d0 <HAL_GPIO_Init+0x2ac>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d863      	bhi.n	8005452 <HAL_GPIO_Init+0x12e>
 800538a:	4a92      	ldr	r2, [pc, #584]	; (80055d4 <HAL_GPIO_Init+0x2b0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d046      	beq.n	800541e <HAL_GPIO_Init+0xfa>
 8005390:	4a90      	ldr	r2, [pc, #576]	; (80055d4 <HAL_GPIO_Init+0x2b0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d85d      	bhi.n	8005452 <HAL_GPIO_Init+0x12e>
 8005396:	2b12      	cmp	r3, #18
 8005398:	d82a      	bhi.n	80053f0 <HAL_GPIO_Init+0xcc>
 800539a:	2b12      	cmp	r3, #18
 800539c:	d859      	bhi.n	8005452 <HAL_GPIO_Init+0x12e>
 800539e:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <HAL_GPIO_Init+0x80>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	0800541f 	.word	0x0800541f
 80053a8:	080053f9 	.word	0x080053f9
 80053ac:	0800540b 	.word	0x0800540b
 80053b0:	0800544d 	.word	0x0800544d
 80053b4:	08005453 	.word	0x08005453
 80053b8:	08005453 	.word	0x08005453
 80053bc:	08005453 	.word	0x08005453
 80053c0:	08005453 	.word	0x08005453
 80053c4:	08005453 	.word	0x08005453
 80053c8:	08005453 	.word	0x08005453
 80053cc:	08005453 	.word	0x08005453
 80053d0:	08005453 	.word	0x08005453
 80053d4:	08005453 	.word	0x08005453
 80053d8:	08005453 	.word	0x08005453
 80053dc:	08005453 	.word	0x08005453
 80053e0:	08005453 	.word	0x08005453
 80053e4:	08005453 	.word	0x08005453
 80053e8:	08005401 	.word	0x08005401
 80053ec:	08005415 	.word	0x08005415
 80053f0:	4a79      	ldr	r2, [pc, #484]	; (80055d8 <HAL_GPIO_Init+0x2b4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053f6:	e02c      	b.n	8005452 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	623b      	str	r3, [r7, #32]
          break;
 80053fe:	e029      	b.n	8005454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	3304      	adds	r3, #4
 8005406:	623b      	str	r3, [r7, #32]
          break;
 8005408:	e024      	b.n	8005454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	3308      	adds	r3, #8
 8005410:	623b      	str	r3, [r7, #32]
          break;
 8005412:	e01f      	b.n	8005454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	330c      	adds	r3, #12
 800541a:	623b      	str	r3, [r7, #32]
          break;
 800541c:	e01a      	b.n	8005454 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005426:	2304      	movs	r3, #4
 8005428:	623b      	str	r3, [r7, #32]
          break;
 800542a:	e013      	b.n	8005454 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005434:	2308      	movs	r3, #8
 8005436:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	611a      	str	r2, [r3, #16]
          break;
 800543e:	e009      	b.n	8005454 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005440:	2308      	movs	r3, #8
 8005442:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	615a      	str	r2, [r3, #20]
          break;
 800544a:	e003      	b.n	8005454 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800544c:	2300      	movs	r3, #0
 800544e:	623b      	str	r3, [r7, #32]
          break;
 8005450:	e000      	b.n	8005454 <HAL_GPIO_Init+0x130>
          break;
 8005452:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2bff      	cmp	r3, #255	; 0xff
 8005458:	d801      	bhi.n	800545e <HAL_GPIO_Init+0x13a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	e001      	b.n	8005462 <HAL_GPIO_Init+0x13e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
 8005462:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2bff      	cmp	r3, #255	; 0xff
 8005468:	d802      	bhi.n	8005470 <HAL_GPIO_Init+0x14c>
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	e002      	b.n	8005476 <HAL_GPIO_Init+0x152>
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	3b08      	subs	r3, #8
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	210f      	movs	r1, #15
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	401a      	ands	r2, r3
 8005488:	6a39      	ldr	r1, [r7, #32]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	431a      	orrs	r2, r3
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80b1 	beq.w	8005606 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054a4:	4b4d      	ldr	r3, [pc, #308]	; (80055dc <HAL_GPIO_Init+0x2b8>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	4a4c      	ldr	r2, [pc, #304]	; (80055dc <HAL_GPIO_Init+0x2b8>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	6193      	str	r3, [r2, #24]
 80054b0:	4b4a      	ldr	r3, [pc, #296]	; (80055dc <HAL_GPIO_Init+0x2b8>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054bc:	4a48      	ldr	r2, [pc, #288]	; (80055e0 <HAL_GPIO_Init+0x2bc>)
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	3302      	adds	r3, #2
 80054c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	220f      	movs	r2, #15
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4013      	ands	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a40      	ldr	r2, [pc, #256]	; (80055e4 <HAL_GPIO_Init+0x2c0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <HAL_GPIO_Init+0x1ec>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3f      	ldr	r2, [pc, #252]	; (80055e8 <HAL_GPIO_Init+0x2c4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00d      	beq.n	800550c <HAL_GPIO_Init+0x1e8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a3e      	ldr	r2, [pc, #248]	; (80055ec <HAL_GPIO_Init+0x2c8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <HAL_GPIO_Init+0x1e4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a3d      	ldr	r2, [pc, #244]	; (80055f0 <HAL_GPIO_Init+0x2cc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_GPIO_Init+0x1e0>
 8005500:	2303      	movs	r3, #3
 8005502:	e006      	b.n	8005512 <HAL_GPIO_Init+0x1ee>
 8005504:	2304      	movs	r3, #4
 8005506:	e004      	b.n	8005512 <HAL_GPIO_Init+0x1ee>
 8005508:	2302      	movs	r3, #2
 800550a:	e002      	b.n	8005512 <HAL_GPIO_Init+0x1ee>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_GPIO_Init+0x1ee>
 8005510:	2300      	movs	r3, #0
 8005512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005514:	f002 0203 	and.w	r2, r2, #3
 8005518:	0092      	lsls	r2, r2, #2
 800551a:	4093      	lsls	r3, r2
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005522:	492f      	ldr	r1, [pc, #188]	; (80055e0 <HAL_GPIO_Init+0x2bc>)
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	089b      	lsrs	r3, r3, #2
 8005528:	3302      	adds	r3, #2
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800553c:	4b2d      	ldr	r3, [pc, #180]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	492c      	ldr	r1, [pc, #176]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]
 8005548:	e006      	b.n	8005558 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800554a:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	43db      	mvns	r3, r3
 8005552:	4928      	ldr	r1, [pc, #160]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005554:	4013      	ands	r3, r2
 8005556:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d006      	beq.n	8005572 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005564:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4922      	ldr	r1, [pc, #136]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	4313      	orrs	r3, r2
 800556e:	604b      	str	r3, [r1, #4]
 8005570:	e006      	b.n	8005580 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005572:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	43db      	mvns	r3, r3
 800557a:	491e      	ldr	r1, [pc, #120]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800557c:	4013      	ands	r3, r2
 800557e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800558c:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	4918      	ldr	r1, [pc, #96]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	4313      	orrs	r3, r2
 8005596:	608b      	str	r3, [r1, #8]
 8005598:	e006      	b.n	80055a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800559a:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	4914      	ldr	r1, [pc, #80]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d021      	beq.n	80055f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	490e      	ldr	r1, [pc, #56]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60cb      	str	r3, [r1, #12]
 80055c0:	e021      	b.n	8005606 <HAL_GPIO_Init+0x2e2>
 80055c2:	bf00      	nop
 80055c4:	10320000 	.word	0x10320000
 80055c8:	10310000 	.word	0x10310000
 80055cc:	10220000 	.word	0x10220000
 80055d0:	10210000 	.word	0x10210000
 80055d4:	10120000 	.word	0x10120000
 80055d8:	10110000 	.word	0x10110000
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40010800 	.word	0x40010800
 80055e8:	40010c00 	.word	0x40010c00
 80055ec:	40011000 	.word	0x40011000
 80055f0:	40011400 	.word	0x40011400
 80055f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_GPIO_Init+0x304>)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	43db      	mvns	r3, r3
 8005600:	4909      	ldr	r1, [pc, #36]	; (8005628 <HAL_GPIO_Init+0x304>)
 8005602:	4013      	ands	r3, r2
 8005604:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	3301      	adds	r3, #1
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f ae8e 	bne.w	8005338 <HAL_GPIO_Init+0x14>
  }
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	372c      	adds	r7, #44	; 0x2c
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	40010400 	.word	0x40010400

0800562c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	807b      	strh	r3, [r7, #2]
 8005638:	4613      	mov	r3, r2
 800563a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800563c:	787b      	ldrb	r3, [r7, #1]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005642:	887a      	ldrh	r2, [r7, #2]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005648:	e003      	b.n	8005652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800564a:	887b      	ldrh	r3, [r7, #2]
 800564c:	041a      	lsls	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800566e:	887a      	ldrh	r2, [r7, #2]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4013      	ands	r3, r2
 8005674:	041a      	lsls	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	43d9      	mvns	r1, r3
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	400b      	ands	r3, r1
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	611a      	str	r2, [r3, #16]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr
	...

08005690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e12b      	b.n	80058fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fd fcac 	bl	8003014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2224      	movs	r2, #36	; 0x24
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0201 	bic.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056f4:	f003 f874 	bl	80087e0 <HAL_RCC_GetPCLK1Freq>
 80056f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	4a81      	ldr	r2, [pc, #516]	; (8005904 <HAL_I2C_Init+0x274>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d807      	bhi.n	8005714 <HAL_I2C_Init+0x84>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4a80      	ldr	r2, [pc, #512]	; (8005908 <HAL_I2C_Init+0x278>)
 8005708:	4293      	cmp	r3, r2
 800570a:	bf94      	ite	ls
 800570c:	2301      	movls	r3, #1
 800570e:	2300      	movhi	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	e006      	b.n	8005722 <HAL_I2C_Init+0x92>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4a7d      	ldr	r2, [pc, #500]	; (800590c <HAL_I2C_Init+0x27c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	bf94      	ite	ls
 800571c:	2301      	movls	r3, #1
 800571e:	2300      	movhi	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e0e7      	b.n	80058fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a78      	ldr	r2, [pc, #480]	; (8005910 <HAL_I2C_Init+0x280>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	0c9b      	lsrs	r3, r3, #18
 8005734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4a6a      	ldr	r2, [pc, #424]	; (8005904 <HAL_I2C_Init+0x274>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d802      	bhi.n	8005764 <HAL_I2C_Init+0xd4>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	3301      	adds	r3, #1
 8005762:	e009      	b.n	8005778 <HAL_I2C_Init+0xe8>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	4a69      	ldr	r2, [pc, #420]	; (8005914 <HAL_I2C_Init+0x284>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	099b      	lsrs	r3, r3, #6
 8005776:	3301      	adds	r3, #1
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	430b      	orrs	r3, r1
 800577e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800578a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	495c      	ldr	r1, [pc, #368]	; (8005904 <HAL_I2C_Init+0x274>)
 8005794:	428b      	cmp	r3, r1
 8005796:	d819      	bhi.n	80057cc <HAL_I2C_Init+0x13c>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	1e59      	subs	r1, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057a6:	1c59      	adds	r1, r3, #1
 80057a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057ac:	400b      	ands	r3, r1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_I2C_Init+0x138>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1e59      	subs	r1, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c0:	3301      	adds	r3, #1
 80057c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c6:	e051      	b.n	800586c <HAL_I2C_Init+0x1dc>
 80057c8:	2304      	movs	r3, #4
 80057ca:	e04f      	b.n	800586c <HAL_I2C_Init+0x1dc>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d111      	bne.n	80057f8 <HAL_I2C_Init+0x168>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1e58      	subs	r0, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6859      	ldr	r1, [r3, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	440b      	add	r3, r1
 80057e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057e6:	3301      	adds	r3, #1
 80057e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e012      	b.n	800581e <HAL_I2C_Init+0x18e>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1e58      	subs	r0, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6859      	ldr	r1, [r3, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	0099      	lsls	r1, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	fbb0 f3f3 	udiv	r3, r0, r3
 800580e:	3301      	adds	r3, #1
 8005810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Init+0x196>
 8005822:	2301      	movs	r3, #1
 8005824:	e022      	b.n	800586c <HAL_I2C_Init+0x1dc>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10e      	bne.n	800584c <HAL_I2C_Init+0x1bc>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1e58      	subs	r0, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6859      	ldr	r1, [r3, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	440b      	add	r3, r1
 800583c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005840:	3301      	adds	r3, #1
 8005842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584a:	e00f      	b.n	800586c <HAL_I2C_Init+0x1dc>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1e58      	subs	r0, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	0099      	lsls	r1, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005862:	3301      	adds	r3, #1
 8005864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	6809      	ldr	r1, [r1, #0]
 8005870:	4313      	orrs	r3, r2
 8005872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69da      	ldr	r2, [r3, #28]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800589a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6911      	ldr	r1, [r2, #16]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68d2      	ldr	r2, [r2, #12]
 80058a6:	4311      	orrs	r1, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	000186a0 	.word	0x000186a0
 8005908:	001e847f 	.word	0x001e847f
 800590c:	003d08ff 	.word	0x003d08ff
 8005910:	431bde83 	.word	0x431bde83
 8005914:	10624dd3 	.word	0x10624dd3

08005918 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	461a      	mov	r2, r3
 8005926:	4603      	mov	r3, r0
 8005928:	817b      	strh	r3, [r7, #10]
 800592a:	460b      	mov	r3, r1
 800592c:	813b      	strh	r3, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005932:	f7fd ff53 	bl	80037dc <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b20      	cmp	r3, #32
 8005942:	f040 80d9 	bne.w	8005af8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	2319      	movs	r3, #25
 800594c:	2201      	movs	r2, #1
 800594e:	496d      	ldr	r1, [pc, #436]	; (8005b04 <HAL_I2C_Mem_Write+0x1ec>)
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f002 f949 	bl	8007be8 <I2C_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
 800595e:	e0cc      	b.n	8005afa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_I2C_Mem_Write+0x56>
 800596a:	2302      	movs	r3, #2
 800596c:	e0c5      	b.n	8005afa <HAL_I2C_Mem_Write+0x1e2>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b01      	cmp	r3, #1
 8005982:	d007      	beq.n	8005994 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2221      	movs	r2, #33	; 0x21
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2240      	movs	r2, #64	; 0x40
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a3a      	ldr	r2, [r7, #32]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a4d      	ldr	r2, [pc, #308]	; (8005b08 <HAL_I2C_Mem_Write+0x1f0>)
 80059d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059d6:	88f8      	ldrh	r0, [r7, #6]
 80059d8:	893a      	ldrh	r2, [r7, #8]
 80059da:	8979      	ldrh	r1, [r7, #10]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	4603      	mov	r3, r0
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f001 fed8 	bl	800779c <I2C_RequestMemoryWrite>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d052      	beq.n	8005a98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e081      	b.n	8005afa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f002 f9ca 	bl	8007d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00d      	beq.n	8005a22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d107      	bne.n	8005a1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e06b      	b.n	8005afa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d11b      	bne.n	8005a98 <HAL_I2C_Mem_Write+0x180>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d017      	beq.n	8005a98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	781a      	ldrb	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1aa      	bne.n	80059f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f002 f9b6 	bl	8007e16 <I2C_WaitOnBTFFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d107      	bne.n	8005ac8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e016      	b.n	8005afa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	00100002 	.word	0x00100002
 8005b08:	ffff0000 	.word	0xffff0000

08005b0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	; 0x30
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	4608      	mov	r0, r1
 8005b16:	4611      	mov	r1, r2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	817b      	strh	r3, [r7, #10]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	813b      	strh	r3, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b2a:	f7fd fe57 	bl	80037dc <HAL_GetTick>
 8005b2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	f040 8244 	bne.w	8005fc6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2319      	movs	r3, #25
 8005b44:	2201      	movs	r2, #1
 8005b46:	4982      	ldr	r1, [pc, #520]	; (8005d50 <HAL_I2C_Mem_Read+0x244>)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f002 f84d 	bl	8007be8 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
 8005b56:	e237      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_I2C_Mem_Read+0x5a>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e230      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d007      	beq.n	8005b8c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2222      	movs	r2, #34	; 0x22
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2240      	movs	r2, #64	; 0x40
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a62      	ldr	r2, [pc, #392]	; (8005d54 <HAL_I2C_Mem_Read+0x248>)
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bce:	88f8      	ldrh	r0, [r7, #6]
 8005bd0:	893a      	ldrh	r2, [r7, #8]
 8005bd2:	8979      	ldrh	r1, [r7, #10]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4603      	mov	r3, r0
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f001 fe72 	bl	80078c8 <I2C_RequestMemoryRead>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e1ec      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d113      	bne.n	8005c1e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e1c0      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d11e      	bne.n	8005c64 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c36:	b672      	cpsid	i
}
 8005c38:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c60:	b662      	cpsie	i
}
 8005c62:	e035      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d11e      	bne.n	8005caa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c7c:	b672      	cpsid	i
}
 8005c7e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ca6:	b662      	cpsie	i
}
 8005ca8:	e012      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cb8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005cd0:	e166      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	f200 811f 	bhi.w	8005f1a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d123      	bne.n	8005d2c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f002 f907 	bl	8007efc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e167      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d2a:	e139      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d152      	bne.n	8005dda <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4906      	ldr	r1, [pc, #24]	; (8005d58 <HAL_I2C_Mem_Read+0x24c>)
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f001 ff52 	bl	8007be8 <I2C_WaitOnFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e13c      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
 8005d4e:	bf00      	nop
 8005d50:	00100002 	.word	0x00100002
 8005d54:	ffff0000 	.word	0xffff0000
 8005d58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005d5c:	b672      	cpsid	i
}
 8005d5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005da2:	b662      	cpsie	i
}
 8005da4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dd8:	e0e2      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	2200      	movs	r2, #0
 8005de2:	497b      	ldr	r1, [pc, #492]	; (8005fd0 <HAL_I2C_Mem_Read+0x4c4>)
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f001 feff 	bl	8007be8 <I2C_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0e9      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e04:	b672      	cpsid	i
}
 8005e06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e3a:	4b66      	ldr	r3, [pc, #408]	; (8005fd4 <HAL_I2C_Mem_Read+0x4c8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <HAL_I2C_Mem_Read+0x4cc>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	0a1a      	lsrs	r2, r3, #8
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	00da      	lsls	r2, r3, #3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d118      	bne.n	8005e92 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f043 0220 	orr.w	r2, r3, #32
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005e82:	b662      	cpsie	i
}
 8005e84:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e09a      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d1d9      	bne.n	8005e54 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ee2:	b662      	cpsie	i
}
 8005ee4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f18:	e042      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f001 ffec 	bl	8007efc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e04c      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d118      	bne.n	8005fa0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f47f ae94 	bne.w	8005cd2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e000      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005fc6:	2302      	movs	r3, #2
  }
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3728      	adds	r7, #40	; 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	00010004 	.word	0x00010004
 8005fd4:	20000004 	.word	0x20000004
 8005fd8:	14f8b589 	.word	0x14f8b589

08005fdc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006004:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	2b10      	cmp	r3, #16
 800600a:	d003      	beq.n	8006014 <HAL_I2C_EV_IRQHandler+0x38>
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	f040 80c1 	bne.w	8006196 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10d      	bne.n	800604a <HAL_I2C_EV_IRQHandler+0x6e>
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006034:	d003      	beq.n	800603e <HAL_I2C_EV_IRQHandler+0x62>
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800603c:	d101      	bne.n	8006042 <HAL_I2C_EV_IRQHandler+0x66>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <HAL_I2C_EV_IRQHandler+0x68>
 8006042:	2300      	movs	r3, #0
 8006044:	2b01      	cmp	r3, #1
 8006046:	f000 8132 	beq.w	80062ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00c      	beq.n	800606e <HAL_I2C_EV_IRQHandler+0x92>
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	0a5b      	lsrs	r3, r3, #9
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d006      	beq.n	800606e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 ffcf 	bl	8008004 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fd77 	bl	8006b5a <I2C_Master_SB>
 800606c:	e092      	b.n	8006194 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	08db      	lsrs	r3, r3, #3
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_I2C_EV_IRQHandler+0xb2>
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fdec 	bl	8006c64 <I2C_Master_ADD10>
 800608c:	e082      	b.n	8006194 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_I2C_EV_IRQHandler+0xd2>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	0a5b      	lsrs	r3, r3, #9
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fe05 	bl	8006cb6 <I2C_Master_ADDR>
 80060ac:	e072      	b.n	8006194 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d03b      	beq.n	8006132 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c8:	f000 80f3 	beq.w	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	09db      	lsrs	r3, r3, #7
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00f      	beq.n	80060f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	0a9b      	lsrs	r3, r3, #10
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	089b      	lsrs	r3, r3, #2
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9f1 	bl	80064d8 <I2C_MasterTransmit_TXE>
 80060f6:	e04d      	b.n	8006194 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	089b      	lsrs	r3, r3, #2
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80d6 	beq.w	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	0a5b      	lsrs	r3, r3, #9
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80cf 	beq.w	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	2b21      	cmp	r3, #33	; 0x21
 8006118:	d103      	bne.n	8006122 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa78 	bl	8006610 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006120:	e0c7      	b.n	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	f040 80c4 	bne.w	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fae6 	bl	80066fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006130:	e0bf      	b.n	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800613c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006140:	f000 80b7 	beq.w	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	099b      	lsrs	r3, r3, #6
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00f      	beq.n	8006170 <HAL_I2C_EV_IRQHandler+0x194>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	0a9b      	lsrs	r3, r3, #10
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d009      	beq.n	8006170 <HAL_I2C_EV_IRQHandler+0x194>
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	089b      	lsrs	r3, r3, #2
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fb5b 	bl	8006824 <I2C_MasterReceive_RXNE>
 800616e:	e011      	b.n	8006194 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 809a 	beq.w	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	0a5b      	lsrs	r3, r3, #9
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 8093 	beq.w	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fbfa 	bl	8006986 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006192:	e08e      	b.n	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006194:	e08d      	b.n	80062b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	e007      	b.n	80061b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d012      	beq.n	80061ea <HAL_I2C_EV_IRQHandler+0x20e>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	0a5b      	lsrs	r3, r3, #9
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00c      	beq.n	80061ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80061e0:	69b9      	ldr	r1, [r7, #24]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 ffbe 	bl	8007164 <I2C_Slave_ADDR>
 80061e8:	e066      	b.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_I2C_EV_IRQHandler+0x22e>
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	0a5b      	lsrs	r3, r3, #9
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fff8 	bl	80071f8 <I2C_Slave_STOPF>
 8006208:	e056      	b.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b21      	cmp	r3, #33	; 0x21
 800620e:	d002      	beq.n	8006216 <HAL_I2C_EV_IRQHandler+0x23a>
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	2b29      	cmp	r3, #41	; 0x29
 8006214:	d125      	bne.n	8006262 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	09db      	lsrs	r3, r3, #7
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00f      	beq.n	8006242 <HAL_I2C_EV_IRQHandler+0x266>
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	0a9b      	lsrs	r3, r3, #10
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <HAL_I2C_EV_IRQHandler+0x266>
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	089b      	lsrs	r3, r3, #2
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fed6 	bl	8006fec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006240:	e039      	b.n	80062b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	089b      	lsrs	r3, r3, #2
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d033      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	0a5b      	lsrs	r3, r3, #9
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d02d      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 ff03 	bl	8007066 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006260:	e029      	b.n	80062b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	099b      	lsrs	r3, r3, #6
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <HAL_I2C_EV_IRQHandler+0x2b2>
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	0a9b      	lsrs	r3, r3, #10
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <HAL_I2C_EV_IRQHandler+0x2b2>
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	089b      	lsrs	r3, r3, #2
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d103      	bne.n	800628e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 ff0d 	bl	80070a6 <I2C_SlaveReceive_RXNE>
 800628c:	e014      	b.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	0a5b      	lsrs	r3, r3, #9
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d008      	beq.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 ff3b 	bl	8007122 <I2C_SlaveReceive_BTF>
 80062ac:	e004      	b.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80062ae:	bf00      	nop
 80062b0:	e002      	b.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b2:	bf00      	nop
 80062b4:	e000      	b.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b08a      	sub	sp, #40	; 0x28
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_I2C_ER_IRQHandler+0x5e>
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	0a1b      	lsrs	r3, r3, #8
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d010      	beq.n	800631c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800630a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800631a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	0a5b      	lsrs	r3, r3, #9
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00e      	beq.n	8006346 <HAL_I2C_ER_IRQHandler+0x88>
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	f043 0302 	orr.w	r3, r3, #2
 800633a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006344:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	0a9b      	lsrs	r3, r3, #10
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d03f      	beq.n	80063d2 <HAL_I2C_ER_IRQHandler+0x114>
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	0a1b      	lsrs	r3, r3, #8
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d039      	beq.n	80063d2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800635e:	7efb      	ldrb	r3, [r7, #27]
 8006360:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006370:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006378:	7ebb      	ldrb	r3, [r7, #26]
 800637a:	2b20      	cmp	r3, #32
 800637c:	d112      	bne.n	80063a4 <HAL_I2C_ER_IRQHandler+0xe6>
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10f      	bne.n	80063a4 <HAL_I2C_ER_IRQHandler+0xe6>
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	2b21      	cmp	r3, #33	; 0x21
 8006388:	d008      	beq.n	800639c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800638a:	7cfb      	ldrb	r3, [r7, #19]
 800638c:	2b29      	cmp	r3, #41	; 0x29
 800638e:	d005      	beq.n	800639c <HAL_I2C_ER_IRQHandler+0xde>
 8006390:	7cfb      	ldrb	r3, [r7, #19]
 8006392:	2b28      	cmp	r3, #40	; 0x28
 8006394:	d106      	bne.n	80063a4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b21      	cmp	r3, #33	; 0x21
 800639a:	d103      	bne.n	80063a4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f85b 	bl	8007458 <I2C_Slave_AF>
 80063a2:	e016      	b.n	80063d2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	f043 0304 	orr.w	r3, r3, #4
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063b6:	7efb      	ldrb	r3, [r7, #27]
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d002      	beq.n	80063c2 <HAL_I2C_ER_IRQHandler+0x104>
 80063bc:	7efb      	ldrb	r3, [r7, #27]
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d107      	bne.n	80063d2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	0adb      	lsrs	r3, r3, #11
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00e      	beq.n	80063fc <HAL_I2C_ER_IRQHandler+0x13e>
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d008      	beq.n	80063fc <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	f043 0308 	orr.w	r3, r3, #8
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80063fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 f892 	bl	8007538 <I2C_ITError>
  }
}
 8006414:	bf00      	nop
 8006416:	3728      	adds	r7, #40	; 0x28
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr

08006452 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr

08006464 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
 8006470:	4613      	mov	r3, r2
 8006472:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr

0800647e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr

080064c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d150      	bne.n	80065a0 <I2C_MasterTransmit_TXE+0xc8>
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	2b21      	cmp	r3, #33	; 0x21
 8006502:	d14d      	bne.n	80065a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b08      	cmp	r3, #8
 8006508:	d01d      	beq.n	8006546 <I2C_MasterTransmit_TXE+0x6e>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b20      	cmp	r3, #32
 800650e:	d01a      	beq.n	8006546 <I2C_MasterTransmit_TXE+0x6e>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006516:	d016      	beq.n	8006546 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006526:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2211      	movs	r2, #17
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ff6c 	bl	800641c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006544:	e060      	b.n	8006608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006554:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006564:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d107      	bne.n	8006590 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff ff81 	bl	8006490 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800658e:	e03b      	b.n	8006608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff ff3f 	bl	800641c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800659e:	e033      	b.n	8006608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b21      	cmp	r3, #33	; 0x21
 80065a4:	d005      	beq.n	80065b2 <I2C_MasterTransmit_TXE+0xda>
 80065a6:	7bbb      	ldrb	r3, [r7, #14]
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d12d      	bne.n	8006608 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b22      	cmp	r3, #34	; 0x22
 80065b0:	d12a      	bne.n	8006608 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d108      	bne.n	80065ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80065cc:	e01c      	b.n	8006608 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d103      	bne.n	80065e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f88e 	bl	80066fc <I2C_MemoryTransmit_TXE_BTF>
}
 80065e0:	e012      	b.n	8006608 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006606:	e7ff      	b.n	8006608 <I2C_MasterTransmit_TXE+0x130>
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b21      	cmp	r3, #33	; 0x21
 8006628:	d164      	bne.n	80066f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	781a      	ldrb	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006658:	e04c      	b.n	80066f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d01d      	beq.n	800669c <I2C_MasterTransmit_BTF+0x8c>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b20      	cmp	r3, #32
 8006664:	d01a      	beq.n	800669c <I2C_MasterTransmit_BTF+0x8c>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800666c:	d016      	beq.n	800669c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800667c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2211      	movs	r2, #17
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff fec1 	bl	800641c <HAL_I2C_MasterTxCpltCallback>
}
 800669a:	e02b      	b.n	80066f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d107      	bne.n	80066e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fed6 	bl	8006490 <HAL_I2C_MemTxCpltCallback>
}
 80066e4:	e006      	b.n	80066f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fe94 	bl	800641c <HAL_I2C_MasterTxCpltCallback>
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006710:	2b00      	cmp	r3, #0
 8006712:	d11d      	bne.n	8006750 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d10b      	bne.n	8006734 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006720:	b2da      	uxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672c:	1c9a      	adds	r2, r3, #2
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006732:	e073      	b.n	800681c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006738:	b29b      	uxth	r3, r3
 800673a:	121b      	asrs	r3, r3, #8
 800673c:	b2da      	uxtb	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800674e:	e065      	b.n	800681c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	2b01      	cmp	r3, #1
 8006756:	d10b      	bne.n	8006770 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675c:	b2da      	uxtb	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800676e:	e055      	b.n	800681c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	2b02      	cmp	r3, #2
 8006776:	d151      	bne.n	800681c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	2b22      	cmp	r3, #34	; 0x22
 800677c:	d10d      	bne.n	800679a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800678c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006798:	e040      	b.n	800681c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d015      	beq.n	80067d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b21      	cmp	r3, #33	; 0x21
 80067a8:	d112      	bne.n	80067d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	781a      	ldrb	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067ce:	e025      	b.n	800681c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d120      	bne.n	800681c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	2b21      	cmp	r3, #33	; 0x21
 80067de:	d11d      	bne.n	800681c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fe3a 	bl	8006490 <HAL_I2C_MemTxCpltCallback>
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b22      	cmp	r3, #34	; 0x22
 8006836:	f040 80a2 	bne.w	800697e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d921      	bls.n	800688c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b03      	cmp	r3, #3
 8006876:	f040 8082 	bne.w	800697e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006888:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800688a:	e078      	b.n	800697e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	2b02      	cmp	r3, #2
 8006892:	d074      	beq.n	800697e <I2C_MasterReceive_RXNE+0x15a>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d002      	beq.n	80068a0 <I2C_MasterReceive_RXNE+0x7c>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d16e      	bne.n	800697e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 faf9 	bl	8007e98 <I2C_WaitOnSTOPRequestThroughIT>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d142      	bne.n	8006932 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	d10a      	bne.n	800691c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff fdc4 	bl	80064a2 <HAL_I2C_MemRxCpltCallback>
}
 800691a:	e030      	b.n	800697e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2212      	movs	r2, #18
 8006928:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff fd7f 	bl	800642e <HAL_I2C_MasterRxCpltCallback>
}
 8006930:	e025      	b.n	800697e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006940:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fd9b 	bl	80064b4 <HAL_I2C_ErrorCallback>
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b04      	cmp	r3, #4
 800699c:	d11b      	bne.n	80069d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80069d4:	e0bd      	b.n	8006b52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d129      	bne.n	8006a34 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d00a      	beq.n	8006a0c <I2C_MasterReceive_BTF+0x86>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d007      	beq.n	8006a0c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a32:	e08e      	b.n	8006b52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d176      	bne.n	8006b2c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d002      	beq.n	8006a4a <I2C_MasterReceive_BTF+0xc4>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b10      	cmp	r3, #16
 8006a48:	d108      	bne.n	8006a5c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e019      	b.n	8006a90 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d002      	beq.n	8006a68 <I2C_MasterReceive_BTF+0xe2>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d108      	bne.n	8006a7a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e00a      	b.n	8006a90 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d007      	beq.n	8006a90 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006aea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d10a      	bne.n	8006b16 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fcc7 	bl	80064a2 <HAL_I2C_MemRxCpltCallback>
}
 8006b14:	e01d      	b.n	8006b52 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2212      	movs	r2, #18
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fc82 	bl	800642e <HAL_I2C_MasterRxCpltCallback>
}
 8006b2a:	e012      	b.n	8006b52 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d117      	bne.n	8006b9e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b86:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b88:	e067      	b.n	8006c5a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f043 0301 	orr.w	r3, r3, #1
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	611a      	str	r2, [r3, #16]
}
 8006b9c:	e05d      	b.n	8006c5a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba6:	d133      	bne.n	8006c10 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b21      	cmp	r3, #33	; 0x21
 8006bb2:	d109      	bne.n	8006bc8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bc4:	611a      	str	r2, [r3, #16]
 8006bc6:	e008      	b.n	8006bda <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <I2C_Master_SB+0x92>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d108      	bne.n	8006bfe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d032      	beq.n	8006c5a <I2C_Master_SB+0x100>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02d      	beq.n	8006c5a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0c:	605a      	str	r2, [r3, #4]
}
 8006c0e:	e024      	b.n	8006c5a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10e      	bne.n	8006c36 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	11db      	asrs	r3, r3, #7
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f003 0306 	and.w	r3, r3, #6
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	f063 030f 	orn	r3, r3, #15
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	611a      	str	r2, [r3, #16]
}
 8006c34:	e011      	b.n	8006c5a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d10d      	bne.n	8006c5a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	11db      	asrs	r3, r3, #7
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f003 0306 	and.w	r3, r3, #6
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f063 030e 	orn	r3, r3, #14
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	611a      	str	r2, [r3, #16]
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr

08006c64 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <I2C_Master_ADD10+0x26>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00c      	beq.n	8006cac <I2C_Master_ADD10+0x48>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006caa:	605a      	str	r2, [r3, #4]
  }
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b091      	sub	sp, #68	; 0x44
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b22      	cmp	r3, #34	; 0x22
 8006cde:	f040 8174 	bne.w	8006fca <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10f      	bne.n	8006d0a <I2C_Master_ADDR+0x54>
 8006cea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d10b      	bne.n	8006d0a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	633b      	str	r3, [r7, #48]	; 0x30
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	e16b      	b.n	8006fe2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11d      	bne.n	8006d4e <I2C_Master_ADDR+0x98>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d1a:	d118      	bne.n	8006d4e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d40:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	651a      	str	r2, [r3, #80]	; 0x50
 8006d4c:	e149      	b.n	8006fe2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d113      	bne.n	8006d80 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d58:	2300      	movs	r3, #0
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e120      	b.n	8006fc2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	f040 808a 	bne.w	8006ea0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d92:	d137      	bne.n	8006e04 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db2:	d113      	bne.n	8006ddc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	e0f2      	b.n	8006fc2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	623b      	str	r3, [r7, #32]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	623b      	str	r3, [r7, #32]
 8006df0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e0de      	b.n	8006fc2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d02e      	beq.n	8006e68 <I2C_Master_ADDR+0x1b2>
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d02b      	beq.n	8006e68 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e12:	2b12      	cmp	r3, #18
 8006e14:	d102      	bne.n	8006e1c <I2C_Master_ADDR+0x166>
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d125      	bne.n	8006e68 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d00e      	beq.n	8006e40 <I2C_Master_ADDR+0x18a>
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d00b      	beq.n	8006e40 <I2C_Master_ADDR+0x18a>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	2b10      	cmp	r3, #16
 8006e2c:	d008      	beq.n	8006e40 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e007      	b.n	8006e50 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e4e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	e0ac      	b.n	8006fc2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e090      	b.n	8006fc2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d158      	bne.n	8006f5c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d021      	beq.n	8006ef4 <I2C_Master_ADDR+0x23e>
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d01e      	beq.n	8006ef4 <I2C_Master_ADDR+0x23e>
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d01b      	beq.n	8006ef4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	e012      	b.n	8006f1a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f02:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f28:	d14b      	bne.n	8006fc2 <I2C_Master_ADDR+0x30c>
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f30:	d00b      	beq.n	8006f4a <I2C_Master_ADDR+0x294>
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d008      	beq.n	8006f4a <I2C_Master_ADDR+0x294>
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d005      	beq.n	8006f4a <I2C_Master_ADDR+0x294>
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d002      	beq.n	8006f4a <I2C_Master_ADDR+0x294>
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d13b      	bne.n	8006fc2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f58:	605a      	str	r2, [r3, #4]
 8006f5a:	e032      	b.n	8006fc2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f6a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f7a:	d117      	bne.n	8006fac <I2C_Master_ADDR+0x2f6>
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f82:	d00b      	beq.n	8006f9c <I2C_Master_ADDR+0x2e6>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d008      	beq.n	8006f9c <I2C_Master_ADDR+0x2e6>
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d005      	beq.n	8006f9c <I2C_Master_ADDR+0x2e6>
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	2b10      	cmp	r3, #16
 8006f94:	d002      	beq.n	8006f9c <I2C_Master_ADDR+0x2e6>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d107      	bne.n	8006fac <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006faa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006fc8:	e00b      	b.n	8006fe2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	60bb      	str	r3, [r7, #8]
 8006fde:	68bb      	ldr	r3, [r7, #8]
}
 8006fe0:	e7ff      	b.n	8006fe2 <I2C_Master_ADDR+0x32c>
 8006fe2:	bf00      	nop
 8006fe4:	3744      	adds	r7, #68	; 0x44
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d02b      	beq.n	800705e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d114      	bne.n	800705e <I2C_SlaveTransmit_TXE+0x72>
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	2b29      	cmp	r3, #41	; 0x29
 8007038:	d111      	bne.n	800705e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007048:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2221      	movs	r2, #33	; 0x21
 800704e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2228      	movs	r2, #40	; 0x28
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff f9f1 	bl	8006440 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d011      	beq.n	800709c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr

080070a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d02c      	beq.n	800711a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d114      	bne.n	800711a <I2C_SlaveReceive_RXNE+0x74>
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b2a      	cmp	r3, #42	; 0x2a
 80070f4:	d111      	bne.n	800711a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007104:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2222      	movs	r2, #34	; 0x22
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2228      	movs	r2, #40	; 0x28
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff f99c 	bl	8006452 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d012      	beq.n	800715a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800717e:	2b28      	cmp	r3, #40	; 0x28
 8007180:	d127      	bne.n	80071d2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007190:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	089b      	lsrs	r3, r3, #2
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800719e:	2301      	movs	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	09db      	lsrs	r3, r3, #7
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d103      	bne.n	80071b6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	81bb      	strh	r3, [r7, #12]
 80071b4:	e002      	b.n	80071bc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80071c4:	89ba      	ldrh	r2, [r7, #12]
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff f94a 	bl	8006464 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80071d0:	e00e      	b.n	80071f0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80071f0:	bf00      	nop
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007206:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007216:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007218:	2300      	movs	r3, #0
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007244:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007254:	d172      	bne.n	800733c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b22      	cmp	r3, #34	; 0x22
 800725a:	d002      	beq.n	8007262 <I2C_Slave_STOPF+0x6a>
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	2b2a      	cmp	r3, #42	; 0x2a
 8007260:	d135      	bne.n	80072ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f043 0204 	orr.w	r2, r3, #4
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007294:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe f808 	bl	80052b0 <HAL_DMA_GetState>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d049      	beq.n	800733a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	4a69      	ldr	r2, [pc, #420]	; (8007450 <I2C_Slave_STOPF+0x258>)
 80072ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fd fe80 	bl	8004fb8 <HAL_DMA_Abort_IT>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d03d      	beq.n	800733a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072cc:	e035      	b.n	800733a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	f043 0204 	orr.w	r2, r3, #4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007300:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	4618      	mov	r0, r3
 8007308:	f7fd ffd2 	bl	80052b0 <HAL_DMA_GetState>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d014      	beq.n	800733c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	4a4e      	ldr	r2, [pc, #312]	; (8007450 <I2C_Slave_STOPF+0x258>)
 8007318:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731e:	4618      	mov	r0, r3
 8007320:	f7fd fe4a 	bl	8004fb8 <HAL_DMA_Abort_IT>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	e000      	b.n	800733c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800733a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d03e      	beq.n	80073c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b04      	cmp	r3, #4
 8007352:	d112      	bne.n	800737a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d112      	bne.n	80073ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073bc:	f043 0204 	orr.w	r2, r3, #4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f8b3 	bl	8007538 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80073d2:	e039      	b.n	8007448 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b2a      	cmp	r3, #42	; 0x2a
 80073d8:	d109      	bne.n	80073ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2228      	movs	r2, #40	; 0x28
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff f832 	bl	8006452 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b28      	cmp	r3, #40	; 0x28
 80073f8:	d111      	bne.n	800741e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a15      	ldr	r2, [pc, #84]	; (8007454 <I2C_Slave_STOPF+0x25c>)
 80073fe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff f831 	bl	800647e <HAL_I2C_ListenCpltCallback>
}
 800741c:	e014      	b.n	8007448 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	2b22      	cmp	r3, #34	; 0x22
 8007424:	d002      	beq.n	800742c <I2C_Slave_STOPF+0x234>
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b22      	cmp	r3, #34	; 0x22
 800742a:	d10d      	bne.n	8007448 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff f805 	bl	8006452 <HAL_I2C_SlaveRxCpltCallback>
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	08007a99 	.word	0x08007a99
 8007454:	ffff0000 	.word	0xffff0000

08007458 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007466:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b08      	cmp	r3, #8
 8007472:	d002      	beq.n	800747a <I2C_Slave_AF+0x22>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b20      	cmp	r3, #32
 8007478:	d129      	bne.n	80074ce <I2C_Slave_AF+0x76>
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b28      	cmp	r3, #40	; 0x28
 800747e:	d126      	bne.n	80074ce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a2c      	ldr	r2, [pc, #176]	; (8007534 <I2C_Slave_AF+0xdc>)
 8007484:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007494:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800749e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fe ffd9 	bl	800647e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80074cc:	e02e      	b.n	800752c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	2b21      	cmp	r3, #33	; 0x21
 80074d2:	d126      	bne.n	8007522 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a17      	ldr	r2, [pc, #92]	; (8007534 <I2C_Slave_AF+0xdc>)
 80074d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2221      	movs	r2, #33	; 0x21
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074fe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007508:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007518:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fe ff90 	bl	8006440 <HAL_I2C_SlaveTxCpltCallback>
}
 8007520:	e004      	b.n	800752c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800752a:	615a      	str	r2, [r3, #20]
}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	ffff0000 	.word	0xffff0000

08007538 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007546:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b10      	cmp	r3, #16
 8007554:	d002      	beq.n	800755c <I2C_ITError+0x24>
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d10a      	bne.n	8007572 <I2C_ITError+0x3a>
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	2b22      	cmp	r3, #34	; 0x22
 8007560:	d107      	bne.n	8007572 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007570:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007578:	2b28      	cmp	r3, #40	; 0x28
 800757a:	d107      	bne.n	800758c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2228      	movs	r2, #40	; 0x28
 8007586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800758a:	e015      	b.n	80075b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800759a:	d00a      	beq.n	80075b2 <I2C_ITError+0x7a>
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b60      	cmp	r3, #96	; 0x60
 80075a0:	d007      	beq.n	80075b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c6:	d161      	bne.n	800768c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d020      	beq.n	8007626 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e8:	4a6a      	ldr	r2, [pc, #424]	; (8007794 <I2C_ITError+0x25c>)
 80075ea:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fd fce1 	bl	8004fb8 <HAL_DMA_Abort_IT>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8089 	beq.w	8007710 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0201 	bic.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	e074      	b.n	8007710 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	4a5a      	ldr	r2, [pc, #360]	; (8007794 <I2C_ITError+0x25c>)
 800762c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd fcc0 	bl	8004fb8 <HAL_DMA_Abort_IT>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d068      	beq.n	8007710 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007648:	2b40      	cmp	r3, #64	; 0x40
 800764a:	d10b      	bne.n	8007664 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007686:	4610      	mov	r0, r2
 8007688:	4798      	blx	r3
 800768a:	e041      	b.n	8007710 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b60      	cmp	r3, #96	; 0x60
 8007696:	d125      	bne.n	80076e4 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d10b      	bne.n	80076cc <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691a      	ldr	r2, [r3, #16]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0201 	bic.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7fe fef2 	bl	80064c6 <HAL_I2C_AbortCpltCallback>
 80076e2:	e015      	b.n	8007710 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b40      	cmp	r3, #64	; 0x40
 80076f0:	d10b      	bne.n	800770a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fe fed2 	bl	80064b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10e      	bne.n	800773e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800774c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007754:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b04      	cmp	r3, #4
 8007760:	d113      	bne.n	800778a <I2C_ITError+0x252>
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2b28      	cmp	r3, #40	; 0x28
 8007766:	d110      	bne.n	800778a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a0b      	ldr	r2, [pc, #44]	; (8007798 <I2C_ITError+0x260>)
 800776c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7fe fe7a 	bl	800647e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	08007a99 	.word	0x08007a99
 8007798:	ffff0000 	.word	0xffff0000

0800779c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	4608      	mov	r0, r1
 80077a6:	4611      	mov	r1, r2
 80077a8:	461a      	mov	r2, r3
 80077aa:	4603      	mov	r3, r0
 80077ac:	817b      	strh	r3, [r7, #10]
 80077ae:	460b      	mov	r3, r1
 80077b0:	813b      	strh	r3, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fa08 	bl	8007be8 <I2C_WaitOnFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ec:	d103      	bne.n	80077f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e05f      	b.n	80078ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077fa:	897b      	ldrh	r3, [r7, #10]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007808:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	6a3a      	ldr	r2, [r7, #32]
 800780e:	492d      	ldr	r1, [pc, #180]	; (80078c4 <I2C_RequestMemoryWrite+0x128>)
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fa40 	bl	8007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e04c      	b.n	80078ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007838:	6a39      	ldr	r1, [r7, #32]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 faaa 	bl	8007d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00d      	beq.n	8007862 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	2b04      	cmp	r3, #4
 800784c:	d107      	bne.n	800785e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800785c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e02b      	b.n	80078ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d105      	bne.n	8007874 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007868:	893b      	ldrh	r3, [r7, #8]
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	611a      	str	r2, [r3, #16]
 8007872:	e021      	b.n	80078b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007874:	893b      	ldrh	r3, [r7, #8]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007884:	6a39      	ldr	r1, [r7, #32]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 fa84 	bl	8007d94 <I2C_WaitOnTXEFlagUntilTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00d      	beq.n	80078ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b04      	cmp	r3, #4
 8007898:	d107      	bne.n	80078aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e005      	b.n	80078ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078ae:	893b      	ldrh	r3, [r7, #8]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	00010002 	.word	0x00010002

080078c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	461a      	mov	r2, r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	817b      	strh	r3, [r7, #10]
 80078da:	460b      	mov	r3, r1
 80078dc:	813b      	strh	r3, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	2200      	movs	r2, #0
 800790a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f96a 	bl	8007be8 <I2C_WaitOnFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00d      	beq.n	8007936 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007928:	d103      	bne.n	8007932 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007930:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e0aa      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007936:	897b      	ldrh	r3, [r7, #10]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	6a3a      	ldr	r2, [r7, #32]
 800794a:	4952      	ldr	r1, [pc, #328]	; (8007a94 <I2C_RequestMemoryRead+0x1cc>)
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 f9a2 	bl	8007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e097      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007974:	6a39      	ldr	r1, [r7, #32]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fa0c 	bl	8007d94 <I2C_WaitOnTXEFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00d      	beq.n	800799e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	2b04      	cmp	r3, #4
 8007988:	d107      	bne.n	800799a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e076      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d105      	bne.n	80079b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079a4:	893b      	ldrh	r3, [r7, #8]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	611a      	str	r2, [r3, #16]
 80079ae:	e021      	b.n	80079f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079b0:	893b      	ldrh	r3, [r7, #8]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c0:	6a39      	ldr	r1, [r7, #32]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f9e6 	bl	8007d94 <I2C_WaitOnTXEFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d107      	bne.n	80079e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e050      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079ea:	893b      	ldrh	r3, [r7, #8]
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f6:	6a39      	ldr	r1, [r7, #32]
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f9cb 	bl	8007d94 <I2C_WaitOnTXEFlagUntilTimeout>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00d      	beq.n	8007a20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d107      	bne.n	8007a1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e035      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f8d3 	bl	8007be8 <I2C_WaitOnFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00d      	beq.n	8007a64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a56:	d103      	bne.n	8007a60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e013      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a64:	897b      	ldrh	r3, [r7, #10]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	4906      	ldr	r1, [pc, #24]	; (8007a94 <I2C_RequestMemoryRead+0x1cc>)
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f90b 	bl	8007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	00010002 	.word	0x00010002

08007a98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ab2:	4b4b      	ldr	r3, [pc, #300]	; (8007be0 <I2C_DMAAbort+0x148>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	08db      	lsrs	r3, r3, #3
 8007ab8:	4a4a      	ldr	r2, [pc, #296]	; (8007be4 <I2C_DMAAbort+0x14c>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	0a1a      	lsrs	r2, r3, #8
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	00da      	lsls	r2, r3, #3
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	f043 0220 	orr.w	r2, r3, #32
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007ade:	e00a      	b.n	8007af6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af4:	d0ea      	beq.n	8007acc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b02:	2200      	movs	r2, #0
 8007b04:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	2200      	movs	r2, #0
 8007b14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b38:	2200      	movs	r2, #0
 8007b3a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	2200      	movs	r2, #0
 8007b4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b60      	cmp	r3, #96	; 0x60
 8007b66:	d10e      	bne.n	8007b86 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b7e:	6978      	ldr	r0, [r7, #20]
 8007b80:	f7fe fca1 	bl	80064c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b84:	e027      	b.n	8007bd6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b86:	7cfb      	ldrb	r3, [r7, #19]
 8007b88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b8c:	2b28      	cmp	r3, #40	; 0x28
 8007b8e:	d117      	bne.n	8007bc0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2228      	movs	r2, #40	; 0x28
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007bbe:	e007      	b.n	8007bd0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007bd0:	6978      	ldr	r0, [r7, #20]
 8007bd2:	f7fe fc6f 	bl	80064b4 <HAL_I2C_ErrorCallback>
}
 8007bd6:	bf00      	nop
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000004 	.word	0x20000004
 8007be4:	14f8b589 	.word	0x14f8b589

08007be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bf8:	e025      	b.n	8007c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d021      	beq.n	8007c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c02:	f7fb fdeb 	bl	80037dc <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d302      	bcc.n	8007c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d116      	bne.n	8007c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f043 0220 	orr.w	r2, r3, #32
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e023      	b.n	8007c8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	0c1b      	lsrs	r3, r3, #16
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d10d      	bne.n	8007c6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	43da      	mvns	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bf0c      	ite	eq
 8007c62:	2301      	moveq	r3, #1
 8007c64:	2300      	movne	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	e00c      	b.n	8007c86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	43da      	mvns	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4013      	ands	r3, r2
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bf0c      	ite	eq
 8007c7e:	2301      	moveq	r3, #1
 8007c80:	2300      	movne	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d0b6      	beq.n	8007bfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ca4:	e051      	b.n	8007d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb4:	d123      	bne.n	8007cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f043 0204 	orr.w	r2, r3, #4
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e046      	b.n	8007d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d021      	beq.n	8007d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d06:	f7fb fd69 	bl	80037dc <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d302      	bcc.n	8007d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d116      	bne.n	8007d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e020      	b.n	8007d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d10c      	bne.n	8007d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	43da      	mvns	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bf14      	ite	ne
 8007d66:	2301      	movne	r3, #1
 8007d68:	2300      	moveq	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	e00b      	b.n	8007d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	43da      	mvns	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	bf14      	ite	ne
 8007d80:	2301      	movne	r3, #1
 8007d82:	2300      	moveq	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d18d      	bne.n	8007ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007da0:	e02d      	b.n	8007dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 f900 	bl	8007fa8 <I2C_IsAcknowledgeFailed>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e02d      	b.n	8007e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d021      	beq.n	8007dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dba:	f7fb fd0f 	bl	80037dc <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d302      	bcc.n	8007dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d116      	bne.n	8007dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	f043 0220 	orr.w	r2, r3, #32
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e007      	b.n	8007e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e08:	2b80      	cmp	r3, #128	; 0x80
 8007e0a:	d1ca      	bne.n	8007da2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e22:	e02d      	b.n	8007e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f8bf 	bl	8007fa8 <I2C_IsAcknowledgeFailed>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e02d      	b.n	8007e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d021      	beq.n	8007e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e3c:	f7fb fcce 	bl	80037dc <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d302      	bcc.n	8007e52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d116      	bne.n	8007e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	f043 0220 	orr.w	r2, r3, #32
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e007      	b.n	8007e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	d1ca      	bne.n	8007e24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ea4:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	08db      	lsrs	r3, r3, #3
 8007eaa:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007eac:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb0:	0a1a      	lsrs	r2, r3, #8
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d107      	bne.n	8007ed6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	f043 0220 	orr.w	r2, r3, #32
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e008      	b.n	8007ee8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee4:	d0e9      	beq.n	8007eba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20000004 	.word	0x20000004
 8007ef8:	14f8b589 	.word	0x14f8b589

08007efc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f08:	e042      	b.n	8007f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d119      	bne.n	8007f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f06f 0210 	mvn.w	r2, #16
 8007f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e029      	b.n	8007fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f4c:	f7fb fc46 	bl	80037dc <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d302      	bcc.n	8007f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d116      	bne.n	8007f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7c:	f043 0220 	orr.w	r2, r3, #32
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e007      	b.n	8007fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9a:	2b40      	cmp	r3, #64	; 0x40
 8007f9c:	d1b5      	bne.n	8007f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fbe:	d11b      	bne.n	8007ff8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe4:	f043 0204 	orr.w	r2, r3, #4
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008014:	d103      	bne.n	800801e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800801c:	e007      	b.n	800802e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008026:	d102      	bne.n	800802e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2208      	movs	r2, #8
 800802c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e26c      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8087 	beq.w	8008166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008058:	4b92      	ldr	r3, [pc, #584]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f003 030c 	and.w	r3, r3, #12
 8008060:	2b04      	cmp	r3, #4
 8008062:	d00c      	beq.n	800807e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008064:	4b8f      	ldr	r3, [pc, #572]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f003 030c 	and.w	r3, r3, #12
 800806c:	2b08      	cmp	r3, #8
 800806e:	d112      	bne.n	8008096 <HAL_RCC_OscConfig+0x5e>
 8008070:	4b8c      	ldr	r3, [pc, #560]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800807c:	d10b      	bne.n	8008096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800807e:	4b89      	ldr	r3, [pc, #548]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d06c      	beq.n	8008164 <HAL_RCC_OscConfig+0x12c>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d168      	bne.n	8008164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e246      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809e:	d106      	bne.n	80080ae <HAL_RCC_OscConfig+0x76>
 80080a0:	4b80      	ldr	r3, [pc, #512]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a7f      	ldr	r2, [pc, #508]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	e02e      	b.n	800810c <HAL_RCC_OscConfig+0xd4>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10c      	bne.n	80080d0 <HAL_RCC_OscConfig+0x98>
 80080b6:	4b7b      	ldr	r3, [pc, #492]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a7a      	ldr	r2, [pc, #488]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	4b78      	ldr	r3, [pc, #480]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a77      	ldr	r2, [pc, #476]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	e01d      	b.n	800810c <HAL_RCC_OscConfig+0xd4>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080d8:	d10c      	bne.n	80080f4 <HAL_RCC_OscConfig+0xbc>
 80080da:	4b72      	ldr	r3, [pc, #456]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a71      	ldr	r2, [pc, #452]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	4b6f      	ldr	r3, [pc, #444]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6e      	ldr	r2, [pc, #440]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	e00b      	b.n	800810c <HAL_RCC_OscConfig+0xd4>
 80080f4:	4b6b      	ldr	r3, [pc, #428]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a6a      	ldr	r2, [pc, #424]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80080fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	4b68      	ldr	r3, [pc, #416]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a67      	ldr	r2, [pc, #412]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800810a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d013      	beq.n	800813c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008114:	f7fb fb62 	bl	80037dc <HAL_GetTick>
 8008118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800811a:	e008      	b.n	800812e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800811c:	f7fb fb5e 	bl	80037dc <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b64      	cmp	r3, #100	; 0x64
 8008128:	d901      	bls.n	800812e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e1fa      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800812e:	4b5d      	ldr	r3, [pc, #372]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0f0      	beq.n	800811c <HAL_RCC_OscConfig+0xe4>
 800813a:	e014      	b.n	8008166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fb fb4e 	bl	80037dc <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008144:	f7fb fb4a 	bl	80037dc <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b64      	cmp	r3, #100	; 0x64
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e1e6      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008156:	4b53      	ldr	r3, [pc, #332]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <HAL_RCC_OscConfig+0x10c>
 8008162:	e000      	b.n	8008166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d063      	beq.n	800823a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008172:	4b4c      	ldr	r3, [pc, #304]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f003 030c 	and.w	r3, r3, #12
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800817e:	4b49      	ldr	r3, [pc, #292]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f003 030c 	and.w	r3, r3, #12
 8008186:	2b08      	cmp	r3, #8
 8008188:	d11c      	bne.n	80081c4 <HAL_RCC_OscConfig+0x18c>
 800818a:	4b46      	ldr	r3, [pc, #280]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d116      	bne.n	80081c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008196:	4b43      	ldr	r3, [pc, #268]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <HAL_RCC_OscConfig+0x176>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d001      	beq.n	80081ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e1ba      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ae:	4b3d      	ldr	r3, [pc, #244]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4939      	ldr	r1, [pc, #228]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081c2:	e03a      	b.n	800823a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d020      	beq.n	800820e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081cc:	4b36      	ldr	r3, [pc, #216]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80081ce:	2201      	movs	r2, #1
 80081d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d2:	f7fb fb03 	bl	80037dc <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081d8:	e008      	b.n	80081ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081da:	f7fb faff 	bl	80037dc <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d901      	bls.n	80081ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e19b      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ec:	4b2d      	ldr	r3, [pc, #180]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0f0      	beq.n	80081da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f8:	4b2a      	ldr	r3, [pc, #168]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	4927      	ldr	r1, [pc, #156]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008208:	4313      	orrs	r3, r2
 800820a:	600b      	str	r3, [r1, #0]
 800820c:	e015      	b.n	800823a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800820e:	4b26      	ldr	r3, [pc, #152]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008214:	f7fb fae2 	bl	80037dc <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800821c:	f7fb fade 	bl	80037dc <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e17a      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800822e:	4b1d      	ldr	r3, [pc, #116]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1f0      	bne.n	800821c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0308 	and.w	r3, r3, #8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d03a      	beq.n	80082bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d019      	beq.n	8008282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800824e:	4b17      	ldr	r3, [pc, #92]	; (80082ac <HAL_RCC_OscConfig+0x274>)
 8008250:	2201      	movs	r2, #1
 8008252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008254:	f7fb fac2 	bl	80037dc <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800825c:	f7fb fabe 	bl	80037dc <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e15a      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800826e:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <HAL_RCC_OscConfig+0x26c>)
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f0      	beq.n	800825c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800827a:	2001      	movs	r0, #1
 800827c:	f000 fad8 	bl	8008830 <RCC_Delay>
 8008280:	e01c      	b.n	80082bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008282:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <HAL_RCC_OscConfig+0x274>)
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008288:	f7fb faa8 	bl	80037dc <HAL_GetTick>
 800828c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800828e:	e00f      	b.n	80082b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008290:	f7fb faa4 	bl	80037dc <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d908      	bls.n	80082b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e140      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
 80082a2:	bf00      	nop
 80082a4:	40021000 	.word	0x40021000
 80082a8:	42420000 	.word	0x42420000
 80082ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082b0:	4b9e      	ldr	r3, [pc, #632]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e9      	bne.n	8008290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 80a6 	beq.w	8008416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082ce:	4b97      	ldr	r3, [pc, #604]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10d      	bne.n	80082f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082da:	4b94      	ldr	r3, [pc, #592]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	4a93      	ldr	r2, [pc, #588]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80082e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e4:	61d3      	str	r3, [r2, #28]
 80082e6:	4b91      	ldr	r3, [pc, #580]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ee:	60bb      	str	r3, [r7, #8]
 80082f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082f2:	2301      	movs	r3, #1
 80082f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082f6:	4b8e      	ldr	r3, [pc, #568]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d118      	bne.n	8008334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008302:	4b8b      	ldr	r3, [pc, #556]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a8a      	ldr	r2, [pc, #552]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800830c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800830e:	f7fb fa65 	bl	80037dc <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008316:	f7fb fa61 	bl	80037dc <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b64      	cmp	r3, #100	; 0x64
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e0fd      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008328:	4b81      	ldr	r3, [pc, #516]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f0      	beq.n	8008316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d106      	bne.n	800834a <HAL_RCC_OscConfig+0x312>
 800833c:	4b7b      	ldr	r3, [pc, #492]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	4a7a      	ldr	r2, [pc, #488]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	6213      	str	r3, [r2, #32]
 8008348:	e02d      	b.n	80083a6 <HAL_RCC_OscConfig+0x36e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10c      	bne.n	800836c <HAL_RCC_OscConfig+0x334>
 8008352:	4b76      	ldr	r3, [pc, #472]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	4a75      	ldr	r2, [pc, #468]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	6213      	str	r3, [r2, #32]
 800835e:	4b73      	ldr	r3, [pc, #460]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	4a72      	ldr	r2, [pc, #456]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008364:	f023 0304 	bic.w	r3, r3, #4
 8008368:	6213      	str	r3, [r2, #32]
 800836a:	e01c      	b.n	80083a6 <HAL_RCC_OscConfig+0x36e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	2b05      	cmp	r3, #5
 8008372:	d10c      	bne.n	800838e <HAL_RCC_OscConfig+0x356>
 8008374:	4b6d      	ldr	r3, [pc, #436]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	4a6c      	ldr	r2, [pc, #432]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 800837a:	f043 0304 	orr.w	r3, r3, #4
 800837e:	6213      	str	r3, [r2, #32]
 8008380:	4b6a      	ldr	r3, [pc, #424]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	4a69      	ldr	r2, [pc, #420]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	6213      	str	r3, [r2, #32]
 800838c:	e00b      	b.n	80083a6 <HAL_RCC_OscConfig+0x36e>
 800838e:	4b67      	ldr	r3, [pc, #412]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	4a66      	ldr	r2, [pc, #408]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008394:	f023 0301 	bic.w	r3, r3, #1
 8008398:	6213      	str	r3, [r2, #32]
 800839a:	4b64      	ldr	r3, [pc, #400]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	4a63      	ldr	r2, [pc, #396]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80083a0:	f023 0304 	bic.w	r3, r3, #4
 80083a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d015      	beq.n	80083da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083ae:	f7fb fa15 	bl	80037dc <HAL_GetTick>
 80083b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b4:	e00a      	b.n	80083cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b6:	f7fb fa11 	bl	80037dc <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e0ab      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083cc:	4b57      	ldr	r3, [pc, #348]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0ee      	beq.n	80083b6 <HAL_RCC_OscConfig+0x37e>
 80083d8:	e014      	b.n	8008404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083da:	f7fb f9ff 	bl	80037dc <HAL_GetTick>
 80083de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083e0:	e00a      	b.n	80083f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e2:	f7fb f9fb 	bl	80037dc <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d901      	bls.n	80083f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e095      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083f8:	4b4c      	ldr	r3, [pc, #304]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1ee      	bne.n	80083e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d105      	bne.n	8008416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800840a:	4b48      	ldr	r3, [pc, #288]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	4a47      	ldr	r2, [pc, #284]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 8081 	beq.w	8008522 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008420:	4b42      	ldr	r3, [pc, #264]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f003 030c 	and.w	r3, r3, #12
 8008428:	2b08      	cmp	r3, #8
 800842a:	d061      	beq.n	80084f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	2b02      	cmp	r3, #2
 8008432:	d146      	bne.n	80084c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008434:	4b3f      	ldr	r3, [pc, #252]	; (8008534 <HAL_RCC_OscConfig+0x4fc>)
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800843a:	f7fb f9cf 	bl	80037dc <HAL_GetTick>
 800843e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008440:	e008      	b.n	8008454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008442:	f7fb f9cb 	bl	80037dc <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e067      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008454:	4b35      	ldr	r3, [pc, #212]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1f0      	bne.n	8008442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008468:	d108      	bne.n	800847c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800846a:	4b30      	ldr	r3, [pc, #192]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	492d      	ldr	r1, [pc, #180]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008478:	4313      	orrs	r3, r2
 800847a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800847c:	4b2b      	ldr	r3, [pc, #172]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a19      	ldr	r1, [r3, #32]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	430b      	orrs	r3, r1
 800848e:	4927      	ldr	r1, [pc, #156]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 8008490:	4313      	orrs	r3, r2
 8008492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008494:	4b27      	ldr	r3, [pc, #156]	; (8008534 <HAL_RCC_OscConfig+0x4fc>)
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800849a:	f7fb f99f 	bl	80037dc <HAL_GetTick>
 800849e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a2:	f7fb f99b 	bl	80037dc <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e037      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084b4:	4b1d      	ldr	r3, [pc, #116]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0f0      	beq.n	80084a2 <HAL_RCC_OscConfig+0x46a>
 80084c0:	e02f      	b.n	8008522 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <HAL_RCC_OscConfig+0x4fc>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c8:	f7fb f988 	bl	80037dc <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084d0:	f7fb f984 	bl	80037dc <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e020      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084e2:	4b12      	ldr	r3, [pc, #72]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f0      	bne.n	80084d0 <HAL_RCC_OscConfig+0x498>
 80084ee:	e018      	b.n	8008522 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e013      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80084fc:	4b0b      	ldr	r3, [pc, #44]	; (800852c <HAL_RCC_OscConfig+0x4f4>)
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	429a      	cmp	r2, r3
 800850e:	d106      	bne.n	800851e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800851a:	429a      	cmp	r2, r3
 800851c:	d001      	beq.n	8008522 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e000      	b.n	8008524 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40021000 	.word	0x40021000
 8008530:	40007000 	.word	0x40007000
 8008534:	42420060 	.word	0x42420060

08008538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e0d0      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800854c:	4b6a      	ldr	r3, [pc, #424]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d910      	bls.n	800857c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855a:	4b67      	ldr	r3, [pc, #412]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f023 0207 	bic.w	r2, r3, #7
 8008562:	4965      	ldr	r1, [pc, #404]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	4313      	orrs	r3, r2
 8008568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800856a:	4b63      	ldr	r3, [pc, #396]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d001      	beq.n	800857c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e0b8      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d020      	beq.n	80085ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008594:	4b59      	ldr	r3, [pc, #356]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4a58      	ldr	r2, [pc, #352]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 800859a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800859e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0308 	and.w	r3, r3, #8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d005      	beq.n	80085b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085ac:	4b53      	ldr	r3, [pc, #332]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4a52      	ldr	r2, [pc, #328]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80085b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085b8:	4b50      	ldr	r3, [pc, #320]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	494d      	ldr	r1, [pc, #308]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d040      	beq.n	8008658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d107      	bne.n	80085ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085de:	4b47      	ldr	r3, [pc, #284]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d115      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e07f      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d107      	bne.n	8008606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085f6:	4b41      	ldr	r3, [pc, #260]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e073      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008606:	4b3d      	ldr	r3, [pc, #244]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e06b      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008616:	4b39      	ldr	r3, [pc, #228]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f023 0203 	bic.w	r2, r3, #3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	4936      	ldr	r1, [pc, #216]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008624:	4313      	orrs	r3, r2
 8008626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008628:	f7fb f8d8 	bl	80037dc <HAL_GetTick>
 800862c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862e:	e00a      	b.n	8008646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008630:	f7fb f8d4 	bl	80037dc <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	f241 3288 	movw	r2, #5000	; 0x1388
 800863e:	4293      	cmp	r3, r2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e053      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008646:	4b2d      	ldr	r3, [pc, #180]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f003 020c 	and.w	r2, r3, #12
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	429a      	cmp	r2, r3
 8008656:	d1eb      	bne.n	8008630 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008658:	4b27      	ldr	r3, [pc, #156]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d210      	bcs.n	8008688 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008666:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f023 0207 	bic.w	r2, r3, #7
 800866e:	4922      	ldr	r1, [pc, #136]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	4313      	orrs	r3, r2
 8008674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008676:	4b20      	ldr	r3, [pc, #128]	; (80086f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d001      	beq.n	8008688 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e032      	b.n	80086ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d008      	beq.n	80086a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008694:	4b19      	ldr	r3, [pc, #100]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	4916      	ldr	r1, [pc, #88]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	490e      	ldr	r1, [pc, #56]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80086c6:	f000 f821 	bl	800870c <HAL_RCC_GetSysClockFreq>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <HAL_RCC_ClockConfig+0x1c4>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	490a      	ldr	r1, [pc, #40]	; (8008700 <HAL_RCC_ClockConfig+0x1c8>)
 80086d8:	5ccb      	ldrb	r3, [r1, r3]
 80086da:	fa22 f303 	lsr.w	r3, r2, r3
 80086de:	4a09      	ldr	r2, [pc, #36]	; (8008704 <HAL_RCC_ClockConfig+0x1cc>)
 80086e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <HAL_RCC_ClockConfig+0x1d0>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fb f836 	bl	8003758 <HAL_InitTick>

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	40022000 	.word	0x40022000
 80086fc:	40021000 	.word	0x40021000
 8008700:	0800efb4 	.word	0x0800efb4
 8008704:	20000004 	.word	0x20000004
 8008708:	20000008 	.word	0x20000008

0800870c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800870c:	b490      	push	{r4, r7}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008712:	4b2a      	ldr	r3, [pc, #168]	; (80087bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8008714:	1d3c      	adds	r4, r7, #4
 8008716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800871c:	f240 2301 	movw	r3, #513	; 0x201
 8008720:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	61fb      	str	r3, [r7, #28]
 8008726:	2300      	movs	r3, #0
 8008728:	61bb      	str	r3, [r7, #24]
 800872a:	2300      	movs	r3, #0
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
 800872e:	2300      	movs	r3, #0
 8008730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008736:	4b22      	ldr	r3, [pc, #136]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	2b04      	cmp	r3, #4
 8008744:	d002      	beq.n	800874c <HAL_RCC_GetSysClockFreq+0x40>
 8008746:	2b08      	cmp	r3, #8
 8008748:	d003      	beq.n	8008752 <HAL_RCC_GetSysClockFreq+0x46>
 800874a:	e02d      	b.n	80087a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800874c:	4b1d      	ldr	r3, [pc, #116]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800874e:	623b      	str	r3, [r7, #32]
      break;
 8008750:	e02d      	b.n	80087ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	0c9b      	lsrs	r3, r3, #18
 8008756:	f003 030f 	and.w	r3, r3, #15
 800875a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800875e:	4413      	add	r3, r2
 8008760:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008764:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d013      	beq.n	8008798 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008770:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	0c5b      	lsrs	r3, r3, #17
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800877e:	4413      	add	r3, r2
 8008780:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008784:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	4a0e      	ldr	r2, [pc, #56]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800878a:	fb02 f203 	mul.w	r2, r2, r3
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	fbb2 f3f3 	udiv	r3, r2, r3
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
 8008796:	e004      	b.n	80087a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	4a0b      	ldr	r2, [pc, #44]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800879c:	fb02 f303 	mul.w	r3, r2, r3
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	623b      	str	r3, [r7, #32]
      break;
 80087a6:	e002      	b.n	80087ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80087a8:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087aa:	623b      	str	r3, [r7, #32]
      break;
 80087ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087ae:	6a3b      	ldr	r3, [r7, #32]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3728      	adds	r7, #40	; 0x28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc90      	pop	{r4, r7}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	0800ef4c 	.word	0x0800ef4c
 80087c0:	40021000 	.word	0x40021000
 80087c4:	007a1200 	.word	0x007a1200
 80087c8:	003d0900 	.word	0x003d0900

080087cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <HAL_RCC_GetHCLKFreq+0x10>)
 80087d2:	681b      	ldr	r3, [r3, #0]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr
 80087dc:	20000004 	.word	0x20000004

080087e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80087e4:	f7ff fff2 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 80087e8:	4602      	mov	r2, r0
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	4903      	ldr	r1, [pc, #12]	; (8008804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087f6:	5ccb      	ldrb	r3, [r1, r3]
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40021000 	.word	0x40021000
 8008804:	0800efc4 	.word	0x0800efc4

08008808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800880c:	f7ff ffde 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 8008810:	4602      	mov	r2, r0
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	0adb      	lsrs	r3, r3, #11
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	4903      	ldr	r1, [pc, #12]	; (800882c <HAL_RCC_GetPCLK2Freq+0x24>)
 800881e:	5ccb      	ldrb	r3, [r1, r3]
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008824:	4618      	mov	r0, r3
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40021000 	.word	0x40021000
 800882c:	0800efc4 	.word	0x0800efc4

08008830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <RCC_Delay+0x34>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <RCC_Delay+0x38>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	0a5b      	lsrs	r3, r3, #9
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800884c:	bf00      	nop
  }
  while (Delay --);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	1e5a      	subs	r2, r3, #1
 8008852:	60fa      	str	r2, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1f9      	bne.n	800884c <RCC_Delay+0x1c>
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr
 8008864:	20000004 	.word	0x20000004
 8008868:	10624dd3 	.word	0x10624dd3

0800886c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d07d      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008888:	2300      	movs	r3, #0
 800888a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800888c:	4b4f      	ldr	r3, [pc, #316]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10d      	bne.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008898:	4b4c      	ldr	r3, [pc, #304]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	4a4b      	ldr	r2, [pc, #300]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800889e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088a2:	61d3      	str	r3, [r2, #28]
 80088a4:	4b49      	ldr	r3, [pc, #292]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088b0:	2301      	movs	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b4:	4b46      	ldr	r3, [pc, #280]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d118      	bne.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088c0:	4b43      	ldr	r3, [pc, #268]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a42      	ldr	r2, [pc, #264]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088cc:	f7fa ff86 	bl	80037dc <HAL_GetTick>
 80088d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d2:	e008      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088d4:	f7fa ff82 	bl	80037dc <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b64      	cmp	r3, #100	; 0x64
 80088e0:	d901      	bls.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e06d      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e6:	4b3a      	ldr	r3, [pc, #232]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f0      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088f2:	4b36      	ldr	r3, [pc, #216]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d02e      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	429a      	cmp	r2, r3
 800890e:	d027      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008910:	4b2e      	ldr	r3, [pc, #184]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008918:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800891a:	4b2e      	ldr	r3, [pc, #184]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800891c:	2201      	movs	r2, #1
 800891e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008920:	4b2c      	ldr	r3, [pc, #176]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008926:	4a29      	ldr	r2, [pc, #164]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d014      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008936:	f7fa ff51 	bl	80037dc <HAL_GetTick>
 800893a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800893c:	e00a      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800893e:	f7fa ff4d 	bl	80037dc <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	f241 3288 	movw	r2, #5000	; 0x1388
 800894c:	4293      	cmp	r3, r2
 800894e:	d901      	bls.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e036      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008954:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0ee      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008960:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	4917      	ldr	r1, [pc, #92]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800896e:	4313      	orrs	r3, r2
 8008970:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d105      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008978:	4b14      	ldr	r3, [pc, #80]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	4a13      	ldr	r2, [pc, #76]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800897e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008982:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d008      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008990:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	490b      	ldr	r1, [pc, #44]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089ae:	4b07      	ldr	r3, [pc, #28]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	4904      	ldr	r1, [pc, #16]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40021000 	.word	0x40021000
 80089d0:	40007000 	.word	0x40007000
 80089d4:	42420440 	.word	0x42420440

080089d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089d8:	b590      	push	{r4, r7, lr}
 80089da:	b08d      	sub	sp, #52	; 0x34
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80089e0:	4b5a      	ldr	r3, [pc, #360]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80089e2:	f107 040c 	add.w	r4, r7, #12
 80089e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80089ec:	f240 2301 	movw	r3, #513	; 0x201
 80089f0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
 80089f6:	2300      	movs	r3, #0
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089fa:	2300      	movs	r3, #0
 80089fc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	61fb      	str	r3, [r7, #28]
 8008a02:	2300      	movs	r3, #0
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d00a      	beq.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b10      	cmp	r3, #16
 8008a10:	f200 8091 	bhi.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d04c      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d07c      	beq.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008a20:	e089      	b.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8008a22:	4b4b      	ldr	r3, [pc, #300]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008a28:	4b49      	ldr	r3, [pc, #292]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 8082 	beq.w	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	0c9b      	lsrs	r3, r3, #18
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008a42:	4413      	add	r3, r2
 8008a44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008a48:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d018      	beq.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a54:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	0c5b      	lsrs	r3, r3, #17
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008a62:	4413      	add	r3, r2
 8008a64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00d      	beq.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008a74:	4a37      	ldr	r2, [pc, #220]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	fb02 f303 	mul.w	r3, r2, r3
 8008a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a84:	e004      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	4a33      	ldr	r2, [pc, #204]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8008a8a:	fb02 f303 	mul.w	r3, r2, r3
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008a90:	4b2f      	ldr	r3, [pc, #188]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9c:	d102      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008aa2:	e04a      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	4a2c      	ldr	r2, [pc, #176]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8008aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008ab2:	e042      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8008ab4:	4b26      	ldr	r3, [pc, #152]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac4:	d108      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8008ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ad6:	e01f      	b.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae2:	d109      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008ae4:	4b1a      	ldr	r3, [pc, #104]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d003      	beq.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8008af0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008af6:	e00f      	b.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b02:	d11c      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008b04:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d016      	beq.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8008b10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008b16:	e012      	b.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008b18:	e011      	b.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008b1a:	f7ff fe75 	bl	8008808 <HAL_RCC_GetPCLK2Freq>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	0b9b      	lsrs	r3, r3, #14
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008b34:	e004      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008b36:	bf00      	nop
 8008b38:	e002      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008b3e:	bf00      	nop
    }
  }
  return (frequency);
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3734      	adds	r7, #52	; 0x34
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd90      	pop	{r4, r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	0800ef5c 	.word	0x0800ef5c
 8008b50:	40021000 	.word	0x40021000
 8008b54:	007a1200 	.word	0x007a1200
 8008b58:	003d0900 	.word	0x003d0900
 8008b5c:	aaaaaaab 	.word	0xaaaaaaab

08008b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e076      	b.n	8008c60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d108      	bne.n	8008b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b82:	d009      	beq.n	8008b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	61da      	str	r2, [r3, #28]
 8008b8a:	e005      	b.n	8008b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7fa fa7e 	bl	80030b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bea:	431a      	orrs	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1c:	ea42 0103 	orr.w	r1, r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	0c1a      	lsrs	r2, r3, #16
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f002 0204 	and.w	r2, r2, #4
 8008c3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	69da      	ldr	r2, [r3, #28]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_SPI_Transmit+0x22>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e126      	b.n	8008ed8 <HAL_SPI_Transmit+0x270>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c92:	f7fa fda3 	bl	80037dc <HAL_GetTick>
 8008c96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d002      	beq.n	8008cae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cac:	e10b      	b.n	8008ec6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_SPI_Transmit+0x52>
 8008cb4:	88fb      	ldrh	r3, [r7, #6]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cbe:	e102      	b.n	8008ec6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2203      	movs	r2, #3
 8008cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	88fa      	ldrh	r2, [r7, #6]
 8008cd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d06:	d10f      	bne.n	8008d28 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d32:	2b40      	cmp	r3, #64	; 0x40
 8008d34:	d007      	beq.n	8008d46 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4e:	d14b      	bne.n	8008de8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <HAL_SPI_Transmit+0xf6>
 8008d58:	8afb      	ldrh	r3, [r7, #22]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d13e      	bne.n	8008ddc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d62:	881a      	ldrh	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	1c9a      	adds	r2, r3, #2
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d82:	e02b      	b.n	8008ddc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d112      	bne.n	8008db8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	881a      	ldrh	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	1c9a      	adds	r2, r3, #2
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	3b01      	subs	r3, #1
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008db6:	e011      	b.n	8008ddc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008db8:	f7fa fd10 	bl	80037dc <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d803      	bhi.n	8008dd0 <HAL_SPI_Transmit+0x168>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d102      	bne.n	8008dd6 <HAL_SPI_Transmit+0x16e>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d102      	bne.n	8008ddc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008dda:	e074      	b.n	8008ec6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1ce      	bne.n	8008d84 <HAL_SPI_Transmit+0x11c>
 8008de6:	e04c      	b.n	8008e82 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <HAL_SPI_Transmit+0x18e>
 8008df0:	8afb      	ldrh	r3, [r7, #22]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d140      	bne.n	8008e78 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	330c      	adds	r3, #12
 8008e00:	7812      	ldrb	r2, [r2, #0]
 8008e02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e1c:	e02c      	b.n	8008e78 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d113      	bne.n	8008e54 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	330c      	adds	r3, #12
 8008e36:	7812      	ldrb	r2, [r2, #0]
 8008e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e52:	e011      	b.n	8008e78 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e54:	f7fa fcc2 	bl	80037dc <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d803      	bhi.n	8008e6c <HAL_SPI_Transmit+0x204>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	d102      	bne.n	8008e72 <HAL_SPI_Transmit+0x20a>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d102      	bne.n	8008e78 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e76:	e026      	b.n	8008ec6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1cd      	bne.n	8008e1e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fb64 	bl	8009554 <SPI_EndRxTxTransaction>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2220      	movs	r2, #32
 8008e96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10a      	bne.n	8008eb6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	613b      	str	r3, [r7, #16]
 8008eb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	77fb      	strb	r3, [r7, #31]
 8008ec2:	e000      	b.n	8008ec6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08c      	sub	sp, #48	; 0x30
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d101      	bne.n	8008f06 <HAL_SPI_TransmitReceive+0x26>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e18a      	b.n	800921c <HAL_SPI_TransmitReceive+0x33c>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f0e:	f7fa fc65 	bl	80037dc <HAL_GetTick>
 8008f12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008f24:	887b      	ldrh	r3, [r7, #2]
 8008f26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d00f      	beq.n	8008f50 <HAL_SPI_TransmitReceive+0x70>
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f36:	d107      	bne.n	8008f48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d103      	bne.n	8008f48 <HAL_SPI_TransmitReceive+0x68>
 8008f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d003      	beq.n	8008f50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f4e:	e15b      	b.n	8009208 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <HAL_SPI_TransmitReceive+0x82>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <HAL_SPI_TransmitReceive+0x82>
 8008f5c:	887b      	ldrh	r3, [r7, #2]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d103      	bne.n	8008f6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f68:	e14e      	b.n	8009208 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	d003      	beq.n	8008f7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	887a      	ldrh	r2, [r7, #2]
 8008f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	887a      	ldrh	r2, [r7, #2]
 8008f94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	887a      	ldrh	r2, [r7, #2]
 8008fa0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	887a      	ldrh	r2, [r7, #2]
 8008fa6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbe:	2b40      	cmp	r3, #64	; 0x40
 8008fc0:	d007      	beq.n	8008fd2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fda:	d178      	bne.n	80090ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <HAL_SPI_TransmitReceive+0x10a>
 8008fe4:	8b7b      	ldrh	r3, [r7, #26]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d166      	bne.n	80090b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fee:	881a      	ldrh	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffa:	1c9a      	adds	r2, r3, #2
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800900e:	e053      	b.n	80090b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b02      	cmp	r3, #2
 800901c:	d11b      	bne.n	8009056 <HAL_SPI_TransmitReceive+0x176>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009022:	b29b      	uxth	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d016      	beq.n	8009056 <HAL_SPI_TransmitReceive+0x176>
 8009028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902a:	2b01      	cmp	r3, #1
 800902c:	d113      	bne.n	8009056 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009032:	881a      	ldrh	r2, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903e:	1c9a      	adds	r2, r3, #2
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009048:	b29b      	uxth	r3, r3
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b01      	cmp	r3, #1
 8009062:	d119      	bne.n	8009098 <HAL_SPI_TransmitReceive+0x1b8>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d014      	beq.n	8009098 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	b292      	uxth	r2, r2
 800907a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	1c9a      	adds	r2, r3, #2
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908a:	b29b      	uxth	r3, r3
 800908c:	3b01      	subs	r3, #1
 800908e:	b29a      	uxth	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009094:	2301      	movs	r3, #1
 8009096:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009098:	f7fa fba0 	bl	80037dc <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d807      	bhi.n	80090b8 <HAL_SPI_TransmitReceive+0x1d8>
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ae:	d003      	beq.n	80090b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80090b6:	e0a7      	b.n	8009208 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1a6      	bne.n	8009010 <HAL_SPI_TransmitReceive+0x130>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1a1      	bne.n	8009010 <HAL_SPI_TransmitReceive+0x130>
 80090cc:	e07c      	b.n	80091c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_SPI_TransmitReceive+0x1fc>
 80090d6:	8b7b      	ldrh	r3, [r7, #26]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d16b      	bne.n	80091b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	7812      	ldrb	r2, [r2, #0]
 80090e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009102:	e057      	b.n	80091b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b02      	cmp	r3, #2
 8009110:	d11c      	bne.n	800914c <HAL_SPI_TransmitReceive+0x26c>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d017      	beq.n	800914c <HAL_SPI_TransmitReceive+0x26c>
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	2b01      	cmp	r3, #1
 8009120:	d114      	bne.n	800914c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	330c      	adds	r3, #12
 800912c:	7812      	ldrb	r2, [r2, #0]
 800912e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800913e:	b29b      	uxth	r3, r3
 8009140:	3b01      	subs	r3, #1
 8009142:	b29a      	uxth	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b01      	cmp	r3, #1
 8009158:	d119      	bne.n	800918e <HAL_SPI_TransmitReceive+0x2ae>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800915e:	b29b      	uxth	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d014      	beq.n	800918e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916e:	b2d2      	uxtb	r2, r2
 8009170:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009180:	b29b      	uxth	r3, r3
 8009182:	3b01      	subs	r3, #1
 8009184:	b29a      	uxth	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800918a:	2301      	movs	r3, #1
 800918c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800918e:	f7fa fb25 	bl	80037dc <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800919a:	429a      	cmp	r2, r3
 800919c:	d803      	bhi.n	80091a6 <HAL_SPI_TransmitReceive+0x2c6>
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a4:	d102      	bne.n	80091ac <HAL_SPI_TransmitReceive+0x2cc>
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d103      	bne.n	80091b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091b2:	e029      	b.n	8009208 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1a2      	bne.n	8009104 <HAL_SPI_TransmitReceive+0x224>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d19d      	bne.n	8009104 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 f9c1 	bl	8009554 <SPI_EndRxTxTransaction>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d006      	beq.n	80091e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80091e4:	e010      	b.n	8009208 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	e000      	b.n	8009208 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009206:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800921c:	4618      	mov	r0, r3
 800921e:	3730      	adds	r7, #48	; 0x30
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	099b      	lsrs	r3, r3, #6
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10f      	bne.n	8009268 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00a      	beq.n	8009268 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	099b      	lsrs	r3, r3, #6
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d004      	beq.n	8009268 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
    return;
 8009266:	e0be      	b.n	80093e6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00a      	beq.n	800928a <HAL_SPI_IRQHandler+0x66>
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	09db      	lsrs	r3, r3, #7
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d004      	beq.n	800928a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	4798      	blx	r3
    return;
 8009288:	e0ad      	b.n	80093e6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	095b      	lsrs	r3, r3, #5
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <HAL_SPI_IRQHandler+0x80>
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	099b      	lsrs	r3, r3, #6
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 80a1 	beq.w	80093e6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	095b      	lsrs	r3, r3, #5
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 809a 	beq.w	80093e6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	099b      	lsrs	r3, r3, #6
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d023      	beq.n	8009306 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d011      	beq.n	80092ee <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	f043 0204 	orr.w	r2, r3, #4
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	617b      	str	r3, [r7, #20]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	e00b      	b.n	8009306 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092ee:	2300      	movs	r3, #0
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	613b      	str	r3, [r7, #16]
 8009302:	693b      	ldr	r3, [r7, #16]
        return;
 8009304:	e06f      	b.n	80093e6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	095b      	lsrs	r3, r3, #5
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d014      	beq.n	800933c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009316:	f043 0201 	orr.w	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009340:	2b00      	cmp	r3, #0
 8009342:	d04f      	beq.n	80093e4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009352:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d104      	bne.n	8009370 <HAL_SPI_IRQHandler+0x14c>
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d034      	beq.n	80093da <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0203 	bic.w	r2, r2, #3
 800937e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d011      	beq.n	80093ac <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938c:	4a17      	ldr	r2, [pc, #92]	; (80093ec <HAL_SPI_IRQHandler+0x1c8>)
 800938e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009394:	4618      	mov	r0, r3
 8009396:	f7fb fe0f 	bl	8004fb8 <HAL_DMA_Abort_IT>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d016      	beq.n	80093e2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093b8:	4a0c      	ldr	r2, [pc, #48]	; (80093ec <HAL_SPI_IRQHandler+0x1c8>)
 80093ba:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fb fdf9 	bl	8004fb8 <HAL_DMA_Abort_IT>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00a      	beq.n	80093e2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80093d8:	e003      	b.n	80093e2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f808 	bl	80093f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80093e0:	e000      	b.n	80093e4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80093e2:	bf00      	nop
    return;
 80093e4:	bf00      	nop
  }
}
 80093e6:	3720      	adds	r7, #32
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	0800941d 	.word	0x0800941d

080093f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr

08009402 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009410:	b2db      	uxtb	r3, r3
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7ff ffda 	bl	80093f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	4613      	mov	r3, r2
 8009452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009454:	f7fa f9c2 	bl	80037dc <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	4413      	add	r3, r2
 8009462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009464:	f7fa f9ba 	bl	80037dc <HAL_GetTick>
 8009468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800946a:	4b39      	ldr	r3, [pc, #228]	; (8009550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	015b      	lsls	r3, r3, #5
 8009470:	0d1b      	lsrs	r3, r3, #20
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	fb02 f303 	mul.w	r3, r2, r3
 8009478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800947a:	e054      	b.n	8009526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009482:	d050      	beq.n	8009526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009484:	f7fa f9aa 	bl	80037dc <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	69fa      	ldr	r2, [r7, #28]
 8009490:	429a      	cmp	r2, r3
 8009492:	d902      	bls.n	800949a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d13d      	bne.n	8009516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094b2:	d111      	bne.n	80094d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094bc:	d004      	beq.n	80094c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094c6:	d107      	bne.n	80094d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094e0:	d10f      	bne.n	8009502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e017      	b.n	8009546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	3b01      	subs	r3, #1
 8009524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4013      	ands	r3, r2
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	429a      	cmp	r2, r3
 8009534:	bf0c      	ite	eq
 8009536:	2301      	moveq	r3, #1
 8009538:	2300      	movne	r3, #0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	461a      	mov	r2, r3
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	429a      	cmp	r2, r3
 8009542:	d19b      	bne.n	800947c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000004 	.word	0x20000004

08009554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af02      	add	r7, sp, #8
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2200      	movs	r2, #0
 8009568:	2180      	movs	r1, #128	; 0x80
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f7ff ff6a 	bl	8009444 <SPI_WaitFlagStateUntilTimeout>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d007      	beq.n	8009586 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957a:	f043 0220 	orr.w	r2, r3, #32
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e000      	b.n	8009588 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e041      	b.n	8009626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7f9 fdde 	bl	8003178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3304      	adds	r3, #4
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f000 fc6c 	bl	8009eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b01      	cmp	r3, #1
 8009642:	d001      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e03a      	b.n	80096be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a18      	ldr	r2, [pc, #96]	; (80096c8 <HAL_TIM_Base_Start_IT+0x98>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00e      	beq.n	8009688 <HAL_TIM_Base_Start_IT+0x58>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009672:	d009      	beq.n	8009688 <HAL_TIM_Base_Start_IT+0x58>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a14      	ldr	r2, [pc, #80]	; (80096cc <HAL_TIM_Base_Start_IT+0x9c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d004      	beq.n	8009688 <HAL_TIM_Base_Start_IT+0x58>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a13      	ldr	r2, [pc, #76]	; (80096d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d111      	bne.n	80096ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b06      	cmp	r3, #6
 8009698:	d010      	beq.n	80096bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f042 0201 	orr.w	r2, r2, #1
 80096a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096aa:	e007      	b.n	80096bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0201 	orr.w	r2, r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bc80      	pop	{r7}
 80096c6:	4770      	bx	lr
 80096c8:	40012c00 	.word	0x40012c00
 80096cc:	40000400 	.word	0x40000400
 80096d0:	40000800 	.word	0x40000800

080096d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e041      	b.n	800976a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f839 	bl	8009772 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f000 fbca 	bl	8009eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	bc80      	pop	{r7}
 8009782:	4770      	bx	lr

08009784 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d104      	bne.n	800979e <HAL_TIM_IC_Start_IT+0x1a>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800979a:	b2db      	uxtb	r3, r3
 800979c:	e013      	b.n	80097c6 <HAL_TIM_IC_Start_IT+0x42>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d104      	bne.n	80097ae <HAL_TIM_IC_Start_IT+0x2a>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	e00b      	b.n	80097c6 <HAL_TIM_IC_Start_IT+0x42>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d104      	bne.n	80097be <HAL_TIM_IC_Start_IT+0x3a>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	e003      	b.n	80097c6 <HAL_TIM_IC_Start_IT+0x42>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d104      	bne.n	80097d8 <HAL_TIM_IC_Start_IT+0x54>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	e013      	b.n	8009800 <HAL_TIM_IC_Start_IT+0x7c>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2b04      	cmp	r3, #4
 80097dc:	d104      	bne.n	80097e8 <HAL_TIM_IC_Start_IT+0x64>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	e00b      	b.n	8009800 <HAL_TIM_IC_Start_IT+0x7c>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b08      	cmp	r3, #8
 80097ec:	d104      	bne.n	80097f8 <HAL_TIM_IC_Start_IT+0x74>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	e003      	b.n	8009800 <HAL_TIM_IC_Start_IT+0x7c>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d102      	bne.n	800980e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d001      	beq.n	8009812 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e0b3      	b.n	800997a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d104      	bne.n	8009822 <HAL_TIM_IC_Start_IT+0x9e>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009820:	e013      	b.n	800984a <HAL_TIM_IC_Start_IT+0xc6>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b04      	cmp	r3, #4
 8009826:	d104      	bne.n	8009832 <HAL_TIM_IC_Start_IT+0xae>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2202      	movs	r2, #2
 800982c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009830:	e00b      	b.n	800984a <HAL_TIM_IC_Start_IT+0xc6>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b08      	cmp	r3, #8
 8009836:	d104      	bne.n	8009842 <HAL_TIM_IC_Start_IT+0xbe>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009840:	e003      	b.n	800984a <HAL_TIM_IC_Start_IT+0xc6>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2202      	movs	r2, #2
 8009846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <HAL_TIM_IC_Start_IT+0xd6>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009858:	e013      	b.n	8009882 <HAL_TIM_IC_Start_IT+0xfe>
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b04      	cmp	r3, #4
 800985e:	d104      	bne.n	800986a <HAL_TIM_IC_Start_IT+0xe6>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009868:	e00b      	b.n	8009882 <HAL_TIM_IC_Start_IT+0xfe>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b08      	cmp	r3, #8
 800986e:	d104      	bne.n	800987a <HAL_TIM_IC_Start_IT+0xf6>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009878:	e003      	b.n	8009882 <HAL_TIM_IC_Start_IT+0xfe>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2202      	movs	r2, #2
 800987e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b0c      	cmp	r3, #12
 8009886:	d841      	bhi.n	800990c <HAL_TIM_IC_Start_IT+0x188>
 8009888:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <HAL_TIM_IC_Start_IT+0x10c>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	080098c5 	.word	0x080098c5
 8009894:	0800990d 	.word	0x0800990d
 8009898:	0800990d 	.word	0x0800990d
 800989c:	0800990d 	.word	0x0800990d
 80098a0:	080098d7 	.word	0x080098d7
 80098a4:	0800990d 	.word	0x0800990d
 80098a8:	0800990d 	.word	0x0800990d
 80098ac:	0800990d 	.word	0x0800990d
 80098b0:	080098e9 	.word	0x080098e9
 80098b4:	0800990d 	.word	0x0800990d
 80098b8:	0800990d 	.word	0x0800990d
 80098bc:	0800990d 	.word	0x0800990d
 80098c0:	080098fb 	.word	0x080098fb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0202 	orr.w	r2, r2, #2
 80098d2:	60da      	str	r2, [r3, #12]
      break;
 80098d4:	e01b      	b.n	800990e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0204 	orr.w	r2, r2, #4
 80098e4:	60da      	str	r2, [r3, #12]
      break;
 80098e6:	e012      	b.n	800990e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68da      	ldr	r2, [r3, #12]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f042 0208 	orr.w	r2, r2, #8
 80098f6:	60da      	str	r2, [r3, #12]
      break;
 80098f8:	e009      	b.n	800990e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68da      	ldr	r2, [r3, #12]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0210 	orr.w	r2, r2, #16
 8009908:	60da      	str	r2, [r3, #12]
      break;
 800990a:	e000      	b.n	800990e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800990c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2201      	movs	r2, #1
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fccd 	bl	800a2b6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a18      	ldr	r2, [pc, #96]	; (8009984 <HAL_TIM_IC_Start_IT+0x200>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00e      	beq.n	8009944 <HAL_TIM_IC_Start_IT+0x1c0>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992e:	d009      	beq.n	8009944 <HAL_TIM_IC_Start_IT+0x1c0>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a14      	ldr	r2, [pc, #80]	; (8009988 <HAL_TIM_IC_Start_IT+0x204>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d004      	beq.n	8009944 <HAL_TIM_IC_Start_IT+0x1c0>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a13      	ldr	r2, [pc, #76]	; (800998c <HAL_TIM_IC_Start_IT+0x208>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d111      	bne.n	8009968 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b06      	cmp	r3, #6
 8009954:	d010      	beq.n	8009978 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f042 0201 	orr.w	r2, r2, #1
 8009964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009966:	e007      	b.n	8009978 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 0201 	orr.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	40012c00 	.word	0x40012c00
 8009988:	40000400 	.word	0x40000400
 800998c:	40000800 	.word	0x40000800

08009990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d122      	bne.n	80099ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d11b      	bne.n	80099ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f06f 0202 	mvn.w	r2, #2
 80099bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	f003 0303 	and.w	r3, r3, #3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa4e 	bl	8009e74 <HAL_TIM_IC_CaptureCallback>
 80099d8:	e005      	b.n	80099e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fa41 	bl	8009e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fa50 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	f003 0304 	and.w	r3, r3, #4
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	d122      	bne.n	8009a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	d11b      	bne.n	8009a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f06f 0204 	mvn.w	r2, #4
 8009a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2202      	movs	r2, #2
 8009a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa24 	bl	8009e74 <HAL_TIM_IC_CaptureCallback>
 8009a2c:	e005      	b.n	8009a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fa17 	bl	8009e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fa26 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d122      	bne.n	8009a94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d11b      	bne.n	8009a94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f06f 0208 	mvn.w	r2, #8
 8009a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2204      	movs	r2, #4
 8009a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	f003 0303 	and.w	r3, r3, #3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f9fa 	bl	8009e74 <HAL_TIM_IC_CaptureCallback>
 8009a80:	e005      	b.n	8009a8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f9ed 	bl	8009e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f9fc 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	2b10      	cmp	r3, #16
 8009aa0:	d122      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d11b      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f06f 0210 	mvn.w	r2, #16
 8009ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2208      	movs	r2, #8
 8009abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f9d0 	bl	8009e74 <HAL_TIM_IC_CaptureCallback>
 8009ad4:	e005      	b.n	8009ae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f9c3 	bl	8009e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f9d2 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d10e      	bne.n	8009b14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d107      	bne.n	8009b14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f06f 0201 	mvn.w	r2, #1
 8009b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f99e 	bl	8009e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1e:	2b80      	cmp	r3, #128	; 0x80
 8009b20:	d10e      	bne.n	8009b40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2c:	2b80      	cmp	r3, #128	; 0x80
 8009b2e:	d107      	bne.n	8009b40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fc47 	bl	800a3ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4a:	2b40      	cmp	r3, #64	; 0x40
 8009b4c:	d10e      	bne.n	8009b6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b58:	2b40      	cmp	r3, #64	; 0x40
 8009b5a:	d107      	bne.n	8009b6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f996 	bl	8009e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d10e      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d107      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f06f 0220 	mvn.w	r2, #32
 8009b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fc12 	bl	800a3bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_TIM_IC_ConfigChannel+0x1a>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e082      	b.n	8009cc0 <HAL_TIM_IC_ConfigChannel+0x120>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d11b      	bne.n	8009c00 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6818      	ldr	r0, [r3, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f000 f9ca 	bl	8009f70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 020c 	bic.w	r2, r2, #12
 8009bea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6999      	ldr	r1, [r3, #24]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	689a      	ldr	r2, [r3, #8]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	619a      	str	r2, [r3, #24]
 8009bfe:	e05a      	b.n	8009cb6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d11c      	bne.n	8009c40 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	6819      	ldr	r1, [r3, #0]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	f000 fa33 	bl	800a080 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699a      	ldr	r2, [r3, #24]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6999      	ldr	r1, [r3, #24]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	021a      	lsls	r2, r3, #8
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	619a      	str	r2, [r3, #24]
 8009c3e:	e03a      	b.n	8009cb6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b08      	cmp	r3, #8
 8009c44:	d11b      	bne.n	8009c7e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	6819      	ldr	r1, [r3, #0]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f000 fa7e 	bl	800a156 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69da      	ldr	r2, [r3, #28]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 020c 	bic.w	r2, r2, #12
 8009c68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	69d9      	ldr	r1, [r3, #28]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	689a      	ldr	r2, [r3, #8]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	61da      	str	r2, [r3, #28]
 8009c7c:	e01b      	b.n	8009cb6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	6819      	ldr	r1, [r3, #0]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	685a      	ldr	r2, [r3, #4]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	f000 fa9d 	bl	800a1cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69da      	ldr	r2, [r3, #28]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ca0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69d9      	ldr	r1, [r3, #28]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	021a      	lsls	r2, r3, #8
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d101      	bne.n	8009ce0 <HAL_TIM_ConfigClockSource+0x18>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e0b3      	b.n	8009e48 <HAL_TIM_ConfigClockSource+0x180>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d18:	d03e      	beq.n	8009d98 <HAL_TIM_ConfigClockSource+0xd0>
 8009d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d1e:	f200 8087 	bhi.w	8009e30 <HAL_TIM_ConfigClockSource+0x168>
 8009d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d26:	f000 8085 	beq.w	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2e:	d87f      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x168>
 8009d30:	2b70      	cmp	r3, #112	; 0x70
 8009d32:	d01a      	beq.n	8009d6a <HAL_TIM_ConfigClockSource+0xa2>
 8009d34:	2b70      	cmp	r3, #112	; 0x70
 8009d36:	d87b      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x168>
 8009d38:	2b60      	cmp	r3, #96	; 0x60
 8009d3a:	d050      	beq.n	8009dde <HAL_TIM_ConfigClockSource+0x116>
 8009d3c:	2b60      	cmp	r3, #96	; 0x60
 8009d3e:	d877      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x168>
 8009d40:	2b50      	cmp	r3, #80	; 0x50
 8009d42:	d03c      	beq.n	8009dbe <HAL_TIM_ConfigClockSource+0xf6>
 8009d44:	2b50      	cmp	r3, #80	; 0x50
 8009d46:	d873      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x168>
 8009d48:	2b40      	cmp	r3, #64	; 0x40
 8009d4a:	d058      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0x136>
 8009d4c:	2b40      	cmp	r3, #64	; 0x40
 8009d4e:	d86f      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x168>
 8009d50:	2b30      	cmp	r3, #48	; 0x30
 8009d52:	d064      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x156>
 8009d54:	2b30      	cmp	r3, #48	; 0x30
 8009d56:	d86b      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x168>
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	d060      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x156>
 8009d5c:	2b20      	cmp	r3, #32
 8009d5e:	d867      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x168>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d05c      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x156>
 8009d64:	2b10      	cmp	r3, #16
 8009d66:	d05a      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009d68:	e062      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	6899      	ldr	r1, [r3, #8]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f000 fa7d 	bl	800a278 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	609a      	str	r2, [r3, #8]
      break;
 8009d96:	e04e      	b.n	8009e36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	6899      	ldr	r1, [r3, #8]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f000 fa66 	bl	800a278 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689a      	ldr	r2, [r3, #8]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dba:	609a      	str	r2, [r3, #8]
      break;
 8009dbc:	e03b      	b.n	8009e36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	6859      	ldr	r1, [r3, #4]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f000 f92a 	bl	800a024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2150      	movs	r1, #80	; 0x50
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 fa34 	bl	800a244 <TIM_ITRx_SetConfig>
      break;
 8009ddc:	e02b      	b.n	8009e36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	6859      	ldr	r1, [r3, #4]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f000 f984 	bl	800a0f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2160      	movs	r1, #96	; 0x60
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fa24 	bl	800a244 <TIM_ITRx_SetConfig>
      break;
 8009dfc:	e01b      	b.n	8009e36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	6859      	ldr	r1, [r3, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f000 f90a 	bl	800a024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2140      	movs	r1, #64	; 0x40
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fa14 	bl	800a244 <TIM_ITRx_SetConfig>
      break;
 8009e1c:	e00b      	b.n	8009e36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f000 fa0b 	bl	800a244 <TIM_ITRx_SetConfig>
        break;
 8009e2e:	e002      	b.n	8009e36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009e30:	bf00      	nop
 8009e32:	e000      	b.n	8009e36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009e34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc80      	pop	{r7}
 8009e60:	4770      	bx	lr

08009e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e6a:	bf00      	nop
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bc80      	pop	{r7}
 8009e72:	4770      	bx	lr

08009e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bc80      	pop	{r7}
 8009e84:	4770      	bx	lr

08009e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e8e:	bf00      	nop
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bc80      	pop	{r7}
 8009ea8:	4770      	bx	lr
	...

08009eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a29      	ldr	r2, [pc, #164]	; (8009f64 <TIM_Base_SetConfig+0xb8>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d00b      	beq.n	8009edc <TIM_Base_SetConfig+0x30>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eca:	d007      	beq.n	8009edc <TIM_Base_SetConfig+0x30>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a26      	ldr	r2, [pc, #152]	; (8009f68 <TIM_Base_SetConfig+0xbc>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d003      	beq.n	8009edc <TIM_Base_SetConfig+0x30>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a25      	ldr	r2, [pc, #148]	; (8009f6c <TIM_Base_SetConfig+0xc0>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d108      	bne.n	8009eee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a1c      	ldr	r2, [pc, #112]	; (8009f64 <TIM_Base_SetConfig+0xb8>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00b      	beq.n	8009f0e <TIM_Base_SetConfig+0x62>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009efc:	d007      	beq.n	8009f0e <TIM_Base_SetConfig+0x62>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a19      	ldr	r2, [pc, #100]	; (8009f68 <TIM_Base_SetConfig+0xbc>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d003      	beq.n	8009f0e <TIM_Base_SetConfig+0x62>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a18      	ldr	r2, [pc, #96]	; (8009f6c <TIM_Base_SetConfig+0xc0>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d108      	bne.n	8009f20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a07      	ldr	r2, [pc, #28]	; (8009f64 <TIM_Base_SetConfig+0xb8>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d103      	bne.n	8009f54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	615a      	str	r2, [r3, #20]
}
 8009f5a:	bf00      	nop
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bc80      	pop	{r7}
 8009f62:	4770      	bx	lr
 8009f64:	40012c00 	.word	0x40012c00
 8009f68:	40000400 	.word	0x40000400
 8009f6c:	40000800 	.word	0x40000800

08009f70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	f023 0201 	bic.w	r2, r3, #1
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4a1f      	ldr	r2, [pc, #124]	; (800a018 <TIM_TI1_SetConfig+0xa8>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00b      	beq.n	8009fb6 <TIM_TI1_SetConfig+0x46>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa4:	d007      	beq.n	8009fb6 <TIM_TI1_SetConfig+0x46>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4a1c      	ldr	r2, [pc, #112]	; (800a01c <TIM_TI1_SetConfig+0xac>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d003      	beq.n	8009fb6 <TIM_TI1_SetConfig+0x46>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4a1b      	ldr	r2, [pc, #108]	; (800a020 <TIM_TI1_SetConfig+0xb0>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d101      	bne.n	8009fba <TIM_TI1_SetConfig+0x4a>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e000      	b.n	8009fbc <TIM_TI1_SetConfig+0x4c>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d008      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	e003      	b.n	8009fda <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f043 0301 	orr.w	r3, r3, #1
 8009fd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f023 030a 	bic.w	r3, r3, #10
 8009ff4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f003 030a 	and.w	r3, r3, #10
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	621a      	str	r2, [r3, #32]
}
 800a00e:	bf00      	nop
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	bc80      	pop	{r7}
 800a016:	4770      	bx	lr
 800a018:	40012c00 	.word	0x40012c00
 800a01c:	40000400 	.word	0x40000400
 800a020:	40000800 	.word	0x40000800

0800a024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f023 0201 	bic.w	r2, r3, #1
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a04e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	4313      	orrs	r3, r2
 800a058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f023 030a 	bic.w	r3, r3, #10
 800a060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	4313      	orrs	r3, r2
 800a068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	621a      	str	r2, [r3, #32]
}
 800a076:	bf00      	nop
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bc80      	pop	{r7}
 800a07e:	4770      	bx	lr

0800a080 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a080:	b480      	push	{r7}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	f023 0210 	bic.w	r2, r3, #16
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	021b      	lsls	r3, r3, #8
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	031b      	lsls	r3, r3, #12
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	011b      	lsls	r3, r3, #4
 800a0d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	621a      	str	r2, [r3, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bc80      	pop	{r7}
 800a0f6:	4770      	bx	lr

0800a0f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	f023 0210 	bic.w	r2, r3, #16
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a122:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	031b      	lsls	r3, r3, #12
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a134:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	621a      	str	r2, [r3, #32]
}
 800a14c:	bf00      	nop
 800a14e:	371c      	adds	r7, #28
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr

0800a156 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a156:	b480      	push	{r7}
 800a158:	b087      	sub	sp, #28
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	607a      	str	r2, [r7, #4]
 800a162:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	69db      	ldr	r3, [r3, #28]
 800a174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f023 0303 	bic.w	r3, r3, #3
 800a182:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4313      	orrs	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a192:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	011b      	lsls	r3, r3, #4
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	621a      	str	r2, [r3, #32]
}
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bc80      	pop	{r7}
 800a1ca:	4770      	bx	lr

0800a1cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	021b      	lsls	r3, r3, #8
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4313      	orrs	r3, r2
 800a202:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a20a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	031b      	lsls	r3, r3, #12
 800a210:	b29b      	uxth	r3, r3
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	4313      	orrs	r3, r2
 800a216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a21e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	031b      	lsls	r3, r3, #12
 800a224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	621a      	str	r2, [r3, #32]
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr

0800a244 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4313      	orrs	r3, r2
 800a262:	f043 0307 	orr.w	r3, r3, #7
 800a266:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	609a      	str	r2, [r3, #8]
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr

0800a278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	021a      	lsls	r2, r3, #8
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	431a      	orrs	r2, r3
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	609a      	str	r2, [r3, #8]
}
 800a2ac:	bf00      	nop
 800a2ae:	371c      	adds	r7, #28
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr

0800a2b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b087      	sub	sp, #28
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f003 031f 	and.w	r3, r3, #31
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a1a      	ldr	r2, [r3, #32]
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	401a      	ands	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a1a      	ldr	r2, [r3, #32]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f003 031f 	and.w	r3, r3, #31
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	621a      	str	r2, [r3, #32]
}
 800a2f4:	bf00      	nop
 800a2f6:	371c      	adds	r7, #28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr
	...

0800a300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a310:	2b01      	cmp	r3, #1
 800a312:	d101      	bne.n	800a318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a314:	2302      	movs	r3, #2
 800a316:	e046      	b.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a33e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a16      	ldr	r2, [pc, #88]	; (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d00e      	beq.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a364:	d009      	beq.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a12      	ldr	r2, [pc, #72]	; (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d004      	beq.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a10      	ldr	r2, [pc, #64]	; (800a3b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d10c      	bne.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bc80      	pop	{r7}
 800a3ae:	4770      	bx	lr
 800a3b0:	40012c00 	.word	0x40012c00
 800a3b4:	40000400 	.word	0x40000400
 800a3b8:	40000800 	.word	0x40000800

0800a3bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bc80      	pop	{r7}
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e03f      	b.n	800a472 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7f8 ff70 	bl	80032ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2224      	movs	r2, #36	; 0x24
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fcad 	bl	800ad84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	691a      	ldr	r2, [r3, #16]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	695a      	ldr	r2, [r3, #20]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68da      	ldr	r2, [r3, #12]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2220      	movs	r2, #32
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	4613      	mov	r3, r2
 800a486:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2b20      	cmp	r3, #32
 800a492:	d11d      	bne.n	800a4d0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <HAL_UART_Receive_DMA+0x26>
 800a49a:	88fb      	ldrh	r3, [r7, #6]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e016      	b.n	800a4d2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d101      	bne.n	800a4b2 <HAL_UART_Receive_DMA+0x38>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	e00f      	b.n	800a4d2 <HAL_UART_Receive_DMA+0x58>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	68b9      	ldr	r1, [r7, #8]
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 fa92 	bl	800a9f0 <UART_Start_Receive_DMA>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	e000      	b.n	800a4d2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a4d0:	2302      	movs	r3, #2
  }
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08a      	sub	sp, #40	; 0x28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a500:	2300      	movs	r3, #0
 800a502:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	f003 030f 	and.w	r3, r3, #15
 800a50a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10d      	bne.n	800a52e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d008      	beq.n	800a52e <HAL_UART_IRQHandler+0x52>
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fb82 	bl	800ac30 <UART_Receive_IT>
      return;
 800a52c:	e17b      	b.n	800a826 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 80b1 	beq.w	800a698 <HAL_UART_IRQHandler+0x1bc>
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	f003 0301 	and.w	r3, r3, #1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d105      	bne.n	800a54c <HAL_UART_IRQHandler+0x70>
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 80a6 	beq.w	800a698 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <HAL_UART_IRQHandler+0x90>
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d005      	beq.n	800a56c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	f043 0201 	orr.w	r2, r3, #1
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	f003 0304 	and.w	r3, r3, #4
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <HAL_UART_IRQHandler+0xb0>
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a584:	f043 0202 	orr.w	r2, r3, #2
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <HAL_UART_IRQHandler+0xd0>
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	f043 0204 	orr.w	r2, r3, #4
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00f      	beq.n	800a5d6 <HAL_UART_IRQHandler+0xfa>
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	f003 0320 	and.w	r3, r3, #32
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <HAL_UART_IRQHandler+0xee>
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	f043 0208 	orr.w	r2, r3, #8
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 811e 	beq.w	800a81c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	f003 0320 	and.w	r3, r3, #32
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d007      	beq.n	800a5fa <HAL_UART_IRQHandler+0x11e>
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fb1b 	bl	800ac30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a604:	2b00      	cmp	r3, #0
 800a606:	bf14      	ite	ne
 800a608:	2301      	movne	r3, #1
 800a60a:	2300      	moveq	r3, #0
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	f003 0308 	and.w	r3, r3, #8
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d102      	bne.n	800a622 <HAL_UART_IRQHandler+0x146>
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d031      	beq.n	800a686 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fa5d 	bl	800aae2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d023      	beq.n	800a67e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	695a      	ldr	r2, [r3, #20]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a644:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d013      	beq.n	800a676 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	4a76      	ldr	r2, [pc, #472]	; (800a82c <HAL_UART_IRQHandler+0x350>)
 800a654:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fa fcac 	bl	8004fb8 <HAL_DMA_Abort_IT>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d016      	beq.n	800a694 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a670:	4610      	mov	r0, r2
 800a672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a674:	e00e      	b.n	800a694 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f8f5 	bl	800a866 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a67c:	e00a      	b.n	800a694 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f8f1 	bl	800a866 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a684:	e006      	b.n	800a694 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f8ed 	bl	800a866 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a692:	e0c3      	b.n	800a81c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a694:	bf00      	nop
    return;
 800a696:	e0c1      	b.n	800a81c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	f040 80a1 	bne.w	800a7e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 809b 	beq.w	800a7e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	f003 0310 	and.w	r3, r3, #16
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 8095 	beq.w	800a7e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	60fb      	str	r3, [r7, #12]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d04e      	beq.n	800a77c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a6e8:	8a3b      	ldrh	r3, [r7, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 8098 	beq.w	800a820 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6f4:	8a3a      	ldrh	r2, [r7, #16]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	f080 8092 	bcs.w	800a820 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	8a3a      	ldrh	r2, [r7, #16]
 800a700:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	2b20      	cmp	r3, #32
 800a70a:	d02b      	beq.n	800a764 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a71a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	695a      	ldr	r2, [r3, #20]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0201 	bic.w	r2, r2, #1
 800a72a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	695a      	ldr	r2, [r3, #20]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a73a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68da      	ldr	r2, [r3, #12]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f022 0210 	bic.w	r2, r2, #16
 800a758:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fa fbef 	bl	8004f42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	b29b      	uxth	r3, r3
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f87f 	bl	800a878 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a77a:	e051      	b.n	800a820 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a784:	b29b      	uxth	r3, r3
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a78e:	b29b      	uxth	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	d047      	beq.n	800a824 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a794:	8a7b      	ldrh	r3, [r7, #18]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d044      	beq.n	800a824 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68da      	ldr	r2, [r3, #12]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a7a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	695a      	ldr	r2, [r3, #20]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f022 0201 	bic.w	r2, r2, #1
 800a7b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f022 0210 	bic.w	r2, r2, #16
 800a7d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7d8:	8a7b      	ldrh	r3, [r7, #18]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f84b 	bl	800a878 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a7e2:	e01f      	b.n	800a824 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d008      	beq.n	800a800 <HAL_UART_IRQHandler+0x324>
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f9b2 	bl	800ab62 <UART_Transmit_IT>
    return;
 800a7fe:	e012      	b.n	800a826 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00d      	beq.n	800a826 <HAL_UART_IRQHandler+0x34a>
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d008      	beq.n	800a826 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f9f3 	bl	800ac00 <UART_EndTransmit_IT>
    return;
 800a81a:	e004      	b.n	800a826 <HAL_UART_IRQHandler+0x34a>
    return;
 800a81c:	bf00      	nop
 800a81e:	e002      	b.n	800a826 <HAL_UART_IRQHandler+0x34a>
      return;
 800a820:	bf00      	nop
 800a822:	e000      	b.n	800a826 <HAL_UART_IRQHandler+0x34a>
      return;
 800a824:	bf00      	nop
  }
}
 800a826:	3728      	adds	r7, #40	; 0x28
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	0800ab3b 	.word	0x0800ab3b

0800a830 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bc80      	pop	{r7}
 800a840:	4770      	bx	lr

0800a842 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	bc80      	pop	{r7}
 800a852:	4770      	bx	lr

0800a854 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	bc80      	pop	{r7}
 800a864:	4770      	bx	lr

0800a866 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	bc80      	pop	{r7}
 800a876:	4770      	bx	lr

0800a878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	bc80      	pop	{r7}
 800a88c:	4770      	bx	lr

0800a88e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0320 	and.w	r3, r3, #32
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d12a      	bne.n	800a900 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68da      	ldr	r2, [r3, #12]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8be:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	695a      	ldr	r2, [r3, #20]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f022 0201 	bic.w	r2, r2, #1
 800a8ce:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	695a      	ldr	r2, [r3, #20]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8de:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d107      	bne.n	800a900 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f022 0210 	bic.w	r2, r2, #16
 800a8fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a904:	2b01      	cmp	r3, #1
 800a906:	d106      	bne.n	800a916 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a90c:	4619      	mov	r1, r3
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f7ff ffb2 	bl	800a878 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a914:	e002      	b.n	800a91c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f7ff ff93 	bl	800a842 <HAL_UART_RxCpltCallback>
}
 800a91c:	bf00      	nop
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	2b01      	cmp	r3, #1
 800a938:	d108      	bne.n	800a94c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a93e:	085b      	lsrs	r3, r3, #1
 800a940:	b29b      	uxth	r3, r3
 800a942:	4619      	mov	r1, r3
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7ff ff97 	bl	800a878 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a94a:	e002      	b.n	800a952 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f7ff ff81 	bl	800a854 <HAL_UART_RxHalfCpltCallback>
}
 800a952:	bf00      	nop
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a976:	2b00      	cmp	r3, #0
 800a978:	bf14      	ite	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	2300      	moveq	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b21      	cmp	r3, #33	; 0x21
 800a98c:	d108      	bne.n	800a9a0 <UART_DMAError+0x46>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2200      	movs	r2, #0
 800a998:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a99a:	68b8      	ldr	r0, [r7, #8]
 800a99c:	f000 f88c 	bl	800aab8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	bf14      	ite	ne
 800a9ae:	2301      	movne	r3, #1
 800a9b0:	2300      	moveq	r3, #0
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b22      	cmp	r3, #34	; 0x22
 800a9c0:	d108      	bne.n	800a9d4 <UART_DMAError+0x7a>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d005      	beq.n	800a9d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a9ce:	68b8      	ldr	r0, [r7, #8]
 800a9d0:	f000 f887 	bl	800aae2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d8:	f043 0210 	orr.w	r2, r3, #16
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9e0:	68b8      	ldr	r0, [r7, #8]
 800a9e2:	f7ff ff40 	bl	800a866 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9e6:	bf00      	nop
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
	...

0800a9f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	88fa      	ldrh	r2, [r7, #6]
 800aa08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2222      	movs	r2, #34	; 0x22
 800aa14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	4a23      	ldr	r2, [pc, #140]	; (800aaac <UART_Start_Receive_DMA+0xbc>)
 800aa1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa24:	4a22      	ldr	r2, [pc, #136]	; (800aab0 <UART_Start_Receive_DMA+0xc0>)
 800aa26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2c:	4a21      	ldr	r2, [pc, #132]	; (800aab4 <UART_Start_Receive_DMA+0xc4>)
 800aa2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa34:	2200      	movs	r2, #0
 800aa36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aa38:	f107 0308 	add.w	r3, r7, #8
 800aa3c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4619      	mov	r1, r3
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	f7fa fa18 	bl	8004e84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aa54:	2300      	movs	r3, #0
 800aa56:	613b      	str	r3, [r7, #16]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	613b      	str	r3, [r7, #16]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	613b      	str	r3, [r7, #16]
 800aa68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68da      	ldr	r2, [r3, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa80:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	695a      	ldr	r2, [r3, #20]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f042 0201 	orr.w	r2, r2, #1
 800aa90:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	695a      	ldr	r2, [r3, #20]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaa0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	0800a88f 	.word	0x0800a88f
 800aab0:	0800a925 	.word	0x0800a925
 800aab4:	0800a95b 	.word	0x0800a95b

0800aab8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aace:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2220      	movs	r2, #32
 800aad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	bc80      	pop	{r7}
 800aae0:	4770      	bx	lr

0800aae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68da      	ldr	r2, [r3, #12]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aaf8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	695a      	ldr	r2, [r3, #20]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f022 0201 	bic.w	r2, r2, #1
 800ab08:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d107      	bne.n	800ab22 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68da      	ldr	r2, [r3, #12]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f022 0210 	bic.w	r2, r2, #16
 800ab20:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2220      	movs	r2, #32
 800ab26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bc80      	pop	{r7}
 800ab38:	4770      	bx	lr

0800ab3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b084      	sub	sp, #16
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7ff fe86 	bl	800a866 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab5a:	bf00      	nop
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b085      	sub	sp, #20
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b21      	cmp	r3, #33	; 0x21
 800ab74:	d13e      	bne.n	800abf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab7e:	d114      	bne.n	800abaa <UART_Transmit_IT+0x48>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d110      	bne.n	800abaa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	1c9a      	adds	r2, r3, #2
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	621a      	str	r2, [r3, #32]
 800aba8:	e008      	b.n	800abbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	1c59      	adds	r1, r3, #1
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	6211      	str	r1, [r2, #32]
 800abb4:	781a      	ldrb	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	3b01      	subs	r3, #1
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	4619      	mov	r1, r3
 800abca:	84d1      	strh	r1, [r2, #38]	; 0x26
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10f      	bne.n	800abf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	e000      	b.n	800abf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800abf4:	2302      	movs	r3, #2
  }
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bc80      	pop	{r7}
 800abfe:	4770      	bx	lr

0800ac00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7ff fe05 	bl	800a830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b22      	cmp	r3, #34	; 0x22
 800ac42:	f040 8099 	bne.w	800ad78 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4e:	d117      	bne.n	800ac80 <UART_Receive_IT+0x50>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d113      	bne.n	800ac80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac78:	1c9a      	adds	r2, r3, #2
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	629a      	str	r2, [r3, #40]	; 0x28
 800ac7e:	e026      	b.n	800acce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac84:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac92:	d007      	beq.n	800aca4 <UART_Receive_IT+0x74>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <UART_Receive_IT+0x82>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d106      	bne.n	800acb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	701a      	strb	r2, [r3, #0]
 800acb0:	e008      	b.n	800acc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	4619      	mov	r1, r3
 800acdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d148      	bne.n	800ad74 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0220 	bic.w	r2, r2, #32
 800acf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68da      	ldr	r2, [r3, #12]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	695a      	ldr	r2, [r3, #20]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f022 0201 	bic.w	r2, r2, #1
 800ad10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d123      	bne.n	800ad6a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68da      	ldr	r2, [r3, #12]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f022 0210 	bic.w	r2, r2, #16
 800ad36:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0310 	and.w	r3, r3, #16
 800ad42:	2b10      	cmp	r3, #16
 800ad44:	d10a      	bne.n	800ad5c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7ff fd88 	bl	800a878 <HAL_UARTEx_RxEventCallback>
 800ad68:	e002      	b.n	800ad70 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff fd69 	bl	800a842 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	e002      	b.n	800ad7a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	e000      	b.n	800ad7a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800ad78:	2302      	movs	r3, #2
  }
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	430a      	orrs	r2, r1
 800ada0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689a      	ldr	r2, [r3, #8]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	431a      	orrs	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800adbe:	f023 030c 	bic.w	r3, r3, #12
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	6812      	ldr	r2, [r2, #0]
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	430b      	orrs	r3, r1
 800adca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	699a      	ldr	r2, [r3, #24]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a2c      	ldr	r2, [pc, #176]	; (800ae98 <UART_SetConfig+0x114>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d103      	bne.n	800adf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800adec:	f7fd fd0c 	bl	8008808 <HAL_RCC_GetPCLK2Freq>
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	e002      	b.n	800adfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800adf4:	f7fd fcf4 	bl	80087e0 <HAL_RCC_GetPCLK1Freq>
 800adf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	4613      	mov	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	009a      	lsls	r2, r3, #2
 800ae04:	441a      	add	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae10:	4a22      	ldr	r2, [pc, #136]	; (800ae9c <UART_SetConfig+0x118>)
 800ae12:	fba2 2303 	umull	r2, r3, r2, r3
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	0119      	lsls	r1, r3, #4
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009a      	lsls	r2, r3, #2
 800ae24:	441a      	add	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae30:	4b1a      	ldr	r3, [pc, #104]	; (800ae9c <UART_SetConfig+0x118>)
 800ae32:	fba3 0302 	umull	r0, r3, r3, r2
 800ae36:	095b      	lsrs	r3, r3, #5
 800ae38:	2064      	movs	r0, #100	; 0x64
 800ae3a:	fb00 f303 	mul.w	r3, r0, r3
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	011b      	lsls	r3, r3, #4
 800ae42:	3332      	adds	r3, #50	; 0x32
 800ae44:	4a15      	ldr	r2, [pc, #84]	; (800ae9c <UART_SetConfig+0x118>)
 800ae46:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4a:	095b      	lsrs	r3, r3, #5
 800ae4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae50:	4419      	add	r1, r3
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	4613      	mov	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	009a      	lsls	r2, r3, #2
 800ae5c:	441a      	add	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae68:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <UART_SetConfig+0x118>)
 800ae6a:	fba3 0302 	umull	r0, r3, r3, r2
 800ae6e:	095b      	lsrs	r3, r3, #5
 800ae70:	2064      	movs	r0, #100	; 0x64
 800ae72:	fb00 f303 	mul.w	r3, r0, r3
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	011b      	lsls	r3, r3, #4
 800ae7a:	3332      	adds	r3, #50	; 0x32
 800ae7c:	4a07      	ldr	r2, [pc, #28]	; (800ae9c <UART_SetConfig+0x118>)
 800ae7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae82:	095b      	lsrs	r3, r3, #5
 800ae84:	f003 020f 	and.w	r2, r3, #15
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	440a      	add	r2, r1
 800ae8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	40013800 	.word	0x40013800
 800ae9c:	51eb851f 	.word	0x51eb851f

0800aea0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aea4:	4904      	ldr	r1, [pc, #16]	; (800aeb8 <MX_FATFS_Init+0x18>)
 800aea6:	4805      	ldr	r0, [pc, #20]	; (800aebc <MX_FATFS_Init+0x1c>)
 800aea8:	f003 fadc 	bl	800e464 <FATFS_LinkDriver>
 800aeac:	4603      	mov	r3, r0
 800aeae:	461a      	mov	r2, r3
 800aeb0:	4b03      	ldr	r3, [pc, #12]	; (800aec0 <MX_FATFS_Init+0x20>)
 800aeb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aeb4:	bf00      	nop
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	20000e64 	.word	0x20000e64
 800aebc:	20000010 	.word	0x20000010
 800aec0:	20000e68 	.word	0x20000e68

0800aec4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aec4:	b480      	push	{r7}
 800aec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aec8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	46bd      	mov	sp, r7
 800aece:	bc80      	pop	{r7}
 800aed0:	4770      	bx	lr
	...

0800aed4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7f6 fb65 	bl	80015b0 <SD_disk_initialize>
 800aee6:	4603      	mov	r3, r0
 800aee8:	461a      	mov	r2, r3
 800aeea:	4b04      	ldr	r3, [pc, #16]	; (800aefc <USER_initialize+0x28>)
 800aeec:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aeee:	4b03      	ldr	r3, [pc, #12]	; (800aefc <USER_initialize+0x28>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	2000000d 	.word	0x2000000d

0800af00 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800af0a:	79fb      	ldrb	r3, [r7, #7]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7f6 fc39 	bl	8001784 <SD_disk_status>
 800af12:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	607a      	str	r2, [r7, #4]
 800af26:	603b      	str	r3, [r7, #0]
 800af28:	4603      	mov	r3, r0
 800af2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800af2c:	7bf8      	ldrb	r0, [r7, #15]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	f7f6 fc3a 	bl	80017ac <SD_disk_read>
 800af38:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	603b      	str	r3, [r7, #0]
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800af52:	7bf8      	ldrb	r0, [r7, #15]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	68b9      	ldr	r1, [r7, #8]
 800af5a:	f7f6 fc91 	bl	8001880 <SD_disk_write>
 800af5e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	603a      	str	r2, [r7, #0]
 800af72:	71fb      	strb	r3, [r7, #7]
 800af74:	460b      	mov	r3, r1
 800af76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800af78:	79b9      	ldrb	r1, [r7, #6]
 800af7a:	79fb      	ldrb	r3, [r7, #7]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	4618      	mov	r0, r3
 800af80:	f7f6 fd02 	bl	8001988 <SD_disk_ioctl>
 800af84:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800af86:	4618      	mov	r0, r3
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	4a08      	ldr	r2, [pc, #32]	; (800afc0 <disk_status+0x30>)
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	79fa      	ldrb	r2, [r7, #7]
 800afa8:	4905      	ldr	r1, [pc, #20]	; (800afc0 <disk_status+0x30>)
 800afaa:	440a      	add	r2, r1
 800afac:	7a12      	ldrb	r2, [r2, #8]
 800afae:	4610      	mov	r0, r2
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	200002cc 	.word	0x200002cc

0800afc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800afd2:	79fb      	ldrb	r3, [r7, #7]
 800afd4:	4a0d      	ldr	r2, [pc, #52]	; (800b00c <disk_initialize+0x48>)
 800afd6:	5cd3      	ldrb	r3, [r2, r3]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d111      	bne.n	800b000 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800afdc:	79fb      	ldrb	r3, [r7, #7]
 800afde:	4a0b      	ldr	r2, [pc, #44]	; (800b00c <disk_initialize+0x48>)
 800afe0:	2101      	movs	r1, #1
 800afe2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	4a09      	ldr	r2, [pc, #36]	; (800b00c <disk_initialize+0x48>)
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	79fa      	ldrb	r2, [r7, #7]
 800aff2:	4906      	ldr	r1, [pc, #24]	; (800b00c <disk_initialize+0x48>)
 800aff4:	440a      	add	r2, r1
 800aff6:	7a12      	ldrb	r2, [r2, #8]
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	200002cc 	.word	0x200002cc

0800b010 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b010:	b590      	push	{r4, r7, lr}
 800b012:	b087      	sub	sp, #28
 800b014:	af00      	add	r7, sp, #0
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	4603      	mov	r3, r0
 800b01e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b020:	7bfb      	ldrb	r3, [r7, #15]
 800b022:	4a0a      	ldr	r2, [pc, #40]	; (800b04c <disk_read+0x3c>)
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	689c      	ldr	r4, [r3, #8]
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	4a07      	ldr	r2, [pc, #28]	; (800b04c <disk_read+0x3c>)
 800b030:	4413      	add	r3, r2
 800b032:	7a18      	ldrb	r0, [r3, #8]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	68b9      	ldr	r1, [r7, #8]
 800b03a:	47a0      	blx	r4
 800b03c:	4603      	mov	r3, r0
 800b03e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b040:	7dfb      	ldrb	r3, [r7, #23]
}
 800b042:	4618      	mov	r0, r3
 800b044:	371c      	adds	r7, #28
 800b046:	46bd      	mov	sp, r7
 800b048:	bd90      	pop	{r4, r7, pc}
 800b04a:	bf00      	nop
 800b04c:	200002cc 	.word	0x200002cc

0800b050 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b050:	b590      	push	{r4, r7, lr}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <disk_write+0x3c>)
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	68dc      	ldr	r4, [r3, #12]
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	4a07      	ldr	r2, [pc, #28]	; (800b08c <disk_write+0x3c>)
 800b070:	4413      	add	r3, r2
 800b072:	7a18      	ldrb	r0, [r3, #8]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	68b9      	ldr	r1, [r7, #8]
 800b07a:	47a0      	blx	r4
 800b07c:	4603      	mov	r3, r0
 800b07e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b080:	7dfb      	ldrb	r3, [r7, #23]
}
 800b082:	4618      	mov	r0, r3
 800b084:	371c      	adds	r7, #28
 800b086:	46bd      	mov	sp, r7
 800b088:	bd90      	pop	{r4, r7, pc}
 800b08a:	bf00      	nop
 800b08c:	200002cc 	.word	0x200002cc

0800b090 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	603a      	str	r2, [r7, #0]
 800b09a:	71fb      	strb	r3, [r7, #7]
 800b09c:	460b      	mov	r3, r1
 800b09e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b0a0:	79fb      	ldrb	r3, [r7, #7]
 800b0a2:	4a09      	ldr	r2, [pc, #36]	; (800b0c8 <disk_ioctl+0x38>)
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	79fa      	ldrb	r2, [r7, #7]
 800b0ae:	4906      	ldr	r1, [pc, #24]	; (800b0c8 <disk_ioctl+0x38>)
 800b0b0:	440a      	add	r2, r1
 800b0b2:	7a10      	ldrb	r0, [r2, #8]
 800b0b4:	79b9      	ldrb	r1, [r7, #6]
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	4798      	blx	r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	200002cc 	.word	0x200002cc

0800b0cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800b0e0:	e007      	b.n	800b0f2 <mem_cpy+0x26>
		*d++ = *s++;
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	1c53      	adds	r3, r2, #1
 800b0e6:	613b      	str	r3, [r7, #16]
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	1c59      	adds	r1, r3, #1
 800b0ec:	6179      	str	r1, [r7, #20]
 800b0ee:	7812      	ldrb	r2, [r2, #0]
 800b0f0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	1e5a      	subs	r2, r3, #1
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1f2      	bne.n	800b0e2 <mem_cpy+0x16>
}
 800b0fc:	bf00      	nop
 800b0fe:	bf00      	nop
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	bc80      	pop	{r7}
 800b106:	4770      	bx	lr

0800b108 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b108:	b480      	push	{r7}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800b118:	e005      	b.n	800b126 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	617a      	str	r2, [r7, #20]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	b2d2      	uxtb	r2, r2
 800b124:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	1e5a      	subs	r2, r3, #1
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f4      	bne.n	800b11a <mem_set+0x12>
}
 800b130:	bf00      	nop
 800b132:	bf00      	nop
 800b134:	371c      	adds	r7, #28
 800b136:	46bd      	mov	sp, r7
 800b138:	bc80      	pop	{r7}
 800b13a:	4770      	bx	lr

0800b13c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800b13c:	b480      	push	{r7}
 800b13e:	b089      	sub	sp, #36	; 0x24
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	61fb      	str	r3, [r7, #28]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800b154:	bf00      	nop
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	1e5a      	subs	r2, r3, #1
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00d      	beq.n	800b17c <mem_cmp+0x40>
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	61fa      	str	r2, [r7, #28]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	4619      	mov	r1, r3
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	1c5a      	adds	r2, r3, #1
 800b16e:	61ba      	str	r2, [r7, #24]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	1acb      	subs	r3, r1, r3
 800b174:	617b      	str	r3, [r7, #20]
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0ec      	beq.n	800b156 <mem_cmp+0x1a>
	return r;
 800b17c:	697b      	ldr	r3, [r7, #20]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3724      	adds	r7, #36	; 0x24
 800b182:	46bd      	mov	sp, r7
 800b184:	bc80      	pop	{r7}
 800b186:	4770      	bx	lr

0800b188 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b192:	e002      	b.n	800b19a <chk_chr+0x12>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3301      	adds	r3, #1
 800b198:	607b      	str	r3, [r7, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d005      	beq.n	800b1ae <chk_chr+0x26>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d1f2      	bne.n	800b194 <chk_chr+0xc>
	return *str;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bc80      	pop	{r7}
 800b1ba:	4770      	bx	lr

0800b1bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60bb      	str	r3, [r7, #8]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e035      	b.n	800b23c <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 800b1d0:	492e      	ldr	r1, [pc, #184]	; (800b28c <chk_lock+0xd0>)
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	005b      	lsls	r3, r3, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	440b      	add	r3, r1
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d026      	beq.n	800b232 <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b1e4:	4929      	ldr	r1, [pc, #164]	; (800b28c <chk_lock+0xd0>)
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	005b      	lsls	r3, r3, #1
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d11c      	bne.n	800b236 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 800b1fc:	4923      	ldr	r1, [pc, #140]	; (800b28c <chk_lock+0xd0>)
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	4613      	mov	r3, r2
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	4413      	add	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	440b      	add	r3, r1
 800b20a:	3304      	adds	r3, #4
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b212:	429a      	cmp	r2, r3
 800b214:	d10f      	bne.n	800b236 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800b216:	491d      	ldr	r1, [pc, #116]	; (800b28c <chk_lock+0xd0>)
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4613      	mov	r3, r2
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	440b      	add	r3, r1
 800b224:	3308      	adds	r3, #8
 800b226:	881a      	ldrh	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d102      	bne.n	800b236 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800b230:	e007      	b.n	800b242 <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 800b232:	2301      	movs	r3, #1
 800b234:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3301      	adds	r3, #1
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d9c6      	bls.n	800b1d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b02      	cmp	r3, #2
 800b246:	d109      	bne.n	800b25c <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d102      	bne.n	800b254 <chk_lock+0x98>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b02      	cmp	r3, #2
 800b252:	d101      	bne.n	800b258 <chk_lock+0x9c>
 800b254:	2300      	movs	r3, #0
 800b256:	e013      	b.n	800b280 <chk_lock+0xc4>
 800b258:	2312      	movs	r3, #18
 800b25a:	e011      	b.n	800b280 <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10b      	bne.n	800b27a <chk_lock+0xbe>
 800b262:	490a      	ldr	r1, [pc, #40]	; (800b28c <chk_lock+0xd0>)
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	4613      	mov	r3, r2
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	4413      	add	r3, r2
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	440b      	add	r3, r1
 800b270:	330a      	adds	r3, #10
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b278:	d101      	bne.n	800b27e <chk_lock+0xc2>
 800b27a:	2310      	movs	r3, #16
 800b27c:	e000      	b.n	800b280 <chk_lock+0xc4>
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	bc80      	pop	{r7}
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	200000b4 	.word	0x200000b4

0800b290 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]
 800b29a:	e002      	b.n	800b2a2 <enq_lock+0x12>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	607b      	str	r3, [r7, #4]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d809      	bhi.n	800b2bc <enq_lock+0x2c>
 800b2a8:	490a      	ldr	r1, [pc, #40]	; (800b2d4 <enq_lock+0x44>)
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1ef      	bne.n	800b29c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	bf14      	ite	ne
 800b2c2:	2301      	movne	r3, #1
 800b2c4:	2300      	moveq	r3, #0
 800b2c6:	b2db      	uxtb	r3, r3
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	200000b4 	.word	0x200000b4

0800b2d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60fb      	str	r3, [r7, #12]
 800b2e6:	e028      	b.n	800b33a <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 800b2e8:	4952      	ldr	r1, [pc, #328]	; (800b434 <inc_lock+0x15c>)
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	4413      	add	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	440b      	add	r3, r1
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d119      	bne.n	800b334 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 800b300:	494c      	ldr	r1, [pc, #304]	; (800b434 <inc_lock+0x15c>)
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	4613      	mov	r3, r2
 800b306:	005b      	lsls	r3, r3, #1
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	3304      	adds	r3, #4
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800b316:	429a      	cmp	r2, r3
 800b318:	d10c      	bne.n	800b334 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 800b31a:	4946      	ldr	r1, [pc, #280]	; (800b434 <inc_lock+0x15c>)
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4613      	mov	r3, r2
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	4413      	add	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	440b      	add	r3, r1
 800b328:	3308      	adds	r3, #8
 800b32a:	881a      	ldrh	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800b330:	429a      	cmp	r2, r3
 800b332:	d006      	beq.n	800b342 <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d9d3      	bls.n	800b2e8 <inc_lock+0x10>
 800b340:	e000      	b.n	800b344 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800b342:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b02      	cmp	r3, #2
 800b348:	d142      	bne.n	800b3d0 <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	e002      	b.n	800b356 <inc_lock+0x7e>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3301      	adds	r3, #1
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d809      	bhi.n	800b370 <inc_lock+0x98>
 800b35c:	4935      	ldr	r1, [pc, #212]	; (800b434 <inc_lock+0x15c>)
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	4613      	mov	r3, r2
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	4413      	add	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	440b      	add	r3, r1
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1ef      	bne.n	800b350 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2b02      	cmp	r3, #2
 800b374:	d101      	bne.n	800b37a <inc_lock+0xa2>
 800b376:	2300      	movs	r3, #0
 800b378:	e057      	b.n	800b42a <inc_lock+0x152>
		Files[i].fs = dp->fs;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6819      	ldr	r1, [r3, #0]
 800b37e:	482d      	ldr	r0, [pc, #180]	; (800b434 <inc_lock+0x15c>)
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	4613      	mov	r3, r2
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	4413      	add	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4403      	add	r3, r0
 800b38c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6899      	ldr	r1, [r3, #8]
 800b392:	4828      	ldr	r0, [pc, #160]	; (800b434 <inc_lock+0x15c>)
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4613      	mov	r3, r2
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4403      	add	r3, r0
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	88d8      	ldrh	r0, [r3, #6]
 800b3a8:	4922      	ldr	r1, [pc, #136]	; (800b434 <inc_lock+0x15c>)
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	005b      	lsls	r3, r3, #1
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	440b      	add	r3, r1
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800b3bc:	491d      	ldr	r1, [pc, #116]	; (800b434 <inc_lock+0x15c>)
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	005b      	lsls	r3, r3, #1
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	440b      	add	r3, r1
 800b3ca:	330a      	adds	r3, #10
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00c      	beq.n	800b3f0 <inc_lock+0x118>
 800b3d6:	4917      	ldr	r1, [pc, #92]	; (800b434 <inc_lock+0x15c>)
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4413      	add	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	440b      	add	r3, r1
 800b3e4:	330a      	adds	r3, #10
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <inc_lock+0x118>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	e01c      	b.n	800b42a <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10b      	bne.n	800b40e <inc_lock+0x136>
 800b3f6:	490f      	ldr	r1, [pc, #60]	; (800b434 <inc_lock+0x15c>)
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	4413      	add	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	440b      	add	r3, r1
 800b404:	330a      	adds	r3, #10
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	3301      	adds	r3, #1
 800b40a:	b299      	uxth	r1, r3
 800b40c:	e001      	b.n	800b412 <inc_lock+0x13a>
 800b40e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b412:	4808      	ldr	r0, [pc, #32]	; (800b434 <inc_lock+0x15c>)
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4613      	mov	r3, r2
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4403      	add	r3, r0
 800b420:	330a      	adds	r3, #10
 800b422:	460a      	mov	r2, r1
 800b424:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3301      	adds	r3, #1
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	bc80      	pop	{r7}
 800b432:	4770      	bx	lr
 800b434:	200000b4 	.word	0x200000b4

0800b438 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3b01      	subs	r3, #1
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d82e      	bhi.n	800b4aa <dec_lock+0x72>
		n = Files[i].ctr;
 800b44c:	491b      	ldr	r1, [pc, #108]	; (800b4bc <dec_lock+0x84>)
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	4613      	mov	r3, r2
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	4413      	add	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	440b      	add	r3, r1
 800b45a:	330a      	adds	r3, #10
 800b45c:	881b      	ldrh	r3, [r3, #0]
 800b45e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b460:	89fb      	ldrh	r3, [r7, #14]
 800b462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b466:	d101      	bne.n	800b46c <dec_lock+0x34>
 800b468:	2300      	movs	r3, #0
 800b46a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800b46c:	89fb      	ldrh	r3, [r7, #14]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <dec_lock+0x40>
 800b472:	89fb      	ldrh	r3, [r7, #14]
 800b474:	3b01      	subs	r3, #1
 800b476:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b478:	4910      	ldr	r1, [pc, #64]	; (800b4bc <dec_lock+0x84>)
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	4613      	mov	r3, r2
 800b47e:	005b      	lsls	r3, r3, #1
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	440b      	add	r3, r1
 800b486:	330a      	adds	r3, #10
 800b488:	89fa      	ldrh	r2, [r7, #14]
 800b48a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b48c:	89fb      	ldrh	r3, [r7, #14]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d108      	bne.n	800b4a4 <dec_lock+0x6c>
 800b492:	490a      	ldr	r1, [pc, #40]	; (800b4bc <dec_lock+0x84>)
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	4613      	mov	r3, r2
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	4413      	add	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	440b      	add	r3, r1
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	737b      	strb	r3, [r7, #13]
 800b4a8:	e001      	b.n	800b4ae <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b4ae:	7b7b      	ldrb	r3, [r7, #13]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bc80      	pop	{r7}
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	200000b4 	.word	0x200000b4

0800b4c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	e016      	b.n	800b4fc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b4ce:	4910      	ldr	r1, [pc, #64]	; (800b510 <clear_lock+0x50>)
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	440b      	add	r3, r1
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d108      	bne.n	800b4f6 <clear_lock+0x36>
 800b4e4:	490a      	ldr	r1, [pc, #40]	; (800b510 <clear_lock+0x50>)
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	4413      	add	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	440b      	add	r3, r1
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d9e5      	bls.n	800b4ce <clear_lock+0xe>
	}
}
 800b502:	bf00      	nop
 800b504:	bf00      	nop
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	bc80      	pop	{r7}
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	200000b4 	.word	0x200000b4

0800b514 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800b526:	2b00      	cmp	r3, #0
 800b528:	d038      	beq.n	800b59c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800b530:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b538:	6879      	ldr	r1, [r7, #4]
 800b53a:	2301      	movs	r3, #1
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	f7ff fd87 	bl	800b050 <disk_write>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <sync_window+0x3a>
			res = FR_DISK_ERR;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
 800b54c:	e026      	b.n	800b59c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	1ad2      	subs	r2, r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b566:	429a      	cmp	r2, r3
 800b568:	d218      	bcs.n	800b59c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800b570:	613b      	str	r3, [r7, #16]
 800b572:	e010      	b.n	800b596 <sync_window+0x82>
					wsect += fs->fsize;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	4413      	add	r3, r2
 800b57e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	2301      	movs	r3, #1
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	f7ff fd60 	bl	800b050 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	3b01      	subs	r3, #1
 800b594:	613b      	str	r3, [r7, #16]
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d8eb      	bhi.n	800b574 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3718      	adds	r7, #24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d01b      	beq.n	800b5f8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7ff ffa7 	bl	800b514 <sync_window>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d113      	bne.n	800b5f8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b5d6:	6879      	ldr	r1, [r7, #4]
 800b5d8:	2301      	movs	r3, #1
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	f7ff fd18 	bl	800b010 <disk_read>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d004      	beq.n	800b5f0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ea:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff ff82 	bl	800b514 <sync_window>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	2b00      	cmp	r3, #0
 800b618:	f040 809c 	bne.w	800b754 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b622:	2b03      	cmp	r3, #3
 800b624:	f040 8089 	bne.w	800b73a <sync_fs+0x138>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800b62e:	2b01      	cmp	r3, #1
 800b630:	f040 8083 	bne.w	800b73a <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b63c:	461a      	mov	r2, r3
 800b63e:	2100      	movs	r1, #0
 800b640:	f7ff fd62 	bl	800b108 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2255      	movs	r2, #85	; 0x55
 800b648:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	22aa      	movs	r2, #170	; 0xaa
 800b650:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2252      	movs	r2, #82	; 0x52
 800b658:	701a      	strb	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2252      	movs	r2, #82	; 0x52
 800b65e:	705a      	strb	r2, [r3, #1]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2261      	movs	r2, #97	; 0x61
 800b664:	709a      	strb	r2, [r3, #2]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2241      	movs	r2, #65	; 0x41
 800b66a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2272      	movs	r2, #114	; 0x72
 800b670:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2272      	movs	r2, #114	; 0x72
 800b678:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2241      	movs	r2, #65	; 0x41
 800b680:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2261      	movs	r2, #97	; 0x61
 800b688:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b692:	b2da      	uxtb	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b6b4:	0c1b      	lsrs	r3, r3, #16
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b6c4:	0e1b      	lsrs	r3, r3, #24
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	0a1b      	lsrs	r3, r3, #8
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b6f6:	0c1b      	lsrs	r3, r3, #16
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b706:	0e1b      	lsrs	r3, r3, #24
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b724:	6879      	ldr	r1, [r7, #4]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800b72c:	2301      	movs	r3, #1
 800b72e:	f7ff fc8f 	bl	800b050 <disk_write>
			fs->fsi_flag = 0;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800b740:	2200      	movs	r2, #0
 800b742:	2100      	movs	r1, #0
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff fca3 	bl	800b090 <disk_ioctl>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <sync_fs+0x152>
			res = FR_DISK_ERR;
 800b750:	2301      	movs	r3, #1
 800b752:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b754:	7bfb      	ldrb	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	3b02      	subs	r3, #2
 800b76c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b774:	3b02      	subs	r3, #2
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d301      	bcc.n	800b780 <clust2sect+0x22>
 800b77c:	2300      	movs	r3, #0
 800b77e:	e00a      	b.n	800b796 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b786:	461a      	mov	r2, r3
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	fb03 f202 	mul.w	r2, r3, r2
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800b794:	4413      	add	r3, r2
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bc80      	pop	{r7}
 800b79e:	4770      	bx	lr

0800b7a0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d905      	bls.n	800b7bc <get_fat+0x1c>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d302      	bcc.n	800b7c2 <get_fat+0x22>
		val = 1;	/* Internal error */
 800b7bc:	2301      	movs	r3, #1
 800b7be:	617b      	str	r3, [r7, #20]
 800b7c0:	e0d7      	b.n	800b972 <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	f000 808f 	beq.w	800b8f2 <get_fat+0x152>
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	f300 80c2 	bgt.w	800b95e <get_fat+0x1be>
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d002      	beq.n	800b7e4 <get_fat+0x44>
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d059      	beq.n	800b896 <get_fat+0xf6>
 800b7e2:	e0bc      	b.n	800b95e <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	085b      	lsrs	r3, r3, #1
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b7fe:	4619      	mov	r1, r3
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	fbb3 f3f1 	udiv	r3, r3, r1
 800b806:	4413      	add	r3, r2
 800b808:	4619      	mov	r1, r3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff fecb 	bl	800b5a6 <move_window>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	f040 80a6 	bne.w	800b964 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	60fa      	str	r2, [r7, #12]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b824:	fbb3 f1f2 	udiv	r1, r3, r2
 800b828:	fb02 f201 	mul.w	r2, r2, r1
 800b82c:	1a9b      	subs	r3, r3, r2
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	5cd3      	ldrb	r3, [r2, r3]
 800b832:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b840:	4619      	mov	r1, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	fbb3 f3f1 	udiv	r3, r3, r1
 800b848:	4413      	add	r3, r2
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7ff feaa 	bl	800b5a6 <move_window>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	f040 8087 	bne.w	800b968 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b860:	461a      	mov	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	fbb3 f1f2 	udiv	r1, r3, r2
 800b868:	fb02 f201 	mul.w	r2, r2, r1
 800b86c:	1a9b      	subs	r3, r3, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	5cd3      	ldrb	r3, [r2, r3]
 800b872:	021b      	lsls	r3, r3, #8
 800b874:	461a      	mov	r2, r3
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	4313      	orrs	r3, r2
 800b87a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <get_fat+0xec>
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	091b      	lsrs	r3, r3, #4
 800b88a:	e002      	b.n	800b892 <get_fat+0xf2>
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b892:	617b      	str	r3, [r7, #20]
			break;
 800b894:	e06d      	b.n	800b972 <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b8a2:	085b      	lsrs	r3, r3, #1
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8ae:	4413      	add	r3, r2
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff fe77 	bl	800b5a6 <move_window>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d156      	bne.n	800b96c <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	005b      	lsls	r3, r3, #1
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b8c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8cc:	fb02 f201 	mul.w	r2, r2, r1
 800b8d0:	1a9b      	subs	r3, r3, r2
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	021b      	lsls	r3, r3, #8
 800b8e0:	b21a      	sxth	r2, r3
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	b21b      	sxth	r3, r3
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	b21b      	sxth	r3, r3
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	617b      	str	r3, [r7, #20]
			break;
 800b8f0:	e03f      	b.n	800b972 <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b8fe:	089b      	lsrs	r3, r3, #2
 800b900:	b29b      	uxth	r3, r3
 800b902:	4619      	mov	r1, r3
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	fbb3 f3f1 	udiv	r3, r3, r1
 800b90a:	4413      	add	r3, r2
 800b90c:	4619      	mov	r1, r3
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff fe49 	bl	800b5a6 <move_window>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d12a      	bne.n	800b970 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b924:	fbb3 f1f2 	udiv	r1, r3, r2
 800b928:	fb02 f201 	mul.w	r2, r2, r1
 800b92c:	1a9b      	subs	r3, r3, r2
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	4413      	add	r3, r2
 800b932:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	3303      	adds	r3, #3
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	061a      	lsls	r2, r3, #24
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	3302      	adds	r3, #2
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	041b      	lsls	r3, r3, #16
 800b944:	4313      	orrs	r3, r2
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	3201      	adds	r2, #1
 800b94a:	7812      	ldrb	r2, [r2, #0]
 800b94c:	0212      	lsls	r2, r2, #8
 800b94e:	4313      	orrs	r3, r2
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	7812      	ldrb	r2, [r2, #0]
 800b954:	4313      	orrs	r3, r2
 800b956:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b95a:	617b      	str	r3, [r7, #20]
			break;
 800b95c:	e009      	b.n	800b972 <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 800b95e:	2301      	movs	r3, #1
 800b960:	617b      	str	r3, [r7, #20]
 800b962:	e006      	b.n	800b972 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b964:	bf00      	nop
 800b966:	e004      	b.n	800b972 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b968:	bf00      	nop
 800b96a:	e002      	b.n	800b972 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b96c:	bf00      	nop
 800b96e:	e000      	b.n	800b972 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b970:	bf00      	nop
		}
	}

	return val;
 800b972:	697b      	ldr	r3, [r7, #20]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d905      	bls.n	800b99a <put_fat+0x1e>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	429a      	cmp	r2, r3
 800b998:	d302      	bcc.n	800b9a0 <put_fat+0x24>
		res = FR_INT_ERR;
 800b99a:	2302      	movs	r3, #2
 800b99c:	77fb      	strb	r3, [r7, #31]
 800b99e:	e128      	b.n	800bbf2 <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	f000 80c3 	beq.w	800bb32 <put_fat+0x1b6>
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	f300 8116 	bgt.w	800bbde <put_fat+0x262>
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d003      	beq.n	800b9be <put_fat+0x42>
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	f000 8087 	beq.w	800baca <put_fat+0x14e>
 800b9bc:	e10f      	b.n	800bbde <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	617b      	str	r3, [r7, #20]
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	085b      	lsrs	r3, r3, #1
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b9d8:	4619      	mov	r1, r3
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9e0:	4413      	add	r3, r2
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff fdde 	bl	800b5a6 <move_window>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9ee:	7ffb      	ldrb	r3, [r7, #31]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f040 80f7 	bne.w	800bbe4 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	617a      	str	r2, [r7, #20]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ba02:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba06:	fb02 f201 	mul.w	r2, r2, r1
 800ba0a:	1a9b      	subs	r3, r3, r2
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	4413      	add	r3, r2
 800ba10:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00d      	beq.n	800ba38 <put_fat+0xbc>
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	b25b      	sxtb	r3, r3
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	b25a      	sxtb	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	011b      	lsls	r3, r3, #4
 800ba2e:	b25b      	sxtb	r3, r3
 800ba30:	4313      	orrs	r3, r2
 800ba32:	b25b      	sxtb	r3, r3
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	e001      	b.n	800ba3c <put_fat+0xc0>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	69ba      	ldr	r2, [r7, #24]
 800ba3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ba54:	4619      	mov	r1, r3
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba5c:	4413      	add	r3, r2
 800ba5e:	4619      	mov	r1, r3
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f7ff fda0 	bl	800b5a6 <move_window>
 800ba66:	4603      	mov	r3, r0
 800ba68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba6a:	7ffb      	ldrb	r3, [r7, #31]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 80bb 	bne.w	800bbe8 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ba78:	461a      	mov	r2, r3
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba80:	fb02 f201 	mul.w	r2, r2, r1
 800ba84:	1a9b      	subs	r3, r3, r2
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	4413      	add	r3, r2
 800ba8a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <put_fat+0x122>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	091b      	lsrs	r3, r3, #4
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	e00e      	b.n	800babc <put_fat+0x140>
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	b25b      	sxtb	r3, r3
 800baa4:	f023 030f 	bic.w	r3, r3, #15
 800baa8:	b25a      	sxtb	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	0a1b      	lsrs	r3, r3, #8
 800baae:	b25b      	sxtb	r3, r3
 800bab0:	f003 030f 	and.w	r3, r3, #15
 800bab4:	b25b      	sxtb	r3, r3
 800bab6:	4313      	orrs	r3, r2
 800bab8:	b25b      	sxtb	r3, r3
 800baba:	b2db      	uxtb	r3, r3
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800bac8:	e093      	b.n	800bbf2 <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bad6:	085b      	lsrs	r3, r3, #1
 800bad8:	b29b      	uxth	r3, r3
 800bada:	4619      	mov	r1, r3
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	fbb3 f3f1 	udiv	r3, r3, r1
 800bae2:	4413      	add	r3, r2
 800bae4:	4619      	mov	r1, r3
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f7ff fd5d 	bl	800b5a6 <move_window>
 800baec:	4603      	mov	r3, r0
 800baee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800baf0:	7ffb      	ldrb	r3, [r7, #31]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d17a      	bne.n	800bbec <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800bb00:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb04:	fb02 f201 	mul.w	r2, r2, r1
 800bb08:	1a9b      	subs	r3, r3, r2
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	0a1b      	lsrs	r3, r3, #8
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	3301      	adds	r3, #1
 800bb24:	b2d2      	uxtb	r2, r2
 800bb26:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800bb30:	e05f      	b.n	800bbf2 <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bb3e:	089b      	lsrs	r3, r3, #2
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	4619      	mov	r1, r3
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb4a:	4413      	add	r3, r2
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f7ff fd29 	bl	800b5a6 <move_window>
 800bb54:	4603      	mov	r3, r0
 800bb56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb58:	7ffb      	ldrb	r3, [r7, #31]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d148      	bne.n	800bbf0 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800bb68:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb6c:	fb02 f201 	mul.w	r2, r2, r1
 800bb70:	1a9b      	subs	r3, r3, r2
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	4413      	add	r3, r2
 800bb76:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	3303      	adds	r3, #3
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	061a      	lsls	r2, r3, #24
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	3302      	adds	r3, #2
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	041b      	lsls	r3, r3, #16
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	69ba      	ldr	r2, [r7, #24]
 800bb8c:	3201      	adds	r2, #1
 800bb8e:	7812      	ldrb	r2, [r2, #0]
 800bb90:	0212      	lsls	r2, r2, #8
 800bb92:	4313      	orrs	r3, r2
 800bb94:	69ba      	ldr	r2, [r7, #24]
 800bb96:	7812      	ldrb	r2, [r2, #0]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	0a1b      	lsrs	r3, r3, #8
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	0c1a      	lsrs	r2, r3, #16
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	3302      	adds	r3, #2
 800bbc4:	b2d2      	uxtb	r2, r2
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	0e1a      	lsrs	r2, r3, #24
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	3303      	adds	r3, #3
 800bbd0:	b2d2      	uxtb	r2, r2
 800bbd2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800bbdc:	e009      	b.n	800bbf2 <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800bbde:	2302      	movs	r3, #2
 800bbe0:	77fb      	strb	r3, [r7, #31]
 800bbe2:	e006      	b.n	800bbf2 <put_fat+0x276>
			if (res != FR_OK) break;
 800bbe4:	bf00      	nop
 800bbe6:	e004      	b.n	800bbf2 <put_fat+0x276>
			if (res != FR_OK) break;
 800bbe8:	bf00      	nop
 800bbea:	e002      	b.n	800bbf2 <put_fat+0x276>
			if (res != FR_OK) break;
 800bbec:	bf00      	nop
 800bbee:	e000      	b.n	800bbf2 <put_fat+0x276>
			if (res != FR_OK) break;
 800bbf0:	bf00      	nop
		}
	}

	return res;
 800bbf2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d905      	bls.n	800bc18 <remove_chain+0x1c>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d302      	bcc.n	800bc1e <remove_chain+0x22>
		res = FR_INT_ERR;
 800bc18:	2302      	movs	r3, #2
 800bc1a:	73fb      	strb	r3, [r7, #15]
 800bc1c:	e043      	b.n	800bca6 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bc22:	e036      	b.n	800bc92 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff fdba 	bl	800b7a0 <get_fat>
 800bc2c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d035      	beq.n	800bca0 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d102      	bne.n	800bc40 <remove_chain+0x44>
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	73fb      	strb	r3, [r7, #15]
 800bc3e:	e032      	b.n	800bca6 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc46:	d102      	bne.n	800bc4e <remove_chain+0x52>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	73fb      	strb	r3, [r7, #15]
 800bc4c:	e02b      	b.n	800bca6 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800bc4e:	2200      	movs	r2, #0
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff fe92 	bl	800b97c <put_fat>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d120      	bne.n	800bca4 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6c:	d00f      	beq.n	800bc8e <remove_chain+0x92>
				fs->free_clust++;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800bc82:	f043 0301 	orr.w	r3, r3, #1
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d3c2      	bcc.n	800bc24 <remove_chain+0x28>
 800bc9e:	e002      	b.n	800bca6 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800bca0:	bf00      	nop
 800bca2:	e000      	b.n	800bca6 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800bca4:	bf00      	nop
		}
	}

	return res;
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10f      	bne.n	800bce0 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800bcc6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d005      	beq.n	800bcda <create_chain+0x2a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d31c      	bcc.n	800bd14 <create_chain+0x64>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	613b      	str	r3, [r7, #16]
 800bcde:	e019      	b.n	800bd14 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff fd5c 	bl	800b7a0 <get_fat>
 800bce8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d801      	bhi.n	800bcf4 <create_chain+0x44>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e076      	b.n	800bde2 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfa:	d101      	bne.n	800bd00 <create_chain+0x50>
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	e070      	b.n	800bde2 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d201      	bcs.n	800bd10 <create_chain+0x60>
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	e068      	b.n	800bde2 <create_chain+0x132>
		scl = clst;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d307      	bcc.n	800bd3a <create_chain+0x8a>
			ncl = 2;
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d901      	bls.n	800bd3a <create_chain+0x8a>
 800bd36:	2300      	movs	r3, #0
 800bd38:	e053      	b.n	800bde2 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800bd3a:	6979      	ldr	r1, [r7, #20]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff fd2f 	bl	800b7a0 <get_fat>
 800bd42:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00e      	beq.n	800bd68 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd50:	d002      	beq.n	800bd58 <create_chain+0xa8>
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d101      	bne.n	800bd5c <create_chain+0xac>
			return cs;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	e042      	b.n	800bde2 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d1d9      	bne.n	800bd18 <create_chain+0x68>
 800bd64:	2300      	movs	r3, #0
 800bd66:	e03c      	b.n	800bde2 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800bd68:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800bd6a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800bd6e:	6979      	ldr	r1, [r7, #20]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f7ff fe03 	bl	800b97c <put_fat>
 800bd76:	4603      	mov	r3, r0
 800bd78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d109      	bne.n	800bd94 <create_chain+0xe4>
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d006      	beq.n	800bd94 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff fdf6 	bl	800b97c <put_fat>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d11a      	bne.n	800bdd0 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800bda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdac:	d018      	beq.n	800bde0 <create_chain+0x130>
			fs->free_clust--;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800bdb4:	1e5a      	subs	r2, r3, #1
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800bdc2:	f043 0301 	orr.w	r3, r3, #1
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800bdce:	e007      	b.n	800bde0 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d102      	bne.n	800bddc <create_chain+0x12c>
 800bdd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdda:	e000      	b.n	800bdde <create_chain+0x12e>
 800bddc:	2301      	movs	r3, #1
 800bdde:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800bde0:	697b      	ldr	r3, [r7, #20]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b087      	sub	sp, #28
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800be04:	461a      	mov	r2, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	fbb3 f3f2 	udiv	r3, r3, r2
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	6812      	ldr	r2, [r2, #0]
 800be10:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800be14:	fbb3 f3f2 	udiv	r3, r3, r2
 800be18:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	1d1a      	adds	r2, r3, #4
 800be1e:	613a      	str	r2, [r7, #16]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d101      	bne.n	800be2e <clmt_clust+0x44>
 800be2a:	2300      	movs	r3, #0
 800be2c:	e010      	b.n	800be50 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	429a      	cmp	r2, r3
 800be34:	d307      	bcc.n	800be46 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	617b      	str	r3, [r7, #20]
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	3304      	adds	r3, #4
 800be42:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800be44:	e7e9      	b.n	800be1a <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 800be46:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	4413      	add	r3, r2
}
 800be50:	4618      	mov	r0, r3
 800be52:	371c      	adds	r7, #28
 800be54:	46bd      	mov	sp, r7
 800be56:	bc80      	pop	{r7}
 800be58:	4770      	bx	lr

0800be5a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b086      	sub	sp, #24
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	b29a      	uxth	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d006      	beq.n	800be86 <dir_sdi+0x2c>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	429a      	cmp	r2, r3
 800be84:	d301      	bcc.n	800be8a <dir_sdi+0x30>
		return FR_INT_ERR;
 800be86:	2302      	movs	r3, #2
 800be88:	e082      	b.n	800bf90 <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10a      	bne.n	800bea6 <dir_sdi+0x4c>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d104      	bne.n	800bea6 <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800bea4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10f      	bne.n	800becc <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800beb4:	461a      	mov	r2, r3
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	4293      	cmp	r3, r2
 800beba:	d301      	bcc.n	800bec0 <dir_sdi+0x66>
			return FR_INT_ERR;
 800bebc:	2302      	movs	r3, #2
 800bebe:	e067      	b.n	800bf90 <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800bec8:	613b      	str	r3, [r7, #16]
 800beca:	e036      	b.n	800bf3a <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bed4:	095b      	lsrs	r3, r3, #5
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	461a      	mov	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800bee2:	fb03 f302 	mul.w	r3, r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800bee8:	e01c      	b.n	800bf24 <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6979      	ldr	r1, [r7, #20]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fc55 	bl	800b7a0 <get_fat>
 800bef6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befe:	d101      	bne.n	800bf04 <dir_sdi+0xaa>
 800bf00:	2301      	movs	r3, #1
 800bf02:	e045      	b.n	800bf90 <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d906      	bls.n	800bf18 <dir_sdi+0xbe>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d301      	bcc.n	800bf1c <dir_sdi+0xc2>
				return FR_INT_ERR;
 800bf18:	2302      	movs	r3, #2
 800bf1a:	e039      	b.n	800bf90 <dir_sdi+0x136>
			idx -= ic;
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d2de      	bcs.n	800beea <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6979      	ldr	r1, [r7, #20]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7ff fc13 	bl	800b75e <clust2sect>
 800bf38:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <dir_sdi+0xf0>
 800bf46:	2302      	movs	r3, #2
 800bf48:	e022      	b.n	800bf90 <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bf52:	095b      	lsrs	r3, r3, #5
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	461a      	mov	r2, r3
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	441a      	add	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bf74:	095b      	lsrs	r3, r3, #5
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	461a      	mov	r2, r3
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf80:	fb02 f201 	mul.w	r2, r2, r1
 800bf84:	1a9b      	subs	r3, r3, r2
 800bf86:	015b      	lsls	r3, r3, #5
 800bf88:	18c2      	adds	r2, r0, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bf98:	b590      	push	{r4, r7, lr}
 800bf9a:	b087      	sub	sp, #28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	88db      	ldrh	r3, [r3, #6]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <dir_next+0x22>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <dir_next+0x26>
		return FR_NO_FILE;
 800bfba:	2304      	movs	r3, #4
 800bfbc:	e0e2      	b.n	800c184 <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bfc6:	095b      	lsrs	r3, r3, #5
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	461a      	mov	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfd2:	fb02 f201 	mul.w	r2, r2, r1
 800bfd6:	1a9b      	subs	r3, r3, r2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f040 80ba 	bne.w	800c152 <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	1c5a      	adds	r2, r3, #1
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10a      	bne.n	800c006 <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800bff8:	461a      	mov	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	4293      	cmp	r3, r2
 800bffe:	f0c0 80a8 	bcc.w	800c152 <dir_next+0x1ba>
				return FR_NO_FILE;
 800c002:	2304      	movs	r3, #4
 800c004:	e0be      	b.n	800c184 <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c00e:	095b      	lsrs	r3, r3, #5
 800c010:	b29b      	uxth	r3, r3
 800c012:	461a      	mov	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	fbb3 f3f2 	udiv	r3, r3, r2
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	6812      	ldr	r2, [r2, #0]
 800c01e:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c022:	3a01      	subs	r2, #1
 800c024:	4013      	ands	r3, r2
 800c026:	2b00      	cmp	r3, #0
 800c028:	f040 8093 	bne.w	800c152 <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f7ff fbb2 	bl	800b7a0 <get_fat>
 800c03c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d801      	bhi.n	800c048 <dir_next+0xb0>
 800c044:	2302      	movs	r3, #2
 800c046:	e09d      	b.n	800c184 <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04e:	d101      	bne.n	800c054 <dir_next+0xbc>
 800c050:	2301      	movs	r3, #1
 800c052:	e097      	b.n	800c184 <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800c05c:	697a      	ldr	r2, [r7, #20]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d36b      	bcc.n	800c13a <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d101      	bne.n	800c06c <dir_next+0xd4>
 800c068:	2304      	movs	r3, #4
 800c06a:	e08b      	b.n	800c184 <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f7ff fe1a 	bl	800bcb0 <create_chain>
 800c07c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <dir_next+0xf0>
 800c084:	2307      	movs	r3, #7
 800c086:	e07d      	b.n	800c184 <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d101      	bne.n	800c092 <dir_next+0xfa>
 800c08e:	2302      	movs	r3, #2
 800c090:	e078      	b.n	800c184 <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c098:	d101      	bne.n	800c09e <dir_next+0x106>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e072      	b.n	800c184 <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fa36 	bl	800b514 <sync_window>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <dir_next+0x11a>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e068      	b.n	800c184 <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	f7ff f820 	bl	800b108 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681c      	ldr	r4, [r3, #0]
 800c0d0:	6979      	ldr	r1, [r7, #20]
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	f7ff fb43 	bl	800b75e <clust2sect>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c0de:	2300      	movs	r3, #0
 800c0e0:	613b      	str	r3, [r7, #16]
 800c0e2:	e018      	b.n	800c116 <dir_next+0x17e>
						dp->fs->wflag = 1;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff fa0e 	bl	800b514 <sync_window>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <dir_next+0x16a>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e040      	b.n	800c184 <dir_next+0x1ec>
						dp->fs->winsect++;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c10a:	3201      	adds	r2, #1
 800c10c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	3301      	adds	r3, #1
 800c114:	613b      	str	r3, [r7, #16]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c11e:	461a      	mov	r2, r3
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	4293      	cmp	r3, r2
 800c124:	d3de      	bcc.n	800c0e4 <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	1a8a      	subs	r2, r1, r2
 800c136:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6979      	ldr	r1, [r7, #20]
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff fb09 	bl	800b75e <clust2sect>
 800c14c:	4602      	mov	r2, r0
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	b29a      	uxth	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4618      	mov	r0, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c168:	095b      	lsrs	r3, r3, #5
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	461a      	mov	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	fbb3 f1f2 	udiv	r1, r3, r2
 800c174:	fb02 f201 	mul.w	r2, r2, r1
 800c178:	1a9b      	subs	r3, r3, r2
 800c17a:	015b      	lsls	r3, r3, #5
 800c17c:	18c2      	adds	r2, r0, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	371c      	adds	r7, #28
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd90      	pop	{r4, r7, pc}

0800c18c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800c196:	2100      	movs	r1, #0
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7ff fe5e 	bl	800be5a <dir_sdi>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1a2:	7bfb      	ldrb	r3, [r7, #15]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d12d      	bne.n	800c204 <dir_alloc+0x78>
		n = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	f7ff f9f5 	bl	800b5a6 <move_window>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d11d      	bne.n	800c202 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	2be5      	cmp	r3, #229	; 0xe5
 800c1ce:	d004      	beq.n	800c1da <dir_alloc+0x4e>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d107      	bne.n	800c1ea <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	60bb      	str	r3, [r7, #8]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d102      	bne.n	800c1ee <dir_alloc+0x62>
 800c1e8:	e00c      	b.n	800c204 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff fed1 	bl	800bf98 <dir_next>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0d5      	beq.n	800c1ac <dir_alloc+0x20>
 800c200:	e000      	b.n	800c204 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800c202:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c204:	7bfb      	ldrb	r3, [r7, #15]
 800c206:	2b04      	cmp	r3, #4
 800c208:	d101      	bne.n	800c20e <dir_alloc+0x82>
 800c20a:	2307      	movs	r3, #7
 800c20c:	73fb      	strb	r3, [r7, #15]
	return res;
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	331b      	adds	r3, #27
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	021b      	lsls	r3, r3, #8
 800c22a:	b21a      	sxth	r2, r3
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	331a      	adds	r3, #26
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	b21b      	sxth	r3, r3
 800c234:	4313      	orrs	r3, r2
 800c236:	b21b      	sxth	r3, r3
 800c238:	b29b      	uxth	r3, r3
 800c23a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800c242:	2b03      	cmp	r3, #3
 800c244:	d10f      	bne.n	800c266 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	3315      	adds	r3, #21
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	b21a      	sxth	r2, r3
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	3314      	adds	r3, #20
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	b21b      	sxth	r3, r3
 800c258:	4313      	orrs	r3, r2
 800c25a:	b21b      	sxth	r3, r3
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	041b      	lsls	r3, r3, #16
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	4313      	orrs	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]

	return cl;
 800c266:	68fb      	ldr	r3, [r7, #12]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bc80      	pop	{r7}
 800c270:	4770      	bx	lr

0800c272 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800c272:	b480      	push	{r7}
 800c274:	b083      	sub	sp, #12
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	331a      	adds	r3, #26
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	b2d2      	uxtb	r2, r2
 800c284:	701a      	strb	r2, [r3, #0]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	b29b      	uxth	r3, r3
 800c28a:	0a1b      	lsrs	r3, r3, #8
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	331b      	adds	r3, #27
 800c292:	b2d2      	uxtb	r2, r2
 800c294:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	0c1a      	lsrs	r2, r3, #16
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3314      	adds	r3, #20
 800c29e:	b2d2      	uxtb	r2, r2
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	0c1b      	lsrs	r3, r3, #16
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	0a1b      	lsrs	r3, r3, #8
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3315      	adds	r3, #21
 800c2b0:	b2d2      	uxtb	r2, r2
 800c2b2:	701a      	strb	r2, [r3, #0]
}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bc80      	pop	{r7}
 800c2bc:	4770      	bx	lr
	...

0800c2c0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2d2:	1e5a      	subs	r2, r3, #1
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4413      	add	r3, r2
 800c2de:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	613b      	str	r3, [r7, #16]
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800c2e8:	4a2b      	ldr	r2, [pc, #172]	; (800c398 <cmp_lfn+0xd8>)
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	021b      	lsls	r3, r3, #8
 800c2fa:	b21a      	sxth	r2, r3
 800c2fc:	4926      	ldr	r1, [pc, #152]	; (800c398 <cmp_lfn+0xd8>)
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	440b      	add	r3, r1
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	4619      	mov	r1, r3
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	440b      	add	r3, r1
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	b21b      	sxth	r3, r3
 800c30e:	4313      	orrs	r3, r2
 800c310:	b21b      	sxth	r3, r3
 800c312:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800c314:	89fb      	ldrh	r3, [r7, #14]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d019      	beq.n	800c34e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800c31a:	89bb      	ldrh	r3, [r7, #12]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f002 f8eb 	bl	800e4f8 <ff_wtoupper>
 800c322:	4603      	mov	r3, r0
 800c324:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2bfe      	cmp	r3, #254	; 0xfe
 800c32a:	d80e      	bhi.n	800c34a <cmp_lfn+0x8a>
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	1c5a      	adds	r2, r3, #1
 800c330:	617a      	str	r2, [r7, #20]
 800c332:	005b      	lsls	r3, r3, #1
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	4413      	add	r3, r2
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f002 f8dc 	bl	800e4f8 <ff_wtoupper>
 800c340:	4603      	mov	r3, r0
 800c342:	461a      	mov	r2, r3
 800c344:	89fb      	ldrh	r3, [r7, #14]
 800c346:	4293      	cmp	r3, r2
 800c348:	d008      	beq.n	800c35c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800c34a:	2300      	movs	r3, #0
 800c34c:	e01f      	b.n	800c38e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800c34e:	89bb      	ldrh	r3, [r7, #12]
 800c350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c354:	4293      	cmp	r3, r2
 800c356:	d001      	beq.n	800c35c <cmp_lfn+0x9c>
 800c358:	2300      	movs	r3, #0
 800c35a:	e018      	b.n	800c38e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	3301      	adds	r3, #1
 800c360:	613b      	str	r3, [r7, #16]
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	2b0c      	cmp	r3, #12
 800c366:	d9bf      	bls.n	800c2e8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00b      	beq.n	800c38c <cmp_lfn+0xcc>
 800c374:	89fb      	ldrh	r3, [r7, #14]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d008      	beq.n	800c38c <cmp_lfn+0xcc>
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	4413      	add	r3, r2
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d001      	beq.n	800c38c <cmp_lfn+0xcc>
		return 0;
 800c388:	2300      	movs	r3, #0
 800c38a:	e000      	b.n	800c38e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800c38c:	2301      	movs	r3, #1
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	0800f04c 	.word	0x0800f04c

0800c39c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b089      	sub	sp, #36	; 0x24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	71fb      	strb	r3, [r7, #7]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	330d      	adds	r3, #13
 800c3b6:	79ba      	ldrb	r2, [r7, #6]
 800c3b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	330b      	adds	r3, #11
 800c3be:	220f      	movs	r2, #15
 800c3c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	330c      	adds	r3, #12
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	331a      	adds	r3, #26
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	701a      	strb	r2, [r3, #0]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	331b      	adds	r3, #27
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800c3da:	79fb      	ldrb	r3, [r7, #7]
 800c3dc:	1e5a      	subs	r2, r3, #1
 800c3de:	4613      	mov	r3, r2
 800c3e0:	005b      	lsls	r3, r3, #1
 800c3e2:	4413      	add	r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	4413      	add	r3, r2
 800c3e8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	82fb      	strh	r3, [r7, #22]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800c3f2:	8afb      	ldrh	r3, [r7, #22]
 800c3f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d007      	beq.n	800c40c <fit_lfn+0x70>
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	61fa      	str	r2, [r7, #28]
 800c402:	005b      	lsls	r3, r3, #1
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	4413      	add	r3, r2
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800c40c:	4a1c      	ldr	r2, [pc, #112]	; (800c480 <fit_lfn+0xe4>)
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	4413      	add	r3, r2
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	461a      	mov	r2, r3
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	4413      	add	r3, r2
 800c41a:	8afa      	ldrh	r2, [r7, #22]
 800c41c:	b2d2      	uxtb	r2, r2
 800c41e:	701a      	strb	r2, [r3, #0]
 800c420:	8afb      	ldrh	r3, [r7, #22]
 800c422:	0a1b      	lsrs	r3, r3, #8
 800c424:	b299      	uxth	r1, r3
 800c426:	4a16      	ldr	r2, [pc, #88]	; (800c480 <fit_lfn+0xe4>)
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	4413      	add	r3, r2
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	3301      	adds	r3, #1
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	4413      	add	r3, r2
 800c434:	b2ca      	uxtb	r2, r1
 800c436:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800c438:	8afb      	ldrh	r3, [r7, #22]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d102      	bne.n	800c444 <fit_lfn+0xa8>
 800c43e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c442:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	3301      	adds	r3, #1
 800c448:	61bb      	str	r3, [r7, #24]
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b0c      	cmp	r3, #12
 800c44e:	d9d0      	bls.n	800c3f2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800c450:	8afb      	ldrh	r3, [r7, #22]
 800c452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c456:	4293      	cmp	r3, r2
 800c458:	d006      	beq.n	800c468 <fit_lfn+0xcc>
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	005b      	lsls	r3, r3, #1
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	4413      	add	r3, r2
 800c462:	881b      	ldrh	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d103      	bne.n	800c470 <fit_lfn+0xd4>
 800c468:	79fb      	ldrb	r3, [r7, #7]
 800c46a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c46e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	79fa      	ldrb	r2, [r7, #7]
 800c474:	701a      	strb	r2, [r3, #0]
}
 800c476:	bf00      	nop
 800c478:	3724      	adds	r7, #36	; 0x24
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bc80      	pop	{r7}
 800c47e:	4770      	bx	lr
 800c480:	0800f04c 	.word	0x0800f04c

0800c484 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b08c      	sub	sp, #48	; 0x30
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
 800c490:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c492:	220b      	movs	r2, #11
 800c494:	68b9      	ldr	r1, [r7, #8]
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f7fe fe18 	bl	800b0cc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b05      	cmp	r3, #5
 800c4a0:	d92b      	bls.n	800c4fa <gen_numname+0x76>
		sr = seq;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c4a6:	e022      	b.n	800c4ee <gen_numname+0x6a>
			wc = *lfn++;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	1c9a      	adds	r2, r3, #2
 800c4ac:	607a      	str	r2, [r7, #4]
 800c4ae:	881b      	ldrh	r3, [r3, #0]
 800c4b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4b6:	e017      	b.n	800c4e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	005a      	lsls	r2, r3, #1
 800c4bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	4413      	add	r3, r2
 800c4c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c4c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4c8:	085b      	lsrs	r3, r3, #1
 800c4ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d005      	beq.n	800c4e2 <gen_numname+0x5e>
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c4dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c4e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ea:	2b0f      	cmp	r3, #15
 800c4ec:	d9e4      	bls.n	800c4b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1d8      	bne.n	800c4a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c4fa:	2307      	movs	r3, #7
 800c4fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	b2db      	uxtb	r3, r3
 800c502:	f003 030f 	and.w	r3, r3, #15
 800c506:	b2db      	uxtb	r3, r3
 800c508:	3330      	adds	r3, #48	; 0x30
 800c50a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c50e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c512:	2b39      	cmp	r3, #57	; 0x39
 800c514:	d904      	bls.n	800c520 <gen_numname+0x9c>
 800c516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c51a:	3307      	adds	r3, #7
 800c51c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	1e5a      	subs	r2, r3, #1
 800c524:	62ba      	str	r2, [r7, #40]	; 0x28
 800c526:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c52a:	4413      	add	r3, r2
 800c52c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c530:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	091b      	lsrs	r3, r3, #4
 800c538:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1de      	bne.n	800c4fe <gen_numname+0x7a>
	ns[i] = '~';
 800c540:	f107 0214 	add.w	r2, r7, #20
 800c544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c546:	4413      	add	r3, r2
 800c548:	227e      	movs	r2, #126	; 0x7e
 800c54a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c54c:	2300      	movs	r3, #0
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24
 800c550:	e002      	b.n	800c558 <gen_numname+0xd4>
 800c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c554:	3301      	adds	r3, #1
 800c556:	627b      	str	r3, [r7, #36]	; 0x24
 800c558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d205      	bcs.n	800c56c <gen_numname+0xe8>
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	4413      	add	r3, r2
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b20      	cmp	r3, #32
 800c56a:	d1f2      	bne.n	800c552 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	2b07      	cmp	r3, #7
 800c570:	d808      	bhi.n	800c584 <gen_numname+0x100>
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	1c5a      	adds	r2, r3, #1
 800c576:	62ba      	str	r2, [r7, #40]	; 0x28
 800c578:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c57c:	4413      	add	r3, r2
 800c57e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c582:	e000      	b.n	800c586 <gen_numname+0x102>
 800c584:	2120      	movs	r1, #32
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	1c5a      	adds	r2, r3, #1
 800c58a:	627a      	str	r2, [r7, #36]	; 0x24
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	4413      	add	r3, r2
 800c590:	460a      	mov	r2, r1
 800c592:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	2b07      	cmp	r3, #7
 800c598:	d9e8      	bls.n	800c56c <gen_numname+0xe8>
}
 800c59a:	bf00      	nop
 800c59c:	bf00      	nop
 800c59e:	3730      	adds	r7, #48	; 0x30
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c5b0:	230b      	movs	r3, #11
 800c5b2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	0852      	lsrs	r2, r2, #1
 800c5ba:	01db      	lsls	r3, r3, #7
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	1c59      	adds	r1, r3, #1
 800c5c4:	6079      	str	r1, [r7, #4]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	73fb      	strb	r3, [r7, #15]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	60bb      	str	r3, [r7, #8]
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1ed      	bne.n	800c5b4 <sum_sfn+0x10>
	return sum;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bc80      	pop	{r7}
 800c5e2:	4770      	bx	lr

0800c5e4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff fc33 	bl	800be5a <dir_sdi>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <dir_find+0x1e>
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	e0a0      	b.n	800c744 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c602:	23ff      	movs	r3, #255	; 0xff
 800c604:	753b      	strb	r3, [r7, #20]
 800c606:	7d3b      	ldrb	r3, [r7, #20]
 800c608:	757b      	strb	r3, [r7, #21]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c610:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	4619      	mov	r1, r3
 800c61c:	4610      	mov	r0, r2
 800c61e:	f7fe ffc2 	bl	800b5a6 <move_window>
 800c622:	4603      	mov	r3, r0
 800c624:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f040 8085 	bne.w	800c738 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	695b      	ldr	r3, [r3, #20]
 800c632:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c63a:	7dbb      	ldrb	r3, [r7, #22]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d102      	bne.n	800c646 <dir_find+0x62>
 800c640:	2304      	movs	r3, #4
 800c642:	75fb      	strb	r3, [r7, #23]
 800c644:	e07d      	b.n	800c742 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	330b      	adds	r3, #11
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c650:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c652:	7dbb      	ldrb	r3, [r7, #22]
 800c654:	2be5      	cmp	r3, #229	; 0xe5
 800c656:	d007      	beq.n	800c668 <dir_find+0x84>
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	f003 0308 	and.w	r3, r3, #8
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d009      	beq.n	800c676 <dir_find+0x92>
 800c662:	7bfb      	ldrb	r3, [r7, #15]
 800c664:	2b0f      	cmp	r3, #15
 800c666:	d006      	beq.n	800c676 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c668:	23ff      	movs	r3, #255	; 0xff
 800c66a:	757b      	strb	r3, [r7, #21]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c672:	849a      	strh	r2, [r3, #36]	; 0x24
 800c674:	e055      	b.n	800c722 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	2b0f      	cmp	r3, #15
 800c67a:	d12f      	bne.n	800c6dc <dir_find+0xf8>
				if (dp->lfn) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a1b      	ldr	r3, [r3, #32]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d04e      	beq.n	800c722 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c684:	7dbb      	ldrb	r3, [r7, #22]
 800c686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00c      	beq.n	800c6a8 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	7b5b      	ldrb	r3, [r3, #13]
 800c692:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800c694:	7dbb      	ldrb	r3, [r7, #22]
 800c696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c69a:	75bb      	strb	r3, [r7, #22]
 800c69c:	7dbb      	ldrb	r3, [r7, #22]
 800c69e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	88da      	ldrh	r2, [r3, #6]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800c6a8:	7dba      	ldrb	r2, [r7, #22]
 800c6aa:	7d7b      	ldrb	r3, [r7, #21]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d112      	bne.n	800c6d6 <dir_find+0xf2>
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	330d      	adds	r3, #13
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	7d3a      	ldrb	r2, [r7, #20]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d10c      	bne.n	800c6d6 <dir_find+0xf2>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a1b      	ldr	r3, [r3, #32]
 800c6c0:	6939      	ldr	r1, [r7, #16]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7ff fdfc 	bl	800c2c0 <cmp_lfn>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <dir_find+0xf2>
 800c6ce:	7d7b      	ldrb	r3, [r7, #21]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	e000      	b.n	800c6d8 <dir_find+0xf4>
 800c6d6:	23ff      	movs	r3, #255	; 0xff
 800c6d8:	757b      	strb	r3, [r7, #21]
 800c6da:	e022      	b.n	800c722 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c6dc:	7d7b      	ldrb	r3, [r7, #21]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d107      	bne.n	800c6f2 <dir_find+0x10e>
 800c6e2:	6938      	ldr	r0, [r7, #16]
 800c6e4:	f7ff ff5e 	bl	800c5a4 <sum_sfn>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	7d3b      	ldrb	r3, [r7, #20]
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d024      	beq.n	800c73c <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	699b      	ldr	r3, [r3, #24]
 800c6f6:	330b      	adds	r3, #11
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <dir_find+0x132>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	220b      	movs	r2, #11
 800c708:	4619      	mov	r1, r3
 800c70a:	6938      	ldr	r0, [r7, #16]
 800c70c:	f7fe fd16 	bl	800b13c <mem_cmp>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d014      	beq.n	800c740 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c716:	23ff      	movs	r3, #255	; 0xff
 800c718:	757b      	strb	r3, [r7, #21]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c720:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800c722:	2100      	movs	r1, #0
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff fc37 	bl	800bf98 <dir_next>
 800c72a:	4603      	mov	r3, r0
 800c72c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c72e:	7dfb      	ldrb	r3, [r7, #23]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f43f af6e 	beq.w	800c612 <dir_find+0x2e>
 800c736:	e004      	b.n	800c742 <dir_find+0x15e>
		if (res != FR_OK) break;
 800c738:	bf00      	nop
 800c73a:	e002      	b.n	800c742 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c73c:	bf00      	nop
 800c73e:	e000      	b.n	800c742 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c740:	bf00      	nop

	return res;
 800c742:	7dfb      	ldrb	r3, [r7, #23]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3718      	adds	r7, #24
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08c      	sub	sp, #48	; 0x30
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	623b      	str	r3, [r7, #32]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800c760:	f107 030c 	add.w	r3, r7, #12
 800c764:	220c      	movs	r2, #12
 800c766:	6a39      	ldr	r1, [r7, #32]
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe fcaf 	bl	800b0cc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c76e:	7dfb      	ldrb	r3, [r7, #23]
 800c770:	f003 0301 	and.w	r3, r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	d035      	beq.n	800c7e4 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	330b      	adds	r3, #11
 800c77c:	2200      	movs	r2, #0
 800c77e:	701a      	strb	r2, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 800c786:	2301      	movs	r3, #1
 800c788:	62bb      	str	r3, [r7, #40]	; 0x28
 800c78a:	e013      	b.n	800c7b4 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800c78c:	f107 010c 	add.w	r1, r7, #12
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	69fa      	ldr	r2, [r7, #28]
 800c794:	6a38      	ldr	r0, [r7, #32]
 800c796:	f7ff fe75 	bl	800c484 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff ff22 	bl	800c5e4 <dir_find>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c7a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d106      	bne.n	800c7bc <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	2b63      	cmp	r3, #99	; 0x63
 800c7b8:	d9e8      	bls.n	800c78c <dir_register+0x40>
 800c7ba:	e000      	b.n	800c7be <dir_register+0x72>
			if (res != FR_OK) break;
 800c7bc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	2b64      	cmp	r3, #100	; 0x64
 800c7c2:	d101      	bne.n	800c7c8 <dir_register+0x7c>
 800c7c4:	2307      	movs	r3, #7
 800c7c6:	e0b5      	b.n	800c934 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c7c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7cc:	2b04      	cmp	r3, #4
 800c7ce:	d002      	beq.n	800c7d6 <dir_register+0x8a>
 800c7d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7d4:	e0ae      	b.n	800c934 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	330b      	adds	r3, #11
 800c7da:	7dfa      	ldrb	r2, [r7, #23]
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	69fa      	ldr	r2, [r7, #28]
 800c7e2:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	f003 0302 	and.w	r3, r3, #2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d014      	beq.n	800c818 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7f2:	e002      	b.n	800c7fa <dir_register+0xae>
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	69fa      	ldr	r2, [r7, #28]
 800c800:	4413      	add	r3, r2
 800c802:	881b      	ldrh	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1f5      	bne.n	800c7f4 <dir_register+0xa8>
		nent = (n + 25) / 13;
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	3319      	adds	r3, #25
 800c80c:	4a4b      	ldr	r2, [pc, #300]	; (800c93c <dir_register+0x1f0>)
 800c80e:	fba2 2303 	umull	r2, r3, r2, r3
 800c812:	089b      	lsrs	r3, r3, #2
 800c814:	627b      	str	r3, [r7, #36]	; 0x24
 800c816:	e001      	b.n	800c81c <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800c818:	2301      	movs	r3, #1
 800c81a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c81c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff fcb4 	bl	800c18c <dir_alloc>
 800c824:	4603      	mov	r3, r0
 800c826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c82a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d14c      	bne.n	800c8cc <dir_register+0x180>
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	3b01      	subs	r3, #1
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d046      	beq.n	800c8cc <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	88db      	ldrh	r3, [r3, #6]
 800c842:	461a      	mov	r2, r3
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff fb05 	bl	800be5a <dir_sdi>
 800c850:	4603      	mov	r3, r0
 800c852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d136      	bne.n	800c8cc <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	4618      	mov	r0, r3
 800c864:	f7ff fe9e 	bl	800c5a4 <sum_sfn>
 800c868:	4603      	mov	r3, r0
 800c86a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	4619      	mov	r1, r3
 800c876:	4610      	mov	r0, r2
 800c878:	f7fe fe95 	bl	800b5a6 <move_window>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c886:	2b00      	cmp	r3, #0
 800c888:	d11f      	bne.n	800c8ca <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a18      	ldr	r0, [r3, #32]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6959      	ldr	r1, [r3, #20]
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	b2da      	uxtb	r2, r3
 800c896:	7efb      	ldrb	r3, [r7, #27]
 800c898:	f7ff fd80 	bl	800c39c <fit_lfn>
				dp->fs->wflag = 1;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff fb75 	bl	800bf98 <dir_next>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c8b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d107      	bne.n	800c8cc <dir_register+0x180>
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1d1      	bne.n	800c86c <dir_register+0x120>
 800c8c8:	e000      	b.n	800c8cc <dir_register+0x180>
				if (res != FR_OK) break;
 800c8ca:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800c8cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d12d      	bne.n	800c930 <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4610      	mov	r0, r2
 800c8e0:	f7fe fe61 	bl	800b5a6 <move_window>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c8ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d11e      	bne.n	800c930 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe fc04 	bl	800b108 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6958      	ldr	r0, [r3, #20]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	220b      	movs	r2, #11
 800c90a:	4619      	mov	r1, r3
 800c90c:	f7fe fbde 	bl	800b0cc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	330b      	adds	r3, #11
 800c916:	781a      	ldrb	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	695b      	ldr	r3, [r3, #20]
 800c91c:	330c      	adds	r3, #12
 800c91e:	f002 0218 	and.w	r2, r2, #24
 800c922:	b2d2      	uxtb	r2, r2
 800c924:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800c930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c934:	4618      	mov	r0, r3
 800c936:	3730      	adds	r7, #48	; 0x30
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	4ec4ec4f 	.word	0x4ec4ec4f

0800c940 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08a      	sub	sp, #40	; 0x28
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	613b      	str	r3, [r7, #16]
 800c950:	e002      	b.n	800c958 <create_name+0x18>
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	3301      	adds	r3, #1
 800c956:	613b      	str	r3, [r7, #16]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b2f      	cmp	r3, #47	; 0x2f
 800c95e:	d0f8      	beq.n	800c952 <create_name+0x12>
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b5c      	cmp	r3, #92	; 0x5c
 800c966:	d0f4      	beq.n	800c952 <create_name+0x12>
	lfn = dp->lfn;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	61ba      	str	r2, [r7, #24]
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	4413      	add	r3, r2
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800c984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c986:	2b1f      	cmp	r3, #31
 800c988:	d92f      	bls.n	800c9ea <create_name+0xaa>
 800c98a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c98c:	2b2f      	cmp	r3, #47	; 0x2f
 800c98e:	d02c      	beq.n	800c9ea <create_name+0xaa>
 800c990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c992:	2b5c      	cmp	r3, #92	; 0x5c
 800c994:	d029      	beq.n	800c9ea <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2bfe      	cmp	r3, #254	; 0xfe
 800c99a:	d901      	bls.n	800c9a0 <create_name+0x60>
			return FR_INVALID_NAME;
 800c99c:	2306      	movs	r3, #6
 800c99e:	e176      	b.n	800cc8e <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c9a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f001 fd6a 	bl	800e484 <ff_convert>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <create_name+0x7e>
 800c9ba:	2306      	movs	r3, #6
 800c9bc:	e167      	b.n	800cc8e <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800c9be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9c0:	2b7f      	cmp	r3, #127	; 0x7f
 800c9c2:	d809      	bhi.n	800c9d8 <create_name+0x98>
 800c9c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	48b3      	ldr	r0, [pc, #716]	; (800cc98 <create_name+0x358>)
 800c9ca:	f7fe fbdd 	bl	800b188 <chk_chr>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <create_name+0x98>
			return FR_INVALID_NAME;
 800c9d4:	2306      	movs	r3, #6
 800c9d6:	e15a      	b.n	800cc8e <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	617a      	str	r2, [r7, #20]
 800c9de:	005b      	lsls	r3, r3, #1
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c9e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c9e8:	e7c5      	b.n	800c976 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	441a      	add	r2, r3
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800c9f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9f6:	2b1f      	cmp	r3, #31
 800c9f8:	d801      	bhi.n	800c9fe <create_name+0xbe>
 800c9fa:	2304      	movs	r3, #4
 800c9fc:	e000      	b.n	800ca00 <create_name+0xc0>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800ca04:	e011      	b.n	800ca2a <create_name+0xea>
		w = lfn[di - 1];
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	005b      	lsls	r3, r3, #1
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	4413      	add	r3, r2
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ca18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca1a:	2b20      	cmp	r3, #32
 800ca1c:	d002      	beq.n	800ca24 <create_name+0xe4>
 800ca1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca20:	2b2e      	cmp	r3, #46	; 0x2e
 800ca22:	d106      	bne.n	800ca32 <create_name+0xf2>
		di--;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1ea      	bne.n	800ca06 <create_name+0xc6>
 800ca30:	e000      	b.n	800ca34 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 800ca32:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <create_name+0xfe>
 800ca3a:	2306      	movs	r3, #6
 800ca3c:	e127      	b.n	800cc8e <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	005b      	lsls	r3, r3, #1
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	4413      	add	r3, r2
 800ca46:	2200      	movs	r2, #0
 800ca48:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	220b      	movs	r2, #11
 800ca50:	2120      	movs	r1, #32
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fe fb58 	bl	800b108 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ca58:	2300      	movs	r3, #0
 800ca5a:	61bb      	str	r3, [r7, #24]
 800ca5c:	e002      	b.n	800ca64 <create_name+0x124>
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	3301      	adds	r3, #1
 800ca62:	61bb      	str	r3, [r7, #24]
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d0f5      	beq.n	800ca5e <create_name+0x11e>
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	4413      	add	r3, r2
 800ca7a:	881b      	ldrh	r3, [r3, #0]
 800ca7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca7e:	d0ee      	beq.n	800ca5e <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d009      	beq.n	800ca9a <create_name+0x15a>
 800ca86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca8a:	f043 0303 	orr.w	r3, r3, #3
 800ca8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ca92:	e002      	b.n	800ca9a <create_name+0x15a>
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	617b      	str	r3, [r7, #20]
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d009      	beq.n	800cab4 <create_name+0x174>
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800caa6:	3b01      	subs	r3, #1
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	4413      	add	r3, r2
 800caae:	881b      	ldrh	r3, [r3, #0]
 800cab0:	2b2e      	cmp	r3, #46	; 0x2e
 800cab2:	d1ef      	bne.n	800ca94 <create_name+0x154>

	b = i = 0; ni = 8;
 800cab4:	2300      	movs	r3, #0
 800cab6:	623b      	str	r3, [r7, #32]
 800cab8:	2300      	movs	r3, #0
 800caba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cabe:	2308      	movs	r3, #8
 800cac0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	61ba      	str	r2, [r7, #24]
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	4413      	add	r3, r2
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 808f 	beq.w	800cbf8 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cadc:	2b20      	cmp	r3, #32
 800cade:	d006      	beq.n	800caee <create_name+0x1ae>
 800cae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cae2:	2b2e      	cmp	r3, #46	; 0x2e
 800cae4:	d10a      	bne.n	800cafc <create_name+0x1bc>
 800cae6:	69ba      	ldr	r2, [r7, #24]
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	429a      	cmp	r2, r3
 800caec:	d006      	beq.n	800cafc <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 800caee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf2:	f043 0303 	orr.w	r3, r3, #3
 800caf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cafa:	e07c      	b.n	800cbf6 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cafc:	6a3a      	ldr	r2, [r7, #32]
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d203      	bcs.n	800cb0c <create_name+0x1cc>
 800cb04:	69ba      	ldr	r2, [r7, #24]
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d123      	bne.n	800cb54 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	2b0b      	cmp	r3, #11
 800cb10:	d106      	bne.n	800cb20 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 800cb12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb16:	f043 0303 	orr.w	r3, r3, #3
 800cb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb1e:	e06e      	b.n	800cbfe <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cb20:	69ba      	ldr	r2, [r7, #24]
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d005      	beq.n	800cb34 <create_name+0x1f4>
 800cb28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb2c:	f043 0303 	orr.w	r3, r3, #3
 800cb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cb34:	69ba      	ldr	r2, [r7, #24]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d85f      	bhi.n	800cbfc <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	61bb      	str	r3, [r7, #24]
 800cb40:	2308      	movs	r3, #8
 800cb42:	623b      	str	r3, [r7, #32]
 800cb44:	230b      	movs	r3, #11
 800cb46:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cb48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb52:	e050      	b.n	800cbf6 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cb54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb56:	2b7f      	cmp	r3, #127	; 0x7f
 800cb58:	d914      	bls.n	800cb84 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cb5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f001 fc90 	bl	800e484 <ff_convert>
 800cb64:	4603      	mov	r3, r0
 800cb66:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cb68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d004      	beq.n	800cb78 <create_name+0x238>
 800cb6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb70:	3b80      	subs	r3, #128	; 0x80
 800cb72:	4a4a      	ldr	r2, [pc, #296]	; (800cc9c <create_name+0x35c>)
 800cb74:	5cd3      	ldrb	r3, [r2, r3]
 800cb76:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb7c:	f043 0302 	orr.w	r3, r3, #2
 800cb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cb84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d007      	beq.n	800cb9a <create_name+0x25a>
 800cb8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4844      	ldr	r0, [pc, #272]	; (800cca0 <create_name+0x360>)
 800cb90:	f7fe fafa 	bl	800b188 <chk_chr>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d008      	beq.n	800cbac <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cb9a:	235f      	movs	r3, #95	; 0x5f
 800cb9c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cb9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba2:	f043 0303 	orr.w	r3, r3, #3
 800cba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbaa:	e01b      	b.n	800cbe4 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cbac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbae:	2b40      	cmp	r3, #64	; 0x40
 800cbb0:	d909      	bls.n	800cbc6 <create_name+0x286>
 800cbb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbb4:	2b5a      	cmp	r3, #90	; 0x5a
 800cbb6:	d806      	bhi.n	800cbc6 <create_name+0x286>
					b |= 2;
 800cbb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbbc:	f043 0302 	orr.w	r3, r3, #2
 800cbc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cbc4:	e00e      	b.n	800cbe4 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cbc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbc8:	2b60      	cmp	r3, #96	; 0x60
 800cbca:	d90b      	bls.n	800cbe4 <create_name+0x2a4>
 800cbcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbce:	2b7a      	cmp	r3, #122	; 0x7a
 800cbd0:	d808      	bhi.n	800cbe4 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 800cbd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbd6:	f043 0301 	orr.w	r3, r3, #1
 800cbda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cbde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbe0:	3b20      	subs	r3, #32
 800cbe2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	699a      	ldr	r2, [r3, #24]
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	1c59      	adds	r1, r3, #1
 800cbec:	6239      	str	r1, [r7, #32]
 800cbee:	4413      	add	r3, r2
 800cbf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cbf2:	b2d2      	uxtb	r2, r2
 800cbf4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800cbf6:	e764      	b.n	800cac2 <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 800cbf8:	bf00      	nop
 800cbfa:	e000      	b.n	800cbfe <create_name+0x2be>
			if (si > di) break;			/* No extension */
 800cbfc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2be5      	cmp	r3, #229	; 0xe5
 800cc06:	d103      	bne.n	800cc10 <create_name+0x2d0>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	2205      	movs	r2, #5
 800cc0e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	2b08      	cmp	r3, #8
 800cc14:	d104      	bne.n	800cc20 <create_name+0x2e0>
 800cc16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800cc20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc24:	f003 030c 	and.w	r3, r3, #12
 800cc28:	2b0c      	cmp	r3, #12
 800cc2a:	d005      	beq.n	800cc38 <create_name+0x2f8>
 800cc2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc30:	f003 0303 	and.w	r3, r3, #3
 800cc34:	2b03      	cmp	r3, #3
 800cc36:	d105      	bne.n	800cc44 <create_name+0x304>
		cf |= NS_LFN;
 800cc38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc3c:	f043 0302 	orr.w	r3, r3, #2
 800cc40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc48:	f003 0302 	and.w	r3, r3, #2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d117      	bne.n	800cc80 <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cc50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc54:	f003 0303 	and.w	r3, r3, #3
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d105      	bne.n	800cc68 <create_name+0x328>
 800cc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc60:	f043 0310 	orr.w	r3, r3, #16
 800cc64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cc68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc6c:	f003 030c 	and.w	r3, r3, #12
 800cc70:	2b04      	cmp	r3, #4
 800cc72:	d105      	bne.n	800cc80 <create_name+0x340>
 800cc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc78:	f043 0308 	orr.w	r3, r3, #8
 800cc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	330b      	adds	r3, #11
 800cc86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cc8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cc8c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3728      	adds	r7, #40	; 0x28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	0800ef6c 	.word	0x0800ef6c
 800cc9c:	0800efcc 	.word	0x0800efcc
 800cca0:	0800ef78 	.word	0x0800ef78

0800cca4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b2f      	cmp	r3, #47	; 0x2f
 800ccb4:	d003      	beq.n	800ccbe <follow_path+0x1a>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b5c      	cmp	r3, #92	; 0x5c
 800ccbc:	d102      	bne.n	800ccc4 <follow_path+0x20>
		path++;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b1f      	cmp	r3, #31
 800ccd0:	d809      	bhi.n	800cce6 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7ff f8c0 	bl	800be5a <dir_sdi>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	615a      	str	r2, [r3, #20]
 800cce4:	e041      	b.n	800cd6a <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cce6:	463b      	mov	r3, r7
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff fe28 	bl	800c940 <create_name>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d132      	bne.n	800cd60 <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff fc72 	bl	800c5e4 <dir_find>
 800cd00:	4603      	mov	r3, r0
 800cd02:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	7adb      	ldrb	r3, [r3, #11]
 800cd0a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00a      	beq.n	800cd28 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
 800cd14:	2b04      	cmp	r3, #4
 800cd16:	d125      	bne.n	800cd64 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cd18:	7bbb      	ldrb	r3, [r7, #14]
 800cd1a:	f003 0304 	and.w	r3, r3, #4
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d120      	bne.n	800cd64 <follow_path+0xc0>
 800cd22:	2305      	movs	r3, #5
 800cd24:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800cd26:	e01d      	b.n	800cd64 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	f003 0304 	and.w	r3, r3, #4
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d11a      	bne.n	800cd68 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	695b      	ldr	r3, [r3, #20]
 800cd36:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	330b      	adds	r3, #11
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	f003 0310 	and.w	r3, r3, #16
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d102      	bne.n	800cd4c <follow_path+0xa8>
				res = FR_NO_PATH; break;
 800cd46:	2305      	movs	r3, #5
 800cd48:	73fb      	strb	r3, [r7, #15]
 800cd4a:	e00e      	b.n	800cd6a <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68b9      	ldr	r1, [r7, #8]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff fa60 	bl	800c218 <ld_clust>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd5e:	e7c2      	b.n	800cce6 <follow_path+0x42>
			if (res != FR_OK) break;
 800cd60:	bf00      	nop
 800cd62:	e002      	b.n	800cd6a <follow_path+0xc6>
				break;
 800cd64:	bf00      	nop
 800cd66:	e000      	b.n	800cd6a <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd68:	bf00      	nop
		}
	}

	return res;
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd80:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d031      	beq.n	800cdee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	617b      	str	r3, [r7, #20]
 800cd90:	e002      	b.n	800cd98 <get_ldnumber+0x24>
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	3301      	adds	r3, #1
 800cd96:	617b      	str	r3, [r7, #20]
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b1f      	cmp	r3, #31
 800cd9e:	d903      	bls.n	800cda8 <get_ldnumber+0x34>
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b3a      	cmp	r3, #58	; 0x3a
 800cda6:	d1f4      	bne.n	800cd92 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	2b3a      	cmp	r3, #58	; 0x3a
 800cdae:	d11c      	bne.n	800cdea <get_ldnumber+0x76>
			tp = *path;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	60fa      	str	r2, [r7, #12]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	3b30      	subs	r3, #48	; 0x30
 800cdc0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2b09      	cmp	r3, #9
 800cdc6:	d80e      	bhi.n	800cde6 <get_ldnumber+0x72>
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d10a      	bne.n	800cde6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d107      	bne.n	800cde6 <get_ldnumber+0x72>
					vol = (int)i;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	3301      	adds	r3, #1
 800cdde:	617b      	str	r3, [r7, #20]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	697a      	ldr	r2, [r7, #20]
 800cde4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	e002      	b.n	800cdf0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cdea:	2300      	movs	r3, #0
 800cdec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cdee:	693b      	ldr	r3, [r7, #16]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	371c      	adds	r7, #28
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bc80      	pop	{r7}
 800cdf8:	4770      	bx	lr
	...

0800cdfc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f04f 32ff 	mov.w	r2, #4294967295
 800ce14:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800ce18:	6839      	ldr	r1, [r7, #0]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7fe fbc3 	bl	800b5a6 <move_window>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d001      	beq.n	800ce2a <check_fs+0x2e>
		return 3;
 800ce26:	2303      	movs	r3, #3
 800ce28:	e04a      	b.n	800cec0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce30:	3301      	adds	r3, #1
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	021b      	lsls	r3, r3, #8
 800ce36:	b21a      	sxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ce3e:	b21b      	sxth	r3, r3
 800ce40:	4313      	orrs	r3, r2
 800ce42:	b21b      	sxth	r3, r3
 800ce44:	4a20      	ldr	r2, [pc, #128]	; (800cec8 <check_fs+0xcc>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d001      	beq.n	800ce4e <check_fs+0x52>
		return 2;
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	e038      	b.n	800cec0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	3336      	adds	r3, #54	; 0x36
 800ce52:	3303      	adds	r3, #3
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	061a      	lsls	r2, r3, #24
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	3336      	adds	r3, #54	; 0x36
 800ce5c:	3302      	adds	r3, #2
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	041b      	lsls	r3, r3, #16
 800ce62:	4313      	orrs	r3, r2
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	3236      	adds	r2, #54	; 0x36
 800ce68:	3201      	adds	r2, #1
 800ce6a:	7812      	ldrb	r2, [r2, #0]
 800ce6c:	0212      	lsls	r2, r2, #8
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800ce76:	4313      	orrs	r3, r2
 800ce78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce7c:	4a13      	ldr	r2, [pc, #76]	; (800cecc <check_fs+0xd0>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d101      	bne.n	800ce86 <check_fs+0x8a>
		return 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	e01c      	b.n	800cec0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3352      	adds	r3, #82	; 0x52
 800ce8a:	3303      	adds	r3, #3
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	061a      	lsls	r2, r3, #24
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	3352      	adds	r3, #82	; 0x52
 800ce94:	3302      	adds	r3, #2
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	041b      	lsls	r3, r3, #16
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	3252      	adds	r2, #82	; 0x52
 800cea0:	3201      	adds	r2, #1
 800cea2:	7812      	ldrb	r2, [r2, #0]
 800cea4:	0212      	lsls	r2, r2, #8
 800cea6:	4313      	orrs	r3, r2
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ceb4:	4a05      	ldr	r2, [pc, #20]	; (800cecc <check_fs+0xd0>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d101      	bne.n	800cebe <check_fs+0xc2>
		return 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	e000      	b.n	800cec0 <check_fs+0xc4>

	return 1;
 800cebe:	2301      	movs	r3, #1
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	ffffaa55 	.word	0xffffaa55
 800cecc:	00544146 	.word	0x00544146

0800ced0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b096      	sub	sp, #88	; 0x58
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	4613      	mov	r3, r2
 800cedc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cee4:	68b8      	ldr	r0, [r7, #8]
 800cee6:	f7ff ff45 	bl	800cd74 <get_ldnumber>
 800ceea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ceec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	da01      	bge.n	800cef6 <find_volume+0x26>
 800cef2:	230b      	movs	r3, #11
 800cef4:	e2de      	b.n	800d4b4 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cef6:	4ab1      	ldr	r2, [pc, #708]	; (800d1bc <find_volume+0x2ec>)
 800cef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cefa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cefe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <find_volume+0x3a>
 800cf06:	230c      	movs	r3, #12
 800cf08:	e2d4      	b.n	800d4b4 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf0e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d01b      	beq.n	800cf52 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fe f835 	bl	800af90 <disk_status>
 800cf26:	4603      	mov	r3, r0
 800cf28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cf2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf30:	f003 0301 	and.w	r3, r3, #1
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10c      	bne.n	800cf52 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d007      	beq.n	800cf4e <find_volume+0x7e>
 800cf3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf42:	f003 0304 	and.w	r3, r3, #4
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800cf4a:	230a      	movs	r3, #10
 800cf4c:	e2b2      	b.n	800d4b4 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e2b0      	b.n	800d4b4 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf60:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fe f82a 	bl	800afc4 <disk_initialize>
 800cf70:	4603      	mov	r3, r0
 800cf72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800cf76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cf82:	2303      	movs	r3, #3
 800cf84:	e296      	b.n	800d4b4 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d007      	beq.n	800cf9c <find_volume+0xcc>
 800cf8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf90:	f003 0304 	and.w	r3, r3, #4
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800cf98:	230a      	movs	r3, #10
 800cf9a:	e28b      	b.n	800d4b4 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	2102      	movs	r1, #2
 800cfac:	f7fe f870 	bl	800b090 <disk_ioctl>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10b      	bne.n	800cfce <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800cfbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfc0:	d305      	bcc.n	800cfce <find_volume+0xfe>
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800cfc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfcc:	d901      	bls.n	800cfd2 <find_volume+0x102>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e270      	b.n	800d4b4 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800cfd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cfd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfda:	f7ff ff0f 	bl	800cdfc <check_fs>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800cfe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d155      	bne.n	800d098 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800cfec:	2300      	movs	r3, #0
 800cfee:	643b      	str	r3, [r7, #64]	; 0x40
 800cff0:	e029      	b.n	800d046 <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800cff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cff6:	011b      	lsls	r3, r3, #4
 800cff8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cffc:	4413      	add	r3, r2
 800cffe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	3304      	adds	r3, #4
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d012      	beq.n	800d030 <find_volume+0x160>
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	330b      	adds	r3, #11
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	061a      	lsls	r2, r3, #24
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	330a      	adds	r3, #10
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	041b      	lsls	r3, r3, #16
 800d01a:	4313      	orrs	r3, r2
 800d01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d01e:	3209      	adds	r2, #9
 800d020:	7812      	ldrb	r2, [r2, #0]
 800d022:	0212      	lsls	r2, r2, #8
 800d024:	4313      	orrs	r3, r2
 800d026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d028:	3208      	adds	r2, #8
 800d02a:	7812      	ldrb	r2, [r2, #0]
 800d02c:	431a      	orrs	r2, r3
 800d02e:	e000      	b.n	800d032 <find_volume+0x162>
 800d030:	2200      	movs	r2, #0
 800d032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d03a:	440b      	add	r3, r1
 800d03c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d042:	3301      	adds	r3, #1
 800d044:	643b      	str	r3, [r7, #64]	; 0x40
 800d046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d9d2      	bls.n	800cff2 <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800d04c:	2300      	movs	r3, #0
 800d04e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d052:	2b00      	cmp	r3, #0
 800d054:	d002      	beq.n	800d05c <find_volume+0x18c>
 800d056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d058:	3b01      	subs	r3, #1
 800d05a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800d05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d064:	4413      	add	r3, r2
 800d066:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d06a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800d06c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d005      	beq.n	800d07e <find_volume+0x1ae>
 800d072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d076:	f7ff fec1 	bl	800cdfc <check_fs>
 800d07a:	4603      	mov	r3, r0
 800d07c:	e000      	b.n	800d080 <find_volume+0x1b0>
 800d07e:	2302      	movs	r3, #2
 800d080:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800d084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d005      	beq.n	800d098 <find_volume+0x1c8>
 800d08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08e:	3301      	adds	r3, #1
 800d090:	643b      	str	r3, [r7, #64]	; 0x40
 800d092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d094:	2b03      	cmp	r3, #3
 800d096:	d9e1      	bls.n	800d05c <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	d101      	bne.n	800d0a4 <find_volume+0x1d4>
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e207      	b.n	800d4b4 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800d0a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <find_volume+0x1e0>
 800d0ac:	230d      	movs	r3, #13
 800d0ae:	e201      	b.n	800d4b4 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b2:	7b1b      	ldrb	r3, [r3, #12]
 800d0b4:	021b      	lsls	r3, r3, #8
 800d0b6:	b21a      	sxth	r2, r3
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ba:	7adb      	ldrb	r3, [r3, #11]
 800d0bc:	b21b      	sxth	r3, r3
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	b21a      	sxth	r2, r3
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d0c8:	b21b      	sxth	r3, r3
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d001      	beq.n	800d0d2 <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 800d0ce:	230d      	movs	r3, #13
 800d0d0:	e1f0      	b.n	800d4b4 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d4:	7ddb      	ldrb	r3, [r3, #23]
 800d0d6:	021b      	lsls	r3, r3, #8
 800d0d8:	b21a      	sxth	r2, r3
 800d0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0dc:	7d9b      	ldrb	r3, [r3, #22]
 800d0de:	b21b      	sxth	r3, r3
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	b21b      	sxth	r3, r3
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800d0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d112      	bne.n	800d114 <find_volume+0x244>
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800d0f4:	061a      	lsls	r2, r3, #24
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d0fc:	041b      	lsls	r3, r3, #16
 800d0fe:	4313      	orrs	r3, r2
 800d100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d102:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d106:	0212      	lsls	r2, r2, #8
 800d108:	4313      	orrs	r3, r2
 800d10a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d10c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d110:	4313      	orrs	r3, r2
 800d112:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800d114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d118:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800d11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11e:	7c1a      	ldrb	r2, [r3, #16]
 800d120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d122:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d006      	beq.n	800d13e <find_volume+0x26e>
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800d136:	2b02      	cmp	r3, #2
 800d138:	d001      	beq.n	800d13e <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 800d13a:	230d      	movs	r3, #13
 800d13c:	e1ba      	b.n	800d4b4 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800d144:	461a      	mov	r2, r3
 800d146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d148:	fb02 f303 	mul.w	r3, r2, r3
 800d14c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	7b5a      	ldrb	r2, [r3, #13]
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00a      	beq.n	800d178 <find_volume+0x2a8>
 800d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d164:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d168:	461a      	mov	r2, r3
 800d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d170:	3b01      	subs	r3, #1
 800d172:	4013      	ands	r3, r2
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 800d178:	230d      	movs	r3, #13
 800d17a:	e19b      	b.n	800d4b4 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	7c9b      	ldrb	r3, [r3, #18]
 800d180:	021b      	lsls	r3, r3, #8
 800d182:	b21a      	sxth	r2, r3
 800d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d186:	7c5b      	ldrb	r3, [r3, #17]
 800d188:	b21b      	sxth	r3, r3
 800d18a:	4313      	orrs	r3, r2
 800d18c:	b21b      	sxth	r3, r3
 800d18e:	b29a      	uxth	r2, r3
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800d196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d198:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800d19c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d19e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d1a2:	0952      	lsrs	r2, r2, #5
 800d1a4:	b292      	uxth	r2, r2
 800d1a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1aa:	fb02 f201 	mul.w	r2, r2, r1
 800d1ae:	1a9b      	subs	r3, r3, r2
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d004      	beq.n	800d1c0 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800d1b6:	230d      	movs	r3, #13
 800d1b8:	e17c      	b.n	800d4b4 <find_volume+0x5e4>
 800d1ba:	bf00      	nop
 800d1bc:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800d1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c2:	7d1b      	ldrb	r3, [r3, #20]
 800d1c4:	021b      	lsls	r3, r3, #8
 800d1c6:	b21a      	sxth	r2, r3
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ca:	7cdb      	ldrb	r3, [r3, #19]
 800d1cc:	b21b      	sxth	r3, r3
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	b21b      	sxth	r3, r3
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800d1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d112      	bne.n	800d202 <find_volume+0x332>
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1de:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d1e2:	061a      	lsls	r2, r3, #24
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d1ea:	041b      	lsls	r3, r3, #16
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1f0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d1f4:	0212      	lsls	r2, r2, #8
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d1fe:	4313      	orrs	r3, r2
 800d200:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	7bdb      	ldrb	r3, [r3, #15]
 800d206:	021b      	lsls	r3, r3, #8
 800d208:	b21a      	sxth	r2, r3
 800d20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20c:	7b9b      	ldrb	r3, [r3, #14]
 800d20e:	b21b      	sxth	r3, r3
 800d210:	4313      	orrs	r3, r2
 800d212:	b21b      	sxth	r3, r3
 800d214:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800d216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d101      	bne.n	800d220 <find_volume+0x350>
 800d21c:	230d      	movs	r3, #13
 800d21e:	e149      	b.n	800d4b4 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800d220:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d224:	4413      	add	r3, r2
 800d226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d228:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 800d22c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d22e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d232:	0952      	lsrs	r2, r2, #5
 800d234:	b292      	uxth	r2, r2
 800d236:	fbb1 f2f2 	udiv	r2, r1, r2
 800d23a:	b292      	uxth	r2, r2
 800d23c:	4413      	add	r3, r2
 800d23e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d244:	429a      	cmp	r2, r3
 800d246:	d201      	bcs.n	800d24c <find_volume+0x37c>
 800d248:	230d      	movs	r3, #13
 800d24a:	e133      	b.n	800d4b4 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800d24c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d254:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800d258:	fbb3 f3f2 	udiv	r3, r3, r2
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800d25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d260:	2b00      	cmp	r3, #0
 800d262:	d101      	bne.n	800d268 <find_volume+0x398>
 800d264:	230d      	movs	r3, #13
 800d266:	e125      	b.n	800d4b4 <find_volume+0x5e4>
	fmt = FS_FAT12;
 800d268:	2301      	movs	r3, #1
 800d26a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d270:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d274:	4293      	cmp	r3, r2
 800d276:	d902      	bls.n	800d27e <find_volume+0x3ae>
 800d278:	2302      	movs	r3, #2
 800d27a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800d27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d280:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d284:	4293      	cmp	r3, r2
 800d286:	d902      	bls.n	800d28e <find_volume+0x3be>
 800d288:	2303      	movs	r3, #3
 800d28a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800d28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d290:	1c9a      	adds	r2, r3, #2
 800d292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d294:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d29c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800d2a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2a4:	441a      	add	r2, r3
 800d2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a8:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 800d2ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b0:	441a      	add	r2, r3
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800d2b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2bc:	2b03      	cmp	r3, #3
 800d2be:	d121      	bne.n	800d304 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c2:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <find_volume+0x3fe>
 800d2ca:	230d      	movs	r3, #13
 800d2cc:	e0f2      	b.n	800d4b4 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2d4:	061a      	lsls	r2, r3, #24
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d2dc:	041b      	lsls	r3, r3, #16
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2e2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d2e6:	0212      	lsls	r2, r2, #8
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2ec:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	647b      	str	r3, [r7, #68]	; 0x44
 800d302:	e025      	b.n	800d350 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d306:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <find_volume+0x442>
 800d30e:	230d      	movs	r3, #13
 800d310:	e0d0      	b.n	800d4b4 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800d318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d31a:	441a      	add	r2, r3
 800d31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d326:	2b02      	cmp	r3, #2
 800d328:	d104      	bne.n	800d334 <find_volume+0x464>
 800d32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d330:	005b      	lsls	r3, r3, #1
 800d332:	e00c      	b.n	800d34e <find_volume+0x47e>
 800d334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d336:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800d33a:	4613      	mov	r3, r2
 800d33c:	005b      	lsls	r3, r3, #1
 800d33e:	4413      	add	r3, r2
 800d340:	085a      	lsrs	r2, r3, #1
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800d34e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d35c:	4619      	mov	r1, r3
 800d35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d360:	440b      	add	r3, r1
 800d362:	3b01      	subs	r3, #1
 800d364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d366:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 800d36a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d36e:	429a      	cmp	r2, r3
 800d370:	d201      	bcs.n	800d376 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800d372:	230d      	movs	r3, #13
 800d374:	e09e      	b.n	800d4b4 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	f04f 32ff 	mov.w	r2, #4294967295
 800d37c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800d380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d382:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800d386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d388:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800d38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38e:	2280      	movs	r2, #128	; 0x80
 800d390:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800d394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d398:	2b03      	cmp	r3, #3
 800d39a:	d177      	bne.n	800d48c <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800d39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d3a2:	021b      	lsls	r3, r3, #8
 800d3a4:	b21a      	sxth	r2, r3
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3ac:	b21b      	sxth	r3, r3
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	b21b      	sxth	r3, r3
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d16a      	bne.n	800d48c <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 800d3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3be:	f7fe f8f2 	bl	800b5a6 <move_window>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d161      	bne.n	800d48c <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800d3d6:	021b      	lsls	r3, r3, #8
 800d3d8:	b21a      	sxth	r2, r3
 800d3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3dc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d3e0:	b21b      	sxth	r3, r3
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	b21b      	sxth	r3, r3
 800d3e6:	4a35      	ldr	r2, [pc, #212]	; (800d4bc <find_volume+0x5ec>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d14f      	bne.n	800d48c <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	78db      	ldrb	r3, [r3, #3]
 800d3f0:	061a      	lsls	r2, r3, #24
 800d3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f4:	789b      	ldrb	r3, [r3, #2]
 800d3f6:	041b      	lsls	r3, r3, #16
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3fc:	7852      	ldrb	r2, [r2, #1]
 800d3fe:	0212      	lsls	r2, r2, #8
 800d400:	4313      	orrs	r3, r2
 800d402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d404:	7812      	ldrb	r2, [r2, #0]
 800d406:	4313      	orrs	r3, r2
 800d408:	4a2d      	ldr	r2, [pc, #180]	; (800d4c0 <find_volume+0x5f0>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d13e      	bne.n	800d48c <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800d40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d410:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800d414:	061a      	lsls	r2, r3, #24
 800d416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d418:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800d41c:	041b      	lsls	r3, r3, #16
 800d41e:	4313      	orrs	r3, r2
 800d420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d422:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800d426:	0212      	lsls	r2, r2, #8
 800d428:	4313      	orrs	r3, r2
 800d42a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d42c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800d430:	4313      	orrs	r3, r2
 800d432:	4a24      	ldr	r2, [pc, #144]	; (800d4c4 <find_volume+0x5f4>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d129      	bne.n	800d48c <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800d43e:	061a      	lsls	r2, r3, #24
 800d440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d442:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800d446:	041b      	lsls	r3, r3, #16
 800d448:	4313      	orrs	r3, r2
 800d44a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d44c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800d450:	0212      	lsls	r2, r2, #8
 800d452:	4313      	orrs	r3, r2
 800d454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d456:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800d45a:	431a      	orrs	r2, r3
 800d45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800d462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d464:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800d468:	061a      	lsls	r2, r3, #24
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800d470:	041b      	lsls	r3, r3, #16
 800d472:	4313      	orrs	r3, r2
 800d474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d476:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800d47a:	0212      	lsls	r2, r2, #8
 800d47c:	4313      	orrs	r3, r2
 800d47e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d480:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800d484:	431a      	orrs	r2, r3
 800d486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d488:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800d48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d492:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 800d496:	4b0c      	ldr	r3, [pc, #48]	; (800d4c8 <find_volume+0x5f8>)
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	3301      	adds	r3, #1
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	4b0a      	ldr	r3, [pc, #40]	; (800d4c8 <find_volume+0x5f8>)
 800d4a0:	801a      	strh	r2, [r3, #0]
 800d4a2:	4b09      	ldr	r3, [pc, #36]	; (800d4c8 <find_volume+0x5f8>)
 800d4a4:	881a      	ldrh	r2, [r3, #0]
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800d4ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4ae:	f7fe f807 	bl	800b4c0 <clear_lock>
#endif

	return FR_OK;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3758      	adds	r7, #88	; 0x58
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	ffffaa55 	.word	0xffffaa55
 800d4c0:	41615252 	.word	0x41615252
 800d4c4:	61417272 	.word	0x61417272
 800d4c8:	200000b0 	.word	0x200000b0

0800d4cc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d01d      	beq.n	800d51a <validate+0x4e>
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d019      	beq.n	800d51a <validate+0x4e>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d013      	beq.n	800d51a <validate+0x4e>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	889b      	ldrh	r3, [r3, #4]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d10b      	bne.n	800d51a <validate+0x4e>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fd fd40 	bl	800af90 <disk_status>
 800d510:	4603      	mov	r3, r0
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <validate+0x52>
		return FR_INVALID_OBJECT;
 800d51a:	2309      	movs	r3, #9
 800d51c:	e000      	b.n	800d520 <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	4613      	mov	r3, r2
 800d534:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800d53a:	f107 0310 	add.w	r3, r7, #16
 800d53e:	4618      	mov	r0, r3
 800d540:	f7ff fc18 	bl	800cd74 <get_ldnumber>
 800d544:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	da01      	bge.n	800d550 <f_mount+0x28>
 800d54c:	230b      	movs	r3, #11
 800d54e:	e02d      	b.n	800d5ac <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d550:	4a18      	ldr	r2, [pc, #96]	; (800d5b4 <f_mount+0x8c>)
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d558:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d006      	beq.n	800d56e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800d560:	69b8      	ldr	r0, [r7, #24]
 800d562:	f7fd ffad 	bl	800b4c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	2200      	movs	r2, #0
 800d56a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d003      	beq.n	800d57c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	490d      	ldr	r1, [pc, #52]	; (800d5b4 <f_mount+0x8c>)
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d002      	beq.n	800d592 <f_mount+0x6a>
 800d58c:	79fb      	ldrb	r3, [r7, #7]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d001      	beq.n	800d596 <f_mount+0x6e>
 800d592:	2300      	movs	r3, #0
 800d594:	e00a      	b.n	800d5ac <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800d596:	f107 0108 	add.w	r1, r7, #8
 800d59a:	f107 030c 	add.w	r3, r7, #12
 800d59e:	2200      	movs	r2, #0
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7ff fc95 	bl	800ced0 <find_volume>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3720      	adds	r7, #32
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	200000ac 	.word	0x200000ac

0800d5b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b096      	sub	sp, #88	; 0x58
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d101      	bne.n	800d5d0 <f_open+0x18>
 800d5cc:	2309      	movs	r3, #9
 800d5ce:	e16d      	b.n	800d8ac <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800d5d6:	79fb      	ldrb	r3, [r7, #7]
 800d5d8:	f003 031f 	and.w	r3, r3, #31
 800d5dc:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800d5de:	79fb      	ldrb	r3, [r7, #7]
 800d5e0:	f023 0301 	bic.w	r3, r3, #1
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	f107 0108 	add.w	r1, r7, #8
 800d5ea:	f107 0320 	add.w	r3, r7, #32
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff fc6e 	bl	800ced0 <find_volume>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800d5fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f040 8152 	bne.w	800d8a8 <f_open+0x2f0>
		INIT_BUF(dj);
 800d604:	f107 0314 	add.w	r3, r7, #20
 800d608:	63bb      	str	r3, [r7, #56]	; 0x38
 800d60a:	4baa      	ldr	r3, [pc, #680]	; (800d8b4 <f_open+0x2fc>)
 800d60c:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800d60e:	68ba      	ldr	r2, [r7, #8]
 800d610:	f107 0320 	add.w	r3, r7, #32
 800d614:	4611      	mov	r1, r2
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff fb44 	bl	800cca4 <follow_path>
 800d61c:	4603      	mov	r3, r0
 800d61e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 800d622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d624:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d118      	bne.n	800d660 <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800d62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d630:	2b00      	cmp	r3, #0
 800d632:	d103      	bne.n	800d63c <f_open+0x84>
				res = FR_INVALID_NAME;
 800d634:	2306      	movs	r3, #6
 800d636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d63a:	e011      	b.n	800d660 <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d63c:	79fb      	ldrb	r3, [r7, #7]
 800d63e:	f023 0301 	bic.w	r3, r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	bf14      	ite	ne
 800d646:	2301      	movne	r3, #1
 800d648:	2300      	moveq	r3, #0
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	461a      	mov	r2, r3
 800d64e:	f107 0320 	add.w	r3, r7, #32
 800d652:	4611      	mov	r1, r2
 800d654:	4618      	mov	r0, r3
 800d656:	f7fd fdb1 	bl	800b1bc <chk_lock>
 800d65a:	4603      	mov	r3, r0
 800d65c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d660:	79fb      	ldrb	r3, [r7, #7]
 800d662:	f003 031c 	and.w	r3, r3, #28
 800d666:	2b00      	cmp	r3, #0
 800d668:	f000 809a 	beq.w	800d7a0 <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 800d66c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d670:	2b00      	cmp	r3, #0
 800d672:	d019      	beq.n	800d6a8 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800d674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d678:	2b04      	cmp	r3, #4
 800d67a:	d10e      	bne.n	800d69a <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d67c:	f7fd fe08 	bl	800b290 <enq_lock>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d006      	beq.n	800d694 <f_open+0xdc>
 800d686:	f107 0320 	add.w	r3, r7, #32
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7ff f85e 	bl	800c74c <dir_register>
 800d690:	4603      	mov	r3, r0
 800d692:	e000      	b.n	800d696 <f_open+0xde>
 800d694:	2312      	movs	r3, #18
 800d696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d69a:	79fb      	ldrb	r3, [r7, #7]
 800d69c:	f043 0308 	orr.w	r3, r3, #8
 800d6a0:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 800d6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a4:	653b      	str	r3, [r7, #80]	; 0x50
 800d6a6:	e012      	b.n	800d6ce <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d6a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6aa:	330b      	adds	r3, #11
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	f003 0311 	and.w	r3, r3, #17
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <f_open+0x106>
					res = FR_DENIED;
 800d6b6:	2307      	movs	r3, #7
 800d6b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d6bc:	e007      	b.n	800d6ce <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800d6be:	79fb      	ldrb	r3, [r7, #7]
 800d6c0:	f003 0304 	and.w	r3, r3, #4
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <f_open+0x116>
						res = FR_EXIST;
 800d6c8:	2308      	movs	r3, #8
 800d6ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d6ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f040 8082 	bne.w	800d7dc <f_open+0x224>
 800d6d8:	79fb      	ldrb	r3, [r7, #7]
 800d6da:	f003 0308 	and.w	r3, r3, #8
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d07c      	beq.n	800d7dc <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 800d6e2:	f7fd fbef 	bl	800aec4 <get_fattime>
 800d6e6:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800d6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ea:	330e      	adds	r3, #14
 800d6ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6ee:	b2d2      	uxtb	r2, r2
 800d6f0:	701a      	strb	r2, [r3, #0]
 800d6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	0a1b      	lsrs	r3, r3, #8
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6fc:	330f      	adds	r3, #15
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	701a      	strb	r2, [r3, #0]
 800d702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d704:	0c1a      	lsrs	r2, r3, #16
 800d706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d708:	3310      	adds	r3, #16
 800d70a:	b2d2      	uxtb	r2, r2
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d710:	0e1a      	lsrs	r2, r3, #24
 800d712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d714:	3311      	adds	r3, #17
 800d716:	b2d2      	uxtb	r2, r2
 800d718:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800d71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d71c:	330b      	adds	r3, #11
 800d71e:	2200      	movs	r2, #0
 800d720:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800d722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d724:	331c      	adds	r3, #28
 800d726:	2200      	movs	r2, #0
 800d728:	701a      	strb	r2, [r3, #0]
 800d72a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d72c:	331d      	adds	r3, #29
 800d72e:	2200      	movs	r2, #0
 800d730:	701a      	strb	r2, [r3, #0]
 800d732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d734:	331e      	adds	r3, #30
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
 800d73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d73c:	331f      	adds	r3, #31
 800d73e:	2200      	movs	r2, #0
 800d740:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800d742:	6a3b      	ldr	r3, [r7, #32]
 800d744:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d746:	4618      	mov	r0, r3
 800d748:	f7fe fd66 	bl	800c218 <ld_clust>
 800d74c:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 800d74e:	2100      	movs	r1, #0
 800d750:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d752:	f7fe fd8e 	bl	800c272 <st_clust>
				dj.fs->wflag = 1;
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	2201      	movs	r2, #1
 800d75a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800d75e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d760:	2b00      	cmp	r3, #0
 800d762:	d03b      	beq.n	800d7dc <f_open+0x224>
					dw = dj.fs->winsect;
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800d76a:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fa43 	bl	800bbfc <remove_chain>
 800d776:	4603      	mov	r3, r0
 800d778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 800d77c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d780:	2b00      	cmp	r3, #0
 800d782:	d12b      	bne.n	800d7dc <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d788:	3a01      	subs	r2, #1
 800d78a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800d78e:	6a3b      	ldr	r3, [r7, #32]
 800d790:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d792:	4618      	mov	r0, r3
 800d794:	f7fd ff07 	bl	800b5a6 <move_window>
 800d798:	4603      	mov	r3, r0
 800d79a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d79e:	e01d      	b.n	800d7dc <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800d7a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d119      	bne.n	800d7dc <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800d7a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7aa:	330b      	adds	r3, #11
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	f003 0310 	and.w	r3, r3, #16
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <f_open+0x206>
					res = FR_NO_FILE;
 800d7b6:	2304      	movs	r3, #4
 800d7b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d7bc:	e00e      	b.n	800d7dc <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800d7be:	79fb      	ldrb	r3, [r7, #7]
 800d7c0:	f003 0302 	and.w	r3, r3, #2
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d009      	beq.n	800d7dc <f_open+0x224>
 800d7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7ca:	330b      	adds	r3, #11
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	f003 0301 	and.w	r3, r3, #1
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d002      	beq.n	800d7dc <f_open+0x224>
						res = FR_DENIED;
 800d7d6:	2307      	movs	r3, #7
 800d7d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 800d7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d129      	bne.n	800d838 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d7e4:	79fb      	ldrb	r3, [r7, #7]
 800d7e6:	f003 0308 	and.w	r3, r3, #8
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <f_open+0x23e>
				mode |= FA__WRITTEN;
 800d7ee:	79fb      	ldrb	r3, [r7, #7]
 800d7f0:	f043 0320 	orr.w	r3, r3, #32
 800d7f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d804:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d806:	79fb      	ldrb	r3, [r7, #7]
 800d808:	f023 0301 	bic.w	r3, r3, #1
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	bf14      	ite	ne
 800d810:	2301      	movne	r3, #1
 800d812:	2300      	moveq	r3, #0
 800d814:	b2db      	uxtb	r3, r3
 800d816:	461a      	mov	r2, r3
 800d818:	f107 0320 	add.w	r3, r7, #32
 800d81c:	4611      	mov	r1, r2
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fd fd5a 	bl	800b2d8 <inc_lock>
 800d824:	4602      	mov	r2, r0
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d102      	bne.n	800d838 <f_open+0x280>
 800d832:	2302      	movs	r3, #2
 800d834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800d838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d133      	bne.n	800d8a8 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	79fa      	ldrb	r2, [r7, #7]
 800d844:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d850:	4618      	mov	r0, r3
 800d852:	f7fe fce1 	bl	800c218 <ld_clust>
 800d856:	4602      	mov	r2, r0
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800d85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85e:	331f      	adds	r3, #31
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	061a      	lsls	r2, r3, #24
 800d864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d866:	331e      	adds	r3, #30
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	041b      	lsls	r3, r3, #16
 800d86c:	4313      	orrs	r3, r2
 800d86e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d870:	321d      	adds	r2, #29
 800d872:	7812      	ldrb	r2, [r2, #0]
 800d874:	0212      	lsls	r2, r2, #8
 800d876:	4313      	orrs	r3, r2
 800d878:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d87a:	321c      	adds	r2, #28
 800d87c:	7812      	ldrb	r2, [r2, #0]
 800d87e:	431a      	orrs	r2, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2200      	movs	r2, #0
 800d888:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2200      	movs	r2, #0
 800d894:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800d896:	6a3a      	ldr	r2, [r7, #32]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800d8a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3758      	adds	r7, #88	; 0x58
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	200000cc 	.word	0x200000cc

0800d8b8 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b08c      	sub	sp, #48	; 0x30
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
 800d8c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f7ff fdfb 	bl	800d4cc <validate>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d8da:	7ffb      	ldrb	r3, [r7, #31]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d001      	beq.n	800d8e4 <f_read+0x2c>
 800d8e0:	7ffb      	ldrb	r3, [r7, #31]
 800d8e2:	e13a      	b.n	800db5a <f_read+0x2a2>
	if (fp->err)								/* Check error */
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	79db      	ldrb	r3, [r3, #7]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	79db      	ldrb	r3, [r3, #7]
 800d8f0:	e133      	b.n	800db5a <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	799b      	ldrb	r3, [r3, #6]
 800d8f6:	f003 0301 	and.w	r3, r3, #1
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d8fe:	2307      	movs	r3, #7
 800d900:	e12b      	b.n	800db5a <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	68da      	ldr	r2, [r3, #12]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	429a      	cmp	r2, r3
 800d914:	f240 811c 	bls.w	800db50 <f_read+0x298>
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d91c:	e118      	b.n	800db50 <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	6812      	ldr	r2, [r2, #0]
 800d926:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d92a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d92e:	fb02 f201 	mul.w	r2, r2, r1
 800d932:	1a9b      	subs	r3, r3, r2
 800d934:	2b00      	cmp	r3, #0
 800d936:	f040 80bc 	bne.w	800dab2 <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	68fa      	ldr	r2, [r7, #12]
 800d940:	6812      	ldr	r2, [r2, #0]
 800d942:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d946:	fbb3 f3f2 	udiv	r3, r3, r2
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d954:	3b01      	subs	r3, #1
 800d956:	b2db      	uxtb	r3, r3
 800d958:	4013      	ands	r3, r2
 800d95a:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800d95c:	7dfb      	ldrb	r3, [r7, #23]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d130      	bne.n	800d9c4 <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d103      	bne.n	800d972 <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d970:	e014      	b.n	800d99c <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d976:	2b00      	cmp	r3, #0
 800d978:	d007      	beq.n	800d98a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	4619      	mov	r1, r3
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7fe fa32 	bl	800bdea <clmt_clust>
 800d986:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d988:	e008      	b.n	800d99c <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	4619      	mov	r1, r3
 800d994:	4610      	mov	r0, r2
 800d996:	f7fd ff03 	bl	800b7a0 <get_fat>
 800d99a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800d99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d804      	bhi.n	800d9ac <f_read+0xf4>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	71da      	strb	r2, [r3, #7]
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	e0d6      	b.n	800db5a <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b2:	d104      	bne.n	800d9be <f_read+0x106>
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	71da      	strb	r2, [r3, #7]
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e0cd      	b.n	800db5a <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9c2:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	695b      	ldr	r3, [r3, #20]
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	f7fd fec5 	bl	800b75e <clust2sect>
 800d9d4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d104      	bne.n	800d9e6 <f_read+0x12e>
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2202      	movs	r2, #2
 800d9e0:	71da      	strb	r2, [r3, #7]
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	e0b9      	b.n	800db5a <f_read+0x2a2>
			sect += csect;
 800d9e6:	7dfb      	ldrb	r3, [r7, #23]
 800d9e8:	693a      	ldr	r2, [r7, #16]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9fe:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	2b00      	cmp	r3, #0
 800da04:	d052      	beq.n	800daac <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800da06:	7dfa      	ldrb	r2, [r7, #23]
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	4413      	add	r3, r2
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	6812      	ldr	r2, [r2, #0]
 800da10:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800da14:	4293      	cmp	r3, r2
 800da16:	d907      	bls.n	800da28 <f_read+0x170>
					cc = fp->fs->csize - csect;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800da20:	461a      	mov	r2, r3
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	1ad3      	subs	r3, r2, r3
 800da26:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	693a      	ldr	r2, [r7, #16]
 800da34:	6a39      	ldr	r1, [r7, #32]
 800da36:	f7fd faeb 	bl	800b010 <disk_read>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d004      	beq.n	800da4a <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	71da      	strb	r2, [r3, #7]
 800da46:	2301      	movs	r3, #1
 800da48:	e087      	b.n	800db5a <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800da52:	2b00      	cmp	r3, #0
 800da54:	d020      	beq.n	800da98 <f_read+0x1e0>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da64:	429a      	cmp	r2, r3
 800da66:	d917      	bls.n	800da98 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	1ad3      	subs	r3, r2, r3
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	6812      	ldr	r2, [r2, #0]
 800da78:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800da7c:	fb02 f303 	mul.w	r3, r2, r3
 800da80:	6a3a      	ldr	r2, [r7, #32]
 800da82:	18d0      	adds	r0, r2, r3
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4619      	mov	r1, r3
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800da92:	461a      	mov	r2, r3
 800da94:	f7fd fb1a 	bl	800b0cc <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800daa0:	461a      	mov	r2, r3
 800daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa4:	fb02 f303 	mul.w	r3, r2, r3
 800daa8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800daaa:	e03d      	b.n	800db28 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800daba:	4618      	mov	r0, r3
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	6812      	ldr	r2, [r2, #0]
 800dac4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dac8:	fbb3 f1f2 	udiv	r1, r3, r2
 800dacc:	fb02 f201 	mul.w	r2, r2, r1
 800dad0:	1a9b      	subs	r3, r3, r2
 800dad2:	1ac3      	subs	r3, r0, r3
 800dad4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800dad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d901      	bls.n	800dae2 <f_read+0x22a>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	4619      	mov	r1, r3
 800daec:	4610      	mov	r0, r2
 800daee:	f7fd fd5a 	bl	800b5a6 <move_window>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d004      	beq.n	800db02 <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2201      	movs	r2, #1
 800dafc:	71da      	strb	r2, [r3, #7]
 800dafe:	2301      	movs	r3, #1
 800db00:	e02b      	b.n	800db5a <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6819      	ldr	r1, [r3, #0]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	6812      	ldr	r2, [r2, #0]
 800db0e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800db12:	fbb3 f0f2 	udiv	r0, r3, r2
 800db16:	fb02 f200 	mul.w	r2, r2, r0
 800db1a:	1a9b      	subs	r3, r3, r2
 800db1c:	440b      	add	r3, r1
 800db1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db20:	4619      	mov	r1, r3
 800db22:	6a38      	ldr	r0, [r7, #32]
 800db24:	f7fd fad2 	bl	800b0cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800db28:	6a3a      	ldr	r2, [r7, #32]
 800db2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2c:	4413      	add	r3, r2
 800db2e:	623b      	str	r3, [r7, #32]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	689a      	ldr	r2, [r3, #8]
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	441a      	add	r2, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	609a      	str	r2, [r3, #8]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db42:	441a      	add	r2, r3
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	f47f aee3 	bne.w	800d91e <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3730      	adds	r7, #48	; 0x30
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b08a      	sub	sp, #40	; 0x28
 800db66:	af00      	add	r7, sp, #0
 800db68:	60f8      	str	r0, [r7, #12]
 800db6a:	60b9      	str	r1, [r7, #8]
 800db6c:	607a      	str	r2, [r7, #4]
 800db6e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	2200      	movs	r2, #0
 800db78:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff fca6 	bl	800d4cc <validate>
 800db80:	4603      	mov	r3, r0
 800db82:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800db84:	7dfb      	ldrb	r3, [r7, #23]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d001      	beq.n	800db8e <f_write+0x2c>
 800db8a:	7dfb      	ldrb	r3, [r7, #23]
 800db8c:	e191      	b.n	800deb2 <f_write+0x350>
	if (fp->err)							/* Check error */
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	79db      	ldrb	r3, [r3, #7]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d002      	beq.n	800db9c <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	79db      	ldrb	r3, [r3, #7]
 800db9a:	e18a      	b.n	800deb2 <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	799b      	ldrb	r3, [r3, #6]
 800dba0:	f003 0302 	and.w	r3, r3, #2
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800dba8:	2307      	movs	r3, #7
 800dbaa:	e182      	b.n	800deb2 <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	689a      	ldr	r2, [r3, #8]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	441a      	add	r2, r3
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	f080 8162 	bcs.w	800de82 <f_write+0x320>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800dbc2:	e15e      	b.n	800de82 <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	689b      	ldr	r3, [r3, #8]
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	6812      	ldr	r2, [r2, #0]
 800dbcc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dbd0:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbd4:	fb02 f201 	mul.w	r2, r2, r1
 800dbd8:	1a9b      	subs	r3, r3, r2
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f040 80fd 	bne.w	800ddda <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	6812      	ldr	r2, [r2, #0]
 800dbe8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dbec:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	4013      	ands	r3, r2
 800dc00:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800dc02:	7dbb      	ldrb	r3, [r7, #22]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d145      	bne.n	800dc94 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10d      	bne.n	800dc2c <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800dc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d11c      	bne.n	800dc56 <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2100      	movs	r1, #0
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fe f844 	bl	800bcb0 <create_chain>
 800dc28:	6278      	str	r0, [r7, #36]	; 0x24
 800dc2a:	e014      	b.n	800dc56 <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d007      	beq.n	800dc44 <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f7fe f8d5 	bl	800bdea <clmt_clust>
 800dc40:	6278      	str	r0, [r7, #36]	; 0x24
 800dc42:	e008      	b.n	800dc56 <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	695b      	ldr	r3, [r3, #20]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4610      	mov	r0, r2
 800dc50:	f7fe f82e 	bl	800bcb0 <create_chain>
 800dc54:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f000 8117 	beq.w	800de8c <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d104      	bne.n	800dc6e <f_write+0x10c>
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2202      	movs	r2, #2
 800dc68:	71da      	strb	r2, [r3, #7]
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	e121      	b.n	800deb2 <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc74:	d104      	bne.n	800dc80 <f_write+0x11e>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	71da      	strb	r2, [r3, #7]
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	e118      	b.n	800deb2 <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc84:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d102      	bne.n	800dc94 <f_write+0x132>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc92:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d10c      	bne.n	800dcbe <f_write+0x15c>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fd fc33 	bl	800b514 <sync_window>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d004      	beq.n	800dcbe <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	71da      	strb	r2, [r3, #7]
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e0f9      	b.n	800deb2 <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4610      	mov	r0, r2
 800dcca:	f7fd fd48 	bl	800b75e <clust2sect>
 800dcce:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d104      	bne.n	800dce0 <f_write+0x17e>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2202      	movs	r2, #2
 800dcda:	71da      	strb	r2, [r3, #7]
 800dcdc:	2302      	movs	r3, #2
 800dcde:	e0e8      	b.n	800deb2 <f_write+0x350>
			sect += csect;
 800dce0:	7dbb      	ldrb	r3, [r7, #22]
 800dce2:	693a      	ldr	r2, [r7, #16]
 800dce4:	4413      	add	r3, r2
 800dce6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcf8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d051      	beq.n	800dda4 <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800dd00:	7dba      	ldrb	r2, [r7, #22]
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	4413      	add	r3, r2
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	6812      	ldr	r2, [r2, #0]
 800dd0a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d907      	bls.n	800dd22 <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	7dbb      	ldrb	r3, [r7, #22]
 800dd1e:	1ad3      	subs	r3, r2, r3
 800dd20:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	693a      	ldr	r2, [r7, #16]
 800dd2e:	69b9      	ldr	r1, [r7, #24]
 800dd30:	f7fd f98e 	bl	800b050 <disk_write>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d004      	beq.n	800dd44 <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	71da      	strb	r2, [r3, #7]
 800dd40:	2301      	movs	r3, #1
 800dd42:	e0b6      	b.n	800deb2 <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	69fa      	ldr	r2, [r7, #28]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d91c      	bls.n	800dd90 <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	6812      	ldr	r2, [r2, #0]
 800dd6c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dd70:	fb02 f303 	mul.w	r3, r2, r3
 800dd74:	69ba      	ldr	r2, [r7, #24]
 800dd76:	18d1      	adds	r1, r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dd80:	461a      	mov	r2, r3
 800dd82:	f7fd f9a3 	bl	800b0cc <mem_cpy>
					fp->fs->wflag = 0;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dd98:	461a      	mov	r2, r3
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	fb02 f303 	mul.w	r3, r2, r3
 800dda0:	623b      	str	r3, [r7, #32]
				continue;
 800dda2:	e05a      	b.n	800de5a <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	689a      	ldr	r2, [r3, #8]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d311      	bcc.n	800ddd4 <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fd fbad 	bl	800b514 <sync_window>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d004      	beq.n	800ddca <f_write+0x268>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	71da      	strb	r2, [r3, #7]
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e073      	b.n	800deb2 <f_write+0x350>
				fp->fs->winsect = sect;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	693a      	ldr	r2, [r7, #16]
 800ddd0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	693a      	ldr	r2, [r7, #16]
 800ddd8:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dde2:	4618      	mov	r0, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	6812      	ldr	r2, [r2, #0]
 800ddec:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ddf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddf4:	fb02 f201 	mul.w	r2, r2, r1
 800ddf8:	1a9b      	subs	r3, r3, r2
 800ddfa:	1ac3      	subs	r3, r0, r3
 800ddfc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800ddfe:	6a3a      	ldr	r2, [r7, #32]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	429a      	cmp	r2, r3
 800de04:	d901      	bls.n	800de0a <f_write+0x2a8>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	699b      	ldr	r3, [r3, #24]
 800de12:	4619      	mov	r1, r3
 800de14:	4610      	mov	r0, r2
 800de16:	f7fd fbc6 	bl	800b5a6 <move_window>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d004      	beq.n	800de2a <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2201      	movs	r2, #1
 800de24:	71da      	strb	r2, [r3, #7]
 800de26:	2301      	movs	r3, #1
 800de28:	e043      	b.n	800deb2 <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6819      	ldr	r1, [r3, #0]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	6812      	ldr	r2, [r2, #0]
 800de36:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800de3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800de3e:	fb02 f200 	mul.w	r2, r2, r0
 800de42:	1a9b      	subs	r3, r3, r2
 800de44:	440b      	add	r3, r1
 800de46:	6a3a      	ldr	r2, [r7, #32]
 800de48:	69b9      	ldr	r1, [r7, #24]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fd f93e 	bl	800b0cc <mem_cpy>
		fp->fs->wflag = 1;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2201      	movs	r2, #1
 800de56:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800de5a:	69ba      	ldr	r2, [r7, #24]
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	4413      	add	r3, r2
 800de60:	61bb      	str	r3, [r7, #24]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	689a      	ldr	r2, [r3, #8]
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	441a      	add	r2, r3
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	609a      	str	r2, [r3, #8]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	6a3b      	ldr	r3, [r7, #32]
 800de74:	441a      	add	r2, r3
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	f47f ae9d 	bne.w	800dbc4 <f_write+0x62>
 800de8a:	e000      	b.n	800de8e <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de8c:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	689a      	ldr	r2, [r3, #8]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	429a      	cmp	r2, r3
 800de98:	d903      	bls.n	800dea2 <f_write+0x340>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	689a      	ldr	r2, [r3, #8]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	799b      	ldrb	r3, [r3, #6]
 800dea6:	f043 0320 	orr.w	r3, r3, #32
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800deb0:	2300      	movs	r3, #0
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3728      	adds	r7, #40	; 0x28
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800deba:	b580      	push	{r7, lr}
 800debc:	b086      	sub	sp, #24
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff fb02 	bl	800d4cc <validate>
 800dec8:	4603      	mov	r3, r0
 800deca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800decc:	7dfb      	ldrb	r3, [r7, #23]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d178      	bne.n	800dfc4 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	799b      	ldrb	r3, [r3, #6]
 800ded6:	f003 0320 	and.w	r3, r3, #32
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d072      	beq.n	800dfc4 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	69db      	ldr	r3, [r3, #28]
 800dee6:	4619      	mov	r1, r3
 800dee8:	4610      	mov	r0, r2
 800deea:	f7fd fb5c 	bl	800b5a6 <move_window>
 800deee:	4603      	mov	r3, r0
 800def0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800def2:	7dfb      	ldrb	r3, [r7, #23]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d165      	bne.n	800dfc4 <f_sync+0x10a>
				dir = fp->dir_ptr;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a1b      	ldr	r3, [r3, #32]
 800defc:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	330b      	adds	r3, #11
 800df02:	781a      	ldrb	r2, [r3, #0]
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	330b      	adds	r3, #11
 800df08:	f042 0220 	orr.w	r2, r2, #32
 800df0c:	b2d2      	uxtb	r2, r2
 800df0e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	68da      	ldr	r2, [r3, #12]
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	331c      	adds	r3, #28
 800df18:	b2d2      	uxtb	r2, r2
 800df1a:	701a      	strb	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	b29b      	uxth	r3, r3
 800df22:	0a1b      	lsrs	r3, r3, #8
 800df24:	b29a      	uxth	r2, r3
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	331d      	adds	r3, #29
 800df2a:	b2d2      	uxtb	r2, r2
 800df2c:	701a      	strb	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	0c1a      	lsrs	r2, r3, #16
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	331e      	adds	r3, #30
 800df38:	b2d2      	uxtb	r2, r2
 800df3a:	701a      	strb	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	0e1a      	lsrs	r2, r3, #24
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	331f      	adds	r3, #31
 800df46:	b2d2      	uxtb	r2, r2
 800df48:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	4619      	mov	r1, r3
 800df50:	6938      	ldr	r0, [r7, #16]
 800df52:	f7fe f98e 	bl	800c272 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800df56:	f7fc ffb5 	bl	800aec4 <get_fattime>
 800df5a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	3316      	adds	r3, #22
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	b2d2      	uxtb	r2, r2
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	0a1b      	lsrs	r3, r3, #8
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	3317      	adds	r3, #23
 800df72:	b2d2      	uxtb	r2, r2
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	0c1a      	lsrs	r2, r3, #16
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	3318      	adds	r3, #24
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	701a      	strb	r2, [r3, #0]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	0e1a      	lsrs	r2, r3, #24
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	3319      	adds	r3, #25
 800df8a:	b2d2      	uxtb	r2, r2
 800df8c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	3312      	adds	r3, #18
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	3313      	adds	r3, #19
 800df9a:	2200      	movs	r2, #0
 800df9c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	799b      	ldrb	r3, [r3, #6]
 800dfa2:	f023 0320 	bic.w	r3, r3, #32
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fd fb21 	bl	800b602 <sync_fs>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3718      	adds	r7, #24
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b084      	sub	sp, #16
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7ff ff6f 	bl	800deba <f_sync>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d114      	bne.n	800e010 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7ff fa70 	bl	800d4cc <validate>
 800dfec:	4603      	mov	r3, r0
 800dfee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10c      	bne.n	800e010 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fd fa1c 	bl	800b438 <dec_lock>
 800e000:	4603      	mov	r3, r0
 800e002:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e004:	7bfb      	ldrb	r3, [r7, #15]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d102      	bne.n	800e010 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e010:	7bfb      	ldrb	r3, [r7, #15]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b090      	sub	sp, #64	; 0x40
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff fa51 	bl	800d4cc <validate>
 800e02a:	4603      	mov	r3, r0
 800e02c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800e030:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <f_lseek+0x24>
 800e038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e03c:	e1c4      	b.n	800e3c8 <f_lseek+0x3ae>
	if (fp->err)						/* Check error */
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	79db      	ldrb	r3, [r3, #7]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <f_lseek+0x32>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	79db      	ldrb	r3, [r3, #7]
 800e04a:	e1bd      	b.n	800e3c8 <f_lseek+0x3ae>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e050:	2b00      	cmp	r3, #0
 800e052:	f000 80b4 	beq.w	800e1be <f_lseek+0x1a4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05c:	d15d      	bne.n	800e11a <f_lseek+0x100>
			tbl = fp->cltbl;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e062:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	1d1a      	adds	r2, r3, #4
 800e068:	627a      	str	r2, [r7, #36]	; 0x24
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	617b      	str	r3, [r7, #20]
 800e06e:	2302      	movs	r3, #2
 800e070:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d03d      	beq.n	800e0fa <f_lseek+0xe0>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e080:	613b      	str	r3, [r7, #16]
 800e082:	2300      	movs	r3, #0
 800e084:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e088:	3302      	adds	r3, #2
 800e08a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08e:	60fb      	str	r3, [r7, #12]
 800e090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e092:	3301      	adds	r3, #1
 800e094:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fd fb7f 	bl	800b7a0 <get_fat>
 800e0a2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d804      	bhi.n	800e0b4 <f_lseek+0x9a>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2202      	movs	r2, #2
 800e0ae:	71da      	strb	r2, [r3, #7]
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	e189      	b.n	800e3c8 <f_lseek+0x3ae>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ba:	d104      	bne.n	800e0c6 <f_lseek+0xac>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	71da      	strb	r2, [r3, #7]
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e180      	b.n	800e3c8 <f_lseek+0x3ae>
					} while (cl == pcl + 1);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d0dd      	beq.n	800e08c <f_lseek+0x72>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e0d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d809      	bhi.n	800e0ec <f_lseek+0xd2>
						*tbl++ = ncl; *tbl++ = tcl;
 800e0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0da:	1d1a      	adds	r2, r3, #4
 800e0dc:	627a      	str	r2, [r7, #36]	; 0x24
 800e0de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	1d1a      	adds	r2, r3, #4
 800e0e6:	627a      	str	r2, [r7, #36]	; 0x24
 800e0e8:	693a      	ldr	r2, [r7, #16]
 800e0ea:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800e0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d3c1      	bcc.n	800e07e <f_lseek+0x64>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e100:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800e102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	429a      	cmp	r2, r3
 800e108:	d803      	bhi.n	800e112 <f_lseek+0xf8>
				*tbl = 0;		/* Terminate table */
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	2200      	movs	r2, #0
 800e10e:	601a      	str	r2, [r3, #0]
 800e110:	e158      	b.n	800e3c4 <f_lseek+0x3aa>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e112:	2311      	movs	r3, #17
 800e114:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e118:	e154      	b.n	800e3c4 <f_lseek+0x3aa>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	429a      	cmp	r2, r3
 800e122:	d902      	bls.n	800e12a <f_lseek+0x110>
				ofs = fp->fsize;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	683a      	ldr	r2, [r7, #0]
 800e12e:	609a      	str	r2, [r3, #8]
			if (ofs) {
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 8146 	beq.w	800e3c4 <f_lseek+0x3aa>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	3b01      	subs	r3, #1
 800e13c:	4619      	mov	r1, r3
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7fd fe53 	bl	800bdea <clmt_clust>
 800e144:	4602      	mov	r2, r0
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	4619      	mov	r1, r3
 800e154:	4610      	mov	r0, r2
 800e156:	f7fd fb02 	bl	800b75e <clust2sect>
 800e15a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d104      	bne.n	800e16c <f_lseek+0x152>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2202      	movs	r2, #2
 800e166:	71da      	strb	r2, [r3, #7]
 800e168:	2302      	movs	r3, #2
 800e16a:	e12d      	b.n	800e3c8 <f_lseek+0x3ae>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	3b01      	subs	r3, #1
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	6812      	ldr	r2, [r2, #0]
 800e174:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800e178:	fbb3 f3f2 	udiv	r3, r3, r2
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	6812      	ldr	r2, [r2, #0]
 800e180:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800e184:	3a01      	subs	r2, #1
 800e186:	4013      	ands	r3, r2
 800e188:	69ba      	ldr	r2, [r7, #24]
 800e18a:	4413      	add	r3, r2
 800e18c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	6812      	ldr	r2, [r2, #0]
 800e196:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800e19a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e19e:	fb02 f201 	mul.w	r2, r2, r1
 800e1a2:	1a9b      	subs	r3, r3, r2
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f000 810d 	beq.w	800e3c4 <f_lseek+0x3aa>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	699b      	ldr	r3, [r3, #24]
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	f000 8107 	beq.w	800e3c4 <f_lseek+0x3aa>
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
						ABORT(fp->fs, FR_DISK_ERR);
#endif
					fp->dsect = dsc;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	69ba      	ldr	r2, [r7, #24]
 800e1ba:	619a      	str	r2, [r3, #24]
 800e1bc:	e102      	b.n	800e3c4 <f_lseek+0x3aa>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	683a      	ldr	r2, [r7, #0]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d908      	bls.n	800e1da <f_lseek+0x1c0>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	799b      	ldrb	r3, [r3, #6]
 800e1cc:	f003 0302 	and.w	r3, r3, #2
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d102      	bne.n	800e1da <f_lseek+0x1c0>
#endif
			) ofs = fp->fsize;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	637b      	str	r3, [r7, #52]	; 0x34
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1e8:	609a      	str	r2, [r3, #8]
		if (ofs) {
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f000 80c3 	beq.w	800e378 <f_lseek+0x35e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800e204:	fb03 f302 	mul.w	r3, r3, r2
 800e208:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d01b      	beq.n	800e248 <f_lseek+0x22e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	1e5a      	subs	r2, r3, #1
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	fbb2 f2f3 	udiv	r2, r2, r3
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	1e59      	subs	r1, r3, #1
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e224:	429a      	cmp	r2, r3
 800e226:	d30f      	bcc.n	800e248 <f_lseek+0x22e>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800e228:	6a3b      	ldr	r3, [r7, #32]
 800e22a:	1e5a      	subs	r2, r3, #1
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	425b      	negs	r3, r3
 800e230:	401a      	ands	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	1ad3      	subs	r3, r2, r3
 800e23e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	63bb      	str	r3, [r7, #56]	; 0x38
 800e246:	e023      	b.n	800e290 <f_lseek+0x276>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e250:	2b00      	cmp	r3, #0
 800e252:	d11a      	bne.n	800e28a <f_lseek+0x270>
					clst = create_chain(fp->fs, 0);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2100      	movs	r1, #0
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fd fd28 	bl	800bcb0 <create_chain>
 800e260:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800e262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e264:	2b01      	cmp	r3, #1
 800e266:	d104      	bne.n	800e272 <f_lseek+0x258>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2202      	movs	r2, #2
 800e26c:	71da      	strb	r2, [r3, #7]
 800e26e:	2302      	movs	r3, #2
 800e270:	e0aa      	b.n	800e3c8 <f_lseek+0x3ae>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e278:	d104      	bne.n	800e284 <f_lseek+0x26a>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2201      	movs	r2, #1
 800e27e:	71da      	strb	r2, [r3, #7]
 800e280:	2301      	movs	r3, #1
 800e282:	e0a1      	b.n	800e3c8 <f_lseek+0x3ae>
					fp->sclust = clst;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e288:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e28e:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	2b00      	cmp	r3, #0
 800e294:	d070      	beq.n	800e378 <f_lseek+0x35e>
				while (ofs > bcs) {						/* Cluster following loop */
 800e296:	e03e      	b.n	800e316 <f_lseek+0x2fc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	799b      	ldrb	r3, [r3, #6]
 800e29c:	f003 0302 	and.w	r3, r3, #2
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00c      	beq.n	800e2be <f_lseek+0x2a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fd fd00 	bl	800bcb0 <create_chain>
 800e2b0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d109      	bne.n	800e2cc <f_lseek+0x2b2>
							ofs = bcs; break;
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	603b      	str	r3, [r7, #0]
 800e2bc:	e02f      	b.n	800e31e <f_lseek+0x304>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fd fa6b 	bl	800b7a0 <get_fat>
 800e2ca:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d2:	d104      	bne.n	800e2de <f_lseek+0x2c4>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	71da      	strb	r2, [r3, #7]
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e074      	b.n	800e3c8 <f_lseek+0x3ae>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800e2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d906      	bls.n	800e2f2 <f_lseek+0x2d8>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800e2ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d304      	bcc.n	800e2fc <f_lseek+0x2e2>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	71da      	strb	r2, [r3, #7]
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	e065      	b.n	800e3c8 <f_lseek+0x3ae>
					fp->clust = clst;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e300:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	689a      	ldr	r2, [r3, #8]
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	441a      	add	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d8bc      	bhi.n	800e298 <f_lseek+0x27e>
				}
				fp->fptr += ofs;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	689a      	ldr	r2, [r3, #8]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	441a      	add	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800e332:	461a      	mov	r2, r3
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	fbb3 f1f2 	udiv	r1, r3, r2
 800e33a:	fb02 f201 	mul.w	r2, r2, r1
 800e33e:	1a9b      	subs	r3, r3, r2
 800e340:	2b00      	cmp	r3, #0
 800e342:	d019      	beq.n	800e378 <f_lseek+0x35e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fd fa07 	bl	800b75e <clust2sect>
 800e350:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800e352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e354:	2b00      	cmp	r3, #0
 800e356:	d104      	bne.n	800e362 <f_lseek+0x348>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2202      	movs	r2, #2
 800e35c:	71da      	strb	r2, [r3, #7]
 800e35e:	2302      	movs	r3, #2
 800e360:	e032      	b.n	800e3c8 <f_lseek+0x3ae>
					nsect += ofs / SS(fp->fs);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800e36a:	461a      	mov	r2, r3
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e374:	4413      	add	r3, r2
 800e376:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	6812      	ldr	r2, [r2, #0]
 800e380:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800e384:	fbb3 f1f2 	udiv	r1, r3, r2
 800e388:	fb02 f201 	mul.w	r2, r2, r1
 800e38c:	1a9b      	subs	r3, r3, r2
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d007      	beq.n	800e3a2 <f_lseek+0x388>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	699b      	ldr	r3, [r3, #24]
 800e396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e398:	429a      	cmp	r2, r3
 800e39a:	d002      	beq.n	800e3a2 <f_lseek+0x388>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3a0:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	689a      	ldr	r2, [r3, #8]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d90a      	bls.n	800e3c4 <f_lseek+0x3aa>
			fp->fsize = fp->fptr;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	689a      	ldr	r2, [r3, #8]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	799b      	ldrb	r3, [r3, #6]
 800e3ba:	f043 0320 	orr.w	r3, r3, #32
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800e3c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3740      	adds	r7, #64	; 0x40
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b087      	sub	sp, #28
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800e3e6:	4b1e      	ldr	r3, [pc, #120]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e3e8:	7a5b      	ldrb	r3, [r3, #9]
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d831      	bhi.n	800e454 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e3f0:	4b1b      	ldr	r3, [pc, #108]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e3f2:	7a5b      	ldrb	r3, [r3, #9]
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	4b19      	ldr	r3, [pc, #100]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800e3fe:	4b18      	ldr	r3, [pc, #96]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e400:	7a5b      	ldrb	r3, [r3, #9]
 800e402:	b2db      	uxtb	r3, r3
 800e404:	4a16      	ldr	r2, [pc, #88]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800e40e:	4b14      	ldr	r3, [pc, #80]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e410:	7a5b      	ldrb	r3, [r3, #9]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	461a      	mov	r2, r3
 800e416:	4b12      	ldr	r3, [pc, #72]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e418:	4413      	add	r3, r2
 800e41a:	79fa      	ldrb	r2, [r7, #7]
 800e41c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e41e:	4b10      	ldr	r3, [pc, #64]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e420:	7a5b      	ldrb	r3, [r3, #9]
 800e422:	b2db      	uxtb	r3, r3
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	b2d1      	uxtb	r1, r2
 800e428:	4a0d      	ldr	r2, [pc, #52]	; (800e460 <FATFS_LinkDriverEx+0x90>)
 800e42a:	7251      	strb	r1, [r2, #9]
 800e42c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e42e:	7dbb      	ldrb	r3, [r7, #22]
 800e430:	3330      	adds	r3, #48	; 0x30
 800e432:	b2da      	uxtb	r2, r3
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	3301      	adds	r3, #1
 800e43c:	223a      	movs	r2, #58	; 0x3a
 800e43e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	3302      	adds	r3, #2
 800e444:	222f      	movs	r2, #47	; 0x2f
 800e446:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	3303      	adds	r3, #3
 800e44c:	2200      	movs	r2, #0
 800e44e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e450:	2300      	movs	r3, #0
 800e452:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800e454:	7dfb      	ldrb	r3, [r7, #23]
}
 800e456:	4618      	mov	r0, r3
 800e458:	371c      	adds	r7, #28
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bc80      	pop	{r7}
 800e45e:	4770      	bx	lr
 800e460:	200002cc 	.word	0x200002cc

0800e464 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e46e:	2200      	movs	r2, #0
 800e470:	6839      	ldr	r1, [r7, #0]
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff ffac 	bl	800e3d0 <FATFS_LinkDriverEx>
 800e478:	4603      	mov	r3, r0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
	...

0800e484 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	4603      	mov	r3, r0
 800e48c:	6039      	str	r1, [r7, #0]
 800e48e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e490:	88fb      	ldrh	r3, [r7, #6]
 800e492:	2b7f      	cmp	r3, #127	; 0x7f
 800e494:	d802      	bhi.n	800e49c <ff_convert+0x18>
		c = chr;
 800e496:	88fb      	ldrh	r3, [r7, #6]
 800e498:	81fb      	strh	r3, [r7, #14]
 800e49a:	e025      	b.n	800e4e8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00b      	beq.n	800e4ba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e4a2:	88fb      	ldrh	r3, [r7, #6]
 800e4a4:	2bff      	cmp	r3, #255	; 0xff
 800e4a6:	d805      	bhi.n	800e4b4 <ff_convert+0x30>
 800e4a8:	88fb      	ldrh	r3, [r7, #6]
 800e4aa:	3b80      	subs	r3, #128	; 0x80
 800e4ac:	4a11      	ldr	r2, [pc, #68]	; (800e4f4 <ff_convert+0x70>)
 800e4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4b2:	e000      	b.n	800e4b6 <ff_convert+0x32>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	81fb      	strh	r3, [r7, #14]
 800e4b8:	e016      	b.n	800e4e8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	81fb      	strh	r3, [r7, #14]
 800e4be:	e009      	b.n	800e4d4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e4c0:	89fb      	ldrh	r3, [r7, #14]
 800e4c2:	4a0c      	ldr	r2, [pc, #48]	; (800e4f4 <ff_convert+0x70>)
 800e4c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4c8:	88fa      	ldrh	r2, [r7, #6]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d006      	beq.n	800e4dc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e4ce:	89fb      	ldrh	r3, [r7, #14]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	81fb      	strh	r3, [r7, #14]
 800e4d4:	89fb      	ldrh	r3, [r7, #14]
 800e4d6:	2b7f      	cmp	r3, #127	; 0x7f
 800e4d8:	d9f2      	bls.n	800e4c0 <ff_convert+0x3c>
 800e4da:	e000      	b.n	800e4de <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e4dc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e4de:	89fb      	ldrh	r3, [r7, #14]
 800e4e0:	3380      	adds	r3, #128	; 0x80
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e4e8:	89fb      	ldrh	r3, [r7, #14]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3714      	adds	r7, #20
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bc80      	pop	{r7}
 800e4f2:	4770      	bx	lr
 800e4f4:	0800f05c 	.word	0x0800f05c

0800e4f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800e502:	2300      	movs	r3, #0
 800e504:	60fb      	str	r3, [r7, #12]
 800e506:	e002      	b.n	800e50e <ff_wtoupper+0x16>
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	3301      	adds	r3, #1
 800e50c:	60fb      	str	r3, [r7, #12]
 800e50e:	4a0f      	ldr	r2, [pc, #60]	; (800e54c <ff_wtoupper+0x54>)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d006      	beq.n	800e528 <ff_wtoupper+0x30>
 800e51a:	4a0c      	ldr	r2, [pc, #48]	; (800e54c <ff_wtoupper+0x54>)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e522:	88fa      	ldrh	r2, [r7, #6]
 800e524:	429a      	cmp	r2, r3
 800e526:	d1ef      	bne.n	800e508 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800e528:	4a08      	ldr	r2, [pc, #32]	; (800e54c <ff_wtoupper+0x54>)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d004      	beq.n	800e53e <ff_wtoupper+0x46>
 800e534:	4a06      	ldr	r2, [pc, #24]	; (800e550 <ff_wtoupper+0x58>)
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e53c:	e000      	b.n	800e540 <ff_wtoupper+0x48>
 800e53e:	88fb      	ldrh	r3, [r7, #6]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3714      	adds	r7, #20
 800e544:	46bd      	mov	sp, r7
 800e546:	bc80      	pop	{r7}
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	0800f15c 	.word	0x0800f15c
 800e550:	0800f33c 	.word	0x0800f33c

0800e554 <__errno>:
 800e554:	4b01      	ldr	r3, [pc, #4]	; (800e55c <__errno+0x8>)
 800e556:	6818      	ldr	r0, [r3, #0]
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop
 800e55c:	20000024 	.word	0x20000024

0800e560 <__libc_init_array>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	2600      	movs	r6, #0
 800e564:	4d0c      	ldr	r5, [pc, #48]	; (800e598 <__libc_init_array+0x38>)
 800e566:	4c0d      	ldr	r4, [pc, #52]	; (800e59c <__libc_init_array+0x3c>)
 800e568:	1b64      	subs	r4, r4, r5
 800e56a:	10a4      	asrs	r4, r4, #2
 800e56c:	42a6      	cmp	r6, r4
 800e56e:	d109      	bne.n	800e584 <__libc_init_array+0x24>
 800e570:	f000 fc5c 	bl	800ee2c <_init>
 800e574:	2600      	movs	r6, #0
 800e576:	4d0a      	ldr	r5, [pc, #40]	; (800e5a0 <__libc_init_array+0x40>)
 800e578:	4c0a      	ldr	r4, [pc, #40]	; (800e5a4 <__libc_init_array+0x44>)
 800e57a:	1b64      	subs	r4, r4, r5
 800e57c:	10a4      	asrs	r4, r4, #2
 800e57e:	42a6      	cmp	r6, r4
 800e580:	d105      	bne.n	800e58e <__libc_init_array+0x2e>
 800e582:	bd70      	pop	{r4, r5, r6, pc}
 800e584:	f855 3b04 	ldr.w	r3, [r5], #4
 800e588:	4798      	blx	r3
 800e58a:	3601      	adds	r6, #1
 800e58c:	e7ee      	b.n	800e56c <__libc_init_array+0xc>
 800e58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e592:	4798      	blx	r3
 800e594:	3601      	adds	r6, #1
 800e596:	e7f2      	b.n	800e57e <__libc_init_array+0x1e>
 800e598:	0800f550 	.word	0x0800f550
 800e59c:	0800f550 	.word	0x0800f550
 800e5a0:	0800f550 	.word	0x0800f550
 800e5a4:	0800f554 	.word	0x0800f554

0800e5a8 <memset>:
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	4402      	add	r2, r0
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d100      	bne.n	800e5b2 <memset+0xa>
 800e5b0:	4770      	bx	lr
 800e5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800e5b6:	e7f9      	b.n	800e5ac <memset+0x4>

0800e5b8 <siprintf>:
 800e5b8:	b40e      	push	{r1, r2, r3}
 800e5ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5be:	b500      	push	{lr}
 800e5c0:	b09c      	sub	sp, #112	; 0x70
 800e5c2:	ab1d      	add	r3, sp, #116	; 0x74
 800e5c4:	9002      	str	r0, [sp, #8]
 800e5c6:	9006      	str	r0, [sp, #24]
 800e5c8:	9107      	str	r1, [sp, #28]
 800e5ca:	9104      	str	r1, [sp, #16]
 800e5cc:	4808      	ldr	r0, [pc, #32]	; (800e5f0 <siprintf+0x38>)
 800e5ce:	4909      	ldr	r1, [pc, #36]	; (800e5f4 <siprintf+0x3c>)
 800e5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d4:	9105      	str	r1, [sp, #20]
 800e5d6:	6800      	ldr	r0, [r0, #0]
 800e5d8:	a902      	add	r1, sp, #8
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	f000 f868 	bl	800e6b0 <_svfiprintf_r>
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	9b02      	ldr	r3, [sp, #8]
 800e5e4:	701a      	strb	r2, [r3, #0]
 800e5e6:	b01c      	add	sp, #112	; 0x70
 800e5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5ec:	b003      	add	sp, #12
 800e5ee:	4770      	bx	lr
 800e5f0:	20000024 	.word	0x20000024
 800e5f4:	ffff0208 	.word	0xffff0208

0800e5f8 <__ssputs_r>:
 800e5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5fc:	688e      	ldr	r6, [r1, #8]
 800e5fe:	4682      	mov	sl, r0
 800e600:	429e      	cmp	r6, r3
 800e602:	460c      	mov	r4, r1
 800e604:	4690      	mov	r8, r2
 800e606:	461f      	mov	r7, r3
 800e608:	d838      	bhi.n	800e67c <__ssputs_r+0x84>
 800e60a:	898a      	ldrh	r2, [r1, #12]
 800e60c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e610:	d032      	beq.n	800e678 <__ssputs_r+0x80>
 800e612:	6825      	ldr	r5, [r4, #0]
 800e614:	6909      	ldr	r1, [r1, #16]
 800e616:	3301      	adds	r3, #1
 800e618:	eba5 0901 	sub.w	r9, r5, r1
 800e61c:	6965      	ldr	r5, [r4, #20]
 800e61e:	444b      	add	r3, r9
 800e620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e628:	106d      	asrs	r5, r5, #1
 800e62a:	429d      	cmp	r5, r3
 800e62c:	bf38      	it	cc
 800e62e:	461d      	movcc	r5, r3
 800e630:	0553      	lsls	r3, r2, #21
 800e632:	d531      	bpl.n	800e698 <__ssputs_r+0xa0>
 800e634:	4629      	mov	r1, r5
 800e636:	f000 fb53 	bl	800ece0 <_malloc_r>
 800e63a:	4606      	mov	r6, r0
 800e63c:	b950      	cbnz	r0, 800e654 <__ssputs_r+0x5c>
 800e63e:	230c      	movs	r3, #12
 800e640:	f04f 30ff 	mov.w	r0, #4294967295
 800e644:	f8ca 3000 	str.w	r3, [sl]
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e64e:	81a3      	strh	r3, [r4, #12]
 800e650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e654:	464a      	mov	r2, r9
 800e656:	6921      	ldr	r1, [r4, #16]
 800e658:	f000 face 	bl	800ebf8 <memcpy>
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e666:	81a3      	strh	r3, [r4, #12]
 800e668:	6126      	str	r6, [r4, #16]
 800e66a:	444e      	add	r6, r9
 800e66c:	6026      	str	r6, [r4, #0]
 800e66e:	463e      	mov	r6, r7
 800e670:	6165      	str	r5, [r4, #20]
 800e672:	eba5 0509 	sub.w	r5, r5, r9
 800e676:	60a5      	str	r5, [r4, #8]
 800e678:	42be      	cmp	r6, r7
 800e67a:	d900      	bls.n	800e67e <__ssputs_r+0x86>
 800e67c:	463e      	mov	r6, r7
 800e67e:	4632      	mov	r2, r6
 800e680:	4641      	mov	r1, r8
 800e682:	6820      	ldr	r0, [r4, #0]
 800e684:	f000 fac6 	bl	800ec14 <memmove>
 800e688:	68a3      	ldr	r3, [r4, #8]
 800e68a:	6822      	ldr	r2, [r4, #0]
 800e68c:	1b9b      	subs	r3, r3, r6
 800e68e:	4432      	add	r2, r6
 800e690:	2000      	movs	r0, #0
 800e692:	60a3      	str	r3, [r4, #8]
 800e694:	6022      	str	r2, [r4, #0]
 800e696:	e7db      	b.n	800e650 <__ssputs_r+0x58>
 800e698:	462a      	mov	r2, r5
 800e69a:	f000 fb7b 	bl	800ed94 <_realloc_r>
 800e69e:	4606      	mov	r6, r0
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d1e1      	bne.n	800e668 <__ssputs_r+0x70>
 800e6a4:	4650      	mov	r0, sl
 800e6a6:	6921      	ldr	r1, [r4, #16]
 800e6a8:	f000 face 	bl	800ec48 <_free_r>
 800e6ac:	e7c7      	b.n	800e63e <__ssputs_r+0x46>
	...

0800e6b0 <_svfiprintf_r>:
 800e6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	4698      	mov	r8, r3
 800e6b6:	898b      	ldrh	r3, [r1, #12]
 800e6b8:	4607      	mov	r7, r0
 800e6ba:	061b      	lsls	r3, r3, #24
 800e6bc:	460d      	mov	r5, r1
 800e6be:	4614      	mov	r4, r2
 800e6c0:	b09d      	sub	sp, #116	; 0x74
 800e6c2:	d50e      	bpl.n	800e6e2 <_svfiprintf_r+0x32>
 800e6c4:	690b      	ldr	r3, [r1, #16]
 800e6c6:	b963      	cbnz	r3, 800e6e2 <_svfiprintf_r+0x32>
 800e6c8:	2140      	movs	r1, #64	; 0x40
 800e6ca:	f000 fb09 	bl	800ece0 <_malloc_r>
 800e6ce:	6028      	str	r0, [r5, #0]
 800e6d0:	6128      	str	r0, [r5, #16]
 800e6d2:	b920      	cbnz	r0, 800e6de <_svfiprintf_r+0x2e>
 800e6d4:	230c      	movs	r3, #12
 800e6d6:	603b      	str	r3, [r7, #0]
 800e6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6dc:	e0d1      	b.n	800e882 <_svfiprintf_r+0x1d2>
 800e6de:	2340      	movs	r3, #64	; 0x40
 800e6e0:	616b      	str	r3, [r5, #20]
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e6e6:	2320      	movs	r3, #32
 800e6e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6ec:	2330      	movs	r3, #48	; 0x30
 800e6ee:	f04f 0901 	mov.w	r9, #1
 800e6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e89c <_svfiprintf_r+0x1ec>
 800e6fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6fe:	4623      	mov	r3, r4
 800e700:	469a      	mov	sl, r3
 800e702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e706:	b10a      	cbz	r2, 800e70c <_svfiprintf_r+0x5c>
 800e708:	2a25      	cmp	r2, #37	; 0x25
 800e70a:	d1f9      	bne.n	800e700 <_svfiprintf_r+0x50>
 800e70c:	ebba 0b04 	subs.w	fp, sl, r4
 800e710:	d00b      	beq.n	800e72a <_svfiprintf_r+0x7a>
 800e712:	465b      	mov	r3, fp
 800e714:	4622      	mov	r2, r4
 800e716:	4629      	mov	r1, r5
 800e718:	4638      	mov	r0, r7
 800e71a:	f7ff ff6d 	bl	800e5f8 <__ssputs_r>
 800e71e:	3001      	adds	r0, #1
 800e720:	f000 80aa 	beq.w	800e878 <_svfiprintf_r+0x1c8>
 800e724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e726:	445a      	add	r2, fp
 800e728:	9209      	str	r2, [sp, #36]	; 0x24
 800e72a:	f89a 3000 	ldrb.w	r3, [sl]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f000 80a2 	beq.w	800e878 <_svfiprintf_r+0x1c8>
 800e734:	2300      	movs	r3, #0
 800e736:	f04f 32ff 	mov.w	r2, #4294967295
 800e73a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e73e:	f10a 0a01 	add.w	sl, sl, #1
 800e742:	9304      	str	r3, [sp, #16]
 800e744:	9307      	str	r3, [sp, #28]
 800e746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e74a:	931a      	str	r3, [sp, #104]	; 0x68
 800e74c:	4654      	mov	r4, sl
 800e74e:	2205      	movs	r2, #5
 800e750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e754:	4851      	ldr	r0, [pc, #324]	; (800e89c <_svfiprintf_r+0x1ec>)
 800e756:	f000 fa41 	bl	800ebdc <memchr>
 800e75a:	9a04      	ldr	r2, [sp, #16]
 800e75c:	b9d8      	cbnz	r0, 800e796 <_svfiprintf_r+0xe6>
 800e75e:	06d0      	lsls	r0, r2, #27
 800e760:	bf44      	itt	mi
 800e762:	2320      	movmi	r3, #32
 800e764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e768:	0711      	lsls	r1, r2, #28
 800e76a:	bf44      	itt	mi
 800e76c:	232b      	movmi	r3, #43	; 0x2b
 800e76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e772:	f89a 3000 	ldrb.w	r3, [sl]
 800e776:	2b2a      	cmp	r3, #42	; 0x2a
 800e778:	d015      	beq.n	800e7a6 <_svfiprintf_r+0xf6>
 800e77a:	4654      	mov	r4, sl
 800e77c:	2000      	movs	r0, #0
 800e77e:	f04f 0c0a 	mov.w	ip, #10
 800e782:	9a07      	ldr	r2, [sp, #28]
 800e784:	4621      	mov	r1, r4
 800e786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e78a:	3b30      	subs	r3, #48	; 0x30
 800e78c:	2b09      	cmp	r3, #9
 800e78e:	d94e      	bls.n	800e82e <_svfiprintf_r+0x17e>
 800e790:	b1b0      	cbz	r0, 800e7c0 <_svfiprintf_r+0x110>
 800e792:	9207      	str	r2, [sp, #28]
 800e794:	e014      	b.n	800e7c0 <_svfiprintf_r+0x110>
 800e796:	eba0 0308 	sub.w	r3, r0, r8
 800e79a:	fa09 f303 	lsl.w	r3, r9, r3
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	46a2      	mov	sl, r4
 800e7a2:	9304      	str	r3, [sp, #16]
 800e7a4:	e7d2      	b.n	800e74c <_svfiprintf_r+0x9c>
 800e7a6:	9b03      	ldr	r3, [sp, #12]
 800e7a8:	1d19      	adds	r1, r3, #4
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	9103      	str	r1, [sp, #12]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	bfbb      	ittet	lt
 800e7b2:	425b      	neglt	r3, r3
 800e7b4:	f042 0202 	orrlt.w	r2, r2, #2
 800e7b8:	9307      	strge	r3, [sp, #28]
 800e7ba:	9307      	strlt	r3, [sp, #28]
 800e7bc:	bfb8      	it	lt
 800e7be:	9204      	strlt	r2, [sp, #16]
 800e7c0:	7823      	ldrb	r3, [r4, #0]
 800e7c2:	2b2e      	cmp	r3, #46	; 0x2e
 800e7c4:	d10c      	bne.n	800e7e0 <_svfiprintf_r+0x130>
 800e7c6:	7863      	ldrb	r3, [r4, #1]
 800e7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e7ca:	d135      	bne.n	800e838 <_svfiprintf_r+0x188>
 800e7cc:	9b03      	ldr	r3, [sp, #12]
 800e7ce:	3402      	adds	r4, #2
 800e7d0:	1d1a      	adds	r2, r3, #4
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	9203      	str	r2, [sp, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bfb8      	it	lt
 800e7da:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7de:	9305      	str	r3, [sp, #20]
 800e7e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e8ac <_svfiprintf_r+0x1fc>
 800e7e4:	2203      	movs	r2, #3
 800e7e6:	4650      	mov	r0, sl
 800e7e8:	7821      	ldrb	r1, [r4, #0]
 800e7ea:	f000 f9f7 	bl	800ebdc <memchr>
 800e7ee:	b140      	cbz	r0, 800e802 <_svfiprintf_r+0x152>
 800e7f0:	2340      	movs	r3, #64	; 0x40
 800e7f2:	eba0 000a 	sub.w	r0, r0, sl
 800e7f6:	fa03 f000 	lsl.w	r0, r3, r0
 800e7fa:	9b04      	ldr	r3, [sp, #16]
 800e7fc:	3401      	adds	r4, #1
 800e7fe:	4303      	orrs	r3, r0
 800e800:	9304      	str	r3, [sp, #16]
 800e802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e806:	2206      	movs	r2, #6
 800e808:	4825      	ldr	r0, [pc, #148]	; (800e8a0 <_svfiprintf_r+0x1f0>)
 800e80a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e80e:	f000 f9e5 	bl	800ebdc <memchr>
 800e812:	2800      	cmp	r0, #0
 800e814:	d038      	beq.n	800e888 <_svfiprintf_r+0x1d8>
 800e816:	4b23      	ldr	r3, [pc, #140]	; (800e8a4 <_svfiprintf_r+0x1f4>)
 800e818:	bb1b      	cbnz	r3, 800e862 <_svfiprintf_r+0x1b2>
 800e81a:	9b03      	ldr	r3, [sp, #12]
 800e81c:	3307      	adds	r3, #7
 800e81e:	f023 0307 	bic.w	r3, r3, #7
 800e822:	3308      	adds	r3, #8
 800e824:	9303      	str	r3, [sp, #12]
 800e826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e828:	4433      	add	r3, r6
 800e82a:	9309      	str	r3, [sp, #36]	; 0x24
 800e82c:	e767      	b.n	800e6fe <_svfiprintf_r+0x4e>
 800e82e:	460c      	mov	r4, r1
 800e830:	2001      	movs	r0, #1
 800e832:	fb0c 3202 	mla	r2, ip, r2, r3
 800e836:	e7a5      	b.n	800e784 <_svfiprintf_r+0xd4>
 800e838:	2300      	movs	r3, #0
 800e83a:	f04f 0c0a 	mov.w	ip, #10
 800e83e:	4619      	mov	r1, r3
 800e840:	3401      	adds	r4, #1
 800e842:	9305      	str	r3, [sp, #20]
 800e844:	4620      	mov	r0, r4
 800e846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e84a:	3a30      	subs	r2, #48	; 0x30
 800e84c:	2a09      	cmp	r2, #9
 800e84e:	d903      	bls.n	800e858 <_svfiprintf_r+0x1a8>
 800e850:	2b00      	cmp	r3, #0
 800e852:	d0c5      	beq.n	800e7e0 <_svfiprintf_r+0x130>
 800e854:	9105      	str	r1, [sp, #20]
 800e856:	e7c3      	b.n	800e7e0 <_svfiprintf_r+0x130>
 800e858:	4604      	mov	r4, r0
 800e85a:	2301      	movs	r3, #1
 800e85c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e860:	e7f0      	b.n	800e844 <_svfiprintf_r+0x194>
 800e862:	ab03      	add	r3, sp, #12
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	462a      	mov	r2, r5
 800e868:	4638      	mov	r0, r7
 800e86a:	4b0f      	ldr	r3, [pc, #60]	; (800e8a8 <_svfiprintf_r+0x1f8>)
 800e86c:	a904      	add	r1, sp, #16
 800e86e:	f3af 8000 	nop.w
 800e872:	1c42      	adds	r2, r0, #1
 800e874:	4606      	mov	r6, r0
 800e876:	d1d6      	bne.n	800e826 <_svfiprintf_r+0x176>
 800e878:	89ab      	ldrh	r3, [r5, #12]
 800e87a:	065b      	lsls	r3, r3, #25
 800e87c:	f53f af2c 	bmi.w	800e6d8 <_svfiprintf_r+0x28>
 800e880:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e882:	b01d      	add	sp, #116	; 0x74
 800e884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e888:	ab03      	add	r3, sp, #12
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	462a      	mov	r2, r5
 800e88e:	4638      	mov	r0, r7
 800e890:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <_svfiprintf_r+0x1f8>)
 800e892:	a904      	add	r1, sp, #16
 800e894:	f000 f87c 	bl	800e990 <_printf_i>
 800e898:	e7eb      	b.n	800e872 <_svfiprintf_r+0x1c2>
 800e89a:	bf00      	nop
 800e89c:	0800f51c 	.word	0x0800f51c
 800e8a0:	0800f526 	.word	0x0800f526
 800e8a4:	00000000 	.word	0x00000000
 800e8a8:	0800e5f9 	.word	0x0800e5f9
 800e8ac:	0800f522 	.word	0x0800f522

0800e8b0 <_printf_common>:
 800e8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b4:	4616      	mov	r6, r2
 800e8b6:	4699      	mov	r9, r3
 800e8b8:	688a      	ldr	r2, [r1, #8]
 800e8ba:	690b      	ldr	r3, [r1, #16]
 800e8bc:	4607      	mov	r7, r0
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	bfb8      	it	lt
 800e8c2:	4613      	movlt	r3, r2
 800e8c4:	6033      	str	r3, [r6, #0]
 800e8c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8d0:	b10a      	cbz	r2, 800e8d6 <_printf_common+0x26>
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	6033      	str	r3, [r6, #0]
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	0699      	lsls	r1, r3, #26
 800e8da:	bf42      	ittt	mi
 800e8dc:	6833      	ldrmi	r3, [r6, #0]
 800e8de:	3302      	addmi	r3, #2
 800e8e0:	6033      	strmi	r3, [r6, #0]
 800e8e2:	6825      	ldr	r5, [r4, #0]
 800e8e4:	f015 0506 	ands.w	r5, r5, #6
 800e8e8:	d106      	bne.n	800e8f8 <_printf_common+0x48>
 800e8ea:	f104 0a19 	add.w	sl, r4, #25
 800e8ee:	68e3      	ldr	r3, [r4, #12]
 800e8f0:	6832      	ldr	r2, [r6, #0]
 800e8f2:	1a9b      	subs	r3, r3, r2
 800e8f4:	42ab      	cmp	r3, r5
 800e8f6:	dc28      	bgt.n	800e94a <_printf_common+0x9a>
 800e8f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8fc:	1e13      	subs	r3, r2, #0
 800e8fe:	6822      	ldr	r2, [r4, #0]
 800e900:	bf18      	it	ne
 800e902:	2301      	movne	r3, #1
 800e904:	0692      	lsls	r2, r2, #26
 800e906:	d42d      	bmi.n	800e964 <_printf_common+0xb4>
 800e908:	4649      	mov	r1, r9
 800e90a:	4638      	mov	r0, r7
 800e90c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e910:	47c0      	blx	r8
 800e912:	3001      	adds	r0, #1
 800e914:	d020      	beq.n	800e958 <_printf_common+0xa8>
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	68e5      	ldr	r5, [r4, #12]
 800e91a:	f003 0306 	and.w	r3, r3, #6
 800e91e:	2b04      	cmp	r3, #4
 800e920:	bf18      	it	ne
 800e922:	2500      	movne	r5, #0
 800e924:	6832      	ldr	r2, [r6, #0]
 800e926:	f04f 0600 	mov.w	r6, #0
 800e92a:	68a3      	ldr	r3, [r4, #8]
 800e92c:	bf08      	it	eq
 800e92e:	1aad      	subeq	r5, r5, r2
 800e930:	6922      	ldr	r2, [r4, #16]
 800e932:	bf08      	it	eq
 800e934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e938:	4293      	cmp	r3, r2
 800e93a:	bfc4      	itt	gt
 800e93c:	1a9b      	subgt	r3, r3, r2
 800e93e:	18ed      	addgt	r5, r5, r3
 800e940:	341a      	adds	r4, #26
 800e942:	42b5      	cmp	r5, r6
 800e944:	d11a      	bne.n	800e97c <_printf_common+0xcc>
 800e946:	2000      	movs	r0, #0
 800e948:	e008      	b.n	800e95c <_printf_common+0xac>
 800e94a:	2301      	movs	r3, #1
 800e94c:	4652      	mov	r2, sl
 800e94e:	4649      	mov	r1, r9
 800e950:	4638      	mov	r0, r7
 800e952:	47c0      	blx	r8
 800e954:	3001      	adds	r0, #1
 800e956:	d103      	bne.n	800e960 <_printf_common+0xb0>
 800e958:	f04f 30ff 	mov.w	r0, #4294967295
 800e95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e960:	3501      	adds	r5, #1
 800e962:	e7c4      	b.n	800e8ee <_printf_common+0x3e>
 800e964:	2030      	movs	r0, #48	; 0x30
 800e966:	18e1      	adds	r1, r4, r3
 800e968:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e96c:	1c5a      	adds	r2, r3, #1
 800e96e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e972:	4422      	add	r2, r4
 800e974:	3302      	adds	r3, #2
 800e976:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e97a:	e7c5      	b.n	800e908 <_printf_common+0x58>
 800e97c:	2301      	movs	r3, #1
 800e97e:	4622      	mov	r2, r4
 800e980:	4649      	mov	r1, r9
 800e982:	4638      	mov	r0, r7
 800e984:	47c0      	blx	r8
 800e986:	3001      	adds	r0, #1
 800e988:	d0e6      	beq.n	800e958 <_printf_common+0xa8>
 800e98a:	3601      	adds	r6, #1
 800e98c:	e7d9      	b.n	800e942 <_printf_common+0x92>
	...

0800e990 <_printf_i>:
 800e990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e994:	460c      	mov	r4, r1
 800e996:	7e27      	ldrb	r7, [r4, #24]
 800e998:	4691      	mov	r9, r2
 800e99a:	2f78      	cmp	r7, #120	; 0x78
 800e99c:	4680      	mov	r8, r0
 800e99e:	469a      	mov	sl, r3
 800e9a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e9a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9a6:	d807      	bhi.n	800e9b8 <_printf_i+0x28>
 800e9a8:	2f62      	cmp	r7, #98	; 0x62
 800e9aa:	d80a      	bhi.n	800e9c2 <_printf_i+0x32>
 800e9ac:	2f00      	cmp	r7, #0
 800e9ae:	f000 80d9 	beq.w	800eb64 <_printf_i+0x1d4>
 800e9b2:	2f58      	cmp	r7, #88	; 0x58
 800e9b4:	f000 80a4 	beq.w	800eb00 <_printf_i+0x170>
 800e9b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e9bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e9c0:	e03a      	b.n	800ea38 <_printf_i+0xa8>
 800e9c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e9c6:	2b15      	cmp	r3, #21
 800e9c8:	d8f6      	bhi.n	800e9b8 <_printf_i+0x28>
 800e9ca:	a001      	add	r0, pc, #4	; (adr r0, 800e9d0 <_printf_i+0x40>)
 800e9cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e9d0:	0800ea29 	.word	0x0800ea29
 800e9d4:	0800ea3d 	.word	0x0800ea3d
 800e9d8:	0800e9b9 	.word	0x0800e9b9
 800e9dc:	0800e9b9 	.word	0x0800e9b9
 800e9e0:	0800e9b9 	.word	0x0800e9b9
 800e9e4:	0800e9b9 	.word	0x0800e9b9
 800e9e8:	0800ea3d 	.word	0x0800ea3d
 800e9ec:	0800e9b9 	.word	0x0800e9b9
 800e9f0:	0800e9b9 	.word	0x0800e9b9
 800e9f4:	0800e9b9 	.word	0x0800e9b9
 800e9f8:	0800e9b9 	.word	0x0800e9b9
 800e9fc:	0800eb4b 	.word	0x0800eb4b
 800ea00:	0800ea6d 	.word	0x0800ea6d
 800ea04:	0800eb2d 	.word	0x0800eb2d
 800ea08:	0800e9b9 	.word	0x0800e9b9
 800ea0c:	0800e9b9 	.word	0x0800e9b9
 800ea10:	0800eb6d 	.word	0x0800eb6d
 800ea14:	0800e9b9 	.word	0x0800e9b9
 800ea18:	0800ea6d 	.word	0x0800ea6d
 800ea1c:	0800e9b9 	.word	0x0800e9b9
 800ea20:	0800e9b9 	.word	0x0800e9b9
 800ea24:	0800eb35 	.word	0x0800eb35
 800ea28:	680b      	ldr	r3, [r1, #0]
 800ea2a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea2e:	1d1a      	adds	r2, r3, #4
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	600a      	str	r2, [r1, #0]
 800ea34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e0a4      	b.n	800eb86 <_printf_i+0x1f6>
 800ea3c:	6825      	ldr	r5, [r4, #0]
 800ea3e:	6808      	ldr	r0, [r1, #0]
 800ea40:	062e      	lsls	r6, r5, #24
 800ea42:	f100 0304 	add.w	r3, r0, #4
 800ea46:	d50a      	bpl.n	800ea5e <_printf_i+0xce>
 800ea48:	6805      	ldr	r5, [r0, #0]
 800ea4a:	600b      	str	r3, [r1, #0]
 800ea4c:	2d00      	cmp	r5, #0
 800ea4e:	da03      	bge.n	800ea58 <_printf_i+0xc8>
 800ea50:	232d      	movs	r3, #45	; 0x2d
 800ea52:	426d      	negs	r5, r5
 800ea54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea58:	230a      	movs	r3, #10
 800ea5a:	485e      	ldr	r0, [pc, #376]	; (800ebd4 <_printf_i+0x244>)
 800ea5c:	e019      	b.n	800ea92 <_printf_i+0x102>
 800ea5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ea62:	6805      	ldr	r5, [r0, #0]
 800ea64:	600b      	str	r3, [r1, #0]
 800ea66:	bf18      	it	ne
 800ea68:	b22d      	sxthne	r5, r5
 800ea6a:	e7ef      	b.n	800ea4c <_printf_i+0xbc>
 800ea6c:	680b      	ldr	r3, [r1, #0]
 800ea6e:	6825      	ldr	r5, [r4, #0]
 800ea70:	1d18      	adds	r0, r3, #4
 800ea72:	6008      	str	r0, [r1, #0]
 800ea74:	0628      	lsls	r0, r5, #24
 800ea76:	d501      	bpl.n	800ea7c <_printf_i+0xec>
 800ea78:	681d      	ldr	r5, [r3, #0]
 800ea7a:	e002      	b.n	800ea82 <_printf_i+0xf2>
 800ea7c:	0669      	lsls	r1, r5, #25
 800ea7e:	d5fb      	bpl.n	800ea78 <_printf_i+0xe8>
 800ea80:	881d      	ldrh	r5, [r3, #0]
 800ea82:	2f6f      	cmp	r7, #111	; 0x6f
 800ea84:	bf0c      	ite	eq
 800ea86:	2308      	moveq	r3, #8
 800ea88:	230a      	movne	r3, #10
 800ea8a:	4852      	ldr	r0, [pc, #328]	; (800ebd4 <_printf_i+0x244>)
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea92:	6866      	ldr	r6, [r4, #4]
 800ea94:	2e00      	cmp	r6, #0
 800ea96:	bfa8      	it	ge
 800ea98:	6821      	ldrge	r1, [r4, #0]
 800ea9a:	60a6      	str	r6, [r4, #8]
 800ea9c:	bfa4      	itt	ge
 800ea9e:	f021 0104 	bicge.w	r1, r1, #4
 800eaa2:	6021      	strge	r1, [r4, #0]
 800eaa4:	b90d      	cbnz	r5, 800eaaa <_printf_i+0x11a>
 800eaa6:	2e00      	cmp	r6, #0
 800eaa8:	d04d      	beq.n	800eb46 <_printf_i+0x1b6>
 800eaaa:	4616      	mov	r6, r2
 800eaac:	fbb5 f1f3 	udiv	r1, r5, r3
 800eab0:	fb03 5711 	mls	r7, r3, r1, r5
 800eab4:	5dc7      	ldrb	r7, [r0, r7]
 800eab6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eaba:	462f      	mov	r7, r5
 800eabc:	42bb      	cmp	r3, r7
 800eabe:	460d      	mov	r5, r1
 800eac0:	d9f4      	bls.n	800eaac <_printf_i+0x11c>
 800eac2:	2b08      	cmp	r3, #8
 800eac4:	d10b      	bne.n	800eade <_printf_i+0x14e>
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	07df      	lsls	r7, r3, #31
 800eaca:	d508      	bpl.n	800eade <_printf_i+0x14e>
 800eacc:	6923      	ldr	r3, [r4, #16]
 800eace:	6861      	ldr	r1, [r4, #4]
 800ead0:	4299      	cmp	r1, r3
 800ead2:	bfde      	ittt	le
 800ead4:	2330      	movle	r3, #48	; 0x30
 800ead6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eada:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eade:	1b92      	subs	r2, r2, r6
 800eae0:	6122      	str	r2, [r4, #16]
 800eae2:	464b      	mov	r3, r9
 800eae4:	4621      	mov	r1, r4
 800eae6:	4640      	mov	r0, r8
 800eae8:	f8cd a000 	str.w	sl, [sp]
 800eaec:	aa03      	add	r2, sp, #12
 800eaee:	f7ff fedf 	bl	800e8b0 <_printf_common>
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	d14c      	bne.n	800eb90 <_printf_i+0x200>
 800eaf6:	f04f 30ff 	mov.w	r0, #4294967295
 800eafa:	b004      	add	sp, #16
 800eafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb00:	4834      	ldr	r0, [pc, #208]	; (800ebd4 <_printf_i+0x244>)
 800eb02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb06:	680e      	ldr	r6, [r1, #0]
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	f856 5b04 	ldr.w	r5, [r6], #4
 800eb0e:	061f      	lsls	r7, r3, #24
 800eb10:	600e      	str	r6, [r1, #0]
 800eb12:	d514      	bpl.n	800eb3e <_printf_i+0x1ae>
 800eb14:	07d9      	lsls	r1, r3, #31
 800eb16:	bf44      	itt	mi
 800eb18:	f043 0320 	orrmi.w	r3, r3, #32
 800eb1c:	6023      	strmi	r3, [r4, #0]
 800eb1e:	b91d      	cbnz	r5, 800eb28 <_printf_i+0x198>
 800eb20:	6823      	ldr	r3, [r4, #0]
 800eb22:	f023 0320 	bic.w	r3, r3, #32
 800eb26:	6023      	str	r3, [r4, #0]
 800eb28:	2310      	movs	r3, #16
 800eb2a:	e7af      	b.n	800ea8c <_printf_i+0xfc>
 800eb2c:	6823      	ldr	r3, [r4, #0]
 800eb2e:	f043 0320 	orr.w	r3, r3, #32
 800eb32:	6023      	str	r3, [r4, #0]
 800eb34:	2378      	movs	r3, #120	; 0x78
 800eb36:	4828      	ldr	r0, [pc, #160]	; (800ebd8 <_printf_i+0x248>)
 800eb38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb3c:	e7e3      	b.n	800eb06 <_printf_i+0x176>
 800eb3e:	065e      	lsls	r6, r3, #25
 800eb40:	bf48      	it	mi
 800eb42:	b2ad      	uxthmi	r5, r5
 800eb44:	e7e6      	b.n	800eb14 <_printf_i+0x184>
 800eb46:	4616      	mov	r6, r2
 800eb48:	e7bb      	b.n	800eac2 <_printf_i+0x132>
 800eb4a:	680b      	ldr	r3, [r1, #0]
 800eb4c:	6826      	ldr	r6, [r4, #0]
 800eb4e:	1d1d      	adds	r5, r3, #4
 800eb50:	6960      	ldr	r0, [r4, #20]
 800eb52:	600d      	str	r5, [r1, #0]
 800eb54:	0635      	lsls	r5, r6, #24
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	d501      	bpl.n	800eb5e <_printf_i+0x1ce>
 800eb5a:	6018      	str	r0, [r3, #0]
 800eb5c:	e002      	b.n	800eb64 <_printf_i+0x1d4>
 800eb5e:	0671      	lsls	r1, r6, #25
 800eb60:	d5fb      	bpl.n	800eb5a <_printf_i+0x1ca>
 800eb62:	8018      	strh	r0, [r3, #0]
 800eb64:	2300      	movs	r3, #0
 800eb66:	4616      	mov	r6, r2
 800eb68:	6123      	str	r3, [r4, #16]
 800eb6a:	e7ba      	b.n	800eae2 <_printf_i+0x152>
 800eb6c:	680b      	ldr	r3, [r1, #0]
 800eb6e:	1d1a      	adds	r2, r3, #4
 800eb70:	600a      	str	r2, [r1, #0]
 800eb72:	681e      	ldr	r6, [r3, #0]
 800eb74:	2100      	movs	r1, #0
 800eb76:	4630      	mov	r0, r6
 800eb78:	6862      	ldr	r2, [r4, #4]
 800eb7a:	f000 f82f 	bl	800ebdc <memchr>
 800eb7e:	b108      	cbz	r0, 800eb84 <_printf_i+0x1f4>
 800eb80:	1b80      	subs	r0, r0, r6
 800eb82:	6060      	str	r0, [r4, #4]
 800eb84:	6863      	ldr	r3, [r4, #4]
 800eb86:	6123      	str	r3, [r4, #16]
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb8e:	e7a8      	b.n	800eae2 <_printf_i+0x152>
 800eb90:	4632      	mov	r2, r6
 800eb92:	4649      	mov	r1, r9
 800eb94:	4640      	mov	r0, r8
 800eb96:	6923      	ldr	r3, [r4, #16]
 800eb98:	47d0      	blx	sl
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	d0ab      	beq.n	800eaf6 <_printf_i+0x166>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	079b      	lsls	r3, r3, #30
 800eba2:	d413      	bmi.n	800ebcc <_printf_i+0x23c>
 800eba4:	68e0      	ldr	r0, [r4, #12]
 800eba6:	9b03      	ldr	r3, [sp, #12]
 800eba8:	4298      	cmp	r0, r3
 800ebaa:	bfb8      	it	lt
 800ebac:	4618      	movlt	r0, r3
 800ebae:	e7a4      	b.n	800eafa <_printf_i+0x16a>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	4632      	mov	r2, r6
 800ebb4:	4649      	mov	r1, r9
 800ebb6:	4640      	mov	r0, r8
 800ebb8:	47d0      	blx	sl
 800ebba:	3001      	adds	r0, #1
 800ebbc:	d09b      	beq.n	800eaf6 <_printf_i+0x166>
 800ebbe:	3501      	adds	r5, #1
 800ebc0:	68e3      	ldr	r3, [r4, #12]
 800ebc2:	9903      	ldr	r1, [sp, #12]
 800ebc4:	1a5b      	subs	r3, r3, r1
 800ebc6:	42ab      	cmp	r3, r5
 800ebc8:	dcf2      	bgt.n	800ebb0 <_printf_i+0x220>
 800ebca:	e7eb      	b.n	800eba4 <_printf_i+0x214>
 800ebcc:	2500      	movs	r5, #0
 800ebce:	f104 0619 	add.w	r6, r4, #25
 800ebd2:	e7f5      	b.n	800ebc0 <_printf_i+0x230>
 800ebd4:	0800f52d 	.word	0x0800f52d
 800ebd8:	0800f53e 	.word	0x0800f53e

0800ebdc <memchr>:
 800ebdc:	4603      	mov	r3, r0
 800ebde:	b510      	push	{r4, lr}
 800ebe0:	b2c9      	uxtb	r1, r1
 800ebe2:	4402      	add	r2, r0
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	d101      	bne.n	800ebee <memchr+0x12>
 800ebea:	2000      	movs	r0, #0
 800ebec:	e003      	b.n	800ebf6 <memchr+0x1a>
 800ebee:	7804      	ldrb	r4, [r0, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	428c      	cmp	r4, r1
 800ebf4:	d1f6      	bne.n	800ebe4 <memchr+0x8>
 800ebf6:	bd10      	pop	{r4, pc}

0800ebf8 <memcpy>:
 800ebf8:	440a      	add	r2, r1
 800ebfa:	4291      	cmp	r1, r2
 800ebfc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec00:	d100      	bne.n	800ec04 <memcpy+0xc>
 800ec02:	4770      	bx	lr
 800ec04:	b510      	push	{r4, lr}
 800ec06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec0a:	4291      	cmp	r1, r2
 800ec0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec10:	d1f9      	bne.n	800ec06 <memcpy+0xe>
 800ec12:	bd10      	pop	{r4, pc}

0800ec14 <memmove>:
 800ec14:	4288      	cmp	r0, r1
 800ec16:	b510      	push	{r4, lr}
 800ec18:	eb01 0402 	add.w	r4, r1, r2
 800ec1c:	d902      	bls.n	800ec24 <memmove+0x10>
 800ec1e:	4284      	cmp	r4, r0
 800ec20:	4623      	mov	r3, r4
 800ec22:	d807      	bhi.n	800ec34 <memmove+0x20>
 800ec24:	1e43      	subs	r3, r0, #1
 800ec26:	42a1      	cmp	r1, r4
 800ec28:	d008      	beq.n	800ec3c <memmove+0x28>
 800ec2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec32:	e7f8      	b.n	800ec26 <memmove+0x12>
 800ec34:	4601      	mov	r1, r0
 800ec36:	4402      	add	r2, r0
 800ec38:	428a      	cmp	r2, r1
 800ec3a:	d100      	bne.n	800ec3e <memmove+0x2a>
 800ec3c:	bd10      	pop	{r4, pc}
 800ec3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec46:	e7f7      	b.n	800ec38 <memmove+0x24>

0800ec48 <_free_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4605      	mov	r5, r0
 800ec4c:	2900      	cmp	r1, #0
 800ec4e:	d043      	beq.n	800ecd8 <_free_r+0x90>
 800ec50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec54:	1f0c      	subs	r4, r1, #4
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	bfb8      	it	lt
 800ec5a:	18e4      	addlt	r4, r4, r3
 800ec5c:	f000 f8d0 	bl	800ee00 <__malloc_lock>
 800ec60:	4a1e      	ldr	r2, [pc, #120]	; (800ecdc <_free_r+0x94>)
 800ec62:	6813      	ldr	r3, [r2, #0]
 800ec64:	4610      	mov	r0, r2
 800ec66:	b933      	cbnz	r3, 800ec76 <_free_r+0x2e>
 800ec68:	6063      	str	r3, [r4, #4]
 800ec6a:	6014      	str	r4, [r2, #0]
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec72:	f000 b8cb 	b.w	800ee0c <__malloc_unlock>
 800ec76:	42a3      	cmp	r3, r4
 800ec78:	d90a      	bls.n	800ec90 <_free_r+0x48>
 800ec7a:	6821      	ldr	r1, [r4, #0]
 800ec7c:	1862      	adds	r2, r4, r1
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	bf01      	itttt	eq
 800ec82:	681a      	ldreq	r2, [r3, #0]
 800ec84:	685b      	ldreq	r3, [r3, #4]
 800ec86:	1852      	addeq	r2, r2, r1
 800ec88:	6022      	streq	r2, [r4, #0]
 800ec8a:	6063      	str	r3, [r4, #4]
 800ec8c:	6004      	str	r4, [r0, #0]
 800ec8e:	e7ed      	b.n	800ec6c <_free_r+0x24>
 800ec90:	461a      	mov	r2, r3
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	b10b      	cbz	r3, 800ec9a <_free_r+0x52>
 800ec96:	42a3      	cmp	r3, r4
 800ec98:	d9fa      	bls.n	800ec90 <_free_r+0x48>
 800ec9a:	6811      	ldr	r1, [r2, #0]
 800ec9c:	1850      	adds	r0, r2, r1
 800ec9e:	42a0      	cmp	r0, r4
 800eca0:	d10b      	bne.n	800ecba <_free_r+0x72>
 800eca2:	6820      	ldr	r0, [r4, #0]
 800eca4:	4401      	add	r1, r0
 800eca6:	1850      	adds	r0, r2, r1
 800eca8:	4283      	cmp	r3, r0
 800ecaa:	6011      	str	r1, [r2, #0]
 800ecac:	d1de      	bne.n	800ec6c <_free_r+0x24>
 800ecae:	6818      	ldr	r0, [r3, #0]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	4401      	add	r1, r0
 800ecb4:	6011      	str	r1, [r2, #0]
 800ecb6:	6053      	str	r3, [r2, #4]
 800ecb8:	e7d8      	b.n	800ec6c <_free_r+0x24>
 800ecba:	d902      	bls.n	800ecc2 <_free_r+0x7a>
 800ecbc:	230c      	movs	r3, #12
 800ecbe:	602b      	str	r3, [r5, #0]
 800ecc0:	e7d4      	b.n	800ec6c <_free_r+0x24>
 800ecc2:	6820      	ldr	r0, [r4, #0]
 800ecc4:	1821      	adds	r1, r4, r0
 800ecc6:	428b      	cmp	r3, r1
 800ecc8:	bf01      	itttt	eq
 800ecca:	6819      	ldreq	r1, [r3, #0]
 800eccc:	685b      	ldreq	r3, [r3, #4]
 800ecce:	1809      	addeq	r1, r1, r0
 800ecd0:	6021      	streq	r1, [r4, #0]
 800ecd2:	6063      	str	r3, [r4, #4]
 800ecd4:	6054      	str	r4, [r2, #4]
 800ecd6:	e7c9      	b.n	800ec6c <_free_r+0x24>
 800ecd8:	bd38      	pop	{r3, r4, r5, pc}
 800ecda:	bf00      	nop
 800ecdc:	200002d8 	.word	0x200002d8

0800ece0 <_malloc_r>:
 800ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece2:	1ccd      	adds	r5, r1, #3
 800ece4:	f025 0503 	bic.w	r5, r5, #3
 800ece8:	3508      	adds	r5, #8
 800ecea:	2d0c      	cmp	r5, #12
 800ecec:	bf38      	it	cc
 800ecee:	250c      	movcc	r5, #12
 800ecf0:	2d00      	cmp	r5, #0
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	db01      	blt.n	800ecfa <_malloc_r+0x1a>
 800ecf6:	42a9      	cmp	r1, r5
 800ecf8:	d903      	bls.n	800ed02 <_malloc_r+0x22>
 800ecfa:	230c      	movs	r3, #12
 800ecfc:	6033      	str	r3, [r6, #0]
 800ecfe:	2000      	movs	r0, #0
 800ed00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed02:	f000 f87d 	bl	800ee00 <__malloc_lock>
 800ed06:	4921      	ldr	r1, [pc, #132]	; (800ed8c <_malloc_r+0xac>)
 800ed08:	680a      	ldr	r2, [r1, #0]
 800ed0a:	4614      	mov	r4, r2
 800ed0c:	b99c      	cbnz	r4, 800ed36 <_malloc_r+0x56>
 800ed0e:	4f20      	ldr	r7, [pc, #128]	; (800ed90 <_malloc_r+0xb0>)
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	b923      	cbnz	r3, 800ed1e <_malloc_r+0x3e>
 800ed14:	4621      	mov	r1, r4
 800ed16:	4630      	mov	r0, r6
 800ed18:	f000 f862 	bl	800ede0 <_sbrk_r>
 800ed1c:	6038      	str	r0, [r7, #0]
 800ed1e:	4629      	mov	r1, r5
 800ed20:	4630      	mov	r0, r6
 800ed22:	f000 f85d 	bl	800ede0 <_sbrk_r>
 800ed26:	1c43      	adds	r3, r0, #1
 800ed28:	d123      	bne.n	800ed72 <_malloc_r+0x92>
 800ed2a:	230c      	movs	r3, #12
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	6033      	str	r3, [r6, #0]
 800ed30:	f000 f86c 	bl	800ee0c <__malloc_unlock>
 800ed34:	e7e3      	b.n	800ecfe <_malloc_r+0x1e>
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	1b5b      	subs	r3, r3, r5
 800ed3a:	d417      	bmi.n	800ed6c <_malloc_r+0x8c>
 800ed3c:	2b0b      	cmp	r3, #11
 800ed3e:	d903      	bls.n	800ed48 <_malloc_r+0x68>
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	441c      	add	r4, r3
 800ed44:	6025      	str	r5, [r4, #0]
 800ed46:	e004      	b.n	800ed52 <_malloc_r+0x72>
 800ed48:	6863      	ldr	r3, [r4, #4]
 800ed4a:	42a2      	cmp	r2, r4
 800ed4c:	bf0c      	ite	eq
 800ed4e:	600b      	streq	r3, [r1, #0]
 800ed50:	6053      	strne	r3, [r2, #4]
 800ed52:	4630      	mov	r0, r6
 800ed54:	f000 f85a 	bl	800ee0c <__malloc_unlock>
 800ed58:	f104 000b 	add.w	r0, r4, #11
 800ed5c:	1d23      	adds	r3, r4, #4
 800ed5e:	f020 0007 	bic.w	r0, r0, #7
 800ed62:	1ac2      	subs	r2, r0, r3
 800ed64:	d0cc      	beq.n	800ed00 <_malloc_r+0x20>
 800ed66:	1a1b      	subs	r3, r3, r0
 800ed68:	50a3      	str	r3, [r4, r2]
 800ed6a:	e7c9      	b.n	800ed00 <_malloc_r+0x20>
 800ed6c:	4622      	mov	r2, r4
 800ed6e:	6864      	ldr	r4, [r4, #4]
 800ed70:	e7cc      	b.n	800ed0c <_malloc_r+0x2c>
 800ed72:	1cc4      	adds	r4, r0, #3
 800ed74:	f024 0403 	bic.w	r4, r4, #3
 800ed78:	42a0      	cmp	r0, r4
 800ed7a:	d0e3      	beq.n	800ed44 <_malloc_r+0x64>
 800ed7c:	1a21      	subs	r1, r4, r0
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f000 f82e 	bl	800ede0 <_sbrk_r>
 800ed84:	3001      	adds	r0, #1
 800ed86:	d1dd      	bne.n	800ed44 <_malloc_r+0x64>
 800ed88:	e7cf      	b.n	800ed2a <_malloc_r+0x4a>
 800ed8a:	bf00      	nop
 800ed8c:	200002d8 	.word	0x200002d8
 800ed90:	200002dc 	.word	0x200002dc

0800ed94 <_realloc_r>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	4607      	mov	r7, r0
 800ed98:	4614      	mov	r4, r2
 800ed9a:	460e      	mov	r6, r1
 800ed9c:	b921      	cbnz	r1, 800eda8 <_realloc_r+0x14>
 800ed9e:	4611      	mov	r1, r2
 800eda0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eda4:	f7ff bf9c 	b.w	800ece0 <_malloc_r>
 800eda8:	b922      	cbnz	r2, 800edb4 <_realloc_r+0x20>
 800edaa:	f7ff ff4d 	bl	800ec48 <_free_r>
 800edae:	4625      	mov	r5, r4
 800edb0:	4628      	mov	r0, r5
 800edb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb4:	f000 f830 	bl	800ee18 <_malloc_usable_size_r>
 800edb8:	42a0      	cmp	r0, r4
 800edba:	d20f      	bcs.n	800eddc <_realloc_r+0x48>
 800edbc:	4621      	mov	r1, r4
 800edbe:	4638      	mov	r0, r7
 800edc0:	f7ff ff8e 	bl	800ece0 <_malloc_r>
 800edc4:	4605      	mov	r5, r0
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d0f2      	beq.n	800edb0 <_realloc_r+0x1c>
 800edca:	4631      	mov	r1, r6
 800edcc:	4622      	mov	r2, r4
 800edce:	f7ff ff13 	bl	800ebf8 <memcpy>
 800edd2:	4631      	mov	r1, r6
 800edd4:	4638      	mov	r0, r7
 800edd6:	f7ff ff37 	bl	800ec48 <_free_r>
 800edda:	e7e9      	b.n	800edb0 <_realloc_r+0x1c>
 800eddc:	4635      	mov	r5, r6
 800edde:	e7e7      	b.n	800edb0 <_realloc_r+0x1c>

0800ede0 <_sbrk_r>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	2300      	movs	r3, #0
 800ede4:	4d05      	ldr	r5, [pc, #20]	; (800edfc <_sbrk_r+0x1c>)
 800ede6:	4604      	mov	r4, r0
 800ede8:	4608      	mov	r0, r1
 800edea:	602b      	str	r3, [r5, #0]
 800edec:	f7f4 fc12 	bl	8003614 <_sbrk>
 800edf0:	1c43      	adds	r3, r0, #1
 800edf2:	d102      	bne.n	800edfa <_sbrk_r+0x1a>
 800edf4:	682b      	ldr	r3, [r5, #0]
 800edf6:	b103      	cbz	r3, 800edfa <_sbrk_r+0x1a>
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	bd38      	pop	{r3, r4, r5, pc}
 800edfc:	200012c8 	.word	0x200012c8

0800ee00 <__malloc_lock>:
 800ee00:	4801      	ldr	r0, [pc, #4]	; (800ee08 <__malloc_lock+0x8>)
 800ee02:	f000 b811 	b.w	800ee28 <__retarget_lock_acquire_recursive>
 800ee06:	bf00      	nop
 800ee08:	200012d0 	.word	0x200012d0

0800ee0c <__malloc_unlock>:
 800ee0c:	4801      	ldr	r0, [pc, #4]	; (800ee14 <__malloc_unlock+0x8>)
 800ee0e:	f000 b80c 	b.w	800ee2a <__retarget_lock_release_recursive>
 800ee12:	bf00      	nop
 800ee14:	200012d0 	.word	0x200012d0

0800ee18 <_malloc_usable_size_r>:
 800ee18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee1c:	1f18      	subs	r0, r3, #4
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	bfbc      	itt	lt
 800ee22:	580b      	ldrlt	r3, [r1, r0]
 800ee24:	18c0      	addlt	r0, r0, r3
 800ee26:	4770      	bx	lr

0800ee28 <__retarget_lock_acquire_recursive>:
 800ee28:	4770      	bx	lr

0800ee2a <__retarget_lock_release_recursive>:
 800ee2a:	4770      	bx	lr

0800ee2c <_init>:
 800ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2e:	bf00      	nop
 800ee30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee32:	bc08      	pop	{r3}
 800ee34:	469e      	mov	lr, r3
 800ee36:	4770      	bx	lr

0800ee38 <_fini>:
 800ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3a:	bf00      	nop
 800ee3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee3e:	bc08      	pop	{r3}
 800ee40:	469e      	mov	lr, r3
 800ee42:	4770      	bx	lr
