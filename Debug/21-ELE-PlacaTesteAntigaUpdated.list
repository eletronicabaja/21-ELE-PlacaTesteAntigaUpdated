
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e624  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800e734  0800e734  0001e734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee2c  0800ee2c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee2c  0800ee2c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee2c  0800ee2c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee2c  0800ee2c  0001ee2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee30  0800ee30  0001ee30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800ee34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  20000088  0800eebc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011ec  0800eebc  000211ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216f0  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004575  00000000  00000000  000417a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00045d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00047600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c439  00000000  00000000  00048d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020415  00000000  00000000  00065161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000985b7  00000000  00000000  00085576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011db2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c8c  00000000  00000000  0011db80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e71c 	.word	0x0800e71c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800e71c 	.word	0x0800e71c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_frsub>:
 8000b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	e002      	b.n	8000b50 <__addsf3>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fsub>:
 8000b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b50 <__addsf3>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	bf1f      	itttt	ne
 8000b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b58:	ea92 0f03 	teqne	r2, r3
 8000b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b64:	d06a      	beq.n	8000c3c <__addsf3+0xec>
 8000b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6e:	bfc1      	itttt	gt
 8000b70:	18d2      	addgt	r2, r2, r3
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	4048      	eorgt	r0, r1
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	2b19      	cmp	r3, #25
 8000b7e:	bf88      	it	hi
 8000b80:	4770      	bxhi	lr
 8000b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9e:	bf18      	it	ne
 8000ba0:	4249      	negne	r1, r1
 8000ba2:	ea92 0f03 	teq	r2, r3
 8000ba6:	d03f      	beq.n	8000c28 <__addsf3+0xd8>
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb0:	eb10 000c 	adds.w	r0, r0, ip
 8000bb4:	f1c3 0320 	rsb	r3, r3, #32
 8000bb8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__addsf3+0x78>
 8000bc2:	4249      	negs	r1, r1
 8000bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bcc:	d313      	bcc.n	8000bf6 <__addsf3+0xa6>
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d306      	bcc.n	8000be2 <__addsf3+0x92>
 8000bd4:	0840      	lsrs	r0, r0, #1
 8000bd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bda:	f102 0201 	add.w	r2, r2, #1
 8000bde:	2afe      	cmp	r2, #254	; 0xfe
 8000be0:	d251      	bcs.n	8000c86 <__addsf3+0x136>
 8000be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bea:	bf08      	it	eq
 8000bec:	f020 0001 	biceq.w	r0, r0, #1
 8000bf0:	ea40 0003 	orr.w	r0, r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	0049      	lsls	r1, r1, #1
 8000bf8:	eb40 0000 	adc.w	r0, r0, r0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	bf28      	it	cs
 8000c00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c04:	d2ed      	bcs.n	8000be2 <__addsf3+0x92>
 8000c06:	fab0 fc80 	clz	ip, r0
 8000c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c16:	bfaa      	itet	ge
 8000c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c1c:	4252      	neglt	r2, r2
 8000c1e:	4318      	orrge	r0, r3
 8000c20:	bfbc      	itt	lt
 8000c22:	40d0      	lsrlt	r0, r2
 8000c24:	4318      	orrlt	r0, r3
 8000c26:	4770      	bx	lr
 8000c28:	f092 0f00 	teq	r2, #0
 8000c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c30:	bf06      	itte	eq
 8000c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c36:	3201      	addeq	r2, #1
 8000c38:	3b01      	subne	r3, #1
 8000c3a:	e7b5      	b.n	8000ba8 <__addsf3+0x58>
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	bf18      	it	ne
 8000c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4a:	d021      	beq.n	8000c90 <__addsf3+0x140>
 8000c4c:	ea92 0f03 	teq	r2, r3
 8000c50:	d004      	beq.n	8000c5c <__addsf3+0x10c>
 8000c52:	f092 0f00 	teq	r2, #0
 8000c56:	bf08      	it	eq
 8000c58:	4608      	moveq	r0, r1
 8000c5a:	4770      	bx	lr
 8000c5c:	ea90 0f01 	teq	r0, r1
 8000c60:	bf1c      	itt	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	4770      	bxne	lr
 8000c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6a:	d104      	bne.n	8000c76 <__addsf3+0x126>
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7a:	bf3c      	itt	cc
 8000c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c80:	4770      	bxcc	lr
 8000c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c94:	bf16      	itet	ne
 8000c96:	4608      	movne	r0, r1
 8000c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c9c:	4601      	movne	r1, r0
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	bf06      	itte	eq
 8000ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca6:	ea90 0f01 	teqeq	r0, r1
 8000caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_ui2f>:
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e004      	b.n	8000cc0 <__aeabi_i2f+0x8>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_i2f>:
 8000cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	bf48      	it	mi
 8000cbe:	4240      	negmi	r0, r0
 8000cc0:	ea5f 0c00 	movs.w	ip, r0
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ccc:	4601      	mov	r1, r0
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	e01c      	b.n	8000d0e <__aeabi_l2f+0x2a>

08000cd4 <__aeabi_ul2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e00a      	b.n	8000cf8 <__aeabi_l2f+0x14>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_l2f>:
 8000ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__aeabi_l2f+0x14>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	ea5f 0c01 	movs.w	ip, r1
 8000cfc:	bf02      	ittt	eq
 8000cfe:	4684      	moveq	ip, r0
 8000d00:	4601      	moveq	r1, r0
 8000d02:	2000      	moveq	r0, #0
 8000d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d08:	bf08      	it	eq
 8000d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d12:	fabc f28c 	clz	r2, ip
 8000d16:	3a08      	subs	r2, #8
 8000d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d1c:	db10      	blt.n	8000d40 <__aeabi_l2f+0x5c>
 8000d1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d30:	fa20 f202 	lsr.w	r2, r0, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f102 0220 	add.w	r2, r2, #32
 8000d44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d50:	fa21 f202 	lsr.w	r2, r1, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_f2iz>:
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d68:	d30f      	bcc.n	8000d8a <__aeabi_f2iz+0x2a>
 8000d6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_f2iz+0x30>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d7c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	bf18      	it	ne
 8000d86:	4240      	negne	r0, r0
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2iz+0x3a>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d105      	bne.n	8000da6 <__aeabi_f2iz+0x46>
 8000d9a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr

08000dac <aceGir_Init>:
 */

#include "ace_gir.h"

HAL_StatusTypeDef aceGir_Init(I2C_HandleTypeDef *hi2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	6078      	str	r0, [r7, #4]

	aceGir.hi2c = hi2c;
 8000db4:	4a42      	ldr	r2, [pc, #264]	; (8000ec0 <aceGir_Init+0x114>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef result;
	uint8_t check;
	uint8_t dados;

	// checar se o módulo está conectado
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <aceGir_Init+0x114>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	f107 030e 	add.w	r3, r7, #14
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	2275      	movs	r2, #117	; 0x75
 8000dd2:	21d0      	movs	r1, #208	; 0xd0
 8000dd4:	f004 fbd6 	bl	8005584 <HAL_I2C_Mem_Read>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK)
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <aceGir_Init+0x3a>
		return result;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	e068      	b.n	8000eb8 <aceGir_Init+0x10c>

	if (check == 104)  // 0x68 = 104 -> será retornado seu o modulo estiver OK
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	2b68      	cmp	r3, #104	; 0x68
 8000dea:	d15f      	bne.n	8000eac <aceGir_Init+0x100>
	{
		// ligar sensor
		dados = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&dados, 1, 1000);
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <aceGir_Init+0x114>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f107 030d 	add.w	r3, r7, #13
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	226b      	movs	r2, #107	; 0x6b
 8000e08:	21d0      	movs	r1, #208	; 0xd0
 8000e0a:	f004 fac1 	bl	8005390 <HAL_I2C_Mem_Write>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <aceGir_Init+0x70>
			return result;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	e04d      	b.n	8000eb8 <aceGir_Init+0x10c>

		// definir frequencia de 1khz
		dados = 0x07;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &dados, 1, 1000);
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <aceGir_Init+0x114>)
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e28:	9302      	str	r3, [sp, #8]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	f107 030d 	add.w	r3, r7, #13
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2301      	movs	r3, #1
 8000e36:	2219      	movs	r2, #25
 8000e38:	21d0      	movs	r1, #208	; 0xd0
 8000e3a:	f004 faa9 	bl	8005390 <HAL_I2C_Mem_Write>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <aceGir_Init+0xa0>
			return result;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	e035      	b.n	8000eb8 <aceGir_Init+0x10c>

		// definir configuracao de acelerometro
		dados = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &dados, 1, 1000);
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <aceGir_Init+0x114>)
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	f107 030d 	add.w	r3, r7, #13
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	221c      	movs	r2, #28
 8000e68:	21d0      	movs	r1, #208	; 0xd0
 8000e6a:	f004 fa91 	bl	8005390 <HAL_I2C_Mem_Write>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <aceGir_Init+0xd0>
			return result;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	e01d      	b.n	8000eb8 <aceGir_Init+0x10c>

		// definir configuracao de giroscopio
		dados = 0x00;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &dados, 1, 1000);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <aceGir_Init+0x114>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f107 030d 	add.w	r3, r7, #13
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	221b      	movs	r2, #27
 8000e98:	21d0      	movs	r1, #208	; 0xd0
 8000e9a:	f004 fa79 	bl	8005390 <HAL_I2C_Mem_Write>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <aceGir_Init+0x100>
			return result;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	e005      	b.n	8000eb8 <aceGir_Init+0x10c>
	}

	result = HAL_TIM_Base_Start_IT(&htim4);
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <aceGir_Init+0x118>)
 8000eae:	f008 f837 	bl	8008f20 <HAL_TIM_Base_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]

	return result;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000328 	.word	0x20000328
 8000ec4:	200002e0 	.word	0x200002e0

08000ec8 <aceGir_Read>:

HAL_StatusTypeDef aceGir_Read(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef result;
	uint8_t buf[6];

	/*	Leitura do Acelerometro	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, buf, 6, 1000);
 8000ece:	4b70      	ldr	r3, [pc, #448]	; (8001090 <aceGir_Read+0x1c8>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2306      	movs	r3, #6
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	463b      	mov	r3, r7
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	223b      	movs	r2, #59	; 0x3b
 8000ee4:	21d0      	movs	r1, #208	; 0xd0
 8000ee6:	f004 fb4d 	bl	8005584 <HAL_I2C_Mem_Read>
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <aceGir_Read+0x30>
		return result;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	e0c3      	b.n	8001080 <aceGir_Read+0x1b8>

	aceGir.accel.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8000ef8:	783b      	ldrb	r3, [r7, #0]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	787b      	ldrb	r3, [r7, #1]
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b62      	ldr	r3, [pc, #392]	; (8001090 <aceGir_Read+0x1c8>)
 8000f08:	809a      	strh	r2, [r3, #4]
	aceGir.accel.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 8000f0a:	78bb      	ldrb	r3, [r7, #2]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <aceGir_Read+0x1c8>)
 8000f1a:	80da      	strh	r2, [r3, #6]
	aceGir.accel.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 8000f1c:	793b      	ldrb	r3, [r7, #4]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <aceGir_Read+0x1c8>)
 8000f2c:	811a      	strh	r2, [r3, #8]

	//converter valores em 'g', dividindo por 16384 (FS_SEL)=0
	aceGir.accel.x = aceGir.accel.X_RAW/16384.0;
 8000f2e:	4b58      	ldr	r3, [pc, #352]	; (8001090 <aceGir_Read+0x1c8>)
 8000f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb11 	bl	800055c <__aeabi_i2d>
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b55      	ldr	r3, [pc, #340]	; (8001094 <aceGir_Read+0x1cc>)
 8000f40:	f7ff fca0 	bl	8000884 <__aeabi_ddiv>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fdaa 	bl	8000aa4 <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <aceGir_Read+0x1c8>)
 8000f54:	60d3      	str	r3, [r2, #12]
	aceGir.accel.y = aceGir.accel.Y_RAW/16384.0;
 8000f56:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <aceGir_Read+0x1c8>)
 8000f58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fafd 	bl	800055c <__aeabi_i2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <aceGir_Read+0x1cc>)
 8000f68:	f7ff fc8c 	bl	8000884 <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fd96 	bl	8000aa4 <__aeabi_d2f>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a45      	ldr	r2, [pc, #276]	; (8001090 <aceGir_Read+0x1c8>)
 8000f7c:	6113      	str	r3, [r2, #16]
	aceGir.accel.z = aceGir.accel.Z_RAW/16384.0;
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <aceGir_Read+0x1c8>)
 8000f80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fae9 	bl	800055c <__aeabi_i2d>
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <aceGir_Read+0x1cc>)
 8000f90:	f7ff fc78 	bl	8000884 <__aeabi_ddiv>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fd82 	bl	8000aa4 <__aeabi_d2f>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	; (8001090 <aceGir_Read+0x1c8>)
 8000fa4:	6153      	str	r3, [r2, #20]

	/*	Leitura do Giroscopio	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, buf, 6, 1000);
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <aceGir_Read+0x1c8>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2243      	movs	r2, #67	; 0x43
 8000fbc:	21d0      	movs	r1, #208	; 0xd0
 8000fbe:	f004 fae1 	bl	8005584 <HAL_I2C_Mem_Read>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <aceGir_Read+0x108>
		return result;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	e057      	b.n	8001080 <aceGir_Read+0x1b8>

	aceGir.gyro.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8000fd0:	783b      	ldrb	r3, [r7, #0]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	787b      	ldrb	r3, [r7, #1]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <aceGir_Read+0x1c8>)
 8000fe0:	831a      	strh	r2, [r3, #24]
	aceGir.gyro.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <aceGir_Read+0x1c8>)
 8000ff2:	835a      	strh	r2, [r3, #26]
	aceGir.gyro.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 8000ff4:	793b      	ldrb	r3, [r7, #4]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <aceGir_Read+0x1c8>)
 8001004:	839a      	strh	r2, [r3, #28]

	//converter valores em 'graus/segundo', dividindo por 131 (FS_SEL)=0
	aceGir.gyro.x = aceGir.gyro.X_RAW/131.0;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <aceGir_Read+0x1c8>)
 8001008:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff faa5 	bl	800055c <__aeabi_i2d>
 8001012:	a31d      	add	r3, pc, #116	; (adr r3, 8001088 <aceGir_Read+0x1c0>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fc34 	bl	8000884 <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd3e 	bl	8000aa4 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <aceGir_Read+0x1c8>)
 800102c:	6213      	str	r3, [r2, #32]
	aceGir.gyro.y = aceGir.gyro.Y_RAW/131.0;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <aceGir_Read+0x1c8>)
 8001030:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa91 	bl	800055c <__aeabi_i2d>
 800103a:	a313      	add	r3, pc, #76	; (adr r3, 8001088 <aceGir_Read+0x1c0>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fc20 	bl	8000884 <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fd2a 	bl	8000aa4 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <aceGir_Read+0x1c8>)
 8001054:	6253      	str	r3, [r2, #36]	; 0x24
	aceGir.gyro.z = aceGir.gyro.Z_RAW/131.0;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <aceGir_Read+0x1c8>)
 8001058:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa7d 	bl	800055c <__aeabi_i2d>
 8001062:	a309      	add	r3, pc, #36	; (adr r3, 8001088 <aceGir_Read+0x1c0>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fc0c 	bl	8000884 <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd16 	bl	8000aa4 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <aceGir_Read+0x1c8>)
 800107c:	6293      	str	r3, [r2, #40]	; 0x28



	return result;
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	00000000 	.word	0x00000000
 800108c:	40606000 	.word	0x40606000
 8001090:	20000328 	.word	0x20000328
 8001094:	40d00000 	.word	0x40d00000

08001098 <can_bus_Init>:

#include "can_bus.h"
#include "ace_gir.h"

void can_bus_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	canBus.tx_header.DLC = 8;
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <can_bus_Init+0x80>)
 800109e:	2208      	movs	r2, #8
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
	canBus.tx_header.IDE = CAN_ID_STD;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <can_bus_Init+0x80>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
	canBus.tx_header.RTR = CAN_RTR_DATA;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <can_bus_Init+0x80>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
	canBus.tx_header.StdId = 0x243;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <can_bus_Init+0x80>)
 80010b0:	f240 2243 	movw	r2, #579	; 0x243
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
	canBus.filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <can_bus_Init+0x80>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	679a      	str	r2, [r3, #120]	; 0x78
	canBus.filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <can_bus_Init+0x80>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	canBus.filter.FilterBank = 0;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <can_bus_Init+0x80>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	67da      	str	r2, [r3, #124]	; 0x7c
	canBus.filter.FilterIdHigh = 0x120 << 5;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <can_bus_Init+0x80>)
 80010cc:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80010d0:	669a      	str	r2, [r3, #104]	; 0x68
	canBus.filter.FilterIdLow = 0;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <can_bus_Init+0x80>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	66da      	str	r2, [r3, #108]	; 0x6c
	canBus.filter.FilterMaskIdHigh = 0x7fc<<5;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <can_bus_Init+0x80>)
 80010da:	f64f 7280 	movw	r2, #65408	; 0xff80
 80010de:	671a      	str	r2, [r3, #112]	; 0x70
	canBus.filter.FilterMaskIdLow = 0;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <can_bus_Init+0x80>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	675a      	str	r2, [r3, #116]	; 0x74
	canBus.filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <can_bus_Init+0x80>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	canBus.filter.FilterActivation = ENABLE;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <can_bus_Init+0x80>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	canBus.count = 0;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <can_bus_Init+0x80>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	851a      	strh	r2, [r3, #40]	; 0x28

	HAL_CAN_ConfigFilter(&canBus.hcan, &canBus.filter);
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <can_bus_Init+0x84>)
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <can_bus_Init+0x80>)
 8001100:	f002 fe5c 	bl	8003dbc <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&canBus.hcan);
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <can_bus_Init+0x80>)
 8001106:	f002 ff22 	bl	8003f4e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&canBus.hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800110a:	2102      	movs	r1, #2
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <can_bus_Init+0x80>)
 800110e:	f003 f83c 	bl	800418a <HAL_CAN_ActivateNotification>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000354 	.word	0x20000354
 800111c:	200003bc 	.word	0x200003bc

08001120 <can_bus_Send>:

void can_bus_Send(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

	//Envia dados do Acelerometro
	canBus.tx_header.StdId = 0x240;
 8001124:	4b58      	ldr	r3, [pc, #352]	; (8001288 <can_bus_Send+0x168>)
 8001126:	f44f 7210 	mov.w	r2, #576	; 0x240
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
	canBus.envia[0] = (char) (aceGir.accel.X_RAW+32768);
 800112c:	4b57      	ldr	r3, [pc, #348]	; (800128c <can_bus_Send+0x16c>)
 800112e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b54      	ldr	r3, [pc, #336]	; (8001288 <can_bus_Send+0x168>)
 8001136:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	canBus.envia[1] = (char) ((aceGir.accel.X_RAW+32768) >> 8);
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <can_bus_Send+0x16c>)
 800113c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001140:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001144:	121b      	asrs	r3, r3, #8
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <can_bus_Send+0x168>)
 800114a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	canBus.envia[2] = (char) (aceGir.accel.Y_RAW+32768);;
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <can_bus_Send+0x16c>)
 8001150:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <can_bus_Send+0x168>)
 8001158:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	canBus.envia[3] = (char) ((aceGir.accel.Y_RAW+32768) >> 8);;
 800115c:	4b4b      	ldr	r3, [pc, #300]	; (800128c <can_bus_Send+0x16c>)
 800115e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001162:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001166:	121b      	asrs	r3, r3, #8
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <can_bus_Send+0x168>)
 800116c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	canBus.envia[4] = (char) (aceGir.accel.Z_RAW+32768);;
 8001170:	4b46      	ldr	r3, [pc, #280]	; (800128c <can_bus_Send+0x16c>)
 8001172:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <can_bus_Send+0x168>)
 800117a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	canBus.envia[5] = (char) ((aceGir.accel.Z_RAW+32768) >> 8);;
 800117e:	4b43      	ldr	r3, [pc, #268]	; (800128c <can_bus_Send+0x16c>)
 8001180:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001184:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001188:	121b      	asrs	r3, r3, #8
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <can_bus_Send+0x168>)
 800118e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	canBus.envia[6] = '0';
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <can_bus_Send+0x168>)
 8001194:	2230      	movs	r2, #48	; 0x30
 8001196:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	canBus.envia[7] = '0';
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <can_bus_Send+0x168>)
 800119c:	2230      	movs	r2, #48	; 0x30
 800119e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	HAL_CAN_AddTxMessage(&canBus.hcan, &canBus.tx_header, canBus.envia, &canBus.tx_mail_box);
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <can_bus_Send+0x170>)
 80011a4:	4a3b      	ldr	r2, [pc, #236]	; (8001294 <can_bus_Send+0x174>)
 80011a6:	493c      	ldr	r1, [pc, #240]	; (8001298 <can_bus_Send+0x178>)
 80011a8:	4837      	ldr	r0, [pc, #220]	; (8001288 <can_bus_Send+0x168>)
 80011aa:	f002 ff14 	bl	8003fd6 <HAL_CAN_AddTxMessage>

	//Envia dados do Giroscopio
	canBus.tx_header.StdId = 0x239;
 80011ae:	4b36      	ldr	r3, [pc, #216]	; (8001288 <can_bus_Send+0x168>)
 80011b0:	f240 2239 	movw	r2, #569	; 0x239
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
	canBus.envia[0] = (char) (aceGir.gyro.X_RAW+32768);
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <can_bus_Send+0x16c>)
 80011b8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <can_bus_Send+0x168>)
 80011c0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	canBus.envia[1] = (char) ((aceGir.gyro.X_RAW+32768) >> 8);
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <can_bus_Send+0x16c>)
 80011c6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011ce:	121b      	asrs	r3, r3, #8
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <can_bus_Send+0x168>)
 80011d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	canBus.envia[2] = (char) (aceGir.gyro.Y_RAW+32768);;
 80011d8:	4b2c      	ldr	r3, [pc, #176]	; (800128c <can_bus_Send+0x16c>)
 80011da:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <can_bus_Send+0x168>)
 80011e2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	canBus.envia[3] = (char) ((aceGir.gyro.Y_RAW+32768) >> 8);;
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <can_bus_Send+0x16c>)
 80011e8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011f0:	121b      	asrs	r3, r3, #8
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <can_bus_Send+0x168>)
 80011f6:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	canBus.envia[4] = (char) (aceGir.gyro.Z_RAW+32768);;
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <can_bus_Send+0x16c>)
 80011fc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <can_bus_Send+0x168>)
 8001204:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	canBus.envia[5] = (char) ((aceGir.gyro.Z_RAW+32768) >> 8);;
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <can_bus_Send+0x16c>)
 800120a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800120e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001212:	121b      	asrs	r3, r3, #8
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <can_bus_Send+0x168>)
 8001218:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	canBus.envia[6] = '0';
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <can_bus_Send+0x168>)
 800121e:	2230      	movs	r2, #48	; 0x30
 8001220:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	canBus.envia[7] = '0';
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <can_bus_Send+0x168>)
 8001226:	2230      	movs	r2, #48	; 0x30
 8001228:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	HAL_CAN_AddTxMessage(&canBus.hcan, &canBus.tx_header, canBus.envia, &canBus.tx_mail_box);
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <can_bus_Send+0x170>)
 800122e:	4a19      	ldr	r2, [pc, #100]	; (8001294 <can_bus_Send+0x174>)
 8001230:	4919      	ldr	r1, [pc, #100]	; (8001298 <can_bus_Send+0x178>)
 8001232:	4815      	ldr	r0, [pc, #84]	; (8001288 <can_bus_Send+0x168>)
 8001234:	f002 fecf 	bl	8003fd6 <HAL_CAN_AddTxMessage>

	// debug
	canBus.erro = canBus.hcan.ErrorCode;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <can_bus_Send+0x168>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <can_bus_Send+0x168>)
 800123e:	62d3      	str	r3, [r2, #44]	; 0x2c
	canBus.count++;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <can_bus_Send+0x168>)
 8001242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001244:	3301      	adds	r3, #1
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <can_bus_Send+0x168>)
 800124a:	851a      	strh	r2, [r3, #40]	; 0x28
	if (canBus.count % 5 == 0)
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <can_bus_Send+0x168>)
 800124e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <can_bus_Send+0x17c>)
 8001252:	fba3 1302 	umull	r1, r3, r3, r2
 8001256:	0899      	lsrs	r1, r3, #2
 8001258:	460b      	mov	r3, r1
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d104      	bne.n	8001270 <can_bus_Send+0x150>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <can_bus_Send+0x180>)
 800126c:	f003 ff32 	bl	80050d4 <HAL_GPIO_TogglePin>
	if (canBus.count>50000)
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <can_bus_Send+0x168>)
 8001272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001274:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001278:	4293      	cmp	r3, r2
 800127a:	d902      	bls.n	8001282 <can_bus_Send+0x162>
		canBus.count = 0;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <can_bus_Send+0x168>)
 800127e:	2200      	movs	r2, #0
 8001280:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000354 	.word	0x20000354
 800128c:	20000328 	.word	0x20000328
 8001290:	200003e4 	.word	0x200003e4
 8001294:	200003e8 	.word	0x200003e8
 8001298:	20000388 	.word	0x20000388
 800129c:	cccccccd 	.word	0xcccccccd
 80012a0:	40011000 	.word	0x40011000

080012a4 <dina_Init>:
 */

#include "dina.h"

void dina_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	dina.huart = &huart2;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <dina_Init+0x14>)
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <dina_Init+0x18>)
 80012ac:	601a      	str	r2, [r3, #0]
	forceGauge_uart_Init_DMA(&dina);
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <dina_Init+0x14>)
 80012b0:	f000 fce6 	bl	8001c80 <forceGauge_uart_Init_DMA>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000040c 	.word	0x2000040c
 80012bc:	20000428 	.word	0x20000428

080012c0 <dina_Update>:

void dina_Update(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	forceGauge_getForce(&dina);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <dina_Update+0x10>)
 80012c6:	f000 fcef 	bl	8001ca8 <forceGauge_getForce>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000040c 	.word	0x2000040c

080012d4 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012de:	4802      	ldr	r0, [pc, #8]	; (80012e8 <SELECT+0x14>)
 80012e0:	f003 fee0 	bl	80050a4 <HAL_GPIO_WritePin>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010800 	.word	0x40010800

080012ec <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f6:	4802      	ldr	r0, [pc, #8]	; (8001300 <DESELECT+0x14>)
 80012f8:	f003 fed4 	bl	80050a4 <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40010800 	.word	0x40010800

08001304 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800130e:	bf00      	nop
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <SPI_TxByte+0x30>)
 8001312:	f007 fcee 	bl	8008cf2 <HAL_SPI_GetState>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d1f9      	bne.n	8001310 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800131c:	1df9      	adds	r1, r7, #7
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	2201      	movs	r2, #1
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <SPI_TxByte+0x30>)
 8001326:	f007 f917 	bl	8008558 <HAL_SPI_Transmit>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000cd0 	.word	0x20000cd0

08001338 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800133e:	23ff      	movs	r3, #255	; 0xff
 8001340:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001346:	bf00      	nop
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <SPI_RxByte+0x38>)
 800134a:	f007 fcd2 	bl	8008cf2 <HAL_SPI_GetState>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d1f9      	bne.n	8001348 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001354:	1dba      	adds	r2, r7, #6
 8001356:	1df9      	adds	r1, r7, #7
 8001358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <SPI_RxByte+0x38>)
 8001362:	f007 fa35 	bl	80087d0 <HAL_SPI_TransmitReceive>

  return data;
 8001366:	79bb      	ldrb	r3, [r7, #6]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000cd0 	.word	0x20000cd0

08001374 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800137c:	f7ff ffdc 	bl	8001338 <SPI_RxByte>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	701a      	strb	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SD_ReadyWait+0x34>)
 8001398:	2232      	movs	r2, #50	; 0x32
 800139a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800139c:	f7ff ffcc 	bl	8001338 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80013a0:	f7ff ffca 	bl	8001338 <SPI_RxByte>
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d004      	beq.n	80013b8 <SD_ReadyWait+0x28>
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SD_ReadyWait+0x34>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f3      	bne.n	80013a0 <SD_ReadyWait+0x10>

  return res;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000d70 	.word	0x20000d70

080013c8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80013ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013d2:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80013d4:	f7ff ff8a 	bl	80012ec <DESELECT>

  for(int i = 0; i < 10; i++)
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	e005      	b.n	80013ea <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80013de:	20ff      	movs	r0, #255	; 0xff
 80013e0:	f7ff ff90 	bl	8001304 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	3301      	adds	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	ddf6      	ble.n	80013de <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80013f0:	f7ff ff70 	bl	80012d4 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001408:	2395      	movs	r3, #149	; 0x95
 800140a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e009      	b.n	8001426 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001412:	1d3a      	adds	r2, r7, #4
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff72 	bl	8001304 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b05      	cmp	r3, #5
 800142a:	ddf2      	ble.n	8001412 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800142c:	e002      	b.n	8001434 <SD_PowerOn+0x6c>
  {
    Count--;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3b01      	subs	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001434:	f7ff ff80 	bl	8001338 <SPI_RxByte>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d002      	beq.n	8001444 <SD_PowerOn+0x7c>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f4      	bne.n	800142e <SD_PowerOn+0x66>
  }

  DESELECT();
 8001444:	f7ff ff52 	bl	80012ec <DESELECT>
  SPI_TxByte(0XFF);
 8001448:	20ff      	movs	r0, #255	; 0xff
 800144a:	f7ff ff5b 	bl	8001304 <SPI_TxByte>

  PowerFlag = 1;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <SD_PowerOn+0x94>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200000a5 	.word	0x200000a5

08001460 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <SD_PowerOff+0x14>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200000a5 	.word	0x200000a5

08001478 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800147c:	4b02      	ldr	r3, [pc, #8]	; (8001488 <SD_CheckPower+0x10>)
 800147e:	781b      	ldrb	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	200000a5 	.word	0x200000a5

0800148c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <SD_RxDataBlock+0x68>)
 8001498:	220a      	movs	r2, #10
 800149a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800149c:	f7ff ff4c 	bl	8001338 <SPI_RxByte>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d104      	bne.n	80014b4 <SD_RxDataBlock+0x28>
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <SD_RxDataBlock+0x68>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f3      	bne.n	800149c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2bfe      	cmp	r3, #254	; 0xfe
 80014b8:	d001      	beq.n	80014be <SD_RxDataBlock+0x32>
    return FALSE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e016      	b.n	80014ec <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff55 	bl	8001374 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff4f 	bl	8001374 <SPI_RxBytePtr>
  } while(btr -= 2);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	3b02      	subs	r3, #2
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ed      	bne.n	80014be <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80014e2:	f7ff ff29 	bl	8001338 <SPI_RxByte>
  SPI_RxByte();
 80014e6:	f7ff ff27 	bl	8001338 <SPI_RxByte>

  return TRUE;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000d71 	.word	0x20000d71

080014f8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001508:	f7ff ff42 	bl	8001390 <SD_ReadyWait>
 800150c:	4603      	mov	r3, r0
 800150e:	2bff      	cmp	r3, #255	; 0xff
 8001510:	d001      	beq.n	8001516 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001512:	2300      	movs	r3, #0
 8001514:	e040      	b.n	8001598 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fef3 	bl	8001304 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2bfd      	cmp	r3, #253	; 0xfd
 8001522:	d031      	beq.n	8001588 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fee7 	bl	8001304 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fee0 	bl	8001304 <SPI_TxByte>
    } while (--wc);
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	3b01      	subs	r3, #1
 8001548:	73bb      	strb	r3, [r7, #14]
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1eb      	bne.n	8001528 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001550:	f7ff fef2 	bl	8001338 <SPI_RxByte>
    SPI_RxByte();
 8001554:	f7ff fef0 	bl	8001338 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001558:	e00b      	b.n	8001572 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800155a:	f7ff feed 	bl	8001338 <SPI_RxByte>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2b05      	cmp	r3, #5
 800156a:	d006      	beq.n	800157a <SD_TxDataBlock+0x82>
        break;

      i++;
 800156c:	7b7b      	ldrb	r3, [r7, #13]
 800156e:	3301      	adds	r3, #1
 8001570:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	d9f0      	bls.n	800155a <SD_TxDataBlock+0x62>
 8001578:	e000      	b.n	800157c <SD_TxDataBlock+0x84>
        break;
 800157a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800157c:	bf00      	nop
 800157e:	f7ff fedb 	bl	8001338 <SPI_RxByte>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0fa      	beq.n	800157e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2b05      	cmp	r3, #5
 8001590:	d101      	bne.n	8001596 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80015ac:	f7ff fef0 	bl	8001390 <SD_ReadyWait>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2bff      	cmp	r3, #255	; 0xff
 80015b4:	d001      	beq.n	80015ba <SD_SendCmd+0x1a>
    return 0xFF;
 80015b6:	23ff      	movs	r3, #255	; 0xff
 80015b8:	e040      	b.n	800163c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fea1 	bl	8001304 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	0e1b      	lsrs	r3, r3, #24
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe9b 	bl	8001304 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe95 	bl	8001304 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fe8f 	bl	8001304 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe8a 	bl	8001304 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b40      	cmp	r3, #64	; 0x40
 80015f8:	d101      	bne.n	80015fe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80015fa:	2395      	movs	r3, #149	; 0x95
 80015fc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b48      	cmp	r3, #72	; 0x48
 8001602:	d101      	bne.n	8001608 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001604:	2387      	movs	r3, #135	; 0x87
 8001606:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fe7a 	bl	8001304 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b4c      	cmp	r3, #76	; 0x4c
 8001614:	d101      	bne.n	800161a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001616:	f7ff fe8f 	bl	8001338 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800161a:	230a      	movs	r3, #10
 800161c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800161e:	f7ff fe8b 	bl	8001338 <SPI_RxByte>
 8001622:	4603      	mov	r3, r0
 8001624:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001626:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da05      	bge.n	800163a <SD_SendCmd+0x9a>
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	3b01      	subs	r3, #1
 8001632:	73bb      	strb	r3, [r7, #14]
 8001634:	7bbb      	ldrb	r3, [r7, #14]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f1      	bne.n	800161e <SD_SendCmd+0x7e>

  return res;
 800163a:	7b7b      	ldrb	r3, [r7, #13]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001654:	2301      	movs	r3, #1
 8001656:	e0d5      	b.n	8001804 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001658:	4b6c      	ldr	r3, [pc, #432]	; (800180c <SD_disk_initialize+0x1c8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <SD_disk_initialize+0x2a>
    return Stat;
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <SD_disk_initialize+0x1c8>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	e0ca      	b.n	8001804 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800166e:	f7ff feab 	bl	80013c8 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001672:	f7ff fe2f 	bl	80012d4 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800167a:	2100      	movs	r1, #0
 800167c:	2040      	movs	r0, #64	; 0x40
 800167e:	f7ff ff8f 	bl	80015a0 <SD_SendCmd>
 8001682:	4603      	mov	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 80a5 	bne.w	80017d4 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800168a:	4b61      	ldr	r3, [pc, #388]	; (8001810 <SD_disk_initialize+0x1cc>)
 800168c:	2264      	movs	r2, #100	; 0x64
 800168e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001690:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001694:	2048      	movs	r0, #72	; 0x48
 8001696:	f7ff ff83 	bl	80015a0 <SD_SendCmd>
 800169a:	4603      	mov	r3, r0
 800169c:	2b01      	cmp	r3, #1
 800169e:	d158      	bne.n	8001752 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e00c      	b.n	80016c0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80016a6:	7bfc      	ldrb	r4, [r7, #15]
 80016a8:	f7ff fe46 	bl	8001338 <SPI_RxByte>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4423      	add	r3, r4
 80016b6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d9ef      	bls.n	80016a6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8083 	bne.w	80017d4 <SD_disk_initialize+0x190>
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	2baa      	cmp	r3, #170	; 0xaa
 80016d2:	d17f      	bne.n	80017d4 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80016d4:	2100      	movs	r1, #0
 80016d6:	2077      	movs	r0, #119	; 0x77
 80016d8:	f7ff ff62 	bl	80015a0 <SD_SendCmd>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d807      	bhi.n	80016f2 <SD_disk_initialize+0xae>
 80016e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016e6:	2069      	movs	r0, #105	; 0x69
 80016e8:	f7ff ff5a 	bl	80015a0 <SD_SendCmd>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <SD_disk_initialize+0x1cc>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1eb      	bne.n	80016d4 <SD_disk_initialize+0x90>
 80016fc:	e000      	b.n	8001700 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80016fe:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <SD_disk_initialize+0x1cc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d064      	beq.n	80017d4 <SD_disk_initialize+0x190>
 800170a:	2100      	movs	r1, #0
 800170c:	207a      	movs	r0, #122	; 0x7a
 800170e:	f7ff ff47 	bl	80015a0 <SD_SendCmd>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d15d      	bne.n	80017d4 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e00c      	b.n	8001738 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800171e:	7bfc      	ldrb	r4, [r7, #15]
 8001720:	f7ff fe0a 	bl	8001338 <SPI_RxByte>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4423      	add	r3, r4
 800172e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	3301      	adds	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d9ef      	bls.n	800171e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800173e:	7a3b      	ldrb	r3, [r7, #8]
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SD_disk_initialize+0x108>
 8001748:	2306      	movs	r3, #6
 800174a:	e000      	b.n	800174e <SD_disk_initialize+0x10a>
 800174c:	2302      	movs	r3, #2
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	e040      	b.n	80017d4 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001752:	2100      	movs	r1, #0
 8001754:	2077      	movs	r0, #119	; 0x77
 8001756:	f7ff ff23 	bl	80015a0 <SD_SendCmd>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d808      	bhi.n	8001772 <SD_disk_initialize+0x12e>
 8001760:	2100      	movs	r1, #0
 8001762:	2069      	movs	r0, #105	; 0x69
 8001764:	f7ff ff1c 	bl	80015a0 <SD_SendCmd>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d801      	bhi.n	8001772 <SD_disk_initialize+0x12e>
 800176e:	2302      	movs	r3, #2
 8001770:	e000      	b.n	8001774 <SD_disk_initialize+0x130>
 8001772:	2301      	movs	r3, #1
 8001774:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d10e      	bne.n	800179a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800177c:	2100      	movs	r1, #0
 800177e:	2077      	movs	r0, #119	; 0x77
 8001780:	f7ff ff0e 	bl	80015a0 <SD_SendCmd>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d80e      	bhi.n	80017a8 <SD_disk_initialize+0x164>
 800178a:	2100      	movs	r1, #0
 800178c:	2069      	movs	r0, #105	; 0x69
 800178e:	f7ff ff07 	bl	80015a0 <SD_SendCmd>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001798:	e00d      	b.n	80017b6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800179a:	2100      	movs	r1, #0
 800179c:	2041      	movs	r0, #65	; 0x41
 800179e:	f7ff feff 	bl	80015a0 <SD_SendCmd>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <SD_disk_initialize+0x1cc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e1      	bne.n	8001776 <SD_disk_initialize+0x132>
 80017b2:	e000      	b.n	80017b6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80017b4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <SD_disk_initialize+0x1cc>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <SD_disk_initialize+0x18c>
 80017c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c4:	2050      	movs	r0, #80	; 0x50
 80017c6:	f7ff feeb 	bl	80015a0 <SD_SendCmd>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <SD_disk_initialize+0x1d0>)
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80017da:	f7ff fd87 	bl	80012ec <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80017de:	f7ff fdab 	bl	8001338 <SPI_RxByte>

  if (type)
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <SD_disk_initialize+0x1c8>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SD_disk_initialize+0x1c8>)
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e001      	b.n	80017fe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80017fa:	f7ff fe31 	bl	8001460 <SD_PowerOff>
  }

  return Stat;
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <SD_disk_initialize+0x1c8>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	20000d71 	.word	0x20000d71
 8001814:	200000a4 	.word	0x200000a4

08001818 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001828:	2301      	movs	r3, #1
 800182a:	e002      	b.n	8001832 <SD_disk_status+0x1a>

  return Stat;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <SD_disk_status+0x24>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000000 	.word	0x20000000

08001840 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <SD_disk_read+0x1c>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <SD_disk_read+0x20>
    return RES_PARERR;
 800185c:	2304      	movs	r3, #4
 800185e:	e051      	b.n	8001904 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <SD_disk_read+0xcc>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800186e:	2303      	movs	r3, #3
 8001870:	e048      	b.n	8001904 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <SD_disk_read+0xd0>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	025b      	lsls	r3, r3, #9
 8001882:	607b      	str	r3, [r7, #4]

  SELECT();
 8001884:	f7ff fd26 	bl	80012d4 <SELECT>

  if (count == 1)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d111      	bne.n	80018b2 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	2051      	movs	r0, #81	; 0x51
 8001892:	f7ff fe85 	bl	80015a0 <SD_SendCmd>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d129      	bne.n	80018f0 <SD_disk_read+0xb0>
 800189c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f7ff fdf3 	bl	800148c <SD_RxDataBlock>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d021      	beq.n	80018f0 <SD_disk_read+0xb0>
      count = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	e01e      	b.n	80018f0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	2052      	movs	r0, #82	; 0x52
 80018b6:	f7ff fe73 	bl	80015a0 <SD_SendCmd>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d117      	bne.n	80018f0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80018c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f7ff fde1 	bl	800148c <SD_RxDataBlock>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018d6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	3b01      	subs	r3, #1
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ed      	bne.n	80018c0 <SD_disk_read+0x80>
 80018e4:	e000      	b.n	80018e8 <SD_disk_read+0xa8>
          break;
 80018e6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80018e8:	2100      	movs	r1, #0
 80018ea:	204c      	movs	r0, #76	; 0x4c
 80018ec:	f7ff fe58 	bl	80015a0 <SD_SendCmd>
    }
  }

  DESELECT();
 80018f0:	f7ff fcfc 	bl	80012ec <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80018f4:	f7ff fd20 	bl	8001338 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000000 	.word	0x20000000
 8001910:	200000a4 	.word	0x200000a4

08001914 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <SD_disk_write+0x1c>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <SD_disk_write+0x20>
    return RES_PARERR;
 8001930:	2304      	movs	r3, #4
 8001932:	e06b      	b.n	8001a0c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001934:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <SD_disk_write+0x100>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001942:	2303      	movs	r3, #3
 8001944:	e062      	b.n	8001a0c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <SD_disk_write+0x100>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001954:	2302      	movs	r3, #2
 8001956:	e059      	b.n	8001a0c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <SD_disk_write+0x104>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	607b      	str	r3, [r7, #4]

  SELECT();
 800196a:	f7ff fcb3 	bl	80012d4 <SELECT>

  if (count == 1)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d110      	bne.n	8001996 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	2058      	movs	r0, #88	; 0x58
 8001978:	f7ff fe12 	bl	80015a0 <SD_SendCmd>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d13a      	bne.n	80019f8 <SD_disk_write+0xe4>
 8001982:	21fe      	movs	r1, #254	; 0xfe
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f7ff fdb7 	bl	80014f8 <SD_TxDataBlock>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d033      	beq.n	80019f8 <SD_disk_write+0xe4>
      count = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	e030      	b.n	80019f8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <SD_disk_write+0x104>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2077      	movs	r0, #119	; 0x77
 80019a6:	f7ff fdfb 	bl	80015a0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	2057      	movs	r0, #87	; 0x57
 80019ae:	f7ff fdf7 	bl	80015a0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	2059      	movs	r0, #89	; 0x59
 80019b6:	f7ff fdf3 	bl	80015a0 <SD_SendCmd>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11b      	bne.n	80019f8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80019c0:	21fc      	movs	r1, #252	; 0xfc
 80019c2:	68b8      	ldr	r0, [r7, #8]
 80019c4:	f7ff fd98 	bl	80014f8 <SD_TxDataBlock>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00a      	beq.n	80019e4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019d4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ee      	bne.n	80019c0 <SD_disk_write+0xac>
 80019e2:	e000      	b.n	80019e6 <SD_disk_write+0xd2>
          break;
 80019e4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80019e6:	21fd      	movs	r1, #253	; 0xfd
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fd85 	bl	80014f8 <SD_TxDataBlock>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <SD_disk_write+0xe4>
      {
        count = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80019f8:	f7ff fc78 	bl	80012ec <DESELECT>
  SPI_RxByte();
 80019fc:	f7ff fc9c 	bl	8001338 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	200000a4 	.word	0x200000a4

08001a1c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b08b      	sub	sp, #44	; 0x2c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	603a      	str	r2, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001a36:	2304      	movs	r3, #4
 8001a38:	e11b      	b.n	8001c72 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d129      	bne.n	8001a9a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d017      	beq.n	8001a7e <SD_disk_ioctl+0x62>
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	dc1f      	bgt.n	8001a92 <SD_disk_ioctl+0x76>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <SD_disk_ioctl+0x40>
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d00b      	beq.n	8001a72 <SD_disk_ioctl+0x56>
 8001a5a:	e01a      	b.n	8001a92 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001a5c:	f7ff fd0c 	bl	8001478 <SD_CheckPower>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001a66:	f7ff fcfb 	bl	8001460 <SD_PowerOff>
      res = RES_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a70:	e0fd      	b.n	8001c6e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001a72:	f7ff fca9 	bl	80013c8 <SD_PowerOn>
      res = RES_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a7c:	e0f7      	b.n	8001c6e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	1c5c      	adds	r4, r3, #1
 8001a82:	f7ff fcf9 	bl	8001478 <SD_CheckPower>
 8001a86:	4603      	mov	r3, r0
 8001a88:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a90:	e0ed      	b.n	8001c6e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001a92:	2304      	movs	r3, #4
 8001a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a98:	e0e9      	b.n	8001c6e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001a9a:	4b78      	ldr	r3, [pc, #480]	; (8001c7c <SD_disk_ioctl+0x260>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0e2      	b.n	8001c72 <SD_disk_ioctl+0x256>

    SELECT();
 8001aac:	f7ff fc12 	bl	80012d4 <SELECT>

    switch (ctrl)
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	2b0d      	cmp	r3, #13
 8001ab4:	f200 80cc 	bhi.w	8001c50 <SD_disk_ioctl+0x234>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <SD_disk_ioctl+0xa4>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001bbb 	.word	0x08001bbb
 8001ac4:	08001af9 	.word	0x08001af9
 8001ac8:	08001bab 	.word	0x08001bab
 8001acc:	08001c51 	.word	0x08001c51
 8001ad0:	08001c51 	.word	0x08001c51
 8001ad4:	08001c51 	.word	0x08001c51
 8001ad8:	08001c51 	.word	0x08001c51
 8001adc:	08001c51 	.word	0x08001c51
 8001ae0:	08001c51 	.word	0x08001c51
 8001ae4:	08001c51 	.word	0x08001c51
 8001ae8:	08001c51 	.word	0x08001c51
 8001aec:	08001bcd 	.word	0x08001bcd
 8001af0:	08001bf1 	.word	0x08001bf1
 8001af4:	08001c15 	.word	0x08001c15
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001af8:	2100      	movs	r1, #0
 8001afa:	2049      	movs	r0, #73	; 0x49
 8001afc:	f7ff fd50 	bl	80015a0 <SD_SendCmd>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80a8 	bne.w	8001c58 <SD_disk_ioctl+0x23c>
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fcbc 	bl	800148c <SD_RxDataBlock>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 809e 	beq.w	8001c58 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001b1c:	7b3b      	ldrb	r3, [r7, #12]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10e      	bne.n	8001b44 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001b26:	7d7b      	ldrb	r3, [r7, #21]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	7d3b      	ldrb	r3, [r7, #20]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001b3a:	8bfb      	ldrh	r3, [r7, #30]
 8001b3c:	029a      	lsls	r2, r3, #10
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e02e      	b.n	8001ba2 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b44:	7c7b      	ldrb	r3, [r7, #17]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	7dbb      	ldrb	r3, [r7, #22]
 8001b4e:	09db      	lsrs	r3, r3, #7
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	7d7b      	ldrb	r3, [r7, #21]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f003 0306 	and.w	r3, r3, #6
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3302      	adds	r3, #2
 8001b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b6c:	7d3b      	ldrb	r3, [r7, #20]
 8001b6e:	099b      	lsrs	r3, r3, #6
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	7cfb      	ldrb	r3, [r7, #19]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	7cbb      	ldrb	r3, [r7, #18]
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b94:	8bfa      	ldrh	r2, [r7, #30]
 8001b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b9a:	3b09      	subs	r3, #9
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001ba8:	e056      	b.n	8001c58 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bb8:	e055      	b.n	8001c66 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001bba:	f7ff fbe9 	bl	8001390 <SD_ReadyWait>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2bff      	cmp	r3, #255	; 0xff
 8001bc2:	d14b      	bne.n	8001c5c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bca:	e047      	b.n	8001c5c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2049      	movs	r0, #73	; 0x49
 8001bd0:	f7ff fce6 	bl	80015a0 <SD_SendCmd>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d142      	bne.n	8001c60 <SD_disk_ioctl+0x244>
 8001bda:	2110      	movs	r1, #16
 8001bdc:	6a38      	ldr	r0, [r7, #32]
 8001bde:	f7ff fc55 	bl	800148c <SD_RxDataBlock>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d03b      	beq.n	8001c60 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bee:	e037      	b.n	8001c60 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	204a      	movs	r0, #74	; 0x4a
 8001bf4:	f7ff fcd4 	bl	80015a0 <SD_SendCmd>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d132      	bne.n	8001c64 <SD_disk_ioctl+0x248>
 8001bfe:	2110      	movs	r1, #16
 8001c00:	6a38      	ldr	r0, [r7, #32]
 8001c02:	f7ff fc43 	bl	800148c <SD_RxDataBlock>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02b      	beq.n	8001c64 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c12:	e027      	b.n	8001c64 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001c14:	2100      	movs	r1, #0
 8001c16:	207a      	movs	r0, #122	; 0x7a
 8001c18:	f7ff fcc2 	bl	80015a0 <SD_SendCmd>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c28:	e00b      	b.n	8001c42 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001c2a:	6a3c      	ldr	r4, [r7, #32]
 8001c2c:	1c63      	adds	r3, r4, #1
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	f7ff fb82 	bl	8001338 <SPI_RxByte>
 8001c34:	4603      	mov	r3, r0
 8001c36:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001c38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d9ef      	bls.n	8001c2a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001c50:	2304      	movs	r3, #4
 8001c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c56:	e006      	b.n	8001c66 <SD_disk_ioctl+0x24a>
      break;
 8001c58:	bf00      	nop
 8001c5a:	e004      	b.n	8001c66 <SD_disk_ioctl+0x24a>
      break;
 8001c5c:	bf00      	nop
 8001c5e:	e002      	b.n	8001c66 <SD_disk_ioctl+0x24a>
      break;
 8001c60:	bf00      	nop
 8001c62:	e000      	b.n	8001c66 <SD_disk_ioctl+0x24a>
      break;
 8001c64:	bf00      	nop
    }

    DESELECT();
 8001c66:	f7ff fb41 	bl	80012ec <DESELECT>
    SPI_RxByte();
 8001c6a:	f7ff fb65 	bl	8001338 <SPI_RxByte>
  }

  return res;
 8001c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	372c      	adds	r7, #44	; 0x2c
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000000 	.word	0x20000000

08001c80 <forceGauge_uart_Init_DMA>:

/*
 *	Função que inicia a leitura
 */
void forceGauge_uart_Init_DMA(fGauge_HandleTypeDef *hfGauge)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	2210      	movs	r2, #16
 8001c92:	4619      	mov	r1, r3
 8001c94:	f008 f869 	bl	8009d6a <HAL_UART_Receive_DMA>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <forceGauge_getForce>:
/*
 * 	Função que lê os valores no buffer e converte a string em um int.
 * 	Essa função tambem detecta se a celula de carga foi desconectada e reinicia a leitura quando possivel.
 */
void forceGauge_getForce(fGauge_HandleTypeDef *hfGauge)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	int force = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]

	/*	Logica para reiniciar a leitura	*/
	if (hfGauge->huart->hdmatx->State != HAL_DMA_STATE_BUSY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d00b      	beq.n	8001cda <forceGauge_getForce+0x32>
		hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2210      	movs	r2, #16
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f008 f84c 	bl	8009d6a <HAL_UART_Receive_DMA>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	761a      	strb	r2, [r3, #24]

	/*	Conversão string to int	*/
	if (hfGauge->rxbuffer[14] >=48 && hfGauge->rxbuffer[14] <= 57)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7c9b      	ldrb	r3, [r3, #18]
 8001cde:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce0:	d94d      	bls.n	8001d7e <forceGauge_getForce+0xd6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7c9b      	ldrb	r3, [r3, #18]
 8001ce6:	2b39      	cmp	r3, #57	; 0x39
 8001ce8:	d849      	bhi.n	8001d7e <forceGauge_getForce+0xd6>
	{
		force += (hfGauge->rxbuffer[14] - 48) * 1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7c9b      	ldrb	r3, [r3, #18]
 8001cee:	3b30      	subs	r3, #48	; 0x30
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[13] - 48) * 10;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7c5b      	ldrb	r3, [r3, #17]
 8001cfa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[12] - 48) * 100;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7c1b      	ldrb	r3, [r3, #16]
 8001d12:	3b30      	subs	r3, #48	; 0x30
 8001d14:	2264      	movs	r2, #100	; 0x64
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[11] - 48) * 1000;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7bdb      	ldrb	r3, [r3, #15]
 8001d24:	3b30      	subs	r3, #48	; 0x30
 8001d26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[10] - 48) * 10000;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7b9b      	ldrb	r3, [r3, #14]
 8001d38:	3b30      	subs	r3, #48	; 0x30
 8001d3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[9] - 48) * 100000;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7b5b      	ldrb	r3, [r3, #13]
 8001d4c:	3b30      	subs	r3, #48	; 0x30
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <forceGauge_getForce+0xe4>)
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[8] - 48) * 1000000;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7b1b      	ldrb	r3, [r3, #12]
 8001d5e:	3b30      	subs	r3, #48	; 0x30
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <forceGauge_getForce+0xe8>)
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[7] - 48) * 10000000;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7adb      	ldrb	r3, [r3, #11]
 8001d70:	3b30      	subs	r3, #48	; 0x30
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <forceGauge_getForce+0xec>)
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
	}

	hfGauge->force = force;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	615a      	str	r2, [r3, #20]
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	000186a0 	.word	0x000186a0
 8001d90:	000f4240 	.word	0x000f4240
 8001d94:	00989680 	.word	0x00989680

08001d98 <indutivo_Init>:

/*
 * 	Função para iniciar a leitura
 */
HAL_StatusTypeDef indutivo_Init(indutivo_typedef *hindutivo)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	hindutivo->value_raw = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
	hindutivo->freq = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
	hindutivo->count = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]

	result = HAL_TIM_Base_Start_IT(hindutivo->htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	4618      	mov	r0, r3
 8001db8:	f007 f8b2 	bl	8008f20 <HAL_TIM_Base_Start_IT>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
	result = HAL_TIM_IC_Start_IT(hindutivo->htim, hindutivo->channel);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f007 f952 	bl	8009074 <HAL_TIM_IC_Start_IT>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	73fb      	strb	r3, [r7, #15]

	return result;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <indutivo_filtro>:

/*
 * 	Função para o filtro de dados, calcula o value
 */
void indutivo_filtro(indutivo_typedef *hindutivo)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	hindutivo->value = 0;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]

	if (hindutivo->value_raw > 9999)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001df6:	4293      	cmp	r3, r2
 8001df8:	dd03      	ble.n	8001e02 <indutivo_filtro+0x22>
		hindutivo->value_raw = hindutivo->buf[4];
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 4; i++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e00f      	b.n	8001e28 <indutivo_filtro+0x48>
		hindutivo->buf[i] = hindutivo->buf[i+1];
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3301      	adds	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	ddec      	ble.n	8001e08 <indutivo_filtro+0x28>

	hindutivo->buf[4] = hindutivo->value_raw;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

	for (int i = 0; i < 5; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	e00d      	b.n	8001e58 <indutivo_filtro+0x78>
		hindutivo->value += hindutivo->buf[i];
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3304      	adds	r3, #4
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	441a      	add	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3301      	adds	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	ddee      	ble.n	8001e3c <indutivo_filtro+0x5c>

	hindutivo->value = (int)hindutivo->value/5.0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb7a 	bl	800055c <__aeabi_i2d>
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <indutivo_filtro+0xac>)
 8001e6e:	f7fe fd09 	bl	8000884 <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fdeb 	bl	8000a54 <__aeabi_d2iz>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	605a      	str	r2, [r3, #4]
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40140000 	.word	0x40140000

08001e90 <indutivo_calc>:
/*
 * 	Função pra ser chamada quando ocorre a interrupção de sinal
 * 	Calcula o value_raw
 */
void indutivo_calc(indutivo_typedef *hindutivo)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	hindutivo->count += __HAL_TIM_GET_COMPARE(hindutivo->htim, hindutivo->channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <indutivo_calc+0x1a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	e015      	b.n	8001ed6 <indutivo_calc+0x46>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d104      	bne.n	8001ebc <indutivo_calc+0x2c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	e00c      	b.n	8001ed6 <indutivo_calc+0x46>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d104      	bne.n	8001ece <indutivo_calc+0x3e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ecc:	e003      	b.n	8001ed6 <indutivo_calc+0x46>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68d2      	ldr	r2, [r2, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(hindutivo->htim, 0);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
	hindutivo->freq = (int)(100000000.0 / hindutivo->count);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb33 	bl	800055c <__aeabi_i2d>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	a115      	add	r1, pc, #84	; (adr r1, 8001f50 <indutivo_calc+0xc0>)
 8001efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f00:	f7fe fcc0 	bl	8000884 <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fda2 	bl	8000a54 <__aeabi_d2iz>
 8001f10:	4602      	mov	r2, r0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
	hindutivo->value_raw = (int)(hindutivo->constante*hindutivo->freq);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681c      	ldr	r4, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe feca 	bl	8000cb8 <__aeabi_i2f>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4619      	mov	r1, r3
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7fe f911 	bl	8000150 <__aeabi_fmul>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ff15 	bl	8000d60 <__aeabi_f2iz>
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
	indutivo_filtro(hindutivo);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff4f 	bl	8001de0 <indutivo_filtro>
	hindutivo->count = 0;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	00000000 	.word	0x00000000
 8001f54:	4197d784 	.word	0x4197d784

08001f58 <indutivo_reset>:
/*
 * 	Função pra ser chamada quando o timer atinge valor maximo
 * 	Zera os valores
 */
void indutivo_reset(indutivo_typedef *hindutivo)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	if(hindutivo->count<1000000)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <indutivo_reset+0x3c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	dc07      	bgt.n	8001f7a <indutivo_reset+0x22>
	{
		hindutivo->count+=50000;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8001f72:	3350      	adds	r3, #80	; 0x50
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	60d3      	str	r3, [r2, #12]
	{
		hindutivo->freq=0;
		hindutivo->value_raw=0;
		indutivo_filtro(hindutivo);
	}
}
 8001f78:	e008      	b.n	8001f8c <indutivo_reset+0x34>
		hindutivo->freq=0;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
		hindutivo->value_raw=0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
		indutivo_filtro(hindutivo);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ff2a 	bl	8001de0 <indutivo_filtro>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	000f423f 	.word	0x000f423f

08001f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f9c:	f001 fba0 	bl	80036e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa0:	f000 f84c 	bl	800203c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa4:	f000 fb5c 	bl	8002660 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fa8:	f000 fb34 	bl	8002614 <MX_DMA_Init>
  MX_ADC1_Init();
 8001fac:	f000 f8a2 	bl	80020f4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001fb0:	f000 f922 	bl	80021f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001fb4:	f000 f94e 	bl	8002254 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001fb8:	f000 f9f6 	bl	80023a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fbc:	f000 fa64 	bl	8002488 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001fc0:	f008 fbe6 	bl	800a790 <MX_FATFS_Init>
  MX_TIM4_Init();
 8001fc4:	f000 faae 	bl	8002524 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001fc8:	f000 f97a 	bl	80022c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001fcc:	f000 faf8 	bl	80025c0 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8001fd0:	f000 f8de 	bl	8002190 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	fresult = SD_Init();
 8001fd4:	f000 fc18 	bl	8002808 <SD_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <main+0x98>)
 8001fde:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NOT_READY)
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <main+0x98>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d103      	bne.n	8001ff0 <main+0x58>
		sdCard.mode = 9;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <main+0x9c>)
 8001fea:	2209      	movs	r2, #9
 8001fec:	f8a3 25f4 	strh.w	r2, [r3, #1524]	; 0x5f4

	if (sdCard.mode == 0)
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <main+0x9c>)
 8001ff2:	f8b3 35f4 	ldrh.w	r3, [r3, #1524]	; 0x5f4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d104      	bne.n	8002004 <main+0x6c>
	{
	  rot_Init();
 8001ffa:	f000 fba5 	bl	8002748 <rot_Init>
	  vel_Init();
 8001ffe:	f001 fb1f 	bl	8003640 <vel_Init>
 8002002:	e013      	b.n	800202c <main+0x94>
	}
	else if (sdCard.mode == 1)
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <main+0x9c>)
 8002006:	f8b3 35f4 	ldrh.w	r3, [r3, #1524]	; 0x5f4
 800200a:	2b01      	cmp	r3, #1
 800200c:	d104      	bne.n	8002018 <main+0x80>
	{
	  rot_Init();
 800200e:	f000 fb9b 	bl	8002748 <rot_Init>
	  dina_Init();
 8002012:	f7ff f947 	bl	80012a4 <dina_Init>
 8002016:	e009      	b.n	800202c <main+0x94>
	}
	else if (sdCard.mode == 9)
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <main+0x9c>)
 800201a:	f8b3 35f4 	ldrh.w	r3, [r3, #1524]	; 0x5f4
 800201e:	2b09      	cmp	r3, #9
 8002020:	d104      	bne.n	800202c <main+0x94>
	{
		aceGir_Init(&hi2c2);
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <main+0xa0>)
 8002024:	f7fe fec2 	bl	8000dac <aceGir_Init>
		can_bus_Init();
 8002028:	f7ff f836 	bl	8001098 <can_bus_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800202c:	e7fe      	b.n	800202c <main+0x94>
 800202e:	bf00      	nop
 8002030:	20000ccc 	.word	0x20000ccc
 8002034:	2000049c 	.word	0x2000049c
 8002038:	20000a94 	.word	0x20000a94

0800203c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b094      	sub	sp, #80	; 0x50
 8002040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002046:	2228      	movs	r2, #40	; 0x28
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f00b ff24 	bl	800de98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800206c:	2301      	movs	r3, #1
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800207a:	2301      	movs	r3, #1
 800207c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207e:	2302      	movs	r3, #2
 8002080:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002088:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800208c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002092:	4618      	mov	r0, r3
 8002094:	f005 fd0c 	bl	8007ab0 <HAL_RCC_OscConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800209e:	f000 fb4d 	bl	800273c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	230f      	movs	r3, #15
 80020a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2102      	movs	r1, #2
 80020be:	4618      	mov	r0, r3
 80020c0:	f005 ff76 	bl	8007fb0 <HAL_RCC_ClockConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80020ca:	f000 fb37 	bl	800273c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020ce:	2302      	movs	r3, #2
 80020d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80020d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4618      	mov	r0, r3
 80020dc:	f006 f902 	bl	80082e4 <HAL_RCCEx_PeriphCLKConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80020e6:	f000 fb29 	bl	800273c <Error_Handler>
  }
}
 80020ea:	bf00      	nop
 80020ec:	3750      	adds	r7, #80	; 0x50
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <MX_ADC1_Init+0x94>)
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <MX_ADC1_Init+0x98>)
 8002108:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <MX_ADC1_Init+0x94>)
 800210c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002110:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_ADC1_Init+0x94>)
 8002114:	2201      	movs	r2, #1
 8002116:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_ADC1_Init+0x94>)
 800211a:	2200      	movs	r2, #0
 800211c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <MX_ADC1_Init+0x94>)
 8002120:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002124:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_ADC1_Init+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_ADC1_Init+0x94>)
 800212e:	2202      	movs	r2, #2
 8002130:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002132:	4815      	ldr	r0, [pc, #84]	; (8002188 <MX_ADC1_Init+0x94>)
 8002134:	f001 fb36 	bl	80037a4 <HAL_ADC_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800213e:	f000 fafd 	bl	800273c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002142:	2307      	movs	r3, #7
 8002144:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002146:	2301      	movs	r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800214a:	2307      	movs	r3, #7
 800214c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	480d      	ldr	r0, [pc, #52]	; (8002188 <MX_ADC1_Init+0x94>)
 8002154:	f001 fbfe 	bl	8003954 <HAL_ADC_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800215e:	f000 faed 	bl	800273c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002162:	2309      	movs	r3, #9
 8002164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002166:	2302      	movs	r3, #2
 8002168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <MX_ADC1_Init+0x94>)
 8002170:	f001 fbf0 	bl	8003954 <HAL_ADC_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800217a:	f000 fadf 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000b88 	.word	0x20000b88
 800218c:	40012400 	.word	0x40012400

08002190 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MX_CAN_Init+0x60>)
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <MX_CAN_Init+0x64>)
 8002198:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_CAN_Init+0x60>)
 800219c:	2210      	movs	r2, #16
 800219e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <MX_CAN_Init+0x60>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MX_CAN_Init+0x60>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <MX_CAN_Init+0x60>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_CAN_Init+0x60>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <MX_CAN_Init+0x60>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_CAN_Init+0x60>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <MX_CAN_Init+0x60>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_CAN_Init+0x60>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <MX_CAN_Init+0x60>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_CAN_Init+0x60>)
 80021d8:	2200      	movs	r2, #0
 80021da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <MX_CAN_Init+0x60>)
 80021de:	f001 fcf2 	bl	8003bc6 <HAL_CAN_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80021e8:	f000 faa8 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000ae8 	.word	0x20000ae8
 80021f4:	40006400 	.word	0x40006400

080021f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <MX_I2C2_Init+0x50>)
 80021fe:	4a13      	ldr	r2, [pc, #76]	; (800224c <MX_I2C2_Init+0x54>)
 8002200:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_I2C2_Init+0x50>)
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <MX_I2C2_Init+0x58>)
 8002206:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <MX_I2C2_Init+0x50>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_I2C2_Init+0x50>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_I2C2_Init+0x50>)
 8002216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800221a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <MX_I2C2_Init+0x50>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <MX_I2C2_Init+0x50>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <MX_I2C2_Init+0x50>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_I2C2_Init+0x50>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002234:	4804      	ldr	r0, [pc, #16]	; (8002248 <MX_I2C2_Init+0x50>)
 8002236:	f002 ff67 	bl	8005108 <HAL_I2C_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002240:	f000 fa7c 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000a94 	.word	0x20000a94
 800224c:	40005800 	.word	0x40005800
 8002250:	000186a0 	.word	0x000186a0

08002254 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <MX_SPI1_Init+0x64>)
 800225a:	4a18      	ldr	r2, [pc, #96]	; (80022bc <MX_SPI1_Init+0x68>)
 800225c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <MX_SPI1_Init+0x64>)
 8002260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002264:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <MX_SPI1_Init+0x64>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <MX_SPI1_Init+0x64>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_SPI1_Init+0x64>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <MX_SPI1_Init+0x64>)
 800227a:	2200      	movs	r2, #0
 800227c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_SPI1_Init+0x64>)
 8002280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002284:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_SPI1_Init+0x64>)
 8002288:	2210      	movs	r2, #16
 800228a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <MX_SPI1_Init+0x64>)
 800228e:	2200      	movs	r2, #0
 8002290:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_SPI1_Init+0x64>)
 8002294:	2200      	movs	r2, #0
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <MX_SPI1_Init+0x64>)
 800229a:	2200      	movs	r2, #0
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_SPI1_Init+0x64>)
 80022a0:	220a      	movs	r2, #10
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022a4:	4804      	ldr	r0, [pc, #16]	; (80022b8 <MX_SPI1_Init+0x64>)
 80022a6:	f006 f8d3 	bl	8008450 <HAL_SPI_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022b0:	f000 fa44 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000cd0 	.word	0x20000cd0
 80022bc:	40013000 	.word	0x40013000

080022c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022de:	463b      	mov	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <MX_TIM1_Init+0xe0>)
 80022ec:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <MX_TIM1_Init+0xe4>)
 80022ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <MX_TIM1_Init+0xe0>)
 80022f2:	2247      	movs	r2, #71	; 0x47
 80022f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <MX_TIM1_Init+0xe0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <MX_TIM1_Init+0xe0>)
 80022fe:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002302:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <MX_TIM1_Init+0xe0>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800230a:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <MX_TIM1_Init+0xe0>)
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <MX_TIM1_Init+0xe0>)
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002316:	4822      	ldr	r0, [pc, #136]	; (80023a0 <MX_TIM1_Init+0xe0>)
 8002318:	f006 fdb2 	bl	8008e80 <HAL_TIM_Base_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002322:	f000 fa0b 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	4619      	mov	r1, r3
 8002332:	481b      	ldr	r0, [pc, #108]	; (80023a0 <MX_TIM1_Init+0xe0>)
 8002334:	f007 f940 	bl	80095b8 <HAL_TIM_ConfigClockSource>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800233e:	f000 f9fd 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002342:	4817      	ldr	r0, [pc, #92]	; (80023a0 <MX_TIM1_Init+0xe0>)
 8002344:	f006 fe3e 	bl	8008fc4 <HAL_TIM_IC_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800234e:	f000 f9f5 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4619      	mov	r1, r3
 8002360:	480f      	ldr	r0, [pc, #60]	; (80023a0 <MX_TIM1_Init+0xe0>)
 8002362:	f007 fc45 	bl	8009bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800236c:	f000 f9e6 	bl	800273c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002370:	2300      	movs	r3, #0
 8002372:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002374:	2301      	movs	r3, #1
 8002376:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800237c:	230f      	movs	r3, #15
 800237e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002380:	463b      	mov	r3, r7
 8002382:	2200      	movs	r2, #0
 8002384:	4619      	mov	r1, r3
 8002386:	4806      	ldr	r0, [pc, #24]	; (80023a0 <MX_TIM1_Init+0xe0>)
 8002388:	f007 f882 	bl	8009490 <HAL_TIM_IC_ConfigChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002392:	f000 f9d3 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000c84 	.word	0x20000c84
 80023a4:	40012c00 	.word	0x40012c00

080023a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ae:	f107 0318 	add.w	r3, r7, #24
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023c6:	463b      	mov	r3, r7
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023d2:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <MX_TIM2_Init+0xdc>)
 80023d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <MX_TIM2_Init+0xdc>)
 80023dc:	2247      	movs	r2, #71	; 0x47
 80023de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <MX_TIM2_Init+0xdc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <MX_TIM2_Init+0xdc>)
 80023e8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80023ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ee:	4b25      	ldr	r3, [pc, #148]	; (8002484 <MX_TIM2_Init+0xdc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <MX_TIM2_Init+0xdc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023fa:	4822      	ldr	r0, [pc, #136]	; (8002484 <MX_TIM2_Init+0xdc>)
 80023fc:	f006 fd40 	bl	8008e80 <HAL_TIM_Base_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002406:	f000 f999 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002410:	f107 0318 	add.w	r3, r7, #24
 8002414:	4619      	mov	r1, r3
 8002416:	481b      	ldr	r0, [pc, #108]	; (8002484 <MX_TIM2_Init+0xdc>)
 8002418:	f007 f8ce 	bl	80095b8 <HAL_TIM_ConfigClockSource>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002422:	f000 f98b 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002426:	4817      	ldr	r0, [pc, #92]	; (8002484 <MX_TIM2_Init+0xdc>)
 8002428:	f006 fdcc 	bl	8008fc4 <HAL_TIM_IC_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002432:	f000 f983 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4619      	mov	r1, r3
 8002444:	480f      	ldr	r0, [pc, #60]	; (8002484 <MX_TIM2_Init+0xdc>)
 8002446:	f007 fbd3 	bl	8009bf0 <HAL_TIMEx_MasterConfigSynchronization>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002450:	f000 f974 	bl	800273c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002454:	2300      	movs	r3, #0
 8002456:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002458:	2301      	movs	r3, #1
 800245a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002460:	230f      	movs	r3, #15
 8002462:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002464:	463b      	mov	r3, r7
 8002466:	2200      	movs	r2, #0
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <MX_TIM2_Init+0xdc>)
 800246c:	f007 f810 	bl	8009490 <HAL_TIM_IC_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002476:	f000 f961 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	; 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000d28 	.word	0x20000d28

08002488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	463b      	mov	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <MX_TIM3_Init+0x94>)
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <MX_TIM3_Init+0x98>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <MX_TIM3_Init+0x94>)
 80024ac:	2247      	movs	r2, #71	; 0x47
 80024ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <MX_TIM3_Init+0x94>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <MX_TIM3_Init+0x94>)
 80024b8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80024bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <MX_TIM3_Init+0x94>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <MX_TIM3_Init+0x94>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024ca:	4814      	ldr	r0, [pc, #80]	; (800251c <MX_TIM3_Init+0x94>)
 80024cc:	f006 fcd8 	bl	8008e80 <HAL_TIM_Base_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80024d6:	f000 f931 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	4619      	mov	r1, r3
 80024e6:	480d      	ldr	r0, [pc, #52]	; (800251c <MX_TIM3_Init+0x94>)
 80024e8:	f007 f866 	bl	80095b8 <HAL_TIM_ConfigClockSource>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80024f2:	f000 f923 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024fe:	463b      	mov	r3, r7
 8002500:	4619      	mov	r1, r3
 8002502:	4806      	ldr	r0, [pc, #24]	; (800251c <MX_TIM3_Init+0x94>)
 8002504:	f007 fb74 	bl	8009bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800250e:	f000 f915 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000b10 	.word	0x20000b10
 8002520:	40000400 	.word	0x40000400

08002524 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	463b      	mov	r3, r7
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_TIM4_Init+0x94>)
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <MX_TIM4_Init+0x98>)
 8002544:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <MX_TIM4_Init+0x94>)
 8002548:	2247      	movs	r2, #71	; 0x47
 800254a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_TIM4_Init+0x94>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <MX_TIM4_Init+0x94>)
 8002554:	f242 720f 	movw	r2, #9999	; 0x270f
 8002558:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_TIM4_Init+0x94>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_TIM4_Init+0x94>)
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002566:	4814      	ldr	r0, [pc, #80]	; (80025b8 <MX_TIM4_Init+0x94>)
 8002568:	f006 fc8a 	bl	8008e80 <HAL_TIM_Base_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002572:	f000 f8e3 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	4619      	mov	r1, r3
 8002582:	480d      	ldr	r0, [pc, #52]	; (80025b8 <MX_TIM4_Init+0x94>)
 8002584:	f007 f818 	bl	80095b8 <HAL_TIM_ConfigClockSource>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800258e:	f000 f8d5 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800259a:	463b      	mov	r3, r7
 800259c:	4619      	mov	r1, r3
 800259e:	4806      	ldr	r0, [pc, #24]	; (80025b8 <MX_TIM4_Init+0x94>)
 80025a0:	f007 fb26 	bl	8009bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80025aa:	f000 f8c7 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200002e0 	.word	0x200002e0
 80025bc:	40000800 	.word	0x40000800

080025c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <MX_USART1_UART_Init+0x50>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <MX_USART1_UART_Init+0x4c>)
 80025f8:	f007 fb6a 	bl	8009cd0 <HAL_UART_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002602:	f000 f89b 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000bfc 	.word	0x20000bfc
 8002610:	40013800 	.word	0x40013800

08002614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <MX_DMA_Init+0x48>)
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <MX_DMA_Init+0x48>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6153      	str	r3, [r2, #20]
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <MX_DMA_Init+0x48>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	200b      	movs	r0, #11
 8002638:	f002 f8cf 	bl	80047da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800263c:	200b      	movs	r0, #11
 800263e:	f002 f8e8 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	200f      	movs	r0, #15
 8002648:	f002 f8c7 	bl	80047da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800264c:	200f      	movs	r0, #15
 800264e:	f002 f8e0 	bl	8004812 <HAL_NVIC_EnableIRQ>

}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000

08002660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <MX_GPIO_Init+0xd0>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4a2d      	ldr	r2, [pc, #180]	; (8002730 <MX_GPIO_Init+0xd0>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	6193      	str	r3, [r2, #24]
 8002680:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <MX_GPIO_Init+0xd0>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <MX_GPIO_Init+0xd0>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <MX_GPIO_Init+0xd0>)
 8002692:	f043 0320 	orr.w	r3, r3, #32
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <MX_GPIO_Init+0xd0>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <MX_GPIO_Init+0xd0>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a21      	ldr	r2, [pc, #132]	; (8002730 <MX_GPIO_Init+0xd0>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <MX_GPIO_Init+0xd0>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_GPIO_Init+0xd0>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <MX_GPIO_Init+0xd0>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_GPIO_Init+0xd0>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026da:	4816      	ldr	r0, [pc, #88]	; (8002734 <MX_GPIO_Init+0xd4>)
 80026dc:	f002 fce2 	bl	80050a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80026e0:	2200      	movs	r2, #0
 80026e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e6:	4814      	ldr	r0, [pc, #80]	; (8002738 <MX_GPIO_Init+0xd8>)
 80026e8:	f002 fcdc 	bl	80050a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 80026ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2302      	movs	r3, #2
 80026fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4619      	mov	r1, r3
 8002704:	480b      	ldr	r0, [pc, #44]	; (8002734 <MX_GPIO_Init+0xd4>)
 8002706:	f002 fb49 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002710:	2301      	movs	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002718:	2301      	movs	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_GPIO_Init+0xd8>)
 8002724:	f002 fb3a 	bl	8004d9c <HAL_GPIO_Init>

}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	40011000 	.word	0x40011000
 8002738:	40010800 	.word	0x40010800

0800273c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002744:	e7fe      	b.n	8002744 <Error_Handler+0x8>
	...

08002748 <rot_Init>:

/*
 * 	Função de inicialização
 */
void rot_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	rot.constante = 0.6;			/* < Salva a constante para calculo da rotação do motor */
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <rot_Init+0x20>)
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <rot_Init+0x24>)
 8002750:	601a      	str	r2, [r3, #0]
	rot.htim = &htim1;				/* < Salva o ponteiro do Timer que será utilizado */
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <rot_Init+0x20>)
 8002754:	4a06      	ldr	r2, [pc, #24]	; (8002770 <rot_Init+0x28>)
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
	rot.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <rot_Init+0x20>)
 800275a:	2200      	movs	r2, #0
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&rot);			/* < Chama função de inicialização */
 800275e:	4802      	ldr	r0, [pc, #8]	; (8002768 <rot_Init+0x20>)
 8002760:	f7ff fb1a 	bl	8001d98 <indutivo_Init>
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	2000046c 	.word	0x2000046c
 800276c:	3f19999a 	.word	0x3f19999a
 8002770:	20000c84 	.word	0x20000c84

08002774 <rot_Reset>:

/*
 * 	Função de reset
 */
void rot_Reset(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	indutivo_reset(&rot);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <rot_Reset+0x10>)
 800277a:	f7ff fbed 	bl	8001f58 <indutivo_reset>
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000046c 	.word	0x2000046c

08002788 <rot_Calc>:

/*
 * 	Função de calculo
 */
void rot_Calc(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	indutivo_calc(&rot);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <rot_Calc+0x10>)
 800278e:	f7ff fb7f 	bl	8001e90 <indutivo_calc>
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000046c 	.word	0x2000046c

0800279c <bufsize>:

/*
 * 	Função para calcular tamanho de um buffer
 */
int bufsize(char *buf)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 80027a8:	e002      	b.n	80027b0 <bufsize+0x14>
		i++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f6      	bne.n	80027aa <bufsize+0xe>
	return i;
 80027bc:	68fb      	ldr	r3, [r7, #12]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <bufclear>:

/*
 * 	Função para limpar um buffer
 */
void bufclear(SD_CARD_typedef *buf)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	for (int i=0; i<bufsize(buf->buffer); i++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e009      	b.n	80027ea <bufclear+0x22>
		buf->buffer[i] = '\0';
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	f203 4364 	addw	r3, r3, #1124	; 0x464
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<bufsize(buf->buffer); i++)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3301      	adds	r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f203 4364 	addw	r3, r3, #1124	; 0x464
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ffd3 	bl	800279c <bufsize>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4293      	cmp	r3, r2
 80027fc:	dbeb      	blt.n	80027d6 <bufclear+0xe>
}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <SD_Init>:

/*
 * 	Inicialização do cartão sd
 */
FRESULT SD_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 800280c:	2200      	movs	r2, #0
 800280e:	4926      	ldr	r1, [pc, #152]	; (80028a8 <SD_Init+0xa0>)
 8002810:	4826      	ldr	r0, [pc, #152]	; (80028ac <SD_Init+0xa4>)
 8002812:	f00a fb01 	bl	800ce18 <f_mount>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <SD_Init+0xa8>)
 800281c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <SD_Init+0xa8>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <SD_Init+0x24>
		return fresult;
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <SD_Init+0xa8>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	e03a      	b.n	80028a2 <SD_Init+0x9a>

	fresult = SD_loadSettings();
 800282c:	f000 f846 	bl	80028bc <SD_loadSettings>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <SD_Init+0xa8>)
 8002836:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <SD_Init+0xa8>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <SD_Init+0x3e>
		return fresult;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <SD_Init+0xa8>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	e02d      	b.n	80028a2 <SD_Init+0x9a>


	fresult = SD_createFile();
 8002846:	f000 f969 	bl	8002b1c <SD_createFile>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <SD_Init+0xa8>)
 8002850:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <SD_Init+0xa8>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <SD_Init+0x58>
		return fresult;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <SD_Init+0xa8>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	e020      	b.n	80028a2 <SD_Init+0x9a>

	bufclear(&sdCard);
 8002860:	4812      	ldr	r0, [pc, #72]	; (80028ac <SD_Init+0xa4>)
 8002862:	f7ff ffb1 	bl	80027c8 <bufclear>

	LDEBUG;
 8002866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800286a:	4812      	ldr	r0, [pc, #72]	; (80028b4 <SD_Init+0xac>)
 800286c:	f002 fc32 	bl	80050d4 <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <SD_Init+0xa4>)
 8002872:	2200      	movs	r2, #0
 8002874:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
	sdCard.blen = 0;
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <SD_Init+0xa4>)
 800287a:	2200      	movs	r2, #0
 800287c:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <SD_Init+0xa4>)
 8002882:	2200      	movs	r2, #0
 8002884:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <SD_Init+0xa4>)
 800288a:	2200      	movs	r2, #0
 800288c:	f8a3 25d4 	strh.w	r2, [r3, #1492]	; 0x5d4
	sdCard.timer = 0;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <SD_Init+0xa4>)
 8002892:	2200      	movs	r2, #0
 8002894:	f8a3 25d6 	strh.w	r2, [r3, #1494]	; 0x5d6

	HAL_TIM_Base_Start_IT(&htim4);
 8002898:	4807      	ldr	r0, [pc, #28]	; (80028b8 <SD_Init+0xb0>)
 800289a:	f006 fb41 	bl	8008f20 <HAL_TIM_Base_Start_IT>

	return fresult;
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <SD_Init+0xa8>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	0800e734 	.word	0x0800e734
 80028ac:	2000049c 	.word	0x2000049c
 80028b0:	20000ccc 	.word	0x20000ccc
 80028b4:	40011000 	.word	0x40011000
 80028b8:	200002e0 	.word	0x200002e0

080028bc <SD_loadSettings>:

/*
 * 	Função para ler o settings.ini
 */
FRESULT SD_loadSettings(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 80028c0:	4912      	ldr	r1, [pc, #72]	; (800290c <SD_loadSettings+0x50>)
 80028c2:	4813      	ldr	r0, [pc, #76]	; (8002910 <SD_loadSettings+0x54>)
 80028c4:	f00b faf0 	bl	800dea8 <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 80028c8:	2201      	movs	r2, #1
 80028ca:	4911      	ldr	r1, [pc, #68]	; (8002910 <SD_loadSettings+0x54>)
 80028cc:	4811      	ldr	r0, [pc, #68]	; (8002914 <SD_loadSettings+0x58>)
 80028ce:	f00a faeb 	bl	800cea8 <f_open>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <SD_loadSettings+0x5c>)
 80028d8:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <SD_loadSettings+0x5c>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d106      	bne.n	80028f0 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 80028e2:	f000 f81b 	bl	800291c <SD_createSettings>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <SD_loadSettings+0x5c>)
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e009      	b.n	8002904 <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <SD_loadSettings+0x5c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 80028f8:	f000 f866 	bl	80029c8 <SD_searchSettings>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SD_loadSettings+0x5c>)
 8002902:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SD_loadSettings+0x5c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	0800e738 	.word	0x0800e738
 8002910:	20000a60 	.word	0x20000a60
 8002914:	200008cc 	.word	0x200008cc
 8002918:	20000ccc 	.word	0x20000ccc

0800291c <SD_createSettings>:

/*
 * 	Função para criar o settings.ini quando não disponivel
 */
FRESULT SD_createSettings(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 8002922:	4822      	ldr	r0, [pc, #136]	; (80029ac <SD_createSettings+0x90>)
 8002924:	f00a ffcb 	bl	800d8be <f_close>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <SD_createSettings+0x94>)
 800292e:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 8002930:	2212      	movs	r2, #18
 8002932:	4920      	ldr	r1, [pc, #128]	; (80029b4 <SD_createSettings+0x98>)
 8002934:	481d      	ldr	r0, [pc, #116]	; (80029ac <SD_createSettings+0x90>)
 8002936:	f00a fab7 	bl	800cea8 <f_open>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <SD_createSettings+0x94>)
 8002940:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <SD_createSettings+0x94>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <SD_createSettings+0x34>
		return fresult;
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <SD_createSettings+0x94>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	e029      	b.n	80029a4 <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 8002950:	4919      	ldr	r1, [pc, #100]	; (80029b8 <SD_createSettings+0x9c>)
 8002952:	481a      	ldr	r0, [pc, #104]	; (80029bc <SD_createSettings+0xa0>)
 8002954:	f00b faa8 	bl	800dea8 <siprintf>
 8002958:	6078      	str	r0, [r7, #4]
			";Mode 0 para teste de AV do 19 (Padrão)\n"
			";Mode 1 para Teste de Dinamometro\n"
			";Mode 9 para captar e enviar dodos ao datalogger do 20 (Padrão se SD ausente)\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <SD_createSettings+0xa4>)
 800295e:	4917      	ldr	r1, [pc, #92]	; (80029bc <SD_createSettings+0xa0>)
 8002960:	4812      	ldr	r0, [pc, #72]	; (80029ac <SD_createSettings+0x90>)
 8002962:	f00a fd76 	bl	800d452 <f_write>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <SD_createSettings+0x94>)
 800296c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <SD_createSettings+0x94>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <SD_createSettings+0x60>
		return fresult;
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <SD_createSettings+0x94>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	e013      	b.n	80029a4 <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 800297c:	480b      	ldr	r0, [pc, #44]	; (80029ac <SD_createSettings+0x90>)
 800297e:	f00a ff9e 	bl	800d8be <f_close>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <SD_createSettings+0x94>)
 8002988:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <SD_createSettings+0x94>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <SD_createSettings+0x7c>
		return fresult;
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <SD_createSettings+0x94>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	e005      	b.n	80029a4 <SD_createSettings+0x88>

	sdCard.mode = 0;
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <SD_createSettings+0xa8>)
 800299a:	2200      	movs	r2, #0
 800299c:	f8a3 25f4 	strh.w	r2, [r3, #1524]	; 0x5f4

	return fresult;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <SD_createSettings+0x94>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200008cc 	.word	0x200008cc
 80029b0:	20000ccc 	.word	0x20000ccc
 80029b4:	20000a60 	.word	0x20000a60
 80029b8:	0800e748 	.word	0x0800e748
 80029bc:	20000920 	.word	0x20000920
 80029c0:	20000a7c 	.word	0x20000a7c
 80029c4:	2000049c 	.word	0x2000049c

080029c8 <SD_searchSettings>:

/*
 * 	Função que lê o conteudo do settings.ini
 */
FRESULT SD_searchSettings(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
	int index = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 80029d2:	2301      	movs	r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 80029d6:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <SD_searchSettings+0x140>)
 80029d8:	f240 123f 	movw	r2, #319	; 0x13f
 80029dc:	494b      	ldr	r1, [pc, #300]	; (8002b0c <SD_searchSettings+0x144>)
 80029de:	484c      	ldr	r0, [pc, #304]	; (8002b10 <SD_searchSettings+0x148>)
 80029e0:	f00a fbe2 	bl	800d1a8 <f_read>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <SD_searchSettings+0x14c>)
 80029ea:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80029ec:	4b49      	ldr	r3, [pc, #292]	; (8002b14 <SD_searchSettings+0x14c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <SD_searchSettings+0x38>
		return fresult;
 80029f4:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <SD_searchSettings+0x14c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	e081      	b.n	8002afe <SD_searchSettings+0x136>

	for (index; sdCard.longBuffer[index] != '='; index++);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	4a45      	ldr	r2, [pc, #276]	; (8002b18 <SD_searchSettings+0x150>)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4413      	add	r3, r2
 8002a06:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b3d      	cmp	r3, #61	; 0x3d
 8002a0e:	d1f4      	bne.n	80029fa <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002a16:	db0b      	blt.n	8002a30 <SD_searchSettings+0x68>
	{
		fresult = SD_createSettings();
 8002a18:	f7ff ff80 	bl	800291c <SD_createSettings>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b3c      	ldr	r3, [pc, #240]	; (8002b14 <SD_searchSettings+0x14c>)
 8002a22:	701a      	strb	r2, [r3, #0]
		return fresult;
 8002a24:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <SD_searchSettings+0x14c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	e069      	b.n	8002afe <SD_searchSettings+0x136>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	4a38      	ldr	r2, [pc, #224]	; (8002b18 <SD_searchSettings+0x150>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	d908      	bls.n	8002a54 <SD_searchSettings+0x8c>
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	4a33      	ldr	r2, [pc, #204]	; (8002b18 <SD_searchSettings+0x150>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8002a50:	2b5a      	cmp	r3, #90	; 0x5a
 8002a52:	d9ea      	bls.n	8002a2a <SD_searchSettings+0x62>
	deindex--;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	e012      	b.n	8002a86 <SD_searchSettings+0xbe>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad2      	subs	r2, r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a2b      	ldr	r2, [pc, #172]	; (8002b18 <SD_searchSettings+0x150>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f893 1484 	ldrb.w	r1, [r3, #1156]	; 0x484
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <SD_searchSettings+0x150>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8002a7c:	460a      	mov	r2, r1
 8002a7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3301      	adds	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	dde7      	ble.n	8002a60 <SD_searchSettings+0x98>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <SD_searchSettings+0x150>)
 8002a92:	f893 35e4 	ldrb.w	r3, [r3, #1508]	; 0x5e4
 8002a96:	2b4d      	cmp	r3, #77	; 0x4d
 8002a98:	d129      	bne.n	8002aee <SD_searchSettings+0x126>
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <SD_searchSettings+0x150>)
 8002a9c:	f893 35e5 	ldrb.w	r3, [r3, #1509]	; 0x5e5
 8002aa0:	2b4f      	cmp	r3, #79	; 0x4f
 8002aa2:	d124      	bne.n	8002aee <SD_searchSettings+0x126>
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <SD_searchSettings+0x150>)
 8002aa6:	f893 35e6 	ldrb.w	r3, [r3, #1510]	; 0x5e6
 8002aaa:	2b44      	cmp	r3, #68	; 0x44
 8002aac:	d11f      	bne.n	8002aee <SD_searchSettings+0x126>
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <SD_searchSettings+0x150>)
 8002ab0:	f893 35e7 	ldrb.w	r3, [r3, #1511]	; 0x5e7
 8002ab4:	2b45      	cmp	r3, #69	; 0x45
 8002ab6:	d11a      	bne.n	8002aee <SD_searchSettings+0x126>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <SD_searchSettings+0x150>)
 8002aba:	f893 35e9 	ldrb.w	r3, [r3, #1513]	; 0x5e9
 8002abe:	2b2f      	cmp	r3, #47	; 0x2f
 8002ac0:	d90e      	bls.n	8002ae0 <SD_searchSettings+0x118>
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <SD_searchSettings+0x150>)
 8002ac4:	f893 35e9 	ldrb.w	r3, [r3, #1513]	; 0x5e9
 8002ac8:	2b39      	cmp	r3, #57	; 0x39
 8002aca:	d809      	bhi.n	8002ae0 <SD_searchSettings+0x118>
			sdCard.mode = sdCard.setting[5] - 48;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <SD_searchSettings+0x150>)
 8002ace:	f893 35e9 	ldrb.w	r3, [r3, #1513]	; 0x5e9
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b30      	subs	r3, #48	; 0x30
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <SD_searchSettings+0x150>)
 8002ada:	f8a3 25f4 	strh.w	r2, [r3, #1524]	; 0x5f4
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002ade:	e00c      	b.n	8002afa <SD_searchSettings+0x132>
		else
			fresult = SD_createSettings();
 8002ae0:	f7ff ff1c 	bl	800291c <SD_createSettings>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <SD_searchSettings+0x14c>)
 8002aea:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002aec:	e005      	b.n	8002afa <SD_searchSettings+0x132>
	}
	else
		fresult = SD_createSettings();
 8002aee:	f7ff ff15 	bl	800291c <SD_createSettings>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <SD_searchSettings+0x14c>)
 8002af8:	701a      	strb	r2, [r3, #0]

	return fresult;
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <SD_searchSettings+0x14c>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000a78 	.word	0x20000a78
 8002b0c:	20000920 	.word	0x20000920
 8002b10:	200008cc 	.word	0x200008cc
 8002b14:	20000ccc 	.word	0x20000ccc
 8002b18:	2000049c 	.word	0x2000049c

08002b1c <SD_createFile>:

/*
 * 	Função que cria o fileXXX.txt
 */
FRESULT SD_createFile(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4921      	ldr	r1, [pc, #132]	; (8002bb0 <SD_createFile+0x94>)
 8002b2a:	4822      	ldr	r0, [pc, #136]	; (8002bb4 <SD_createFile+0x98>)
 8002b2c:	f00b f9bc 	bl	800dea8 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 8002b30:	2206      	movs	r2, #6
 8002b32:	4920      	ldr	r1, [pc, #128]	; (8002bb4 <SD_createFile+0x98>)
 8002b34:	4820      	ldr	r0, [pc, #128]	; (8002bb8 <SD_createFile+0x9c>)
 8002b36:	f00a f9b7 	bl	800cea8 <f_open>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <SD_createFile+0xa0>)
 8002b40:	701a      	strb	r2, [r3, #0]
		filnum++;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3301      	adds	r3, #1
 8002b46:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8002b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b4c:	481c      	ldr	r0, [pc, #112]	; (8002bc0 <SD_createFile+0xa4>)
 8002b4e:	f002 fac1 	bl	80050d4 <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <SD_createFile+0xa0>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d0e5      	beq.n	8002b26 <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 8002b5a:	491a      	ldr	r1, [pc, #104]	; (8002bc4 <SD_createFile+0xa8>)
 8002b5c:	481a      	ldr	r0, [pc, #104]	; (8002bc8 <SD_createFile+0xac>)
 8002b5e:	f00b f9a3 	bl	800dea8 <siprintf>
 8002b62:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <SD_createFile+0xb0>)
 8002b68:	4917      	ldr	r1, [pc, #92]	; (8002bc8 <SD_createFile+0xac>)
 8002b6a:	4813      	ldr	r0, [pc, #76]	; (8002bb8 <SD_createFile+0x9c>)
 8002b6c:	f00a fc71 	bl	800d452 <f_write>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <SD_createFile+0xa0>)
 8002b76:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <SD_createFile+0xa0>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <SD_createFile+0x6a>
		return fresult;
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <SD_createFile+0xa0>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	e00f      	b.n	8002ba6 <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 8002b86:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <SD_createFile+0x9c>)
 8002b88:	f00a fe99 	bl	800d8be <f_close>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <SD_createFile+0xa0>)
 8002b92:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <SD_createFile+0xa0>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <SD_createFile+0x86>
		return fresult;
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <SD_createFile+0xa0>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	e001      	b.n	8002ba6 <SD_createFile+0x8a>

	return fresult;
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <SD_createFile+0xa0>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	0800e814 	.word	0x0800e814
 8002bb4:	20000a60 	.word	0x20000a60
 8002bb8:	200008cc 	.word	0x200008cc
 8002bbc:	20000ccc 	.word	0x20000ccc
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	0800e824 	.word	0x0800e824
 8002bc8:	20000900 	.word	0x20000900
 8002bcc:	20000a7c 	.word	0x20000a7c

08002bd0 <SD_write>:

/*
 * 	Função que escreve em um arquivo
 */
FRESULT SD_write(int bsize, char wBuf[bsize])
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_WRITE);
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4925      	ldr	r1, [pc, #148]	; (8002c74 <SD_write+0xa4>)
 8002bde:	4826      	ldr	r0, [pc, #152]	; (8002c78 <SD_write+0xa8>)
 8002be0:	f00a f962 	bl	800cea8 <f_open>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <SD_write+0xac>)
 8002bea:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002bec:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <SD_write+0xac>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <SD_write+0x2a>
		return fresult;
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <SD_write+0xac>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	e037      	b.n	8002c6a <SD_write+0x9a>

	fresult = f_lseek(&sdCard.fil, sdCard.fil.fsize);
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <SD_write+0xb0>)
 8002bfc:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002c00:	4619      	mov	r1, r3
 8002c02:	481d      	ldr	r0, [pc, #116]	; (8002c78 <SD_write+0xa8>)
 8002c04:	f00a fe81 	bl	800d90a <f_lseek>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <SD_write+0xac>)
 8002c0e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <SD_write+0xac>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <SD_write+0x4e>
		return fresult;
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <SD_write+0xac>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	e025      	b.n	8002c6a <SD_write+0x9a>

	fresult = f_write(&sdCard.fil, wBuf, bsize, &sdCard.bw);
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <SD_write+0xb4>)
 8002c22:	6839      	ldr	r1, [r7, #0]
 8002c24:	4814      	ldr	r0, [pc, #80]	; (8002c78 <SD_write+0xa8>)
 8002c26:	f00a fc14 	bl	800d452 <f_write>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <SD_write+0xac>)
 8002c30:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <SD_write+0xac>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <SD_write+0x70>
		return fresult;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <SD_write+0xac>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	e014      	b.n	8002c6a <SD_write+0x9a>

	fresult = f_close(&sdCard.fil);
 8002c40:	480d      	ldr	r0, [pc, #52]	; (8002c78 <SD_write+0xa8>)
 8002c42:	f00a fe3c 	bl	800d8be <f_close>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <SD_write+0xac>)
 8002c4c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <SD_write+0xac>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <SD_write+0x8c>
		return fresult;
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <SD_write+0xac>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	e006      	b.n	8002c6a <SD_write+0x9a>

	LDEBUG;
 8002c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c60:	4809      	ldr	r0, [pc, #36]	; (8002c88 <SD_write+0xb8>)
 8002c62:	f002 fa37 	bl	80050d4 <HAL_GPIO_TogglePin>

	return fresult;
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <SD_write+0xac>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000a60 	.word	0x20000a60
 8002c78:	200008cc 	.word	0x200008cc
 8002c7c:	20000ccc 	.word	0x20000ccc
 8002c80:	2000049c 	.word	0x2000049c
 8002c84:	20000a7c 	.word	0x20000a7c
 8002c88:	40011000 	.word	0x40011000

08002c8c <SD_logger>:

/*
 * 	Função de datalogger
 */
FRESULT SD_logger(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af02      	add	r7, sp, #8
	if (sdCard.counter < 9999)
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <SD_logger+0x118>)
 8002c94:	f8b3 35d4 	ldrh.w	r3, [r3, #1492]	; 0x5d4
 8002c98:	f242 720e 	movw	r2, #9998	; 0x270e
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d808      	bhi.n	8002cb2 <SD_logger+0x26>
		sdCard.counter++;
 8002ca0:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <SD_logger+0x118>)
 8002ca2:	f8b3 35d4 	ldrh.w	r3, [r3, #1492]	; 0x5d4
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <SD_logger+0x118>)
 8002cac:	f8a3 25d4 	strh.w	r2, [r3, #1492]	; 0x5d4
 8002cb0:	e003      	b.n	8002cba <SD_logger+0x2e>
	else
		sdCard.counter = 0;
 8002cb2:	4b3c      	ldr	r3, [pc, #240]	; (8002da4 <SD_logger+0x118>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8a3 25d4 	strh.w	r2, [r3, #1492]	; 0x5d4

	switch (sdCard.mode)
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <SD_logger+0x118>)
 8002cbc:	f8b3 35f4 	ldrh.w	r3, [r3, #1524]	; 0x5f4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <SD_logger+0x3e>
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d010      	beq.n	8002cea <SD_logger+0x5e>
 8002cc8:	e01f      	b.n	8002d0a <SD_logger+0x7e>
	{
	case 0:
			sdCard.blen = sprintf(sdCard.buffer,
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <SD_logger+0x11c>)
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4b37      	ldr	r3, [pc, #220]	; (8002dac <SD_logger+0x120>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, vel.value,
					sdCard.counter);
 8002cd2:	4934      	ldr	r1, [pc, #208]	; (8002da4 <SD_logger+0x118>)
 8002cd4:	f8b1 15d4 	ldrh.w	r1, [r1, #1492]	; 0x5d4
			sdCard.blen = sprintf(sdCard.buffer,
 8002cd8:	9100      	str	r1, [sp, #0]
 8002cda:	4935      	ldr	r1, [pc, #212]	; (8002db0 <SD_logger+0x124>)
 8002cdc:	4835      	ldr	r0, [pc, #212]	; (8002db4 <SD_logger+0x128>)
 8002cde:	f00b f8e3 	bl	800dea8 <siprintf>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a2f      	ldr	r2, [pc, #188]	; (8002da4 <SD_logger+0x118>)
 8002ce6:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
	case 1:
			sdCard.blen = sprintf(sdCard.buffer,
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <SD_logger+0x11c>)
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <SD_logger+0x12c>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, dina.force,
					sdCard.counter);
 8002cf2:	492c      	ldr	r1, [pc, #176]	; (8002da4 <SD_logger+0x118>)
 8002cf4:	f8b1 15d4 	ldrh.w	r1, [r1, #1492]	; 0x5d4
			sdCard.blen = sprintf(sdCard.buffer,
 8002cf8:	9100      	str	r1, [sp, #0]
 8002cfa:	492d      	ldr	r1, [pc, #180]	; (8002db0 <SD_logger+0x124>)
 8002cfc:	482d      	ldr	r0, [pc, #180]	; (8002db4 <SD_logger+0x128>)
 8002cfe:	f00b f8d3 	bl	800dea8 <siprintf>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <SD_logger+0x118>)
 8002d06:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
	}

	for (int i = 0; i < sdCard.blen; i++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	e012      	b.n	8002d36 <SD_logger+0xaa>
		sdCard.longBuffer[i+sdCard.blenLong] = sdCard.buffer[i];
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <SD_logger+0x118>)
 8002d12:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	4922      	ldr	r1, [pc, #136]	; (8002da4 <SD_logger+0x118>)
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f202 4264 	addw	r2, r2, #1124	; 0x464
 8002d24:	7811      	ldrb	r1, [r2, #0]
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <SD_logger+0x118>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
	for (int i = 0; i < sdCard.blen; i++)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3301      	adds	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <SD_logger+0x118>)
 8002d38:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	dbe6      	blt.n	8002d10 <SD_logger+0x84>
	sdCard.longCounter++;
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <SD_logger+0x118>)
 8002d44:	f893 35d8 	ldrb.w	r3, [r3, #1496]	; 0x5d8
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <SD_logger+0x118>)
 8002d4e:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
	sdCard.blenLong += sdCard.blen;
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <SD_logger+0x118>)
 8002d54:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <SD_logger+0x118>)
 8002d5a:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <SD_logger+0x118>)
 8002d62:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	if (sdCard.longCounter >= SD_BUFFSIZE_LONG)
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <SD_logger+0x118>)
 8002d68:	f893 35d8 	ldrb.w	r3, [r3, #1496]	; 0x5d8
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d912      	bls.n	8002d96 <SD_logger+0x10a>
	{
		fresult = SD_write(sdCard.blenLong, sdCard.longBuffer);
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <SD_logger+0x118>)
 8002d72:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8002d76:	4911      	ldr	r1, [pc, #68]	; (8002dbc <SD_logger+0x130>)
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff29 	bl	8002bd0 <SD_write>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <SD_logger+0x134>)
 8002d84:	701a      	strb	r2, [r3, #0]
		sdCard.longCounter = 0;
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <SD_logger+0x118>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
		sdCard.blenLong = 0;
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <SD_logger+0x118>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	}

	//LDEBUG;

	return fresult;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <SD_logger+0x134>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000049c 	.word	0x2000049c
 8002da8:	2000046c 	.word	0x2000046c
 8002dac:	20000b58 	.word	0x20000b58
 8002db0:	0800e828 	.word	0x0800e828
 8002db4:	20000900 	.word	0x20000900
 8002db8:	2000040c 	.word	0x2000040c
 8002dbc:	20000920 	.word	0x20000920
 8002dc0:	20000ccc 	.word	0x20000ccc

08002dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_MspInit+0x5c>)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <HAL_MspInit+0x5c>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6193      	str	r3, [r2, #24]
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_MspInit+0x5c>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_MspInit+0x5c>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <HAL_MspInit+0x5c>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dec:	61d3      	str	r3, [r2, #28]
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_MspInit+0x5c>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_MspInit+0x60>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_MspInit+0x60>)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40010000 	.word	0x40010000

08002e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0318 	add.w	r3, r7, #24
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a33      	ldr	r2, [pc, #204]	; (8002f10 <HAL_ADC_MspInit+0xe8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d15f      	bne.n	8002f08 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e48:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e52:	6193      	str	r3, [r2, #24]
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4a2b      	ldr	r2, [pc, #172]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6193      	str	r3, [r2, #24]
 8002e6c:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e78:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6193      	str	r3, [r2, #24]
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <HAL_ADC_MspInit+0xec>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e94:	2303      	movs	r3, #3
 8002e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	f107 0318 	add.w	r3, r7, #24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481e      	ldr	r0, [pc, #120]	; (8002f18 <HAL_ADC_MspInit+0xf0>)
 8002ea0:	f001 ff7c 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	481a      	ldr	r0, [pc, #104]	; (8002f1c <HAL_ADC_MspInit+0xf4>)
 8002eb4:	f001 ff72 	bl	8004d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002eba:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_ADC_MspInit+0xfc>)
 8002ebc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ede:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002eec:	480c      	ldr	r0, [pc, #48]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002eee:	f001 fcab 	bl	8004848 <HAL_DMA_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002ef8:	f7ff fc20 	bl	800273c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002f00:	621a      	str	r2, [r3, #32]
 8002f02:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_ADC_MspInit+0xf8>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40012400 	.word	0x40012400
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40010800 	.word	0x40010800
 8002f1c:	40010c00 	.word	0x40010c00
 8002f20:	20000c40 	.word	0x20000c40
 8002f24:	40020008 	.word	0x40020008

08002f28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <HAL_CAN_MspInit+0x9c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d139      	bne.n	8002fbc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_CAN_MspInit+0xa0>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_CAN_MspInit+0xa0>)
 8002f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f52:	61d3      	str	r3, [r2, #28]
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_CAN_MspInit+0xa0>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_CAN_MspInit+0xa0>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_CAN_MspInit+0xa0>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_CAN_MspInit+0xa0>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 0310 	add.w	r3, r7, #16
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	480f      	ldr	r0, [pc, #60]	; (8002fcc <HAL_CAN_MspInit+0xa4>)
 8002f8e:	f001 ff05 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 0310 	add.w	r3, r7, #16
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4809      	ldr	r0, [pc, #36]	; (8002fcc <HAL_CAN_MspInit+0xa4>)
 8002fa8:	f001 fef8 	bl	8004d9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2014      	movs	r0, #20
 8002fb2:	f001 fc12 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002fb6:	2014      	movs	r0, #20
 8002fb8:	f001 fc2b 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40006400 	.word	0x40006400
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010800 	.word	0x40010800

08002fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <HAL_I2C_MspInit+0x94>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d134      	bne.n	800305a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_I2C_MspInit+0x98>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <HAL_I2C_MspInit+0x98>)
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	6193      	str	r3, [r2, #24]
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_I2C_MspInit+0x98>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003008:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800300c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800300e:	2312      	movs	r3, #18
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003016:	f107 0310 	add.w	r3, r7, #16
 800301a:	4619      	mov	r1, r3
 800301c:	4813      	ldr	r0, [pc, #76]	; (800306c <HAL_I2C_MspInit+0x9c>)
 800301e:	f001 febd 	bl	8004d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_I2C_MspInit+0x98>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4a10      	ldr	r2, [pc, #64]	; (8003068 <HAL_I2C_MspInit+0x98>)
 8003028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800302c:	61d3      	str	r3, [r2, #28]
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_I2C_MspInit+0x98>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 15, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	210f      	movs	r1, #15
 800303e:	2021      	movs	r0, #33	; 0x21
 8003040:	f001 fbcb 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003044:	2021      	movs	r0, #33	; 0x21
 8003046:	f001 fbe4 	bl	8004812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	210f      	movs	r1, #15
 800304e:	2022      	movs	r0, #34	; 0x22
 8003050:	f001 fbc3 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003054:	2022      	movs	r0, #34	; 0x22
 8003056:	f001 fbdc 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800305a:	bf00      	nop
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40005800 	.word	0x40005800
 8003068:	40021000 	.word	0x40021000
 800306c:	40010c00 	.word	0x40010c00

08003070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a26      	ldr	r2, [pc, #152]	; (8003124 <HAL_SPI_MspInit+0xb4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d145      	bne.n	800311c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <HAL_SPI_MspInit+0xb8>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4a24      	ldr	r2, [pc, #144]	; (8003128 <HAL_SPI_MspInit+0xb8>)
 8003096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800309a:	6193      	str	r3, [r2, #24]
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_SPI_MspInit+0xb8>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_SPI_MspInit+0xb8>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_SPI_MspInit+0xb8>)
 80030ae:	f043 0308 	orr.w	r3, r3, #8
 80030b2:	6193      	str	r3, [r2, #24]
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <HAL_SPI_MspInit+0xb8>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80030c0:	2328      	movs	r3, #40	; 0x28
 80030c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c8:	2303      	movs	r3, #3
 80030ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	4816      	ldr	r0, [pc, #88]	; (800312c <HAL_SPI_MspInit+0xbc>)
 80030d4:	f001 fe62 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030d8:	2310      	movs	r3, #16
 80030da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4619      	mov	r1, r3
 80030ea:	4810      	ldr	r0, [pc, #64]	; (800312c <HAL_SPI_MspInit+0xbc>)
 80030ec:	f001 fe56 	bl	8004d9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_SPI_MspInit+0xc0>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_SPI_MspInit+0xc0>)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 15, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	210f      	movs	r1, #15
 8003110:	2023      	movs	r0, #35	; 0x23
 8003112:	f001 fb62 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003116:	2023      	movs	r0, #35	; 0x23
 8003118:	f001 fb7b 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800311c:	bf00      	nop
 800311e:	3728      	adds	r7, #40	; 0x28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40013000 	.word	0x40013000
 8003128:	40021000 	.word	0x40021000
 800312c:	40010c00 	.word	0x40010c00
 8003130:	40010000 	.word	0x40010000

08003134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	f107 0320 	add.w	r3, r7, #32
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a51      	ldr	r2, [pc, #324]	; (8003294 <HAL_TIM_Base_MspInit+0x160>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d135      	bne.n	80031c0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 800315a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800315e:	6193      	str	r3, [r2, #24]
 8003160:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316c:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4a49      	ldr	r2, [pc, #292]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	6193      	str	r3, [r2, #24]
 8003178:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800318e:	2302      	movs	r3, #2
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	f107 0320 	add.w	r3, r7, #32
 8003196:	4619      	mov	r1, r3
 8003198:	4840      	ldr	r0, [pc, #256]	; (800329c <HAL_TIM_Base_MspInit+0x168>)
 800319a:	f001 fdff 	bl	8004d9c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 15, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	210f      	movs	r1, #15
 80031a2:	2019      	movs	r0, #25
 80031a4:	f001 fb19 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031a8:	2019      	movs	r0, #25
 80031aa:	f001 fb32 	bl	8004812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 15, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	210f      	movs	r1, #15
 80031b2:	201b      	movs	r0, #27
 80031b4:	f001 fb11 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031b8:	201b      	movs	r0, #27
 80031ba:	f001 fb2a 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031be:	e064      	b.n	800328a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d12c      	bne.n	8003224 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ca:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a32      	ldr	r2, [pc, #200]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	61d3      	str	r3, [r2, #28]
 80031d6:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6193      	str	r3, [r2, #24]
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031fa:	2301      	movs	r3, #1
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003202:	2302      	movs	r3, #2
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003206:	f107 0320 	add.w	r3, r7, #32
 800320a:	4619      	mov	r1, r3
 800320c:	4823      	ldr	r0, [pc, #140]	; (800329c <HAL_TIM_Base_MspInit+0x168>)
 800320e:	f001 fdc5 	bl	8004d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	210f      	movs	r1, #15
 8003216:	201c      	movs	r0, #28
 8003218:	f001 fadf 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800321c:	201c      	movs	r0, #28
 800321e:	f001 faf8 	bl	8004812 <HAL_NVIC_EnableIRQ>
}
 8003222:	e032      	b.n	800328a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <HAL_TIM_Base_MspInit+0x16c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d114      	bne.n	8003258 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	4a19      	ldr	r2, [pc, #100]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	61d3      	str	r3, [r2, #28]
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	210f      	movs	r1, #15
 800324a:	201d      	movs	r0, #29
 800324c:	f001 fac5 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003250:	201d      	movs	r0, #29
 8003252:	f001 fade 	bl	8004812 <HAL_NVIC_EnableIRQ>
}
 8003256:	e018      	b.n	800328a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <HAL_TIM_Base_MspInit+0x170>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d113      	bne.n	800328a <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	61d3      	str	r3, [r2, #28]
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_TIM_Base_MspInit+0x164>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	210f      	movs	r1, #15
 800327e:	201e      	movs	r0, #30
 8003280:	f001 faab 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003284:	201e      	movs	r0, #30
 8003286:	f001 fac4 	bl	8004812 <HAL_NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3730      	adds	r7, #48	; 0x30
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40021000 	.word	0x40021000
 800329c:	40010800 	.word	0x40010800
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800

080032a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a33      	ldr	r2, [pc, #204]	; (8003390 <HAL_UART_MspInit+0xe8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d15f      	bne.n	8003388 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_UART_MspInit+0xec>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4a31      	ldr	r2, [pc, #196]	; (8003394 <HAL_UART_MspInit+0xec>)
 80032ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d2:	6193      	str	r3, [r2, #24]
 80032d4:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <HAL_UART_MspInit+0xec>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e0:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <HAL_UART_MspInit+0xec>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <HAL_UART_MspInit+0xec>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	6193      	str	r3, [r2, #24]
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_UART_MspInit+0xec>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003302:	2303      	movs	r3, #3
 8003304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003306:	f107 0310 	add.w	r3, r7, #16
 800330a:	4619      	mov	r1, r3
 800330c:	4822      	ldr	r0, [pc, #136]	; (8003398 <HAL_UART_MspInit+0xf0>)
 800330e:	f001 fd45 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	4619      	mov	r1, r3
 8003326:	481c      	ldr	r0, [pc, #112]	; (8003398 <HAL_UART_MspInit+0xf0>)
 8003328:	f001 fd38 	bl	8004d9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_UART_MspInit+0xf4>)
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <HAL_UART_MspInit+0xf8>)
 8003330:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_UART_MspInit+0xf4>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <HAL_UART_MspInit+0xf4>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800333e:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_UART_MspInit+0xf4>)
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003344:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_UART_MspInit+0xf4>)
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_UART_MspInit+0xf4>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_UART_MspInit+0xf4>)
 8003352:	2220      	movs	r2, #32
 8003354:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_UART_MspInit+0xf4>)
 8003358:	2200      	movs	r2, #0
 800335a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800335c:	480f      	ldr	r0, [pc, #60]	; (800339c <HAL_UART_MspInit+0xf4>)
 800335e:	f001 fa73 	bl	8004848 <HAL_DMA_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003368:	f7ff f9e8 	bl	800273c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HAL_UART_MspInit+0xf4>)
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_UART_MspInit+0xf4>)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8003378:	2200      	movs	r2, #0
 800337a:	210f      	movs	r1, #15
 800337c:	2025      	movs	r0, #37	; 0x25
 800337e:	f001 fa2c 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003382:	2025      	movs	r0, #37	; 0x25
 8003384:	f001 fa45 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003388:	bf00      	nop
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40013800 	.word	0x40013800
 8003394:	40021000 	.word	0x40021000
 8003398:	40010800 	.word	0x40010800
 800339c:	20000bb8 	.word	0x20000bb8
 80033a0:	40020058 	.word	0x40020058

080033a4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <SDTimer_Handler+0x3c>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <SDTimer_Handler+0x1c>
    Timer1--;
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <SDTimer_Handler+0x3c>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <SDTimer_Handler+0x3c>)
 80033be:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <SDTimer_Handler+0x40>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <SDTimer_Handler+0x34>
    Timer2--;
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <SDTimer_Handler+0x40>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <SDTimer_Handler+0x40>)
 80033d6:	701a      	strb	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	20000d71 	.word	0x20000d71
 80033e4:	20000d70 	.word	0x20000d70

080033e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <NMI_Handler+0x4>

080033ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <HardFault_Handler+0x4>

080033f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <MemManage_Handler+0x4>

080033fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <BusFault_Handler+0x4>

08003400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <UsageFault_Handler+0x4>

08003406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
	...

0800342c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <SysTick_Handler+0x30>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	3301      	adds	r3, #1
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <SysTick_Handler+0x30>)
 800343c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <SysTick_Handler+0x30>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b09      	cmp	r3, #9
 8003446:	d904      	bls.n	8003452 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Handler+0x30>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800344e:	f7ff ffa9 	bl	80033a4 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003452:	f000 f98b 	bl	800376c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200000a6 	.word	0x200000a6

08003460 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <DMA1_Channel1_IRQHandler+0x10>)
 8003466:	f001 fb59 	bl	8004b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000c40 	.word	0x20000c40

08003474 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <DMA1_Channel5_IRQHandler+0x10>)
 800347a:	f001 fb4f 	bl	8004b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000bb8 	.word	0x20000bb8

08003488 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800348e:	f000 fea1 	bl	80041d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000ae8 	.word	0x20000ae8

0800349c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_UPDATE) != RESET)
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <TIM1_UP_IRQHandler+0x20>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <TIM1_UP_IRQHandler+0x16>
		rot_Reset();
 80034ae:	f7ff f961 	bl	8002774 <rot_Reset>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034b2:	4802      	ldr	r0, [pc, #8]	; (80034bc <TIM1_UP_IRQHandler+0x20>)
 80034b4:	f005 fee4 	bl	8009280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000c84 	.word	0x20000c84

080034c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_CC2) != RESET)
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <TIM1_CC_IRQHandler+0x20>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d101      	bne.n	80034d6 <TIM1_CC_IRQHandler+0x16>
		rot_Calc();
 80034d2:	f7ff f959 	bl	8002788 <rot_Calc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034d6:	4802      	ldr	r0, [pc, #8]	; (80034e0 <TIM1_CC_IRQHandler+0x20>)
 80034d8:	f005 fed2 	bl	8009280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000c84 	.word	0x20000c84

080034e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1) != RESET)
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <TIM2_IRQHandler+0x34>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d101      	bne.n	80034fa <TIM2_IRQHandler+0x16>
		vel_Calc();
 80034f6:	f000 f8c3 	bl	8003680 <vel_Calc>
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_UPDATE) != RESET)
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <TIM2_IRQHandler+0x34>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <TIM2_IRQHandler+0x28>
		vel_Reset();
 8003508:	f000 f8b0 	bl	800366c <vel_Reset>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <TIM2_IRQHandler+0x34>)
 800350e:	f005 feb7 	bl	8009280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000d28 	.word	0x20000d28

0800351c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <TIM3_IRQHandler+0x10>)
 8003522:	f005 fead 	bl	8009280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000b10 	.word	0x20000b10

08003530 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (sdCard.mode == 1)
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <TIM4_IRQHandler+0x3c>)
 8003536:	f8b3 35f4 	ldrh.w	r3, [r3, #1524]	; 0x5f4
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <TIM4_IRQHandler+0x12>
		dina_Update();
 800353e:	f7fd febf 	bl	80012c0 <dina_Update>
	if (sdCard.mode != 9)
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <TIM4_IRQHandler+0x3c>)
 8003544:	f8b3 35f4 	ldrh.w	r3, [r3, #1524]	; 0x5f4
 8003548:	2b09      	cmp	r3, #9
 800354a:	d006      	beq.n	800355a <TIM4_IRQHandler+0x2a>
		fresult = SD_logger();
 800354c:	f7ff fb9e 	bl	8002c8c <SD_logger>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <TIM4_IRQHandler+0x40>)
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e003      	b.n	8003562 <TIM4_IRQHandler+0x32>
	else
	{
		aceGir_Read();
 800355a:	f7fd fcb5 	bl	8000ec8 <aceGir_Read>
		can_bus_Send();
 800355e:	f7fd fddf 	bl	8001120 <can_bus_Send>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003562:	4804      	ldr	r0, [pc, #16]	; (8003574 <TIM4_IRQHandler+0x44>)
 8003564:	f005 fe8c 	bl	8009280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	bd80      	pop	{r7, pc}
 800356c:	2000049c 	.word	0x2000049c
 8003570:	20000ccc 	.word	0x20000ccc
 8003574:	200002e0 	.word	0x200002e0

08003578 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <I2C2_EV_IRQHandler+0x10>)
 800357e:	f002 fa69 	bl	8005a54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000a94 	.word	0x20000a94

0800358c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <I2C2_ER_IRQHandler+0x10>)
 8003592:	f002 fbd0 	bl	8005d36 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000a94 	.word	0x20000a94

080035a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <SPI1_IRQHandler+0x10>)
 80035a6:	f005 fab5 	bl	8008b14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000cd0 	.word	0x20000cd0

080035b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <USART1_IRQHandler+0x10>)
 80035ba:	f006 fc07 	bl	8009dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000bfc 	.word	0x20000bfc

080035c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <_sbrk+0x5c>)
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <_sbrk+0x60>)
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <_sbrk+0x64>)
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <_sbrk+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f8:	f00a fc24 	bl	800de44 <__errno>
 80035fc:	4603      	mov	r3, r0
 80035fe:	220c      	movs	r2, #12
 8003600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e009      	b.n	800361c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <_sbrk+0x64>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <_sbrk+0x64>)
 8003618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20005000 	.word	0x20005000
 8003628:	00000400 	.word	0x00000400
 800362c:	200000a8 	.word	0x200000a8
 8003630:	200011f0 	.word	0x200011f0

08003634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <vel_Init>:

/*
 * 	Função de inicialização
 */
void vel_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
	vel.constante = 1.5082;			/* < Salva a constante para calculo da velocidade */
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <vel_Init+0x20>)
 8003646:	4a07      	ldr	r2, [pc, #28]	; (8003664 <vel_Init+0x24>)
 8003648:	601a      	str	r2, [r3, #0]
	vel.htim = &htim2;				/* < Salva o ponteiro do Timer que será utilizado */
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <vel_Init+0x20>)
 800364c:	4a06      	ldr	r2, [pc, #24]	; (8003668 <vel_Init+0x28>)
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
	vel.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <vel_Init+0x20>)
 8003652:	2200      	movs	r2, #0
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&vel);			/* < Chama função de inicialização */
 8003656:	4802      	ldr	r0, [pc, #8]	; (8003660 <vel_Init+0x20>)
 8003658:	f7fe fb9e 	bl	8001d98 <indutivo_Init>
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000b58 	.word	0x20000b58
 8003664:	3fc10cb3 	.word	0x3fc10cb3
 8003668:	20000d28 	.word	0x20000d28

0800366c <vel_Reset>:

/*
 * 	Função de reset
 */
void vel_Reset(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
	indutivo_reset(&vel);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <vel_Reset+0x10>)
 8003672:	f7fe fc71 	bl	8001f58 <indutivo_reset>
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000b58 	.word	0x20000b58

08003680 <vel_Calc>:

/*
 * 	Função de calculo
 */
void vel_Calc(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
	indutivo_calc(&vel);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <vel_Calc+0x10>)
 8003686:	f7fe fc03 	bl	8001e90 <indutivo_calc>
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000b58 	.word	0x20000b58

08003694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003694:	480c      	ldr	r0, [pc, #48]	; (80036c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003696:	490d      	ldr	r1, [pc, #52]	; (80036cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003698:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800369c:	e002      	b.n	80036a4 <LoopCopyDataInit>

0800369e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800369e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a2:	3304      	adds	r3, #4

080036a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036a8:	d3f9      	bcc.n	800369e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036ac:	4c0a      	ldr	r4, [pc, #40]	; (80036d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b0:	e001      	b.n	80036b6 <LoopFillZerobss>

080036b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b4:	3204      	adds	r2, #4

080036b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036b8:	d3fb      	bcc.n	80036b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036ba:	f7ff ffbb 	bl	8003634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036be:	f00a fbc7 	bl	800de50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036c2:	f7fe fc69 	bl	8001f98 <main>
  bx lr
 80036c6:	4770      	bx	lr
  ldr r0, =_sdata
 80036c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036cc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80036d0:	0800ee34 	.word	0x0800ee34
  ldr r2, =_sbss
 80036d4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80036d8:	200011ec 	.word	0x200011ec

080036dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036dc:	e7fe      	b.n	80036dc <ADC1_2_IRQHandler>
	...

080036e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <HAL_Init+0x28>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a07      	ldr	r2, [pc, #28]	; (8003708 <HAL_Init+0x28>)
 80036ea:	f043 0310 	orr.w	r3, r3, #16
 80036ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f0:	2003      	movs	r0, #3
 80036f2:	f001 f867 	bl	80047c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f6:	2000      	movs	r0, #0
 80036f8:	f000 f808 	bl	800370c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036fc:	f7ff fb62 	bl	8002dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40022000 	.word	0x40022000

0800370c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_InitTick+0x54>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_InitTick+0x58>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003722:	fbb3 f3f1 	udiv	r3, r3, r1
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f87f 	bl	800482e <HAL_SYSTICK_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e00e      	b.n	8003758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b0f      	cmp	r3, #15
 800373e:	d80a      	bhi.n	8003756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003740:	2200      	movs	r2, #0
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	f001 f847 	bl	80047da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800374c:	4a06      	ldr	r2, [pc, #24]	; (8003768 <HAL_InitTick+0x5c>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000004 	.word	0x20000004
 8003764:	2000000c 	.word	0x2000000c
 8003768:	20000008 	.word	0x20000008

0800376c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_IncTick+0x1c>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_IncTick+0x20>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4413      	add	r3, r2
 800377c:	4a03      	ldr	r2, [pc, #12]	; (800378c <HAL_IncTick+0x20>)
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	2000000c 	.word	0x2000000c
 800378c:	20000d74 	.word	0x20000d74

08003790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTick;
 8003794:	4b02      	ldr	r3, [pc, #8]	; (80037a0 <HAL_GetTick+0x10>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	20000d74 	.word	0x20000d74

080037a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0be      	b.n	8003944 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d109      	bne.n	80037e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fb20 	bl	8002e28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f9ab 	bl	8003b44 <ADC_ConversionStop_Disable>
 80037ee:	4603      	mov	r3, r0
 80037f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 8099 	bne.w	8003932 <HAL_ADC_Init+0x18e>
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8095 	bne.w	8003932 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003810:	f023 0302 	bic.w	r3, r3, #2
 8003814:	f043 0202 	orr.w	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003824:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7b1b      	ldrb	r3, [r3, #12]
 800382a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800382c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	4313      	orrs	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	d003      	beq.n	8003846 <HAL_ADC_Init+0xa2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <HAL_ADC_Init+0xa8>
 8003846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800384a:	e000      	b.n	800384e <HAL_ADC_Init+0xaa>
 800384c:	2300      	movs	r3, #0
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7d1b      	ldrb	r3, [r3, #20]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d119      	bne.n	8003890 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7b1b      	ldrb	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	3b01      	subs	r3, #1
 800386a:	035a      	lsls	r2, r3, #13
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e00b      	b.n	8003890 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	4b28      	ldr	r3, [pc, #160]	; (800394c <HAL_ADC_Init+0x1a8>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c0:	d003      	beq.n	80038ca <HAL_ADC_Init+0x126>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d104      	bne.n	80038d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	051b      	lsls	r3, r3, #20
 80038d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <HAL_ADC_Init+0x1ac>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d10b      	bne.n	8003910 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800390e:	e018      	b.n	8003942 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f023 0312 	bic.w	r3, r3, #18
 8003918:	f043 0210 	orr.w	r2, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003930:	e007      	b.n	8003942 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	f043 0210 	orr.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	ffe1f7fd 	.word	0xffe1f7fd
 8003950:	ff1f0efe 	.word	0xff1f0efe

08003954 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x20>
 8003970:	2302      	movs	r3, #2
 8003972:	e0dc      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x1da>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b06      	cmp	r3, #6
 8003982:	d81c      	bhi.n	80039be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	3b05      	subs	r3, #5
 8003996:	221f      	movs	r2, #31
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	4019      	ands	r1, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	3b05      	subs	r3, #5
 80039b0:	fa00 f203 	lsl.w	r2, r0, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	635a      	str	r2, [r3, #52]	; 0x34
 80039bc:	e03c      	b.n	8003a38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d81c      	bhi.n	8003a00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	3b23      	subs	r3, #35	; 0x23
 80039d8:	221f      	movs	r2, #31
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	4019      	ands	r1, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	3b23      	subs	r3, #35	; 0x23
 80039f2:	fa00 f203 	lsl.w	r2, r0, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
 80039fe:	e01b      	b.n	8003a38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b41      	subs	r3, #65	; 0x41
 8003a12:	221f      	movs	r2, #31
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	4019      	ands	r1, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	3b41      	subs	r3, #65	; 0x41
 8003a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b09      	cmp	r3, #9
 8003a3e:	d91c      	bls.n	8003a7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68d9      	ldr	r1, [r3, #12]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b1e      	subs	r3, #30
 8003a52:	2207      	movs	r2, #7
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	4019      	ands	r1, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6898      	ldr	r0, [r3, #8]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b1e      	subs	r3, #30
 8003a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	e019      	b.n	8003aae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6919      	ldr	r1, [r3, #16]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	4019      	ands	r1, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6898      	ldr	r0, [r3, #8]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d003      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003aba:	2b11      	cmp	r3, #17
 8003abc:	d132      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <HAL_ADC_ConfigChannel+0x1e4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d125      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d126      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ae4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d11a      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_ADC_ConfigChannel+0x1e8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_ADC_ConfigChannel+0x1ec>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	0c9a      	lsrs	r2, r3, #18
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f9      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x1b2>
 8003b12:	e007      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	40012400 	.word	0x40012400
 8003b3c:	20000004 	.word	0x20000004
 8003b40:	431bde83 	.word	0x431bde83

08003b44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d12e      	bne.n	8003bbc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b6e:	f7ff fe0f 	bl	8003790 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b74:	e01b      	b.n	8003bae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b76:	f7ff fe0b 	bl	8003790 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d914      	bls.n	8003bae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10d      	bne.n	8003bae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e007      	b.n	8003bbe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d0dc      	beq.n	8003b76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0ed      	b.n	8003db4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff f99f 	bl	8002f28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bfa:	f7ff fdc9 	bl	8003790 <HAL_GetTick>
 8003bfe:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c00:	e012      	b.n	8003c28 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c02:	f7ff fdc5 	bl	8003790 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b0a      	cmp	r3, #10
 8003c0e:	d90b      	bls.n	8003c28 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2205      	movs	r2, #5
 8003c20:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0c5      	b.n	8003db4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0e5      	beq.n	8003c02 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0202 	bic.w	r2, r2, #2
 8003c44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c46:	f7ff fda3 	bl	8003790 <HAL_GetTick>
 8003c4a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c4c:	e012      	b.n	8003c74 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c4e:	f7ff fd9f 	bl	8003790 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b0a      	cmp	r3, #10
 8003c5a:	d90b      	bls.n	8003c74 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e09f      	b.n	8003db4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	7e1b      	ldrb	r3, [r3, #24]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d108      	bne.n	8003c9c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e007      	b.n	8003cac <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7e5b      	ldrb	r3, [r3, #25]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d108      	bne.n	8003cc6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e007      	b.n	8003cd6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7e9b      	ldrb	r3, [r3, #26]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d108      	bne.n	8003cf0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0220 	orr.w	r2, r2, #32
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e007      	b.n	8003d00 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0220 	bic.w	r2, r2, #32
 8003cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	7edb      	ldrb	r3, [r3, #27]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d108      	bne.n	8003d1a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0210 	bic.w	r2, r2, #16
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e007      	b.n	8003d2a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0210 	orr.w	r2, r2, #16
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7f1b      	ldrb	r3, [r3, #28]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d108      	bne.n	8003d44 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0208 	orr.w	r2, r2, #8
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e007      	b.n	8003d54 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0208 	bic.w	r2, r2, #8
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7f5b      	ldrb	r3, [r3, #29]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d108      	bne.n	8003d6e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0204 	orr.w	r2, r2, #4
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e007      	b.n	8003d7e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0204 	bic.w	r2, r2, #4
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	ea42 0103 	orr.w	r1, r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	1e5a      	subs	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d003      	beq.n	8003de2 <HAL_CAN_ConfigFilter+0x26>
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	f040 80aa 	bne.w	8003f36 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d123      	bne.n	8003e64 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3248      	adds	r2, #72	; 0x48
 8003e44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	3348      	adds	r3, #72	; 0x48
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	440b      	add	r3, r1
 8003e62:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d122      	bne.n	8003eb2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	3248      	adds	r2, #72	; 0x48
 8003e92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ea6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ea8:	6979      	ldr	r1, [r7, #20]
 8003eaa:	3348      	adds	r3, #72	; 0x48
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ecc:	e007      	b.n	8003ede <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003ef8:	e007      	b.n	8003f0a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d107      	bne.n	8003f22 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f28:	f023 0201 	bic.w	r2, r3, #1
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e006      	b.n	8003f44 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d12e      	bne.n	8003fc0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f7a:	f7ff fc09 	bl	8003790 <HAL_GetTick>
 8003f7e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f80:	e012      	b.n	8003fa8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f82:	f7ff fc05 	bl	8003790 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b0a      	cmp	r3, #10
 8003f8e:	d90b      	bls.n	8003fa8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2205      	movs	r2, #5
 8003fa0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e012      	b.n	8003fce <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e5      	bne.n	8003f82 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e006      	b.n	8003fce <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b089      	sub	sp, #36	; 0x24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d003      	beq.n	8004002 <HAL_CAN_AddTxMessage+0x2c>
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	f040 80b8 	bne.w	8004172 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a0 	beq.w	8004162 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	0e1b      	lsrs	r3, r3, #24
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d907      	bls.n	8004042 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e09e      	b.n	8004180 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004042:	2201      	movs	r2, #1
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	409a      	lsls	r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	6809      	ldr	r1, [r1, #0]
 8004062:	431a      	orrs	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3318      	adds	r3, #24
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	440b      	add	r3, r1
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e00f      	b.n	8004090 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800407a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004080:	68f9      	ldr	r1, [r7, #12]
 8004082:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004084:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3318      	adds	r3, #24
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	440b      	add	r3, r1
 800408e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3318      	adds	r3, #24
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	440b      	add	r3, r1
 80040a0:	3304      	adds	r3, #4
 80040a2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	7d1b      	ldrb	r3, [r3, #20]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d111      	bne.n	80040d0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	3318      	adds	r3, #24
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	6811      	ldr	r1, [r2, #0]
 80040c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3318      	adds	r3, #24
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	440b      	add	r3, r1
 80040cc:	3304      	adds	r3, #4
 80040ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3307      	adds	r3, #7
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	061a      	lsls	r2, r3, #24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3306      	adds	r3, #6
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3305      	adds	r3, #5
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	4313      	orrs	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	3204      	adds	r2, #4
 80040f0:	7812      	ldrb	r2, [r2, #0]
 80040f2:	4610      	mov	r0, r2
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	6811      	ldr	r1, [r2, #0]
 80040f8:	ea43 0200 	orr.w	r2, r3, r0
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	440b      	add	r3, r1
 8004102:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004106:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3303      	adds	r3, #3
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	061a      	lsls	r2, r3, #24
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3302      	adds	r3, #2
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3301      	adds	r3, #1
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	4313      	orrs	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	4610      	mov	r0, r2
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	6811      	ldr	r1, [r2, #0]
 800412e:	ea43 0200 	orr.w	r2, r3, r0
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	440b      	add	r3, r1
 8004138:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800413c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	3318      	adds	r3, #24
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	4413      	add	r3, r2
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	6811      	ldr	r1, [r2, #0]
 8004150:	f043 0201 	orr.w	r2, r3, #1
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	3318      	adds	r3, #24
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	440b      	add	r3, r1
 800415c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e00e      	b.n	8004180 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e006      	b.n	8004180 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3724      	adds	r7, #36	; 0x24
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800419a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d002      	beq.n	80041a8 <HAL_CAN_ActivateNotification+0x1e>
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d109      	bne.n	80041bc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6959      	ldr	r1, [r3, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e006      	b.n	80041ca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d07c      	beq.n	8004314 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d023      	beq.n	800426c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2201      	movs	r2, #1
 800422a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f983 	bl	8004542 <HAL_CAN_TxMailbox0CompleteCallback>
 800423c:	e016      	b.n	800426c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d004      	beq.n	8004252 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	e00c      	b.n	800426c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	e002      	b.n	800426c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f986 	bl	8004578 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d024      	beq.n	80042c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800427e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f962 	bl	8004554 <HAL_CAN_TxMailbox1CompleteCallback>
 8004290:	e016      	b.n	80042c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
 80042a4:	e00c      	b.n	80042c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
 80042b8:	e002      	b.n	80042c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f965 	bl	800458a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d024      	beq.n	8004314 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f941 	bl	8004566 <HAL_CAN_TxMailbox2CompleteCallback>
 80042e4:	e016      	b.n	8004314 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	e00c      	b.n	8004314 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
 800430c:	e002      	b.n	8004314 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f944 	bl	800459c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00c      	beq.n	8004338 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800432e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2210      	movs	r2, #16
 8004336:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2208      	movs	r2, #8
 8004352:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f933 	bl	80045c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f91b 	bl	80045ae <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00c      	beq.n	800439c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004392:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2210      	movs	r2, #16
 800439a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2208      	movs	r2, #8
 80043b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f913 	bl	80045e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8fb 	bl	80045d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2210      	movs	r2, #16
 80043f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8fc 	bl	80045f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d006      	beq.n	8004420 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2208      	movs	r2, #8
 8004418:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8f4 	bl	8004608 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d07b      	beq.n	8004522 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d072      	beq.n	800451a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	f043 0302 	orr.w	r3, r3, #2
 800446a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448e:	2b00      	cmp	r3, #0
 8004490:	d043      	beq.n	800451a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	d03e      	beq.n	800451a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044a2:	2b60      	cmp	r3, #96	; 0x60
 80044a4:	d02b      	beq.n	80044fe <HAL_CAN_IRQHandler+0x32a>
 80044a6:	2b60      	cmp	r3, #96	; 0x60
 80044a8:	d82e      	bhi.n	8004508 <HAL_CAN_IRQHandler+0x334>
 80044aa:	2b50      	cmp	r3, #80	; 0x50
 80044ac:	d022      	beq.n	80044f4 <HAL_CAN_IRQHandler+0x320>
 80044ae:	2b50      	cmp	r3, #80	; 0x50
 80044b0:	d82a      	bhi.n	8004508 <HAL_CAN_IRQHandler+0x334>
 80044b2:	2b40      	cmp	r3, #64	; 0x40
 80044b4:	d019      	beq.n	80044ea <HAL_CAN_IRQHandler+0x316>
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d826      	bhi.n	8004508 <HAL_CAN_IRQHandler+0x334>
 80044ba:	2b30      	cmp	r3, #48	; 0x30
 80044bc:	d010      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x30c>
 80044be:	2b30      	cmp	r3, #48	; 0x30
 80044c0:	d822      	bhi.n	8004508 <HAL_CAN_IRQHandler+0x334>
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d002      	beq.n	80044cc <HAL_CAN_IRQHandler+0x2f8>
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d005      	beq.n	80044d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80044ca:	e01d      	b.n	8004508 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	f043 0308 	orr.w	r3, r3, #8
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044d4:	e019      	b.n	800450a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	f043 0310 	orr.w	r3, r3, #16
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044de:	e014      	b.n	800450a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f043 0320 	orr.w	r3, r3, #32
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044e8:	e00f      	b.n	800450a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044f2:	e00a      	b.n	800450a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044fc:	e005      	b.n	800450a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004506:	e000      	b.n	800450a <HAL_CAN_IRQHandler+0x336>
            break;
 8004508:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004518:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2204      	movs	r2, #4
 8004520:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f870 	bl	800461a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800453a:	bf00      	nop
 800453c:	3728      	adds	r7, #40	; 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	60d3      	str	r3, [r2, #12]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <__NVIC_GetPriorityGrouping+0x18>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 0307 	and.w	r3, r3, #7
}
 8004682:	4618      	mov	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db0b      	blt.n	80046ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	f003 021f 	and.w	r2, r3, #31
 80046a8:	4906      	ldr	r1, [pc, #24]	; (80046c4 <__NVIC_EnableIRQ+0x34>)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2001      	movs	r0, #1
 80046b2:	fa00 f202 	lsl.w	r2, r0, r2
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	e000e100 	.word	0xe000e100

080046c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	db0a      	blt.n	80046f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	490c      	ldr	r1, [pc, #48]	; (8004714 <__NVIC_SetPriority+0x4c>)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	0112      	lsls	r2, r2, #4
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	440b      	add	r3, r1
 80046ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046f0:	e00a      	b.n	8004708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	4908      	ldr	r1, [pc, #32]	; (8004718 <__NVIC_SetPriority+0x50>)
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	3b04      	subs	r3, #4
 8004700:	0112      	lsls	r2, r2, #4
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	440b      	add	r3, r1
 8004706:	761a      	strb	r2, [r3, #24]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000e100 	.word	0xe000e100
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	; 0x24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f1c3 0307 	rsb	r3, r3, #7
 8004736:	2b04      	cmp	r3, #4
 8004738:	bf28      	it	cs
 800473a:	2304      	movcs	r3, #4
 800473c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3304      	adds	r3, #4
 8004742:	2b06      	cmp	r3, #6
 8004744:	d902      	bls.n	800474c <NVIC_EncodePriority+0x30>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3b03      	subs	r3, #3
 800474a:	e000      	b.n	800474e <NVIC_EncodePriority+0x32>
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004750:	f04f 32ff 	mov.w	r2, #4294967295
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43da      	mvns	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	401a      	ands	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004764:	f04f 31ff 	mov.w	r1, #4294967295
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	43d9      	mvns	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004774:	4313      	orrs	r3, r2
         );
}
 8004776:	4618      	mov	r0, r3
 8004778:	3724      	adds	r7, #36	; 0x24
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004790:	d301      	bcc.n	8004796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004792:	2301      	movs	r3, #1
 8004794:	e00f      	b.n	80047b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <SysTick_Config+0x40>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800479e:	210f      	movs	r1, #15
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	f7ff ff90 	bl	80046c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <SysTick_Config+0x40>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <SysTick_Config+0x40>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	e000e010 	.word	0xe000e010

080047c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ff2d 	bl	800462c <__NVIC_SetPriorityGrouping>
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	4603      	mov	r3, r0
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047ec:	f7ff ff42 	bl	8004674 <__NVIC_GetPriorityGrouping>
 80047f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	6978      	ldr	r0, [r7, #20]
 80047f8:	f7ff ff90 	bl	800471c <NVIC_EncodePriority>
 80047fc:	4602      	mov	r2, r0
 80047fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff5f 	bl	80046c8 <__NVIC_SetPriority>
}
 800480a:	bf00      	nop
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	4603      	mov	r3, r0
 800481a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800481c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff35 	bl	8004690 <__NVIC_EnableIRQ>
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff ffa2 	bl	8004780 <SysTick_Config>
 800483c:	4603      	mov	r3, r0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e043      	b.n	80048e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <HAL_DMA_Init+0xa8>)
 8004866:	4413      	add	r3, r2
 8004868:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <HAL_DMA_Init+0xac>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	091b      	lsrs	r3, r3, #4
 8004870:	009a      	lsls	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <HAL_DMA_Init+0xb0>)
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004892:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004896:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80048a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	bffdfff8 	.word	0xbffdfff8
 80048f4:	cccccccd 	.word	0xcccccccd
 80048f8:	40020000 	.word	0x40020000

080048fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_DMA_Start_IT+0x20>
 8004918:	2302      	movs	r3, #2
 800491a:	e04a      	b.n	80049b2 <HAL_DMA_Start_IT+0xb6>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800492a:	2b01      	cmp	r3, #1
 800492c:	d13a      	bne.n	80049a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f9f4 	bl	8004d40 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 020e 	orr.w	r2, r2, #14
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e00f      	b.n	8004992 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0204 	bic.w	r2, r2, #4
 8004980:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 020a 	orr.w	r2, r2, #10
 8004990:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e005      	b.n	80049b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
 80049ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d008      	beq.n	80049e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2204      	movs	r2, #4
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e020      	b.n	8004a24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 020e 	bic.w	r2, r2, #14
 80049f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d005      	beq.n	8004a52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
 8004a50:	e051      	b.n	8004af6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 020e 	bic.w	r2, r2, #14
 8004a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <HAL_DMA_Abort_IT+0xd0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d029      	beq.n	8004ad0 <HAL_DMA_Abort_IT+0xa0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <HAL_DMA_Abort_IT+0xd4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_DMA_Abort_IT+0x9c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_DMA_Abort_IT+0xd8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d01a      	beq.n	8004ac6 <HAL_DMA_Abort_IT+0x96>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_DMA_Abort_IT+0xdc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d012      	beq.n	8004ac0 <HAL_DMA_Abort_IT+0x90>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_DMA_Abort_IT+0xe0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00a      	beq.n	8004aba <HAL_DMA_Abort_IT+0x8a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <HAL_DMA_Abort_IT+0xe4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d102      	bne.n	8004ab4 <HAL_DMA_Abort_IT+0x84>
 8004aae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ab2:	e00e      	b.n	8004ad2 <HAL_DMA_Abort_IT+0xa2>
 8004ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ab8:	e00b      	b.n	8004ad2 <HAL_DMA_Abort_IT+0xa2>
 8004aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004abe:	e008      	b.n	8004ad2 <HAL_DMA_Abort_IT+0xa2>
 8004ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ac4:	e005      	b.n	8004ad2 <HAL_DMA_Abort_IT+0xa2>
 8004ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aca:	e002      	b.n	8004ad2 <HAL_DMA_Abort_IT+0xa2>
 8004acc:	2310      	movs	r3, #16
 8004ace:	e000      	b.n	8004ad2 <HAL_DMA_Abort_IT+0xa2>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <HAL_DMA_Abort_IT+0xe8>)
 8004ad4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
    } 
  }
  return status;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40020008 	.word	0x40020008
 8004b04:	4002001c 	.word	0x4002001c
 8004b08:	40020030 	.word	0x40020030
 8004b0c:	40020044 	.word	0x40020044
 8004b10:	40020058 	.word	0x40020058
 8004b14:	4002006c 	.word	0x4002006c
 8004b18:	40020000 	.word	0x40020000

08004b1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	2204      	movs	r2, #4
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d04f      	beq.n	8004be4 <HAL_DMA_IRQHandler+0xc8>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d04a      	beq.n	8004be4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0204 	bic.w	r2, r2, #4
 8004b6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a66      	ldr	r2, [pc, #408]	; (8004d0c <HAL_DMA_IRQHandler+0x1f0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d029      	beq.n	8004bca <HAL_DMA_IRQHandler+0xae>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a65      	ldr	r2, [pc, #404]	; (8004d10 <HAL_DMA_IRQHandler+0x1f4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d022      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xaa>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a63      	ldr	r2, [pc, #396]	; (8004d14 <HAL_DMA_IRQHandler+0x1f8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01a      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xa4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a62      	ldr	r2, [pc, #392]	; (8004d18 <HAL_DMA_IRQHandler+0x1fc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d012      	beq.n	8004bba <HAL_DMA_IRQHandler+0x9e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a60      	ldr	r2, [pc, #384]	; (8004d1c <HAL_DMA_IRQHandler+0x200>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x98>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5f      	ldr	r2, [pc, #380]	; (8004d20 <HAL_DMA_IRQHandler+0x204>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d102      	bne.n	8004bae <HAL_DMA_IRQHandler+0x92>
 8004ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bac:	e00e      	b.n	8004bcc <HAL_DMA_IRQHandler+0xb0>
 8004bae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004bb2:	e00b      	b.n	8004bcc <HAL_DMA_IRQHandler+0xb0>
 8004bb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bb8:	e008      	b.n	8004bcc <HAL_DMA_IRQHandler+0xb0>
 8004bba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bbe:	e005      	b.n	8004bcc <HAL_DMA_IRQHandler+0xb0>
 8004bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc4:	e002      	b.n	8004bcc <HAL_DMA_IRQHandler+0xb0>
 8004bc6:	2340      	movs	r3, #64	; 0x40
 8004bc8:	e000      	b.n	8004bcc <HAL_DMA_IRQHandler+0xb0>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	4a55      	ldr	r2, [pc, #340]	; (8004d24 <HAL_DMA_IRQHandler+0x208>)
 8004bce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8094 	beq.w	8004d02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004be2:	e08e      	b.n	8004d02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2202      	movs	r2, #2
 8004bea:	409a      	lsls	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d056      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x186>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d051      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 020a 	bic.w	r2, r2, #10
 8004c1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a38      	ldr	r2, [pc, #224]	; (8004d0c <HAL_DMA_IRQHandler+0x1f0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d029      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x166>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a37      	ldr	r2, [pc, #220]	; (8004d10 <HAL_DMA_IRQHandler+0x1f4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d022      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x162>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a35      	ldr	r2, [pc, #212]	; (8004d14 <HAL_DMA_IRQHandler+0x1f8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01a      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x15c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <HAL_DMA_IRQHandler+0x1fc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d012      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x156>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a32      	ldr	r2, [pc, #200]	; (8004d1c <HAL_DMA_IRQHandler+0x200>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00a      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x150>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a31      	ldr	r2, [pc, #196]	; (8004d20 <HAL_DMA_IRQHandler+0x204>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d102      	bne.n	8004c66 <HAL_DMA_IRQHandler+0x14a>
 8004c60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c64:	e00e      	b.n	8004c84 <HAL_DMA_IRQHandler+0x168>
 8004c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c6a:	e00b      	b.n	8004c84 <HAL_DMA_IRQHandler+0x168>
 8004c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c70:	e008      	b.n	8004c84 <HAL_DMA_IRQHandler+0x168>
 8004c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c76:	e005      	b.n	8004c84 <HAL_DMA_IRQHandler+0x168>
 8004c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c7c:	e002      	b.n	8004c84 <HAL_DMA_IRQHandler+0x168>
 8004c7e:	2320      	movs	r3, #32
 8004c80:	e000      	b.n	8004c84 <HAL_DMA_IRQHandler+0x168>
 8004c82:	2302      	movs	r3, #2
 8004c84:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <HAL_DMA_IRQHandler+0x208>)
 8004c86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d034      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ca0:	e02f      	b.n	8004d02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d028      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x1e8>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d023      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 020e 	bic.w	r2, r2, #14
 8004cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
    }
  }
  return;
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
}
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40020008 	.word	0x40020008
 8004d10:	4002001c 	.word	0x4002001c
 8004d14:	40020030 	.word	0x40020030
 8004d18:	40020044 	.word	0x40020044
 8004d1c:	40020058 	.word	0x40020058
 8004d20:	4002006c 	.word	0x4002006c
 8004d24:	40020000 	.word	0x40020000

08004d28 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr

08004d40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d108      	bne.n	8004d80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d7e:	e007      	b.n	8004d90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b08b      	sub	sp, #44	; 0x2c
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004daa:	2300      	movs	r3, #0
 8004dac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dae:	e169      	b.n	8005084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004db0:	2201      	movs	r2, #1
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	f040 8158 	bne.w	800507e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4a9a      	ldr	r2, [pc, #616]	; (800503c <HAL_GPIO_Init+0x2a0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d05e      	beq.n	8004e96 <HAL_GPIO_Init+0xfa>
 8004dd8:	4a98      	ldr	r2, [pc, #608]	; (800503c <HAL_GPIO_Init+0x2a0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d875      	bhi.n	8004eca <HAL_GPIO_Init+0x12e>
 8004dde:	4a98      	ldr	r2, [pc, #608]	; (8005040 <HAL_GPIO_Init+0x2a4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d058      	beq.n	8004e96 <HAL_GPIO_Init+0xfa>
 8004de4:	4a96      	ldr	r2, [pc, #600]	; (8005040 <HAL_GPIO_Init+0x2a4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d86f      	bhi.n	8004eca <HAL_GPIO_Init+0x12e>
 8004dea:	4a96      	ldr	r2, [pc, #600]	; (8005044 <HAL_GPIO_Init+0x2a8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d052      	beq.n	8004e96 <HAL_GPIO_Init+0xfa>
 8004df0:	4a94      	ldr	r2, [pc, #592]	; (8005044 <HAL_GPIO_Init+0x2a8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d869      	bhi.n	8004eca <HAL_GPIO_Init+0x12e>
 8004df6:	4a94      	ldr	r2, [pc, #592]	; (8005048 <HAL_GPIO_Init+0x2ac>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d04c      	beq.n	8004e96 <HAL_GPIO_Init+0xfa>
 8004dfc:	4a92      	ldr	r2, [pc, #584]	; (8005048 <HAL_GPIO_Init+0x2ac>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d863      	bhi.n	8004eca <HAL_GPIO_Init+0x12e>
 8004e02:	4a92      	ldr	r2, [pc, #584]	; (800504c <HAL_GPIO_Init+0x2b0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d046      	beq.n	8004e96 <HAL_GPIO_Init+0xfa>
 8004e08:	4a90      	ldr	r2, [pc, #576]	; (800504c <HAL_GPIO_Init+0x2b0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d85d      	bhi.n	8004eca <HAL_GPIO_Init+0x12e>
 8004e0e:	2b12      	cmp	r3, #18
 8004e10:	d82a      	bhi.n	8004e68 <HAL_GPIO_Init+0xcc>
 8004e12:	2b12      	cmp	r3, #18
 8004e14:	d859      	bhi.n	8004eca <HAL_GPIO_Init+0x12e>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_GPIO_Init+0x80>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e97 	.word	0x08004e97
 8004e20:	08004e71 	.word	0x08004e71
 8004e24:	08004e83 	.word	0x08004e83
 8004e28:	08004ec5 	.word	0x08004ec5
 8004e2c:	08004ecb 	.word	0x08004ecb
 8004e30:	08004ecb 	.word	0x08004ecb
 8004e34:	08004ecb 	.word	0x08004ecb
 8004e38:	08004ecb 	.word	0x08004ecb
 8004e3c:	08004ecb 	.word	0x08004ecb
 8004e40:	08004ecb 	.word	0x08004ecb
 8004e44:	08004ecb 	.word	0x08004ecb
 8004e48:	08004ecb 	.word	0x08004ecb
 8004e4c:	08004ecb 	.word	0x08004ecb
 8004e50:	08004ecb 	.word	0x08004ecb
 8004e54:	08004ecb 	.word	0x08004ecb
 8004e58:	08004ecb 	.word	0x08004ecb
 8004e5c:	08004ecb 	.word	0x08004ecb
 8004e60:	08004e79 	.word	0x08004e79
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	4a79      	ldr	r2, [pc, #484]	; (8005050 <HAL_GPIO_Init+0x2b4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e6e:	e02c      	b.n	8004eca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	623b      	str	r3, [r7, #32]
          break;
 8004e76:	e029      	b.n	8004ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	623b      	str	r3, [r7, #32]
          break;
 8004e80:	e024      	b.n	8004ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	3308      	adds	r3, #8
 8004e88:	623b      	str	r3, [r7, #32]
          break;
 8004e8a:	e01f      	b.n	8004ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	330c      	adds	r3, #12
 8004e92:	623b      	str	r3, [r7, #32]
          break;
 8004e94:	e01a      	b.n	8004ecc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	623b      	str	r3, [r7, #32]
          break;
 8004ea2:	e013      	b.n	8004ecc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d105      	bne.n	8004eb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004eac:	2308      	movs	r3, #8
 8004eae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	611a      	str	r2, [r3, #16]
          break;
 8004eb6:	e009      	b.n	8004ecc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004eb8:	2308      	movs	r3, #8
 8004eba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	615a      	str	r2, [r3, #20]
          break;
 8004ec2:	e003      	b.n	8004ecc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	623b      	str	r3, [r7, #32]
          break;
 8004ec8:	e000      	b.n	8004ecc <HAL_GPIO_Init+0x130>
          break;
 8004eca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2bff      	cmp	r3, #255	; 0xff
 8004ed0:	d801      	bhi.n	8004ed6 <HAL_GPIO_Init+0x13a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	e001      	b.n	8004eda <HAL_GPIO_Init+0x13e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2bff      	cmp	r3, #255	; 0xff
 8004ee0:	d802      	bhi.n	8004ee8 <HAL_GPIO_Init+0x14c>
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	e002      	b.n	8004eee <HAL_GPIO_Init+0x152>
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	3b08      	subs	r3, #8
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	210f      	movs	r1, #15
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	6a39      	ldr	r1, [r7, #32]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80b1 	beq.w	800507e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f1c:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <HAL_GPIO_Init+0x2b8>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	4a4c      	ldr	r2, [pc, #304]	; (8005054 <HAL_GPIO_Init+0x2b8>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6193      	str	r3, [r2, #24]
 8004f28:	4b4a      	ldr	r3, [pc, #296]	; (8005054 <HAL_GPIO_Init+0x2b8>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f34:	4a48      	ldr	r2, [pc, #288]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	3302      	adds	r3, #2
 8004f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	220f      	movs	r2, #15
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4013      	ands	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a40      	ldr	r2, [pc, #256]	; (800505c <HAL_GPIO_Init+0x2c0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_GPIO_Init+0x1ec>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a3f      	ldr	r2, [pc, #252]	; (8005060 <HAL_GPIO_Init+0x2c4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00d      	beq.n	8004f84 <HAL_GPIO_Init+0x1e8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a3e      	ldr	r2, [pc, #248]	; (8005064 <HAL_GPIO_Init+0x2c8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <HAL_GPIO_Init+0x1e4>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a3d      	ldr	r2, [pc, #244]	; (8005068 <HAL_GPIO_Init+0x2cc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <HAL_GPIO_Init+0x1e0>
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e006      	b.n	8004f8a <HAL_GPIO_Init+0x1ee>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	e004      	b.n	8004f8a <HAL_GPIO_Init+0x1ee>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e002      	b.n	8004f8a <HAL_GPIO_Init+0x1ee>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_GPIO_Init+0x1ee>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	f002 0203 	and.w	r2, r2, #3
 8004f90:	0092      	lsls	r2, r2, #2
 8004f92:	4093      	lsls	r3, r2
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f9a:	492f      	ldr	r1, [pc, #188]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d006      	beq.n	8004fc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004fb4:	4b2d      	ldr	r3, [pc, #180]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	492c      	ldr	r1, [pc, #176]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	e006      	b.n	8004fd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004fc2:	4b2a      	ldr	r3, [pc, #168]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	4928      	ldr	r1, [pc, #160]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004fdc:	4b23      	ldr	r3, [pc, #140]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	4922      	ldr	r1, [pc, #136]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
 8004fe8:	e006      	b.n	8004ff8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	491e      	ldr	r1, [pc, #120]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d006      	beq.n	8005012 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	4918      	ldr	r1, [pc, #96]	; (800506c <HAL_GPIO_Init+0x2d0>)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]
 8005010:	e006      	b.n	8005020 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005012:	4b16      	ldr	r3, [pc, #88]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	43db      	mvns	r3, r3
 800501a:	4914      	ldr	r1, [pc, #80]	; (800506c <HAL_GPIO_Init+0x2d0>)
 800501c:	4013      	ands	r3, r2
 800501e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d021      	beq.n	8005070 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <HAL_GPIO_Init+0x2d0>)
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	490e      	ldr	r1, [pc, #56]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	4313      	orrs	r3, r2
 8005036:	60cb      	str	r3, [r1, #12]
 8005038:	e021      	b.n	800507e <HAL_GPIO_Init+0x2e2>
 800503a:	bf00      	nop
 800503c:	10320000 	.word	0x10320000
 8005040:	10310000 	.word	0x10310000
 8005044:	10220000 	.word	0x10220000
 8005048:	10210000 	.word	0x10210000
 800504c:	10120000 	.word	0x10120000
 8005050:	10110000 	.word	0x10110000
 8005054:	40021000 	.word	0x40021000
 8005058:	40010000 	.word	0x40010000
 800505c:	40010800 	.word	0x40010800
 8005060:	40010c00 	.word	0x40010c00
 8005064:	40011000 	.word	0x40011000
 8005068:	40011400 	.word	0x40011400
 800506c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_GPIO_Init+0x304>)
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	43db      	mvns	r3, r3
 8005078:	4909      	ldr	r1, [pc, #36]	; (80050a0 <HAL_GPIO_Init+0x304>)
 800507a:	4013      	ands	r3, r2
 800507c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	3301      	adds	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	fa22 f303 	lsr.w	r3, r2, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	f47f ae8e 	bne.w	8004db0 <HAL_GPIO_Init+0x14>
  }
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	372c      	adds	r7, #44	; 0x2c
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	40010400 	.word	0x40010400

080050a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	807b      	strh	r3, [r7, #2]
 80050b0:	4613      	mov	r3, r2
 80050b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050b4:	787b      	ldrb	r3, [r7, #1]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ba:	887a      	ldrh	r2, [r7, #2]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80050c0:	e003      	b.n	80050ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050c2:	887b      	ldrh	r3, [r7, #2]
 80050c4:	041a      	lsls	r2, r3, #16
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	611a      	str	r2, [r3, #16]
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050e6:	887a      	ldrh	r2, [r7, #2]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4013      	ands	r3, r2
 80050ec:	041a      	lsls	r2, r3, #16
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	43d9      	mvns	r1, r3
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	400b      	ands	r3, r1
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	611a      	str	r2, [r3, #16]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
	...

08005108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e12b      	b.n	8005372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fd ff4e 	bl	8002fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800515a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800516a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800516c:	f003 f874 	bl	8008258 <HAL_RCC_GetPCLK1Freq>
 8005170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4a81      	ldr	r2, [pc, #516]	; (800537c <HAL_I2C_Init+0x274>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d807      	bhi.n	800518c <HAL_I2C_Init+0x84>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a80      	ldr	r2, [pc, #512]	; (8005380 <HAL_I2C_Init+0x278>)
 8005180:	4293      	cmp	r3, r2
 8005182:	bf94      	ite	ls
 8005184:	2301      	movls	r3, #1
 8005186:	2300      	movhi	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e006      	b.n	800519a <HAL_I2C_Init+0x92>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a7d      	ldr	r2, [pc, #500]	; (8005384 <HAL_I2C_Init+0x27c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	bf94      	ite	ls
 8005194:	2301      	movls	r3, #1
 8005196:	2300      	movhi	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0e7      	b.n	8005372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a78      	ldr	r2, [pc, #480]	; (8005388 <HAL_I2C_Init+0x280>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0c9b      	lsrs	r3, r3, #18
 80051ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a6a      	ldr	r2, [pc, #424]	; (800537c <HAL_I2C_Init+0x274>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d802      	bhi.n	80051dc <HAL_I2C_Init+0xd4>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	3301      	adds	r3, #1
 80051da:	e009      	b.n	80051f0 <HAL_I2C_Init+0xe8>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	4a69      	ldr	r2, [pc, #420]	; (800538c <HAL_I2C_Init+0x284>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	099b      	lsrs	r3, r3, #6
 80051ee:	3301      	adds	r3, #1
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	495c      	ldr	r1, [pc, #368]	; (800537c <HAL_I2C_Init+0x274>)
 800520c:	428b      	cmp	r3, r1
 800520e:	d819      	bhi.n	8005244 <HAL_I2C_Init+0x13c>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1e59      	subs	r1, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	fbb1 f3f3 	udiv	r3, r1, r3
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005224:	400b      	ands	r3, r1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_I2C_Init+0x138>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1e59      	subs	r1, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	fbb1 f3f3 	udiv	r3, r1, r3
 8005238:	3301      	adds	r3, #1
 800523a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523e:	e051      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 8005240:	2304      	movs	r3, #4
 8005242:	e04f      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d111      	bne.n	8005270 <HAL_I2C_Init+0x168>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1e58      	subs	r0, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	440b      	add	r3, r1
 800525a:	fbb0 f3f3 	udiv	r3, r0, r3
 800525e:	3301      	adds	r3, #1
 8005260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005264:	2b00      	cmp	r3, #0
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e012      	b.n	8005296 <HAL_I2C_Init+0x18e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1e58      	subs	r0, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6859      	ldr	r1, [r3, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	0099      	lsls	r1, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	fbb0 f3f3 	udiv	r3, r0, r3
 8005286:	3301      	adds	r3, #1
 8005288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_Init+0x196>
 800529a:	2301      	movs	r3, #1
 800529c:	e022      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10e      	bne.n	80052c4 <HAL_I2C_Init+0x1bc>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1e58      	subs	r0, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	440b      	add	r3, r1
 80052b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b8:	3301      	adds	r3, #1
 80052ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c2:	e00f      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1e58      	subs	r0, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	0099      	lsls	r1, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052da:	3301      	adds	r3, #1
 80052dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	6809      	ldr	r1, [r1, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6911      	ldr	r1, [r2, #16]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68d2      	ldr	r2, [r2, #12]
 800531e:	4311      	orrs	r1, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	430b      	orrs	r3, r1
 8005326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	000186a0 	.word	0x000186a0
 8005380:	001e847f 	.word	0x001e847f
 8005384:	003d08ff 	.word	0x003d08ff
 8005388:	431bde83 	.word	0x431bde83
 800538c:	10624dd3 	.word	0x10624dd3

08005390 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	460b      	mov	r3, r1
 80053a4:	813b      	strh	r3, [r7, #8]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053aa:	f7fe f9f1 	bl	8003790 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	f040 80d9 	bne.w	8005570 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	2319      	movs	r3, #25
 80053c4:	2201      	movs	r2, #1
 80053c6:	496d      	ldr	r1, [pc, #436]	; (800557c <HAL_I2C_Mem_Write+0x1ec>)
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f002 f949 	bl	8007660 <I2C_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0cc      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_I2C_Mem_Write+0x56>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e0c5      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d007      	beq.n	800540c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800541a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2221      	movs	r2, #33	; 0x21
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2240      	movs	r2, #64	; 0x40
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a3a      	ldr	r2, [r7, #32]
 8005436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800543c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a4d      	ldr	r2, [pc, #308]	; (8005580 <HAL_I2C_Mem_Write+0x1f0>)
 800544c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800544e:	88f8      	ldrh	r0, [r7, #6]
 8005450:	893a      	ldrh	r2, [r7, #8]
 8005452:	8979      	ldrh	r1, [r7, #10]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	4603      	mov	r3, r0
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f001 fed8 	bl	8007214 <I2C_RequestMemoryWrite>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d052      	beq.n	8005510 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e081      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f002 f9ca 	bl	800780c <I2C_WaitOnTXEFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00d      	beq.n	800549a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2b04      	cmp	r3, #4
 8005484:	d107      	bne.n	8005496 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e06b      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d11b      	bne.n	8005510 <HAL_I2C_Mem_Write+0x180>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1aa      	bne.n	800546e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f002 f9b6 	bl	800788e <I2C_WaitOnBTFFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b04      	cmp	r3, #4
 800552e:	d107      	bne.n	8005540 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e016      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	00100002 	.word	0x00100002
 8005580:	ffff0000 	.word	0xffff0000

08005584 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08c      	sub	sp, #48	; 0x30
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	4608      	mov	r0, r1
 800558e:	4611      	mov	r1, r2
 8005590:	461a      	mov	r2, r3
 8005592:	4603      	mov	r3, r0
 8005594:	817b      	strh	r3, [r7, #10]
 8005596:	460b      	mov	r3, r1
 8005598:	813b      	strh	r3, [r7, #8]
 800559a:	4613      	mov	r3, r2
 800559c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055a2:	f7fe f8f5 	bl	8003790 <HAL_GetTick>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	f040 8244 	bne.w	8005a3e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	2319      	movs	r3, #25
 80055bc:	2201      	movs	r2, #1
 80055be:	4982      	ldr	r1, [pc, #520]	; (80057c8 <HAL_I2C_Mem_Read+0x244>)
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f002 f84d 	bl	8007660 <I2C_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
 80055ce:	e237      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_I2C_Mem_Read+0x5a>
 80055da:	2302      	movs	r3, #2
 80055dc:	e230      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d007      	beq.n	8005604 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2222      	movs	r2, #34	; 0x22
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2240      	movs	r2, #64	; 0x40
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4a62      	ldr	r2, [pc, #392]	; (80057cc <HAL_I2C_Mem_Read+0x248>)
 8005644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005646:	88f8      	ldrh	r0, [r7, #6]
 8005648:	893a      	ldrh	r2, [r7, #8]
 800564a:	8979      	ldrh	r1, [r7, #10]
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	4603      	mov	r3, r0
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f001 fe72 	bl	8007340 <I2C_RequestMemoryRead>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e1ec      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566a:	2b00      	cmp	r3, #0
 800566c:	d113      	bne.n	8005696 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	e1c0      	b.n	8005a18 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	2b01      	cmp	r3, #1
 800569c:	d11e      	bne.n	80056dc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056ae:	b672      	cpsid	i
}
 80056b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056d8:	b662      	cpsie	i
}
 80056da:	e035      	b.n	8005748 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d11e      	bne.n	8005722 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056f4:	b672      	cpsid	i
}
 80056f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800571e:	b662      	cpsie	i
}
 8005720:	e012      	b.n	8005748 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005730:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005748:	e166      	b.n	8005a18 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574e:	2b03      	cmp	r3, #3
 8005750:	f200 811f 	bhi.w	8005992 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005758:	2b01      	cmp	r3, #1
 800575a:	d123      	bne.n	80057a4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f002 f907 	bl	8007974 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e167      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057a2:	e139      	b.n	8005a18 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d152      	bne.n	8005852 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	2200      	movs	r2, #0
 80057b4:	4906      	ldr	r1, [pc, #24]	; (80057d0 <HAL_I2C_Mem_Read+0x24c>)
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f001 ff52 	bl	8007660 <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e13c      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
 80057c6:	bf00      	nop
 80057c8:	00100002 	.word	0x00100002
 80057cc:	ffff0000 	.word	0xffff0000
 80057d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80057d4:	b672      	cpsid	i
}
 80057d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800581a:	b662      	cpsie	i
}
 800581c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005850:	e0e2      	b.n	8005a18 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2200      	movs	r2, #0
 800585a:	497b      	ldr	r1, [pc, #492]	; (8005a48 <HAL_I2C_Mem_Read+0x4c4>)
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f001 feff 	bl	8007660 <I2C_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0e9      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800587c:	b672      	cpsid	i
}
 800587e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058b2:	4b66      	ldr	r3, [pc, #408]	; (8005a4c <HAL_I2C_Mem_Read+0x4c8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	08db      	lsrs	r3, r3, #3
 80058b8:	4a65      	ldr	r2, [pc, #404]	; (8005a50 <HAL_I2C_Mem_Read+0x4cc>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	0a1a      	lsrs	r2, r3, #8
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	00da      	lsls	r2, r3, #3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d118      	bne.n	800590a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0220 	orr.w	r2, r3, #32
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80058fa:	b662      	cpsie	i
}
 80058fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e09a      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d1d9      	bne.n	80058cc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800595a:	b662      	cpsie	i
}
 800595c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005990:	e042      	b.n	8005a18 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f001 ffec 	bl	8007974 <I2C_WaitOnRXNEFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e04c      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d118      	bne.n	8005a18 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f47f ae94 	bne.w	800574a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e000      	b.n	8005a40 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
  }
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3728      	adds	r7, #40	; 0x28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	00010004 	.word	0x00010004
 8005a4c:	20000004 	.word	0x20000004
 8005a50:	14f8b589 	.word	0x14f8b589

08005a54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d003      	beq.n	8005a8c <HAL_I2C_EV_IRQHandler+0x38>
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	f040 80c1 	bne.w	8005c0e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10d      	bne.n	8005ac2 <HAL_I2C_EV_IRQHandler+0x6e>
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005aac:	d003      	beq.n	8005ab6 <HAL_I2C_EV_IRQHandler+0x62>
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ab4:	d101      	bne.n	8005aba <HAL_I2C_EV_IRQHandler+0x66>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_I2C_EV_IRQHandler+0x68>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	f000 8132 	beq.w	8005d26 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00c      	beq.n	8005ae6 <HAL_I2C_EV_IRQHandler+0x92>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	0a5b      	lsrs	r3, r3, #9
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d006      	beq.n	8005ae6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 ffcf 	bl	8007a7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fd77 	bl	80065d2 <I2C_Master_SB>
 8005ae4:	e092      	b.n	8005c0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	08db      	lsrs	r3, r3, #3
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_I2C_EV_IRQHandler+0xb2>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	0a5b      	lsrs	r3, r3, #9
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fdec 	bl	80066dc <I2C_Master_ADD10>
 8005b04:	e082      	b.n	8005c0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	085b      	lsrs	r3, r3, #1
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_I2C_EV_IRQHandler+0xd2>
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	0a5b      	lsrs	r3, r3, #9
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fe05 	bl	800672e <I2C_Master_ADDR>
 8005b24:	e072      	b.n	8005c0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	089b      	lsrs	r3, r3, #2
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d03b      	beq.n	8005baa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b40:	f000 80f3 	beq.w	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	09db      	lsrs	r3, r3, #7
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00f      	beq.n	8005b70 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	0a9b      	lsrs	r3, r3, #10
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9f1 	bl	8005f50 <I2C_MasterTransmit_TXE>
 8005b6e:	e04d      	b.n	8005c0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	089b      	lsrs	r3, r3, #2
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80d6 	beq.w	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	0a5b      	lsrs	r3, r3, #9
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80cf 	beq.w	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b8c:	7bbb      	ldrb	r3, [r7, #14]
 8005b8e:	2b21      	cmp	r3, #33	; 0x21
 8005b90:	d103      	bne.n	8005b9a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa78 	bl	8006088 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b98:	e0c7      	b.n	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	f040 80c4 	bne.w	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fae6 	bl	8006174 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba8:	e0bf      	b.n	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb8:	f000 80b7 	beq.w	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	099b      	lsrs	r3, r3, #6
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00f      	beq.n	8005be8 <HAL_I2C_EV_IRQHandler+0x194>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	0a9b      	lsrs	r3, r3, #10
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d009      	beq.n	8005be8 <HAL_I2C_EV_IRQHandler+0x194>
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	089b      	lsrs	r3, r3, #2
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d103      	bne.n	8005be8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fb5b 	bl	800629c <I2C_MasterReceive_RXNE>
 8005be6:	e011      	b.n	8005c0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 809a 	beq.w	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	0a5b      	lsrs	r3, r3, #9
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8093 	beq.w	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fbfa 	bl	80063fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c0a:	e08e      	b.n	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c0c:	e08d      	b.n	8005d2a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e007      	b.n	8005c30 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	085b      	lsrs	r3, r3, #1
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d012      	beq.n	8005c62 <HAL_I2C_EV_IRQHandler+0x20e>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	0a5b      	lsrs	r3, r3, #9
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00c      	beq.n	8005c62 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005c58:	69b9      	ldr	r1, [r7, #24]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 ffbe 	bl	8006bdc <I2C_Slave_ADDR>
 8005c60:	e066      	b.n	8005d30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <HAL_I2C_EV_IRQHandler+0x22e>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	0a5b      	lsrs	r3, r3, #9
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fff8 	bl	8006c70 <I2C_Slave_STOPF>
 8005c80:	e056      	b.n	8005d30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	2b21      	cmp	r3, #33	; 0x21
 8005c86:	d002      	beq.n	8005c8e <HAL_I2C_EV_IRQHandler+0x23a>
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	2b29      	cmp	r3, #41	; 0x29
 8005c8c:	d125      	bne.n	8005cda <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	09db      	lsrs	r3, r3, #7
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00f      	beq.n	8005cba <HAL_I2C_EV_IRQHandler+0x266>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	0a9b      	lsrs	r3, r3, #10
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <HAL_I2C_EV_IRQHandler+0x266>
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fed6 	bl	8006a64 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cb8:	e039      	b.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	089b      	lsrs	r3, r3, #2
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d033      	beq.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2da>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	0a5b      	lsrs	r3, r3, #9
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02d      	beq.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 ff03 	bl	8006ade <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cd8:	e029      	b.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	099b      	lsrs	r3, r3, #6
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00f      	beq.n	8005d06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	0a9b      	lsrs	r3, r3, #10
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 ff0d 	bl	8006b1e <I2C_SlaveReceive_RXNE>
 8005d04:	e014      	b.n	8005d30 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	089b      	lsrs	r3, r3, #2
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00e      	beq.n	8005d30 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	0a5b      	lsrs	r3, r3, #9
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d008      	beq.n	8005d30 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 ff3b 	bl	8006b9a <I2C_SlaveReceive_BTF>
 8005d24:	e004      	b.n	8005d30 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005d26:	bf00      	nop
 8005d28:	e002      	b.n	8005d30 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d2a:	bf00      	nop
 8005d2c:	e000      	b.n	8005d30 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d2e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b08a      	sub	sp, #40	; 0x28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d58:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d016      	beq.n	8005d94 <HAL_I2C_ER_IRQHandler+0x5e>
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d82:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	0a5b      	lsrs	r3, r3, #9
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00e      	beq.n	8005dbe <HAL_I2C_ER_IRQHandler+0x88>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d008      	beq.n	8005dbe <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	f043 0302 	orr.w	r3, r3, #2
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005dbc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	0a9b      	lsrs	r3, r3, #10
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d03f      	beq.n	8005e4a <HAL_I2C_ER_IRQHandler+0x114>
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d039      	beq.n	8005e4a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005dd6:	7efb      	ldrb	r3, [r7, #27]
 8005dd8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005df0:	7ebb      	ldrb	r3, [r7, #26]
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d112      	bne.n	8005e1c <HAL_I2C_ER_IRQHandler+0xe6>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10f      	bne.n	8005e1c <HAL_I2C_ER_IRQHandler+0xe6>
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	2b21      	cmp	r3, #33	; 0x21
 8005e00:	d008      	beq.n	8005e14 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005e02:	7cfb      	ldrb	r3, [r7, #19]
 8005e04:	2b29      	cmp	r3, #41	; 0x29
 8005e06:	d005      	beq.n	8005e14 <HAL_I2C_ER_IRQHandler+0xde>
 8005e08:	7cfb      	ldrb	r3, [r7, #19]
 8005e0a:	2b28      	cmp	r3, #40	; 0x28
 8005e0c:	d106      	bne.n	8005e1c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b21      	cmp	r3, #33	; 0x21
 8005e12:	d103      	bne.n	8005e1c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 f85b 	bl	8006ed0 <I2C_Slave_AF>
 8005e1a:	e016      	b.n	8005e4a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005e2e:	7efb      	ldrb	r3, [r7, #27]
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d002      	beq.n	8005e3a <HAL_I2C_ER_IRQHandler+0x104>
 8005e34:	7efb      	ldrb	r3, [r7, #27]
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d107      	bne.n	8005e4a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	0adb      	lsrs	r3, r3, #11
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <HAL_I2C_ER_IRQHandler+0x13e>
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	f043 0308 	orr.w	r3, r3, #8
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005e72:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 f892 	bl	8006fb0 <I2C_ITError>
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	3728      	adds	r7, #40	; 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	70fb      	strb	r3, [r7, #3]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr

08005f2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr

08005f3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d150      	bne.n	8006018 <I2C_MasterTransmit_TXE+0xc8>
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b21      	cmp	r3, #33	; 0x21
 8005f7a:	d14d      	bne.n	8006018 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d01d      	beq.n	8005fbe <I2C_MasterTransmit_TXE+0x6e>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d01a      	beq.n	8005fbe <I2C_MasterTransmit_TXE+0x6e>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f8e:	d016      	beq.n	8005fbe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2211      	movs	r2, #17
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ff6c 	bl	8005e94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fbc:	e060      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fcc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fdc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d107      	bne.n	8006008 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ff81 	bl	8005f08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006006:	e03b      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ff3f 	bl	8005e94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006016:	e033      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b21      	cmp	r3, #33	; 0x21
 800601c:	d005      	beq.n	800602a <I2C_MasterTransmit_TXE+0xda>
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d12d      	bne.n	8006080 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b22      	cmp	r3, #34	; 0x22
 8006028:	d12a      	bne.n	8006080 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d108      	bne.n	8006046 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006042:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006044:	e01c      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d103      	bne.n	800605a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f88e 	bl	8006174 <I2C_MemoryTransmit_TXE_BTF>
}
 8006058:	e012      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800607e:	e7ff      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b21      	cmp	r3, #33	; 0x21
 80060a0:	d164      	bne.n	800616c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d012      	beq.n	80060d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80060d0:	e04c      	b.n	800616c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d01d      	beq.n	8006114 <I2C_MasterTransmit_BTF+0x8c>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d01a      	beq.n	8006114 <I2C_MasterTransmit_BTF+0x8c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060e4:	d016      	beq.n	8006114 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2211      	movs	r2, #17
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff fec1 	bl	8005e94 <HAL_I2C_MasterTxCpltCallback>
}
 8006112:	e02b      	b.n	800616c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006122:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006132:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d107      	bne.n	800615e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fed6 	bl	8005f08 <HAL_I2C_MemTxCpltCallback>
}
 800615c:	e006      	b.n	800616c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fe94 	bl	8005e94 <HAL_I2C_MasterTxCpltCallback>
}
 800616c:	bf00      	nop
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006182:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006188:	2b00      	cmp	r3, #0
 800618a:	d11d      	bne.n	80061c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10b      	bne.n	80061ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006198:	b2da      	uxtb	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	1c9a      	adds	r2, r3, #2
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80061aa:	e073      	b.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	121b      	asrs	r3, r3, #8
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061c6:	e065      	b.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10b      	bne.n	80061e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061e6:	e055      	b.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d151      	bne.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b22      	cmp	r3, #34	; 0x22
 80061f4:	d10d      	bne.n	8006212 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006204:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006210:	e040      	b.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d015      	beq.n	8006248 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	2b21      	cmp	r3, #33	; 0x21
 8006220:	d112      	bne.n	8006248 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	781a      	ldrb	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006246:	e025      	b.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d120      	bne.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b21      	cmp	r3, #33	; 0x21
 8006256:	d11d      	bne.n	8006294 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006266:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006276:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fe3a 	bl	8005f08 <HAL_I2C_MemTxCpltCallback>
}
 8006294:	bf00      	nop
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b22      	cmp	r3, #34	; 0x22
 80062ae:	f040 80a2 	bne.w	80063f6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d921      	bls.n	8006304 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	f040 8082 	bne.w	80063f6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006300:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006302:	e078      	b.n	80063f6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	2b02      	cmp	r3, #2
 800630a:	d074      	beq.n	80063f6 <I2C_MasterReceive_RXNE+0x15a>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d002      	beq.n	8006318 <I2C_MasterReceive_RXNE+0x7c>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d16e      	bne.n	80063f6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 faf9 	bl	8007910 <I2C_WaitOnSTOPRequestThroughIT>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d142      	bne.n	80063aa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006332:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006342:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d10a      	bne.n	8006394 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fdc4 	bl	8005f1a <HAL_I2C_MemRxCpltCallback>
}
 8006392:	e030      	b.n	80063f6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2212      	movs	r2, #18
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fd7f 	bl	8005ea6 <HAL_I2C_MasterRxCpltCallback>
}
 80063a8:	e025      	b.n	80063f6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff fd9b 	bl	8005f2c <HAL_I2C_ErrorCallback>
}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b04      	cmp	r3, #4
 8006414:	d11b      	bne.n	800644e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006424:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800644c:	e0bd      	b.n	80065ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b03      	cmp	r3, #3
 8006456:	d129      	bne.n	80064ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006466:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b04      	cmp	r3, #4
 800646c:	d00a      	beq.n	8006484 <I2C_MasterReceive_BTF+0x86>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d007      	beq.n	8006484 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006482:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064aa:	e08e      	b.n	80065ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d176      	bne.n	80065a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d002      	beq.n	80064c2 <I2C_MasterReceive_BTF+0xc4>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d108      	bne.n	80064d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e019      	b.n	8006508 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d002      	beq.n	80064e0 <I2C_MasterReceive_BTF+0xe2>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d108      	bne.n	80064f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e00a      	b.n	8006508 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d007      	beq.n	8006508 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006506:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006562:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d10a      	bne.n	800658e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fcc7 	bl	8005f1a <HAL_I2C_MemRxCpltCallback>
}
 800658c:	e01d      	b.n	80065ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2212      	movs	r2, #18
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff fc82 	bl	8005ea6 <HAL_I2C_MasterRxCpltCallback>
}
 80065a2:	e012      	b.n	80065ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d117      	bne.n	8006616 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d109      	bne.n	8006602 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006600:	e067      	b.n	80066d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	b2da      	uxtb	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	611a      	str	r2, [r3, #16]
}
 8006614:	e05d      	b.n	80066d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800661e:	d133      	bne.n	8006688 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b21      	cmp	r3, #33	; 0x21
 800662a:	d109      	bne.n	8006640 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800663c:	611a      	str	r2, [r3, #16]
 800663e:	e008      	b.n	8006652 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <I2C_Master_SB+0x92>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d108      	bne.n	8006676 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d032      	beq.n	80066d2 <I2C_Master_SB+0x100>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d02d      	beq.n	80066d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006684:	605a      	str	r2, [r3, #4]
}
 8006686:	e024      	b.n	80066d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10e      	bne.n	80066ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	b29b      	uxth	r3, r3
 8006696:	11db      	asrs	r3, r3, #7
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f003 0306 	and.w	r3, r3, #6
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f063 030f 	orn	r3, r3, #15
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	611a      	str	r2, [r3, #16]
}
 80066ac:	e011      	b.n	80066d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d10d      	bne.n	80066d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	11db      	asrs	r3, r3, #7
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0306 	and.w	r3, r3, #6
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f063 030e 	orn	r3, r3, #14
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	611a      	str	r2, [r3, #16]
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <I2C_Master_ADD10+0x26>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d108      	bne.n	8006714 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00c      	beq.n	8006724 <I2C_Master_ADD10+0x48>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006722:	605a      	str	r2, [r3, #4]
  }
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800672e:	b480      	push	{r7}
 8006730:	b091      	sub	sp, #68	; 0x44
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800673c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b22      	cmp	r3, #34	; 0x22
 8006756:	f040 8174 	bne.w	8006a42 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10f      	bne.n	8006782 <I2C_Master_ADDR+0x54>
 8006762:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	d10b      	bne.n	8006782 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676a:	2300      	movs	r3, #0
 800676c:	633b      	str	r3, [r7, #48]	; 0x30
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	633b      	str	r3, [r7, #48]	; 0x30
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	e16b      	b.n	8006a5a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006786:	2b00      	cmp	r3, #0
 8006788:	d11d      	bne.n	80067c6 <I2C_Master_ADDR+0x98>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006792:	d118      	bne.n	80067c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006794:	2300      	movs	r3, #0
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	651a      	str	r2, [r3, #80]	; 0x50
 80067c4:	e149      	b.n	8006a5a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d113      	bne.n	80067f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d0:	2300      	movs	r3, #0
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e120      	b.n	8006a3a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b01      	cmp	r3, #1
 8006800:	f040 808a 	bne.w	8006918 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800680a:	d137      	bne.n	800687c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800681a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800682a:	d113      	bne.n	8006854 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800683c:	2300      	movs	r3, #0
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	e0f2      	b.n	8006a3a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006854:	2300      	movs	r3, #0
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	623b      	str	r3, [r7, #32]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	623b      	str	r3, [r7, #32]
 8006868:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e0de      	b.n	8006a3a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	2b08      	cmp	r3, #8
 8006880:	d02e      	beq.n	80068e0 <I2C_Master_ADDR+0x1b2>
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	2b20      	cmp	r3, #32
 8006886:	d02b      	beq.n	80068e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	2b12      	cmp	r3, #18
 800688c:	d102      	bne.n	8006894 <I2C_Master_ADDR+0x166>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	2b01      	cmp	r3, #1
 8006892:	d125      	bne.n	80068e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	2b04      	cmp	r3, #4
 8006898:	d00e      	beq.n	80068b8 <I2C_Master_ADDR+0x18a>
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	2b02      	cmp	r3, #2
 800689e:	d00b      	beq.n	80068b8 <I2C_Master_ADDR+0x18a>
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	d008      	beq.n	80068b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e007      	b.n	80068c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c8:	2300      	movs	r3, #0
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	e0ac      	b.n	8006a3a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e090      	b.n	8006a3a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d158      	bne.n	80069d4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	2b04      	cmp	r3, #4
 8006926:	d021      	beq.n	800696c <I2C_Master_ADDR+0x23e>
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	2b02      	cmp	r3, #2
 800692c:	d01e      	beq.n	800696c <I2C_Master_ADDR+0x23e>
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	2b10      	cmp	r3, #16
 8006932:	d01b      	beq.n	800696c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006942:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006944:	2300      	movs	r3, #0
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e012      	b.n	8006992 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800697a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800699c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a0:	d14b      	bne.n	8006a3a <I2C_Master_ADDR+0x30c>
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069a8:	d00b      	beq.n	80069c2 <I2C_Master_ADDR+0x294>
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d008      	beq.n	80069c2 <I2C_Master_ADDR+0x294>
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d005      	beq.n	80069c2 <I2C_Master_ADDR+0x294>
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	2b10      	cmp	r3, #16
 80069ba:	d002      	beq.n	80069c2 <I2C_Master_ADDR+0x294>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d13b      	bne.n	8006a3a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069d0:	605a      	str	r2, [r3, #4]
 80069d2:	e032      	b.n	8006a3a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069e2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f2:	d117      	bne.n	8006a24 <I2C_Master_ADDR+0x2f6>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069fa:	d00b      	beq.n	8006a14 <I2C_Master_ADDR+0x2e6>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d008      	beq.n	8006a14 <I2C_Master_ADDR+0x2e6>
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d005      	beq.n	8006a14 <I2C_Master_ADDR+0x2e6>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d002      	beq.n	8006a14 <I2C_Master_ADDR+0x2e6>
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	d107      	bne.n	8006a24 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006a40:	e00b      	b.n	8006a5a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	60bb      	str	r3, [r7, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	68bb      	ldr	r3, [r7, #8]
}
 8006a58:	e7ff      	b.n	8006a5a <I2C_Master_ADDR+0x32c>
 8006a5a:	bf00      	nop
 8006a5c:	3744      	adds	r7, #68	; 0x44
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02b      	beq.n	8006ad6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	781a      	ldrb	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d114      	bne.n	8006ad6 <I2C_SlaveTransmit_TXE+0x72>
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b29      	cmp	r3, #41	; 0x29
 8006ab0:	d111      	bne.n	8006ad6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2228      	movs	r2, #40	; 0x28
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff f9f1 	bl	8005eb8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d011      	beq.n	8006b14 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02c      	beq.n	8006b92 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d114      	bne.n	8006b92 <I2C_SlaveReceive_RXNE+0x74>
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6c:	d111      	bne.n	8006b92 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2222      	movs	r2, #34	; 0x22
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2228      	movs	r2, #40	; 0x28
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff f99c 	bl	8005eca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d012      	beq.n	8006bd2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr

08006bdc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bf6:	2b28      	cmp	r3, #40	; 0x28
 8006bf8:	d127      	bne.n	8006c4a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c08:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	089b      	lsrs	r3, r3, #2
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006c16:	2301      	movs	r3, #1
 8006c18:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	09db      	lsrs	r3, r3, #7
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	81bb      	strh	r3, [r7, #12]
 8006c2c:	e002      	b.n	8006c34 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006c3c:	89ba      	ldrh	r2, [r7, #12]
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff f94a 	bl	8005edc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006c48:	e00e      	b.n	8006c68 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c90:	2300      	movs	r3, #0
 8006c92:	60bb      	str	r3, [r7, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cbc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ccc:	d172      	bne.n	8006db4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b22      	cmp	r3, #34	; 0x22
 8006cd2:	d002      	beq.n	8006cda <I2C_Slave_STOPF+0x6a>
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd8:	d135      	bne.n	8006d46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f043 0204 	orr.w	r2, r3, #4
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe f808 	bl	8004d28 <HAL_DMA_GetState>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d049      	beq.n	8006db2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	4a69      	ldr	r2, [pc, #420]	; (8006ec8 <I2C_Slave_STOPF+0x258>)
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fd fe80 	bl	8004a30 <HAL_DMA_Abort_IT>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d03d      	beq.n	8006db2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d40:	4610      	mov	r0, r2
 8006d42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d44:	e035      	b.n	8006db2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d005      	beq.n	8006d6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f043 0204 	orr.w	r2, r3, #4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd ffd2 	bl	8004d28 <HAL_DMA_GetState>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d014      	beq.n	8006db4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	4a4e      	ldr	r2, [pc, #312]	; (8006ec8 <I2C_Slave_STOPF+0x258>)
 8006d90:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd fe4a 	bl	8004a30 <HAL_DMA_Abort_IT>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	e000      	b.n	8006db4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d03e      	beq.n	8006e3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d112      	bne.n	8006df2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d112      	bne.n	8006e26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	f043 0204 	orr.w	r2, r3, #4
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f8b3 	bl	8006fb0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006e4a:	e039      	b.n	8006ec0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e50:	d109      	bne.n	8006e66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2228      	movs	r2, #40	; 0x28
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff f832 	bl	8005eca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b28      	cmp	r3, #40	; 0x28
 8006e70:	d111      	bne.n	8006e96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <I2C_Slave_STOPF+0x25c>)
 8006e76:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff f831 	bl	8005ef6 <HAL_I2C_ListenCpltCallback>
}
 8006e94:	e014      	b.n	8006ec0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	2b22      	cmp	r3, #34	; 0x22
 8006e9c:	d002      	beq.n	8006ea4 <I2C_Slave_STOPF+0x234>
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b22      	cmp	r3, #34	; 0x22
 8006ea2:	d10d      	bne.n	8006ec0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff f805 	bl	8005eca <HAL_I2C_SlaveRxCpltCallback>
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	08007511 	.word	0x08007511
 8006ecc:	ffff0000 	.word	0xffff0000

08006ed0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ede:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d002      	beq.n	8006ef2 <I2C_Slave_AF+0x22>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d129      	bne.n	8006f46 <I2C_Slave_AF+0x76>
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b28      	cmp	r3, #40	; 0x28
 8006ef6:	d126      	bne.n	8006f46 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <I2C_Slave_AF+0xdc>)
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fe ffd9 	bl	8005ef6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006f44:	e02e      	b.n	8006fa4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	2b21      	cmp	r3, #33	; 0x21
 8006f4a:	d126      	bne.n	8006f9a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a17      	ldr	r2, [pc, #92]	; (8006fac <I2C_Slave_AF+0xdc>)
 8006f50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2221      	movs	r2, #33	; 0x21
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f76:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f80:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f90:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fe ff90 	bl	8005eb8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f98:	e004      	b.n	8006fa4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fa2:	615a      	str	r2, [r3, #20]
}
 8006fa4:	bf00      	nop
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	ffff0000 	.word	0xffff0000

08006fb0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fc6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d002      	beq.n	8006fd4 <I2C_ITError+0x24>
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d10a      	bne.n	8006fea <I2C_ITError+0x3a>
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b22      	cmp	r3, #34	; 0x22
 8006fd8:	d107      	bne.n	8006fea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ff0:	2b28      	cmp	r3, #40	; 0x28
 8006ff2:	d107      	bne.n	8007004 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2228      	movs	r2, #40	; 0x28
 8006ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007002:	e015      	b.n	8007030 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800700e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007012:	d00a      	beq.n	800702a <I2C_ITError+0x7a>
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	2b60      	cmp	r3, #96	; 0x60
 8007018:	d007      	beq.n	800702a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800703a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800703e:	d161      	bne.n	8007104 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800704e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007054:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007058:	2b01      	cmp	r3, #1
 800705a:	d020      	beq.n	800709e <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007060:	4a6a      	ldr	r2, [pc, #424]	; (800720c <I2C_ITError+0x25c>)
 8007062:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	4618      	mov	r0, r3
 800706a:	f7fd fce1 	bl	8004a30 <HAL_DMA_Abort_IT>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8089 	beq.w	8007188 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	e074      	b.n	8007188 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	4a5a      	ldr	r2, [pc, #360]	; (800720c <I2C_ITError+0x25c>)
 80070a4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fd fcc0 	bl	8004a30 <HAL_DMA_Abort_IT>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d068      	beq.n	8007188 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d10b      	bne.n	80070dc <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070fe:	4610      	mov	r0, r2
 8007100:	4798      	blx	r3
 8007102:	e041      	b.n	8007188 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b60      	cmp	r3, #96	; 0x60
 800710e:	d125      	bne.n	800715c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d10b      	bne.n	8007144 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691a      	ldr	r2, [r3, #16]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0201 	bic.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7fe fef2 	bl	8005f3e <HAL_I2C_AbortCpltCallback>
 800715a:	e015      	b.n	8007188 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d10b      	bne.n	8007182 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fe fed2 	bl	8005f2c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10e      	bne.n	80071b6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d007      	beq.n	80071c6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071c4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071cc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d113      	bne.n	8007202 <I2C_ITError+0x252>
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	2b28      	cmp	r3, #40	; 0x28
 80071de:	d110      	bne.n	8007202 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a0b      	ldr	r2, [pc, #44]	; (8007210 <I2C_ITError+0x260>)
 80071e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7fe fe7a 	bl	8005ef6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	08007511 	.word	0x08007511
 8007210:	ffff0000 	.word	0xffff0000

08007214 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	461a      	mov	r2, r3
 8007222:	4603      	mov	r3, r0
 8007224:	817b      	strh	r3, [r7, #10]
 8007226:	460b      	mov	r3, r1
 8007228:	813b      	strh	r3, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800723c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	2200      	movs	r2, #0
 8007246:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 fa08 	bl	8007660 <I2C_WaitOnFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00d      	beq.n	8007272 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007264:	d103      	bne.n	800726e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800726c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e05f      	b.n	8007332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007272:	897b      	ldrh	r3, [r7, #10]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007280:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	6a3a      	ldr	r2, [r7, #32]
 8007286:	492d      	ldr	r1, [pc, #180]	; (800733c <I2C_RequestMemoryWrite+0x128>)
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fa40 	bl	800770e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e04c      	b.n	8007332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b0:	6a39      	ldr	r1, [r7, #32]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 faaa 	bl	800780c <I2C_WaitOnTXEFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d107      	bne.n	80072d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e02b      	b.n	8007332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d105      	bne.n	80072ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	611a      	str	r2, [r3, #16]
 80072ea:	e021      	b.n	8007330 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072ec:	893b      	ldrh	r3, [r7, #8]
 80072ee:	0a1b      	lsrs	r3, r3, #8
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fc:	6a39      	ldr	r1, [r7, #32]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 fa84 	bl	800780c <I2C_WaitOnTXEFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	2b04      	cmp	r3, #4
 8007310:	d107      	bne.n	8007322 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007320:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e005      	b.n	8007332 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007326:	893b      	ldrh	r3, [r7, #8]
 8007328:	b2da      	uxtb	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	00010002 	.word	0x00010002

08007340 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	461a      	mov	r2, r3
 800734e:	4603      	mov	r3, r0
 8007350:	817b      	strh	r3, [r7, #10]
 8007352:	460b      	mov	r3, r1
 8007354:	813b      	strh	r3, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007368:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	2200      	movs	r2, #0
 8007382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f96a 	bl	8007660 <I2C_WaitOnFlagUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00d      	beq.n	80073ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a0:	d103      	bne.n	80073aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e0aa      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073ae:	897b      	ldrh	r3, [r7, #10]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	6a3a      	ldr	r2, [r7, #32]
 80073c2:	4952      	ldr	r1, [pc, #328]	; (800750c <I2C_RequestMemoryRead+0x1cc>)
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f9a2 	bl	800770e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e097      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d4:	2300      	movs	r3, #0
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ec:	6a39      	ldr	r1, [r7, #32]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fa0c 	bl	800780c <I2C_WaitOnTXEFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00d      	beq.n	8007416 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d107      	bne.n	8007412 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e076      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d105      	bne.n	8007428 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800741c:	893b      	ldrh	r3, [r7, #8]
 800741e:	b2da      	uxtb	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	611a      	str	r2, [r3, #16]
 8007426:	e021      	b.n	800746c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007428:	893b      	ldrh	r3, [r7, #8]
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	b29b      	uxth	r3, r3
 800742e:	b2da      	uxtb	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007438:	6a39      	ldr	r1, [r7, #32]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f9e6 	bl	800780c <I2C_WaitOnTXEFlagUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00d      	beq.n	8007462 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b04      	cmp	r3, #4
 800744c:	d107      	bne.n	800745e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e050      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007462:	893b      	ldrh	r3, [r7, #8]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746e:	6a39      	ldr	r1, [r7, #32]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f9cb 	bl	800780c <I2C_WaitOnTXEFlagUntilTimeout>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00d      	beq.n	8007498 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	2b04      	cmp	r3, #4
 8007482:	d107      	bne.n	8007494 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007492:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e035      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f8d3 	bl	8007660 <I2C_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00d      	beq.n	80074dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ce:	d103      	bne.n	80074d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e013      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074dc:	897b      	ldrh	r3, [r7, #10]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	4906      	ldr	r1, [pc, #24]	; (800750c <I2C_RequestMemoryRead+0x1cc>)
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f90b 	bl	800770e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	00010002 	.word	0x00010002

08007510 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007528:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800752a:	4b4b      	ldr	r3, [pc, #300]	; (8007658 <I2C_DMAAbort+0x148>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	08db      	lsrs	r3, r3, #3
 8007530:	4a4a      	ldr	r2, [pc, #296]	; (800765c <I2C_DMAAbort+0x14c>)
 8007532:	fba2 2303 	umull	r2, r3, r2, r3
 8007536:	0a1a      	lsrs	r2, r3, #8
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	00da      	lsls	r2, r3, #3
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f043 0220 	orr.w	r2, r3, #32
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007556:	e00a      	b.n	800756e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3b01      	subs	r3, #1
 800755c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756c:	d0ea      	beq.n	8007544 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757a:	2200      	movs	r2, #0
 800757c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	2200      	movs	r2, #0
 800758c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b0:	2200      	movs	r2, #0
 80075b2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	2200      	movs	r2, #0
 80075c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0201 	bic.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b60      	cmp	r3, #96	; 0x60
 80075de:	d10e      	bne.n	80075fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2200      	movs	r2, #0
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075f6:	6978      	ldr	r0, [r7, #20]
 80075f8:	f7fe fca1 	bl	8005f3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075fc:	e027      	b.n	800764e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075fe:	7cfb      	ldrb	r3, [r7, #19]
 8007600:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007604:	2b28      	cmp	r3, #40	; 0x28
 8007606:	d117      	bne.n	8007638 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0201 	orr.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007626:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2200      	movs	r2, #0
 800762c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2228      	movs	r2, #40	; 0x28
 8007632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007636:	e007      	b.n	8007648 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007648:	6978      	ldr	r0, [r7, #20]
 800764a:	f7fe fc6f 	bl	8005f2c <HAL_I2C_ErrorCallback>
}
 800764e:	bf00      	nop
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000004 	.word	0x20000004
 800765c:	14f8b589 	.word	0x14f8b589

08007660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	4613      	mov	r3, r2
 800766e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007670:	e025      	b.n	80076be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007678:	d021      	beq.n	80076be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800767a:	f7fc f889 	bl	8003790 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d302      	bcc.n	8007690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d116      	bne.n	80076be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	f043 0220 	orr.w	r2, r3, #32
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e023      	b.n	8007706 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	0c1b      	lsrs	r3, r3, #16
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10d      	bne.n	80076e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	43da      	mvns	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4013      	ands	r3, r2
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bf0c      	ite	eq
 80076da:	2301      	moveq	r3, #1
 80076dc:	2300      	movne	r3, #0
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	e00c      	b.n	80076fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	43da      	mvns	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4013      	ands	r3, r2
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bf0c      	ite	eq
 80076f6:	2301      	moveq	r3, #1
 80076f8:	2300      	movne	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	429a      	cmp	r2, r3
 8007702:	d0b6      	beq.n	8007672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800771c:	e051      	b.n	80077c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772c:	d123      	bne.n	8007776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800773c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007746:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f043 0204 	orr.w	r2, r3, #4
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e046      	b.n	8007804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d021      	beq.n	80077c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777e:	f7fc f807 	bl	8003790 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d116      	bne.n	80077c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f043 0220 	orr.w	r2, r3, #32
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e020      	b.n	8007804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	0c1b      	lsrs	r3, r3, #16
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d10c      	bne.n	80077e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	43da      	mvns	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4013      	ands	r3, r2
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	bf14      	ite	ne
 80077de:	2301      	movne	r3, #1
 80077e0:	2300      	moveq	r3, #0
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	e00b      	b.n	80077fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	43da      	mvns	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	4013      	ands	r3, r2
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bf14      	ite	ne
 80077f8:	2301      	movne	r3, #1
 80077fa:	2300      	moveq	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d18d      	bne.n	800771e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007818:	e02d      	b.n	8007876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f900 	bl	8007a20 <I2C_IsAcknowledgeFailed>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e02d      	b.n	8007886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d021      	beq.n	8007876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007832:	f7fb ffad 	bl	8003790 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	429a      	cmp	r2, r3
 8007840:	d302      	bcc.n	8007848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d116      	bne.n	8007876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2220      	movs	r2, #32
 8007852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	f043 0220 	orr.w	r2, r3, #32
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e007      	b.n	8007886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d1ca      	bne.n	800781a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800789a:	e02d      	b.n	80078f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f8bf 	bl	8007a20 <I2C_IsAcknowledgeFailed>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e02d      	b.n	8007908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d021      	beq.n	80078f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b4:	f7fb ff6c 	bl	8003790 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d302      	bcc.n	80078ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d116      	bne.n	80078f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	f043 0220 	orr.w	r2, r3, #32
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e007      	b.n	8007908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b04      	cmp	r3, #4
 8007904:	d1ca      	bne.n	800789c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800791c:	4b13      	ldr	r3, [pc, #76]	; (800796c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	08db      	lsrs	r3, r3, #3
 8007922:	4a13      	ldr	r2, [pc, #76]	; (8007970 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007924:	fba2 2303 	umull	r2, r3, r2, r3
 8007928:	0a1a      	lsrs	r2, r3, #8
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3b01      	subs	r3, #1
 8007936:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d107      	bne.n	800794e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f043 0220 	orr.w	r2, r3, #32
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e008      	b.n	8007960 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800795c:	d0e9      	beq.n	8007932 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000004 	.word	0x20000004
 8007970:	14f8b589 	.word	0x14f8b589

08007974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007980:	e042      	b.n	8007a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d119      	bne.n	80079c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0210 	mvn.w	r2, #16
 8007998:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e029      	b.n	8007a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c4:	f7fb fee4 	bl	8003790 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d302      	bcc.n	80079da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d116      	bne.n	8007a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	f043 0220 	orr.w	r2, r3, #32
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e007      	b.n	8007a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d1b5      	bne.n	8007982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a36:	d11b      	bne.n	8007a70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	f043 0204 	orr.w	r2, r3, #4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e000      	b.n	8007a72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bc80      	pop	{r7}
 8007a7a:	4770      	bx	lr

08007a7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007a8c:	d103      	bne.n	8007a96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007a94:	e007      	b.n	8007aa6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007a9e:	d102      	bne.n	8007aa6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bc80      	pop	{r7}
 8007aae:	4770      	bx	lr

08007ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e26c      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 8087 	beq.w	8007bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ad0:	4b92      	ldr	r3, [pc, #584]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f003 030c 	and.w	r3, r3, #12
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d00c      	beq.n	8007af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007adc:	4b8f      	ldr	r3, [pc, #572]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f003 030c 	and.w	r3, r3, #12
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d112      	bne.n	8007b0e <HAL_RCC_OscConfig+0x5e>
 8007ae8:	4b8c      	ldr	r3, [pc, #560]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af4:	d10b      	bne.n	8007b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af6:	4b89      	ldr	r3, [pc, #548]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d06c      	beq.n	8007bdc <HAL_RCC_OscConfig+0x12c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d168      	bne.n	8007bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e246      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b16:	d106      	bne.n	8007b26 <HAL_RCC_OscConfig+0x76>
 8007b18:	4b80      	ldr	r3, [pc, #512]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a7f      	ldr	r2, [pc, #508]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	e02e      	b.n	8007b84 <HAL_RCC_OscConfig+0xd4>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10c      	bne.n	8007b48 <HAL_RCC_OscConfig+0x98>
 8007b2e:	4b7b      	ldr	r3, [pc, #492]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a7a      	ldr	r2, [pc, #488]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	4b78      	ldr	r3, [pc, #480]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a77      	ldr	r2, [pc, #476]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	e01d      	b.n	8007b84 <HAL_RCC_OscConfig+0xd4>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b50:	d10c      	bne.n	8007b6c <HAL_RCC_OscConfig+0xbc>
 8007b52:	4b72      	ldr	r3, [pc, #456]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a71      	ldr	r2, [pc, #452]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	4b6f      	ldr	r3, [pc, #444]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a6e      	ldr	r2, [pc, #440]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e00b      	b.n	8007b84 <HAL_RCC_OscConfig+0xd4>
 8007b6c:	4b6b      	ldr	r3, [pc, #428]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a6a      	ldr	r2, [pc, #424]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	4b68      	ldr	r3, [pc, #416]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a67      	ldr	r2, [pc, #412]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d013      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b8c:	f7fb fe00 	bl	8003790 <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b94:	f7fb fdfc 	bl	8003790 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b64      	cmp	r3, #100	; 0x64
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e1fa      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ba6:	4b5d      	ldr	r3, [pc, #372]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0f0      	beq.n	8007b94 <HAL_RCC_OscConfig+0xe4>
 8007bb2:	e014      	b.n	8007bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb4:	f7fb fdec 	bl	8003790 <HAL_GetTick>
 8007bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bba:	e008      	b.n	8007bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bbc:	f7fb fde8 	bl	8003790 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b64      	cmp	r3, #100	; 0x64
 8007bc8:	d901      	bls.n	8007bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e1e6      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bce:	4b53      	ldr	r3, [pc, #332]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1f0      	bne.n	8007bbc <HAL_RCC_OscConfig+0x10c>
 8007bda:	e000      	b.n	8007bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d063      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007bea:	4b4c      	ldr	r3, [pc, #304]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f003 030c 	and.w	r3, r3, #12
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007bf6:	4b49      	ldr	r3, [pc, #292]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f003 030c 	and.w	r3, r3, #12
 8007bfe:	2b08      	cmp	r3, #8
 8007c00:	d11c      	bne.n	8007c3c <HAL_RCC_OscConfig+0x18c>
 8007c02:	4b46      	ldr	r3, [pc, #280]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d116      	bne.n	8007c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c0e:	4b43      	ldr	r3, [pc, #268]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <HAL_RCC_OscConfig+0x176>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d001      	beq.n	8007c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e1ba      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c26:	4b3d      	ldr	r3, [pc, #244]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4939      	ldr	r1, [pc, #228]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c3a:	e03a      	b.n	8007cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d020      	beq.n	8007c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c44:	4b36      	ldr	r3, [pc, #216]	; (8007d20 <HAL_RCC_OscConfig+0x270>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c4a:	f7fb fda1 	bl	8003790 <HAL_GetTick>
 8007c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c50:	e008      	b.n	8007c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c52:	f7fb fd9d 	bl	8003790 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e19b      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c64:	4b2d      	ldr	r3, [pc, #180]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0f0      	beq.n	8007c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c70:	4b2a      	ldr	r3, [pc, #168]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4927      	ldr	r1, [pc, #156]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	600b      	str	r3, [r1, #0]
 8007c84:	e015      	b.n	8007cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c86:	4b26      	ldr	r3, [pc, #152]	; (8007d20 <HAL_RCC_OscConfig+0x270>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c8c:	f7fb fd80 	bl	8003790 <HAL_GetTick>
 8007c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c92:	e008      	b.n	8007ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c94:	f7fb fd7c 	bl	8003790 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e17a      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ca6:	4b1d      	ldr	r3, [pc, #116]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f0      	bne.n	8007c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0308 	and.w	r3, r3, #8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d03a      	beq.n	8007d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d019      	beq.n	8007cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cc6:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <HAL_RCC_OscConfig+0x274>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ccc:	f7fb fd60 	bl	8003790 <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cd4:	f7fb fd5c 	bl	8003790 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e15a      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0f0      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f000 fad8 	bl	80082a8 <RCC_Delay>
 8007cf8:	e01c      	b.n	8007d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <HAL_RCC_OscConfig+0x274>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d00:	f7fb fd46 	bl	8003790 <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d06:	e00f      	b.n	8007d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d08:	f7fb fd42 	bl	8003790 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d908      	bls.n	8007d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e140      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
 8007d1a:	bf00      	nop
 8007d1c:	40021000 	.word	0x40021000
 8007d20:	42420000 	.word	0x42420000
 8007d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d28:	4b9e      	ldr	r3, [pc, #632]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e9      	bne.n	8007d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80a6 	beq.w	8007e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d42:	2300      	movs	r3, #0
 8007d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d46:	4b97      	ldr	r3, [pc, #604]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10d      	bne.n	8007d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d52:	4b94      	ldr	r3, [pc, #592]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	4a93      	ldr	r2, [pc, #588]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	61d3      	str	r3, [r2, #28]
 8007d5e:	4b91      	ldr	r3, [pc, #580]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d6e:	4b8e      	ldr	r3, [pc, #568]	; (8007fa8 <HAL_RCC_OscConfig+0x4f8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d118      	bne.n	8007dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d7a:	4b8b      	ldr	r3, [pc, #556]	; (8007fa8 <HAL_RCC_OscConfig+0x4f8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a8a      	ldr	r2, [pc, #552]	; (8007fa8 <HAL_RCC_OscConfig+0x4f8>)
 8007d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d86:	f7fb fd03 	bl	8003790 <HAL_GetTick>
 8007d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d8c:	e008      	b.n	8007da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d8e:	f7fb fcff 	bl	8003790 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b64      	cmp	r3, #100	; 0x64
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e0fd      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da0:	4b81      	ldr	r3, [pc, #516]	; (8007fa8 <HAL_RCC_OscConfig+0x4f8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0f0      	beq.n	8007d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d106      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x312>
 8007db4:	4b7b      	ldr	r3, [pc, #492]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	4a7a      	ldr	r2, [pc, #488]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	6213      	str	r3, [r2, #32]
 8007dc0:	e02d      	b.n	8007e1e <HAL_RCC_OscConfig+0x36e>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10c      	bne.n	8007de4 <HAL_RCC_OscConfig+0x334>
 8007dca:	4b76      	ldr	r3, [pc, #472]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	4a75      	ldr	r2, [pc, #468]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007dd0:	f023 0301 	bic.w	r3, r3, #1
 8007dd4:	6213      	str	r3, [r2, #32]
 8007dd6:	4b73      	ldr	r3, [pc, #460]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	4a72      	ldr	r2, [pc, #456]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007ddc:	f023 0304 	bic.w	r3, r3, #4
 8007de0:	6213      	str	r3, [r2, #32]
 8007de2:	e01c      	b.n	8007e1e <HAL_RCC_OscConfig+0x36e>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	d10c      	bne.n	8007e06 <HAL_RCC_OscConfig+0x356>
 8007dec:	4b6d      	ldr	r3, [pc, #436]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	4a6c      	ldr	r2, [pc, #432]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007df2:	f043 0304 	orr.w	r3, r3, #4
 8007df6:	6213      	str	r3, [r2, #32]
 8007df8:	4b6a      	ldr	r3, [pc, #424]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	4a69      	ldr	r2, [pc, #420]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	6213      	str	r3, [r2, #32]
 8007e04:	e00b      	b.n	8007e1e <HAL_RCC_OscConfig+0x36e>
 8007e06:	4b67      	ldr	r3, [pc, #412]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	4a66      	ldr	r2, [pc, #408]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	6213      	str	r3, [r2, #32]
 8007e12:	4b64      	ldr	r3, [pc, #400]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	4a63      	ldr	r2, [pc, #396]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e18:	f023 0304 	bic.w	r3, r3, #4
 8007e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d015      	beq.n	8007e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e26:	f7fb fcb3 	bl	8003790 <HAL_GetTick>
 8007e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e2c:	e00a      	b.n	8007e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2e:	f7fb fcaf 	bl	8003790 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e0ab      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e44:	4b57      	ldr	r3, [pc, #348]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0ee      	beq.n	8007e2e <HAL_RCC_OscConfig+0x37e>
 8007e50:	e014      	b.n	8007e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e52:	f7fb fc9d 	bl	8003790 <HAL_GetTick>
 8007e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e58:	e00a      	b.n	8007e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e5a:	f7fb fc99 	bl	8003790 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e095      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e70:	4b4c      	ldr	r3, [pc, #304]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1ee      	bne.n	8007e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d105      	bne.n	8007e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e82:	4b48      	ldr	r3, [pc, #288]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	4a47      	ldr	r2, [pc, #284]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8081 	beq.w	8007f9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e98:	4b42      	ldr	r3, [pc, #264]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f003 030c 	and.w	r3, r3, #12
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d061      	beq.n	8007f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d146      	bne.n	8007f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eac:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <HAL_RCC_OscConfig+0x4fc>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb2:	f7fb fc6d 	bl	8003790 <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007eb8:	e008      	b.n	8007ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eba:	f7fb fc69 	bl	8003790 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e067      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ecc:	4b35      	ldr	r3, [pc, #212]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1f0      	bne.n	8007eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee0:	d108      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007ee2:	4b30      	ldr	r3, [pc, #192]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	492d      	ldr	r1, [pc, #180]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ef4:	4b2b      	ldr	r3, [pc, #172]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a19      	ldr	r1, [r3, #32]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	430b      	orrs	r3, r1
 8007f06:	4927      	ldr	r1, [pc, #156]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f0c:	4b27      	ldr	r3, [pc, #156]	; (8007fac <HAL_RCC_OscConfig+0x4fc>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f12:	f7fb fc3d 	bl	8003790 <HAL_GetTick>
 8007f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f18:	e008      	b.n	8007f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f1a:	f7fb fc39 	bl	8003790 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e037      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f2c:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d0f0      	beq.n	8007f1a <HAL_RCC_OscConfig+0x46a>
 8007f38:	e02f      	b.n	8007f9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f3a:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <HAL_RCC_OscConfig+0x4fc>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f40:	f7fb fc26 	bl	8003790 <HAL_GetTick>
 8007f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f46:	e008      	b.n	8007f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f48:	f7fb fc22 	bl	8003790 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e020      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f5a:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f0      	bne.n	8007f48 <HAL_RCC_OscConfig+0x498>
 8007f66:	e018      	b.n	8007f9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e013      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f74:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <HAL_RCC_OscConfig+0x4f4>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d106      	bne.n	8007f96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d001      	beq.n	8007f9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	40007000 	.word	0x40007000
 8007fac:	42420060 	.word	0x42420060

08007fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e0d0      	b.n	8008166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fc4:	4b6a      	ldr	r3, [pc, #424]	; (8008170 <HAL_RCC_ClockConfig+0x1c0>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d910      	bls.n	8007ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fd2:	4b67      	ldr	r3, [pc, #412]	; (8008170 <HAL_RCC_ClockConfig+0x1c0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f023 0207 	bic.w	r2, r3, #7
 8007fda:	4965      	ldr	r1, [pc, #404]	; (8008170 <HAL_RCC_ClockConfig+0x1c0>)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fe2:	4b63      	ldr	r3, [pc, #396]	; (8008170 <HAL_RCC_ClockConfig+0x1c0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0b8      	b.n	8008166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d020      	beq.n	8008042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d005      	beq.n	8008018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800800c:	4b59      	ldr	r3, [pc, #356]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	4a58      	ldr	r2, [pc, #352]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 8008012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0308 	and.w	r3, r3, #8
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008024:	4b53      	ldr	r3, [pc, #332]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4a52      	ldr	r2, [pc, #328]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 800802a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800802e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008030:	4b50      	ldr	r3, [pc, #320]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	494d      	ldr	r1, [pc, #308]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 800803e:	4313      	orrs	r3, r2
 8008040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d040      	beq.n	80080d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d107      	bne.n	8008066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008056:	4b47      	ldr	r3, [pc, #284]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d115      	bne.n	800808e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e07f      	b.n	8008166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b02      	cmp	r3, #2
 800806c:	d107      	bne.n	800807e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800806e:	4b41      	ldr	r3, [pc, #260]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e073      	b.n	8008166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800807e:	4b3d      	ldr	r3, [pc, #244]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e06b      	b.n	8008166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800808e:	4b39      	ldr	r3, [pc, #228]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f023 0203 	bic.w	r2, r3, #3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	4936      	ldr	r1, [pc, #216]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 800809c:	4313      	orrs	r3, r2
 800809e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080a0:	f7fb fb76 	bl	8003790 <HAL_GetTick>
 80080a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a6:	e00a      	b.n	80080be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080a8:	f7fb fb72 	bl	8003790 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e053      	b.n	8008166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080be:	4b2d      	ldr	r3, [pc, #180]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f003 020c 	and.w	r2, r3, #12
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d1eb      	bne.n	80080a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080d0:	4b27      	ldr	r3, [pc, #156]	; (8008170 <HAL_RCC_ClockConfig+0x1c0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d210      	bcs.n	8008100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080de:	4b24      	ldr	r3, [pc, #144]	; (8008170 <HAL_RCC_ClockConfig+0x1c0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f023 0207 	bic.w	r2, r3, #7
 80080e6:	4922      	ldr	r1, [pc, #136]	; (8008170 <HAL_RCC_ClockConfig+0x1c0>)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ee:	4b20      	ldr	r3, [pc, #128]	; (8008170 <HAL_RCC_ClockConfig+0x1c0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d001      	beq.n	8008100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e032      	b.n	8008166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d008      	beq.n	800811e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800810c:	4b19      	ldr	r3, [pc, #100]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	4916      	ldr	r1, [pc, #88]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 800811a:	4313      	orrs	r3, r2
 800811c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800812a:	4b12      	ldr	r3, [pc, #72]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	490e      	ldr	r1, [pc, #56]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 800813a:	4313      	orrs	r3, r2
 800813c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800813e:	f000 f821 	bl	8008184 <HAL_RCC_GetSysClockFreq>
 8008142:	4602      	mov	r2, r0
 8008144:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <HAL_RCC_ClockConfig+0x1c4>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	091b      	lsrs	r3, r3, #4
 800814a:	f003 030f 	and.w	r3, r3, #15
 800814e:	490a      	ldr	r1, [pc, #40]	; (8008178 <HAL_RCC_ClockConfig+0x1c8>)
 8008150:	5ccb      	ldrb	r3, [r1, r3]
 8008152:	fa22 f303 	lsr.w	r3, r2, r3
 8008156:	4a09      	ldr	r2, [pc, #36]	; (800817c <HAL_RCC_ClockConfig+0x1cc>)
 8008158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <HAL_RCC_ClockConfig+0x1d0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4618      	mov	r0, r3
 8008160:	f7fb fad4 	bl	800370c <HAL_InitTick>

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40022000 	.word	0x40022000
 8008174:	40021000 	.word	0x40021000
 8008178:	0800e890 	.word	0x0800e890
 800817c:	20000004 	.word	0x20000004
 8008180:	20000008 	.word	0x20000008

08008184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008184:	b490      	push	{r4, r7}
 8008186:	b08a      	sub	sp, #40	; 0x28
 8008188:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800818a:	4b2a      	ldr	r3, [pc, #168]	; (8008234 <HAL_RCC_GetSysClockFreq+0xb0>)
 800818c:	1d3c      	adds	r4, r7, #4
 800818e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008194:	f240 2301 	movw	r3, #513	; 0x201
 8008198:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	61fb      	str	r3, [r7, #28]
 800819e:	2300      	movs	r3, #0
 80081a0:	61bb      	str	r3, [r7, #24]
 80081a2:	2300      	movs	r3, #0
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80081ae:	4b22      	ldr	r3, [pc, #136]	; (8008238 <HAL_RCC_GetSysClockFreq+0xb4>)
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f003 030c 	and.w	r3, r3, #12
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	d002      	beq.n	80081c4 <HAL_RCC_GetSysClockFreq+0x40>
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d003      	beq.n	80081ca <HAL_RCC_GetSysClockFreq+0x46>
 80081c2:	e02d      	b.n	8008220 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80081c4:	4b1d      	ldr	r3, [pc, #116]	; (800823c <HAL_RCC_GetSysClockFreq+0xb8>)
 80081c6:	623b      	str	r3, [r7, #32]
      break;
 80081c8:	e02d      	b.n	8008226 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	0c9b      	lsrs	r3, r3, #18
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80081d6:	4413      	add	r3, r2
 80081d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80081dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d013      	beq.n	8008210 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80081e8:	4b13      	ldr	r3, [pc, #76]	; (8008238 <HAL_RCC_GetSysClockFreq+0xb4>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	0c5b      	lsrs	r3, r3, #17
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80081f6:	4413      	add	r3, r2
 80081f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80081fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	4a0e      	ldr	r2, [pc, #56]	; (800823c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008202:	fb02 f203 	mul.w	r2, r2, r3
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
 800820e:	e004      	b.n	800821a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	4a0b      	ldr	r2, [pc, #44]	; (8008240 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008214:	fb02 f303 	mul.w	r3, r2, r3
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	623b      	str	r3, [r7, #32]
      break;
 800821e:	e002      	b.n	8008226 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008220:	4b06      	ldr	r3, [pc, #24]	; (800823c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008222:	623b      	str	r3, [r7, #32]
      break;
 8008224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008226:	6a3b      	ldr	r3, [r7, #32]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3728      	adds	r7, #40	; 0x28
 800822c:	46bd      	mov	sp, r7
 800822e:	bc90      	pop	{r4, r7}
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	0800e838 	.word	0x0800e838
 8008238:	40021000 	.word	0x40021000
 800823c:	007a1200 	.word	0x007a1200
 8008240:	003d0900 	.word	0x003d0900

08008244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008248:	4b02      	ldr	r3, [pc, #8]	; (8008254 <HAL_RCC_GetHCLKFreq+0x10>)
 800824a:	681b      	ldr	r3, [r3, #0]
}
 800824c:	4618      	mov	r0, r3
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr
 8008254:	20000004 	.word	0x20000004

08008258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800825c:	f7ff fff2 	bl	8008244 <HAL_RCC_GetHCLKFreq>
 8008260:	4602      	mov	r2, r0
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	0a1b      	lsrs	r3, r3, #8
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	4903      	ldr	r1, [pc, #12]	; (800827c <HAL_RCC_GetPCLK1Freq+0x24>)
 800826e:	5ccb      	ldrb	r3, [r1, r3]
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008274:	4618      	mov	r0, r3
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40021000 	.word	0x40021000
 800827c:	0800e8a0 	.word	0x0800e8a0

08008280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008284:	f7ff ffde 	bl	8008244 <HAL_RCC_GetHCLKFreq>
 8008288:	4602      	mov	r2, r0
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	0adb      	lsrs	r3, r3, #11
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	4903      	ldr	r1, [pc, #12]	; (80082a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008296:	5ccb      	ldrb	r3, [r1, r3]
 8008298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800829c:	4618      	mov	r0, r3
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	40021000 	.word	0x40021000
 80082a4:	0800e8a0 	.word	0x0800e8a0

080082a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80082b0:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <RCC_Delay+0x34>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a0a      	ldr	r2, [pc, #40]	; (80082e0 <RCC_Delay+0x38>)
 80082b6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ba:	0a5b      	lsrs	r3, r3, #9
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	fb02 f303 	mul.w	r3, r2, r3
 80082c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80082c4:	bf00      	nop
  }
  while (Delay --);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	1e5a      	subs	r2, r3, #1
 80082ca:	60fa      	str	r2, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f9      	bne.n	80082c4 <RCC_Delay+0x1c>
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr
 80082dc:	20000004 	.word	0x20000004
 80082e0:	10624dd3 	.word	0x10624dd3

080082e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	613b      	str	r3, [r7, #16]
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d07d      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008300:	2300      	movs	r3, #0
 8008302:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008304:	4b4f      	ldr	r3, [pc, #316]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10d      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008310:	4b4c      	ldr	r3, [pc, #304]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	4a4b      	ldr	r2, [pc, #300]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800831a:	61d3      	str	r3, [r2, #28]
 800831c:	4b49      	ldr	r3, [pc, #292]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008324:	60bb      	str	r3, [r7, #8]
 8008326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008328:	2301      	movs	r3, #1
 800832a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800832c:	4b46      	ldr	r3, [pc, #280]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008334:	2b00      	cmp	r3, #0
 8008336:	d118      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008338:	4b43      	ldr	r3, [pc, #268]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a42      	ldr	r2, [pc, #264]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800833e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008344:	f7fb fa24 	bl	8003790 <HAL_GetTick>
 8008348:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800834a:	e008      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800834c:	f7fb fa20 	bl	8003790 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	; 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e06d      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800835e:	4b3a      	ldr	r3, [pc, #232]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0f0      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800836a:	4b36      	ldr	r3, [pc, #216]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008372:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d02e      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	429a      	cmp	r2, r3
 8008386:	d027      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008388:	4b2e      	ldr	r3, [pc, #184]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008390:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008392:	4b2e      	ldr	r3, [pc, #184]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008394:	2201      	movs	r2, #1
 8008396:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008398:	4b2c      	ldr	r3, [pc, #176]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800839e:	4a29      	ldr	r2, [pc, #164]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d014      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083ae:	f7fb f9ef 	bl	8003790 <HAL_GetTick>
 80083b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b4:	e00a      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b6:	f7fb f9eb 	bl	8003790 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d901      	bls.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e036      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083cc:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0ee      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083d8:	4b1a      	ldr	r3, [pc, #104]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	4917      	ldr	r1, [pc, #92]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d105      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083f0:	4b14      	ldr	r3, [pc, #80]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	4a13      	ldr	r2, [pc, #76]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008408:	4b0e      	ldr	r3, [pc, #56]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	490b      	ldr	r1, [pc, #44]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008416:	4313      	orrs	r3, r2
 8008418:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008426:	4b07      	ldr	r3, [pc, #28]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	4904      	ldr	r1, [pc, #16]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008434:	4313      	orrs	r3, r2
 8008436:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	40021000 	.word	0x40021000
 8008448:	40007000 	.word	0x40007000
 800844c:	42420440 	.word	0x42420440

08008450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e076      	b.n	8008550 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d108      	bne.n	800847c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008472:	d009      	beq.n	8008488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	61da      	str	r2, [r3, #28]
 800847a:	e005      	b.n	8008488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fa fde4 	bl	8003070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084d0:	431a      	orrs	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084f8:	431a      	orrs	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850c:	ea42 0103 	orr.w	r1, r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	0c1a      	lsrs	r2, r3, #16
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f002 0204 	and.w	r2, r2, #4
 800852e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	69da      	ldr	r2, [r3, #28]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800853e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_SPI_Transmit+0x22>
 8008576:	2302      	movs	r3, #2
 8008578:	e126      	b.n	80087c8 <HAL_SPI_Transmit+0x270>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008582:	f7fb f905 	bl	8003790 <HAL_GetTick>
 8008586:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	d002      	beq.n	800859e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008598:	2302      	movs	r3, #2
 800859a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800859c:	e10b      	b.n	80087b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <HAL_SPI_Transmit+0x52>
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085ae:	e102      	b.n	80087b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2203      	movs	r2, #3
 80085b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085f6:	d10f      	bne.n	8008618 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008606:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008616:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d007      	beq.n	8008636 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800863e:	d14b      	bne.n	80086d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <HAL_SPI_Transmit+0xf6>
 8008648:	8afb      	ldrh	r3, [r7, #22]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d13e      	bne.n	80086cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	881a      	ldrh	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	1c9a      	adds	r2, r3, #2
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008668:	b29b      	uxth	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008672:	e02b      	b.n	80086cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	2b02      	cmp	r3, #2
 8008680:	d112      	bne.n	80086a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	881a      	ldrh	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	1c9a      	adds	r2, r3, #2
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80086a6:	e011      	b.n	80086cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086a8:	f7fb f872 	bl	8003790 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d803      	bhi.n	80086c0 <HAL_SPI_Transmit+0x168>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d102      	bne.n	80086c6 <HAL_SPI_Transmit+0x16e>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086ca:	e074      	b.n	80087b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1ce      	bne.n	8008674 <HAL_SPI_Transmit+0x11c>
 80086d6:	e04c      	b.n	8008772 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_SPI_Transmit+0x18e>
 80086e0:	8afb      	ldrh	r3, [r7, #22]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d140      	bne.n	8008768 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	7812      	ldrb	r2, [r2, #0]
 80086f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008702:	b29b      	uxth	r3, r3
 8008704:	3b01      	subs	r3, #1
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800870c:	e02c      	b.n	8008768 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b02      	cmp	r3, #2
 800871a:	d113      	bne.n	8008744 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	330c      	adds	r3, #12
 8008726:	7812      	ldrb	r2, [r2, #0]
 8008728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	86da      	strh	r2, [r3, #54]	; 0x36
 8008742:	e011      	b.n	8008768 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008744:	f7fb f824 	bl	8003790 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d803      	bhi.n	800875c <HAL_SPI_Transmit+0x204>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875a:	d102      	bne.n	8008762 <HAL_SPI_Transmit+0x20a>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008766:	e026      	b.n	80087b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876c:	b29b      	uxth	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1cd      	bne.n	800870e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fb64 	bl	8008e44 <SPI_EndRxTxTransaction>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008790:	2300      	movs	r3, #0
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	77fb      	strb	r3, [r7, #31]
 80087b2:	e000      	b.n	80087b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80087b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3720      	adds	r7, #32
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08c      	sub	sp, #48	; 0x30
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80087de:	2301      	movs	r3, #1
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d101      	bne.n	80087f6 <HAL_SPI_TransmitReceive+0x26>
 80087f2:	2302      	movs	r3, #2
 80087f4:	e18a      	b.n	8008b0c <HAL_SPI_TransmitReceive+0x33c>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087fe:	f7fa ffc7 	bl	8003790 <HAL_GetTick>
 8008802:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008814:	887b      	ldrh	r3, [r7, #2]
 8008816:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800881c:	2b01      	cmp	r3, #1
 800881e:	d00f      	beq.n	8008840 <HAL_SPI_TransmitReceive+0x70>
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008826:	d107      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d103      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x68>
 8008830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008834:	2b04      	cmp	r3, #4
 8008836:	d003      	beq.n	8008840 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008838:	2302      	movs	r3, #2
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800883e:	e15b      	b.n	8008af8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d005      	beq.n	8008852 <HAL_SPI_TransmitReceive+0x82>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <HAL_SPI_TransmitReceive+0x82>
 800884c:	887b      	ldrh	r3, [r7, #2]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008858:	e14e      	b.n	8008af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b04      	cmp	r3, #4
 8008864:	d003      	beq.n	800886e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2205      	movs	r2, #5
 800886a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	887a      	ldrh	r2, [r7, #2]
 800887e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	887a      	ldrh	r2, [r7, #2]
 8008884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	887a      	ldrh	r2, [r7, #2]
 8008890:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	887a      	ldrh	r2, [r7, #2]
 8008896:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ae:	2b40      	cmp	r3, #64	; 0x40
 80088b0:	d007      	beq.n	80088c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ca:	d178      	bne.n	80089be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <HAL_SPI_TransmitReceive+0x10a>
 80088d4:	8b7b      	ldrh	r3, [r7, #26]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d166      	bne.n	80089a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	881a      	ldrh	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	1c9a      	adds	r2, r3, #2
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088fe:	e053      	b.n	80089a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b02      	cmp	r3, #2
 800890c:	d11b      	bne.n	8008946 <HAL_SPI_TransmitReceive+0x176>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d016      	beq.n	8008946 <HAL_SPI_TransmitReceive+0x176>
 8008918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891a:	2b01      	cmp	r3, #1
 800891c:	d113      	bne.n	8008946 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	881a      	ldrh	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	1c9a      	adds	r2, r3, #2
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008938:	b29b      	uxth	r3, r3
 800893a:	3b01      	subs	r3, #1
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b01      	cmp	r3, #1
 8008952:	d119      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x1b8>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d014      	beq.n	8008988 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	b292      	uxth	r2, r2
 800896a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	1c9a      	adds	r2, r3, #2
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800897a:	b29b      	uxth	r3, r3
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008984:	2301      	movs	r3, #1
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008988:	f7fa ff02 	bl	8003790 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008994:	429a      	cmp	r2, r3
 8008996:	d807      	bhi.n	80089a8 <HAL_SPI_TransmitReceive+0x1d8>
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d003      	beq.n	80089a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089a6:	e0a7      	b.n	8008af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1a6      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x130>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1a1      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x130>
 80089bc:	e07c      	b.n	8008ab8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_SPI_TransmitReceive+0x1fc>
 80089c6:	8b7b      	ldrh	r3, [r7, #26]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d16b      	bne.n	8008aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	330c      	adds	r3, #12
 80089d6:	7812      	ldrb	r2, [r2, #0]
 80089d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089f2:	e057      	b.n	8008aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d11c      	bne.n	8008a3c <HAL_SPI_TransmitReceive+0x26c>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d017      	beq.n	8008a3c <HAL_SPI_TransmitReceive+0x26c>
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d114      	bne.n	8008a3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	330c      	adds	r3, #12
 8008a1c:	7812      	ldrb	r2, [r2, #0]
 8008a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	3b01      	subs	r3, #1
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d119      	bne.n	8008a7e <HAL_SPI_TransmitReceive+0x2ae>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d014      	beq.n	8008a7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a7e:	f7fa fe87 	bl	8003790 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d803      	bhi.n	8008a96 <HAL_SPI_TransmitReceive+0x2c6>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a94:	d102      	bne.n	8008a9c <HAL_SPI_TransmitReceive+0x2cc>
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008aa2:	e029      	b.n	8008af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1a2      	bne.n	80089f4 <HAL_SPI_TransmitReceive+0x224>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d19d      	bne.n	80089f4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 f9c1 	bl	8008e44 <SPI_EndRxTxTransaction>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d006      	beq.n	8008ad6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008ad4:	e010      	b.n	8008af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10b      	bne.n	8008af6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	e000      	b.n	8008af8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3730      	adds	r7, #48	; 0x30
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	099b      	lsrs	r3, r3, #6
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10f      	bne.n	8008b58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	099b      	lsrs	r3, r3, #6
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d004      	beq.n	8008b58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
    return;
 8008b56:	e0be      	b.n	8008cd6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	085b      	lsrs	r3, r3, #1
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <HAL_SPI_IRQHandler+0x66>
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	09db      	lsrs	r3, r3, #7
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4798      	blx	r3
    return;
 8008b78:	e0ad      	b.n	8008cd6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	095b      	lsrs	r3, r3, #5
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d106      	bne.n	8008b94 <HAL_SPI_IRQHandler+0x80>
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	099b      	lsrs	r3, r3, #6
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80a1 	beq.w	8008cd6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 809a 	beq.w	8008cd6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	099b      	lsrs	r3, r3, #6
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d023      	beq.n	8008bf6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d011      	beq.n	8008bde <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbe:	f043 0204 	orr.w	r2, r3, #4
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	e00b      	b.n	8008bf6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bde:	2300      	movs	r3, #0
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	693b      	ldr	r3, [r7, #16]
        return;
 8008bf4:	e06f      	b.n	8008cd6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d014      	beq.n	8008c2c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	f043 0201 	orr.w	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d04f      	beq.n	8008cd4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c42:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d104      	bne.n	8008c60 <HAL_SPI_IRQHandler+0x14c>
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d034      	beq.n	8008cca <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0203 	bic.w	r2, r2, #3
 8008c6e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d011      	beq.n	8008c9c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7c:	4a17      	ldr	r2, [pc, #92]	; (8008cdc <HAL_SPI_IRQHandler+0x1c8>)
 8008c7e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fb fed3 	bl	8004a30 <HAL_DMA_Abort_IT>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d005      	beq.n	8008c9c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d016      	beq.n	8008cd2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca8:	4a0c      	ldr	r2, [pc, #48]	; (8008cdc <HAL_SPI_IRQHandler+0x1c8>)
 8008caa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fb febd 	bl	8004a30 <HAL_DMA_Abort_IT>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00a      	beq.n	8008cd2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008cc8:	e003      	b.n	8008cd2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f808 	bl	8008ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008cd0:	e000      	b.n	8008cd4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8008cd2:	bf00      	nop
    return;
 8008cd4:	bf00      	nop
  }
}
 8008cd6:	3720      	adds	r7, #32
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	08008d0d 	.word	0x08008d0d

08008ce0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr

08008cf2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d00:	b2db      	uxtb	r3, r3
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr

08008d0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff ffda 	bl	8008ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	4613      	mov	r3, r2
 8008d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d44:	f7fa fd24 	bl	8003790 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	1a9b      	subs	r3, r3, r2
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	4413      	add	r3, r2
 8008d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d54:	f7fa fd1c 	bl	8003790 <HAL_GetTick>
 8008d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d5a:	4b39      	ldr	r3, [pc, #228]	; (8008e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	015b      	lsls	r3, r3, #5
 8008d60:	0d1b      	lsrs	r3, r3, #20
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	fb02 f303 	mul.w	r3, r2, r3
 8008d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d6a:	e054      	b.n	8008e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d050      	beq.n	8008e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d74:	f7fa fd0c 	bl	8003790 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d902      	bls.n	8008d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d13d      	bne.n	8008e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008da2:	d111      	bne.n	8008dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dac:	d004      	beq.n	8008db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008db6:	d107      	bne.n	8008dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd0:	d10f      	bne.n	8008df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e017      	b.n	8008e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	bf0c      	ite	eq
 8008e26:	2301      	moveq	r3, #1
 8008e28:	2300      	movne	r3, #0
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d19b      	bne.n	8008d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000004 	.word	0x20000004

08008e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2200      	movs	r2, #0
 8008e58:	2180      	movs	r1, #128	; 0x80
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7ff ff6a 	bl	8008d34 <SPI_WaitFlagStateUntilTimeout>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e6a:	f043 0220 	orr.w	r2, r3, #32
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e000      	b.n	8008e78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e041      	b.n	8008f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7fa f944 	bl	8003134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f000 fc6c 	bl	800979c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d001      	beq.n	8008f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e03a      	b.n	8008fae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0201 	orr.w	r2, r2, #1
 8008f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <HAL_TIM_Base_Start_IT+0x98>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00e      	beq.n	8008f78 <HAL_TIM_Base_Start_IT+0x58>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f62:	d009      	beq.n	8008f78 <HAL_TIM_Base_Start_IT+0x58>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a14      	ldr	r2, [pc, #80]	; (8008fbc <HAL_TIM_Base_Start_IT+0x9c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d004      	beq.n	8008f78 <HAL_TIM_Base_Start_IT+0x58>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d111      	bne.n	8008f9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b06      	cmp	r3, #6
 8008f88:	d010      	beq.n	8008fac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0201 	orr.w	r2, r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f9a:	e007      	b.n	8008fac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 0201 	orr.w	r2, r2, #1
 8008faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr
 8008fb8:	40012c00 	.word	0x40012c00
 8008fbc:	40000400 	.word	0x40000400
 8008fc0:	40000800 	.word	0x40000800

08008fc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e041      	b.n	800905a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f839 	bl	8009062 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3304      	adds	r3, #4
 8009000:	4619      	mov	r1, r3
 8009002:	4610      	mov	r0, r2
 8009004:	f000 fbca 	bl	800979c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr

08009074 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <HAL_TIM_IC_Start_IT+0x1a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800908a:	b2db      	uxtb	r3, r3
 800908c:	e013      	b.n	80090b6 <HAL_TIM_IC_Start_IT+0x42>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b04      	cmp	r3, #4
 8009092:	d104      	bne.n	800909e <HAL_TIM_IC_Start_IT+0x2a>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800909a:	b2db      	uxtb	r3, r3
 800909c:	e00b      	b.n	80090b6 <HAL_TIM_IC_Start_IT+0x42>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d104      	bne.n	80090ae <HAL_TIM_IC_Start_IT+0x3a>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	e003      	b.n	80090b6 <HAL_TIM_IC_Start_IT+0x42>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <HAL_TIM_IC_Start_IT+0x54>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	e013      	b.n	80090f0 <HAL_TIM_IC_Start_IT+0x7c>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	d104      	bne.n	80090d8 <HAL_TIM_IC_Start_IT+0x64>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	e00b      	b.n	80090f0 <HAL_TIM_IC_Start_IT+0x7c>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b08      	cmp	r3, #8
 80090dc:	d104      	bne.n	80090e8 <HAL_TIM_IC_Start_IT+0x74>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	e003      	b.n	80090f0 <HAL_TIM_IC_Start_IT+0x7c>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d102      	bne.n	80090fe <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d001      	beq.n	8009102 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e0b3      	b.n	800926a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d104      	bne.n	8009112 <HAL_TIM_IC_Start_IT+0x9e>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009110:	e013      	b.n	800913a <HAL_TIM_IC_Start_IT+0xc6>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b04      	cmp	r3, #4
 8009116:	d104      	bne.n	8009122 <HAL_TIM_IC_Start_IT+0xae>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009120:	e00b      	b.n	800913a <HAL_TIM_IC_Start_IT+0xc6>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b08      	cmp	r3, #8
 8009126:	d104      	bne.n	8009132 <HAL_TIM_IC_Start_IT+0xbe>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009130:	e003      	b.n	800913a <HAL_TIM_IC_Start_IT+0xc6>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2202      	movs	r2, #2
 8009136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d104      	bne.n	800914a <HAL_TIM_IC_Start_IT+0xd6>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009148:	e013      	b.n	8009172 <HAL_TIM_IC_Start_IT+0xfe>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b04      	cmp	r3, #4
 800914e:	d104      	bne.n	800915a <HAL_TIM_IC_Start_IT+0xe6>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009158:	e00b      	b.n	8009172 <HAL_TIM_IC_Start_IT+0xfe>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b08      	cmp	r3, #8
 800915e:	d104      	bne.n	800916a <HAL_TIM_IC_Start_IT+0xf6>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009168:	e003      	b.n	8009172 <HAL_TIM_IC_Start_IT+0xfe>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2202      	movs	r2, #2
 800916e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b0c      	cmp	r3, #12
 8009176:	d841      	bhi.n	80091fc <HAL_TIM_IC_Start_IT+0x188>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <HAL_TIM_IC_Start_IT+0x10c>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	080091b5 	.word	0x080091b5
 8009184:	080091fd 	.word	0x080091fd
 8009188:	080091fd 	.word	0x080091fd
 800918c:	080091fd 	.word	0x080091fd
 8009190:	080091c7 	.word	0x080091c7
 8009194:	080091fd 	.word	0x080091fd
 8009198:	080091fd 	.word	0x080091fd
 800919c:	080091fd 	.word	0x080091fd
 80091a0:	080091d9 	.word	0x080091d9
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	080091fd 	.word	0x080091fd
 80091ac:	080091fd 	.word	0x080091fd
 80091b0:	080091eb 	.word	0x080091eb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0202 	orr.w	r2, r2, #2
 80091c2:	60da      	str	r2, [r3, #12]
      break;
 80091c4:	e01b      	b.n	80091fe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f042 0204 	orr.w	r2, r2, #4
 80091d4:	60da      	str	r2, [r3, #12]
      break;
 80091d6:	e012      	b.n	80091fe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0208 	orr.w	r2, r2, #8
 80091e6:	60da      	str	r2, [r3, #12]
      break;
 80091e8:	e009      	b.n	80091fe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f042 0210 	orr.w	r2, r2, #16
 80091f8:	60da      	str	r2, [r3, #12]
      break;
 80091fa:	e000      	b.n	80091fe <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80091fc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2201      	movs	r2, #1
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fccd 	bl	8009ba6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a18      	ldr	r2, [pc, #96]	; (8009274 <HAL_TIM_IC_Start_IT+0x200>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00e      	beq.n	8009234 <HAL_TIM_IC_Start_IT+0x1c0>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921e:	d009      	beq.n	8009234 <HAL_TIM_IC_Start_IT+0x1c0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a14      	ldr	r2, [pc, #80]	; (8009278 <HAL_TIM_IC_Start_IT+0x204>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_TIM_IC_Start_IT+0x1c0>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a13      	ldr	r2, [pc, #76]	; (800927c <HAL_TIM_IC_Start_IT+0x208>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d111      	bne.n	8009258 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b06      	cmp	r3, #6
 8009244:	d010      	beq.n	8009268 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009256:	e007      	b.n	8009268 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0201 	orr.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40012c00 	.word	0x40012c00
 8009278:	40000400 	.word	0x40000400
 800927c:	40000800 	.word	0x40000800

08009280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b02      	cmp	r3, #2
 8009294:	d122      	bne.n	80092dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d11b      	bne.n	80092dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0202 	mvn.w	r2, #2
 80092ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa4e 	bl	8009764 <HAL_TIM_IC_CaptureCallback>
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fa41 	bl	8009752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fa50 	bl	8009776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d122      	bne.n	8009330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b04      	cmp	r3, #4
 80092f6:	d11b      	bne.n	8009330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0204 	mvn.w	r2, #4
 8009300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa24 	bl	8009764 <HAL_TIM_IC_CaptureCallback>
 800931c:	e005      	b.n	800932a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa17 	bl	8009752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fa26 	bl	8009776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0308 	and.w	r3, r3, #8
 800933a:	2b08      	cmp	r3, #8
 800933c:	d122      	bne.n	8009384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b08      	cmp	r3, #8
 800934a:	d11b      	bne.n	8009384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f06f 0208 	mvn.w	r2, #8
 8009354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2204      	movs	r2, #4
 800935a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f9fa 	bl	8009764 <HAL_TIM_IC_CaptureCallback>
 8009370:	e005      	b.n	800937e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9ed 	bl	8009752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f9fc 	bl	8009776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0310 	and.w	r3, r3, #16
 800938e:	2b10      	cmp	r3, #16
 8009390:	d122      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b10      	cmp	r3, #16
 800939e:	d11b      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0210 	mvn.w	r2, #16
 80093a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2208      	movs	r2, #8
 80093ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f9d0 	bl	8009764 <HAL_TIM_IC_CaptureCallback>
 80093c4:	e005      	b.n	80093d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9c3 	bl	8009752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f9d2 	bl	8009776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d10e      	bne.n	8009404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d107      	bne.n	8009404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0201 	mvn.w	r2, #1
 80093fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f99e 	bl	8009740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940e:	2b80      	cmp	r3, #128	; 0x80
 8009410:	d10e      	bne.n	8009430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941c:	2b80      	cmp	r3, #128	; 0x80
 800941e:	d107      	bne.n	8009430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fc47 	bl	8009cbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943a:	2b40      	cmp	r3, #64	; 0x40
 800943c:	d10e      	bne.n	800945c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009448:	2b40      	cmp	r3, #64	; 0x40
 800944a:	d107      	bne.n	800945c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f996 	bl	8009788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b20      	cmp	r3, #32
 8009468:	d10e      	bne.n	8009488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f003 0320 	and.w	r3, r3, #32
 8009474:	2b20      	cmp	r3, #32
 8009476:	d107      	bne.n	8009488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f06f 0220 	mvn.w	r2, #32
 8009480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fc12 	bl	8009cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_TIM_IC_ConfigChannel+0x1a>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e082      	b.n	80095b0 <HAL_TIM_IC_ConfigChannel+0x120>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d11b      	bne.n	80094f0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	6819      	ldr	r1, [r3, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f000 f9ca 	bl	8009860 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 020c 	bic.w	r2, r2, #12
 80094da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6999      	ldr	r1, [r3, #24]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	619a      	str	r2, [r3, #24]
 80094ee:	e05a      	b.n	80095a6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d11c      	bne.n	8009530 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6819      	ldr	r1, [r3, #0]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f000 fa33 	bl	8009970 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699a      	ldr	r2, [r3, #24]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009518:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6999      	ldr	r1, [r3, #24]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	021a      	lsls	r2, r3, #8
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	619a      	str	r2, [r3, #24]
 800952e:	e03a      	b.n	80095a6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b08      	cmp	r3, #8
 8009534:	d11b      	bne.n	800956e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6819      	ldr	r1, [r3, #0]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f000 fa7e 	bl	8009a46 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	69da      	ldr	r2, [r3, #28]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 020c 	bic.w	r2, r2, #12
 8009558:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69d9      	ldr	r1, [r3, #28]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	430a      	orrs	r2, r1
 800956a:	61da      	str	r2, [r3, #28]
 800956c:	e01b      	b.n	80095a6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	6819      	ldr	r1, [r3, #0]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f000 fa9d 	bl	8009abc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009590:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69d9      	ldr	r1, [r3, #28]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	021a      	lsls	r2, r3, #8
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d101      	bne.n	80095d0 <HAL_TIM_ConfigClockSource+0x18>
 80095cc:	2302      	movs	r3, #2
 80095ce:	e0b3      	b.n	8009738 <HAL_TIM_ConfigClockSource+0x180>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009608:	d03e      	beq.n	8009688 <HAL_TIM_ConfigClockSource+0xd0>
 800960a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800960e:	f200 8087 	bhi.w	8009720 <HAL_TIM_ConfigClockSource+0x168>
 8009612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009616:	f000 8085 	beq.w	8009724 <HAL_TIM_ConfigClockSource+0x16c>
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961e:	d87f      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x168>
 8009620:	2b70      	cmp	r3, #112	; 0x70
 8009622:	d01a      	beq.n	800965a <HAL_TIM_ConfigClockSource+0xa2>
 8009624:	2b70      	cmp	r3, #112	; 0x70
 8009626:	d87b      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x168>
 8009628:	2b60      	cmp	r3, #96	; 0x60
 800962a:	d050      	beq.n	80096ce <HAL_TIM_ConfigClockSource+0x116>
 800962c:	2b60      	cmp	r3, #96	; 0x60
 800962e:	d877      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x168>
 8009630:	2b50      	cmp	r3, #80	; 0x50
 8009632:	d03c      	beq.n	80096ae <HAL_TIM_ConfigClockSource+0xf6>
 8009634:	2b50      	cmp	r3, #80	; 0x50
 8009636:	d873      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x168>
 8009638:	2b40      	cmp	r3, #64	; 0x40
 800963a:	d058      	beq.n	80096ee <HAL_TIM_ConfigClockSource+0x136>
 800963c:	2b40      	cmp	r3, #64	; 0x40
 800963e:	d86f      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x168>
 8009640:	2b30      	cmp	r3, #48	; 0x30
 8009642:	d064      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x156>
 8009644:	2b30      	cmp	r3, #48	; 0x30
 8009646:	d86b      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x168>
 8009648:	2b20      	cmp	r3, #32
 800964a:	d060      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x156>
 800964c:	2b20      	cmp	r3, #32
 800964e:	d867      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x168>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d05c      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x156>
 8009654:	2b10      	cmp	r3, #16
 8009656:	d05a      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009658:	e062      	b.n	8009720 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	6899      	ldr	r1, [r3, #8]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f000 fa7d 	bl	8009b68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800967c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	609a      	str	r2, [r3, #8]
      break;
 8009686:	e04e      	b.n	8009726 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	6899      	ldr	r1, [r3, #8]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f000 fa66 	bl	8009b68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689a      	ldr	r2, [r3, #8]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096aa:	609a      	str	r2, [r3, #8]
      break;
 80096ac:	e03b      	b.n	8009726 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	6859      	ldr	r1, [r3, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	461a      	mov	r2, r3
 80096bc:	f000 f92a 	bl	8009914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2150      	movs	r1, #80	; 0x50
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fa34 	bl	8009b34 <TIM_ITRx_SetConfig>
      break;
 80096cc:	e02b      	b.n	8009726 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	6859      	ldr	r1, [r3, #4]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	461a      	mov	r2, r3
 80096dc:	f000 f984 	bl	80099e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2160      	movs	r1, #96	; 0x60
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fa24 	bl	8009b34 <TIM_ITRx_SetConfig>
      break;
 80096ec:	e01b      	b.n	8009726 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	6859      	ldr	r1, [r3, #4]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	461a      	mov	r2, r3
 80096fc:	f000 f90a 	bl	8009914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2140      	movs	r1, #64	; 0x40
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fa14 	bl	8009b34 <TIM_ITRx_SetConfig>
      break;
 800970c:	e00b      	b.n	8009726 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4619      	mov	r1, r3
 8009718:	4610      	mov	r0, r2
 800971a:	f000 fa0b 	bl	8009b34 <TIM_ITRx_SetConfig>
        break;
 800971e:	e002      	b.n	8009726 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009720:	bf00      	nop
 8009722:	e000      	b.n	8009726 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009724:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	bc80      	pop	{r7}
 8009750:	4770      	bx	lr

08009752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	bc80      	pop	{r7}
 8009762:	4770      	bx	lr

08009764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	bc80      	pop	{r7}
 8009774:	4770      	bx	lr

08009776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	bc80      	pop	{r7}
 8009786:	4770      	bx	lr

08009788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
	...

0800979c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a29      	ldr	r2, [pc, #164]	; (8009854 <TIM_Base_SetConfig+0xb8>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d00b      	beq.n	80097cc <TIM_Base_SetConfig+0x30>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ba:	d007      	beq.n	80097cc <TIM_Base_SetConfig+0x30>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a26      	ldr	r2, [pc, #152]	; (8009858 <TIM_Base_SetConfig+0xbc>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d003      	beq.n	80097cc <TIM_Base_SetConfig+0x30>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a25      	ldr	r2, [pc, #148]	; (800985c <TIM_Base_SetConfig+0xc0>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d108      	bne.n	80097de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4313      	orrs	r3, r2
 80097dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a1c      	ldr	r2, [pc, #112]	; (8009854 <TIM_Base_SetConfig+0xb8>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d00b      	beq.n	80097fe <TIM_Base_SetConfig+0x62>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ec:	d007      	beq.n	80097fe <TIM_Base_SetConfig+0x62>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a19      	ldr	r2, [pc, #100]	; (8009858 <TIM_Base_SetConfig+0xbc>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d003      	beq.n	80097fe <TIM_Base_SetConfig+0x62>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a18      	ldr	r2, [pc, #96]	; (800985c <TIM_Base_SetConfig+0xc0>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d108      	bne.n	8009810 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	4313      	orrs	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	4313      	orrs	r3, r2
 800981c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	689a      	ldr	r2, [r3, #8]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a07      	ldr	r2, [pc, #28]	; (8009854 <TIM_Base_SetConfig+0xb8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d103      	bne.n	8009844 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	615a      	str	r2, [r3, #20]
}
 800984a:	bf00      	nop
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	bc80      	pop	{r7}
 8009852:	4770      	bx	lr
 8009854:	40012c00 	.word	0x40012c00
 8009858:	40000400 	.word	0x40000400
 800985c:	40000800 	.word	0x40000800

08009860 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	f023 0201 	bic.w	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6a1b      	ldr	r3, [r3, #32]
 8009884:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4a1f      	ldr	r2, [pc, #124]	; (8009908 <TIM_TI1_SetConfig+0xa8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00b      	beq.n	80098a6 <TIM_TI1_SetConfig+0x46>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009894:	d007      	beq.n	80098a6 <TIM_TI1_SetConfig+0x46>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4a1c      	ldr	r2, [pc, #112]	; (800990c <TIM_TI1_SetConfig+0xac>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d003      	beq.n	80098a6 <TIM_TI1_SetConfig+0x46>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	4a1b      	ldr	r2, [pc, #108]	; (8009910 <TIM_TI1_SetConfig+0xb0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d101      	bne.n	80098aa <TIM_TI1_SetConfig+0x4a>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e000      	b.n	80098ac <TIM_TI1_SetConfig+0x4c>
 80098aa:	2300      	movs	r3, #0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d008      	beq.n	80098c2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f023 0303 	bic.w	r3, r3, #3
 80098b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4313      	orrs	r3, r2
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e003      	b.n	80098ca <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f043 0301 	orr.w	r3, r3, #1
 80098c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f023 030a 	bic.w	r3, r3, #10
 80098e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f003 030a 	and.w	r3, r3, #10
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	621a      	str	r2, [r3, #32]
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr
 8009908:	40012c00 	.word	0x40012c00
 800990c:	40000400 	.word	0x40000400
 8009910:	40000800 	.word	0x40000800

08009914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	f023 0201 	bic.w	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800993e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f023 030a 	bic.w	r3, r3, #10
 8009950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr

08009970 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	f023 0210 	bic.w	r2, r3, #16
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800999c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	021b      	lsls	r3, r3, #8
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	031b      	lsls	r3, r3, #12
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	011b      	lsls	r3, r3, #4
 80099c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	621a      	str	r2, [r3, #32]
}
 80099de:	bf00      	nop
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bc80      	pop	{r7}
 80099e6:	4770      	bx	lr

080099e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	f023 0210 	bic.w	r2, r3, #16
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	031b      	lsls	r3, r3, #12
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	011b      	lsls	r3, r3, #4
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	621a      	str	r2, [r3, #32]
}
 8009a3c:	bf00      	nop
 8009a3e:	371c      	adds	r7, #28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bc80      	pop	{r7}
 8009a44:	4770      	bx	lr

08009a46 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b087      	sub	sp, #28
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	607a      	str	r2, [r7, #4]
 8009a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f023 0303 	bic.w	r3, r3, #3
 8009a72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	011b      	lsls	r3, r3, #4
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	621a      	str	r2, [r3, #32]
}
 8009ab2:	bf00      	nop
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bc80      	pop	{r7}
 8009aba:	4770      	bx	lr

08009abc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009afa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	031b      	lsls	r3, r3, #12
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	031b      	lsls	r3, r3, #12
 8009b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	621a      	str	r2, [r3, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bc80      	pop	{r7}
 8009b32:	4770      	bx	lr

08009b34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	f043 0307 	orr.w	r3, r3, #7
 8009b56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	609a      	str	r2, [r3, #8]
}
 8009b5e:	bf00      	nop
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	021a      	lsls	r2, r3, #8
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	609a      	str	r2, [r3, #8]
}
 8009b9c:	bf00      	nop
 8009b9e:	371c      	adds	r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr

08009ba6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b087      	sub	sp, #28
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	f003 031f 	and.w	r3, r3, #31
 8009bb8:	2201      	movs	r2, #1
 8009bba:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a1a      	ldr	r2, [r3, #32]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	43db      	mvns	r3, r3
 8009bc8:	401a      	ands	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a1a      	ldr	r2, [r3, #32]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	f003 031f 	and.w	r3, r3, #31
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	fa01 f303 	lsl.w	r3, r1, r3
 8009bde:	431a      	orrs	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	621a      	str	r2, [r3, #32]
}
 8009be4:	bf00      	nop
 8009be6:	371c      	adds	r7, #28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bc80      	pop	{r7}
 8009bec:	4770      	bx	lr
	...

08009bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c04:	2302      	movs	r3, #2
 8009c06:	e046      	b.n	8009c96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a16      	ldr	r2, [pc, #88]	; (8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d00e      	beq.n	8009c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c54:	d009      	beq.n	8009c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a12      	ldr	r2, [pc, #72]	; (8009ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d004      	beq.n	8009c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a10      	ldr	r2, [pc, #64]	; (8009ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d10c      	bne.n	8009c84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bc80      	pop	{r7}
 8009c9e:	4770      	bx	lr
 8009ca0:	40012c00 	.word	0x40012c00
 8009ca4:	40000400 	.word	0x40000400
 8009ca8:	40000800 	.word	0x40000800

08009cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr

08009cbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cc6:	bf00      	nop
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bc80      	pop	{r7}
 8009cce:	4770      	bx	lr

08009cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e03f      	b.n	8009d62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7f9 fad6 	bl	80032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2224      	movs	r2, #36	; 0x24
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68da      	ldr	r2, [r3, #12]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fcad 	bl	800a674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	695a      	ldr	r2, [r3, #20]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	4613      	mov	r3, r2
 8009d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d11d      	bne.n	8009dc0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <HAL_UART_Receive_DMA+0x26>
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e016      	b.n	8009dc2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <HAL_UART_Receive_DMA+0x38>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e00f      	b.n	8009dc2 <HAL_UART_Receive_DMA+0x58>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	461a      	mov	r2, r3
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fa92 	bl	800a2e0 <UART_Start_Receive_DMA>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	e000      	b.n	8009dc2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009dc0:	2302      	movs	r3, #2
  }
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08a      	sub	sp, #40	; 0x28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	f003 030f 	and.w	r3, r3, #15
 8009dfa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10d      	bne.n	8009e1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	f003 0320 	and.w	r3, r3, #32
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d008      	beq.n	8009e1e <HAL_UART_IRQHandler+0x52>
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fb82 	bl	800a520 <UART_Receive_IT>
      return;
 8009e1c:	e17b      	b.n	800a116 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 80b1 	beq.w	8009f88 <HAL_UART_IRQHandler+0x1bc>
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	f003 0301 	and.w	r3, r3, #1
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d105      	bne.n	8009e3c <HAL_UART_IRQHandler+0x70>
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80a6 	beq.w	8009f88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <HAL_UART_IRQHandler+0x90>
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d005      	beq.n	8009e5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e54:	f043 0201 	orr.w	r2, r3, #1
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <HAL_UART_IRQHandler+0xb0>
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d005      	beq.n	8009e7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e74:	f043 0202 	orr.w	r2, r3, #2
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <HAL_UART_IRQHandler+0xd0>
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d005      	beq.n	8009e9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e94:	f043 0204 	orr.w	r2, r3, #4
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	f003 0308 	and.w	r3, r3, #8
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00f      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xfa>
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d104      	bne.n	8009eba <HAL_UART_IRQHandler+0xee>
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f043 0208 	orr.w	r2, r3, #8
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 811e 	beq.w	800a10c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <HAL_UART_IRQHandler+0x11e>
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	f003 0320 	and.w	r3, r3, #32
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fb1b 	bl	800a520 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	bf14      	ite	ne
 8009ef8:	2301      	movne	r3, #1
 8009efa:	2300      	moveq	r3, #0
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	f003 0308 	and.w	r3, r3, #8
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d102      	bne.n	8009f12 <HAL_UART_IRQHandler+0x146>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d031      	beq.n	8009f76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fa5d 	bl	800a3d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d023      	beq.n	8009f6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695a      	ldr	r2, [r3, #20]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d013      	beq.n	8009f66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f42:	4a76      	ldr	r2, [pc, #472]	; (800a11c <HAL_UART_IRQHandler+0x350>)
 8009f44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fa fd70 	bl	8004a30 <HAL_DMA_Abort_IT>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d016      	beq.n	8009f84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f60:	4610      	mov	r0, r2
 8009f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f64:	e00e      	b.n	8009f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f8f5 	bl	800a156 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f6c:	e00a      	b.n	8009f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8f1 	bl	800a156 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f74:	e006      	b.n	8009f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f8ed 	bl	800a156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f82:	e0c3      	b.n	800a10c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f84:	bf00      	nop
    return;
 8009f86:	e0c1      	b.n	800a10c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	f040 80a1 	bne.w	800a0d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	f003 0310 	and.w	r3, r3, #16
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 809b 	beq.w	800a0d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 8095 	beq.w	800a0d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60fb      	str	r3, [r7, #12]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	60fb      	str	r3, [r7, #12]
 8009fbe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d04e      	beq.n	800a06c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009fd8:	8a3b      	ldrh	r3, [r7, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 8098 	beq.w	800a110 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fe4:	8a3a      	ldrh	r2, [r7, #16]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	f080 8092 	bcs.w	800a110 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	8a3a      	ldrh	r2, [r7, #16]
 8009ff0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	2b20      	cmp	r3, #32
 8009ffa:	d02b      	beq.n	800a054 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68da      	ldr	r2, [r3, #12]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a00a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	695a      	ldr	r2, [r3, #20]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0201 	bic.w	r2, r2, #1
 800a01a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	695a      	ldr	r2, [r3, #20]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a02a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2220      	movs	r2, #32
 800a030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 0210 	bic.w	r2, r2, #16
 800a048:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fa fcb3 	bl	80049ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	b29b      	uxth	r3, r3
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f87f 	bl	800a168 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a06a:	e051      	b.n	800a110 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a074:	b29b      	uxth	r3, r3
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a07e:	b29b      	uxth	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d047      	beq.n	800a114 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a084:	8a7b      	ldrh	r3, [r7, #18]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d044      	beq.n	800a114 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68da      	ldr	r2, [r3, #12]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a098:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695a      	ldr	r2, [r3, #20]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0201 	bic.w	r2, r2, #1
 800a0a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f022 0210 	bic.w	r2, r2, #16
 800a0c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0c8:	8a7b      	ldrh	r3, [r7, #18]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f84b 	bl	800a168 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a0d2:	e01f      	b.n	800a114 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d008      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x324>
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d003      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f9b2 	bl	800a452 <UART_Transmit_IT>
    return;
 800a0ee:	e012      	b.n	800a116 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00d      	beq.n	800a116 <HAL_UART_IRQHandler+0x34a>
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d008      	beq.n	800a116 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9f3 	bl	800a4f0 <UART_EndTransmit_IT>
    return;
 800a10a:	e004      	b.n	800a116 <HAL_UART_IRQHandler+0x34a>
    return;
 800a10c:	bf00      	nop
 800a10e:	e002      	b.n	800a116 <HAL_UART_IRQHandler+0x34a>
      return;
 800a110:	bf00      	nop
 800a112:	e000      	b.n	800a116 <HAL_UART_IRQHandler+0x34a>
      return;
 800a114:	bf00      	nop
  }
}
 800a116:	3728      	adds	r7, #40	; 0x28
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	0800a42b 	.word	0x0800a42b

0800a120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bc80      	pop	{r7}
 800a130:	4770      	bx	lr

0800a132 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	bc80      	pop	{r7}
 800a142:	4770      	bx	lr

0800a144 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr

0800a156 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a156:	b480      	push	{r7}
 800a158:	b083      	sub	sp, #12
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	bc80      	pop	{r7}
 800a166:	4770      	bx	lr

0800a168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	bc80      	pop	{r7}
 800a17c:	4770      	bx	lr

0800a17e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d12a      	bne.n	800a1f0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68da      	ldr	r2, [r3, #12]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1ae:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	695a      	ldr	r2, [r3, #20]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0201 	bic.w	r2, r2, #1
 800a1be:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	695a      	ldr	r2, [r3, #20]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1ce:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d107      	bne.n	800a1f0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0210 	bic.w	r2, r2, #16
 800a1ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d106      	bne.n	800a206 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7ff ffb2 	bl	800a168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a204:	e002      	b.n	800a20c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f7ff ff93 	bl	800a132 <HAL_UART_RxCpltCallback>
}
 800a20c:	bf00      	nop
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	2b01      	cmp	r3, #1
 800a228:	d108      	bne.n	800a23c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a22e:	085b      	lsrs	r3, r3, #1
 800a230:	b29b      	uxth	r3, r3
 800a232:	4619      	mov	r1, r3
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7ff ff97 	bl	800a168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a23a:	e002      	b.n	800a242 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f7ff ff81 	bl	800a144 <HAL_UART_RxHalfCpltCallback>
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	bf14      	ite	ne
 800a26a:	2301      	movne	r3, #1
 800a26c:	2300      	moveq	r3, #0
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b21      	cmp	r3, #33	; 0x21
 800a27c:	d108      	bne.n	800a290 <UART_DMAError+0x46>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2200      	movs	r2, #0
 800a288:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a28a:	68b8      	ldr	r0, [r7, #8]
 800a28c:	f000 f88c 	bl	800a3a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bf14      	ite	ne
 800a29e:	2301      	movne	r3, #1
 800a2a0:	2300      	moveq	r3, #0
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b22      	cmp	r3, #34	; 0x22
 800a2b0:	d108      	bne.n	800a2c4 <UART_DMAError+0x7a>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a2be:	68b8      	ldr	r0, [r7, #8]
 800a2c0:	f000 f887 	bl	800a3d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c8:	f043 0210 	orr.w	r2, r3, #16
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2d0:	68b8      	ldr	r0, [r7, #8]
 800a2d2:	f7ff ff40 	bl	800a156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	88fa      	ldrh	r2, [r7, #6]
 800a2f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2222      	movs	r2, #34	; 0x22
 800a304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	4a23      	ldr	r2, [pc, #140]	; (800a39c <UART_Start_Receive_DMA+0xbc>)
 800a30e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	4a22      	ldr	r2, [pc, #136]	; (800a3a0 <UART_Start_Receive_DMA+0xc0>)
 800a316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31c:	4a21      	ldr	r2, [pc, #132]	; (800a3a4 <UART_Start_Receive_DMA+0xc4>)
 800a31e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a324:	2200      	movs	r2, #0
 800a326:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a328:	f107 0308 	add.w	r3, r7, #8
 800a32c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3304      	adds	r3, #4
 800a338:	4619      	mov	r1, r3
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	88fb      	ldrh	r3, [r7, #6]
 800a340:	f7fa fadc 	bl	80048fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a344:	2300      	movs	r3, #0
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68da      	ldr	r2, [r3, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a370:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695a      	ldr	r2, [r3, #20]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f042 0201 	orr.w	r2, r2, #1
 800a380:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	695a      	ldr	r2, [r3, #20]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a390:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3718      	adds	r7, #24
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	0800a17f 	.word	0x0800a17f
 800a3a0:	0800a215 	.word	0x0800a215
 800a3a4:	0800a24b 	.word	0x0800a24b

0800a3a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68da      	ldr	r2, [r3, #12]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a3be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bc80      	pop	{r7}
 800a3d0:	4770      	bx	lr

0800a3d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	695a      	ldr	r2, [r3, #20]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f022 0201 	bic.w	r2, r2, #1
 800a3f8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d107      	bne.n	800a412 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f022 0210 	bic.w	r2, r2, #16
 800a410:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2220      	movs	r2, #32
 800a416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	bc80      	pop	{r7}
 800a428:	4770      	bx	lr

0800a42a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f7ff fe86 	bl	800a156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a44a:	bf00      	nop
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a452:	b480      	push	{r7}
 800a454:	b085      	sub	sp, #20
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b21      	cmp	r3, #33	; 0x21
 800a464:	d13e      	bne.n	800a4e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a46e:	d114      	bne.n	800a49a <UART_Transmit_IT+0x48>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d110      	bne.n	800a49a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a48c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	1c9a      	adds	r2, r3, #2
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	621a      	str	r2, [r3, #32]
 800a498:	e008      	b.n	800a4ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	1c59      	adds	r1, r3, #1
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	6211      	str	r1, [r2, #32]
 800a4a4:	781a      	ldrb	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10f      	bne.n	800a4e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e000      	b.n	800a4e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a4e4:	2302      	movs	r3, #2
  }
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bc80      	pop	{r7}
 800a4ee:	4770      	bx	lr

0800a4f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a506:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2220      	movs	r2, #32
 800a50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff fe05 	bl	800a120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b22      	cmp	r3, #34	; 0x22
 800a532:	f040 8099 	bne.w	800a668 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a53e:	d117      	bne.n	800a570 <UART_Receive_IT+0x50>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d113      	bne.n	800a570 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a548:	2300      	movs	r3, #0
 800a54a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	b29a      	uxth	r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a568:	1c9a      	adds	r2, r3, #2
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	629a      	str	r2, [r3, #40]	; 0x28
 800a56e:	e026      	b.n	800a5be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a576:	2300      	movs	r3, #0
 800a578:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a582:	d007      	beq.n	800a594 <UART_Receive_IT+0x74>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <UART_Receive_IT+0x82>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d106      	bne.n	800a5a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	701a      	strb	r2, [r3, #0]
 800a5a0:	e008      	b.n	800a5b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d148      	bne.n	800a664 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0220 	bic.w	r2, r2, #32
 800a5e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	695a      	ldr	r2, [r3, #20]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 0201 	bic.w	r2, r2, #1
 800a600:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d123      	bne.n	800a65a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68da      	ldr	r2, [r3, #12]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f022 0210 	bic.w	r2, r2, #16
 800a626:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0310 	and.w	r3, r3, #16
 800a632:	2b10      	cmp	r3, #16
 800a634:	d10a      	bne.n	800a64c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a636:	2300      	movs	r3, #0
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff fd88 	bl	800a168 <HAL_UARTEx_RxEventCallback>
 800a658:	e002      	b.n	800a660 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff fd69 	bl	800a132 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	e002      	b.n	800a66a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	e000      	b.n	800a66a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a668:	2302      	movs	r3, #2
  }
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	689a      	ldr	r2, [r3, #8]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	431a      	orrs	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a6ae:	f023 030c 	bic.w	r3, r3, #12
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	6812      	ldr	r2, [r2, #0]
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	430b      	orrs	r3, r1
 800a6ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	699a      	ldr	r2, [r3, #24]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a2c      	ldr	r2, [pc, #176]	; (800a788 <UART_SetConfig+0x114>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d103      	bne.n	800a6e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a6dc:	f7fd fdd0 	bl	8008280 <HAL_RCC_GetPCLK2Freq>
 800a6e0:	60f8      	str	r0, [r7, #12]
 800a6e2:	e002      	b.n	800a6ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a6e4:	f7fd fdb8 	bl	8008258 <HAL_RCC_GetPCLK1Freq>
 800a6e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	009a      	lsls	r2, r3, #2
 800a6f4:	441a      	add	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a700:	4a22      	ldr	r2, [pc, #136]	; (800a78c <UART_SetConfig+0x118>)
 800a702:	fba2 2303 	umull	r2, r3, r2, r3
 800a706:	095b      	lsrs	r3, r3, #5
 800a708:	0119      	lsls	r1, r3, #4
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	009a      	lsls	r2, r3, #2
 800a714:	441a      	add	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a720:	4b1a      	ldr	r3, [pc, #104]	; (800a78c <UART_SetConfig+0x118>)
 800a722:	fba3 0302 	umull	r0, r3, r3, r2
 800a726:	095b      	lsrs	r3, r3, #5
 800a728:	2064      	movs	r0, #100	; 0x64
 800a72a:	fb00 f303 	mul.w	r3, r0, r3
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	011b      	lsls	r3, r3, #4
 800a732:	3332      	adds	r3, #50	; 0x32
 800a734:	4a15      	ldr	r2, [pc, #84]	; (800a78c <UART_SetConfig+0x118>)
 800a736:	fba2 2303 	umull	r2, r3, r2, r3
 800a73a:	095b      	lsrs	r3, r3, #5
 800a73c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a740:	4419      	add	r1, r3
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	4613      	mov	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	4413      	add	r3, r2
 800a74a:	009a      	lsls	r2, r3, #2
 800a74c:	441a      	add	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	fbb2 f2f3 	udiv	r2, r2, r3
 800a758:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <UART_SetConfig+0x118>)
 800a75a:	fba3 0302 	umull	r0, r3, r3, r2
 800a75e:	095b      	lsrs	r3, r3, #5
 800a760:	2064      	movs	r0, #100	; 0x64
 800a762:	fb00 f303 	mul.w	r3, r0, r3
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	011b      	lsls	r3, r3, #4
 800a76a:	3332      	adds	r3, #50	; 0x32
 800a76c:	4a07      	ldr	r2, [pc, #28]	; (800a78c <UART_SetConfig+0x118>)
 800a76e:	fba2 2303 	umull	r2, r3, r2, r3
 800a772:	095b      	lsrs	r3, r3, #5
 800a774:	f003 020f 	and.w	r2, r3, #15
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	440a      	add	r2, r1
 800a77e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a780:	bf00      	nop
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	40013800 	.word	0x40013800
 800a78c:	51eb851f 	.word	0x51eb851f

0800a790 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a794:	4904      	ldr	r1, [pc, #16]	; (800a7a8 <MX_FATFS_Init+0x18>)
 800a796:	4805      	ldr	r0, [pc, #20]	; (800a7ac <MX_FATFS_Init+0x1c>)
 800a798:	f003 fadc 	bl	800dd54 <FATFS_LinkDriver>
 800a79c:	4603      	mov	r3, r0
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4b03      	ldr	r3, [pc, #12]	; (800a7b0 <MX_FATFS_Init+0x20>)
 800a7a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a7a4:	bf00      	nop
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	20000d78 	.word	0x20000d78
 800a7ac:	20000010 	.word	0x20000010
 800a7b0:	20000d7c 	.word	0x20000d7c

0800a7b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a7b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bc80      	pop	{r7}
 800a7c0:	4770      	bx	lr
	...

0800a7c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800a7ce:	79fb      	ldrb	r3, [r7, #7]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7f6 ff37 	bl	8001644 <SD_disk_initialize>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4b04      	ldr	r3, [pc, #16]	; (800a7ec <USER_initialize+0x28>)
 800a7dc:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a7de:	4b03      	ldr	r3, [pc, #12]	; (800a7ec <USER_initialize+0x28>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	2000000d 	.word	0x2000000d

0800a7f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7f7 f80b 	bl	8001818 <SD_disk_status>
 800a802:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	60b9      	str	r1, [r7, #8]
 800a814:	607a      	str	r2, [r7, #4]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	4603      	mov	r3, r0
 800a81a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800a81c:	7bf8      	ldrb	r0, [r7, #15]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	f7f7 f80c 	bl	8001840 <SD_disk_read>
 800a828:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
 800a83e:	4603      	mov	r3, r0
 800a840:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800a842:	7bf8      	ldrb	r0, [r7, #15]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	68b9      	ldr	r1, [r7, #8]
 800a84a:	f7f7 f863 	bl	8001914 <SD_disk_write>
 800a84e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	603a      	str	r2, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
 800a864:	460b      	mov	r3, r1
 800a866:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800a868:	79b9      	ldrb	r1, [r7, #6]
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	4618      	mov	r0, r3
 800a870:	f7f7 f8d4 	bl	8001a1c <SD_disk_ioctl>
 800a874:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	4a08      	ldr	r2, [pc, #32]	; (800a8b0 <disk_status+0x30>)
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	79fa      	ldrb	r2, [r7, #7]
 800a898:	4905      	ldr	r1, [pc, #20]	; (800a8b0 <disk_status+0x30>)
 800a89a:	440a      	add	r2, r1
 800a89c:	7a12      	ldrb	r2, [r2, #8]
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4798      	blx	r3
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	200002cc 	.word	0x200002cc

0800a8b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	4a0d      	ldr	r2, [pc, #52]	; (800a8fc <disk_initialize+0x48>)
 800a8c6:	5cd3      	ldrb	r3, [r2, r3]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d111      	bne.n	800a8f0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	4a0b      	ldr	r2, [pc, #44]	; (800a8fc <disk_initialize+0x48>)
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a8d4:	79fb      	ldrb	r3, [r7, #7]
 800a8d6:	4a09      	ldr	r2, [pc, #36]	; (800a8fc <disk_initialize+0x48>)
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	79fa      	ldrb	r2, [r7, #7]
 800a8e2:	4906      	ldr	r1, [pc, #24]	; (800a8fc <disk_initialize+0x48>)
 800a8e4:	440a      	add	r2, r1
 800a8e6:	7a12      	ldrb	r2, [r2, #8]
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4798      	blx	r3
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200002cc 	.word	0x200002cc

0800a900 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a900:	b590      	push	{r4, r7, lr}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	60b9      	str	r1, [r7, #8]
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	4a0a      	ldr	r2, [pc, #40]	; (800a93c <disk_read+0x3c>)
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	689c      	ldr	r4, [r3, #8]
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	4a07      	ldr	r2, [pc, #28]	; (800a93c <disk_read+0x3c>)
 800a920:	4413      	add	r3, r2
 800a922:	7a18      	ldrb	r0, [r3, #8]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	47a0      	blx	r4
 800a92c:	4603      	mov	r3, r0
 800a92e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a930:	7dfb      	ldrb	r3, [r7, #23]
}
 800a932:	4618      	mov	r0, r3
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	bd90      	pop	{r4, r7, pc}
 800a93a:	bf00      	nop
 800a93c:	200002cc 	.word	0x200002cc

0800a940 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a940:	b590      	push	{r4, r7, lr}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	607a      	str	r2, [r7, #4]
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	4a0a      	ldr	r2, [pc, #40]	; (800a97c <disk_write+0x3c>)
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	68dc      	ldr	r4, [r3, #12]
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
 800a95e:	4a07      	ldr	r2, [pc, #28]	; (800a97c <disk_write+0x3c>)
 800a960:	4413      	add	r3, r2
 800a962:	7a18      	ldrb	r0, [r3, #8]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	68b9      	ldr	r1, [r7, #8]
 800a96a:	47a0      	blx	r4
 800a96c:	4603      	mov	r3, r0
 800a96e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a970:	7dfb      	ldrb	r3, [r7, #23]
}
 800a972:	4618      	mov	r0, r3
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	bd90      	pop	{r4, r7, pc}
 800a97a:	bf00      	nop
 800a97c:	200002cc 	.word	0x200002cc

0800a980 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	603a      	str	r2, [r7, #0]
 800a98a:	71fb      	strb	r3, [r7, #7]
 800a98c:	460b      	mov	r3, r1
 800a98e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	4a09      	ldr	r2, [pc, #36]	; (800a9b8 <disk_ioctl+0x38>)
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	79fa      	ldrb	r2, [r7, #7]
 800a99e:	4906      	ldr	r1, [pc, #24]	; (800a9b8 <disk_ioctl+0x38>)
 800a9a0:	440a      	add	r2, r1
 800a9a2:	7a10      	ldrb	r0, [r2, #8]
 800a9a4:	79b9      	ldrb	r1, [r7, #6]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	4798      	blx	r3
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	200002cc 	.word	0x200002cc

0800a9bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800a9d0:	e007      	b.n	800a9e2 <mem_cpy+0x26>
		*d++ = *s++;
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	1c53      	adds	r3, r2, #1
 800a9d6:	613b      	str	r3, [r7, #16]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	1c59      	adds	r1, r3, #1
 800a9dc:	6179      	str	r1, [r7, #20]
 800a9de:	7812      	ldrb	r2, [r2, #0]
 800a9e0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	1e5a      	subs	r2, r3, #1
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1f2      	bne.n	800a9d2 <mem_cpy+0x16>
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bc80      	pop	{r7}
 800a9f6:	4770      	bx	lr

0800a9f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800aa08:	e005      	b.n	800aa16 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	617a      	str	r2, [r7, #20]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	b2d2      	uxtb	r2, r2
 800aa14:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	1e5a      	subs	r2, r3, #1
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f4      	bne.n	800aa0a <mem_set+0x12>
}
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bc80      	pop	{r7}
 800aa2a:	4770      	bx	lr

0800aa2c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800aa2c:	b480      	push	{r7}
 800aa2e:	b089      	sub	sp, #36	; 0x24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800aa44:	bf00      	nop
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	1e5a      	subs	r2, r3, #1
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00d      	beq.n	800aa6c <mem_cmp+0x40>
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	61fa      	str	r2, [r7, #28]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	61ba      	str	r2, [r7, #24]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	1acb      	subs	r3, r1, r3
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d0ec      	beq.n	800aa46 <mem_cmp+0x1a>
	return r;
 800aa6c:	697b      	ldr	r3, [r7, #20]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3724      	adds	r7, #36	; 0x24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bc80      	pop	{r7}
 800aa76:	4770      	bx	lr

0800aa78 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aa82:	e002      	b.n	800aa8a <chk_chr+0x12>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3301      	adds	r3, #1
 800aa88:	607b      	str	r3, [r7, #4]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <chk_chr+0x26>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d1f2      	bne.n	800aa84 <chk_chr+0xc>
	return *str;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bc80      	pop	{r7}
 800aaaa:	4770      	bx	lr

0800aaac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aab6:	2300      	movs	r3, #0
 800aab8:	60bb      	str	r3, [r7, #8]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	e035      	b.n	800ab2c <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 800aac0:	492e      	ldr	r1, [pc, #184]	; (800ab7c <chk_lock+0xd0>)
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4613      	mov	r3, r2
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d026      	beq.n	800ab22 <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800aad4:	4929      	ldr	r1, [pc, #164]	; (800ab7c <chk_lock+0xd0>)
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4613      	mov	r3, r2
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	4413      	add	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	440b      	add	r3, r1
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d11c      	bne.n	800ab26 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 800aaec:	4923      	ldr	r1, [pc, #140]	; (800ab7c <chk_lock+0xd0>)
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	3304      	adds	r3, #4
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d10f      	bne.n	800ab26 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800ab06:	491d      	ldr	r1, [pc, #116]	; (800ab7c <chk_lock+0xd0>)
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	4413      	add	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	440b      	add	r3, r1
 800ab14:	3308      	adds	r3, #8
 800ab16:	881a      	ldrh	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d102      	bne.n	800ab26 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800ab20:	e007      	b.n	800ab32 <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 800ab22:	2301      	movs	r3, #1
 800ab24:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d9c6      	bls.n	800aac0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d109      	bne.n	800ab4c <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d102      	bne.n	800ab44 <chk_lock+0x98>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d101      	bne.n	800ab48 <chk_lock+0x9c>
 800ab44:	2300      	movs	r3, #0
 800ab46:	e013      	b.n	800ab70 <chk_lock+0xc4>
 800ab48:	2312      	movs	r3, #18
 800ab4a:	e011      	b.n	800ab70 <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10b      	bne.n	800ab6a <chk_lock+0xbe>
 800ab52:	490a      	ldr	r1, [pc, #40]	; (800ab7c <chk_lock+0xd0>)
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4613      	mov	r3, r2
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	4413      	add	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	440b      	add	r3, r1
 800ab60:	330a      	adds	r3, #10
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab68:	d101      	bne.n	800ab6e <chk_lock+0xc2>
 800ab6a:	2310      	movs	r3, #16
 800ab6c:	e000      	b.n	800ab70 <chk_lock+0xc4>
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bc80      	pop	{r7}
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	200000b4 	.word	0x200000b4

0800ab80 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab86:	2300      	movs	r3, #0
 800ab88:	607b      	str	r3, [r7, #4]
 800ab8a:	e002      	b.n	800ab92 <enq_lock+0x12>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	607b      	str	r3, [r7, #4]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d809      	bhi.n	800abac <enq_lock+0x2c>
 800ab98:	490a      	ldr	r1, [pc, #40]	; (800abc4 <enq_lock+0x44>)
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	440b      	add	r3, r1
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1ef      	bne.n	800ab8c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	bf14      	ite	ne
 800abb2:	2301      	movne	r3, #1
 800abb4:	2300      	moveq	r3, #0
 800abb6:	b2db      	uxtb	r3, r3
}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bc80      	pop	{r7}
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	200000b4 	.word	0x200000b4

0800abc8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800abd2:	2300      	movs	r3, #0
 800abd4:	60fb      	str	r3, [r7, #12]
 800abd6:	e028      	b.n	800ac2a <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 800abd8:	4952      	ldr	r1, [pc, #328]	; (800ad24 <inc_lock+0x15c>)
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	4613      	mov	r3, r2
 800abde:	005b      	lsls	r3, r3, #1
 800abe0:	4413      	add	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d119      	bne.n	800ac24 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 800abf0:	494c      	ldr	r1, [pc, #304]	; (800ad24 <inc_lock+0x15c>)
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4613      	mov	r3, r2
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	440b      	add	r3, r1
 800abfe:	3304      	adds	r3, #4
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d10c      	bne.n	800ac24 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 800ac0a:	4946      	ldr	r1, [pc, #280]	; (800ad24 <inc_lock+0x15c>)
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	440b      	add	r3, r1
 800ac18:	3308      	adds	r3, #8
 800ac1a:	881a      	ldrh	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d006      	beq.n	800ac32 <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3301      	adds	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d9d3      	bls.n	800abd8 <inc_lock+0x10>
 800ac30:	e000      	b.n	800ac34 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800ac32:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d142      	bne.n	800acc0 <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	e002      	b.n	800ac46 <inc_lock+0x7e>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3301      	adds	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d809      	bhi.n	800ac60 <inc_lock+0x98>
 800ac4c:	4935      	ldr	r1, [pc, #212]	; (800ad24 <inc_lock+0x15c>)
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	4613      	mov	r3, r2
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	4413      	add	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	440b      	add	r3, r1
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1ef      	bne.n	800ac40 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d101      	bne.n	800ac6a <inc_lock+0xa2>
 800ac66:	2300      	movs	r3, #0
 800ac68:	e057      	b.n	800ad1a <inc_lock+0x152>
		Files[i].fs = dp->fs;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6819      	ldr	r1, [r3, #0]
 800ac6e:	482d      	ldr	r0, [pc, #180]	; (800ad24 <inc_lock+0x15c>)
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4613      	mov	r3, r2
 800ac74:	005b      	lsls	r3, r3, #1
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4403      	add	r3, r0
 800ac7c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6899      	ldr	r1, [r3, #8]
 800ac82:	4828      	ldr	r0, [pc, #160]	; (800ad24 <inc_lock+0x15c>)
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4613      	mov	r3, r2
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4403      	add	r3, r0
 800ac90:	3304      	adds	r3, #4
 800ac92:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	88d8      	ldrh	r0, [r3, #6]
 800ac98:	4922      	ldr	r1, [pc, #136]	; (800ad24 <inc_lock+0x15c>)
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	4413      	add	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	440b      	add	r3, r1
 800aca6:	3308      	adds	r3, #8
 800aca8:	4602      	mov	r2, r0
 800acaa:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800acac:	491d      	ldr	r1, [pc, #116]	; (800ad24 <inc_lock+0x15c>)
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	4613      	mov	r3, r2
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	4413      	add	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	440b      	add	r3, r1
 800acba:	330a      	adds	r3, #10
 800acbc:	2200      	movs	r2, #0
 800acbe:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00c      	beq.n	800ace0 <inc_lock+0x118>
 800acc6:	4917      	ldr	r1, [pc, #92]	; (800ad24 <inc_lock+0x15c>)
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4613      	mov	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	330a      	adds	r3, #10
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <inc_lock+0x118>
 800acdc:	2300      	movs	r3, #0
 800acde:	e01c      	b.n	800ad1a <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10b      	bne.n	800acfe <inc_lock+0x136>
 800ace6:	490f      	ldr	r1, [pc, #60]	; (800ad24 <inc_lock+0x15c>)
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4613      	mov	r3, r2
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	440b      	add	r3, r1
 800acf4:	330a      	adds	r3, #10
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	b299      	uxth	r1, r3
 800acfc:	e001      	b.n	800ad02 <inc_lock+0x13a>
 800acfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad02:	4808      	ldr	r0, [pc, #32]	; (800ad24 <inc_lock+0x15c>)
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	4613      	mov	r3, r2
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	4413      	add	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4403      	add	r3, r0
 800ad10:	330a      	adds	r3, #10
 800ad12:	460a      	mov	r2, r1
 800ad14:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bc80      	pop	{r7}
 800ad22:	4770      	bx	lr
 800ad24:	200000b4 	.word	0x200000b4

0800ad28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3b01      	subs	r3, #1
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d82e      	bhi.n	800ad9a <dec_lock+0x72>
		n = Files[i].ctr;
 800ad3c:	491b      	ldr	r1, [pc, #108]	; (800adac <dec_lock+0x84>)
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	4613      	mov	r3, r2
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	4413      	add	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	440b      	add	r3, r1
 800ad4a:	330a      	adds	r3, #10
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ad50:	89fb      	ldrh	r3, [r7, #14]
 800ad52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad56:	d101      	bne.n	800ad5c <dec_lock+0x34>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800ad5c:	89fb      	ldrh	r3, [r7, #14]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <dec_lock+0x40>
 800ad62:	89fb      	ldrh	r3, [r7, #14]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ad68:	4910      	ldr	r1, [pc, #64]	; (800adac <dec_lock+0x84>)
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	4413      	add	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	440b      	add	r3, r1
 800ad76:	330a      	adds	r3, #10
 800ad78:	89fa      	ldrh	r2, [r7, #14]
 800ad7a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ad7c:	89fb      	ldrh	r3, [r7, #14]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d108      	bne.n	800ad94 <dec_lock+0x6c>
 800ad82:	490a      	ldr	r1, [pc, #40]	; (800adac <dec_lock+0x84>)
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	737b      	strb	r3, [r7, #13]
 800ad98:	e001      	b.n	800ad9e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ad9e:	7b7b      	ldrb	r3, [r7, #13]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bc80      	pop	{r7}
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	200000b4 	.word	0x200000b4

0800adb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800adb8:	2300      	movs	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e016      	b.n	800adec <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800adbe:	4910      	ldr	r1, [pc, #64]	; (800ae00 <clear_lock+0x50>)
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	4613      	mov	r3, r2
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	429a      	cmp	r2, r3
 800add2:	d108      	bne.n	800ade6 <clear_lock+0x36>
 800add4:	490a      	ldr	r1, [pc, #40]	; (800ae00 <clear_lock+0x50>)
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	4613      	mov	r3, r2
 800adda:	005b      	lsls	r3, r3, #1
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3301      	adds	r3, #1
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d9e5      	bls.n	800adbe <clear_lock+0xe>
	}
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	3714      	adds	r7, #20
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bc80      	pop	{r7}
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	200000b4 	.word	0x200000b4

0800ae04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d038      	beq.n	800ae8c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800ae20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	f7ff fd87 	bl	800a940 <disk_write>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <sync_window+0x3a>
			res = FR_DISK_ERR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
 800ae3c:	e026      	b.n	800ae8c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	1ad2      	subs	r2, r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d218      	bcs.n	800ae8c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800ae60:	613b      	str	r3, [r7, #16]
 800ae62:	e010      	b.n	800ae86 <sync_window+0x82>
					wsect += fs->fsize;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800ae76:	6879      	ldr	r1, [r7, #4]
 800ae78:	2301      	movs	r3, #1
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	f7ff fd60 	bl	800a940 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	613b      	str	r3, [r7, #16]
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d8eb      	bhi.n	800ae64 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d01b      	beq.n	800aee8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff ffa7 	bl	800ae04 <sync_window>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d113      	bne.n	800aee8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	2301      	movs	r3, #1
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	f7ff fd18 	bl	800a900 <disk_read>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d004      	beq.n	800aee0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aed6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeda:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aedc:	2301      	movs	r3, #1
 800aede:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff ff82 	bl	800ae04 <sync_window>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af04:	7bfb      	ldrb	r3, [r7, #15]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f040 809c 	bne.w	800b044 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800af12:	2b03      	cmp	r3, #3
 800af14:	f040 8089 	bne.w	800b02a <sync_fs+0x138>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800af1e:	2b01      	cmp	r3, #1
 800af20:	f040 8083 	bne.w	800b02a <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800af2c:	461a      	mov	r2, r3
 800af2e:	2100      	movs	r1, #0
 800af30:	f7ff fd62 	bl	800a9f8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2255      	movs	r2, #85	; 0x55
 800af38:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	22aa      	movs	r2, #170	; 0xaa
 800af40:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2252      	movs	r2, #82	; 0x52
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2252      	movs	r2, #82	; 0x52
 800af4e:	705a      	strb	r2, [r3, #1]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2261      	movs	r2, #97	; 0x61
 800af54:	709a      	strb	r2, [r3, #2]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2241      	movs	r2, #65	; 0x41
 800af5a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2272      	movs	r2, #114	; 0x72
 800af60:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2272      	movs	r2, #114	; 0x72
 800af68:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2241      	movs	r2, #65	; 0x41
 800af70:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2261      	movs	r2, #97	; 0x61
 800af78:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800af82:	b2da      	uxtb	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800af90:	b29b      	uxth	r3, r3
 800af92:	0a1b      	lsrs	r3, r3, #8
 800af94:	b29b      	uxth	r3, r3
 800af96:	b2da      	uxtb	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800afa4:	0c1b      	lsrs	r3, r3, #16
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800afb4:	0e1b      	lsrs	r3, r3, #24
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	0a1b      	lsrs	r3, r3, #8
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800afe6:	0c1b      	lsrs	r3, r3, #16
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800aff6:	0e1b      	lsrs	r3, r3, #24
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b014:	6879      	ldr	r1, [r7, #4]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800b01c:	2301      	movs	r3, #1
 800b01e:	f7ff fc8f 	bl	800a940 <disk_write>
			fs->fsi_flag = 0;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800b030:	2200      	movs	r2, #0
 800b032:	2100      	movs	r1, #0
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff fca3 	bl	800a980 <disk_ioctl>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <sync_fs+0x152>
			res = FR_DISK_ERR;
 800b040:	2301      	movs	r3, #1
 800b042:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b044:	7bfb      	ldrb	r3, [r7, #15]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b04e:	b480      	push	{r7}
 800b050:	b083      	sub	sp, #12
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	3b02      	subs	r3, #2
 800b05c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b064:	3b02      	subs	r3, #2
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d301      	bcc.n	800b070 <clust2sect+0x22>
 800b06c:	2300      	movs	r3, #0
 800b06e:	e00a      	b.n	800b086 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b076:	461a      	mov	r2, r3
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	fb03 f202 	mul.w	r2, r3, r2
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800b084:	4413      	add	r3, r2
}
 800b086:	4618      	mov	r0, r3
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bc80      	pop	{r7}
 800b08e:	4770      	bx	lr

0800b090 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d905      	bls.n	800b0ac <get_fat+0x1c>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d302      	bcc.n	800b0b2 <get_fat+0x22>
		val = 1;	/* Internal error */
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	e0d7      	b.n	800b262 <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	f000 808f 	beq.w	800b1e2 <get_fat+0x152>
 800b0c4:	2b03      	cmp	r3, #3
 800b0c6:	f300 80c2 	bgt.w	800b24e <get_fat+0x1be>
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d002      	beq.n	800b0d4 <get_fat+0x44>
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d059      	beq.n	800b186 <get_fat+0xf6>
 800b0d2:	e0bc      	b.n	800b24e <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4413      	add	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0f6:	4413      	add	r3, r2
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff fecb 	bl	800ae96 <move_window>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	f040 80a6 	bne.w	800b254 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	60fa      	str	r2, [r7, #12]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b114:	fbb3 f1f2 	udiv	r1, r3, r2
 800b118:	fb02 f201 	mul.w	r2, r2, r1
 800b11c:	1a9b      	subs	r3, r3, r2
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	5cd3      	ldrb	r3, [r2, r3]
 800b122:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b130:	4619      	mov	r1, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	fbb3 f3f1 	udiv	r3, r3, r1
 800b138:	4413      	add	r3, r2
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7ff feaa 	bl	800ae96 <move_window>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	f040 8087 	bne.w	800b258 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b150:	461a      	mov	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	fbb3 f1f2 	udiv	r1, r3, r2
 800b158:	fb02 f201 	mul.w	r2, r2, r1
 800b15c:	1a9b      	subs	r3, r3, r2
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	5cd3      	ldrb	r3, [r2, r3]
 800b162:	021b      	lsls	r3, r3, #8
 800b164:	461a      	mov	r2, r3
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	4313      	orrs	r3, r2
 800b16a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <get_fat+0xec>
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	091b      	lsrs	r3, r3, #4
 800b17a:	e002      	b.n	800b182 <get_fat+0xf2>
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b182:	617b      	str	r3, [r7, #20]
			break;
 800b184:	e06d      	b.n	800b262 <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b192:	085b      	lsrs	r3, r3, #1
 800b194:	b29b      	uxth	r3, r3
 800b196:	4619      	mov	r1, r3
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b19e:	4413      	add	r3, r2
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff fe77 	bl	800ae96 <move_window>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d156      	bne.n	800b25c <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b1b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1bc:	fb02 f201 	mul.w	r2, r2, r1
 800b1c0:	1a9b      	subs	r3, r3, r2
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	021b      	lsls	r3, r3, #8
 800b1d0:	b21a      	sxth	r2, r3
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	b21b      	sxth	r3, r3
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	b21b      	sxth	r3, r3
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	617b      	str	r3, [r7, #20]
			break;
 800b1e0:	e03f      	b.n	800b262 <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b1ee:	089b      	lsrs	r3, r3, #2
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff fe49 	bl	800ae96 <move_window>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d12a      	bne.n	800b260 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b214:	fbb3 f1f2 	udiv	r1, r3, r2
 800b218:	fb02 f201 	mul.w	r2, r2, r1
 800b21c:	1a9b      	subs	r3, r3, r2
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	4413      	add	r3, r2
 800b222:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	3303      	adds	r3, #3
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	061a      	lsls	r2, r3, #24
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	3302      	adds	r3, #2
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	041b      	lsls	r3, r3, #16
 800b234:	4313      	orrs	r3, r2
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	3201      	adds	r2, #1
 800b23a:	7812      	ldrb	r2, [r2, #0]
 800b23c:	0212      	lsls	r2, r2, #8
 800b23e:	4313      	orrs	r3, r2
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	7812      	ldrb	r2, [r2, #0]
 800b244:	4313      	orrs	r3, r2
 800b246:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b24a:	617b      	str	r3, [r7, #20]
			break;
 800b24c:	e009      	b.n	800b262 <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 800b24e:	2301      	movs	r3, #1
 800b250:	617b      	str	r3, [r7, #20]
 800b252:	e006      	b.n	800b262 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b254:	bf00      	nop
 800b256:	e004      	b.n	800b262 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b258:	bf00      	nop
 800b25a:	e002      	b.n	800b262 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b25c:	bf00      	nop
 800b25e:	e000      	b.n	800b262 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b260:	bf00      	nop
		}
	}

	return val;
 800b262:	697b      	ldr	r3, [r7, #20]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3718      	adds	r7, #24
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b088      	sub	sp, #32
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d905      	bls.n	800b28a <put_fat+0x1e>
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	429a      	cmp	r2, r3
 800b288:	d302      	bcc.n	800b290 <put_fat+0x24>
		res = FR_INT_ERR;
 800b28a:	2302      	movs	r3, #2
 800b28c:	77fb      	strb	r3, [r7, #31]
 800b28e:	e128      	b.n	800b4e2 <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b296:	2b03      	cmp	r3, #3
 800b298:	f000 80c3 	beq.w	800b422 <put_fat+0x1b6>
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	f300 8116 	bgt.w	800b4ce <put_fat+0x262>
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d003      	beq.n	800b2ae <put_fat+0x42>
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	f000 8087 	beq.w	800b3ba <put_fat+0x14e>
 800b2ac:	e10f      	b.n	800b4ce <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	617b      	str	r3, [r7, #20]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	085b      	lsrs	r3, r3, #1
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2d0:	4413      	add	r3, r2
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f7ff fdde 	bl	800ae96 <move_window>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2de:	7ffb      	ldrb	r3, [r7, #31]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f040 80f7 	bne.w	800b4d4 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	1c5a      	adds	r2, r3, #1
 800b2ea:	617a      	str	r2, [r7, #20]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b2f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2f6:	fb02 f201 	mul.w	r2, r2, r1
 800b2fa:	1a9b      	subs	r3, r3, r2
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	4413      	add	r3, r2
 800b300:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00d      	beq.n	800b328 <put_fat+0xbc>
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	b25b      	sxtb	r3, r3
 800b312:	f003 030f 	and.w	r3, r3, #15
 800b316:	b25a      	sxtb	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	011b      	lsls	r3, r3, #4
 800b31e:	b25b      	sxtb	r3, r3
 800b320:	4313      	orrs	r3, r2
 800b322:	b25b      	sxtb	r3, r3
 800b324:	b2db      	uxtb	r3, r3
 800b326:	e001      	b.n	800b32c <put_fat+0xc0>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	69ba      	ldr	r2, [r7, #24]
 800b32e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b344:	4619      	mov	r1, r3
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	fbb3 f3f1 	udiv	r3, r3, r1
 800b34c:	4413      	add	r3, r2
 800b34e:	4619      	mov	r1, r3
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f7ff fda0 	bl	800ae96 <move_window>
 800b356:	4603      	mov	r3, r0
 800b358:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b35a:	7ffb      	ldrb	r3, [r7, #31]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f040 80bb 	bne.w	800b4d8 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b368:	461a      	mov	r2, r3
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b370:	fb02 f201 	mul.w	r2, r2, r1
 800b374:	1a9b      	subs	r3, r3, r2
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	4413      	add	r3, r2
 800b37a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <put_fat+0x122>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	091b      	lsrs	r3, r3, #4
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	e00e      	b.n	800b3ac <put_fat+0x140>
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	b25b      	sxtb	r3, r3
 800b394:	f023 030f 	bic.w	r3, r3, #15
 800b398:	b25a      	sxtb	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	0a1b      	lsrs	r3, r3, #8
 800b39e:	b25b      	sxtb	r3, r3
 800b3a0:	f003 030f 	and.w	r3, r3, #15
 800b3a4:	b25b      	sxtb	r3, r3
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	b25b      	sxtb	r3, r3
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800b3b8:	e093      	b.n	800b4e2 <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b3c6:	085b      	lsrs	r3, r3, #1
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3d2:	4413      	add	r3, r2
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff fd5d 	bl	800ae96 <move_window>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3e0:	7ffb      	ldrb	r3, [r7, #31]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d17a      	bne.n	800b4dc <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	005b      	lsls	r3, r3, #1
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b3f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3f4:	fb02 f201 	mul.w	r2, r2, r1
 800b3f8:	1a9b      	subs	r3, r3, r2
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	b2da      	uxtb	r2, r3
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	0a1b      	lsrs	r3, r3, #8
 800b40e:	b29a      	uxth	r2, r3
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	3301      	adds	r3, #1
 800b414:	b2d2      	uxtb	r2, r2
 800b416:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800b420:	e05f      	b.n	800b4e2 <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b42e:	089b      	lsrs	r3, r3, #2
 800b430:	b29b      	uxth	r3, r3
 800b432:	4619      	mov	r1, r3
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	fbb3 f3f1 	udiv	r3, r3, r1
 800b43a:	4413      	add	r3, r2
 800b43c:	4619      	mov	r1, r3
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7ff fd29 	bl	800ae96 <move_window>
 800b444:	4603      	mov	r3, r0
 800b446:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b448:	7ffb      	ldrb	r3, [r7, #31]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d148      	bne.n	800b4e0 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b458:	fbb3 f1f2 	udiv	r1, r3, r2
 800b45c:	fb02 f201 	mul.w	r2, r2, r1
 800b460:	1a9b      	subs	r3, r3, r2
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4413      	add	r3, r2
 800b466:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	3303      	adds	r3, #3
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	061a      	lsls	r2, r3, #24
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	3302      	adds	r3, #2
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	041b      	lsls	r3, r3, #16
 800b478:	4313      	orrs	r3, r2
 800b47a:	69ba      	ldr	r2, [r7, #24]
 800b47c:	3201      	adds	r2, #1
 800b47e:	7812      	ldrb	r2, [r2, #0]
 800b480:	0212      	lsls	r2, r2, #8
 800b482:	4313      	orrs	r3, r2
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	7812      	ldrb	r2, [r2, #0]
 800b488:	4313      	orrs	r3, r2
 800b48a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	4313      	orrs	r3, r2
 800b492:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	b2da      	uxtb	r2, r3
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	0a1b      	lsrs	r3, r3, #8
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	b2d2      	uxtb	r2, r2
 800b4aa:	701a      	strb	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	0c1a      	lsrs	r2, r3, #16
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	3302      	adds	r3, #2
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	0e1a      	lsrs	r2, r3, #24
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	3303      	adds	r3, #3
 800b4c0:	b2d2      	uxtb	r2, r2
 800b4c2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800b4cc:	e009      	b.n	800b4e2 <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	77fb      	strb	r3, [r7, #31]
 800b4d2:	e006      	b.n	800b4e2 <put_fat+0x276>
			if (res != FR_OK) break;
 800b4d4:	bf00      	nop
 800b4d6:	e004      	b.n	800b4e2 <put_fat+0x276>
			if (res != FR_OK) break;
 800b4d8:	bf00      	nop
 800b4da:	e002      	b.n	800b4e2 <put_fat+0x276>
			if (res != FR_OK) break;
 800b4dc:	bf00      	nop
 800b4de:	e000      	b.n	800b4e2 <put_fat+0x276>
			if (res != FR_OK) break;
 800b4e0:	bf00      	nop
		}
	}

	return res;
 800b4e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3720      	adds	r7, #32
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d905      	bls.n	800b508 <remove_chain+0x1c>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	d302      	bcc.n	800b50e <remove_chain+0x22>
		res = FR_INT_ERR;
 800b508:	2302      	movs	r3, #2
 800b50a:	73fb      	strb	r3, [r7, #15]
 800b50c:	e043      	b.n	800b596 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b512:	e036      	b.n	800b582 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff fdba 	bl	800b090 <get_fat>
 800b51c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d035      	beq.n	800b590 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d102      	bne.n	800b530 <remove_chain+0x44>
 800b52a:	2302      	movs	r3, #2
 800b52c:	73fb      	strb	r3, [r7, #15]
 800b52e:	e032      	b.n	800b596 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b536:	d102      	bne.n	800b53e <remove_chain+0x52>
 800b538:	2301      	movs	r3, #1
 800b53a:	73fb      	strb	r3, [r7, #15]
 800b53c:	e02b      	b.n	800b596 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800b53e:	2200      	movs	r2, #0
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7ff fe92 	bl	800b26c <put_fat>
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d120      	bne.n	800b594 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55c:	d00f      	beq.n	800b57e <remove_chain+0x92>
				fs->free_clust++;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800b572:	f043 0301 	orr.w	r3, r3, #1
 800b576:	b2da      	uxtb	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d3c2      	bcc.n	800b514 <remove_chain+0x28>
 800b58e:	e002      	b.n	800b596 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800b590:	bf00      	nop
 800b592:	e000      	b.n	800b596 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800b594:	bf00      	nop
		}
	}

	return res;
 800b596:	7bfb      	ldrb	r3, [r7, #15]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10f      	bne.n	800b5d0 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b5b6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d005      	beq.n	800b5ca <create_chain+0x2a>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d31c      	bcc.n	800b604 <create_chain+0x64>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	613b      	str	r3, [r7, #16]
 800b5ce:	e019      	b.n	800b604 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff fd5c 	bl	800b090 <get_fat>
 800b5d8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d801      	bhi.n	800b5e4 <create_chain+0x44>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e076      	b.n	800b6d2 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ea:	d101      	bne.n	800b5f0 <create_chain+0x50>
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	e070      	b.n	800b6d2 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d201      	bcs.n	800b600 <create_chain+0x60>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	e068      	b.n	800b6d2 <create_chain+0x132>
		scl = clst;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	3301      	adds	r3, #1
 800b60c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	429a      	cmp	r2, r3
 800b618:	d307      	bcc.n	800b62a <create_chain+0x8a>
			ncl = 2;
 800b61a:	2302      	movs	r3, #2
 800b61c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	429a      	cmp	r2, r3
 800b624:	d901      	bls.n	800b62a <create_chain+0x8a>
 800b626:	2300      	movs	r3, #0
 800b628:	e053      	b.n	800b6d2 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800b62a:	6979      	ldr	r1, [r7, #20]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff fd2f 	bl	800b090 <get_fat>
 800b632:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00e      	beq.n	800b658 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b640:	d002      	beq.n	800b648 <create_chain+0xa8>
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d101      	bne.n	800b64c <create_chain+0xac>
			return cs;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	e042      	b.n	800b6d2 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	429a      	cmp	r2, r3
 800b652:	d1d9      	bne.n	800b608 <create_chain+0x68>
 800b654:	2300      	movs	r3, #0
 800b656:	e03c      	b.n	800b6d2 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800b658:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800b65a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800b65e:	6979      	ldr	r1, [r7, #20]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff fe03 	bl	800b26c <put_fat>
 800b666:	4603      	mov	r3, r0
 800b668:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d109      	bne.n	800b684 <create_chain+0xe4>
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d006      	beq.n	800b684 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fdf6 	bl	800b26c <put_fat>
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d11a      	bne.n	800b6c0 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69c:	d018      	beq.n	800b6d0 <create_chain+0x130>
			fs->free_clust--;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b6a4:	1e5a      	subs	r2, r3, #1
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800b6b2:	f043 0301 	orr.w	r3, r3, #1
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800b6be:	e007      	b.n	800b6d0 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d102      	bne.n	800b6cc <create_chain+0x12c>
 800b6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ca:	e000      	b.n	800b6ce <create_chain+0x12e>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800b6d0:	697b      	ldr	r3, [r7, #20]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b087      	sub	sp, #28
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	6812      	ldr	r2, [r2, #0]
 800b700:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800b704:	fbb3 f3f2 	udiv	r3, r3, r2
 800b708:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	1d1a      	adds	r2, r3, #4
 800b70e:	613a      	str	r2, [r7, #16]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <clmt_clust+0x44>
 800b71a:	2300      	movs	r3, #0
 800b71c:	e010      	b.n	800b740 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	429a      	cmp	r2, r3
 800b724:	d307      	bcc.n	800b736 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	617b      	str	r3, [r7, #20]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3304      	adds	r3, #4
 800b732:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b734:	e7e9      	b.n	800b70a <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 800b736:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	4413      	add	r3, r2
}
 800b740:	4618      	mov	r0, r3
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr

0800b74a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b086      	sub	sp, #24
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	b29a      	uxth	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d006      	beq.n	800b776 <dir_sdi+0x2c>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	429a      	cmp	r2, r3
 800b774:	d301      	bcc.n	800b77a <dir_sdi+0x30>
		return FR_INT_ERR;
 800b776:	2302      	movs	r3, #2
 800b778:	e082      	b.n	800b880 <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <dir_sdi+0x4c>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d104      	bne.n	800b796 <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b794:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10f      	bne.n	800b7bc <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d301      	bcc.n	800b7b0 <dir_sdi+0x66>
			return FR_INT_ERR;
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e067      	b.n	800b880 <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b7b8:	613b      	str	r3, [r7, #16]
 800b7ba:	e036      	b.n	800b82a <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b7c4:	095b      	lsrs	r3, r3, #5
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b7d2:	fb03 f302 	mul.w	r3, r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800b7d8:	e01c      	b.n	800b814 <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6979      	ldr	r1, [r7, #20]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff fc55 	bl	800b090 <get_fat>
 800b7e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ee:	d101      	bne.n	800b7f4 <dir_sdi+0xaa>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e045      	b.n	800b880 <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d906      	bls.n	800b808 <dir_sdi+0xbe>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	429a      	cmp	r2, r3
 800b806:	d301      	bcc.n	800b80c <dir_sdi+0xc2>
				return FR_INT_ERR;
 800b808:	2302      	movs	r3, #2
 800b80a:	e039      	b.n	800b880 <dir_sdi+0x136>
			idx -= ic;
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d2de      	bcs.n	800b7da <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6979      	ldr	r1, [r7, #20]
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff fc13 	bl	800b04e <clust2sect>
 800b828:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <dir_sdi+0xf0>
 800b836:	2302      	movs	r3, #2
 800b838:	e022      	b.n	800b880 <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b842:	095b      	lsrs	r3, r3, #5
 800b844:	b29b      	uxth	r3, r3
 800b846:	461a      	mov	r2, r3
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	441a      	add	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4618      	mov	r0, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b864:	095b      	lsrs	r3, r3, #5
 800b866:	b29b      	uxth	r3, r3
 800b868:	461a      	mov	r2, r3
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b870:	fb02 f201 	mul.w	r2, r2, r1
 800b874:	1a9b      	subs	r3, r3, r2
 800b876:	015b      	lsls	r3, r3, #5
 800b878:	18c2      	adds	r2, r0, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	88db      	ldrh	r3, [r3, #6]
 800b896:	3301      	adds	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <dir_next+0x22>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <dir_next+0x26>
		return FR_NO_FILE;
 800b8aa:	2304      	movs	r3, #4
 800b8ac:	e0e2      	b.n	800ba74 <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b8b6:	095b      	lsrs	r3, r3, #5
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8c2:	fb02 f201 	mul.w	r2, r2, r1
 800b8c6:	1a9b      	subs	r3, r3, r2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f040 80ba 	bne.w	800ba42 <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	f0c0 80a8 	bcc.w	800ba42 <dir_next+0x1ba>
				return FR_NO_FILE;
 800b8f2:	2304      	movs	r3, #4
 800b8f4:	e0be      	b.n	800ba74 <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b8fe:	095b      	lsrs	r3, r3, #5
 800b900:	b29b      	uxth	r3, r3
 800b902:	461a      	mov	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	fbb3 f3f2 	udiv	r3, r3, r2
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	6812      	ldr	r2, [r2, #0]
 800b90e:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800b912:	3a01      	subs	r2, #1
 800b914:	4013      	ands	r3, r2
 800b916:	2b00      	cmp	r3, #0
 800b918:	f040 8093 	bne.w	800ba42 <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	4619      	mov	r1, r3
 800b926:	4610      	mov	r0, r2
 800b928:	f7ff fbb2 	bl	800b090 <get_fat>
 800b92c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d801      	bhi.n	800b938 <dir_next+0xb0>
 800b934:	2302      	movs	r3, #2
 800b936:	e09d      	b.n	800ba74 <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93e:	d101      	bne.n	800b944 <dir_next+0xbc>
 800b940:	2301      	movs	r3, #1
 800b942:	e097      	b.n	800ba74 <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d36b      	bcc.n	800ba2a <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <dir_next+0xd4>
 800b958:	2304      	movs	r3, #4
 800b95a:	e08b      	b.n	800ba74 <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	f7ff fe1a 	bl	800b5a0 <create_chain>
 800b96c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <dir_next+0xf0>
 800b974:	2307      	movs	r3, #7
 800b976:	e07d      	b.n	800ba74 <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <dir_next+0xfa>
 800b97e:	2302      	movs	r3, #2
 800b980:	e078      	b.n	800ba74 <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b988:	d101      	bne.n	800b98e <dir_next+0x106>
 800b98a:	2301      	movs	r3, #1
 800b98c:	e072      	b.n	800ba74 <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff fa36 	bl	800ae04 <sync_window>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <dir_next+0x11a>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e068      	b.n	800ba74 <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	f7ff f820 	bl	800a9f8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681c      	ldr	r4, [r3, #0]
 800b9c0:	6979      	ldr	r1, [r7, #20]
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7ff fb43 	bl	800b04e <clust2sect>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	613b      	str	r3, [r7, #16]
 800b9d2:	e018      	b.n	800ba06 <dir_next+0x17e>
						dp->fs->wflag = 1;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff fa0e 	bl	800ae04 <sync_window>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <dir_next+0x16a>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e040      	b.n	800ba74 <dir_next+0x1ec>
						dp->fs->winsect++;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800b9fa:	3201      	adds	r2, #1
 800b9fc:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	3301      	adds	r3, #1
 800ba04:	613b      	str	r3, [r7, #16]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800ba0e:	461a      	mov	r2, r3
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d3de      	bcc.n	800b9d4 <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	693a      	ldr	r2, [r7, #16]
 800ba24:	1a8a      	subs	r2, r1, r2
 800ba26:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6979      	ldr	r1, [r7, #20]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff fb09 	bl	800b04e <clust2sect>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ba58:	095b      	lsrs	r3, r3, #5
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba64:	fb02 f201 	mul.w	r2, r2, r1
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	015b      	lsls	r3, r3, #5
 800ba6c:	18c2      	adds	r2, r0, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	371c      	adds	r7, #28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd90      	pop	{r4, r7, pc}

0800ba7c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800ba86:	2100      	movs	r1, #0
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff fe5e 	bl	800b74a <dir_sdi>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d12d      	bne.n	800baf4 <dir_alloc+0x78>
		n = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f7ff f9f5 	bl	800ae96 <move_window>
 800baac:	4603      	mov	r3, r0
 800baae:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d11d      	bne.n	800baf2 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	2be5      	cmp	r3, #229	; 0xe5
 800babe:	d004      	beq.n	800baca <dir_alloc+0x4e>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d107      	bne.n	800bada <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	3301      	adds	r3, #1
 800bace:	60bb      	str	r3, [r7, #8]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d102      	bne.n	800bade <dir_alloc+0x62>
 800bad8:	e00c      	b.n	800baf4 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bada:	2300      	movs	r3, #0
 800badc:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800bade:	2101      	movs	r1, #1
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff fed1 	bl	800b888 <dir_next>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800baea:	7bfb      	ldrb	r3, [r7, #15]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0d5      	beq.n	800ba9c <dir_alloc+0x20>
 800baf0:	e000      	b.n	800baf4 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800baf2:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	d101      	bne.n	800bafe <dir_alloc+0x82>
 800bafa:	2307      	movs	r3, #7
 800bafc:	73fb      	strb	r3, [r7, #15]
	return res;
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	331b      	adds	r3, #27
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	021b      	lsls	r3, r3, #8
 800bb1a:	b21a      	sxth	r2, r3
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	331a      	adds	r3, #26
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	b21b      	sxth	r3, r3
 800bb24:	4313      	orrs	r3, r2
 800bb26:	b21b      	sxth	r3, r3
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d10f      	bne.n	800bb56 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	3315      	adds	r3, #21
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	021b      	lsls	r3, r3, #8
 800bb3e:	b21a      	sxth	r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	3314      	adds	r3, #20
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	b21b      	sxth	r3, r3
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	b21b      	sxth	r3, r3
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	041b      	lsls	r3, r3, #16
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]

	return cl;
 800bb56:	68fb      	ldr	r3, [r7, #12]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bc80      	pop	{r7}
 800bb60:	4770      	bx	lr

0800bb62 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	331a      	adds	r3, #26
 800bb70:	683a      	ldr	r2, [r7, #0]
 800bb72:	b2d2      	uxtb	r2, r2
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	0a1b      	lsrs	r3, r3, #8
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	331b      	adds	r3, #27
 800bb82:	b2d2      	uxtb	r2, r2
 800bb84:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	0c1a      	lsrs	r2, r3, #16
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3314      	adds	r3, #20
 800bb8e:	b2d2      	uxtb	r2, r2
 800bb90:	701a      	strb	r2, [r3, #0]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	0c1b      	lsrs	r3, r3, #16
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	0a1b      	lsrs	r3, r3, #8
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	3315      	adds	r3, #21
 800bba0:	b2d2      	uxtb	r2, r2
 800bba2:	701a      	strb	r2, [r3, #0]
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bc80      	pop	{r7}
 800bbac:	4770      	bx	lr
	...

0800bbb0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc2:	1e5a      	subs	r2, r3, #1
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	613b      	str	r3, [r7, #16]
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800bbd8:	4a2b      	ldr	r2, [pc, #172]	; (800bc88 <cmp_lfn+0xd8>)
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	4413      	add	r3, r2
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	021b      	lsls	r3, r3, #8
 800bbea:	b21a      	sxth	r2, r3
 800bbec:	4926      	ldr	r1, [pc, #152]	; (800bc88 <cmp_lfn+0xd8>)
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	440b      	add	r3, r1
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	440b      	add	r3, r1
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	b21b      	sxth	r3, r3
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	b21b      	sxth	r3, r3
 800bc02:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800bc04:	89fb      	ldrh	r3, [r7, #14]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d019      	beq.n	800bc3e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800bc0a:	89bb      	ldrh	r3, [r7, #12]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f002 f8eb 	bl	800dde8 <ff_wtoupper>
 800bc12:	4603      	mov	r3, r0
 800bc14:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2bfe      	cmp	r3, #254	; 0xfe
 800bc1a:	d80e      	bhi.n	800bc3a <cmp_lfn+0x8a>
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	1c5a      	adds	r2, r3, #1
 800bc20:	617a      	str	r2, [r7, #20]
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	4413      	add	r3, r2
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f002 f8dc 	bl	800dde8 <ff_wtoupper>
 800bc30:	4603      	mov	r3, r0
 800bc32:	461a      	mov	r2, r3
 800bc34:	89fb      	ldrh	r3, [r7, #14]
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d008      	beq.n	800bc4c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	e01f      	b.n	800bc7e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800bc3e:	89bb      	ldrh	r3, [r7, #12]
 800bc40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d001      	beq.n	800bc4c <cmp_lfn+0x9c>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	e018      	b.n	800bc7e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2b0c      	cmp	r3, #12
 800bc56:	d9bf      	bls.n	800bbd8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <cmp_lfn+0xcc>
 800bc64:	89fb      	ldrh	r3, [r7, #14]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d008      	beq.n	800bc7c <cmp_lfn+0xcc>
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	4413      	add	r3, r2
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <cmp_lfn+0xcc>
		return 0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	e000      	b.n	800bc7e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800bc7c:	2301      	movs	r3, #1
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3718      	adds	r7, #24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	0800e928 	.word	0x0800e928

0800bc8c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b089      	sub	sp, #36	; 0x24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	4611      	mov	r1, r2
 800bc98:	461a      	mov	r2, r3
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	71fb      	strb	r3, [r7, #7]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	330d      	adds	r3, #13
 800bca6:	79ba      	ldrb	r2, [r7, #6]
 800bca8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	330b      	adds	r3, #11
 800bcae:	220f      	movs	r2, #15
 800bcb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	330c      	adds	r3, #12
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	331a      	adds	r3, #26
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	701a      	strb	r2, [r3, #0]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	331b      	adds	r3, #27
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800bcca:	79fb      	ldrb	r3, [r7, #7]
 800bccc:	1e5a      	subs	r2, r3, #1
 800bcce:	4613      	mov	r3, r2
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	82fb      	strh	r3, [r7, #22]
 800bcde:	2300      	movs	r3, #0
 800bce0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800bce2:	8afb      	ldrh	r3, [r7, #22]
 800bce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d007      	beq.n	800bcfc <fit_lfn+0x70>
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	1c5a      	adds	r2, r3, #1
 800bcf0:	61fa      	str	r2, [r7, #28]
 800bcf2:	005b      	lsls	r3, r3, #1
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800bcfc:	4a1c      	ldr	r2, [pc, #112]	; (800bd70 <fit_lfn+0xe4>)
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	4413      	add	r3, r2
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	461a      	mov	r2, r3
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	4413      	add	r3, r2
 800bd0a:	8afa      	ldrh	r2, [r7, #22]
 800bd0c:	b2d2      	uxtb	r2, r2
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	8afb      	ldrh	r3, [r7, #22]
 800bd12:	0a1b      	lsrs	r3, r3, #8
 800bd14:	b299      	uxth	r1, r3
 800bd16:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <fit_lfn+0xe4>)
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	4413      	add	r3, r2
 800bd24:	b2ca      	uxtb	r2, r1
 800bd26:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800bd28:	8afb      	ldrh	r3, [r7, #22]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d102      	bne.n	800bd34 <fit_lfn+0xa8>
 800bd2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd32:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	3301      	adds	r3, #1
 800bd38:	61bb      	str	r3, [r7, #24]
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2b0c      	cmp	r3, #12
 800bd3e:	d9d0      	bls.n	800bce2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800bd40:	8afb      	ldrh	r3, [r7, #22]
 800bd42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d006      	beq.n	800bd58 <fit_lfn+0xcc>
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	4413      	add	r3, r2
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d103      	bne.n	800bd60 <fit_lfn+0xd4>
 800bd58:	79fb      	ldrb	r3, [r7, #7]
 800bd5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd5e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	79fa      	ldrb	r2, [r7, #7]
 800bd64:	701a      	strb	r2, [r3, #0]
}
 800bd66:	bf00      	nop
 800bd68:	3724      	adds	r7, #36	; 0x24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bc80      	pop	{r7}
 800bd6e:	4770      	bx	lr
 800bd70:	0800e928 	.word	0x0800e928

0800bd74 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08c      	sub	sp, #48	; 0x30
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bd82:	220b      	movs	r2, #11
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f7fe fe18 	bl	800a9bc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2b05      	cmp	r3, #5
 800bd90:	d92b      	bls.n	800bdea <gen_numname+0x76>
		sr = seq;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bd96:	e022      	b.n	800bdde <gen_numname+0x6a>
			wc = *lfn++;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	1c9a      	adds	r2, r3, #2
 800bd9c:	607a      	str	r2, [r7, #4]
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bda2:	2300      	movs	r3, #0
 800bda4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bda6:	e017      	b.n	800bdd8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	005a      	lsls	r2, r3, #1
 800bdac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	4413      	add	r3, r2
 800bdb4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bdb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdb8:	085b      	lsrs	r3, r3, #1
 800bdba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d005      	beq.n	800bdd2 <gen_numname+0x5e>
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bdcc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bdd0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	2b0f      	cmp	r3, #15
 800bddc:	d9e4      	bls.n	800bda8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1d8      	bne.n	800bd98 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bdea:	2307      	movs	r3, #7
 800bdec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 030f 	and.w	r3, r3, #15
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	3330      	adds	r3, #48	; 0x30
 800bdfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bdfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be02:	2b39      	cmp	r3, #57	; 0x39
 800be04:	d904      	bls.n	800be10 <gen_numname+0x9c>
 800be06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be0a:	3307      	adds	r3, #7
 800be0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	1e5a      	subs	r2, r3, #1
 800be14:	62ba      	str	r2, [r7, #40]	; 0x28
 800be16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800be1a:	4413      	add	r3, r2
 800be1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be20:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	091b      	lsrs	r3, r3, #4
 800be28:	603b      	str	r3, [r7, #0]
	} while (seq);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1de      	bne.n	800bdee <gen_numname+0x7a>
	ns[i] = '~';
 800be30:	f107 0214 	add.w	r2, r7, #20
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	4413      	add	r3, r2
 800be38:	227e      	movs	r2, #126	; 0x7e
 800be3a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800be3c:	2300      	movs	r3, #0
 800be3e:	627b      	str	r3, [r7, #36]	; 0x24
 800be40:	e002      	b.n	800be48 <gen_numname+0xd4>
 800be42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be44:	3301      	adds	r3, #1
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
 800be48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d205      	bcs.n	800be5c <gen_numname+0xe8>
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	4413      	add	r3, r2
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	2b20      	cmp	r3, #32
 800be5a:	d1f2      	bne.n	800be42 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	2b07      	cmp	r3, #7
 800be60:	d808      	bhi.n	800be74 <gen_numname+0x100>
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	62ba      	str	r2, [r7, #40]	; 0x28
 800be68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800be6c:	4413      	add	r3, r2
 800be6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800be72:	e000      	b.n	800be76 <gen_numname+0x102>
 800be74:	2120      	movs	r1, #32
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	627a      	str	r2, [r7, #36]	; 0x24
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	460a      	mov	r2, r1
 800be82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	2b07      	cmp	r3, #7
 800be88:	d9e8      	bls.n	800be5c <gen_numname+0xe8>
}
 800be8a:	bf00      	nop
 800be8c:	bf00      	nop
 800be8e:	3730      	adds	r7, #48	; 0x30
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bea0:	230b      	movs	r3, #11
 800bea2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	0852      	lsrs	r2, r2, #1
 800beaa:	01db      	lsls	r3, r3, #7
 800beac:	4313      	orrs	r3, r2
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	1c59      	adds	r1, r3, #1
 800beb4:	6079      	str	r1, [r7, #4]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	4413      	add	r3, r2
 800beba:	73fb      	strb	r3, [r7, #15]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	60bb      	str	r3, [r7, #8]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1ed      	bne.n	800bea4 <sum_sfn+0x10>
	return sum;
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3714      	adds	r7, #20
 800bece:	46bd      	mov	sp, r7
 800bed0:	bc80      	pop	{r7}
 800bed2:	4770      	bx	lr

0800bed4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bedc:	2100      	movs	r1, #0
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff fc33 	bl	800b74a <dir_sdi>
 800bee4:	4603      	mov	r3, r0
 800bee6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bee8:	7dfb      	ldrb	r3, [r7, #23]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <dir_find+0x1e>
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	e0a0      	b.n	800c034 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800bef2:	23ff      	movs	r3, #255	; 0xff
 800bef4:	753b      	strb	r3, [r7, #20]
 800bef6:	7d3b      	ldrb	r3, [r7, #20]
 800bef8:	757b      	strb	r3, [r7, #21]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf00:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	f7fe ffc2 	bl	800ae96 <move_window>
 800bf12:	4603      	mov	r3, r0
 800bf14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f040 8085 	bne.w	800c028 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	695b      	ldr	r3, [r3, #20]
 800bf22:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf2a:	7dbb      	ldrb	r3, [r7, #22]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d102      	bne.n	800bf36 <dir_find+0x62>
 800bf30:	2304      	movs	r3, #4
 800bf32:	75fb      	strb	r3, [r7, #23]
 800bf34:	e07d      	b.n	800c032 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	330b      	adds	r3, #11
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf40:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bf42:	7dbb      	ldrb	r3, [r7, #22]
 800bf44:	2be5      	cmp	r3, #229	; 0xe5
 800bf46:	d007      	beq.n	800bf58 <dir_find+0x84>
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	f003 0308 	and.w	r3, r3, #8
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d009      	beq.n	800bf66 <dir_find+0x92>
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
 800bf54:	2b0f      	cmp	r3, #15
 800bf56:	d006      	beq.n	800bf66 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800bf58:	23ff      	movs	r3, #255	; 0xff
 800bf5a:	757b      	strb	r3, [r7, #21]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf62:	849a      	strh	r2, [r3, #36]	; 0x24
 800bf64:	e055      	b.n	800c012 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
 800bf68:	2b0f      	cmp	r3, #15
 800bf6a:	d12f      	bne.n	800bfcc <dir_find+0xf8>
				if (dp->lfn) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d04e      	beq.n	800c012 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bf74:	7dbb      	ldrb	r3, [r7, #22]
 800bf76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00c      	beq.n	800bf98 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	7b5b      	ldrb	r3, [r3, #13]
 800bf82:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800bf84:	7dbb      	ldrb	r3, [r7, #22]
 800bf86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf8a:	75bb      	strb	r3, [r7, #22]
 800bf8c:	7dbb      	ldrb	r3, [r7, #22]
 800bf8e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	88da      	ldrh	r2, [r3, #6]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800bf98:	7dba      	ldrb	r2, [r7, #22]
 800bf9a:	7d7b      	ldrb	r3, [r7, #21]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d112      	bne.n	800bfc6 <dir_find+0xf2>
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	330d      	adds	r3, #13
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	7d3a      	ldrb	r2, [r7, #20]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d10c      	bne.n	800bfc6 <dir_find+0xf2>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a1b      	ldr	r3, [r3, #32]
 800bfb0:	6939      	ldr	r1, [r7, #16]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fdfc 	bl	800bbb0 <cmp_lfn>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d003      	beq.n	800bfc6 <dir_find+0xf2>
 800bfbe:	7d7b      	ldrb	r3, [r7, #21]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	e000      	b.n	800bfc8 <dir_find+0xf4>
 800bfc6:	23ff      	movs	r3, #255	; 0xff
 800bfc8:	757b      	strb	r3, [r7, #21]
 800bfca:	e022      	b.n	800c012 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800bfcc:	7d7b      	ldrb	r3, [r7, #21]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d107      	bne.n	800bfe2 <dir_find+0x10e>
 800bfd2:	6938      	ldr	r0, [r7, #16]
 800bfd4:	f7ff ff5e 	bl	800be94 <sum_sfn>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	461a      	mov	r2, r3
 800bfdc:	7d3b      	ldrb	r3, [r7, #20]
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d024      	beq.n	800c02c <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	330b      	adds	r3, #11
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d109      	bne.n	800c006 <dir_find+0x132>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	699b      	ldr	r3, [r3, #24]
 800bff6:	220b      	movs	r2, #11
 800bff8:	4619      	mov	r1, r3
 800bffa:	6938      	ldr	r0, [r7, #16]
 800bffc:	f7fe fd16 	bl	800aa2c <mem_cmp>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d014      	beq.n	800c030 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c006:	23ff      	movs	r3, #255	; 0xff
 800c008:	757b      	strb	r3, [r7, #21]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c010:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800c012:	2100      	movs	r1, #0
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff fc37 	bl	800b888 <dir_next>
 800c01a:	4603      	mov	r3, r0
 800c01c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f43f af6e 	beq.w	800bf02 <dir_find+0x2e>
 800c026:	e004      	b.n	800c032 <dir_find+0x15e>
		if (res != FR_OK) break;
 800c028:	bf00      	nop
 800c02a:	e002      	b.n	800c032 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c02c:	bf00      	nop
 800c02e:	e000      	b.n	800c032 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c030:	bf00      	nop

	return res;
 800c032:	7dfb      	ldrb	r3, [r7, #23]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08c      	sub	sp, #48	; 0x30
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	623b      	str	r3, [r7, #32]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800c050:	f107 030c 	add.w	r3, r7, #12
 800c054:	220c      	movs	r2, #12
 800c056:	6a39      	ldr	r1, [r7, #32]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fe fcaf 	bl	800a9bc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c05e:	7dfb      	ldrb	r3, [r7, #23]
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	2b00      	cmp	r3, #0
 800c066:	d035      	beq.n	800c0d4 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	330b      	adds	r3, #11
 800c06c:	2200      	movs	r2, #0
 800c06e:	701a      	strb	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 800c076:	2301      	movs	r3, #1
 800c078:	62bb      	str	r3, [r7, #40]	; 0x28
 800c07a:	e013      	b.n	800c0a4 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800c07c:	f107 010c 	add.w	r1, r7, #12
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	6a38      	ldr	r0, [r7, #32]
 800c086:	f7ff fe75 	bl	800bd74 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff ff22 	bl	800bed4 <dir_find>
 800c090:	4603      	mov	r3, r0
 800c092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d106      	bne.n	800c0ac <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 800c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	2b63      	cmp	r3, #99	; 0x63
 800c0a8:	d9e8      	bls.n	800c07c <dir_register+0x40>
 800c0aa:	e000      	b.n	800c0ae <dir_register+0x72>
			if (res != FR_OK) break;
 800c0ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	2b64      	cmp	r3, #100	; 0x64
 800c0b2:	d101      	bne.n	800c0b8 <dir_register+0x7c>
 800c0b4:	2307      	movs	r3, #7
 800c0b6:	e0b5      	b.n	800c224 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c0b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0bc:	2b04      	cmp	r3, #4
 800c0be:	d002      	beq.n	800c0c6 <dir_register+0x8a>
 800c0c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0c4:	e0ae      	b.n	800c224 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800c0c6:	6a3b      	ldr	r3, [r7, #32]
 800c0c8:	330b      	adds	r3, #11
 800c0ca:	7dfa      	ldrb	r2, [r7, #23]
 800c0cc:	701a      	strb	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	69fa      	ldr	r2, [r7, #28]
 800c0d2:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800c0d4:	7dfb      	ldrb	r3, [r7, #23]
 800c0d6:	f003 0302 	and.w	r3, r3, #2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d014      	beq.n	800c108 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0e2:	e002      	b.n	800c0ea <dir_register+0xae>
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	69fa      	ldr	r2, [r7, #28]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1f5      	bne.n	800c0e4 <dir_register+0xa8>
		nent = (n + 25) / 13;
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	3319      	adds	r3, #25
 800c0fc:	4a4b      	ldr	r2, [pc, #300]	; (800c22c <dir_register+0x1f0>)
 800c0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c102:	089b      	lsrs	r3, r3, #2
 800c104:	627b      	str	r3, [r7, #36]	; 0x24
 800c106:	e001      	b.n	800c10c <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800c108:	2301      	movs	r3, #1
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c10c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fcb4 	bl	800ba7c <dir_alloc>
 800c114:	4603      	mov	r3, r0
 800c116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c11a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d14c      	bne.n	800c1bc <dir_register+0x180>
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	3b01      	subs	r3, #1
 800c126:	627b      	str	r3, [r7, #36]	; 0x24
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d046      	beq.n	800c1bc <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	88db      	ldrh	r3, [r3, #6]
 800c132:	461a      	mov	r2, r3
 800c134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	4619      	mov	r1, r3
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7ff fb05 	bl	800b74a <dir_sdi>
 800c140:	4603      	mov	r3, r0
 800c142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d136      	bne.n	800c1bc <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff fe9e 	bl	800be94 <sum_sfn>
 800c158:	4603      	mov	r3, r0
 800c15a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	4619      	mov	r1, r3
 800c166:	4610      	mov	r0, r2
 800c168:	f7fe fe95 	bl	800ae96 <move_window>
 800c16c:	4603      	mov	r3, r0
 800c16e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c176:	2b00      	cmp	r3, #0
 800c178:	d11f      	bne.n	800c1ba <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a18      	ldr	r0, [r3, #32]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6959      	ldr	r1, [r3, #20]
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	b2da      	uxtb	r2, r3
 800c186:	7efb      	ldrb	r3, [r7, #27]
 800c188:	f7ff fd80 	bl	800bc8c <fit_lfn>
				dp->fs->wflag = 1;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 800c196:	2100      	movs	r1, #0
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7ff fb75 	bl	800b888 <dir_next>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c1a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d107      	bne.n	800c1bc <dir_register+0x180>
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1d1      	bne.n	800c15c <dir_register+0x120>
 800c1b8:	e000      	b.n	800c1bc <dir_register+0x180>
				if (res != FR_OK) break;
 800c1ba:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800c1bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d12d      	bne.n	800c220 <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	f7fe fe61 	bl	800ae96 <move_window>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c1da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d11e      	bne.n	800c220 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fc04 	bl	800a9f8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6958      	ldr	r0, [r3, #20]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	220b      	movs	r2, #11
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	f7fe fbde 	bl	800a9bc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	330b      	adds	r3, #11
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	330c      	adds	r3, #12
 800c20e:	f002 0218 	and.w	r2, r2, #24
 800c212:	b2d2      	uxtb	r2, r2
 800c214:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800c220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c224:	4618      	mov	r0, r3
 800c226:	3730      	adds	r7, #48	; 0x30
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	4ec4ec4f 	.word	0x4ec4ec4f

0800c230 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b08a      	sub	sp, #40	; 0x28
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	613b      	str	r3, [r7, #16]
 800c240:	e002      	b.n	800c248 <create_name+0x18>
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3301      	adds	r3, #1
 800c246:	613b      	str	r3, [r7, #16]
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b2f      	cmp	r3, #47	; 0x2f
 800c24e:	d0f8      	beq.n	800c242 <create_name+0x12>
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b5c      	cmp	r3, #92	; 0x5c
 800c256:	d0f4      	beq.n	800c242 <create_name+0x12>
	lfn = dp->lfn;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	61ba      	str	r2, [r7, #24]
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	4413      	add	r3, r2
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800c274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c276:	2b1f      	cmp	r3, #31
 800c278:	d92f      	bls.n	800c2da <create_name+0xaa>
 800c27a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c27c:	2b2f      	cmp	r3, #47	; 0x2f
 800c27e:	d02c      	beq.n	800c2da <create_name+0xaa>
 800c280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c282:	2b5c      	cmp	r3, #92	; 0x5c
 800c284:	d029      	beq.n	800c2da <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2bfe      	cmp	r3, #254	; 0xfe
 800c28a:	d901      	bls.n	800c290 <create_name+0x60>
			return FR_INVALID_NAME;
 800c28c:	2306      	movs	r3, #6
 800c28e:	e176      	b.n	800c57e <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c292:	b2db      	uxtb	r3, r3
 800c294:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c298:	2101      	movs	r1, #1
 800c29a:	4618      	mov	r0, r3
 800c29c:	f001 fd6a 	bl	800dd74 <ff_convert>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c2a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <create_name+0x7e>
 800c2aa:	2306      	movs	r3, #6
 800c2ac:	e167      	b.n	800c57e <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800c2ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b0:	2b7f      	cmp	r3, #127	; 0x7f
 800c2b2:	d809      	bhi.n	800c2c8 <create_name+0x98>
 800c2b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	48b3      	ldr	r0, [pc, #716]	; (800c588 <create_name+0x358>)
 800c2ba:	f7fe fbdd 	bl	800aa78 <chk_chr>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <create_name+0x98>
			return FR_INVALID_NAME;
 800c2c4:	2306      	movs	r3, #6
 800c2c6:	e15a      	b.n	800c57e <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	617a      	str	r2, [r7, #20]
 800c2ce:	005b      	lsls	r3, r3, #1
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c2d8:	e7c5      	b.n	800c266 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c2da:	693a      	ldr	r2, [r7, #16]
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	441a      	add	r2, r3
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800c2e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2e6:	2b1f      	cmp	r3, #31
 800c2e8:	d801      	bhi.n	800c2ee <create_name+0xbe>
 800c2ea:	2304      	movs	r3, #4
 800c2ec:	e000      	b.n	800c2f0 <create_name+0xc0>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800c2f4:	e011      	b.n	800c31a <create_name+0xea>
		w = lfn[di - 1];
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	4413      	add	r3, r2
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c30a:	2b20      	cmp	r3, #32
 800c30c:	d002      	beq.n	800c314 <create_name+0xe4>
 800c30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c310:	2b2e      	cmp	r3, #46	; 0x2e
 800c312:	d106      	bne.n	800c322 <create_name+0xf2>
		di--;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	3b01      	subs	r3, #1
 800c318:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1ea      	bne.n	800c2f6 <create_name+0xc6>
 800c320:	e000      	b.n	800c324 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 800c322:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <create_name+0xfe>
 800c32a:	2306      	movs	r3, #6
 800c32c:	e127      	b.n	800c57e <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	4413      	add	r3, r2
 800c336:	2200      	movs	r2, #0
 800c338:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	699b      	ldr	r3, [r3, #24]
 800c33e:	220b      	movs	r2, #11
 800c340:	2120      	movs	r1, #32
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe fb58 	bl	800a9f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c348:	2300      	movs	r3, #0
 800c34a:	61bb      	str	r3, [r7, #24]
 800c34c:	e002      	b.n	800c354 <create_name+0x124>
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	3301      	adds	r3, #1
 800c352:	61bb      	str	r3, [r7, #24]
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	4413      	add	r3, r2
 800c35c:	881b      	ldrh	r3, [r3, #0]
 800c35e:	2b20      	cmp	r3, #32
 800c360:	d0f5      	beq.n	800c34e <create_name+0x11e>
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	4413      	add	r3, r2
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	2b2e      	cmp	r3, #46	; 0x2e
 800c36e:	d0ee      	beq.n	800c34e <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d009      	beq.n	800c38a <create_name+0x15a>
 800c376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c37a:	f043 0303 	orr.w	r3, r3, #3
 800c37e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c382:	e002      	b.n	800c38a <create_name+0x15a>
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	3b01      	subs	r3, #1
 800c388:	617b      	str	r3, [r7, #20]
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d009      	beq.n	800c3a4 <create_name+0x174>
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c396:	3b01      	subs	r3, #1
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	4413      	add	r3, r2
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a2:	d1ef      	bne.n	800c384 <create_name+0x154>

	b = i = 0; ni = 8;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	623b      	str	r3, [r7, #32]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3ae:	2308      	movs	r3, #8
 800c3b0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	61ba      	str	r2, [r7, #24]
 800c3b8:	005b      	lsls	r3, r3, #1
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	4413      	add	r3, r2
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c3c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 808f 	beq.w	800c4e8 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c3ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3cc:	2b20      	cmp	r3, #32
 800c3ce:	d006      	beq.n	800c3de <create_name+0x1ae>
 800c3d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3d2:	2b2e      	cmp	r3, #46	; 0x2e
 800c3d4:	d10a      	bne.n	800c3ec <create_name+0x1bc>
 800c3d6:	69ba      	ldr	r2, [r7, #24]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d006      	beq.n	800c3ec <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 800c3de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e2:	f043 0303 	orr.w	r3, r3, #3
 800c3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3ea:	e07c      	b.n	800c4e6 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c3ec:	6a3a      	ldr	r2, [r7, #32]
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d203      	bcs.n	800c3fc <create_name+0x1cc>
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d123      	bne.n	800c444 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	2b0b      	cmp	r3, #11
 800c400:	d106      	bne.n	800c410 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 800c402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c406:	f043 0303 	orr.w	r3, r3, #3
 800c40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c40e:	e06e      	b.n	800c4ee <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c410:	69ba      	ldr	r2, [r7, #24]
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	429a      	cmp	r2, r3
 800c416:	d005      	beq.n	800c424 <create_name+0x1f4>
 800c418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c41c:	f043 0303 	orr.w	r3, r3, #3
 800c420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d85f      	bhi.n	800c4ec <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	61bb      	str	r3, [r7, #24]
 800c430:	2308      	movs	r3, #8
 800c432:	623b      	str	r3, [r7, #32]
 800c434:	230b      	movs	r3, #11
 800c436:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c438:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c442:	e050      	b.n	800c4e6 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c446:	2b7f      	cmp	r3, #127	; 0x7f
 800c448:	d914      	bls.n	800c474 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c44a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c44c:	2100      	movs	r1, #0
 800c44e:	4618      	mov	r0, r3
 800c450:	f001 fc90 	bl	800dd74 <ff_convert>
 800c454:	4603      	mov	r3, r0
 800c456:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <create_name+0x238>
 800c45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c460:	3b80      	subs	r3, #128	; 0x80
 800c462:	4a4a      	ldr	r2, [pc, #296]	; (800c58c <create_name+0x35c>)
 800c464:	5cd3      	ldrb	r3, [r2, r3]
 800c466:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c46c:	f043 0302 	orr.w	r3, r3, #2
 800c470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c476:	2b00      	cmp	r3, #0
 800c478:	d007      	beq.n	800c48a <create_name+0x25a>
 800c47a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c47c:	4619      	mov	r1, r3
 800c47e:	4844      	ldr	r0, [pc, #272]	; (800c590 <create_name+0x360>)
 800c480:	f7fe fafa 	bl	800aa78 <chk_chr>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d008      	beq.n	800c49c <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c48a:	235f      	movs	r3, #95	; 0x5f
 800c48c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c48e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c492:	f043 0303 	orr.w	r3, r3, #3
 800c496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c49a:	e01b      	b.n	800c4d4 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c49c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c49e:	2b40      	cmp	r3, #64	; 0x40
 800c4a0:	d909      	bls.n	800c4b6 <create_name+0x286>
 800c4a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a4:	2b5a      	cmp	r3, #90	; 0x5a
 800c4a6:	d806      	bhi.n	800c4b6 <create_name+0x286>
					b |= 2;
 800c4a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4ac:	f043 0302 	orr.w	r3, r3, #2
 800c4b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4b4:	e00e      	b.n	800c4d4 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c4b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b8:	2b60      	cmp	r3, #96	; 0x60
 800c4ba:	d90b      	bls.n	800c4d4 <create_name+0x2a4>
 800c4bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4be:	2b7a      	cmp	r3, #122	; 0x7a
 800c4c0:	d808      	bhi.n	800c4d4 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 800c4c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4c6:	f043 0301 	orr.w	r3, r3, #1
 800c4ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4d0:	3b20      	subs	r3, #32
 800c4d2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	699a      	ldr	r2, [r3, #24]
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	1c59      	adds	r1, r3, #1
 800c4dc:	6239      	str	r1, [r7, #32]
 800c4de:	4413      	add	r3, r2
 800c4e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4e2:	b2d2      	uxtb	r2, r2
 800c4e4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800c4e6:	e764      	b.n	800c3b2 <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 800c4e8:	bf00      	nop
 800c4ea:	e000      	b.n	800c4ee <create_name+0x2be>
			if (si > di) break;			/* No extension */
 800c4ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2be5      	cmp	r3, #229	; 0xe5
 800c4f6:	d103      	bne.n	800c500 <create_name+0x2d0>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	2205      	movs	r2, #5
 800c4fe:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	2b08      	cmp	r3, #8
 800c504:	d104      	bne.n	800c510 <create_name+0x2e0>
 800c506:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800c510:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c514:	f003 030c 	and.w	r3, r3, #12
 800c518:	2b0c      	cmp	r3, #12
 800c51a:	d005      	beq.n	800c528 <create_name+0x2f8>
 800c51c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c520:	f003 0303 	and.w	r3, r3, #3
 800c524:	2b03      	cmp	r3, #3
 800c526:	d105      	bne.n	800c534 <create_name+0x304>
		cf |= NS_LFN;
 800c528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c52c:	f043 0302 	orr.w	r3, r3, #2
 800c530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d117      	bne.n	800c570 <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c540:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c544:	f003 0303 	and.w	r3, r3, #3
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d105      	bne.n	800c558 <create_name+0x328>
 800c54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c550:	f043 0310 	orr.w	r3, r3, #16
 800c554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c55c:	f003 030c 	and.w	r3, r3, #12
 800c560:	2b04      	cmp	r3, #4
 800c562:	d105      	bne.n	800c570 <create_name+0x340>
 800c564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c568:	f043 0308 	orr.w	r3, r3, #8
 800c56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	699b      	ldr	r3, [r3, #24]
 800c574:	330b      	adds	r3, #11
 800c576:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c57a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c57c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3728      	adds	r7, #40	; 0x28
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	0800e848 	.word	0x0800e848
 800c58c:	0800e8a8 	.word	0x0800e8a8
 800c590:	0800e854 	.word	0x0800e854

0800c594 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	2b2f      	cmp	r3, #47	; 0x2f
 800c5a4:	d003      	beq.n	800c5ae <follow_path+0x1a>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	2b5c      	cmp	r3, #92	; 0x5c
 800c5ac:	d102      	bne.n	800c5b4 <follow_path+0x20>
		path++;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b1f      	cmp	r3, #31
 800c5c0:	d809      	bhi.n	800c5d6 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff f8c0 	bl	800b74a <dir_sdi>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	615a      	str	r2, [r3, #20]
 800c5d4:	e041      	b.n	800c65a <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff fe28 	bl	800c230 <create_name>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d132      	bne.n	800c650 <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7ff fc72 	bl	800bed4 <dir_find>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	7adb      	ldrb	r3, [r3, #11]
 800c5fa:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800c5fc:	7bfb      	ldrb	r3, [r7, #15]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	2b04      	cmp	r3, #4
 800c606:	d125      	bne.n	800c654 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c608:	7bbb      	ldrb	r3, [r7, #14]
 800c60a:	f003 0304 	and.w	r3, r3, #4
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d120      	bne.n	800c654 <follow_path+0xc0>
 800c612:	2305      	movs	r3, #5
 800c614:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800c616:	e01d      	b.n	800c654 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	f003 0304 	and.w	r3, r3, #4
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d11a      	bne.n	800c658 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	330b      	adds	r3, #11
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	f003 0310 	and.w	r3, r3, #16
 800c632:	2b00      	cmp	r3, #0
 800c634:	d102      	bne.n	800c63c <follow_path+0xa8>
				res = FR_NO_PATH; break;
 800c636:	2305      	movs	r3, #5
 800c638:	73fb      	strb	r3, [r7, #15]
 800c63a:	e00e      	b.n	800c65a <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff fa60 	bl	800bb08 <ld_clust>
 800c648:	4602      	mov	r2, r0
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c64e:	e7c2      	b.n	800c5d6 <follow_path+0x42>
			if (res != FR_OK) break;
 800c650:	bf00      	nop
 800c652:	e002      	b.n	800c65a <follow_path+0xc6>
				break;
 800c654:	bf00      	nop
 800c656:	e000      	b.n	800c65a <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c658:	bf00      	nop
		}
	}

	return res;
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c664:	b480      	push	{r7}
 800c666:	b087      	sub	sp, #28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c66c:	f04f 33ff 	mov.w	r3, #4294967295
 800c670:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d031      	beq.n	800c6de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	617b      	str	r3, [r7, #20]
 800c680:	e002      	b.n	800c688 <get_ldnumber+0x24>
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	3301      	adds	r3, #1
 800c686:	617b      	str	r3, [r7, #20]
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b1f      	cmp	r3, #31
 800c68e:	d903      	bls.n	800c698 <get_ldnumber+0x34>
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b3a      	cmp	r3, #58	; 0x3a
 800c696:	d1f4      	bne.n	800c682 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b3a      	cmp	r3, #58	; 0x3a
 800c69e:	d11c      	bne.n	800c6da <get_ldnumber+0x76>
			tp = *path;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	60fa      	str	r2, [r7, #12]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	3b30      	subs	r3, #48	; 0x30
 800c6b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b09      	cmp	r3, #9
 800c6b6:	d80e      	bhi.n	800c6d6 <get_ldnumber+0x72>
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d10a      	bne.n	800c6d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d107      	bne.n	800c6d6 <get_ldnumber+0x72>
					vol = (int)i;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	e002      	b.n	800c6e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c6da:	2300      	movs	r3, #0
 800c6dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c6de:	693b      	ldr	r3, [r7, #16]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	371c      	adds	r7, #28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bc80      	pop	{r7}
 800c6e8:	4770      	bx	lr
	...

0800c6ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f04f 32ff 	mov.w	r2, #4294967295
 800c704:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7fe fbc3 	bl	800ae96 <move_window>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <check_fs+0x2e>
		return 3;
 800c716:	2303      	movs	r3, #3
 800c718:	e04a      	b.n	800c7b0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c720:	3301      	adds	r3, #1
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	021b      	lsls	r3, r3, #8
 800c726:	b21a      	sxth	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c72e:	b21b      	sxth	r3, r3
 800c730:	4313      	orrs	r3, r2
 800c732:	b21b      	sxth	r3, r3
 800c734:	4a20      	ldr	r2, [pc, #128]	; (800c7b8 <check_fs+0xcc>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d001      	beq.n	800c73e <check_fs+0x52>
		return 2;
 800c73a:	2302      	movs	r3, #2
 800c73c:	e038      	b.n	800c7b0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3336      	adds	r3, #54	; 0x36
 800c742:	3303      	adds	r3, #3
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	061a      	lsls	r2, r3, #24
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3336      	adds	r3, #54	; 0x36
 800c74c:	3302      	adds	r3, #2
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	041b      	lsls	r3, r3, #16
 800c752:	4313      	orrs	r3, r2
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	3236      	adds	r2, #54	; 0x36
 800c758:	3201      	adds	r2, #1
 800c75a:	7812      	ldrb	r2, [r2, #0]
 800c75c:	0212      	lsls	r2, r2, #8
 800c75e:	4313      	orrs	r3, r2
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c766:	4313      	orrs	r3, r2
 800c768:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c76c:	4a13      	ldr	r2, [pc, #76]	; (800c7bc <check_fs+0xd0>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d101      	bne.n	800c776 <check_fs+0x8a>
		return 0;
 800c772:	2300      	movs	r3, #0
 800c774:	e01c      	b.n	800c7b0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3352      	adds	r3, #82	; 0x52
 800c77a:	3303      	adds	r3, #3
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	061a      	lsls	r2, r3, #24
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3352      	adds	r3, #82	; 0x52
 800c784:	3302      	adds	r3, #2
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	041b      	lsls	r3, r3, #16
 800c78a:	4313      	orrs	r3, r2
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	3252      	adds	r2, #82	; 0x52
 800c790:	3201      	adds	r2, #1
 800c792:	7812      	ldrb	r2, [r2, #0]
 800c794:	0212      	lsls	r2, r2, #8
 800c796:	4313      	orrs	r3, r2
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7a4:	4a05      	ldr	r2, [pc, #20]	; (800c7bc <check_fs+0xd0>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d101      	bne.n	800c7ae <check_fs+0xc2>
		return 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e000      	b.n	800c7b0 <check_fs+0xc4>

	return 1;
 800c7ae:	2301      	movs	r3, #1
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	ffffaa55 	.word	0xffffaa55
 800c7bc:	00544146 	.word	0x00544146

0800c7c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b096      	sub	sp, #88	; 0x58
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c7d4:	68b8      	ldr	r0, [r7, #8]
 800c7d6:	f7ff ff45 	bl	800c664 <get_ldnumber>
 800c7da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	da01      	bge.n	800c7e6 <find_volume+0x26>
 800c7e2:	230b      	movs	r3, #11
 800c7e4:	e2de      	b.n	800cda4 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c7e6:	4ab1      	ldr	r2, [pc, #708]	; (800caac <find_volume+0x2ec>)
 800c7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <find_volume+0x3a>
 800c7f6:	230c      	movs	r3, #12
 800c7f8:	e2d4      	b.n	800cda4 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7fe:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800c806:	2b00      	cmp	r3, #0
 800c808:	d01b      	beq.n	800c842 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800c80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800c810:	4618      	mov	r0, r3
 800c812:	f7fe f835 	bl	800a880 <disk_status>
 800c816:	4603      	mov	r3, r0
 800c818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c81c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10c      	bne.n	800c842 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d007      	beq.n	800c83e <find_volume+0x7e>
 800c82e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c832:	f003 0304 	and.w	r3, r3, #4
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800c83a:	230a      	movs	r3, #10
 800c83c:	e2b2      	b.n	800cda4 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 800c83e:	2300      	movs	r3, #0
 800c840:	e2b0      	b.n	800cda4 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c844:	2200      	movs	r2, #0
 800c846:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe f82a 	bl	800a8b4 <disk_initialize>
 800c860:	4603      	mov	r3, r0
 800c862:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c872:	2303      	movs	r3, #3
 800c874:	e296      	b.n	800cda4 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c876:	79fb      	ldrb	r3, [r7, #7]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d007      	beq.n	800c88c <find_volume+0xcc>
 800c87c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c888:	230a      	movs	r3, #10
 800c88a:	e28b      	b.n	800cda4 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800c88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800c892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c894:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800c898:	461a      	mov	r2, r3
 800c89a:	2102      	movs	r1, #2
 800c89c:	f7fe f870 	bl	800a980 <disk_ioctl>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10b      	bne.n	800c8be <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c8ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8b0:	d305      	bcc.n	800c8be <find_volume+0xfe>
 800c8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c8b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8bc:	d901      	bls.n	800c8c2 <find_volume+0x102>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e270      	b.n	800cda4 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c8c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8ca:	f7ff ff0f 	bl	800c6ec <check_fs>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c8d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d155      	bne.n	800c988 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c8dc:	2300      	movs	r3, #0
 800c8de:	643b      	str	r3, [r7, #64]	; 0x40
 800c8e0:	e029      	b.n	800c936 <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c8e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e6:	011b      	lsls	r3, r3, #4
 800c8e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c8ec:	4413      	add	r3, r2
 800c8ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d012      	beq.n	800c920 <find_volume+0x160>
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fc:	330b      	adds	r3, #11
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	061a      	lsls	r2, r3, #24
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c904:	330a      	adds	r3, #10
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	041b      	lsls	r3, r3, #16
 800c90a:	4313      	orrs	r3, r2
 800c90c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c90e:	3209      	adds	r2, #9
 800c910:	7812      	ldrb	r2, [r2, #0]
 800c912:	0212      	lsls	r2, r2, #8
 800c914:	4313      	orrs	r3, r2
 800c916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c918:	3208      	adds	r2, #8
 800c91a:	7812      	ldrb	r2, [r2, #0]
 800c91c:	431a      	orrs	r2, r3
 800c91e:	e000      	b.n	800c922 <find_volume+0x162>
 800c920:	2200      	movs	r2, #0
 800c922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c92a:	440b      	add	r3, r1
 800c92c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c932:	3301      	adds	r3, #1
 800c934:	643b      	str	r3, [r7, #64]	; 0x40
 800c936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d9d2      	bls.n	800c8e2 <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c93c:	2300      	movs	r3, #0
 800c93e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c942:	2b00      	cmp	r3, #0
 800c944:	d002      	beq.n	800c94c <find_volume+0x18c>
 800c946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c948:	3b01      	subs	r3, #1
 800c94a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c954:	4413      	add	r3, r2
 800c956:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c95a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d005      	beq.n	800c96e <find_volume+0x1ae>
 800c962:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c964:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c966:	f7ff fec1 	bl	800c6ec <check_fs>
 800c96a:	4603      	mov	r3, r0
 800c96c:	e000      	b.n	800c970 <find_volume+0x1b0>
 800c96e:	2302      	movs	r3, #2
 800c970:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c974:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d005      	beq.n	800c988 <find_volume+0x1c8>
 800c97c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c97e:	3301      	adds	r3, #1
 800c980:	643b      	str	r3, [r7, #64]	; 0x40
 800c982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c984:	2b03      	cmp	r3, #3
 800c986:	d9e1      	bls.n	800c94c <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c98c:	2b03      	cmp	r3, #3
 800c98e:	d101      	bne.n	800c994 <find_volume+0x1d4>
 800c990:	2301      	movs	r3, #1
 800c992:	e207      	b.n	800cda4 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <find_volume+0x1e0>
 800c99c:	230d      	movs	r3, #13
 800c99e:	e201      	b.n	800cda4 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	7b1b      	ldrb	r3, [r3, #12]
 800c9a4:	021b      	lsls	r3, r3, #8
 800c9a6:	b21a      	sxth	r2, r3
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	7adb      	ldrb	r3, [r3, #11]
 800c9ac:	b21b      	sxth	r3, r3
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	b21a      	sxth	r2, r3
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c9b8:	b21b      	sxth	r3, r3
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d001      	beq.n	800c9c2 <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 800c9be:	230d      	movs	r3, #13
 800c9c0:	e1f0      	b.n	800cda4 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	7ddb      	ldrb	r3, [r3, #23]
 800c9c6:	021b      	lsls	r3, r3, #8
 800c9c8:	b21a      	sxth	r2, r3
 800c9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9cc:	7d9b      	ldrb	r3, [r3, #22]
 800c9ce:	b21b      	sxth	r3, r3
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	b21b      	sxth	r3, r3
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c9d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d112      	bne.n	800ca04 <find_volume+0x244>
 800c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c9e4:	061a      	lsls	r2, r3, #24
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c9ec:	041b      	lsls	r3, r3, #16
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9f2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c9f6:	0212      	lsls	r2, r2, #8
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9fc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ca00:	4313      	orrs	r3, r2
 800ca02:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca08:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	7c1a      	ldrb	r2, [r3, #16]
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800ca16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca18:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d006      	beq.n	800ca2e <find_volume+0x26e>
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d001      	beq.n	800ca2e <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 800ca2a:	230d      	movs	r3, #13
 800ca2c:	e1ba      	b.n	800cda4 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800ca34:	461a      	mov	r2, r3
 800ca36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca38:	fb02 f303 	mul.w	r3, r2, r3
 800ca3c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca40:	7b5a      	ldrb	r2, [r3, #13]
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00a      	beq.n	800ca68 <find_volume+0x2a8>
 800ca52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca54:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800ca60:	3b01      	subs	r3, #1
 800ca62:	4013      	ands	r3, r2
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 800ca68:	230d      	movs	r3, #13
 800ca6a:	e19b      	b.n	800cda4 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6e:	7c9b      	ldrb	r3, [r3, #18]
 800ca70:	021b      	lsls	r3, r3, #8
 800ca72:	b21a      	sxth	r2, r3
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	7c5b      	ldrb	r3, [r3, #17]
 800ca78:	b21b      	sxth	r3, r3
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	b21b      	sxth	r3, r3
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800ca86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca88:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800ca8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca8e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ca92:	0952      	lsrs	r2, r2, #5
 800ca94:	b292      	uxth	r2, r2
 800ca96:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca9a:	fb02 f201 	mul.w	r2, r2, r1
 800ca9e:	1a9b      	subs	r3, r3, r2
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d004      	beq.n	800cab0 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800caa6:	230d      	movs	r3, #13
 800caa8:	e17c      	b.n	800cda4 <find_volume+0x5e4>
 800caaa:	bf00      	nop
 800caac:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	7d1b      	ldrb	r3, [r3, #20]
 800cab4:	021b      	lsls	r3, r3, #8
 800cab6:	b21a      	sxth	r2, r3
 800cab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caba:	7cdb      	ldrb	r3, [r3, #19]
 800cabc:	b21b      	sxth	r3, r3
 800cabe:	4313      	orrs	r3, r2
 800cac0:	b21b      	sxth	r3, r3
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800cac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d112      	bne.n	800caf2 <find_volume+0x332>
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cad2:	061a      	lsls	r2, r3, #24
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cada:	041b      	lsls	r3, r3, #16
 800cadc:	4313      	orrs	r3, r2
 800cade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cae0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800cae4:	0212      	lsls	r2, r2, #8
 800cae6:	4313      	orrs	r3, r2
 800cae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caea:	f892 2020 	ldrb.w	r2, [r2, #32]
 800caee:	4313      	orrs	r3, r2
 800caf0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	7bdb      	ldrb	r3, [r3, #15]
 800caf6:	021b      	lsls	r3, r3, #8
 800caf8:	b21a      	sxth	r2, r3
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	7b9b      	ldrb	r3, [r3, #14]
 800cafe:	b21b      	sxth	r3, r3
 800cb00:	4313      	orrs	r3, r2
 800cb02:	b21b      	sxth	r3, r3
 800cb04:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800cb06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d101      	bne.n	800cb10 <find_volume+0x350>
 800cb0c:	230d      	movs	r3, #13
 800cb0e:	e149      	b.n	800cda4 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800cb10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb14:	4413      	add	r3, r2
 800cb16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb18:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 800cb1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb1e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800cb22:	0952      	lsrs	r2, r2, #5
 800cb24:	b292      	uxth	r2, r2
 800cb26:	fbb1 f2f2 	udiv	r2, r1, r2
 800cb2a:	b292      	uxth	r2, r2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cb30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d201      	bcs.n	800cb3c <find_volume+0x37c>
 800cb38:	230d      	movs	r3, #13
 800cb3a:	e133      	b.n	800cda4 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800cb3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb44:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800cb48:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb4c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <find_volume+0x398>
 800cb54:	230d      	movs	r3, #13
 800cb56:	e125      	b.n	800cda4 <find_volume+0x5e4>
	fmt = FS_FAT12;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d902      	bls.n	800cb6e <find_volume+0x3ae>
 800cb68:	2302      	movs	r3, #2
 800cb6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d902      	bls.n	800cb7e <find_volume+0x3be>
 800cb78:	2303      	movs	r3, #3
 800cb7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	1c9a      	adds	r2, r3, #2
 800cb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb84:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb8c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800cb90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb94:	441a      	add	r2, r3
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 800cb9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba0:	441a      	add	r2, r3
 800cba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800cba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d121      	bne.n	800cbf4 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <find_volume+0x3fe>
 800cbba:	230d      	movs	r3, #13
 800cbbc:	e0f2      	b.n	800cda4 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbc4:	061a      	lsls	r2, r3, #24
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cbcc:	041b      	lsls	r3, r3, #16
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbd2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800cbd6:	0212      	lsls	r2, r2, #8
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbdc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800cbe0:	431a      	orrs	r2, r3
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	647b      	str	r3, [r7, #68]	; 0x44
 800cbf2:	e025      	b.n	800cc40 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <find_volume+0x442>
 800cbfe:	230d      	movs	r3, #13
 800cc00:	e0d0      	b.n	800cda4 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800cc08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0a:	441a      	add	r2, r3
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d104      	bne.n	800cc24 <find_volume+0x464>
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800cc20:	005b      	lsls	r3, r3, #1
 800cc22:	e00c      	b.n	800cc3e <find_volume+0x47e>
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	005b      	lsls	r3, r3, #1
 800cc2e:	4413      	add	r3, r2
 800cc30:	085a      	lsrs	r2, r3, #1
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800cc3e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800cc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc48:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc50:	440b      	add	r3, r1
 800cc52:	3b01      	subs	r3, #1
 800cc54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc56:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 800cc5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d201      	bcs.n	800cc66 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800cc62:	230d      	movs	r3, #13
 800cc64:	e09e      	b.n	800cda4 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	f04f 32ff 	mov.w	r2, #4294967295
 800cc6c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800cc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc78:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	2280      	movs	r2, #128	; 0x80
 800cc80:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800cc84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc88:	2b03      	cmp	r3, #3
 800cc8a:	d177      	bne.n	800cd7c <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc92:	021b      	lsls	r3, r3, #8
 800cc94:	b21a      	sxth	r2, r3
 800cc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc9c:	b21b      	sxth	r3, r3
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	b21b      	sxth	r3, r3
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d16a      	bne.n	800cd7c <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 800cca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cca8:	3301      	adds	r3, #1
 800ccaa:	4619      	mov	r1, r3
 800ccac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccae:	f7fe f8f2 	bl	800ae96 <move_window>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d161      	bne.n	800cd7c <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800ccc6:	021b      	lsls	r3, r3, #8
 800ccc8:	b21a      	sxth	r2, r3
 800ccca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cccc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ccd0:	b21b      	sxth	r3, r3
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	b21b      	sxth	r3, r3
 800ccd6:	4a35      	ldr	r2, [pc, #212]	; (800cdac <find_volume+0x5ec>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d14f      	bne.n	800cd7c <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	78db      	ldrb	r3, [r3, #3]
 800cce0:	061a      	lsls	r2, r3, #24
 800cce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce4:	789b      	ldrb	r3, [r3, #2]
 800cce6:	041b      	lsls	r3, r3, #16
 800cce8:	4313      	orrs	r3, r2
 800ccea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccec:	7852      	ldrb	r2, [r2, #1]
 800ccee:	0212      	lsls	r2, r2, #8
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccf4:	7812      	ldrb	r2, [r2, #0]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	4a2d      	ldr	r2, [pc, #180]	; (800cdb0 <find_volume+0x5f0>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d13e      	bne.n	800cd7c <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd00:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800cd04:	061a      	lsls	r2, r3, #24
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800cd0c:	041b      	lsls	r3, r3, #16
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd12:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800cd16:	0212      	lsls	r2, r2, #8
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd1c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800cd20:	4313      	orrs	r3, r2
 800cd22:	4a24      	ldr	r2, [pc, #144]	; (800cdb4 <find_volume+0x5f4>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d129      	bne.n	800cd7c <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800cd2e:	061a      	lsls	r2, r3, #24
 800cd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd32:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800cd36:	041b      	lsls	r3, r3, #16
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd3c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800cd40:	0212      	lsls	r2, r2, #8
 800cd42:	4313      	orrs	r3, r2
 800cd44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd46:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800cd58:	061a      	lsls	r2, r3, #24
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800cd60:	041b      	lsls	r3, r3, #16
 800cd62:	4313      	orrs	r3, r2
 800cd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd66:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800cd6a:	0212      	lsls	r2, r2, #8
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd70:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800cd74:	431a      	orrs	r2, r3
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cd82:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 800cd86:	4b0c      	ldr	r3, [pc, #48]	; (800cdb8 <find_volume+0x5f8>)
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	4b0a      	ldr	r3, [pc, #40]	; (800cdb8 <find_volume+0x5f8>)
 800cd90:	801a      	strh	r2, [r3, #0]
 800cd92:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <find_volume+0x5f8>)
 800cd94:	881a      	ldrh	r2, [r3, #0]
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd9e:	f7fe f807 	bl	800adb0 <clear_lock>
#endif

	return FR_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3758      	adds	r7, #88	; 0x58
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	ffffaa55 	.word	0xffffaa55
 800cdb0:	41615252 	.word	0x41615252
 800cdb4:	61417272 	.word	0x61417272
 800cdb8:	200000b0 	.word	0x200000b0

0800cdbc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d01d      	beq.n	800ce0a <validate+0x4e>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d019      	beq.n	800ce0a <validate+0x4e>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d013      	beq.n	800ce0a <validate+0x4e>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	889b      	ldrh	r3, [r3, #4]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d10b      	bne.n	800ce0a <validate+0x4e>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fd fd40 	bl	800a880 <disk_status>
 800ce00:	4603      	mov	r3, r0
 800ce02:	f003 0301 	and.w	r3, r3, #1
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <validate+0x52>
		return FR_INVALID_OBJECT;
 800ce0a:	2309      	movs	r3, #9
 800ce0c:	e000      	b.n	800ce10 <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b088      	sub	sp, #32
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	4613      	mov	r3, r2
 800ce24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800ce2a:	f107 0310 	add.w	r3, r7, #16
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7ff fc18 	bl	800c664 <get_ldnumber>
 800ce34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	da01      	bge.n	800ce40 <f_mount+0x28>
 800ce3c:	230b      	movs	r3, #11
 800ce3e:	e02d      	b.n	800ce9c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce40:	4a18      	ldr	r2, [pc, #96]	; (800cea4 <f_mount+0x8c>)
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d006      	beq.n	800ce5e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800ce50:	69b8      	ldr	r0, [r7, #24]
 800ce52:	f7fd ffad 	bl	800adb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d003      	beq.n	800ce6c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	490d      	ldr	r1, [pc, #52]	; (800cea4 <f_mount+0x8c>)
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d002      	beq.n	800ce82 <f_mount+0x6a>
 800ce7c:	79fb      	ldrb	r3, [r7, #7]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d001      	beq.n	800ce86 <f_mount+0x6e>
 800ce82:	2300      	movs	r3, #0
 800ce84:	e00a      	b.n	800ce9c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800ce86:	f107 0108 	add.w	r1, r7, #8
 800ce8a:	f107 030c 	add.w	r3, r7, #12
 800ce8e:	2200      	movs	r2, #0
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7ff fc95 	bl	800c7c0 <find_volume>
 800ce96:	4603      	mov	r3, r0
 800ce98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3720      	adds	r7, #32
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	200000ac 	.word	0x200000ac

0800cea8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b096      	sub	sp, #88	; 0x58
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <f_open+0x18>
 800cebc:	2309      	movs	r3, #9
 800cebe:	e16d      	b.n	800d19c <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800cec6:	79fb      	ldrb	r3, [r7, #7]
 800cec8:	f003 031f 	and.w	r3, r3, #31
 800cecc:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800cece:	79fb      	ldrb	r3, [r7, #7]
 800ced0:	f023 0301 	bic.w	r3, r3, #1
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	f107 0108 	add.w	r1, r7, #8
 800ceda:	f107 0320 	add.w	r3, r7, #32
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff fc6e 	bl	800c7c0 <find_volume>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ceea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f040 8152 	bne.w	800d198 <f_open+0x2f0>
		INIT_BUF(dj);
 800cef4:	f107 0314 	add.w	r3, r7, #20
 800cef8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cefa:	4baa      	ldr	r3, [pc, #680]	; (800d1a4 <f_open+0x2fc>)
 800cefc:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	f107 0320 	add.w	r3, r7, #32
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff fb44 	bl	800c594 <follow_path>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 800cf12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf14:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d118      	bne.n	800cf50 <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800cf1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d103      	bne.n	800cf2c <f_open+0x84>
				res = FR_INVALID_NAME;
 800cf24:	2306      	movs	r3, #6
 800cf26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800cf2a:	e011      	b.n	800cf50 <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf2c:	79fb      	ldrb	r3, [r7, #7]
 800cf2e:	f023 0301 	bic.w	r3, r3, #1
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	bf14      	ite	ne
 800cf36:	2301      	movne	r3, #1
 800cf38:	2300      	moveq	r3, #0
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	f107 0320 	add.w	r3, r7, #32
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fd fdb1 	bl	800aaac <chk_lock>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	f003 031c 	and.w	r3, r3, #28
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 809a 	beq.w	800d090 <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 800cf5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d019      	beq.n	800cf98 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800cf64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf68:	2b04      	cmp	r3, #4
 800cf6a:	d10e      	bne.n	800cf8a <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf6c:	f7fd fe08 	bl	800ab80 <enq_lock>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d006      	beq.n	800cf84 <f_open+0xdc>
 800cf76:	f107 0320 	add.w	r3, r7, #32
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7ff f85e 	bl	800c03c <dir_register>
 800cf80:	4603      	mov	r3, r0
 800cf82:	e000      	b.n	800cf86 <f_open+0xde>
 800cf84:	2312      	movs	r3, #18
 800cf86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	f043 0308 	orr.w	r3, r3, #8
 800cf90:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 800cf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf94:	653b      	str	r3, [r7, #80]	; 0x50
 800cf96:	e012      	b.n	800cfbe <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf9a:	330b      	adds	r3, #11
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	f003 0311 	and.w	r3, r3, #17
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <f_open+0x106>
					res = FR_DENIED;
 800cfa6:	2307      	movs	r3, #7
 800cfa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800cfac:	e007      	b.n	800cfbe <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	f003 0304 	and.w	r3, r3, #4
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <f_open+0x116>
						res = FR_EXIST;
 800cfb8:	2308      	movs	r3, #8
 800cfba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cfbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f040 8082 	bne.w	800d0cc <f_open+0x224>
 800cfc8:	79fb      	ldrb	r3, [r7, #7]
 800cfca:	f003 0308 	and.w	r3, r3, #8
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d07c      	beq.n	800d0cc <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 800cfd2:	f7fd fbef 	bl	800a7b4 <get_fattime>
 800cfd6:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800cfd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfda:	330e      	adds	r3, #14
 800cfdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfde:	b2d2      	uxtb	r2, r2
 800cfe0:	701a      	strb	r2, [r3, #0]
 800cfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	0a1b      	lsrs	r3, r3, #8
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfec:	330f      	adds	r3, #15
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	701a      	strb	r2, [r3, #0]
 800cff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff4:	0c1a      	lsrs	r2, r3, #16
 800cff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cff8:	3310      	adds	r3, #16
 800cffa:	b2d2      	uxtb	r2, r2
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d000:	0e1a      	lsrs	r2, r3, #24
 800d002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d004:	3311      	adds	r3, #17
 800d006:	b2d2      	uxtb	r2, r2
 800d008:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800d00a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d00c:	330b      	adds	r3, #11
 800d00e:	2200      	movs	r2, #0
 800d010:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800d012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d014:	331c      	adds	r3, #28
 800d016:	2200      	movs	r2, #0
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d01c:	331d      	adds	r3, #29
 800d01e:	2200      	movs	r2, #0
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d024:	331e      	adds	r3, #30
 800d026:	2200      	movs	r2, #0
 800d028:	701a      	strb	r2, [r3, #0]
 800d02a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d02c:	331f      	adds	r3, #31
 800d02e:	2200      	movs	r2, #0
 800d030:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe fd66 	bl	800bb08 <ld_clust>
 800d03c:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 800d03e:	2100      	movs	r1, #0
 800d040:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d042:	f7fe fd8e 	bl	800bb62 <st_clust>
				dj.fs->wflag = 1;
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800d04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d050:	2b00      	cmp	r3, #0
 800d052:	d03b      	beq.n	800d0cc <f_open+0x224>
					dw = dj.fs->winsect;
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800d05a:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 800d05c:	6a3b      	ldr	r3, [r7, #32]
 800d05e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d060:	4618      	mov	r0, r3
 800d062:	f7fe fa43 	bl	800b4ec <remove_chain>
 800d066:	4603      	mov	r3, r0
 800d068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 800d06c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d070:	2b00      	cmp	r3, #0
 800d072:	d12b      	bne.n	800d0cc <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d078:	3a01      	subs	r2, #1
 800d07a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800d07e:	6a3b      	ldr	r3, [r7, #32]
 800d080:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d082:	4618      	mov	r0, r3
 800d084:	f7fd ff07 	bl	800ae96 <move_window>
 800d088:	4603      	mov	r3, r0
 800d08a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d08e:	e01d      	b.n	800d0cc <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800d090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d094:	2b00      	cmp	r3, #0
 800d096:	d119      	bne.n	800d0cc <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800d098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d09a:	330b      	adds	r3, #11
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	f003 0310 	and.w	r3, r3, #16
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d003      	beq.n	800d0ae <f_open+0x206>
					res = FR_NO_FILE;
 800d0a6:	2304      	movs	r3, #4
 800d0a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d0ac:	e00e      	b.n	800d0cc <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800d0ae:	79fb      	ldrb	r3, [r7, #7]
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d009      	beq.n	800d0cc <f_open+0x224>
 800d0b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ba:	330b      	adds	r3, #11
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	f003 0301 	and.w	r3, r3, #1
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <f_open+0x224>
						res = FR_DENIED;
 800d0c6:	2307      	movs	r3, #7
 800d0c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 800d0cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d129      	bne.n	800d128 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d0d4:	79fb      	ldrb	r3, [r7, #7]
 800d0d6:	f003 0308 	and.w	r3, r3, #8
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d003      	beq.n	800d0e6 <f_open+0x23e>
				mode |= FA__WRITTEN;
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	f043 0320 	orr.w	r3, r3, #32
 800d0e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0f4:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	f023 0301 	bic.w	r3, r3, #1
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bf14      	ite	ne
 800d100:	2301      	movne	r3, #1
 800d102:	2300      	moveq	r3, #0
 800d104:	b2db      	uxtb	r3, r3
 800d106:	461a      	mov	r2, r3
 800d108:	f107 0320 	add.w	r3, r7, #32
 800d10c:	4611      	mov	r1, r2
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fd fd5a 	bl	800abc8 <inc_lock>
 800d114:	4602      	mov	r2, r0
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d102      	bne.n	800d128 <f_open+0x280>
 800d122:	2302      	movs	r3, #2
 800d124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800d128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d133      	bne.n	800d198 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	79fa      	ldrb	r2, [r7, #7]
 800d134:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d140:	4618      	mov	r0, r3
 800d142:	f7fe fce1 	bl	800bb08 <ld_clust>
 800d146:	4602      	mov	r2, r0
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800d14c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d14e:	331f      	adds	r3, #31
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	061a      	lsls	r2, r3, #24
 800d154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d156:	331e      	adds	r3, #30
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	041b      	lsls	r3, r3, #16
 800d15c:	4313      	orrs	r3, r2
 800d15e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d160:	321d      	adds	r2, #29
 800d162:	7812      	ldrb	r2, [r2, #0]
 800d164:	0212      	lsls	r2, r2, #8
 800d166:	4313      	orrs	r3, r2
 800d168:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d16a:	321c      	adds	r2, #28
 800d16c:	7812      	ldrb	r2, [r2, #0]
 800d16e:	431a      	orrs	r2, r3
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800d186:	6a3a      	ldr	r2, [r7, #32]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800d198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3758      	adds	r7, #88	; 0x58
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	200000cc 	.word	0x200000cc

0800d1a8 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b08c      	sub	sp, #48	; 0x30
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f7ff fdfb 	bl	800cdbc <validate>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d1ca:	7ffb      	ldrb	r3, [r7, #31]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d001      	beq.n	800d1d4 <f_read+0x2c>
 800d1d0:	7ffb      	ldrb	r3, [r7, #31]
 800d1d2:	e13a      	b.n	800d44a <f_read+0x2a2>
	if (fp->err)								/* Check error */
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	79db      	ldrb	r3, [r3, #7]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	79db      	ldrb	r3, [r3, #7]
 800d1e0:	e133      	b.n	800d44a <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	799b      	ldrb	r3, [r3, #6]
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d1ee:	2307      	movs	r3, #7
 800d1f0:	e12b      	b.n	800d44a <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	68da      	ldr	r2, [r3, #12]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	429a      	cmp	r2, r3
 800d204:	f240 811c 	bls.w	800d440 <f_read+0x298>
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d20c:	e118      	b.n	800d440 <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	6812      	ldr	r2, [r2, #0]
 800d216:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d21a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d21e:	fb02 f201 	mul.w	r2, r2, r1
 800d222:	1a9b      	subs	r3, r3, r2
 800d224:	2b00      	cmp	r3, #0
 800d226:	f040 80bc 	bne.w	800d3a2 <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	6812      	ldr	r2, [r2, #0]
 800d232:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d236:	fbb3 f3f2 	udiv	r3, r3, r2
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d244:	3b01      	subs	r3, #1
 800d246:	b2db      	uxtb	r3, r3
 800d248:	4013      	ands	r3, r2
 800d24a:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800d24c:	7dfb      	ldrb	r3, [r7, #23]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d130      	bne.n	800d2b4 <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d103      	bne.n	800d262 <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d260:	e014      	b.n	800d28c <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	4619      	mov	r1, r3
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f7fe fa32 	bl	800b6da <clmt_clust>
 800d276:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d278:	e008      	b.n	800d28c <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	695b      	ldr	r3, [r3, #20]
 800d282:	4619      	mov	r1, r3
 800d284:	4610      	mov	r0, r2
 800d286:	f7fd ff03 	bl	800b090 <get_fat>
 800d28a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d804      	bhi.n	800d29c <f_read+0xf4>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2202      	movs	r2, #2
 800d296:	71da      	strb	r2, [r3, #7]
 800d298:	2302      	movs	r3, #2
 800d29a:	e0d6      	b.n	800d44a <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a2:	d104      	bne.n	800d2ae <f_read+0x106>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	71da      	strb	r2, [r3, #7]
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e0cd      	b.n	800d44a <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2b2:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	695b      	ldr	r3, [r3, #20]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f7fd fec5 	bl	800b04e <clust2sect>
 800d2c4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d104      	bne.n	800d2d6 <f_read+0x12e>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	71da      	strb	r2, [r3, #7]
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	e0b9      	b.n	800d44a <f_read+0x2a2>
			sect += csect;
 800d2d6:	7dfb      	ldrb	r3, [r7, #23]
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4413      	add	r3, r2
 800d2dc:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2ee:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d052      	beq.n	800d39c <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d2f6:	7dfa      	ldrb	r2, [r7, #23]
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	4413      	add	r3, r2
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	6812      	ldr	r2, [r2, #0]
 800d300:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800d304:	4293      	cmp	r3, r2
 800d306:	d907      	bls.n	800d318 <f_read+0x170>
					cc = fp->fs->csize - csect;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d310:	461a      	mov	r2, r3
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	693a      	ldr	r2, [r7, #16]
 800d324:	6a39      	ldr	r1, [r7, #32]
 800d326:	f7fd faeb 	bl	800a900 <disk_read>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d004      	beq.n	800d33a <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2201      	movs	r2, #1
 800d334:	71da      	strb	r2, [r3, #7]
 800d336:	2301      	movs	r3, #1
 800d338:	e087      	b.n	800d44a <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800d342:	2b00      	cmp	r3, #0
 800d344:	d020      	beq.n	800d388 <f_read+0x1e0>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d354:	429a      	cmp	r2, r3
 800d356:	d917      	bls.n	800d388 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	6812      	ldr	r2, [r2, #0]
 800d368:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d36c:	fb02 f303 	mul.w	r3, r2, r3
 800d370:	6a3a      	ldr	r2, [r7, #32]
 800d372:	18d0      	adds	r0, r2, r3
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4619      	mov	r1, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d382:	461a      	mov	r2, r3
 800d384:	f7fd fb1a 	bl	800a9bc <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d390:	461a      	mov	r2, r3
 800d392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d394:	fb02 f303 	mul.w	r3, r2, r3
 800d398:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800d39a:	e03d      	b.n	800d418 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	6812      	ldr	r2, [r2, #0]
 800d3b4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d3b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3bc:	fb02 f201 	mul.w	r2, r2, r1
 800d3c0:	1a9b      	subs	r3, r3, r2
 800d3c2:	1ac3      	subs	r3, r0, r3
 800d3c4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800d3c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d901      	bls.n	800d3d2 <f_read+0x22a>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	699b      	ldr	r3, [r3, #24]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f7fd fd5a 	bl	800ae96 <move_window>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d004      	beq.n	800d3f2 <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	71da      	strb	r2, [r3, #7]
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e02b      	b.n	800d44a <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6819      	ldr	r1, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	6812      	ldr	r2, [r2, #0]
 800d3fe:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d402:	fbb3 f0f2 	udiv	r0, r3, r2
 800d406:	fb02 f200 	mul.w	r2, r2, r0
 800d40a:	1a9b      	subs	r3, r3, r2
 800d40c:	440b      	add	r3, r1
 800d40e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d410:	4619      	mov	r1, r3
 800d412:	6a38      	ldr	r0, [r7, #32]
 800d414:	f7fd fad2 	bl	800a9bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d418:	6a3a      	ldr	r2, [r7, #32]
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	4413      	add	r3, r2
 800d41e:	623b      	str	r3, [r7, #32]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	689a      	ldr	r2, [r3, #8]
 800d424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d426:	441a      	add	r2, r3
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	609a      	str	r2, [r3, #8]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d432:	441a      	add	r2, r3
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	f47f aee3 	bne.w	800d20e <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3730      	adds	r7, #48	; 0x30
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b08a      	sub	sp, #40	; 0x28
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	607a      	str	r2, [r7, #4]
 800d45e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	2200      	movs	r2, #0
 800d468:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f7ff fca6 	bl	800cdbc <validate>
 800d470:	4603      	mov	r3, r0
 800d472:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d474:	7dfb      	ldrb	r3, [r7, #23]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <f_write+0x2c>
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	e191      	b.n	800d7a2 <f_write+0x350>
	if (fp->err)							/* Check error */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	79db      	ldrb	r3, [r3, #7]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	79db      	ldrb	r3, [r3, #7]
 800d48a:	e18a      	b.n	800d7a2 <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	799b      	ldrb	r3, [r3, #6]
 800d490:	f003 0302 	and.w	r3, r3, #2
 800d494:	2b00      	cmp	r3, #0
 800d496:	d101      	bne.n	800d49c <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d498:	2307      	movs	r3, #7
 800d49a:	e182      	b.n	800d7a2 <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	689a      	ldr	r2, [r3, #8]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	441a      	add	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	f080 8162 	bcs.w	800d772 <f_write+0x320>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800d4b2:	e15e      	b.n	800d772 <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	6812      	ldr	r2, [r2, #0]
 800d4bc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d4c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4c4:	fb02 f201 	mul.w	r2, r2, r1
 800d4c8:	1a9b      	subs	r3, r3, r2
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f040 80fd 	bne.w	800d6ca <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	6812      	ldr	r2, [r2, #0]
 800d4d8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800d4f2:	7dbb      	ldrb	r3, [r7, #22]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d145      	bne.n	800d584 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10d      	bne.n	800d51c <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d11c      	bne.n	800d546 <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2100      	movs	r1, #0
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe f844 	bl	800b5a0 <create_chain>
 800d518:	6278      	str	r0, [r7, #36]	; 0x24
 800d51a:	e014      	b.n	800d546 <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d520:	2b00      	cmp	r3, #0
 800d522:	d007      	beq.n	800d534 <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	4619      	mov	r1, r3
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7fe f8d5 	bl	800b6da <clmt_clust>
 800d530:	6278      	str	r0, [r7, #36]	; 0x24
 800d532:	e008      	b.n	800d546 <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	4619      	mov	r1, r3
 800d53e:	4610      	mov	r0, r2
 800d540:	f7fe f82e 	bl	800b5a0 <create_chain>
 800d544:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 8117 	beq.w	800d77c <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d550:	2b01      	cmp	r3, #1
 800d552:	d104      	bne.n	800d55e <f_write+0x10c>
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2202      	movs	r2, #2
 800d558:	71da      	strb	r2, [r3, #7]
 800d55a:	2302      	movs	r3, #2
 800d55c:	e121      	b.n	800d7a2 <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d564:	d104      	bne.n	800d570 <f_write+0x11e>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2201      	movs	r2, #1
 800d56a:	71da      	strb	r2, [r3, #7]
 800d56c:	2301      	movs	r3, #1
 800d56e:	e118      	b.n	800d7a2 <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d574:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d102      	bne.n	800d584 <f_write+0x132>
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d582:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	699b      	ldr	r3, [r3, #24]
 800d590:	429a      	cmp	r2, r3
 800d592:	d10c      	bne.n	800d5ae <f_write+0x15c>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fd fc33 	bl	800ae04 <sync_window>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d004      	beq.n	800d5ae <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	71da      	strb	r2, [r3, #7]
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e0f9      	b.n	800d7a2 <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	695b      	ldr	r3, [r3, #20]
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	f7fd fd48 	bl	800b04e <clust2sect>
 800d5be:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d104      	bne.n	800d5d0 <f_write+0x17e>
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2202      	movs	r2, #2
 800d5ca:	71da      	strb	r2, [r3, #7]
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	e0e8      	b.n	800d7a2 <f_write+0x350>
			sect += csect;
 800d5d0:	7dbb      	ldrb	r3, [r7, #22]
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5e8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d051      	beq.n	800d694 <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d5f0:	7dba      	ldrb	r2, [r7, #22]
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	6812      	ldr	r2, [r2, #0]
 800d5fa:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d907      	bls.n	800d612 <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d60a:	461a      	mov	r2, r3
 800d60c:	7dbb      	ldrb	r3, [r7, #22]
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	69b9      	ldr	r1, [r7, #24]
 800d620:	f7fd f98e 	bl	800a940 <disk_write>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2201      	movs	r2, #1
 800d62e:	71da      	strb	r2, [r3, #7]
 800d630:	2301      	movs	r3, #1
 800d632:	e0b6      	b.n	800d7a2 <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	69fa      	ldr	r2, [r7, #28]
 800d642:	429a      	cmp	r2, r3
 800d644:	d91c      	bls.n	800d680 <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4618      	mov	r0, r3
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	6812      	ldr	r2, [r2, #0]
 800d65c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d660:	fb02 f303 	mul.w	r3, r2, r3
 800d664:	69ba      	ldr	r2, [r7, #24]
 800d666:	18d1      	adds	r1, r2, r3
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d670:	461a      	mov	r2, r3
 800d672:	f7fd f9a3 	bl	800a9bc <mem_cpy>
					fp->fs->wflag = 0;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d688:	461a      	mov	r2, r3
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	fb02 f303 	mul.w	r3, r2, r3
 800d690:	623b      	str	r3, [r7, #32]
				continue;
 800d692:	e05a      	b.n	800d74a <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	689a      	ldr	r2, [r3, #8]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d311      	bcc.n	800d6c4 <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fd fbad 	bl	800ae04 <sync_window>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <f_write+0x268>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	71da      	strb	r2, [r3, #7]
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e073      	b.n	800d7a2 <f_write+0x350>
				fp->fs->winsect = sect;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	693a      	ldr	r2, [r7, #16]
 800d6c8:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	689b      	ldr	r3, [r3, #8]
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	6812      	ldr	r2, [r2, #0]
 800d6dc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d6e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6e4:	fb02 f201 	mul.w	r2, r2, r1
 800d6e8:	1a9b      	subs	r3, r3, r2
 800d6ea:	1ac3      	subs	r3, r0, r3
 800d6ec:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800d6ee:	6a3a      	ldr	r2, [r7, #32]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d901      	bls.n	800d6fa <f_write+0x2a8>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	4619      	mov	r1, r3
 800d704:	4610      	mov	r0, r2
 800d706:	f7fd fbc6 	bl	800ae96 <move_window>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2201      	movs	r2, #1
 800d714:	71da      	strb	r2, [r3, #7]
 800d716:	2301      	movs	r3, #1
 800d718:	e043      	b.n	800d7a2 <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6819      	ldr	r1, [r3, #0]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	6812      	ldr	r2, [r2, #0]
 800d726:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d72a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d72e:	fb02 f200 	mul.w	r2, r2, r0
 800d732:	1a9b      	subs	r3, r3, r2
 800d734:	440b      	add	r3, r1
 800d736:	6a3a      	ldr	r2, [r7, #32]
 800d738:	69b9      	ldr	r1, [r7, #24]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fd f93e 	bl	800a9bc <mem_cpy>
		fp->fs->wflag = 1;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d74a:	69ba      	ldr	r2, [r7, #24]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	4413      	add	r3, r2
 800d750:	61bb      	str	r3, [r7, #24]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	689a      	ldr	r2, [r3, #8]
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	441a      	add	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	609a      	str	r2, [r3, #8]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	441a      	add	r2, r3
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	f47f ae9d 	bne.w	800d4b4 <f_write+0x62>
 800d77a:	e000      	b.n	800d77e <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d77c:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	689a      	ldr	r2, [r3, #8]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	429a      	cmp	r2, r3
 800d788:	d903      	bls.n	800d792 <f_write+0x340>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	689a      	ldr	r2, [r3, #8]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	799b      	ldrb	r3, [r3, #6]
 800d796:	f043 0320 	orr.w	r3, r3, #32
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3728      	adds	r7, #40	; 0x28
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b086      	sub	sp, #24
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff fb02 	bl	800cdbc <validate>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7bc:	7dfb      	ldrb	r3, [r7, #23]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d178      	bne.n	800d8b4 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	799b      	ldrb	r3, [r3, #6]
 800d7c6:	f003 0320 	and.w	r3, r3, #32
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d072      	beq.n	800d8b4 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	69db      	ldr	r3, [r3, #28]
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	4610      	mov	r0, r2
 800d7da:	f7fd fb5c 	bl	800ae96 <move_window>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d7e2:	7dfb      	ldrb	r3, [r7, #23]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d165      	bne.n	800d8b4 <f_sync+0x10a>
				dir = fp->dir_ptr;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	330b      	adds	r3, #11
 800d7f2:	781a      	ldrb	r2, [r3, #0]
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	330b      	adds	r3, #11
 800d7f8:	f042 0220 	orr.w	r2, r2, #32
 800d7fc:	b2d2      	uxtb	r2, r2
 800d7fe:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	68da      	ldr	r2, [r3, #12]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	331c      	adds	r3, #28
 800d808:	b2d2      	uxtb	r2, r2
 800d80a:	701a      	strb	r2, [r3, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	b29b      	uxth	r3, r3
 800d812:	0a1b      	lsrs	r3, r3, #8
 800d814:	b29a      	uxth	r2, r3
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	331d      	adds	r3, #29
 800d81a:	b2d2      	uxtb	r2, r2
 800d81c:	701a      	strb	r2, [r3, #0]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	0c1a      	lsrs	r2, r3, #16
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	331e      	adds	r3, #30
 800d828:	b2d2      	uxtb	r2, r2
 800d82a:	701a      	strb	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	0e1a      	lsrs	r2, r3, #24
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	331f      	adds	r3, #31
 800d836:	b2d2      	uxtb	r2, r2
 800d838:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	4619      	mov	r1, r3
 800d840:	6938      	ldr	r0, [r7, #16]
 800d842:	f7fe f98e 	bl	800bb62 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d846:	f7fc ffb5 	bl	800a7b4 <get_fattime>
 800d84a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	3316      	adds	r3, #22
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	b2d2      	uxtb	r2, r2
 800d854:	701a      	strb	r2, [r3, #0]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	b29b      	uxth	r3, r3
 800d85a:	0a1b      	lsrs	r3, r3, #8
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	3317      	adds	r3, #23
 800d862:	b2d2      	uxtb	r2, r2
 800d864:	701a      	strb	r2, [r3, #0]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	0c1a      	lsrs	r2, r3, #16
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	3318      	adds	r3, #24
 800d86e:	b2d2      	uxtb	r2, r2
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	0e1a      	lsrs	r2, r3, #24
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	3319      	adds	r3, #25
 800d87a:	b2d2      	uxtb	r2, r2
 800d87c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	3312      	adds	r3, #18
 800d882:	2200      	movs	r2, #0
 800d884:	701a      	strb	r2, [r3, #0]
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	3313      	adds	r3, #19
 800d88a:	2200      	movs	r2, #0
 800d88c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	799b      	ldrb	r3, [r3, #6]
 800d892:	f023 0320 	bic.w	r3, r3, #32
 800d896:	b2da      	uxtb	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fd fb21 	bl	800aef2 <sync_fs>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d8b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3718      	adds	r7, #24
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b084      	sub	sp, #16
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7ff ff6f 	bl	800d7aa <f_sync>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d114      	bne.n	800d900 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7ff fa70 	bl	800cdbc <validate>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10c      	bne.n	800d900 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fd fa1c 	bl	800ad28 <dec_lock>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d900:	7bfb      	ldrb	r3, [r7, #15]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b090      	sub	sp, #64	; 0x40
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff fa51 	bl	800cdbc <validate>
 800d91a:	4603      	mov	r3, r0
 800d91c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d920:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <f_lseek+0x24>
 800d928:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d92c:	e1c4      	b.n	800dcb8 <f_lseek+0x3ae>
	if (fp->err)						/* Check error */
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	79db      	ldrb	r3, [r3, #7]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d002      	beq.n	800d93c <f_lseek+0x32>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	79db      	ldrb	r3, [r3, #7]
 800d93a:	e1bd      	b.n	800dcb8 <f_lseek+0x3ae>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 80b4 	beq.w	800daae <f_lseek+0x1a4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94c:	d15d      	bne.n	800da0a <f_lseek+0x100>
			tbl = fp->cltbl;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	1d1a      	adds	r2, r3, #4
 800d958:	627a      	str	r2, [r7, #36]	; 0x24
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	617b      	str	r3, [r7, #20]
 800d95e:	2302      	movs	r3, #2
 800d960:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d03d      	beq.n	800d9ea <f_lseek+0xe0>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	613b      	str	r3, [r7, #16]
 800d972:	2300      	movs	r3, #0
 800d974:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	3302      	adds	r3, #2
 800d97a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97e:	60fb      	str	r3, [r7, #12]
 800d980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d982:	3301      	adds	r3, #1
 800d984:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fd fb7f 	bl	800b090 <get_fat>
 800d992:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d996:	2b01      	cmp	r3, #1
 800d998:	d804      	bhi.n	800d9a4 <f_lseek+0x9a>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2202      	movs	r2, #2
 800d99e:	71da      	strb	r2, [r3, #7]
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	e189      	b.n	800dcb8 <f_lseek+0x3ae>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9aa:	d104      	bne.n	800d9b6 <f_lseek+0xac>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	71da      	strb	r2, [r3, #7]
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e180      	b.n	800dcb8 <f_lseek+0x3ae>
					} while (cl == pcl + 1);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d0dd      	beq.n	800d97c <f_lseek+0x72>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d9c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d809      	bhi.n	800d9dc <f_lseek+0xd2>
						*tbl++ = ncl; *tbl++ = tcl;
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	1d1a      	adds	r2, r3, #4
 800d9cc:	627a      	str	r2, [r7, #36]	; 0x24
 800d9ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d4:	1d1a      	adds	r2, r3, #4
 800d9d6:	627a      	str	r2, [r7, #36]	; 0x24
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d3c1      	bcc.n	800d96e <f_lseek+0x64>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9f0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800d9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d803      	bhi.n	800da02 <f_lseek+0xf8>
				*tbl = 0;		/* Terminate table */
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	e158      	b.n	800dcb4 <f_lseek+0x3aa>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800da02:	2311      	movs	r3, #17
 800da04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800da08:	e154      	b.n	800dcb4 <f_lseek+0x3aa>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	429a      	cmp	r2, r3
 800da12:	d902      	bls.n	800da1a <f_lseek+0x110>
				ofs = fp->fsize;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	683a      	ldr	r2, [r7, #0]
 800da1e:	609a      	str	r2, [r3, #8]
			if (ofs) {
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	f000 8146 	beq.w	800dcb4 <f_lseek+0x3aa>
				fp->clust = clmt_clust(fp, ofs - 1);
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	4619      	mov	r1, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7fd fe53 	bl	800b6da <clmt_clust>
 800da34:	4602      	mov	r2, r0
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	4619      	mov	r1, r3
 800da44:	4610      	mov	r0, r2
 800da46:	f7fd fb02 	bl	800b04e <clust2sect>
 800da4a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d104      	bne.n	800da5c <f_lseek+0x152>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2202      	movs	r2, #2
 800da56:	71da      	strb	r2, [r3, #7]
 800da58:	2302      	movs	r3, #2
 800da5a:	e12d      	b.n	800dcb8 <f_lseek+0x3ae>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	3b01      	subs	r3, #1
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	6812      	ldr	r2, [r2, #0]
 800da64:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800da68:	fbb3 f3f2 	udiv	r3, r3, r2
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	6812      	ldr	r2, [r2, #0]
 800da70:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800da74:	3a01      	subs	r2, #1
 800da76:	4013      	ands	r3, r2
 800da78:	69ba      	ldr	r2, [r7, #24]
 800da7a:	4413      	add	r3, r2
 800da7c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	6812      	ldr	r2, [r2, #0]
 800da86:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800da8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800da8e:	fb02 f201 	mul.w	r2, r2, r1
 800da92:	1a9b      	subs	r3, r3, r2
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 810d 	beq.w	800dcb4 <f_lseek+0x3aa>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	f000 8107 	beq.w	800dcb4 <f_lseek+0x3aa>
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
						ABORT(fp->fs, FR_DISK_ERR);
#endif
					fp->dsect = dsc;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	69ba      	ldr	r2, [r7, #24]
 800daaa:	619a      	str	r2, [r3, #24]
 800daac:	e102      	b.n	800dcb4 <f_lseek+0x3aa>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	683a      	ldr	r2, [r7, #0]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d908      	bls.n	800daca <f_lseek+0x1c0>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	799b      	ldrb	r3, [r3, #6]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d102      	bne.n	800daca <f_lseek+0x1c0>
#endif
			) ofs = fp->fsize;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	637b      	str	r3, [r7, #52]	; 0x34
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dad8:	609a      	str	r2, [r3, #8]
		if (ofs) {
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 80c3 	beq.w	800dc68 <f_lseek+0x35e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800daea:	461a      	mov	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800daf4:	fb03 f302 	mul.w	r3, r3, r2
 800daf8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01b      	beq.n	800db38 <f_lseek+0x22e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	1e5a      	subs	r2, r3, #1
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	fbb2 f2f3 	udiv	r2, r2, r3
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	1e59      	subs	r1, r3, #1
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800db14:	429a      	cmp	r2, r3
 800db16:	d30f      	bcc.n	800db38 <f_lseek+0x22e>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800db18:	6a3b      	ldr	r3, [r7, #32]
 800db1a:	1e5a      	subs	r2, r3, #1
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	425b      	negs	r3, r3
 800db20:	401a      	ands	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	683a      	ldr	r2, [r7, #0]
 800db2c:	1ad3      	subs	r3, r2, r3
 800db2e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	695b      	ldr	r3, [r3, #20]
 800db34:	63bb      	str	r3, [r7, #56]	; 0x38
 800db36:	e023      	b.n	800db80 <f_lseek+0x276>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800db3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db40:	2b00      	cmp	r3, #0
 800db42:	d11a      	bne.n	800db7a <f_lseek+0x270>
					clst = create_chain(fp->fs, 0);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2100      	movs	r1, #0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fd fd28 	bl	800b5a0 <create_chain>
 800db50:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800db52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db54:	2b01      	cmp	r3, #1
 800db56:	d104      	bne.n	800db62 <f_lseek+0x258>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2202      	movs	r2, #2
 800db5c:	71da      	strb	r2, [r3, #7]
 800db5e:	2302      	movs	r3, #2
 800db60:	e0aa      	b.n	800dcb8 <f_lseek+0x3ae>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800db62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db68:	d104      	bne.n	800db74 <f_lseek+0x26a>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2201      	movs	r2, #1
 800db6e:	71da      	strb	r2, [r3, #7]
 800db70:	2301      	movs	r3, #1
 800db72:	e0a1      	b.n	800dcb8 <f_lseek+0x3ae>
					fp->sclust = clst;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db78:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db7e:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 800db80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db82:	2b00      	cmp	r3, #0
 800db84:	d070      	beq.n	800dc68 <f_lseek+0x35e>
				while (ofs > bcs) {						/* Cluster following loop */
 800db86:	e03e      	b.n	800dc06 <f_lseek+0x2fc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	799b      	ldrb	r3, [r3, #6]
 800db8c:	f003 0302 	and.w	r3, r3, #2
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00c      	beq.n	800dbae <f_lseek+0x2a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fd fd00 	bl	800b5a0 <create_chain>
 800dba0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d109      	bne.n	800dbbc <f_lseek+0x2b2>
							ofs = bcs; break;
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	603b      	str	r3, [r7, #0]
 800dbac:	e02f      	b.n	800dc0e <f_lseek+0x304>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fd fa6b 	bl	800b090 <get_fat>
 800dbba:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc2:	d104      	bne.n	800dbce <f_lseek+0x2c4>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	71da      	strb	r2, [r3, #7]
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e074      	b.n	800dcb8 <f_lseek+0x3ae>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800dbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d906      	bls.n	800dbe2 <f_lseek+0x2d8>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800dbdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d304      	bcc.n	800dbec <f_lseek+0x2e2>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	71da      	strb	r2, [r3, #7]
 800dbe8:	2302      	movs	r3, #2
 800dbea:	e065      	b.n	800dcb8 <f_lseek+0x3ae>
					fp->clust = clst;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbf0:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	689a      	ldr	r2, [r3, #8]
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	441a      	add	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d8bc      	bhi.n	800db88 <f_lseek+0x27e>
				}
				fp->fptr += ofs;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	689a      	ldr	r2, [r3, #8]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	441a      	add	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dc22:	461a      	mov	r2, r3
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc2a:	fb02 f201 	mul.w	r2, r2, r1
 800dc2e:	1a9b      	subs	r3, r3, r2
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d019      	beq.n	800dc68 <f_lseek+0x35e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fd fa07 	bl	800b04e <clust2sect>
 800dc40:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800dc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d104      	bne.n	800dc52 <f_lseek+0x348>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2202      	movs	r2, #2
 800dc4c:	71da      	strb	r2, [r3, #7]
 800dc4e:	2302      	movs	r3, #2
 800dc50:	e032      	b.n	800dcb8 <f_lseek+0x3ae>
					nsect += ofs / SS(fp->fs);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc64:	4413      	add	r3, r2
 800dc66:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	6812      	ldr	r2, [r2, #0]
 800dc70:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dc74:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc78:	fb02 f201 	mul.w	r2, r2, r1
 800dc7c:	1a9b      	subs	r3, r3, r2
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d007      	beq.n	800dc92 <f_lseek+0x388>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	699b      	ldr	r3, [r3, #24]
 800dc86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d002      	beq.n	800dc92 <f_lseek+0x388>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc90:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	689a      	ldr	r2, [r3, #8]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d90a      	bls.n	800dcb4 <f_lseek+0x3aa>
			fp->fsize = fp->fptr;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	689a      	ldr	r2, [r3, #8]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	799b      	ldrb	r3, [r3, #6]
 800dcaa:	f043 0320 	orr.w	r3, r3, #32
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800dcb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3740      	adds	r7, #64	; 0x40
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	4613      	mov	r3, r2
 800dccc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800dcd6:	4b1e      	ldr	r3, [pc, #120]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dcd8:	7a5b      	ldrb	r3, [r3, #9]
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d831      	bhi.n	800dd44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dce0:	4b1b      	ldr	r3, [pc, #108]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dce2:	7a5b      	ldrb	r3, [r3, #9]
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	461a      	mov	r2, r3
 800dce8:	4b19      	ldr	r3, [pc, #100]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dcea:	2100      	movs	r1, #0
 800dcec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800dcee:	4b18      	ldr	r3, [pc, #96]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dcf0:	7a5b      	ldrb	r3, [r3, #9]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	4a16      	ldr	r2, [pc, #88]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800dcfe:	4b14      	ldr	r3, [pc, #80]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dd00:	7a5b      	ldrb	r3, [r3, #9]
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	461a      	mov	r2, r3
 800dd06:	4b12      	ldr	r3, [pc, #72]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dd08:	4413      	add	r3, r2
 800dd0a:	79fa      	ldrb	r2, [r7, #7]
 800dd0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd0e:	4b10      	ldr	r3, [pc, #64]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dd10:	7a5b      	ldrb	r3, [r3, #9]
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	1c5a      	adds	r2, r3, #1
 800dd16:	b2d1      	uxtb	r1, r2
 800dd18:	4a0d      	ldr	r2, [pc, #52]	; (800dd50 <FATFS_LinkDriverEx+0x90>)
 800dd1a:	7251      	strb	r1, [r2, #9]
 800dd1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd1e:	7dbb      	ldrb	r3, [r7, #22]
 800dd20:	3330      	adds	r3, #48	; 0x30
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	223a      	movs	r2, #58	; 0x3a
 800dd2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	3302      	adds	r3, #2
 800dd34:	222f      	movs	r2, #47	; 0x2f
 800dd36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	3303      	adds	r3, #3
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	371c      	adds	r7, #28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bc80      	pop	{r7}
 800dd4e:	4770      	bx	lr
 800dd50:	200002cc 	.word	0x200002cc

0800dd54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd5e:	2200      	movs	r2, #0
 800dd60:	6839      	ldr	r1, [r7, #0]
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff ffac 	bl	800dcc0 <FATFS_LinkDriverEx>
 800dd68:	4603      	mov	r3, r0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
	...

0800dd74 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b085      	sub	sp, #20
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	6039      	str	r1, [r7, #0]
 800dd7e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dd80:	88fb      	ldrh	r3, [r7, #6]
 800dd82:	2b7f      	cmp	r3, #127	; 0x7f
 800dd84:	d802      	bhi.n	800dd8c <ff_convert+0x18>
		c = chr;
 800dd86:	88fb      	ldrh	r3, [r7, #6]
 800dd88:	81fb      	strh	r3, [r7, #14]
 800dd8a:	e025      	b.n	800ddd8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00b      	beq.n	800ddaa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dd92:	88fb      	ldrh	r3, [r7, #6]
 800dd94:	2bff      	cmp	r3, #255	; 0xff
 800dd96:	d805      	bhi.n	800dda4 <ff_convert+0x30>
 800dd98:	88fb      	ldrh	r3, [r7, #6]
 800dd9a:	3b80      	subs	r3, #128	; 0x80
 800dd9c:	4a11      	ldr	r2, [pc, #68]	; (800dde4 <ff_convert+0x70>)
 800dd9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dda2:	e000      	b.n	800dda6 <ff_convert+0x32>
 800dda4:	2300      	movs	r3, #0
 800dda6:	81fb      	strh	r3, [r7, #14]
 800dda8:	e016      	b.n	800ddd8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800ddaa:	2300      	movs	r3, #0
 800ddac:	81fb      	strh	r3, [r7, #14]
 800ddae:	e009      	b.n	800ddc4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ddb0:	89fb      	ldrh	r3, [r7, #14]
 800ddb2:	4a0c      	ldr	r2, [pc, #48]	; (800dde4 <ff_convert+0x70>)
 800ddb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddb8:	88fa      	ldrh	r2, [r7, #6]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d006      	beq.n	800ddcc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ddbe:	89fb      	ldrh	r3, [r7, #14]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	81fb      	strh	r3, [r7, #14]
 800ddc4:	89fb      	ldrh	r3, [r7, #14]
 800ddc6:	2b7f      	cmp	r3, #127	; 0x7f
 800ddc8:	d9f2      	bls.n	800ddb0 <ff_convert+0x3c>
 800ddca:	e000      	b.n	800ddce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ddcc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ddce:	89fb      	ldrh	r3, [r7, #14]
 800ddd0:	3380      	adds	r3, #128	; 0x80
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ddd8:	89fb      	ldrh	r3, [r7, #14]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3714      	adds	r7, #20
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bc80      	pop	{r7}
 800dde2:	4770      	bx	lr
 800dde4:	0800e938 	.word	0x0800e938

0800dde8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	e002      	b.n	800ddfe <ff_wtoupper+0x16>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	60fb      	str	r3, [r7, #12]
 800ddfe:	4a0f      	ldr	r2, [pc, #60]	; (800de3c <ff_wtoupper+0x54>)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d006      	beq.n	800de18 <ff_wtoupper+0x30>
 800de0a:	4a0c      	ldr	r2, [pc, #48]	; (800de3c <ff_wtoupper+0x54>)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de12:	88fa      	ldrh	r2, [r7, #6]
 800de14:	429a      	cmp	r2, r3
 800de16:	d1ef      	bne.n	800ddf8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800de18:	4a08      	ldr	r2, [pc, #32]	; (800de3c <ff_wtoupper+0x54>)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d004      	beq.n	800de2e <ff_wtoupper+0x46>
 800de24:	4a06      	ldr	r2, [pc, #24]	; (800de40 <ff_wtoupper+0x58>)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de2c:	e000      	b.n	800de30 <ff_wtoupper+0x48>
 800de2e:	88fb      	ldrh	r3, [r7, #6]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	bc80      	pop	{r7}
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	0800ea38 	.word	0x0800ea38
 800de40:	0800ec18 	.word	0x0800ec18

0800de44 <__errno>:
 800de44:	4b01      	ldr	r3, [pc, #4]	; (800de4c <__errno+0x8>)
 800de46:	6818      	ldr	r0, [r3, #0]
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	20000024 	.word	0x20000024

0800de50 <__libc_init_array>:
 800de50:	b570      	push	{r4, r5, r6, lr}
 800de52:	2600      	movs	r6, #0
 800de54:	4d0c      	ldr	r5, [pc, #48]	; (800de88 <__libc_init_array+0x38>)
 800de56:	4c0d      	ldr	r4, [pc, #52]	; (800de8c <__libc_init_array+0x3c>)
 800de58:	1b64      	subs	r4, r4, r5
 800de5a:	10a4      	asrs	r4, r4, #2
 800de5c:	42a6      	cmp	r6, r4
 800de5e:	d109      	bne.n	800de74 <__libc_init_array+0x24>
 800de60:	f000 fc5c 	bl	800e71c <_init>
 800de64:	2600      	movs	r6, #0
 800de66:	4d0a      	ldr	r5, [pc, #40]	; (800de90 <__libc_init_array+0x40>)
 800de68:	4c0a      	ldr	r4, [pc, #40]	; (800de94 <__libc_init_array+0x44>)
 800de6a:	1b64      	subs	r4, r4, r5
 800de6c:	10a4      	asrs	r4, r4, #2
 800de6e:	42a6      	cmp	r6, r4
 800de70:	d105      	bne.n	800de7e <__libc_init_array+0x2e>
 800de72:	bd70      	pop	{r4, r5, r6, pc}
 800de74:	f855 3b04 	ldr.w	r3, [r5], #4
 800de78:	4798      	blx	r3
 800de7a:	3601      	adds	r6, #1
 800de7c:	e7ee      	b.n	800de5c <__libc_init_array+0xc>
 800de7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de82:	4798      	blx	r3
 800de84:	3601      	adds	r6, #1
 800de86:	e7f2      	b.n	800de6e <__libc_init_array+0x1e>
 800de88:	0800ee2c 	.word	0x0800ee2c
 800de8c:	0800ee2c 	.word	0x0800ee2c
 800de90:	0800ee2c 	.word	0x0800ee2c
 800de94:	0800ee30 	.word	0x0800ee30

0800de98 <memset>:
 800de98:	4603      	mov	r3, r0
 800de9a:	4402      	add	r2, r0
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d100      	bne.n	800dea2 <memset+0xa>
 800dea0:	4770      	bx	lr
 800dea2:	f803 1b01 	strb.w	r1, [r3], #1
 800dea6:	e7f9      	b.n	800de9c <memset+0x4>

0800dea8 <siprintf>:
 800dea8:	b40e      	push	{r1, r2, r3}
 800deaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800deae:	b500      	push	{lr}
 800deb0:	b09c      	sub	sp, #112	; 0x70
 800deb2:	ab1d      	add	r3, sp, #116	; 0x74
 800deb4:	9002      	str	r0, [sp, #8]
 800deb6:	9006      	str	r0, [sp, #24]
 800deb8:	9107      	str	r1, [sp, #28]
 800deba:	9104      	str	r1, [sp, #16]
 800debc:	4808      	ldr	r0, [pc, #32]	; (800dee0 <siprintf+0x38>)
 800debe:	4909      	ldr	r1, [pc, #36]	; (800dee4 <siprintf+0x3c>)
 800dec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dec4:	9105      	str	r1, [sp, #20]
 800dec6:	6800      	ldr	r0, [r0, #0]
 800dec8:	a902      	add	r1, sp, #8
 800deca:	9301      	str	r3, [sp, #4]
 800decc:	f000 f868 	bl	800dfa0 <_svfiprintf_r>
 800ded0:	2200      	movs	r2, #0
 800ded2:	9b02      	ldr	r3, [sp, #8]
 800ded4:	701a      	strb	r2, [r3, #0]
 800ded6:	b01c      	add	sp, #112	; 0x70
 800ded8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dedc:	b003      	add	sp, #12
 800dede:	4770      	bx	lr
 800dee0:	20000024 	.word	0x20000024
 800dee4:	ffff0208 	.word	0xffff0208

0800dee8 <__ssputs_r>:
 800dee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deec:	688e      	ldr	r6, [r1, #8]
 800deee:	4682      	mov	sl, r0
 800def0:	429e      	cmp	r6, r3
 800def2:	460c      	mov	r4, r1
 800def4:	4690      	mov	r8, r2
 800def6:	461f      	mov	r7, r3
 800def8:	d838      	bhi.n	800df6c <__ssputs_r+0x84>
 800defa:	898a      	ldrh	r2, [r1, #12]
 800defc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df00:	d032      	beq.n	800df68 <__ssputs_r+0x80>
 800df02:	6825      	ldr	r5, [r4, #0]
 800df04:	6909      	ldr	r1, [r1, #16]
 800df06:	3301      	adds	r3, #1
 800df08:	eba5 0901 	sub.w	r9, r5, r1
 800df0c:	6965      	ldr	r5, [r4, #20]
 800df0e:	444b      	add	r3, r9
 800df10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df18:	106d      	asrs	r5, r5, #1
 800df1a:	429d      	cmp	r5, r3
 800df1c:	bf38      	it	cc
 800df1e:	461d      	movcc	r5, r3
 800df20:	0553      	lsls	r3, r2, #21
 800df22:	d531      	bpl.n	800df88 <__ssputs_r+0xa0>
 800df24:	4629      	mov	r1, r5
 800df26:	f000 fb53 	bl	800e5d0 <_malloc_r>
 800df2a:	4606      	mov	r6, r0
 800df2c:	b950      	cbnz	r0, 800df44 <__ssputs_r+0x5c>
 800df2e:	230c      	movs	r3, #12
 800df30:	f04f 30ff 	mov.w	r0, #4294967295
 800df34:	f8ca 3000 	str.w	r3, [sl]
 800df38:	89a3      	ldrh	r3, [r4, #12]
 800df3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df3e:	81a3      	strh	r3, [r4, #12]
 800df40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df44:	464a      	mov	r2, r9
 800df46:	6921      	ldr	r1, [r4, #16]
 800df48:	f000 face 	bl	800e4e8 <memcpy>
 800df4c:	89a3      	ldrh	r3, [r4, #12]
 800df4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df56:	81a3      	strh	r3, [r4, #12]
 800df58:	6126      	str	r6, [r4, #16]
 800df5a:	444e      	add	r6, r9
 800df5c:	6026      	str	r6, [r4, #0]
 800df5e:	463e      	mov	r6, r7
 800df60:	6165      	str	r5, [r4, #20]
 800df62:	eba5 0509 	sub.w	r5, r5, r9
 800df66:	60a5      	str	r5, [r4, #8]
 800df68:	42be      	cmp	r6, r7
 800df6a:	d900      	bls.n	800df6e <__ssputs_r+0x86>
 800df6c:	463e      	mov	r6, r7
 800df6e:	4632      	mov	r2, r6
 800df70:	4641      	mov	r1, r8
 800df72:	6820      	ldr	r0, [r4, #0]
 800df74:	f000 fac6 	bl	800e504 <memmove>
 800df78:	68a3      	ldr	r3, [r4, #8]
 800df7a:	6822      	ldr	r2, [r4, #0]
 800df7c:	1b9b      	subs	r3, r3, r6
 800df7e:	4432      	add	r2, r6
 800df80:	2000      	movs	r0, #0
 800df82:	60a3      	str	r3, [r4, #8]
 800df84:	6022      	str	r2, [r4, #0]
 800df86:	e7db      	b.n	800df40 <__ssputs_r+0x58>
 800df88:	462a      	mov	r2, r5
 800df8a:	f000 fb7b 	bl	800e684 <_realloc_r>
 800df8e:	4606      	mov	r6, r0
 800df90:	2800      	cmp	r0, #0
 800df92:	d1e1      	bne.n	800df58 <__ssputs_r+0x70>
 800df94:	4650      	mov	r0, sl
 800df96:	6921      	ldr	r1, [r4, #16]
 800df98:	f000 face 	bl	800e538 <_free_r>
 800df9c:	e7c7      	b.n	800df2e <__ssputs_r+0x46>
	...

0800dfa0 <_svfiprintf_r>:
 800dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	4698      	mov	r8, r3
 800dfa6:	898b      	ldrh	r3, [r1, #12]
 800dfa8:	4607      	mov	r7, r0
 800dfaa:	061b      	lsls	r3, r3, #24
 800dfac:	460d      	mov	r5, r1
 800dfae:	4614      	mov	r4, r2
 800dfb0:	b09d      	sub	sp, #116	; 0x74
 800dfb2:	d50e      	bpl.n	800dfd2 <_svfiprintf_r+0x32>
 800dfb4:	690b      	ldr	r3, [r1, #16]
 800dfb6:	b963      	cbnz	r3, 800dfd2 <_svfiprintf_r+0x32>
 800dfb8:	2140      	movs	r1, #64	; 0x40
 800dfba:	f000 fb09 	bl	800e5d0 <_malloc_r>
 800dfbe:	6028      	str	r0, [r5, #0]
 800dfc0:	6128      	str	r0, [r5, #16]
 800dfc2:	b920      	cbnz	r0, 800dfce <_svfiprintf_r+0x2e>
 800dfc4:	230c      	movs	r3, #12
 800dfc6:	603b      	str	r3, [r7, #0]
 800dfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfcc:	e0d1      	b.n	800e172 <_svfiprintf_r+0x1d2>
 800dfce:	2340      	movs	r3, #64	; 0x40
 800dfd0:	616b      	str	r3, [r5, #20]
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfd6:	2320      	movs	r3, #32
 800dfd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfdc:	2330      	movs	r3, #48	; 0x30
 800dfde:	f04f 0901 	mov.w	r9, #1
 800dfe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfe6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e18c <_svfiprintf_r+0x1ec>
 800dfea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfee:	4623      	mov	r3, r4
 800dff0:	469a      	mov	sl, r3
 800dff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dff6:	b10a      	cbz	r2, 800dffc <_svfiprintf_r+0x5c>
 800dff8:	2a25      	cmp	r2, #37	; 0x25
 800dffa:	d1f9      	bne.n	800dff0 <_svfiprintf_r+0x50>
 800dffc:	ebba 0b04 	subs.w	fp, sl, r4
 800e000:	d00b      	beq.n	800e01a <_svfiprintf_r+0x7a>
 800e002:	465b      	mov	r3, fp
 800e004:	4622      	mov	r2, r4
 800e006:	4629      	mov	r1, r5
 800e008:	4638      	mov	r0, r7
 800e00a:	f7ff ff6d 	bl	800dee8 <__ssputs_r>
 800e00e:	3001      	adds	r0, #1
 800e010:	f000 80aa 	beq.w	800e168 <_svfiprintf_r+0x1c8>
 800e014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e016:	445a      	add	r2, fp
 800e018:	9209      	str	r2, [sp, #36]	; 0x24
 800e01a:	f89a 3000 	ldrb.w	r3, [sl]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f000 80a2 	beq.w	800e168 <_svfiprintf_r+0x1c8>
 800e024:	2300      	movs	r3, #0
 800e026:	f04f 32ff 	mov.w	r2, #4294967295
 800e02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e02e:	f10a 0a01 	add.w	sl, sl, #1
 800e032:	9304      	str	r3, [sp, #16]
 800e034:	9307      	str	r3, [sp, #28]
 800e036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e03a:	931a      	str	r3, [sp, #104]	; 0x68
 800e03c:	4654      	mov	r4, sl
 800e03e:	2205      	movs	r2, #5
 800e040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e044:	4851      	ldr	r0, [pc, #324]	; (800e18c <_svfiprintf_r+0x1ec>)
 800e046:	f000 fa41 	bl	800e4cc <memchr>
 800e04a:	9a04      	ldr	r2, [sp, #16]
 800e04c:	b9d8      	cbnz	r0, 800e086 <_svfiprintf_r+0xe6>
 800e04e:	06d0      	lsls	r0, r2, #27
 800e050:	bf44      	itt	mi
 800e052:	2320      	movmi	r3, #32
 800e054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e058:	0711      	lsls	r1, r2, #28
 800e05a:	bf44      	itt	mi
 800e05c:	232b      	movmi	r3, #43	; 0x2b
 800e05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e062:	f89a 3000 	ldrb.w	r3, [sl]
 800e066:	2b2a      	cmp	r3, #42	; 0x2a
 800e068:	d015      	beq.n	800e096 <_svfiprintf_r+0xf6>
 800e06a:	4654      	mov	r4, sl
 800e06c:	2000      	movs	r0, #0
 800e06e:	f04f 0c0a 	mov.w	ip, #10
 800e072:	9a07      	ldr	r2, [sp, #28]
 800e074:	4621      	mov	r1, r4
 800e076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e07a:	3b30      	subs	r3, #48	; 0x30
 800e07c:	2b09      	cmp	r3, #9
 800e07e:	d94e      	bls.n	800e11e <_svfiprintf_r+0x17e>
 800e080:	b1b0      	cbz	r0, 800e0b0 <_svfiprintf_r+0x110>
 800e082:	9207      	str	r2, [sp, #28]
 800e084:	e014      	b.n	800e0b0 <_svfiprintf_r+0x110>
 800e086:	eba0 0308 	sub.w	r3, r0, r8
 800e08a:	fa09 f303 	lsl.w	r3, r9, r3
 800e08e:	4313      	orrs	r3, r2
 800e090:	46a2      	mov	sl, r4
 800e092:	9304      	str	r3, [sp, #16]
 800e094:	e7d2      	b.n	800e03c <_svfiprintf_r+0x9c>
 800e096:	9b03      	ldr	r3, [sp, #12]
 800e098:	1d19      	adds	r1, r3, #4
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	9103      	str	r1, [sp, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	bfbb      	ittet	lt
 800e0a2:	425b      	neglt	r3, r3
 800e0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800e0a8:	9307      	strge	r3, [sp, #28]
 800e0aa:	9307      	strlt	r3, [sp, #28]
 800e0ac:	bfb8      	it	lt
 800e0ae:	9204      	strlt	r2, [sp, #16]
 800e0b0:	7823      	ldrb	r3, [r4, #0]
 800e0b2:	2b2e      	cmp	r3, #46	; 0x2e
 800e0b4:	d10c      	bne.n	800e0d0 <_svfiprintf_r+0x130>
 800e0b6:	7863      	ldrb	r3, [r4, #1]
 800e0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ba:	d135      	bne.n	800e128 <_svfiprintf_r+0x188>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	3402      	adds	r4, #2
 800e0c0:	1d1a      	adds	r2, r3, #4
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	9203      	str	r2, [sp, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	bfb8      	it	lt
 800e0ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0ce:	9305      	str	r3, [sp, #20]
 800e0d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e19c <_svfiprintf_r+0x1fc>
 800e0d4:	2203      	movs	r2, #3
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	7821      	ldrb	r1, [r4, #0]
 800e0da:	f000 f9f7 	bl	800e4cc <memchr>
 800e0de:	b140      	cbz	r0, 800e0f2 <_svfiprintf_r+0x152>
 800e0e0:	2340      	movs	r3, #64	; 0x40
 800e0e2:	eba0 000a 	sub.w	r0, r0, sl
 800e0e6:	fa03 f000 	lsl.w	r0, r3, r0
 800e0ea:	9b04      	ldr	r3, [sp, #16]
 800e0ec:	3401      	adds	r4, #1
 800e0ee:	4303      	orrs	r3, r0
 800e0f0:	9304      	str	r3, [sp, #16]
 800e0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f6:	2206      	movs	r2, #6
 800e0f8:	4825      	ldr	r0, [pc, #148]	; (800e190 <_svfiprintf_r+0x1f0>)
 800e0fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0fe:	f000 f9e5 	bl	800e4cc <memchr>
 800e102:	2800      	cmp	r0, #0
 800e104:	d038      	beq.n	800e178 <_svfiprintf_r+0x1d8>
 800e106:	4b23      	ldr	r3, [pc, #140]	; (800e194 <_svfiprintf_r+0x1f4>)
 800e108:	bb1b      	cbnz	r3, 800e152 <_svfiprintf_r+0x1b2>
 800e10a:	9b03      	ldr	r3, [sp, #12]
 800e10c:	3307      	adds	r3, #7
 800e10e:	f023 0307 	bic.w	r3, r3, #7
 800e112:	3308      	adds	r3, #8
 800e114:	9303      	str	r3, [sp, #12]
 800e116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e118:	4433      	add	r3, r6
 800e11a:	9309      	str	r3, [sp, #36]	; 0x24
 800e11c:	e767      	b.n	800dfee <_svfiprintf_r+0x4e>
 800e11e:	460c      	mov	r4, r1
 800e120:	2001      	movs	r0, #1
 800e122:	fb0c 3202 	mla	r2, ip, r2, r3
 800e126:	e7a5      	b.n	800e074 <_svfiprintf_r+0xd4>
 800e128:	2300      	movs	r3, #0
 800e12a:	f04f 0c0a 	mov.w	ip, #10
 800e12e:	4619      	mov	r1, r3
 800e130:	3401      	adds	r4, #1
 800e132:	9305      	str	r3, [sp, #20]
 800e134:	4620      	mov	r0, r4
 800e136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e13a:	3a30      	subs	r2, #48	; 0x30
 800e13c:	2a09      	cmp	r2, #9
 800e13e:	d903      	bls.n	800e148 <_svfiprintf_r+0x1a8>
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0c5      	beq.n	800e0d0 <_svfiprintf_r+0x130>
 800e144:	9105      	str	r1, [sp, #20]
 800e146:	e7c3      	b.n	800e0d0 <_svfiprintf_r+0x130>
 800e148:	4604      	mov	r4, r0
 800e14a:	2301      	movs	r3, #1
 800e14c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e150:	e7f0      	b.n	800e134 <_svfiprintf_r+0x194>
 800e152:	ab03      	add	r3, sp, #12
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	462a      	mov	r2, r5
 800e158:	4638      	mov	r0, r7
 800e15a:	4b0f      	ldr	r3, [pc, #60]	; (800e198 <_svfiprintf_r+0x1f8>)
 800e15c:	a904      	add	r1, sp, #16
 800e15e:	f3af 8000 	nop.w
 800e162:	1c42      	adds	r2, r0, #1
 800e164:	4606      	mov	r6, r0
 800e166:	d1d6      	bne.n	800e116 <_svfiprintf_r+0x176>
 800e168:	89ab      	ldrh	r3, [r5, #12]
 800e16a:	065b      	lsls	r3, r3, #25
 800e16c:	f53f af2c 	bmi.w	800dfc8 <_svfiprintf_r+0x28>
 800e170:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e172:	b01d      	add	sp, #116	; 0x74
 800e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e178:	ab03      	add	r3, sp, #12
 800e17a:	9300      	str	r3, [sp, #0]
 800e17c:	462a      	mov	r2, r5
 800e17e:	4638      	mov	r0, r7
 800e180:	4b05      	ldr	r3, [pc, #20]	; (800e198 <_svfiprintf_r+0x1f8>)
 800e182:	a904      	add	r1, sp, #16
 800e184:	f000 f87c 	bl	800e280 <_printf_i>
 800e188:	e7eb      	b.n	800e162 <_svfiprintf_r+0x1c2>
 800e18a:	bf00      	nop
 800e18c:	0800edf8 	.word	0x0800edf8
 800e190:	0800ee02 	.word	0x0800ee02
 800e194:	00000000 	.word	0x00000000
 800e198:	0800dee9 	.word	0x0800dee9
 800e19c:	0800edfe 	.word	0x0800edfe

0800e1a0 <_printf_common>:
 800e1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a4:	4616      	mov	r6, r2
 800e1a6:	4699      	mov	r9, r3
 800e1a8:	688a      	ldr	r2, [r1, #8]
 800e1aa:	690b      	ldr	r3, [r1, #16]
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	bfb8      	it	lt
 800e1b2:	4613      	movlt	r3, r2
 800e1b4:	6033      	str	r3, [r6, #0]
 800e1b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1c0:	b10a      	cbz	r2, 800e1c6 <_printf_common+0x26>
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	6033      	str	r3, [r6, #0]
 800e1c6:	6823      	ldr	r3, [r4, #0]
 800e1c8:	0699      	lsls	r1, r3, #26
 800e1ca:	bf42      	ittt	mi
 800e1cc:	6833      	ldrmi	r3, [r6, #0]
 800e1ce:	3302      	addmi	r3, #2
 800e1d0:	6033      	strmi	r3, [r6, #0]
 800e1d2:	6825      	ldr	r5, [r4, #0]
 800e1d4:	f015 0506 	ands.w	r5, r5, #6
 800e1d8:	d106      	bne.n	800e1e8 <_printf_common+0x48>
 800e1da:	f104 0a19 	add.w	sl, r4, #25
 800e1de:	68e3      	ldr	r3, [r4, #12]
 800e1e0:	6832      	ldr	r2, [r6, #0]
 800e1e2:	1a9b      	subs	r3, r3, r2
 800e1e4:	42ab      	cmp	r3, r5
 800e1e6:	dc28      	bgt.n	800e23a <_printf_common+0x9a>
 800e1e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1ec:	1e13      	subs	r3, r2, #0
 800e1ee:	6822      	ldr	r2, [r4, #0]
 800e1f0:	bf18      	it	ne
 800e1f2:	2301      	movne	r3, #1
 800e1f4:	0692      	lsls	r2, r2, #26
 800e1f6:	d42d      	bmi.n	800e254 <_printf_common+0xb4>
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e200:	47c0      	blx	r8
 800e202:	3001      	adds	r0, #1
 800e204:	d020      	beq.n	800e248 <_printf_common+0xa8>
 800e206:	6823      	ldr	r3, [r4, #0]
 800e208:	68e5      	ldr	r5, [r4, #12]
 800e20a:	f003 0306 	and.w	r3, r3, #6
 800e20e:	2b04      	cmp	r3, #4
 800e210:	bf18      	it	ne
 800e212:	2500      	movne	r5, #0
 800e214:	6832      	ldr	r2, [r6, #0]
 800e216:	f04f 0600 	mov.w	r6, #0
 800e21a:	68a3      	ldr	r3, [r4, #8]
 800e21c:	bf08      	it	eq
 800e21e:	1aad      	subeq	r5, r5, r2
 800e220:	6922      	ldr	r2, [r4, #16]
 800e222:	bf08      	it	eq
 800e224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e228:	4293      	cmp	r3, r2
 800e22a:	bfc4      	itt	gt
 800e22c:	1a9b      	subgt	r3, r3, r2
 800e22e:	18ed      	addgt	r5, r5, r3
 800e230:	341a      	adds	r4, #26
 800e232:	42b5      	cmp	r5, r6
 800e234:	d11a      	bne.n	800e26c <_printf_common+0xcc>
 800e236:	2000      	movs	r0, #0
 800e238:	e008      	b.n	800e24c <_printf_common+0xac>
 800e23a:	2301      	movs	r3, #1
 800e23c:	4652      	mov	r2, sl
 800e23e:	4649      	mov	r1, r9
 800e240:	4638      	mov	r0, r7
 800e242:	47c0      	blx	r8
 800e244:	3001      	adds	r0, #1
 800e246:	d103      	bne.n	800e250 <_printf_common+0xb0>
 800e248:	f04f 30ff 	mov.w	r0, #4294967295
 800e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e250:	3501      	adds	r5, #1
 800e252:	e7c4      	b.n	800e1de <_printf_common+0x3e>
 800e254:	2030      	movs	r0, #48	; 0x30
 800e256:	18e1      	adds	r1, r4, r3
 800e258:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e262:	4422      	add	r2, r4
 800e264:	3302      	adds	r3, #2
 800e266:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e26a:	e7c5      	b.n	800e1f8 <_printf_common+0x58>
 800e26c:	2301      	movs	r3, #1
 800e26e:	4622      	mov	r2, r4
 800e270:	4649      	mov	r1, r9
 800e272:	4638      	mov	r0, r7
 800e274:	47c0      	blx	r8
 800e276:	3001      	adds	r0, #1
 800e278:	d0e6      	beq.n	800e248 <_printf_common+0xa8>
 800e27a:	3601      	adds	r6, #1
 800e27c:	e7d9      	b.n	800e232 <_printf_common+0x92>
	...

0800e280 <_printf_i>:
 800e280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e284:	460c      	mov	r4, r1
 800e286:	7e27      	ldrb	r7, [r4, #24]
 800e288:	4691      	mov	r9, r2
 800e28a:	2f78      	cmp	r7, #120	; 0x78
 800e28c:	4680      	mov	r8, r0
 800e28e:	469a      	mov	sl, r3
 800e290:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e296:	d807      	bhi.n	800e2a8 <_printf_i+0x28>
 800e298:	2f62      	cmp	r7, #98	; 0x62
 800e29a:	d80a      	bhi.n	800e2b2 <_printf_i+0x32>
 800e29c:	2f00      	cmp	r7, #0
 800e29e:	f000 80d9 	beq.w	800e454 <_printf_i+0x1d4>
 800e2a2:	2f58      	cmp	r7, #88	; 0x58
 800e2a4:	f000 80a4 	beq.w	800e3f0 <_printf_i+0x170>
 800e2a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2b0:	e03a      	b.n	800e328 <_printf_i+0xa8>
 800e2b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2b6:	2b15      	cmp	r3, #21
 800e2b8:	d8f6      	bhi.n	800e2a8 <_printf_i+0x28>
 800e2ba:	a001      	add	r0, pc, #4	; (adr r0, 800e2c0 <_printf_i+0x40>)
 800e2bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e2c0:	0800e319 	.word	0x0800e319
 800e2c4:	0800e32d 	.word	0x0800e32d
 800e2c8:	0800e2a9 	.word	0x0800e2a9
 800e2cc:	0800e2a9 	.word	0x0800e2a9
 800e2d0:	0800e2a9 	.word	0x0800e2a9
 800e2d4:	0800e2a9 	.word	0x0800e2a9
 800e2d8:	0800e32d 	.word	0x0800e32d
 800e2dc:	0800e2a9 	.word	0x0800e2a9
 800e2e0:	0800e2a9 	.word	0x0800e2a9
 800e2e4:	0800e2a9 	.word	0x0800e2a9
 800e2e8:	0800e2a9 	.word	0x0800e2a9
 800e2ec:	0800e43b 	.word	0x0800e43b
 800e2f0:	0800e35d 	.word	0x0800e35d
 800e2f4:	0800e41d 	.word	0x0800e41d
 800e2f8:	0800e2a9 	.word	0x0800e2a9
 800e2fc:	0800e2a9 	.word	0x0800e2a9
 800e300:	0800e45d 	.word	0x0800e45d
 800e304:	0800e2a9 	.word	0x0800e2a9
 800e308:	0800e35d 	.word	0x0800e35d
 800e30c:	0800e2a9 	.word	0x0800e2a9
 800e310:	0800e2a9 	.word	0x0800e2a9
 800e314:	0800e425 	.word	0x0800e425
 800e318:	680b      	ldr	r3, [r1, #0]
 800e31a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e31e:	1d1a      	adds	r2, r3, #4
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	600a      	str	r2, [r1, #0]
 800e324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e328:	2301      	movs	r3, #1
 800e32a:	e0a4      	b.n	800e476 <_printf_i+0x1f6>
 800e32c:	6825      	ldr	r5, [r4, #0]
 800e32e:	6808      	ldr	r0, [r1, #0]
 800e330:	062e      	lsls	r6, r5, #24
 800e332:	f100 0304 	add.w	r3, r0, #4
 800e336:	d50a      	bpl.n	800e34e <_printf_i+0xce>
 800e338:	6805      	ldr	r5, [r0, #0]
 800e33a:	600b      	str	r3, [r1, #0]
 800e33c:	2d00      	cmp	r5, #0
 800e33e:	da03      	bge.n	800e348 <_printf_i+0xc8>
 800e340:	232d      	movs	r3, #45	; 0x2d
 800e342:	426d      	negs	r5, r5
 800e344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e348:	230a      	movs	r3, #10
 800e34a:	485e      	ldr	r0, [pc, #376]	; (800e4c4 <_printf_i+0x244>)
 800e34c:	e019      	b.n	800e382 <_printf_i+0x102>
 800e34e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e352:	6805      	ldr	r5, [r0, #0]
 800e354:	600b      	str	r3, [r1, #0]
 800e356:	bf18      	it	ne
 800e358:	b22d      	sxthne	r5, r5
 800e35a:	e7ef      	b.n	800e33c <_printf_i+0xbc>
 800e35c:	680b      	ldr	r3, [r1, #0]
 800e35e:	6825      	ldr	r5, [r4, #0]
 800e360:	1d18      	adds	r0, r3, #4
 800e362:	6008      	str	r0, [r1, #0]
 800e364:	0628      	lsls	r0, r5, #24
 800e366:	d501      	bpl.n	800e36c <_printf_i+0xec>
 800e368:	681d      	ldr	r5, [r3, #0]
 800e36a:	e002      	b.n	800e372 <_printf_i+0xf2>
 800e36c:	0669      	lsls	r1, r5, #25
 800e36e:	d5fb      	bpl.n	800e368 <_printf_i+0xe8>
 800e370:	881d      	ldrh	r5, [r3, #0]
 800e372:	2f6f      	cmp	r7, #111	; 0x6f
 800e374:	bf0c      	ite	eq
 800e376:	2308      	moveq	r3, #8
 800e378:	230a      	movne	r3, #10
 800e37a:	4852      	ldr	r0, [pc, #328]	; (800e4c4 <_printf_i+0x244>)
 800e37c:	2100      	movs	r1, #0
 800e37e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e382:	6866      	ldr	r6, [r4, #4]
 800e384:	2e00      	cmp	r6, #0
 800e386:	bfa8      	it	ge
 800e388:	6821      	ldrge	r1, [r4, #0]
 800e38a:	60a6      	str	r6, [r4, #8]
 800e38c:	bfa4      	itt	ge
 800e38e:	f021 0104 	bicge.w	r1, r1, #4
 800e392:	6021      	strge	r1, [r4, #0]
 800e394:	b90d      	cbnz	r5, 800e39a <_printf_i+0x11a>
 800e396:	2e00      	cmp	r6, #0
 800e398:	d04d      	beq.n	800e436 <_printf_i+0x1b6>
 800e39a:	4616      	mov	r6, r2
 800e39c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3a0:	fb03 5711 	mls	r7, r3, r1, r5
 800e3a4:	5dc7      	ldrb	r7, [r0, r7]
 800e3a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3aa:	462f      	mov	r7, r5
 800e3ac:	42bb      	cmp	r3, r7
 800e3ae:	460d      	mov	r5, r1
 800e3b0:	d9f4      	bls.n	800e39c <_printf_i+0x11c>
 800e3b2:	2b08      	cmp	r3, #8
 800e3b4:	d10b      	bne.n	800e3ce <_printf_i+0x14e>
 800e3b6:	6823      	ldr	r3, [r4, #0]
 800e3b8:	07df      	lsls	r7, r3, #31
 800e3ba:	d508      	bpl.n	800e3ce <_printf_i+0x14e>
 800e3bc:	6923      	ldr	r3, [r4, #16]
 800e3be:	6861      	ldr	r1, [r4, #4]
 800e3c0:	4299      	cmp	r1, r3
 800e3c2:	bfde      	ittt	le
 800e3c4:	2330      	movle	r3, #48	; 0x30
 800e3c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3ce:	1b92      	subs	r2, r2, r6
 800e3d0:	6122      	str	r2, [r4, #16]
 800e3d2:	464b      	mov	r3, r9
 800e3d4:	4621      	mov	r1, r4
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	f8cd a000 	str.w	sl, [sp]
 800e3dc:	aa03      	add	r2, sp, #12
 800e3de:	f7ff fedf 	bl	800e1a0 <_printf_common>
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	d14c      	bne.n	800e480 <_printf_i+0x200>
 800e3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ea:	b004      	add	sp, #16
 800e3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f0:	4834      	ldr	r0, [pc, #208]	; (800e4c4 <_printf_i+0x244>)
 800e3f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e3f6:	680e      	ldr	r6, [r1, #0]
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800e3fe:	061f      	lsls	r7, r3, #24
 800e400:	600e      	str	r6, [r1, #0]
 800e402:	d514      	bpl.n	800e42e <_printf_i+0x1ae>
 800e404:	07d9      	lsls	r1, r3, #31
 800e406:	bf44      	itt	mi
 800e408:	f043 0320 	orrmi.w	r3, r3, #32
 800e40c:	6023      	strmi	r3, [r4, #0]
 800e40e:	b91d      	cbnz	r5, 800e418 <_printf_i+0x198>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	f023 0320 	bic.w	r3, r3, #32
 800e416:	6023      	str	r3, [r4, #0]
 800e418:	2310      	movs	r3, #16
 800e41a:	e7af      	b.n	800e37c <_printf_i+0xfc>
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	f043 0320 	orr.w	r3, r3, #32
 800e422:	6023      	str	r3, [r4, #0]
 800e424:	2378      	movs	r3, #120	; 0x78
 800e426:	4828      	ldr	r0, [pc, #160]	; (800e4c8 <_printf_i+0x248>)
 800e428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e42c:	e7e3      	b.n	800e3f6 <_printf_i+0x176>
 800e42e:	065e      	lsls	r6, r3, #25
 800e430:	bf48      	it	mi
 800e432:	b2ad      	uxthmi	r5, r5
 800e434:	e7e6      	b.n	800e404 <_printf_i+0x184>
 800e436:	4616      	mov	r6, r2
 800e438:	e7bb      	b.n	800e3b2 <_printf_i+0x132>
 800e43a:	680b      	ldr	r3, [r1, #0]
 800e43c:	6826      	ldr	r6, [r4, #0]
 800e43e:	1d1d      	adds	r5, r3, #4
 800e440:	6960      	ldr	r0, [r4, #20]
 800e442:	600d      	str	r5, [r1, #0]
 800e444:	0635      	lsls	r5, r6, #24
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	d501      	bpl.n	800e44e <_printf_i+0x1ce>
 800e44a:	6018      	str	r0, [r3, #0]
 800e44c:	e002      	b.n	800e454 <_printf_i+0x1d4>
 800e44e:	0671      	lsls	r1, r6, #25
 800e450:	d5fb      	bpl.n	800e44a <_printf_i+0x1ca>
 800e452:	8018      	strh	r0, [r3, #0]
 800e454:	2300      	movs	r3, #0
 800e456:	4616      	mov	r6, r2
 800e458:	6123      	str	r3, [r4, #16]
 800e45a:	e7ba      	b.n	800e3d2 <_printf_i+0x152>
 800e45c:	680b      	ldr	r3, [r1, #0]
 800e45e:	1d1a      	adds	r2, r3, #4
 800e460:	600a      	str	r2, [r1, #0]
 800e462:	681e      	ldr	r6, [r3, #0]
 800e464:	2100      	movs	r1, #0
 800e466:	4630      	mov	r0, r6
 800e468:	6862      	ldr	r2, [r4, #4]
 800e46a:	f000 f82f 	bl	800e4cc <memchr>
 800e46e:	b108      	cbz	r0, 800e474 <_printf_i+0x1f4>
 800e470:	1b80      	subs	r0, r0, r6
 800e472:	6060      	str	r0, [r4, #4]
 800e474:	6863      	ldr	r3, [r4, #4]
 800e476:	6123      	str	r3, [r4, #16]
 800e478:	2300      	movs	r3, #0
 800e47a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e47e:	e7a8      	b.n	800e3d2 <_printf_i+0x152>
 800e480:	4632      	mov	r2, r6
 800e482:	4649      	mov	r1, r9
 800e484:	4640      	mov	r0, r8
 800e486:	6923      	ldr	r3, [r4, #16]
 800e488:	47d0      	blx	sl
 800e48a:	3001      	adds	r0, #1
 800e48c:	d0ab      	beq.n	800e3e6 <_printf_i+0x166>
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	079b      	lsls	r3, r3, #30
 800e492:	d413      	bmi.n	800e4bc <_printf_i+0x23c>
 800e494:	68e0      	ldr	r0, [r4, #12]
 800e496:	9b03      	ldr	r3, [sp, #12]
 800e498:	4298      	cmp	r0, r3
 800e49a:	bfb8      	it	lt
 800e49c:	4618      	movlt	r0, r3
 800e49e:	e7a4      	b.n	800e3ea <_printf_i+0x16a>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	4632      	mov	r2, r6
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4640      	mov	r0, r8
 800e4a8:	47d0      	blx	sl
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	d09b      	beq.n	800e3e6 <_printf_i+0x166>
 800e4ae:	3501      	adds	r5, #1
 800e4b0:	68e3      	ldr	r3, [r4, #12]
 800e4b2:	9903      	ldr	r1, [sp, #12]
 800e4b4:	1a5b      	subs	r3, r3, r1
 800e4b6:	42ab      	cmp	r3, r5
 800e4b8:	dcf2      	bgt.n	800e4a0 <_printf_i+0x220>
 800e4ba:	e7eb      	b.n	800e494 <_printf_i+0x214>
 800e4bc:	2500      	movs	r5, #0
 800e4be:	f104 0619 	add.w	r6, r4, #25
 800e4c2:	e7f5      	b.n	800e4b0 <_printf_i+0x230>
 800e4c4:	0800ee09 	.word	0x0800ee09
 800e4c8:	0800ee1a 	.word	0x0800ee1a

0800e4cc <memchr>:
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	b510      	push	{r4, lr}
 800e4d0:	b2c9      	uxtb	r1, r1
 800e4d2:	4402      	add	r2, r0
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	d101      	bne.n	800e4de <memchr+0x12>
 800e4da:	2000      	movs	r0, #0
 800e4dc:	e003      	b.n	800e4e6 <memchr+0x1a>
 800e4de:	7804      	ldrb	r4, [r0, #0]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	428c      	cmp	r4, r1
 800e4e4:	d1f6      	bne.n	800e4d4 <memchr+0x8>
 800e4e6:	bd10      	pop	{r4, pc}

0800e4e8 <memcpy>:
 800e4e8:	440a      	add	r2, r1
 800e4ea:	4291      	cmp	r1, r2
 800e4ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4f0:	d100      	bne.n	800e4f4 <memcpy+0xc>
 800e4f2:	4770      	bx	lr
 800e4f4:	b510      	push	{r4, lr}
 800e4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4fa:	4291      	cmp	r1, r2
 800e4fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e500:	d1f9      	bne.n	800e4f6 <memcpy+0xe>
 800e502:	bd10      	pop	{r4, pc}

0800e504 <memmove>:
 800e504:	4288      	cmp	r0, r1
 800e506:	b510      	push	{r4, lr}
 800e508:	eb01 0402 	add.w	r4, r1, r2
 800e50c:	d902      	bls.n	800e514 <memmove+0x10>
 800e50e:	4284      	cmp	r4, r0
 800e510:	4623      	mov	r3, r4
 800e512:	d807      	bhi.n	800e524 <memmove+0x20>
 800e514:	1e43      	subs	r3, r0, #1
 800e516:	42a1      	cmp	r1, r4
 800e518:	d008      	beq.n	800e52c <memmove+0x28>
 800e51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e51e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e522:	e7f8      	b.n	800e516 <memmove+0x12>
 800e524:	4601      	mov	r1, r0
 800e526:	4402      	add	r2, r0
 800e528:	428a      	cmp	r2, r1
 800e52a:	d100      	bne.n	800e52e <memmove+0x2a>
 800e52c:	bd10      	pop	{r4, pc}
 800e52e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e536:	e7f7      	b.n	800e528 <memmove+0x24>

0800e538 <_free_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4605      	mov	r5, r0
 800e53c:	2900      	cmp	r1, #0
 800e53e:	d043      	beq.n	800e5c8 <_free_r+0x90>
 800e540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e544:	1f0c      	subs	r4, r1, #4
 800e546:	2b00      	cmp	r3, #0
 800e548:	bfb8      	it	lt
 800e54a:	18e4      	addlt	r4, r4, r3
 800e54c:	f000 f8d0 	bl	800e6f0 <__malloc_lock>
 800e550:	4a1e      	ldr	r2, [pc, #120]	; (800e5cc <_free_r+0x94>)
 800e552:	6813      	ldr	r3, [r2, #0]
 800e554:	4610      	mov	r0, r2
 800e556:	b933      	cbnz	r3, 800e566 <_free_r+0x2e>
 800e558:	6063      	str	r3, [r4, #4]
 800e55a:	6014      	str	r4, [r2, #0]
 800e55c:	4628      	mov	r0, r5
 800e55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e562:	f000 b8cb 	b.w	800e6fc <__malloc_unlock>
 800e566:	42a3      	cmp	r3, r4
 800e568:	d90a      	bls.n	800e580 <_free_r+0x48>
 800e56a:	6821      	ldr	r1, [r4, #0]
 800e56c:	1862      	adds	r2, r4, r1
 800e56e:	4293      	cmp	r3, r2
 800e570:	bf01      	itttt	eq
 800e572:	681a      	ldreq	r2, [r3, #0]
 800e574:	685b      	ldreq	r3, [r3, #4]
 800e576:	1852      	addeq	r2, r2, r1
 800e578:	6022      	streq	r2, [r4, #0]
 800e57a:	6063      	str	r3, [r4, #4]
 800e57c:	6004      	str	r4, [r0, #0]
 800e57e:	e7ed      	b.n	800e55c <_free_r+0x24>
 800e580:	461a      	mov	r2, r3
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	b10b      	cbz	r3, 800e58a <_free_r+0x52>
 800e586:	42a3      	cmp	r3, r4
 800e588:	d9fa      	bls.n	800e580 <_free_r+0x48>
 800e58a:	6811      	ldr	r1, [r2, #0]
 800e58c:	1850      	adds	r0, r2, r1
 800e58e:	42a0      	cmp	r0, r4
 800e590:	d10b      	bne.n	800e5aa <_free_r+0x72>
 800e592:	6820      	ldr	r0, [r4, #0]
 800e594:	4401      	add	r1, r0
 800e596:	1850      	adds	r0, r2, r1
 800e598:	4283      	cmp	r3, r0
 800e59a:	6011      	str	r1, [r2, #0]
 800e59c:	d1de      	bne.n	800e55c <_free_r+0x24>
 800e59e:	6818      	ldr	r0, [r3, #0]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	4401      	add	r1, r0
 800e5a4:	6011      	str	r1, [r2, #0]
 800e5a6:	6053      	str	r3, [r2, #4]
 800e5a8:	e7d8      	b.n	800e55c <_free_r+0x24>
 800e5aa:	d902      	bls.n	800e5b2 <_free_r+0x7a>
 800e5ac:	230c      	movs	r3, #12
 800e5ae:	602b      	str	r3, [r5, #0]
 800e5b0:	e7d4      	b.n	800e55c <_free_r+0x24>
 800e5b2:	6820      	ldr	r0, [r4, #0]
 800e5b4:	1821      	adds	r1, r4, r0
 800e5b6:	428b      	cmp	r3, r1
 800e5b8:	bf01      	itttt	eq
 800e5ba:	6819      	ldreq	r1, [r3, #0]
 800e5bc:	685b      	ldreq	r3, [r3, #4]
 800e5be:	1809      	addeq	r1, r1, r0
 800e5c0:	6021      	streq	r1, [r4, #0]
 800e5c2:	6063      	str	r3, [r4, #4]
 800e5c4:	6054      	str	r4, [r2, #4]
 800e5c6:	e7c9      	b.n	800e55c <_free_r+0x24>
 800e5c8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ca:	bf00      	nop
 800e5cc:	200002d8 	.word	0x200002d8

0800e5d0 <_malloc_r>:
 800e5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d2:	1ccd      	adds	r5, r1, #3
 800e5d4:	f025 0503 	bic.w	r5, r5, #3
 800e5d8:	3508      	adds	r5, #8
 800e5da:	2d0c      	cmp	r5, #12
 800e5dc:	bf38      	it	cc
 800e5de:	250c      	movcc	r5, #12
 800e5e0:	2d00      	cmp	r5, #0
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	db01      	blt.n	800e5ea <_malloc_r+0x1a>
 800e5e6:	42a9      	cmp	r1, r5
 800e5e8:	d903      	bls.n	800e5f2 <_malloc_r+0x22>
 800e5ea:	230c      	movs	r3, #12
 800e5ec:	6033      	str	r3, [r6, #0]
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5f2:	f000 f87d 	bl	800e6f0 <__malloc_lock>
 800e5f6:	4921      	ldr	r1, [pc, #132]	; (800e67c <_malloc_r+0xac>)
 800e5f8:	680a      	ldr	r2, [r1, #0]
 800e5fa:	4614      	mov	r4, r2
 800e5fc:	b99c      	cbnz	r4, 800e626 <_malloc_r+0x56>
 800e5fe:	4f20      	ldr	r7, [pc, #128]	; (800e680 <_malloc_r+0xb0>)
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	b923      	cbnz	r3, 800e60e <_malloc_r+0x3e>
 800e604:	4621      	mov	r1, r4
 800e606:	4630      	mov	r0, r6
 800e608:	f000 f862 	bl	800e6d0 <_sbrk_r>
 800e60c:	6038      	str	r0, [r7, #0]
 800e60e:	4629      	mov	r1, r5
 800e610:	4630      	mov	r0, r6
 800e612:	f000 f85d 	bl	800e6d0 <_sbrk_r>
 800e616:	1c43      	adds	r3, r0, #1
 800e618:	d123      	bne.n	800e662 <_malloc_r+0x92>
 800e61a:	230c      	movs	r3, #12
 800e61c:	4630      	mov	r0, r6
 800e61e:	6033      	str	r3, [r6, #0]
 800e620:	f000 f86c 	bl	800e6fc <__malloc_unlock>
 800e624:	e7e3      	b.n	800e5ee <_malloc_r+0x1e>
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	1b5b      	subs	r3, r3, r5
 800e62a:	d417      	bmi.n	800e65c <_malloc_r+0x8c>
 800e62c:	2b0b      	cmp	r3, #11
 800e62e:	d903      	bls.n	800e638 <_malloc_r+0x68>
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	441c      	add	r4, r3
 800e634:	6025      	str	r5, [r4, #0]
 800e636:	e004      	b.n	800e642 <_malloc_r+0x72>
 800e638:	6863      	ldr	r3, [r4, #4]
 800e63a:	42a2      	cmp	r2, r4
 800e63c:	bf0c      	ite	eq
 800e63e:	600b      	streq	r3, [r1, #0]
 800e640:	6053      	strne	r3, [r2, #4]
 800e642:	4630      	mov	r0, r6
 800e644:	f000 f85a 	bl	800e6fc <__malloc_unlock>
 800e648:	f104 000b 	add.w	r0, r4, #11
 800e64c:	1d23      	adds	r3, r4, #4
 800e64e:	f020 0007 	bic.w	r0, r0, #7
 800e652:	1ac2      	subs	r2, r0, r3
 800e654:	d0cc      	beq.n	800e5f0 <_malloc_r+0x20>
 800e656:	1a1b      	subs	r3, r3, r0
 800e658:	50a3      	str	r3, [r4, r2]
 800e65a:	e7c9      	b.n	800e5f0 <_malloc_r+0x20>
 800e65c:	4622      	mov	r2, r4
 800e65e:	6864      	ldr	r4, [r4, #4]
 800e660:	e7cc      	b.n	800e5fc <_malloc_r+0x2c>
 800e662:	1cc4      	adds	r4, r0, #3
 800e664:	f024 0403 	bic.w	r4, r4, #3
 800e668:	42a0      	cmp	r0, r4
 800e66a:	d0e3      	beq.n	800e634 <_malloc_r+0x64>
 800e66c:	1a21      	subs	r1, r4, r0
 800e66e:	4630      	mov	r0, r6
 800e670:	f000 f82e 	bl	800e6d0 <_sbrk_r>
 800e674:	3001      	adds	r0, #1
 800e676:	d1dd      	bne.n	800e634 <_malloc_r+0x64>
 800e678:	e7cf      	b.n	800e61a <_malloc_r+0x4a>
 800e67a:	bf00      	nop
 800e67c:	200002d8 	.word	0x200002d8
 800e680:	200002dc 	.word	0x200002dc

0800e684 <_realloc_r>:
 800e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e686:	4607      	mov	r7, r0
 800e688:	4614      	mov	r4, r2
 800e68a:	460e      	mov	r6, r1
 800e68c:	b921      	cbnz	r1, 800e698 <_realloc_r+0x14>
 800e68e:	4611      	mov	r1, r2
 800e690:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e694:	f7ff bf9c 	b.w	800e5d0 <_malloc_r>
 800e698:	b922      	cbnz	r2, 800e6a4 <_realloc_r+0x20>
 800e69a:	f7ff ff4d 	bl	800e538 <_free_r>
 800e69e:	4625      	mov	r5, r4
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a4:	f000 f830 	bl	800e708 <_malloc_usable_size_r>
 800e6a8:	42a0      	cmp	r0, r4
 800e6aa:	d20f      	bcs.n	800e6cc <_realloc_r+0x48>
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	4638      	mov	r0, r7
 800e6b0:	f7ff ff8e 	bl	800e5d0 <_malloc_r>
 800e6b4:	4605      	mov	r5, r0
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	d0f2      	beq.n	800e6a0 <_realloc_r+0x1c>
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4622      	mov	r2, r4
 800e6be:	f7ff ff13 	bl	800e4e8 <memcpy>
 800e6c2:	4631      	mov	r1, r6
 800e6c4:	4638      	mov	r0, r7
 800e6c6:	f7ff ff37 	bl	800e538 <_free_r>
 800e6ca:	e7e9      	b.n	800e6a0 <_realloc_r+0x1c>
 800e6cc:	4635      	mov	r5, r6
 800e6ce:	e7e7      	b.n	800e6a0 <_realloc_r+0x1c>

0800e6d0 <_sbrk_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	4d05      	ldr	r5, [pc, #20]	; (800e6ec <_sbrk_r+0x1c>)
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	4608      	mov	r0, r1
 800e6da:	602b      	str	r3, [r5, #0]
 800e6dc:	f7f4 ff74 	bl	80035c8 <_sbrk>
 800e6e0:	1c43      	adds	r3, r0, #1
 800e6e2:	d102      	bne.n	800e6ea <_sbrk_r+0x1a>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	b103      	cbz	r3, 800e6ea <_sbrk_r+0x1a>
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	bd38      	pop	{r3, r4, r5, pc}
 800e6ec:	200011dc 	.word	0x200011dc

0800e6f0 <__malloc_lock>:
 800e6f0:	4801      	ldr	r0, [pc, #4]	; (800e6f8 <__malloc_lock+0x8>)
 800e6f2:	f000 b811 	b.w	800e718 <__retarget_lock_acquire_recursive>
 800e6f6:	bf00      	nop
 800e6f8:	200011e4 	.word	0x200011e4

0800e6fc <__malloc_unlock>:
 800e6fc:	4801      	ldr	r0, [pc, #4]	; (800e704 <__malloc_unlock+0x8>)
 800e6fe:	f000 b80c 	b.w	800e71a <__retarget_lock_release_recursive>
 800e702:	bf00      	nop
 800e704:	200011e4 	.word	0x200011e4

0800e708 <_malloc_usable_size_r>:
 800e708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e70c:	1f18      	subs	r0, r3, #4
 800e70e:	2b00      	cmp	r3, #0
 800e710:	bfbc      	itt	lt
 800e712:	580b      	ldrlt	r3, [r1, r0]
 800e714:	18c0      	addlt	r0, r0, r3
 800e716:	4770      	bx	lr

0800e718 <__retarget_lock_acquire_recursive>:
 800e718:	4770      	bx	lr

0800e71a <__retarget_lock_release_recursive>:
 800e71a:	4770      	bx	lr

0800e71c <_init>:
 800e71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71e:	bf00      	nop
 800e720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e722:	bc08      	pop	{r3}
 800e724:	469e      	mov	lr, r3
 800e726:	4770      	bx	lr

0800e728 <_fini>:
 800e728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e72a:	bf00      	nop
 800e72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e72e:	bc08      	pop	{r3}
 800e730:	469e      	mov	lr, r3
 800e732:	4770      	bx	lr
