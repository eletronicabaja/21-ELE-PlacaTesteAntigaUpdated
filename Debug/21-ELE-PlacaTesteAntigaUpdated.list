
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800d5ec  0800d5ec  0001d5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd2c  0800dd2c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd2c  0800dd2c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd2c  0800dd2c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd2c  0800dd2c  0001dd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd30  0800dd30  0001dd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800dd34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001310  20000088  0800ddbc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  0800ddbc  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b4f  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af3  00000000  00000000  00043c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  000486f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  0004a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca5f  00000000  00000000  0004b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221dc  00000000  00000000  000682e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009898b  00000000  00000000  0008a4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122e4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007014  00000000  00000000  00122ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d5d4 	.word	0x0800d5d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800d5d4 	.word	0x0800d5d4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_f2iz>:
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e78:	d30f      	bcc.n	8000e9a <__aeabi_f2iz+0x2a>
 8000e7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e82:	d90d      	bls.n	8000ea0 <__aeabi_f2iz+0x30>
 8000e84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e8c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e90:	fa23 f002 	lsr.w	r0, r3, r2
 8000e94:	bf18      	it	ne
 8000e96:	4240      	negne	r0, r0
 8000e98:	4770      	bx	lr
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	4770      	bx	lr
 8000ea0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_f2iz+0x3a>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d105      	bne.n	8000eb6 <__aeabi_f2iz+0x46>
 8000eaa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	bf08      	it	eq
 8000eb0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	4770      	bx	lr

08000ebc <ADC_DMA_Init>:
 */

#include <ADC_DMA.h>

void ADC_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <ADC_DMA_Init+0x2c>)
 8000ec2:	f003 fa17 	bl	80042f4 <HAL_ADCEx_Calibration_Start>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <ADC_DMA_Init+0x14>
		Error_Handler();
 8000ecc:	f001 fd0e 	bl	80028ec <Error_Handler>
	if (HAL_ADC_Start_DMA(&hadc1, &analog.buffer, ADC_BUF_SIZE) != HAL_OK)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4906      	ldr	r1, [pc, #24]	; (8000eec <ADC_DMA_Init+0x30>)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <ADC_DMA_Init+0x2c>)
 8000ed6:	f002 ff19 	bl	8003d0c <HAL_ADC_Start_DMA>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <ADC_DMA_Init+0x28>
		Error_Handler();
 8000ee0:	f001 fd04 	bl	80028ec <Error_Handler>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200002e4 	.word	0x200002e4
 8000eec:	200002e0 	.word	0x200002e0

08000ef0 <aceGir_Init>:
 */

#include "ace_gir.h"

HAL_StatusTypeDef aceGir_Init(I2C_HandleTypeDef *hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	6078      	str	r0, [r7, #4]

	aceGir.hi2c = hi2c;
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <aceGir_Init+0x114>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef result;
	uint8_t check;
	uint8_t dados;

	// checar se o módulo está conectado
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <aceGir_Init+0x114>)
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f107 030e 	add.w	r3, r7, #14
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2275      	movs	r2, #117	; 0x75
 8000f16:	21d0      	movs	r1, #208	; 0xd0
 8000f18:	f004 ffa2 	bl	8005e60 <HAL_I2C_Mem_Read>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK)
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <aceGir_Init+0x3a>
		return result;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e068      	b.n	8000ffc <aceGir_Init+0x10c>

	if (check == 104)  // 0x68 = 104 -> será retornado seu o modulo estiver OK
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	2b68      	cmp	r3, #104	; 0x68
 8000f2e:	d15f      	bne.n	8000ff0 <aceGir_Init+0x100>
	{
		// ligar sensor
		dados = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&dados, 1, 1000);
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <aceGir_Init+0x114>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	f107 030d 	add.w	r3, r7, #13
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	226b      	movs	r2, #107	; 0x6b
 8000f4c:	21d0      	movs	r1, #208	; 0xd0
 8000f4e:	f004 fe8d 	bl	8005c6c <HAL_I2C_Mem_Write>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <aceGir_Init+0x70>
			return result;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	e04d      	b.n	8000ffc <aceGir_Init+0x10c>

		// definir frequencia de 1khz
		dados = 0x07;
 8000f60:	2307      	movs	r3, #7
 8000f62:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &dados, 1, 1000);
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <aceGir_Init+0x114>)
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	f107 030d 	add.w	r3, r7, #13
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	2219      	movs	r2, #25
 8000f7c:	21d0      	movs	r1, #208	; 0xd0
 8000f7e:	f004 fe75 	bl	8005c6c <HAL_I2C_Mem_Write>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <aceGir_Init+0xa0>
			return result;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	e035      	b.n	8000ffc <aceGir_Init+0x10c>

		// definir configuracao de acelerometro
		dados = 0x00;
 8000f90:	2300      	movs	r3, #0
 8000f92:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &dados, 1, 1000);
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <aceGir_Init+0x114>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	f107 030d 	add.w	r3, r7, #13
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	221c      	movs	r2, #28
 8000fac:	21d0      	movs	r1, #208	; 0xd0
 8000fae:	f004 fe5d 	bl	8005c6c <HAL_I2C_Mem_Write>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <aceGir_Init+0xd0>
			return result;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	e01d      	b.n	8000ffc <aceGir_Init+0x10c>

		// definir configuracao de giroscopio
		dados = 0x00;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &dados, 1, 1000);
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <aceGir_Init+0x114>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030d 	add.w	r3, r7, #13
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	221b      	movs	r2, #27
 8000fdc:	21d0      	movs	r1, #208	; 0xd0
 8000fde:	f004 fe45 	bl	8005c6c <HAL_I2C_Mem_Write>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <aceGir_Init+0x100>
			return result;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	e005      	b.n	8000ffc <aceGir_Init+0x10c>
	}

	result = HAL_TIM_Base_Start_IT(&htim4);
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <aceGir_Init+0x118>)
 8000ff2:	f006 fef1 	bl	8007dd8 <HAL_TIM_Base_Start_IT>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]

	return result;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000035c 	.word	0x2000035c
 8001008:	20000314 	.word	0x20000314
 800100c:	00000000 	.word	0x00000000

08001010 <aceGir_Read>:

HAL_StatusTypeDef aceGir_Read(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef result;
	uint8_t buf[6];

	/*	Leitura do Acelerometro	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, buf, 6, 1000);
 8001016:	4b70      	ldr	r3, [pc, #448]	; (80011d8 <aceGir_Read+0x1c8>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2306      	movs	r3, #6
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	463b      	mov	r3, r7
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	223b      	movs	r2, #59	; 0x3b
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	f004 ff17 	bl	8005e60 <HAL_I2C_Mem_Read>
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <aceGir_Read+0x30>
		return result;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	e0c3      	b.n	80011c8 <aceGir_Read+0x1b8>

	aceGir.accel.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8001040:	783b      	ldrb	r3, [r7, #0]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	787b      	ldrb	r3, [r7, #1]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b62      	ldr	r3, [pc, #392]	; (80011d8 <aceGir_Read+0x1c8>)
 8001050:	809a      	strh	r2, [r3, #4]
	aceGir.accel.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <aceGir_Read+0x1c8>)
 8001062:	80da      	strh	r2, [r3, #6]
	aceGir.accel.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <aceGir_Read+0x1c8>)
 8001074:	811a      	strh	r2, [r3, #8]

	//converter valores em 'g', dividindo por 16384 (FS_SEL)=0
	aceGir.accel.x = aceGir.accel.X_RAW/16384.0;
 8001076:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <aceGir_Read+0x1c8>)
 8001078:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa6d 	bl	800055c <__aeabi_i2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b55      	ldr	r3, [pc, #340]	; (80011dc <aceGir_Read+0x1cc>)
 8001088:	f7ff fbfc 	bl	8000884 <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd8e 	bl	8000bb4 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <aceGir_Read+0x1c8>)
 800109c:	60d3      	str	r3, [r2, #12]
	aceGir.accel.y = aceGir.accel.Y_RAW/16384.0;
 800109e:	4b4e      	ldr	r3, [pc, #312]	; (80011d8 <aceGir_Read+0x1c8>)
 80010a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa59 	bl	800055c <__aeabi_i2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <aceGir_Read+0x1cc>)
 80010b0:	f7ff fbe8 	bl	8000884 <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd7a 	bl	8000bb4 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <aceGir_Read+0x1c8>)
 80010c4:	6113      	str	r3, [r2, #16]
	aceGir.accel.z = aceGir.accel.Z_RAW/16384.0;
 80010c6:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <aceGir_Read+0x1c8>)
 80010c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa45 	bl	800055c <__aeabi_i2d>
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b41      	ldr	r3, [pc, #260]	; (80011dc <aceGir_Read+0x1cc>)
 80010d8:	f7ff fbd4 	bl	8000884 <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd66 	bl	8000bb4 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a3b      	ldr	r2, [pc, #236]	; (80011d8 <aceGir_Read+0x1c8>)
 80010ec:	6153      	str	r3, [r2, #20]

	/*	Leitura do Giroscopio	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, buf, 6, 1000);
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <aceGir_Read+0x1c8>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2306      	movs	r3, #6
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	463b      	mov	r3, r7
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	2243      	movs	r2, #67	; 0x43
 8001104:	21d0      	movs	r1, #208	; 0xd0
 8001106:	f004 feab 	bl	8005e60 <HAL_I2C_Mem_Read>
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <aceGir_Read+0x108>
		return result;
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	e057      	b.n	80011c8 <aceGir_Read+0x1b8>

	aceGir.gyro.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8001118:	783b      	ldrb	r3, [r7, #0]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	787b      	ldrb	r3, [r7, #1]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <aceGir_Read+0x1c8>)
 8001128:	831a      	strh	r2, [r3, #24]
	aceGir.gyro.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 800112a:	78bb      	ldrb	r3, [r7, #2]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <aceGir_Read+0x1c8>)
 800113a:	835a      	strh	r2, [r3, #26]
	aceGir.gyro.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 800113c:	793b      	ldrb	r3, [r7, #4]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <aceGir_Read+0x1c8>)
 800114c:	839a      	strh	r2, [r3, #28]

	//converter valores em 'graus/segundo', dividindo por 131 (FS_SEL)=0
	aceGir.gyro.x = aceGir.gyro.X_RAW/131.0;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <aceGir_Read+0x1c8>)
 8001150:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fa01 	bl	800055c <__aeabi_i2d>
 800115a:	a31d      	add	r3, pc, #116	; (adr r3, 80011d0 <aceGir_Read+0x1c0>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fb90 	bl	8000884 <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd22 	bl	8000bb4 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <aceGir_Read+0x1c8>)
 8001174:	6213      	str	r3, [r2, #32]
	aceGir.gyro.y = aceGir.gyro.Y_RAW/131.0;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <aceGir_Read+0x1c8>)
 8001178:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9ed 	bl	800055c <__aeabi_i2d>
 8001182:	a313      	add	r3, pc, #76	; (adr r3, 80011d0 <aceGir_Read+0x1c0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb7c 	bl	8000884 <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd0e 	bl	8000bb4 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <aceGir_Read+0x1c8>)
 800119c:	6253      	str	r3, [r2, #36]	; 0x24
	aceGir.gyro.z = aceGir.gyro.Z_RAW/131.0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <aceGir_Read+0x1c8>)
 80011a0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9d9 	bl	800055c <__aeabi_i2d>
 80011aa:	a309      	add	r3, pc, #36	; (adr r3, 80011d0 <aceGir_Read+0x1c0>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff fb68 	bl	8000884 <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fcfa 	bl	8000bb4 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <aceGir_Read+0x1c8>)
 80011c4:	6293      	str	r3, [r2, #40]	; 0x28



	return result;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40606000 	.word	0x40606000
 80011d8:	2000035c 	.word	0x2000035c
 80011dc:	40d00000 	.word	0x40d00000

080011e0 <can_bus_Init>:

#include "can_bus.h"
#include "ace_gir.h"

void can_bus_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;

	canBus.tx_header.StdId = 				0x000;						//Id Padrão (11Bit)
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <can_bus_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
	canBus.tx_header.ExtId = 				0x000;						//Id Extendido (29Bit, STDID+18)
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <can_bus_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
	canBus.tx_header.IDE = 					CAN_ID_STD;					//Define se está usando id padrão (CAN_ID_STD) ou estendido (CAN_ID_EXT)
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <can_bus_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
	canBus.tx_header.RTR = 					CAN_RTR_DATA;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <can_bus_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
	canBus.tx_header.DLC = 					1;							//Quantidade de bytes por mensagem (1 a 8)
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <can_bus_Init+0x90>)
 8001200:	2201      	movs	r2, #1
 8001202:	61da      	str	r2, [r3, #28]
	canBus.tx_header.TransmitGlobalTime =	DISABLE;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <can_bus_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]

	canBus.filter.FilterIdHigh = 			0x010 << 5;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <can_bus_Init+0x90>)
 800120e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
	canBus.filter.FilterIdLow = 			0x000 << 5;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <can_bus_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
	canBus.filter.FilterMaskIdHigh = 		0x7F0 << 5;
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <can_bus_Init+0x90>)
 800121c:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 8001220:	649a      	str	r2, [r3, #72]	; 0x48
	canBus.filter.FilterMaskIdLow = 		0x000 << 5;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <can_bus_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	64da      	str	r2, [r3, #76]	; 0x4c
	canBus.filter.FilterFIFOAssignment = 	CAN_FILTER_FIFO0;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <can_bus_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	651a      	str	r2, [r3, #80]	; 0x50
	canBus.filter.FilterBank = 				0;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <can_bus_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	655a      	str	r2, [r3, #84]	; 0x54
	canBus.filter.FilterMode = 				CAN_FILTERMODE_IDMASK;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <can_bus_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	659a      	str	r2, [r3, #88]	; 0x58
	canBus.filter.FilterScale = 			CAN_FILTERSCALE_32BIT;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <can_bus_Init+0x90>)
 800123c:	2201      	movs	r2, #1
 800123e:	65da      	str	r2, [r3, #92]	; 0x5c
	canBus.filter.FilterActivation = 		ENABLE;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <can_bus_Init+0x90>)
 8001242:	2201      	movs	r2, #1
 8001244:	661a      	str	r2, [r3, #96]	; 0x60

	result = HAL_CAN_Start(&hcan);
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <can_bus_Init+0x94>)
 8001248:	f003 fac4 	bl	80047d4 <HAL_CAN_Start>
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_ConfigFilter(&hcan, &canBus.filter);
 8001250:	4909      	ldr	r1, [pc, #36]	; (8001278 <can_bus_Init+0x98>)
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <can_bus_Init+0x94>)
 8001254:	f003 f9f5 	bl	8004642 <HAL_CAN_ConfigFilter>
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800125c:	2102      	movs	r1, #2
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <can_bus_Init+0x94>)
 8001260:	f003 fc0d 	bl	8004a7e <HAL_CAN_ActivateNotification>
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000388 	.word	0x20000388
 8001274:	2000040c 	.word	0x2000040c
 8001278:	200003c8 	.word	0x200003c8

0800127c <can_bus_Recieve>:
	if (canBus.count>50000)
		canBus.count = 0;
}

void can_bus_Recieve(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canBus.rx_header, canBus.recieve);
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <can_bus_Recieve+0xac>)
 8001282:	4a2a      	ldr	r2, [pc, #168]	; (800132c <can_bus_Recieve+0xb0>)
 8001284:	2100      	movs	r1, #0
 8001286:	482a      	ldr	r0, [pc, #168]	; (8001330 <can_bus_Recieve+0xb4>)
 8001288:	f003 fae8 	bl	800485c <HAL_CAN_GetRxMessage>

	if (canBus.rx_header.StdId == 0x010)
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <can_bus_Recieve+0xb8>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2b10      	cmp	r3, #16
 8001292:	d144      	bne.n	800131e <can_bus_Recieve+0xa2>
	{
		canBus.rx.fuel = (canBus.recieve[4] << 8) + canBus.recieve[5];
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <can_bus_Recieve+0xb8>)
 8001296:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800129a:	b29b      	uxth	r3, r3
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <can_bus_Recieve+0xb8>)
 80012a2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <can_bus_Recieve+0xb8>)
 80012ae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		canBus.rx.vel = (canBus.recieve[2] << 8) + canBus.recieve[3];
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <can_bus_Recieve+0xb8>)
 80012b4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <can_bus_Recieve+0xb8>)
 80012c0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4413      	add	r3, r2
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <can_bus_Recieve+0xb8>)
 80012cc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		canBus.rx.rpm = (canBus.recieve[0] << 8) + canBus.recieve[1];
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <can_bus_Recieve+0xb8>)
 80012d2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <can_bus_Recieve+0xb8>)
 80012de:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <can_bus_Recieve+0xb8>)
 80012ea:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		if (canBus.rx.vel > 9999)
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <can_bus_Recieve+0xb8>)
 80012f0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80012f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d904      	bls.n	8001306 <can_bus_Recieve+0x8a>
			canBus.rx.vel = 9999;
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <can_bus_Recieve+0xb8>)
 80012fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001302:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

		if (canBus.rx.rpm > 9999)
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <can_bus_Recieve+0xb8>)
 8001308:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800130c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001310:	4293      	cmp	r3, r2
 8001312:	d904      	bls.n	800131e <can_bus_Recieve+0xa2>
			canBus.rx.rpm = 9999;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <can_bus_Recieve+0xb8>)
 8001316:	f242 720f 	movw	r2, #9999	; 0x270f
 800131a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		can_rData.gyro.x = (canBus.recieve[1] << 8) + canBus.recieve[0];
		can_rData.gyro.y = (canBus.recieve[3] << 8) + canBus.recieve[2];
		can_rData.gyro.z = (canBus.recieve[5] << 8) + canBus.recieve[4];
	}*/

	canBus.count=0;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <can_bus_Recieve+0xb8>)
 8001320:	2200      	movs	r2, #0
 8001322:	801a      	strh	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200003fc 	.word	0x200003fc
 800132c:	200003ac 	.word	0x200003ac
 8001330:	2000040c 	.word	0x2000040c
 8001334:	20000388 	.word	0x20000388

08001338 <dina_Init>:
 */

#include "dina.h"

void dina_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	dina.huart = &huart2;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <dina_Init+0x14>)
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <dina_Init+0x18>)
 8001340:	601a      	str	r2, [r3, #0]
	forceGauge_uart_Init_DMA(&dina);
 8001342:	4802      	ldr	r0, [pc, #8]	; (800134c <dina_Init+0x14>)
 8001344:	f000 fce6 	bl	8001d14 <forceGauge_uart_Init_DMA>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000434 	.word	0x20000434
 8001350:	20000450 	.word	0x20000450

08001354 <dina_Update>:

void dina_Update(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	forceGauge_getForce(&dina);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <dina_Update+0x10>)
 800135a:	f000 fcef 	bl	8001d3c <forceGauge_getForce>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000434 	.word	0x20000434

08001368 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <SELECT+0x14>)
 8001374:	f004 fb04 	bl	8005980 <HAL_GPIO_WritePin>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010800 	.word	0x40010800

08001380 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <DESELECT+0x14>)
 800138c:	f004 faf8 	bl	8005980 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010800 	.word	0x40010800

08001398 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013a2:	bf00      	nop
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <SPI_TxByte+0x30>)
 80013a6:	f006 fc13 	bl	8007bd0 <HAL_SPI_GetState>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d1f9      	bne.n	80013a4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80013b0:	1df9      	adds	r1, r7, #7
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	2201      	movs	r2, #1
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <SPI_TxByte+0x30>)
 80013ba:	f006 f92b 	bl	8007614 <HAL_SPI_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000e7c 	.word	0x20000e7c

080013cc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80013d2:	23ff      	movs	r3, #255	; 0xff
 80013d4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80013da:	bf00      	nop
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <SPI_RxByte+0x38>)
 80013de:	f006 fbf7 	bl	8007bd0 <HAL_SPI_GetState>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d1f9      	bne.n	80013dc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80013e8:	1dba      	adds	r2, r7, #6
 80013ea:	1df9      	adds	r1, r7, #7
 80013ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <SPI_RxByte+0x38>)
 80013f6:	f006 fa49 	bl	800788c <HAL_SPI_TransmitReceive>

  return data;
 80013fa:	79bb      	ldrb	r3, [r7, #6]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000e7c 	.word	0x20000e7c

08001408 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001410:	f7ff ffdc 	bl	80013cc <SPI_RxByte>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	701a      	strb	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <SD_ReadyWait+0x34>)
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001430:	f7ff ffcc 	bl	80013cc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001434:	f7ff ffca 	bl	80013cc <SPI_RxByte>
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2bff      	cmp	r3, #255	; 0xff
 8001440:	d004      	beq.n	800144c <SD_ReadyWait+0x28>
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SD_ReadyWait+0x34>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f3      	bne.n	8001434 <SD_ReadyWait+0x10>

  return res;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000f1c 	.word	0x20000f1c

0800145c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001462:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001466:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001468:	f7ff ff8a 	bl	8001380 <DESELECT>

  for(int i = 0; i < 10; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	e005      	b.n	800147e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001472:	20ff      	movs	r0, #255	; 0xff
 8001474:	f7ff ff90 	bl	8001398 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	3301      	adds	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b09      	cmp	r3, #9
 8001482:	ddf6      	ble.n	8001472 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001484:	f7ff ff70 	bl	8001368 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001488:	2340      	movs	r3, #64	; 0x40
 800148a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800149c:	2395      	movs	r3, #149	; 0x95
 800149e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e009      	b.n	80014ba <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80014a6:	1d3a      	adds	r2, r7, #4
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff72 	bl	8001398 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b05      	cmp	r3, #5
 80014be:	ddf2      	ble.n	80014a6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80014c0:	e002      	b.n	80014c8 <SD_PowerOn+0x6c>
  {
    Count--;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80014c8:	f7ff ff80 	bl	80013cc <SPI_RxByte>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d002      	beq.n	80014d8 <SD_PowerOn+0x7c>
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f4      	bne.n	80014c2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80014d8:	f7ff ff52 	bl	8001380 <DESELECT>
  SPI_TxByte(0XFF);
 80014dc:	20ff      	movs	r0, #255	; 0xff
 80014de:	f7ff ff5b 	bl	8001398 <SPI_TxByte>

  PowerFlag = 1;
 80014e2:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <SD_PowerOn+0x94>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200000a5 	.word	0x200000a5

080014f4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <SD_PowerOff+0x14>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200000a5 	.word	0x200000a5

0800150c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <SD_CheckPower+0x10>)
 8001512:	781b      	ldrb	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	200000a5 	.word	0x200000a5

08001520 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <SD_RxDataBlock+0x68>)
 800152c:	220a      	movs	r2, #10
 800152e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001530:	f7ff ff4c 	bl	80013cc <SPI_RxByte>
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2bff      	cmp	r3, #255	; 0xff
 800153c:	d104      	bne.n	8001548 <SD_RxDataBlock+0x28>
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <SD_RxDataBlock+0x68>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f3      	bne.n	8001530 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2bfe      	cmp	r3, #254	; 0xfe
 800154c:	d001      	beq.n	8001552 <SD_RxDataBlock+0x32>
    return FALSE;
 800154e:	2300      	movs	r3, #0
 8001550:	e016      	b.n	8001580 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff55 	bl	8001408 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff4f 	bl	8001408 <SPI_RxBytePtr>
  } while(btr -= 2);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3b02      	subs	r3, #2
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ed      	bne.n	8001552 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001576:	f7ff ff29 	bl	80013cc <SPI_RxByte>
  SPI_RxByte();
 800157a:	f7ff ff27 	bl	80013cc <SPI_RxByte>

  return TRUE;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000f1d 	.word	0x20000f1d

0800158c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800159c:	f7ff ff42 	bl	8001424 <SD_ReadyWait>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2bff      	cmp	r3, #255	; 0xff
 80015a4:	d001      	beq.n	80015aa <SD_TxDataBlock+0x1e>
    return FALSE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e040      	b.n	800162c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fef3 	bl	8001398 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	2bfd      	cmp	r3, #253	; 0xfd
 80015b6:	d031      	beq.n	800161c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fee7 	bl	8001398 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fee0 	bl	8001398 <SPI_TxByte>
    } while (--wc);
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	3b01      	subs	r3, #1
 80015dc:	73bb      	strb	r3, [r7, #14]
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1eb      	bne.n	80015bc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80015e4:	f7ff fef2 	bl	80013cc <SPI_RxByte>
    SPI_RxByte();
 80015e8:	f7ff fef0 	bl	80013cc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80015ec:	e00b      	b.n	8001606 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80015ee:	f7ff feed 	bl	80013cc <SPI_RxByte>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d006      	beq.n	800160e <SD_TxDataBlock+0x82>
        break;

      i++;
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	3301      	adds	r3, #1
 8001604:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001606:	7b7b      	ldrb	r3, [r7, #13]
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d9f0      	bls.n	80015ee <SD_TxDataBlock+0x62>
 800160c:	e000      	b.n	8001610 <SD_TxDataBlock+0x84>
        break;
 800160e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001610:	bf00      	nop
 8001612:	f7ff fedb 	bl	80013cc <SPI_RxByte>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0fa      	beq.n	8001612 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	2b05      	cmp	r3, #5
 8001624:	d101      	bne.n	800162a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001640:	f7ff fef0 	bl	8001424 <SD_ReadyWait>
 8001644:	4603      	mov	r3, r0
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d001      	beq.n	800164e <SD_SendCmd+0x1a>
    return 0xFF;
 800164a:	23ff      	movs	r3, #255	; 0xff
 800164c:	e040      	b.n	80016d0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fea1 	bl	8001398 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	0e1b      	lsrs	r3, r3, #24
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fe9b 	bl	8001398 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe95 	bl	8001398 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fe8f 	bl	8001398 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fe8a 	bl	8001398 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b40      	cmp	r3, #64	; 0x40
 800168c:	d101      	bne.n	8001692 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800168e:	2395      	movs	r3, #149	; 0x95
 8001690:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b48      	cmp	r3, #72	; 0x48
 8001696:	d101      	bne.n	800169c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001698:	2387      	movs	r3, #135	; 0x87
 800169a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fe7a 	bl	8001398 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b4c      	cmp	r3, #76	; 0x4c
 80016a8:	d101      	bne.n	80016ae <SD_SendCmd+0x7a>
    SPI_RxByte();
 80016aa:	f7ff fe8f 	bl	80013cc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80016ae:	230a      	movs	r3, #10
 80016b0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80016b2:	f7ff fe8b 	bl	80013cc <SPI_RxByte>
 80016b6:	4603      	mov	r3, r0
 80016b8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80016ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da05      	bge.n	80016ce <SD_SendCmd+0x9a>
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f1      	bne.n	80016b2 <SD_SendCmd+0x7e>

  return res;
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0d5      	b.n	8001898 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80016ec:	4b6c      	ldr	r3, [pc, #432]	; (80018a0 <SD_disk_initialize+0x1c8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <SD_disk_initialize+0x2a>
    return Stat;
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <SD_disk_initialize+0x1c8>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	e0ca      	b.n	8001898 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001702:	f7ff feab 	bl	800145c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001706:	f7ff fe2f 	bl	8001368 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800170e:	2100      	movs	r1, #0
 8001710:	2040      	movs	r0, #64	; 0x40
 8001712:	f7ff ff8f 	bl	8001634 <SD_SendCmd>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	f040 80a5 	bne.w	8001868 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800171e:	4b61      	ldr	r3, [pc, #388]	; (80018a4 <SD_disk_initialize+0x1cc>)
 8001720:	2264      	movs	r2, #100	; 0x64
 8001722:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001724:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001728:	2048      	movs	r0, #72	; 0x48
 800172a:	f7ff ff83 	bl	8001634 <SD_SendCmd>
 800172e:	4603      	mov	r3, r0
 8001730:	2b01      	cmp	r3, #1
 8001732:	d158      	bne.n	80017e6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e00c      	b.n	8001754 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800173a:	7bfc      	ldrb	r4, [r7, #15]
 800173c:	f7ff fe46 	bl	80013cc <SPI_RxByte>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4423      	add	r3, r4
 800174a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	3301      	adds	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d9ef      	bls.n	800173a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800175a:	7abb      	ldrb	r3, [r7, #10]
 800175c:	2b01      	cmp	r3, #1
 800175e:	f040 8083 	bne.w	8001868 <SD_disk_initialize+0x190>
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	2baa      	cmp	r3, #170	; 0xaa
 8001766:	d17f      	bne.n	8001868 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001768:	2100      	movs	r1, #0
 800176a:	2077      	movs	r0, #119	; 0x77
 800176c:	f7ff ff62 	bl	8001634 <SD_SendCmd>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d807      	bhi.n	8001786 <SD_disk_initialize+0xae>
 8001776:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800177a:	2069      	movs	r0, #105	; 0x69
 800177c:	f7ff ff5a 	bl	8001634 <SD_SendCmd>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <SD_disk_initialize+0x1cc>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1eb      	bne.n	8001768 <SD_disk_initialize+0x90>
 8001790:	e000      	b.n	8001794 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001792:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <SD_disk_initialize+0x1cc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d064      	beq.n	8001868 <SD_disk_initialize+0x190>
 800179e:	2100      	movs	r1, #0
 80017a0:	207a      	movs	r0, #122	; 0x7a
 80017a2:	f7ff ff47 	bl	8001634 <SD_SendCmd>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d15d      	bne.n	8001868 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e00c      	b.n	80017cc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80017b2:	7bfc      	ldrb	r4, [r7, #15]
 80017b4:	f7ff fe0a 	bl	80013cc <SPI_RxByte>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4423      	add	r3, r4
 80017c2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	3301      	adds	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d9ef      	bls.n	80017b2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80017d2:	7a3b      	ldrb	r3, [r7, #8]
 80017d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SD_disk_initialize+0x108>
 80017dc:	2306      	movs	r3, #6
 80017de:	e000      	b.n	80017e2 <SD_disk_initialize+0x10a>
 80017e0:	2302      	movs	r3, #2
 80017e2:	73bb      	strb	r3, [r7, #14]
 80017e4:	e040      	b.n	8001868 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80017e6:	2100      	movs	r1, #0
 80017e8:	2077      	movs	r0, #119	; 0x77
 80017ea:	f7ff ff23 	bl	8001634 <SD_SendCmd>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d808      	bhi.n	8001806 <SD_disk_initialize+0x12e>
 80017f4:	2100      	movs	r1, #0
 80017f6:	2069      	movs	r0, #105	; 0x69
 80017f8:	f7ff ff1c 	bl	8001634 <SD_SendCmd>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d801      	bhi.n	8001806 <SD_disk_initialize+0x12e>
 8001802:	2302      	movs	r3, #2
 8001804:	e000      	b.n	8001808 <SD_disk_initialize+0x130>
 8001806:	2301      	movs	r3, #1
 8001808:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d10e      	bne.n	800182e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001810:	2100      	movs	r1, #0
 8001812:	2077      	movs	r0, #119	; 0x77
 8001814:	f7ff ff0e 	bl	8001634 <SD_SendCmd>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	d80e      	bhi.n	800183c <SD_disk_initialize+0x164>
 800181e:	2100      	movs	r1, #0
 8001820:	2069      	movs	r0, #105	; 0x69
 8001822:	f7ff ff07 	bl	8001634 <SD_SendCmd>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d107      	bne.n	800183c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800182c:	e00d      	b.n	800184a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800182e:	2100      	movs	r1, #0
 8001830:	2041      	movs	r0, #65	; 0x41
 8001832:	f7ff feff 	bl	8001634 <SD_SendCmd>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <SD_disk_initialize+0x1cc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e1      	bne.n	800180a <SD_disk_initialize+0x132>
 8001846:	e000      	b.n	800184a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001848:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <SD_disk_initialize+0x1cc>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <SD_disk_initialize+0x18c>
 8001854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001858:	2050      	movs	r0, #80	; 0x50
 800185a:	f7ff feeb 	bl	8001634 <SD_SendCmd>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <SD_disk_initialize+0x1d0>)
 800186a:	7bbb      	ldrb	r3, [r7, #14]
 800186c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800186e:	f7ff fd87 	bl	8001380 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001872:	f7ff fdab 	bl	80013cc <SPI_RxByte>

  if (type)
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <SD_disk_initialize+0x1c8>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SD_disk_initialize+0x1c8>)
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e001      	b.n	8001892 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800188e:	f7ff fe31 	bl	80014f4 <SD_PowerOff>
  }

  return Stat;
 8001892:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <SD_disk_initialize+0x1c8>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b2db      	uxtb	r3, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000f1d 	.word	0x20000f1d
 80018a8:	200000a4 	.word	0x200000a4

080018ac <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SD_disk_status+0x14>
    return STA_NOINIT;
 80018bc:	2301      	movs	r3, #1
 80018be:	e002      	b.n	80018c6 <SD_disk_status+0x1a>

  return Stat;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <SD_disk_status+0x24>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000000 	.word	0x20000000

080018d4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <SD_disk_read+0x1c>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <SD_disk_read+0x20>
    return RES_PARERR;
 80018f0:	2304      	movs	r3, #4
 80018f2:	e051      	b.n	8001998 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <SD_disk_read+0xcc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001902:	2303      	movs	r3, #3
 8001904:	e048      	b.n	8001998 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <SD_disk_read+0xd0>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	607b      	str	r3, [r7, #4]

  SELECT();
 8001918:	f7ff fd26 	bl	8001368 <SELECT>

  if (count == 1)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d111      	bne.n	8001946 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	2051      	movs	r0, #81	; 0x51
 8001926:	f7ff fe85 	bl	8001634 <SD_SendCmd>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d129      	bne.n	8001984 <SD_disk_read+0xb0>
 8001930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001934:	68b8      	ldr	r0, [r7, #8]
 8001936:	f7ff fdf3 	bl	8001520 <SD_RxDataBlock>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d021      	beq.n	8001984 <SD_disk_read+0xb0>
      count = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	e01e      	b.n	8001984 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	2052      	movs	r0, #82	; 0x52
 800194a:	f7ff fe73 	bl	8001634 <SD_SendCmd>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d117      	bne.n	8001984 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f7ff fde1 	bl	8001520 <SD_RxDataBlock>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800196a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	3b01      	subs	r3, #1
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ed      	bne.n	8001954 <SD_disk_read+0x80>
 8001978:	e000      	b.n	800197c <SD_disk_read+0xa8>
          break;
 800197a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	204c      	movs	r0, #76	; 0x4c
 8001980:	f7ff fe58 	bl	8001634 <SD_SendCmd>
    }
  }

  DESELECT();
 8001984:	f7ff fcfc 	bl	8001380 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001988:	f7ff fd20 	bl	80013cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	b2db      	uxtb	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000
 80019a4:	200000a4 	.word	0x200000a4

080019a8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <SD_disk_write+0x1c>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <SD_disk_write+0x20>
    return RES_PARERR;
 80019c4:	2304      	movs	r3, #4
 80019c6:	e06b      	b.n	8001aa0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80019c8:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <SD_disk_write+0x100>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SD_disk_write+0x32>
    return RES_NOTRDY;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e062      	b.n	8001aa0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <SD_disk_write+0x100>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SD_disk_write+0x44>
    return RES_WRPRT;
 80019e8:	2302      	movs	r3, #2
 80019ea:	e059      	b.n	8001aa0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <SD_disk_write+0x104>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	607b      	str	r3, [r7, #4]

  SELECT();
 80019fe:	f7ff fcb3 	bl	8001368 <SELECT>

  if (count == 1)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d110      	bne.n	8001a2a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	2058      	movs	r0, #88	; 0x58
 8001a0c:	f7ff fe12 	bl	8001634 <SD_SendCmd>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d13a      	bne.n	8001a8c <SD_disk_write+0xe4>
 8001a16:	21fe      	movs	r1, #254	; 0xfe
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f7ff fdb7 	bl	800158c <SD_TxDataBlock>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d033      	beq.n	8001a8c <SD_disk_write+0xe4>
      count = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	e030      	b.n	8001a8c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <SD_disk_write+0x104>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001a36:	2100      	movs	r1, #0
 8001a38:	2077      	movs	r0, #119	; 0x77
 8001a3a:	f7ff fdfb 	bl	8001634 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	2057      	movs	r0, #87	; 0x57
 8001a42:	f7ff fdf7 	bl	8001634 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2059      	movs	r0, #89	; 0x59
 8001a4a:	f7ff fdf3 	bl	8001634 <SD_SendCmd>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11b      	bne.n	8001a8c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001a54:	21fc      	movs	r1, #252	; 0xfc
 8001a56:	68b8      	ldr	r0, [r7, #8]
 8001a58:	f7ff fd98 	bl	800158c <SD_TxDataBlock>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a68:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ee      	bne.n	8001a54 <SD_disk_write+0xac>
 8001a76:	e000      	b.n	8001a7a <SD_disk_write+0xd2>
          break;
 8001a78:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001a7a:	21fd      	movs	r1, #253	; 0xfd
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fd85 	bl	800158c <SD_TxDataBlock>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <SD_disk_write+0xe4>
      {
        count = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001a8c:	f7ff fc78 	bl	8001380 <DESELECT>
  SPI_RxByte();
 8001a90:	f7ff fc9c 	bl	80013cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	200000a4 	.word	0x200000a4

08001ab0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b08b      	sub	sp, #44	; 0x2c
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	603a      	str	r2, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	460b      	mov	r3, r1
 8001abe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001aca:	2304      	movs	r3, #4
 8001acc:	e11b      	b.n	8001d06 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001ad4:	79bb      	ldrb	r3, [r7, #6]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d129      	bne.n	8001b2e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d017      	beq.n	8001b12 <SD_disk_ioctl+0x62>
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	dc1f      	bgt.n	8001b26 <SD_disk_ioctl+0x76>
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <SD_disk_ioctl+0x40>
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d00b      	beq.n	8001b06 <SD_disk_ioctl+0x56>
 8001aee:	e01a      	b.n	8001b26 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001af0:	f7ff fd0c 	bl	800150c <SD_CheckPower>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001afa:	f7ff fcfb 	bl	80014f4 <SD_PowerOff>
      res = RES_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b04:	e0fd      	b.n	8001d02 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001b06:	f7ff fca9 	bl	800145c <SD_PowerOn>
      res = RES_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b10:	e0f7      	b.n	8001d02 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	1c5c      	adds	r4, r3, #1
 8001b16:	f7ff fcf9 	bl	800150c <SD_CheckPower>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b24:	e0ed      	b.n	8001d02 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001b26:	2304      	movs	r3, #4
 8001b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b2c:	e0e9      	b.n	8001d02 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001b2e:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <SD_disk_ioctl+0x260>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0e2      	b.n	8001d06 <SD_disk_ioctl+0x256>

    SELECT();
 8001b40:	f7ff fc12 	bl	8001368 <SELECT>

    switch (ctrl)
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	2b0d      	cmp	r3, #13
 8001b48:	f200 80cc 	bhi.w	8001ce4 <SD_disk_ioctl+0x234>
 8001b4c:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <SD_disk_ioctl+0xa4>)
 8001b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b52:	bf00      	nop
 8001b54:	08001c4f 	.word	0x08001c4f
 8001b58:	08001b8d 	.word	0x08001b8d
 8001b5c:	08001c3f 	.word	0x08001c3f
 8001b60:	08001ce5 	.word	0x08001ce5
 8001b64:	08001ce5 	.word	0x08001ce5
 8001b68:	08001ce5 	.word	0x08001ce5
 8001b6c:	08001ce5 	.word	0x08001ce5
 8001b70:	08001ce5 	.word	0x08001ce5
 8001b74:	08001ce5 	.word	0x08001ce5
 8001b78:	08001ce5 	.word	0x08001ce5
 8001b7c:	08001ce5 	.word	0x08001ce5
 8001b80:	08001c61 	.word	0x08001c61
 8001b84:	08001c85 	.word	0x08001c85
 8001b88:	08001ca9 	.word	0x08001ca9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2049      	movs	r0, #73	; 0x49
 8001b90:	f7ff fd50 	bl	8001634 <SD_SendCmd>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 80a8 	bne.w	8001cec <SD_disk_ioctl+0x23c>
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fcbc 	bl	8001520 <SD_RxDataBlock>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 809e 	beq.w	8001cec <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001bb0:	7b3b      	ldrb	r3, [r7, #12]
 8001bb2:	099b      	lsrs	r3, r3, #6
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001bba:	7d7b      	ldrb	r3, [r7, #21]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	7d3b      	ldrb	r3, [r7, #20]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001bce:	8bfb      	ldrh	r3, [r7, #30]
 8001bd0:	029a      	lsls	r2, r3, #10
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e02e      	b.n	8001c36 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001bd8:	7c7b      	ldrb	r3, [r7, #17]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	7dbb      	ldrb	r3, [r7, #22]
 8001be2:	09db      	lsrs	r3, r3, #7
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	7d7b      	ldrb	r3, [r7, #21]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f003 0306 	and.w	r3, r3, #6
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001c00:	7d3b      	ldrb	r3, [r7, #20]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	7cbb      	ldrb	r3, [r7, #18]
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001c28:	8bfa      	ldrh	r2, [r7, #30]
 8001c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c2e:	3b09      	subs	r3, #9
 8001c30:	409a      	lsls	r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001c3c:	e056      	b.n	8001cec <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c44:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c4c:	e055      	b.n	8001cfa <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001c4e:	f7ff fbe9 	bl	8001424 <SD_ReadyWait>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2bff      	cmp	r3, #255	; 0xff
 8001c56:	d14b      	bne.n	8001cf0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c5e:	e047      	b.n	8001cf0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001c60:	2100      	movs	r1, #0
 8001c62:	2049      	movs	r0, #73	; 0x49
 8001c64:	f7ff fce6 	bl	8001634 <SD_SendCmd>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d142      	bne.n	8001cf4 <SD_disk_ioctl+0x244>
 8001c6e:	2110      	movs	r1, #16
 8001c70:	6a38      	ldr	r0, [r7, #32]
 8001c72:	f7ff fc55 	bl	8001520 <SD_RxDataBlock>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d03b      	beq.n	8001cf4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c82:	e037      	b.n	8001cf4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001c84:	2100      	movs	r1, #0
 8001c86:	204a      	movs	r0, #74	; 0x4a
 8001c88:	f7ff fcd4 	bl	8001634 <SD_SendCmd>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d132      	bne.n	8001cf8 <SD_disk_ioctl+0x248>
 8001c92:	2110      	movs	r1, #16
 8001c94:	6a38      	ldr	r0, [r7, #32]
 8001c96:	f7ff fc43 	bl	8001520 <SD_RxDataBlock>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02b      	beq.n	8001cf8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ca6:	e027      	b.n	8001cf8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	207a      	movs	r0, #122	; 0x7a
 8001cac:	f7ff fcc2 	bl	8001634 <SD_SendCmd>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cbc:	e00b      	b.n	8001cd6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001cbe:	6a3c      	ldr	r4, [r7, #32]
 8001cc0:	1c63      	adds	r3, r4, #1
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	f7ff fb82 	bl	80013cc <SPI_RxByte>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d9ef      	bls.n	8001cbe <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cea:	e006      	b.n	8001cfa <SD_disk_ioctl+0x24a>
      break;
 8001cec:	bf00      	nop
 8001cee:	e004      	b.n	8001cfa <SD_disk_ioctl+0x24a>
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e002      	b.n	8001cfa <SD_disk_ioctl+0x24a>
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e000      	b.n	8001cfa <SD_disk_ioctl+0x24a>
      break;
 8001cf8:	bf00      	nop
    }

    DESELECT();
 8001cfa:	f7ff fb41 	bl	8001380 <DESELECT>
    SPI_RxByte();
 8001cfe:	f7ff fb65 	bl	80013cc <SPI_RxByte>
  }

  return res;
 8001d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <forceGauge_uart_Init_DMA>:

/*
 *	Função que inicia a leitura
 */
void forceGauge_uart_Init_DMA(fGauge_HandleTypeDef *hfGauge)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	2210      	movs	r2, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	f006 ff7b 	bl	8008c22 <HAL_UART_Receive_DMA>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <forceGauge_getForce>:
/*
 * 	Função que lê os valores no buffer e converte a string em um int.
 * 	Essa função tambem detecta se a celula de carga foi desconectada e reinicia a leitura quando possivel.
 */
void forceGauge_getForce(fGauge_HandleTypeDef *hfGauge)
{
 8001d3c:	b5b0      	push	{r4, r5, r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	int force = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
	int i = 0, j = 7;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

	/*	Logica para reiniciar a leitura	*/
	if (hfGauge->huart->hdmarx->State != HAL_DMA_STATE_BUSY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d00f      	beq.n	8001d7e <forceGauge_getForce+0x42>
		hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2210      	movs	r2, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f006 ff5a 	bl	8008c22 <HAL_UART_Receive_DMA>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	761a      	strb	r2, [r3, #24]

	/*	Conversão string to int	*/
	for (i; i < 15 && hfGauge->rxbuffer[i] != 13 ; i++);
 8001d76:	e002      	b.n	8001d7e <forceGauge_getForce+0x42>
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b0e      	cmp	r3, #14
 8001d82:	dc06      	bgt.n	8001d92 <forceGauge_getForce+0x56>
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b0d      	cmp	r3, #13
 8001d90:	d1f2      	bne.n	8001d78 <forceGauge_getForce+0x3c>
	if (i > 8)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	dd03      	ble.n	8001da0 <forceGauge_getForce+0x64>
		i -= 8;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	e03e      	b.n	8001e1e <forceGauge_getForce+0xe2>
	else
		i += 8;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	3308      	adds	r3, #8
 8001da4:	613b      	str	r3, [r7, #16]
	while(j > 0)
 8001da6:	e03a      	b.n	8001e1e <forceGauge_getForce+0xe2>
	{
		j--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
		if (i < 15)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b0e      	cmp	r3, #14
 8001db2:	dc03      	bgt.n	8001dbc <forceGauge_getForce+0x80>
			i++;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	3301      	adds	r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	e001      	b.n	8001dc0 <forceGauge_getForce+0x84>
		else
			i = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
		force += (hfGauge->rxbuffer[i] - 48) * pow10(j);
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3b30      	subs	r3, #48	; 0x30
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbc5 	bl	800055c <__aeabi_i2d>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7fe fbc0 	bl	800055c <__aeabi_i2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f000 f836 	bl	8001e54 <pow10>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fc1e 	bl	8000630 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	6978      	ldr	r0, [r7, #20]
 8001dfe:	f7fe fbad 	bl	800055c <__aeabi_i2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fa5b 	bl	80002c4 <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe fea5 	bl	8000b64 <__aeabi_d2iz>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	617b      	str	r3, [r7, #20]
	while(j > 0)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	dcc1      	bgt.n	8001da8 <forceGauge_getForce+0x6c>
	}

	if (force < 0)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da03      	bge.n	8001e32 <forceGauge_getForce+0xf6>
		hfGauge->force = 0;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
	else if (force > 99999)
		hfGauge->force = 99999;
	else
		hfGauge->force = force;
}
 8001e30:	e00a      	b.n	8001e48 <forceGauge_getForce+0x10c>
	else if (force > 99999)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <forceGauge_getForce+0x114>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	dd03      	ble.n	8001e42 <forceGauge_getForce+0x106>
		hfGauge->force = 99999;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <forceGauge_getForce+0x114>)
 8001e3e:	615a      	str	r2, [r3, #20]
}
 8001e40:	e002      	b.n	8001e48 <forceGauge_getForce+0x10c>
		hfGauge->force = force;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	615a      	str	r2, [r3, #20]
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e50:	0001869f 	.word	0x0001869f

08001e54 <pow10>:

double pow10(double y)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	e9c7 0100 	strd	r0, r1, [r7]
	int value = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < y; i++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	e008      	b.n	8001e7a <pow10+0x26>
	{
		value = value * 10;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < y; i++)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	3301      	adds	r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68b8      	ldr	r0, [r7, #8]
 8001e7c:	f7fe fb6e 	bl	800055c <__aeabi_i2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e88:	f7fe fe62 	bl	8000b50 <__aeabi_dcmpgt>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ea      	bne.n	8001e68 <pow10+0x14>
	}

	return value;
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7fe fb62 	bl	800055c <__aeabi_i2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
}
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <indutivo_Init>:

/*
 * 	Função para iniciar a leitura
 */
HAL_StatusTypeDef indutivo_Init(indutivo_typedef *hindutivo)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	hindutivo->value_raw = 0;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
	hindutivo->freq = 0;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
	hindutivo->count = 0;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]

	result = HAL_TIM_Base_Start_IT(hindutivo->htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 ff87 	bl	8007dd8 <HAL_TIM_Base_Start_IT>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]
	result = HAL_TIM_IC_Start_IT(hindutivo->htim, hindutivo->channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4610      	mov	r0, r2
 8001eda:	f006 f827 	bl	8007f2c <HAL_TIM_IC_Start_IT>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]

	return result;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <indutivo_filtro>:

/*
 * 	Função para o filtro de dados, calcula o value
 */
void indutivo_filtro(indutivo_typedef *hindutivo)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	hindutivo->value = 0;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]

	if (hindutivo->value_raw > 9999)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f02:	4293      	cmp	r3, r2
 8001f04:	dd03      	ble.n	8001f0e <indutivo_filtro+0x22>
		hindutivo->value_raw = hindutivo->buf[4];
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 4; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e00f      	b.n	8001f34 <indutivo_filtro+0x48>
		hindutivo->buf[i] = hindutivo->buf[i+1];
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3301      	adds	r3, #1
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3304      	adds	r3, #4
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3301      	adds	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	ddec      	ble.n	8001f14 <indutivo_filtro+0x28>

	hindutivo->buf[4] = hindutivo->value_raw;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

	for (int i = 0; i < 5; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	e00d      	b.n	8001f64 <indutivo_filtro+0x78>
		hindutivo->value += hindutivo->buf[i];
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3304      	adds	r3, #4
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	ddee      	ble.n	8001f48 <indutivo_filtro+0x5c>

	hindutivo->value = (int)hindutivo->value/5.0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe faf4 	bl	800055c <__aeabi_i2d>
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <indutivo_filtro+0xac>)
 8001f7a:	f7fe fc83 	bl	8000884 <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fded 	bl	8000b64 <__aeabi_d2iz>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	605a      	str	r2, [r3, #4]
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40140000 	.word	0x40140000
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <indutivo_calc>:
/*
 * 	Função pra ser chamada quando ocorre a interrupção de sinal
 * 	Calcula o value_raw
 */
void indutivo_calc(indutivo_typedef *hindutivo)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	hindutivo->count += __HAL_TIM_GET_COMPARE(hindutivo->htim, hindutivo->channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <indutivo_calc+0x1a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	e015      	b.n	8001fe6 <indutivo_calc+0x46>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d104      	bne.n	8001fcc <indutivo_calc+0x2c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	e00c      	b.n	8001fe6 <indutivo_calc+0x46>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d104      	bne.n	8001fde <indutivo_calc+0x3e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	e003      	b.n	8001fe6 <indutivo_calc+0x46>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68d2      	ldr	r2, [r2, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(hindutivo->htim, 0);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
	hindutivo->freq = (int)(100000000.0 / hindutivo->count);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faab 	bl	800055c <__aeabi_i2d>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	a115      	add	r1, pc, #84	; (adr r1, 8002060 <indutivo_calc+0xc0>)
 800200c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002010:	f7fe fc38 	bl	8000884 <__aeabi_ddiv>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fda2 	bl	8000b64 <__aeabi_d2iz>
 8002020:	4602      	mov	r2, r0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
	hindutivo->value_raw = (int)(hindutivo->constante*hindutivo->freq);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681c      	ldr	r4, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe feca 	bl	8000dc8 <__aeabi_i2f>
 8002034:	4603      	mov	r3, r0
 8002036:	4619      	mov	r1, r3
 8002038:	4620      	mov	r0, r4
 800203a:	f7fe f889 	bl	8000150 <__aeabi_fmul>
 800203e:	4603      	mov	r3, r0
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe ff15 	bl	8000e70 <__aeabi_f2iz>
 8002046:	4602      	mov	r2, r0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
	indutivo_filtro(hindutivo);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff4d 	bl	8001eec <indutivo_filtro>
	hindutivo->count = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bd90      	pop	{r4, r7, pc}
 8002060:	00000000 	.word	0x00000000
 8002064:	4197d784 	.word	0x4197d784

08002068 <indutivo_reset>:
/*
 * 	Função pra ser chamada quando o timer atinge valor maximo
 * 	Zera os valores
 */
void indutivo_reset(indutivo_typedef *hindutivo)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	if(hindutivo->count<1000000)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <indutivo_reset+0x3c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	dc07      	bgt.n	800208a <indutivo_reset+0x22>
	{
		hindutivo->count+=50000;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8002082:	3350      	adds	r3, #80	; 0x50
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	60d3      	str	r3, [r2, #12]
	{
		hindutivo->freq=0;
		hindutivo->value_raw=0;
		indutivo_filtro(hindutivo);
	}
}
 8002088:	e008      	b.n	800209c <indutivo_reset+0x34>
		hindutivo->freq=0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
		hindutivo->value_raw=0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
		indutivo_filtro(hindutivo);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff28 	bl	8001eec <indutivo_filtro>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	000f423f 	.word	0x000f423f

080020a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ac:	f001 fcf4 	bl	8003a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b0:	f000 f868 	bl	8002184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b4:	f000 fbac 	bl	8002810 <MX_GPIO_Init>
  MX_DMA_Init();
 80020b8:	f000 fb7c 	bl	80027b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80020bc:	f000 f8be 	bl	800223c <MX_ADC1_Init>
  MX_I2C2_Init();
 80020c0:	f000 f940 	bl	8002344 <MX_I2C2_Init>
  MX_SPI1_Init();
 80020c4:	f000 f96c 	bl	80023a0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80020c8:	f000 fa14 	bl	80024f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020cc:	f000 fa82 	bl	80025d4 <MX_TIM3_Init>
  MX_FATFS_Init();
 80020d0:	f007 faba 	bl	8009648 <MX_FATFS_Init>
  MX_TIM4_Init();
 80020d4:	f000 facc 	bl	8002670 <MX_TIM4_Init>
  MX_TIM1_Init();
 80020d8:	f000 f998 	bl	800240c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80020dc:	f000 fb16 	bl	800270c <MX_USART1_UART_Init>
  MX_CAN_Init();
 80020e0:	f000 f8fa 	bl	80022d8 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80020e4:	f000 fb3c 	bl	8002760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	fresult = SD_Init();
 80020e8:	f000 fc66 	bl	80029b8 <SD_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <main+0xcc>)
 80020f2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NOT_READY)
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <main+0xcc>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d103      	bne.n	8002104 <main+0x5c>
		sdCard.mode = 9;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <main+0xd0>)
 80020fe:	2209      	movs	r2, #9
 8002100:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754

	if (sdCard.mode == 0)
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <main+0xd0>)
 8002106:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <main+0x70>
	{
	  rot_Init();
 800210e:	f000 fbf3 	bl	80028f8 <rot_Init>
	  vel_Init();
 8002112:	f001 fc71 	bl	80039f8 <vel_Init>
 8002116:	e029      	b.n	800216c <main+0xc4>
	}
	else if (sdCard.mode == 1)
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <main+0xd0>)
 800211a:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800211e:	2b01      	cmp	r3, #1
 8002120:	d104      	bne.n	800212c <main+0x84>
	{
		dina_Init();
 8002122:	f7ff f909 	bl	8001338 <dina_Init>
		rot_Init();
 8002126:	f000 fbe7 	bl	80028f8 <rot_Init>
 800212a:	e01f      	b.n	800216c <main+0xc4>
	}
	else if (sdCard.mode == 2)
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <main+0xd0>)
 800212e:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002132:	2b02      	cmp	r3, #2
 8002134:	d107      	bne.n	8002146 <main+0x9e>
	{
		can_bus_Init();
 8002136:	f7ff f853 	bl	80011e0 <can_bus_Init>
		aceGir_Init(&hi2c2);
 800213a:	4810      	ldr	r0, [pc, #64]	; (800217c <main+0xd4>)
 800213c:	f7fe fed8 	bl	8000ef0 <aceGir_Init>
		ADC_DMA_Init();
 8002140:	f7fe febc 	bl	8000ebc <ADC_DMA_Init>
 8002144:	e012      	b.n	800216c <main+0xc4>
	}
	else if (sdCard.mode == 3)
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <main+0xd0>)
 8002148:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800214c:	2b03      	cmp	r3, #3
 800214e:	d106      	bne.n	800215e <main+0xb6>
	{
		traction_Init();
 8002150:	f001 fc2c 	bl	80039ac <traction_Init>
		rot_Init();
 8002154:	f000 fbd0 	bl	80028f8 <rot_Init>
		vel_Init();
 8002158:	f001 fc4e 	bl	80039f8 <vel_Init>
 800215c:	e006      	b.n	800216c <main+0xc4>
	}
	else if (sdCard.mode == 4)
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <main+0xd0>)
 8002160:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002164:	2b04      	cmp	r3, #4
 8002166:	d101      	bne.n	800216c <main+0xc4>
	{
		can_bus_Init();
 8002168:	f7ff f83a 	bl	80011e0 <can_bus_Init>
	}

	HAL_TIM_Base_Start_IT(&htim4);
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <main+0xd8>)
 800216e:	f005 fe33 	bl	8007dd8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002172:	e7fe      	b.n	8002172 <main+0xca>
 8002174:	20000e78 	.word	0x20000e78
 8002178:	200004c4 	.word	0x200004c4
 800217c:	20000c60 	.word	0x20000c60
 8002180:	20000314 	.word	0x20000314

08002184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b094      	sub	sp, #80	; 0x50
 8002188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218e:	2228      	movs	r2, #40	; 0x28
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f00a fddc 	bl	800cd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c2:	2301      	movs	r3, #1
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c6:	2302      	movs	r3, #2
 80021c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 fc02 	bl	80069e4 <HAL_RCC_OscConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80021e6:	f000 fb81 	bl	80028ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ea:	230f      	movs	r3, #15
 80021ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2102      	movs	r1, #2
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fe6c 	bl	8006ee4 <HAL_RCC_ClockConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002212:	f000 fb6b 	bl	80028ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002216:	2302      	movs	r3, #2
 8002218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800221a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fff8 	bl	8007218 <HAL_RCCEx_PeriphCLKConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800222e:	f000 fb5d 	bl	80028ec <Error_Handler>
  }
}
 8002232:	bf00      	nop
 8002234:	3750      	adds	r7, #80	; 0x50
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <MX_ADC1_Init+0x94>)
 800224e:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <MX_ADC1_Init+0x98>)
 8002250:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <MX_ADC1_Init+0x94>)
 8002254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002258:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MX_ADC1_Init+0x94>)
 800225c:	2201      	movs	r2, #1
 800225e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <MX_ADC1_Init+0x94>)
 8002262:	2200      	movs	r2, #0
 8002264:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_ADC1_Init+0x94>)
 8002268:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800226c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <MX_ADC1_Init+0x94>)
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <MX_ADC1_Init+0x94>)
 8002276:	2202      	movs	r2, #2
 8002278:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800227a:	4815      	ldr	r0, [pc, #84]	; (80022d0 <MX_ADC1_Init+0x94>)
 800227c:	f001 fc6e 	bl	8003b5c <HAL_ADC_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002286:	f000 fb31 	bl	80028ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800228a:	2307      	movs	r3, #7
 800228c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800228e:	2301      	movs	r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002292:	2307      	movs	r3, #7
 8002294:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	4619      	mov	r1, r3
 800229a:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MX_ADC1_Init+0x94>)
 800229c:	f001 fe30 	bl	8003f00 <HAL_ADC_ConfigChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80022a6:	f000 fb21 	bl	80028ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022aa:	2309      	movs	r3, #9
 80022ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80022ae:	2302      	movs	r3, #2
 80022b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <MX_ADC1_Init+0x94>)
 80022b8:	f001 fe22 	bl	8003f00 <HAL_ADC_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80022c2:	f000 fb13 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200002e4 	.word	0x200002e4
 80022d4:	40012400 	.word	0x40012400

080022d8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80022dc:	4b17      	ldr	r3, [pc, #92]	; (800233c <MX_CAN_Init+0x64>)
 80022de:	4a18      	ldr	r2, [pc, #96]	; (8002340 <MX_CAN_Init+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <MX_CAN_Init+0x64>)
 80022e4:	2212      	movs	r2, #18
 80022e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_CAN_Init+0x64>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_CAN_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_CAN_Init+0x64>)
 80022f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_CAN_Init+0x64>)
 80022fe:	2200      	movs	r2, #0
 8002300:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_CAN_Init+0x64>)
 8002304:	2200      	movs	r2, #0
 8002306:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_CAN_Init+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_CAN_Init+0x64>)
 8002310:	2200      	movs	r2, #0
 8002312:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_CAN_Init+0x64>)
 8002316:	2200      	movs	r2, #0
 8002318:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_CAN_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_CAN_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_CAN_Init+0x64>)
 8002328:	f002 f890 	bl	800444c <HAL_CAN_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8002332:	f000 fadb 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000040c 	.word	0x2000040c
 8002340:	40006400 	.word	0x40006400

08002344 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_I2C2_Init+0x50>)
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <MX_I2C2_Init+0x54>)
 800234c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_I2C2_Init+0x50>)
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_I2C2_Init+0x58>)
 8002352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_I2C2_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_I2C2_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_I2C2_Init+0x50>)
 8002362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002366:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <MX_I2C2_Init+0x50>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_I2C2_Init+0x50>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <MX_I2C2_Init+0x50>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_I2C2_Init+0x50>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002380:	4804      	ldr	r0, [pc, #16]	; (8002394 <MX_I2C2_Init+0x50>)
 8002382:	f003 fb2f 	bl	80059e4 <HAL_I2C_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800238c:	f000 faae 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000c60 	.word	0x20000c60
 8002398:	40005800 	.word	0x40005800
 800239c:	000186a0 	.word	0x000186a0

080023a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MX_SPI1_Init+0x64>)
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <MX_SPI1_Init+0x68>)
 80023a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_SPI1_Init+0x64>)
 80023ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_SPI1_Init+0x64>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <MX_SPI1_Init+0x64>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_SPI1_Init+0x64>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_SPI1_Init+0x64>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_SPI1_Init+0x64>)
 80023cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_SPI1_Init+0x64>)
 80023d4:	2210      	movs	r2, #16
 80023d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <MX_SPI1_Init+0x64>)
 80023da:	2200      	movs	r2, #0
 80023dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_SPI1_Init+0x64>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <MX_SPI1_Init+0x64>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_SPI1_Init+0x64>)
 80023ec:	220a      	movs	r2, #10
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023f0:	4804      	ldr	r0, [pc, #16]	; (8002404 <MX_SPI1_Init+0x64>)
 80023f2:	f005 f88b 	bl	800750c <HAL_SPI_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023fc:	f000 fa76 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000e7c 	.word	0x20000e7c
 8002408:	40013000 	.word	0x40013000

0800240c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002412:	f107 0318 	add.w	r3, r7, #24
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800242a:	463b      	mov	r3, r7
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <MX_TIM1_Init+0xe0>)
 8002438:	4a2d      	ldr	r2, [pc, #180]	; (80024f0 <MX_TIM1_Init+0xe4>)
 800243a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <MX_TIM1_Init+0xe0>)
 800243e:	2247      	movs	r2, #71	; 0x47
 8002440:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <MX_TIM1_Init+0xe0>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <MX_TIM1_Init+0xe0>)
 800244a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800244e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <MX_TIM1_Init+0xe0>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002456:	4b25      	ldr	r3, [pc, #148]	; (80024ec <MX_TIM1_Init+0xe0>)
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245c:	4b23      	ldr	r3, [pc, #140]	; (80024ec <MX_TIM1_Init+0xe0>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002462:	4822      	ldr	r0, [pc, #136]	; (80024ec <MX_TIM1_Init+0xe0>)
 8002464:	f005 fc68 	bl	8007d38 <HAL_TIM_Base_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800246e:	f000 fa3d 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002476:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002478:	f107 0318 	add.w	r3, r7, #24
 800247c:	4619      	mov	r1, r3
 800247e:	481b      	ldr	r0, [pc, #108]	; (80024ec <MX_TIM1_Init+0xe0>)
 8002480:	f005 fff6 	bl	8008470 <HAL_TIM_ConfigClockSource>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800248a:	f000 fa2f 	bl	80028ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800248e:	4817      	ldr	r0, [pc, #92]	; (80024ec <MX_TIM1_Init+0xe0>)
 8002490:	f005 fcf4 	bl	8007e7c <HAL_TIM_IC_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800249a:	f000 fa27 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	4619      	mov	r1, r3
 80024ac:	480f      	ldr	r0, [pc, #60]	; (80024ec <MX_TIM1_Init+0xe0>)
 80024ae:	f006 fafb 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80024b8:	f000 fa18 	bl	80028ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024bc:	2300      	movs	r3, #0
 80024be:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024c0:	2301      	movs	r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80024c8:	230f      	movs	r3, #15
 80024ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024cc:	463b      	mov	r3, r7
 80024ce:	2200      	movs	r2, #0
 80024d0:	4619      	mov	r1, r3
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <MX_TIM1_Init+0xe0>)
 80024d4:	f005 ff38 	bl	8008348 <HAL_TIM_IC_ConfigChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80024de:	f000 fa05 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000df8 	.word	0x20000df8
 80024f0:	40012c00 	.word	0x40012c00

080024f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fa:	f107 0318 	add.w	r3, r7, #24
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002512:	463b      	mov	r3, r7
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <MX_TIM2_Init+0xdc>)
 8002520:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002524:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <MX_TIM2_Init+0xdc>)
 8002528:	2247      	movs	r2, #71	; 0x47
 800252a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <MX_TIM2_Init+0xdc>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <MX_TIM2_Init+0xdc>)
 8002534:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002538:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253a:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <MX_TIM2_Init+0xdc>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <MX_TIM2_Init+0xdc>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002546:	4822      	ldr	r0, [pc, #136]	; (80025d0 <MX_TIM2_Init+0xdc>)
 8002548:	f005 fbf6 	bl	8007d38 <HAL_TIM_Base_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002552:	f000 f9cb 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800255c:	f107 0318 	add.w	r3, r7, #24
 8002560:	4619      	mov	r1, r3
 8002562:	481b      	ldr	r0, [pc, #108]	; (80025d0 <MX_TIM2_Init+0xdc>)
 8002564:	f005 ff84 	bl	8008470 <HAL_TIM_ConfigClockSource>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800256e:	f000 f9bd 	bl	80028ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002572:	4817      	ldr	r0, [pc, #92]	; (80025d0 <MX_TIM2_Init+0xdc>)
 8002574:	f005 fc82 	bl	8007e7c <HAL_TIM_IC_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800257e:	f000 f9b5 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	4619      	mov	r1, r3
 8002590:	480f      	ldr	r0, [pc, #60]	; (80025d0 <MX_TIM2_Init+0xdc>)
 8002592:	f006 fa89 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800259c:	f000 f9a6 	bl	80028ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025a0:	2300      	movs	r3, #0
 80025a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025a4:	2301      	movs	r3, #1
 80025a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80025ac:	230f      	movs	r3, #15
 80025ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025b0:	463b      	mov	r3, r7
 80025b2:	2200      	movs	r2, #0
 80025b4:	4619      	mov	r1, r3
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <MX_TIM2_Init+0xdc>)
 80025b8:	f005 fec6 	bl	8008348 <HAL_TIM_IC_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80025c2:	f000 f993 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000ed4 	.word	0x20000ed4

080025d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	463b      	mov	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <MX_TIM3_Init+0x94>)
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <MX_TIM3_Init+0x98>)
 80025f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <MX_TIM3_Init+0x94>)
 80025f8:	2247      	movs	r2, #71	; 0x47
 80025fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <MX_TIM3_Init+0x94>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <MX_TIM3_Init+0x94>)
 8002604:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002608:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <MX_TIM3_Init+0x94>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002610:	4b15      	ldr	r3, [pc, #84]	; (8002668 <MX_TIM3_Init+0x94>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002616:	4814      	ldr	r0, [pc, #80]	; (8002668 <MX_TIM3_Init+0x94>)
 8002618:	f005 fb8e 	bl	8007d38 <HAL_TIM_Base_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002622:	f000 f963 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	4619      	mov	r1, r3
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <MX_TIM3_Init+0x94>)
 8002634:	f005 ff1c 	bl	8008470 <HAL_TIM_ConfigClockSource>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800263e:	f000 f955 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800264a:	463b      	mov	r3, r7
 800264c:	4619      	mov	r1, r3
 800264e:	4806      	ldr	r0, [pc, #24]	; (8002668 <MX_TIM3_Init+0x94>)
 8002650:	f006 fa2a 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800265a:	f000 f947 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000cb4 	.word	0x20000cb4
 800266c:	40000400 	.word	0x40000400

08002670 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002684:	463b      	mov	r3, r7
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <MX_TIM4_Init+0x94>)
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <MX_TIM4_Init+0x98>)
 8002690:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <MX_TIM4_Init+0x94>)
 8002694:	2247      	movs	r2, #71	; 0x47
 8002696:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_TIM4_Init+0x94>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <MX_TIM4_Init+0x94>)
 80026a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80026a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_TIM4_Init+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_TIM4_Init+0x94>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026b2:	4814      	ldr	r0, [pc, #80]	; (8002704 <MX_TIM4_Init+0x94>)
 80026b4:	f005 fb40 	bl	8007d38 <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80026be:	f000 f915 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4619      	mov	r1, r3
 80026ce:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_TIM4_Init+0x94>)
 80026d0:	f005 fece 	bl	8008470 <HAL_TIM_ConfigClockSource>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80026da:	f000 f907 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <MX_TIM4_Init+0x94>)
 80026ec:	f006 f9dc 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80026f6:	f000 f8f9 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000314 	.word	0x20000314
 8002708:	40000800 	.word	0x40000800

0800270c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <MX_USART1_UART_Init+0x50>)
 8002714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002718:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800271c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002732:	220c      	movs	r2, #12
 8002734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002744:	f006 fa20 	bl	8008b88 <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800274e:	f000 f8cd 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000d70 	.word	0x20000d70
 800275c:	40013800 	.word	0x40013800

08002760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <MX_USART2_UART_Init+0x50>)
 8002768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 800276c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <MX_USART2_UART_Init+0x4c>)
 8002798:	f006 f9f6 	bl	8008b88 <HAL_UART_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027a2:	f000 f8a3 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000450 	.word	0x20000450
 80027b0:	40004400 	.word	0x40004400

080027b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <MX_DMA_Init+0x58>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <MX_DMA_Init+0x58>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6153      	str	r3, [r2, #20]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_DMA_Init+0x58>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	200b      	movs	r0, #11
 80027d8:	f002 fc79 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027dc:	200b      	movs	r0, #11
 80027de:	f002 fc92 	bl	8005106 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	200f      	movs	r0, #15
 80027e8:	f002 fc71 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80027ec:	200f      	movs	r0, #15
 80027ee:	f002 fc8a 	bl	8005106 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	2010      	movs	r0, #16
 80027f8:	f002 fc69 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80027fc:	2010      	movs	r0, #16
 80027fe:	f002 fc82 	bl	8005106 <HAL_NVIC_EnableIRQ>

}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000

08002810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002824:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <MX_GPIO_Init+0xd0>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <MX_GPIO_Init+0xd0>)
 800282a:	f043 0310 	orr.w	r3, r3, #16
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <MX_GPIO_Init+0xd0>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <MX_GPIO_Init+0xd0>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <MX_GPIO_Init+0xd0>)
 8002842:	f043 0320 	orr.w	r3, r3, #32
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <MX_GPIO_Init+0xd0>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <MX_GPIO_Init+0xd0>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <MX_GPIO_Init+0xd0>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <MX_GPIO_Init+0xd0>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <MX_GPIO_Init+0xd0>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <MX_GPIO_Init+0xd0>)
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <MX_GPIO_Init+0xd0>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8002884:	2200      	movs	r2, #0
 8002886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800288a:	4816      	ldr	r0, [pc, #88]	; (80028e4 <MX_GPIO_Init+0xd4>)
 800288c:	f003 f878 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002890:	2200      	movs	r2, #0
 8002892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002896:	4814      	ldr	r0, [pc, #80]	; (80028e8 <MX_GPIO_Init+0xd8>)
 8002898:	f003 f872 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 800289c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 80028ae:	f107 0310 	add.w	r3, r7, #16
 80028b2:	4619      	mov	r1, r3
 80028b4:	480b      	ldr	r0, [pc, #44]	; (80028e4 <MX_GPIO_Init+0xd4>)
 80028b6:	f002 fedf 	bl	8005678 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80028ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c0:	2301      	movs	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80028c8:	2301      	movs	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4619      	mov	r1, r3
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_GPIO_Init+0xd8>)
 80028d4:	f002 fed0 	bl	8005678 <HAL_GPIO_Init>

}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40011000 	.word	0x40011000
 80028e8:	40010800 	.word	0x40010800

080028ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f0:	b672      	cpsid	i
}
 80028f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <Error_Handler+0x8>
	...

080028f8 <rot_Init>:

/*
 * 	Função de inicialização
 */
void rot_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	rot.constante = 0.6;			/* < Salva a constante para calculo da rotação do motor */
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <rot_Init+0x20>)
 80028fe:	4a07      	ldr	r2, [pc, #28]	; (800291c <rot_Init+0x24>)
 8002900:	601a      	str	r2, [r3, #0]
	rot.htim = &htim1;				/* < Salva o ponteiro do Timer que será utilizado */
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <rot_Init+0x20>)
 8002904:	4a06      	ldr	r2, [pc, #24]	; (8002920 <rot_Init+0x28>)
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
	rot.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <rot_Init+0x20>)
 800290a:	2200      	movs	r2, #0
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c

    indutivo_Init(&rot);			/* < Chama função de inicialização */
 800290e:	4802      	ldr	r0, [pc, #8]	; (8002918 <rot_Init+0x20>)
 8002910:	f7ff fac9 	bl	8001ea6 <indutivo_Init>
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000494 	.word	0x20000494
 800291c:	3f19999a 	.word	0x3f19999a
 8002920:	20000df8 	.word	0x20000df8

08002924 <rot_Reset>:

/*
 * 	Função de reset
 */
void rot_Reset(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	indutivo_reset(&rot);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <rot_Reset+0x10>)
 800292a:	f7ff fb9d 	bl	8002068 <indutivo_reset>
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000494 	.word	0x20000494

08002938 <rot_Calc>:

/*
 * 	Função de calculo
 */
void rot_Calc(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
	indutivo_calc(&rot);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <rot_Calc+0x10>)
 800293e:	f7ff fb2f 	bl	8001fa0 <indutivo_calc>
	//LDEBUG;
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000494 	.word	0x20000494

0800294c <bufsize>:

/*
 * 	Função para calcular tamanho de um buffer
 */
int bufsize(char *buf)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8002958:	e002      	b.n	8002960 <bufsize+0x14>
		i++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f6      	bne.n	800295a <bufsize+0xe>
	return i;
 800296c:	68fb      	ldr	r3, [r7, #12]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <bufclear>:

/*
 * 	Função para limpar um buffer
 */
void bufclear(SD_CARD_typedef *buf)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<bufsize(buf->buffer); i++)
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e009      	b.n	800299a <bufclear+0x22>
		buf->buffer[i] = '\0';
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<bufsize(buf->buffer); i++)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f203 4364 	addw	r3, r3, #1124	; 0x464
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ffd3 	bl	800294c <bufsize>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	dbeb      	blt.n	8002986 <bufclear+0xe>
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <SD_Init>:

/*
 * 	Inicialização do cartão sd
 */
FRESULT SD_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	4924      	ldr	r1, [pc, #144]	; (8002a50 <SD_Init+0x98>)
 80029c0:	4824      	ldr	r0, [pc, #144]	; (8002a54 <SD_Init+0x9c>)
 80029c2:	f009 f985 	bl	800bcd0 <f_mount>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <SD_Init+0xa0>)
 80029cc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <SD_Init+0xa0>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <SD_Init+0x24>
		return fresult;
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <SD_Init+0xa0>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	e037      	b.n	8002a4c <SD_Init+0x94>

	fresult = SD_loadSettings();
 80029dc:	f000 f840 	bl	8002a60 <SD_loadSettings>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <SD_Init+0xa0>)
 80029e6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <SD_Init+0xa0>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <SD_Init+0x3e>
		return fresult;
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <SD_Init+0xa0>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	e02a      	b.n	8002a4c <SD_Init+0x94>


	fresult = SD_createFile();
 80029f6:	f000 f963 	bl	8002cc0 <SD_createFile>
 80029fa:	4603      	mov	r3, r0
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <SD_Init+0xa0>)
 8002a00:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <SD_Init+0xa0>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <SD_Init+0x58>
		return fresult;
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <SD_Init+0xa0>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	e01d      	b.n	8002a4c <SD_Init+0x94>

	bufclear(&sdCard);
 8002a10:	4810      	ldr	r0, [pc, #64]	; (8002a54 <SD_Init+0x9c>)
 8002a12:	f7ff ffb1 	bl	8002978 <bufclear>

	LDEBUG;
 8002a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a1a:	4810      	ldr	r0, [pc, #64]	; (8002a5c <SD_Init+0xa4>)
 8002a1c:	f002 ffc8 	bl	80059b0 <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <SD_Init+0x9c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	sdCard.blen = 0;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <SD_Init+0x9c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <SD_Init+0x9c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <SD_Init+0x9c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
	sdCard.timer = 0;
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SD_Init+0x9c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736

	return fresult;
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <SD_Init+0xa0>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	0800d5ec 	.word	0x0800d5ec
 8002a54:	200004c4 	.word	0x200004c4
 8002a58:	20000e78 	.word	0x20000e78
 8002a5c:	40011000 	.word	0x40011000

08002a60 <SD_loadSettings>:

/*
 * 	Função para ler o settings.ini
 */
FRESULT SD_loadSettings(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 8002a64:	4912      	ldr	r1, [pc, #72]	; (8002ab0 <SD_loadSettings+0x50>)
 8002a66:	4813      	ldr	r0, [pc, #76]	; (8002ab4 <SD_loadSettings+0x54>)
 8002a68:	f00a f97a 	bl	800cd60 <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4911      	ldr	r1, [pc, #68]	; (8002ab4 <SD_loadSettings+0x54>)
 8002a70:	4811      	ldr	r0, [pc, #68]	; (8002ab8 <SD_loadSettings+0x58>)
 8002a72:	f009 f975 	bl	800bd60 <f_open>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <SD_loadSettings+0x5c>)
 8002a7c:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <SD_loadSettings+0x5c>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d106      	bne.n	8002a94 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 8002a86:	f000 f81b 	bl	8002ac0 <SD_createSettings>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <SD_loadSettings+0x5c>)
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e009      	b.n	8002aa8 <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <SD_loadSettings+0x5c>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 8002a9c:	f000 f866 	bl	8002b6c <SD_searchSettings>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <SD_loadSettings+0x5c>)
 8002aa6:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <SD_loadSettings+0x5c>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	0800d5f0 	.word	0x0800d5f0
 8002ab4:	20000be8 	.word	0x20000be8
 8002ab8:	200008f4 	.word	0x200008f4
 8002abc:	20000e78 	.word	0x20000e78

08002ac0 <SD_createSettings>:

/*
 * 	Função para criar o settings.ini quando não disponivel
 */
FRESULT SD_createSettings(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 8002ac6:	4822      	ldr	r0, [pc, #136]	; (8002b50 <SD_createSettings+0x90>)
 8002ac8:	f009 fe55 	bl	800c776 <f_close>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <SD_createSettings+0x94>)
 8002ad2:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 8002ad4:	2212      	movs	r2, #18
 8002ad6:	4920      	ldr	r1, [pc, #128]	; (8002b58 <SD_createSettings+0x98>)
 8002ad8:	481d      	ldr	r0, [pc, #116]	; (8002b50 <SD_createSettings+0x90>)
 8002ada:	f009 f941 	bl	800bd60 <f_open>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <SD_createSettings+0x94>)
 8002ae4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <SD_createSettings+0x94>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <SD_createSettings+0x34>
		return fresult;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <SD_createSettings+0x94>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	e029      	b.n	8002b48 <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 8002af4:	4919      	ldr	r1, [pc, #100]	; (8002b5c <SD_createSettings+0x9c>)
 8002af6:	481a      	ldr	r0, [pc, #104]	; (8002b60 <SD_createSettings+0xa0>)
 8002af8:	f00a f932 	bl	800cd60 <siprintf>
 8002afc:	6078      	str	r0, [r7, #4]
			";Mode 1 para Teste de Dinamometro\n"
			";Mode 2 testes com o MPU6050 no 20\n"
			";Mode 3 teste de tração\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <SD_createSettings+0xa4>)
 8002b02:	4917      	ldr	r1, [pc, #92]	; (8002b60 <SD_createSettings+0xa0>)
 8002b04:	4812      	ldr	r0, [pc, #72]	; (8002b50 <SD_createSettings+0x90>)
 8002b06:	f009 fc00 	bl	800c30a <f_write>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <SD_createSettings+0x94>)
 8002b10:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <SD_createSettings+0x94>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <SD_createSettings+0x60>
		return fresult;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <SD_createSettings+0x94>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	e013      	b.n	8002b48 <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 8002b20:	480b      	ldr	r0, [pc, #44]	; (8002b50 <SD_createSettings+0x90>)
 8002b22:	f009 fe28 	bl	800c776 <f_close>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <SD_createSettings+0x94>)
 8002b2c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <SD_createSettings+0x94>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <SD_createSettings+0x7c>
		return fresult;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <SD_createSettings+0x94>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	e005      	b.n	8002b48 <SD_createSettings+0x88>

	sdCard.mode = 0;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <SD_createSettings+0xa8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754

	return fresult;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <SD_createSettings+0x94>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200008f4 	.word	0x200008f4
 8002b54:	20000e78 	.word	0x20000e78
 8002b58:	20000be8 	.word	0x20000be8
 8002b5c:	0800d600 	.word	0x0800d600
 8002b60:	20000968 	.word	0x20000968
 8002b64:	20000c04 	.word	0x20000c04
 8002b68:	200004c4 	.word	0x200004c4

08002b6c <SD_searchSettings>:

/*
 * 	Função que lê o conteudo do settings.ini
 */
FRESULT SD_searchSettings(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
	int index = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 8002b7a:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <SD_searchSettings+0x140>)
 8002b7c:	f240 227f 	movw	r2, #639	; 0x27f
 8002b80:	494b      	ldr	r1, [pc, #300]	; (8002cb0 <SD_searchSettings+0x144>)
 8002b82:	484c      	ldr	r0, [pc, #304]	; (8002cb4 <SD_searchSettings+0x148>)
 8002b84:	f009 fa6c 	bl	800c060 <f_read>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <SD_searchSettings+0x14c>)
 8002b8e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b90:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <SD_searchSettings+0x14c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <SD_searchSettings+0x38>
		return fresult;
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <SD_searchSettings+0x14c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	e082      	b.n	8002ca4 <SD_searchSettings+0x138>

	for (index; sdCard.longBuffer[index] != '='; index++);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	4a45      	ldr	r2, [pc, #276]	; (8002cbc <SD_searchSettings+0x150>)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b3d      	cmp	r3, #61	; 0x3d
 8002bb2:	d1f4      	bne.n	8002b9e <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f240 227d 	movw	r2, #637	; 0x27d
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	dd0b      	ble.n	8002bd6 <SD_searchSettings+0x6a>
	{
		fresult = SD_createSettings();
 8002bbe:	f7ff ff7f 	bl	8002ac0 <SD_createSettings>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <SD_searchSettings+0x14c>)
 8002bc8:	701a      	strb	r2, [r3, #0]
		return fresult;
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <SD_searchSettings+0x14c>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	e069      	b.n	8002ca4 <SD_searchSettings+0x138>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	4a37      	ldr	r2, [pc, #220]	; (8002cbc <SD_searchSettings+0x150>)
 8002bde:	4413      	add	r3, r2
 8002be0:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d908      	bls.n	8002bfa <SD_searchSettings+0x8e>
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	4a33      	ldr	r2, [pc, #204]	; (8002cbc <SD_searchSettings+0x150>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 8002bf6:	2b5a      	cmp	r3, #90	; 0x5a
 8002bf8:	d9ea      	bls.n	8002bd0 <SD_searchSettings+0x64>
	deindex--;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	e012      	b.n	8002c2c <SD_searchSettings+0xc0>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	1ad2      	subs	r2, r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <SD_searchSettings+0x150>)
 8002c12:	4413      	add	r3, r2
 8002c14:	f893 14a4 	ldrb.w	r1, [r3, #1188]	; 0x4a4
 8002c18:	4a28      	ldr	r2, [pc, #160]	; (8002cbc <SD_searchSettings+0x150>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8002c22:	460a      	mov	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	dde7      	ble.n	8002c06 <SD_searchSettings+0x9a>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 8002c36:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <SD_searchSettings+0x150>)
 8002c38:	f893 3744 	ldrb.w	r3, [r3, #1860]	; 0x744
 8002c3c:	2b4d      	cmp	r3, #77	; 0x4d
 8002c3e:	d129      	bne.n	8002c94 <SD_searchSettings+0x128>
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <SD_searchSettings+0x150>)
 8002c42:	f893 3745 	ldrb.w	r3, [r3, #1861]	; 0x745
 8002c46:	2b4f      	cmp	r3, #79	; 0x4f
 8002c48:	d124      	bne.n	8002c94 <SD_searchSettings+0x128>
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <SD_searchSettings+0x150>)
 8002c4c:	f893 3746 	ldrb.w	r3, [r3, #1862]	; 0x746
 8002c50:	2b44      	cmp	r3, #68	; 0x44
 8002c52:	d11f      	bne.n	8002c94 <SD_searchSettings+0x128>
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <SD_searchSettings+0x150>)
 8002c56:	f893 3747 	ldrb.w	r3, [r3, #1863]	; 0x747
 8002c5a:	2b45      	cmp	r3, #69	; 0x45
 8002c5c:	d11a      	bne.n	8002c94 <SD_searchSettings+0x128>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <SD_searchSettings+0x150>)
 8002c60:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002c64:	2b2f      	cmp	r3, #47	; 0x2f
 8002c66:	d90e      	bls.n	8002c86 <SD_searchSettings+0x11a>
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <SD_searchSettings+0x150>)
 8002c6a:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002c6e:	2b39      	cmp	r3, #57	; 0x39
 8002c70:	d809      	bhi.n	8002c86 <SD_searchSettings+0x11a>
			sdCard.mode = sdCard.setting[5] - 48;
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <SD_searchSettings+0x150>)
 8002c74:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b30      	subs	r3, #48	; 0x30
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <SD_searchSettings+0x150>)
 8002c80:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002c84:	e00c      	b.n	8002ca0 <SD_searchSettings+0x134>
		else
			fresult = SD_createSettings();
 8002c86:	f7ff ff1b 	bl	8002ac0 <SD_createSettings>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <SD_searchSettings+0x14c>)
 8002c90:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002c92:	e005      	b.n	8002ca0 <SD_searchSettings+0x134>
	}
	else
		fresult = SD_createSettings();
 8002c94:	f7ff ff14 	bl	8002ac0 <SD_createSettings>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <SD_searchSettings+0x14c>)
 8002c9e:	701a      	strb	r2, [r3, #0]

	return fresult;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <SD_searchSettings+0x14c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000c00 	.word	0x20000c00
 8002cb0:	20000968 	.word	0x20000968
 8002cb4:	200008f4 	.word	0x200008f4
 8002cb8:	20000e78 	.word	0x20000e78
 8002cbc:	200004c4 	.word	0x200004c4

08002cc0 <SD_createFile>:

/*
 * 	Função que cria o fileXXX.txt
 */
FRESULT SD_createFile(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4921      	ldr	r1, [pc, #132]	; (8002d54 <SD_createFile+0x94>)
 8002cce:	4822      	ldr	r0, [pc, #136]	; (8002d58 <SD_createFile+0x98>)
 8002cd0:	f00a f846 	bl	800cd60 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 8002cd4:	2206      	movs	r2, #6
 8002cd6:	4920      	ldr	r1, [pc, #128]	; (8002d58 <SD_createFile+0x98>)
 8002cd8:	4820      	ldr	r0, [pc, #128]	; (8002d5c <SD_createFile+0x9c>)
 8002cda:	f009 f841 	bl	800bd60 <f_open>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <SD_createFile+0xa0>)
 8002ce4:	701a      	strb	r2, [r3, #0]
		filnum++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8002cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cf0:	481c      	ldr	r0, [pc, #112]	; (8002d64 <SD_createFile+0xa4>)
 8002cf2:	f002 fe5d 	bl	80059b0 <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <SD_createFile+0xa0>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d0e5      	beq.n	8002cca <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 8002cfe:	491a      	ldr	r1, [pc, #104]	; (8002d68 <SD_createFile+0xa8>)
 8002d00:	481a      	ldr	r0, [pc, #104]	; (8002d6c <SD_createFile+0xac>)
 8002d02:	f00a f82d 	bl	800cd60 <siprintf>
 8002d06:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <SD_createFile+0xb0>)
 8002d0c:	4917      	ldr	r1, [pc, #92]	; (8002d6c <SD_createFile+0xac>)
 8002d0e:	4813      	ldr	r0, [pc, #76]	; (8002d5c <SD_createFile+0x9c>)
 8002d10:	f009 fafb 	bl	800c30a <f_write>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <SD_createFile+0xa0>)
 8002d1a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <SD_createFile+0xa0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <SD_createFile+0x6a>
		return fresult;
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <SD_createFile+0xa0>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	e00f      	b.n	8002d4a <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 8002d2a:	480c      	ldr	r0, [pc, #48]	; (8002d5c <SD_createFile+0x9c>)
 8002d2c:	f009 fd23 	bl	800c776 <f_close>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <SD_createFile+0xa0>)
 8002d36:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <SD_createFile+0xa0>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <SD_createFile+0x86>
		return fresult;
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <SD_createFile+0xa0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	e001      	b.n	8002d4a <SD_createFile+0x8a>

	return fresult;
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <SD_createFile+0xa0>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	0800d6bc 	.word	0x0800d6bc
 8002d58:	20000be8 	.word	0x20000be8
 8002d5c:	200008f4 	.word	0x200008f4
 8002d60:	20000e78 	.word	0x20000e78
 8002d64:	40011000 	.word	0x40011000
 8002d68:	0800d6cc 	.word	0x0800d6cc
 8002d6c:	20000928 	.word	0x20000928
 8002d70:	20000c04 	.word	0x20000c04

08002d74 <SD_write>:

/*
 * 	Função que escreve em um arquivo
 */
FRESULT SD_write(int bsize, char wBuf[bsize])
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_WRITE);
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4925      	ldr	r1, [pc, #148]	; (8002e18 <SD_write+0xa4>)
 8002d82:	4826      	ldr	r0, [pc, #152]	; (8002e1c <SD_write+0xa8>)
 8002d84:	f008 ffec 	bl	800bd60 <f_open>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <SD_write+0xac>)
 8002d8e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002d90:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <SD_write+0xac>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <SD_write+0x2a>
		return fresult;
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <SD_write+0xac>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	e037      	b.n	8002e0e <SD_write+0x9a>

	fresult = f_lseek(&sdCard.fil, sdCard.fil.fsize);
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <SD_write+0xb0>)
 8002da0:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002da4:	4619      	mov	r1, r3
 8002da6:	481d      	ldr	r0, [pc, #116]	; (8002e1c <SD_write+0xa8>)
 8002da8:	f009 fd0b 	bl	800c7c2 <f_lseek>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <SD_write+0xac>)
 8002db2:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <SD_write+0xac>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <SD_write+0x4e>
		return fresult;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <SD_write+0xac>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	e025      	b.n	8002e0e <SD_write+0x9a>

	fresult = f_write(&sdCard.fil, wBuf, bsize, &sdCard.bw);
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <SD_write+0xb4>)
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	4814      	ldr	r0, [pc, #80]	; (8002e1c <SD_write+0xa8>)
 8002dca:	f009 fa9e 	bl	800c30a <f_write>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <SD_write+0xac>)
 8002dd4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <SD_write+0xac>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <SD_write+0x70>
		return fresult;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <SD_write+0xac>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	e014      	b.n	8002e0e <SD_write+0x9a>

	fresult = f_close(&sdCard.fil);
 8002de4:	480d      	ldr	r0, [pc, #52]	; (8002e1c <SD_write+0xa8>)
 8002de6:	f009 fcc6 	bl	800c776 <f_close>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <SD_write+0xac>)
 8002df0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <SD_write+0xac>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <SD_write+0x8c>
		return fresult;
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <SD_write+0xac>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	e006      	b.n	8002e0e <SD_write+0x9a>

	LDEBUG;
 8002e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e04:	4809      	ldr	r0, [pc, #36]	; (8002e2c <SD_write+0xb8>)
 8002e06:	f002 fdd3 	bl	80059b0 <HAL_GPIO_TogglePin>

	return fresult;
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <SD_write+0xac>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000be8 	.word	0x20000be8
 8002e1c:	200008f4 	.word	0x200008f4
 8002e20:	20000e78 	.word	0x20000e78
 8002e24:	200004c4 	.word	0x200004c4
 8002e28:	20000c04 	.word	0x20000c04
 8002e2c:	40011000 	.word	0x40011000

08002e30 <SD_logger>:

/*
 * 	Função de datalogger
 */
FRESULT SD_logger(void)
{
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	b08f      	sub	sp, #60	; 0x3c
 8002e34:	af0a      	add	r7, sp, #40	; 0x28
	if (sdCard.counter < 9999)
 8002e36:	4b85      	ldr	r3, [pc, #532]	; (800304c <SD_logger+0x21c>)
 8002e38:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8002e3c:	f242 720e 	movw	r2, #9998	; 0x270e
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d808      	bhi.n	8002e56 <SD_logger+0x26>
		sdCard.counter++;
 8002e44:	4b81      	ldr	r3, [pc, #516]	; (800304c <SD_logger+0x21c>)
 8002e46:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	4b7f      	ldr	r3, [pc, #508]	; (800304c <SD_logger+0x21c>)
 8002e50:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
 8002e54:	e003      	b.n	8002e5e <SD_logger+0x2e>
	else
		sdCard.counter = 0;
 8002e56:	4b7d      	ldr	r3, [pc, #500]	; (800304c <SD_logger+0x21c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734

	if (sdCard.mode == 0 || sdCard.mode == 4)
 8002e5e:	4b7b      	ldr	r3, [pc, #492]	; (800304c <SD_logger+0x21c>)
 8002e60:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <SD_logger+0x42>
 8002e68:	4b78      	ldr	r3, [pc, #480]	; (800304c <SD_logger+0x21c>)
 8002e6a:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d110      	bne.n	8002e94 <SD_logger+0x64>
			sdCard.blen = sprintf(sdCard.buffer,
 8002e72:	4b77      	ldr	r3, [pc, #476]	; (8003050 <SD_logger+0x220>)
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	4b77      	ldr	r3, [pc, #476]	; (8003054 <SD_logger+0x224>)
 8002e78:	685b      	ldr	r3, [r3, #4]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, vel.value,
					sdCard.counter);
 8002e7a:	4974      	ldr	r1, [pc, #464]	; (800304c <SD_logger+0x21c>)
 8002e7c:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002e80:	9100      	str	r1, [sp, #0]
 8002e82:	4975      	ldr	r1, [pc, #468]	; (8003058 <SD_logger+0x228>)
 8002e84:	4875      	ldr	r0, [pc, #468]	; (800305c <SD_logger+0x22c>)
 8002e86:	f009 ff6b 	bl	800cd60 <siprintf>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4a6f      	ldr	r2, [pc, #444]	; (800304c <SD_logger+0x21c>)
 8002e8e:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002e92:	e08e      	b.n	8002fb2 <SD_logger+0x182>

	else if (sdCard.mode == 1)
 8002e94:	4b6d      	ldr	r3, [pc, #436]	; (800304c <SD_logger+0x21c>)
 8002e96:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d110      	bne.n	8002ec0 <SD_logger+0x90>
			sdCard.blen = sprintf(sdCard.buffer,
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <SD_logger+0x220>)
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <SD_logger+0x230>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, dina.force,
					sdCard.counter);
 8002ea6:	4969      	ldr	r1, [pc, #420]	; (800304c <SD_logger+0x21c>)
 8002ea8:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002eac:	9100      	str	r1, [sp, #0]
 8002eae:	496a      	ldr	r1, [pc, #424]	; (8003058 <SD_logger+0x228>)
 8002eb0:	486a      	ldr	r0, [pc, #424]	; (800305c <SD_logger+0x22c>)
 8002eb2:	f009 ff55 	bl	800cd60 <siprintf>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4a64      	ldr	r2, [pc, #400]	; (800304c <SD_logger+0x21c>)
 8002eba:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002ebe:	e078      	b.n	8002fb2 <SD_logger+0x182>

	else if (sdCard.mode == 2)
 8002ec0:	4b62      	ldr	r3, [pc, #392]	; (800304c <SD_logger+0x21c>)
 8002ec2:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d156      	bne.n	8002f78 <SD_logger+0x148>
					"%05d%05d%05d"
					"%05d%05d%05d"
					"%04d%04d"
					"%04d"
					"\n",
					canBus.rx.rpm, canBus.rx.vel,
 8002eca:	4b66      	ldr	r3, [pc, #408]	; (8003064 <SD_logger+0x234>)
 8002ecc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			sdCard.blen = sprintf(sdCard.buffer,
 8002ed0:	469c      	mov	ip, r3
					canBus.rx.rpm, canBus.rx.vel,
 8002ed2:	4b64      	ldr	r3, [pc, #400]	; (8003064 <SD_logger+0x234>)
 8002ed4:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			sdCard.blen = sprintf(sdCard.buffer,
 8002ed8:	469e      	mov	lr, r3
					((uint16_t)(aceGir.accel.X_RAW+32768)),
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <SD_logger+0x238>)
 8002edc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002ee6:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002ee8:	461a      	mov	r2, r3
					((uint16_t)(aceGir.accel.Y_RAW+32768)),
 8002eea:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <SD_logger+0x238>)
 8002eec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002ef6:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002ef8:	4619      	mov	r1, r3
					((uint16_t)(aceGir.accel.Z_RAW+32768)),
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <SD_logger+0x238>)
 8002efc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f06:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002f08:	4618      	mov	r0, r3
					((uint16_t)(aceGir.gyro.X_RAW+32768)),
 8002f0a:	4b57      	ldr	r3, [pc, #348]	; (8003068 <SD_logger+0x238>)
 8002f0c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f16:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002f18:	461c      	mov	r4, r3
					((uint16_t)(aceGir.gyro.Y_RAW+32768)),
 8002f1a:	4b53      	ldr	r3, [pc, #332]	; (8003068 <SD_logger+0x238>)
 8002f1c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f26:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002f28:	461d      	mov	r5, r3
					((uint16_t)(aceGir.gyro.Z_RAW+32768)),
 8002f2a:	4b4f      	ldr	r3, [pc, #316]	; (8003068 <SD_logger+0x238>)
 8002f2c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f36:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002f38:	461e      	mov	r6, r3
					analog.buffer[0], analog.buffer[1],
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <SD_logger+0x23c>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
			sdCard.blen = sprintf(sdCard.buffer,
 8002f3e:	607b      	str	r3, [r7, #4]
					analog.buffer[0], analog.buffer[1],
 8002f40:	4b4a      	ldr	r3, [pc, #296]	; (800306c <SD_logger+0x23c>)
 8002f42:	885b      	ldrh	r3, [r3, #2]
			sdCard.blen = sprintf(sdCard.buffer,
 8002f44:	603b      	str	r3, [r7, #0]
					sdCard.counter);
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <SD_logger+0x21c>)
 8002f48:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002f4c:	9308      	str	r3, [sp, #32]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9307      	str	r3, [sp, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	9306      	str	r3, [sp, #24]
 8002f56:	9605      	str	r6, [sp, #20]
 8002f58:	9504      	str	r5, [sp, #16]
 8002f5a:	9403      	str	r4, [sp, #12]
 8002f5c:	9002      	str	r0, [sp, #8]
 8002f5e:	9101      	str	r1, [sp, #4]
 8002f60:	9200      	str	r2, [sp, #0]
 8002f62:	4673      	mov	r3, lr
 8002f64:	4662      	mov	r2, ip
 8002f66:	4942      	ldr	r1, [pc, #264]	; (8003070 <SD_logger+0x240>)
 8002f68:	483c      	ldr	r0, [pc, #240]	; (800305c <SD_logger+0x22c>)
 8002f6a:	f009 fef9 	bl	800cd60 <siprintf>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a36      	ldr	r2, [pc, #216]	; (800304c <SD_logger+0x21c>)
 8002f72:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002f76:	e01c      	b.n	8002fb2 <SD_logger+0x182>

	else if (sdCard.mode == 3)
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <SD_logger+0x21c>)
 8002f7a:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d117      	bne.n	8002fb2 <SD_logger+0x182>
			sdCard.blen = sprintf(sdCard.buffer,
 8002f82:	4b33      	ldr	r3, [pc, #204]	; (8003050 <SD_logger+0x220>)
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <SD_logger+0x224>)
 8002f88:	6858      	ldr	r0, [r3, #4]
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <SD_logger+0x244>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4a39      	ldr	r2, [pc, #228]	; (8003074 <SD_logger+0x244>)
 8002f90:	6b12      	ldr	r2, [r2, #48]	; 0x30
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, vel.value,
					traction.cell1.force, traction.cell2.force,
					sdCard.counter);
 8002f92:	4c2e      	ldr	r4, [pc, #184]	; (800304c <SD_logger+0x21c>)
 8002f94:	f8b4 4734 	ldrh.w	r4, [r4, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002f98:	9402      	str	r4, [sp, #8]
 8002f9a:	9201      	str	r2, [sp, #4]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	460a      	mov	r2, r1
 8002fa2:	4935      	ldr	r1, [pc, #212]	; (8003078 <SD_logger+0x248>)
 8002fa4:	482d      	ldr	r0, [pc, #180]	; (800305c <SD_logger+0x22c>)
 8002fa6:	f009 fedb 	bl	800cd60 <siprintf>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <SD_logger+0x21c>)
 8002fae:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

	for (int i = 0; i < sdCard.blen; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e012      	b.n	8002fde <SD_logger+0x1ae>
		sdCard.longBuffer[i+sdCard.blenLong] = sdCard.buffer[i];
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <SD_logger+0x21c>)
 8002fba:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4922      	ldr	r1, [pc, #136]	; (800304c <SD_logger+0x21c>)
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	440a      	add	r2, r1
 8002fc8:	f202 4264 	addw	r2, r2, #1124	; 0x464
 8002fcc:	7811      	ldrb	r1, [r2, #0]
 8002fce:	4a1f      	ldr	r2, [pc, #124]	; (800304c <SD_logger+0x21c>)
 8002fd0:	4413      	add	r3, r2
 8002fd2:	460a      	mov	r2, r1
 8002fd4:	f883 24a4 	strb.w	r2, [r3, #1188]	; 0x4a4
	for (int i = 0; i < sdCard.blen; i++)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <SD_logger+0x21c>)
 8002fe0:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	dbe6      	blt.n	8002fb8 <SD_logger+0x188>
	sdCard.longCounter++;
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <SD_logger+0x21c>)
 8002fec:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <SD_logger+0x21c>)
 8002ff6:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	sdCard.blenLong += sdCard.blen;
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <SD_logger+0x21c>)
 8002ffc:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <SD_logger+0x21c>)
 8003002:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8003006:	4413      	add	r3, r2
 8003008:	4a10      	ldr	r2, [pc, #64]	; (800304c <SD_logger+0x21c>)
 800300a:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	if (sdCard.longCounter >= SD_BUFFSIZE_LONG)
 800300e:	4b0f      	ldr	r3, [pc, #60]	; (800304c <SD_logger+0x21c>)
 8003010:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8003014:	2b09      	cmp	r3, #9
 8003016:	d912      	bls.n	800303e <SD_logger+0x20e>
	{
		fresult = SD_write(sdCard.blenLong, sdCard.longBuffer);
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <SD_logger+0x21c>)
 800301a:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 800301e:	4917      	ldr	r1, [pc, #92]	; (800307c <SD_logger+0x24c>)
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fea7 	bl	8002d74 <SD_write>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <SD_logger+0x250>)
 800302c:	701a      	strb	r2, [r3, #0]
		sdCard.longCounter = 0;
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <SD_logger+0x21c>)
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
		sdCard.blenLong = 0;
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <SD_logger+0x21c>)
 8003038:	2200      	movs	r2, #0
 800303a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	}

	//LDEBUG;

	return fresult;
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <SD_logger+0x250>)
 8003040:	781b      	ldrb	r3, [r3, #0]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304a:	bf00      	nop
 800304c:	200004c4 	.word	0x200004c4
 8003050:	20000494 	.word	0x20000494
 8003054:	20000cfc 	.word	0x20000cfc
 8003058:	0800d6d0 	.word	0x0800d6d0
 800305c:	20000928 	.word	0x20000928
 8003060:	20000434 	.word	0x20000434
 8003064:	20000388 	.word	0x20000388
 8003068:	2000035c 	.word	0x2000035c
 800306c:	200002e0 	.word	0x200002e0
 8003070:	0800d6e0 	.word	0x0800d6e0
 8003074:	20000e40 	.word	0x20000e40
 8003078:	0800d710 	.word	0x0800d710
 800307c:	20000968 	.word	0x20000968
 8003080:	20000e78 	.word	0x20000e78

08003084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_MspInit+0x5c>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <HAL_MspInit+0x5c>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6193      	str	r3, [r2, #24]
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_MspInit+0x5c>)
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_MspInit+0x5c>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_MspInit+0x5c>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	61d3      	str	r3, [r2, #28]
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_MspInit+0x5c>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_MspInit+0x60>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_MspInit+0x60>)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40010000 	.word	0x40010000

080030e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0318 	add.w	r3, r7, #24
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a33      	ldr	r2, [pc, #204]	; (80031d0 <HAL_ADC_MspInit+0xe8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d15f      	bne.n	80031c8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003108:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 800310e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003112:	6193      	str	r3, [r2, #24]
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	4a2b      	ldr	r2, [pc, #172]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	6193      	str	r3, [r2, #24]
 800312c:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	6193      	str	r3, [r2, #24]
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_ADC_MspInit+0xec>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003154:	2303      	movs	r3, #3
 8003156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	4619      	mov	r1, r3
 800315e:	481e      	ldr	r0, [pc, #120]	; (80031d8 <HAL_ADC_MspInit+0xf0>)
 8003160:	f002 fa8a 	bl	8005678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003164:	2302      	movs	r3, #2
 8003166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003168:	2303      	movs	r3, #3
 800316a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316c:	f107 0318 	add.w	r3, r7, #24
 8003170:	4619      	mov	r1, r3
 8003172:	481a      	ldr	r0, [pc, #104]	; (80031dc <HAL_ADC_MspInit+0xf4>)
 8003174:	f002 fa80 	bl	8005678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 800317a:	4a1a      	ldr	r2, [pc, #104]	; (80031e4 <HAL_ADC_MspInit+0xfc>)
 800317c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 8003180:	2200      	movs	r2, #0
 8003182:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 8003192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003196:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 800319a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800319e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 80031a2:	2220      	movs	r2, #32
 80031a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031ac:	480c      	ldr	r0, [pc, #48]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 80031ae:	f001 ffc5 	bl	800513c <HAL_DMA_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80031b8:	f7ff fb98 	bl	80028ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 80031c0:	621a      	str	r2, [r3, #32]
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <HAL_ADC_MspInit+0xf8>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031c8:	bf00      	nop
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40012400 	.word	0x40012400
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40010800 	.word	0x40010800
 80031dc:	40010c00 	.word	0x40010c00
 80031e0:	20000db4 	.word	0x20000db4
 80031e4:	40020008 	.word	0x40020008

080031e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a20      	ldr	r2, [pc, #128]	; (8003284 <HAL_CAN_MspInit+0x9c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d139      	bne.n	800327c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <HAL_CAN_MspInit+0xa0>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <HAL_CAN_MspInit+0xa0>)
 800320e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003212:	61d3      	str	r3, [r2, #28]
 8003214:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <HAL_CAN_MspInit+0xa0>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_CAN_MspInit+0xa0>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	4a18      	ldr	r2, [pc, #96]	; (8003288 <HAL_CAN_MspInit+0xa0>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	6193      	str	r3, [r2, #24]
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <HAL_CAN_MspInit+0xa0>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800323c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003246:	f107 0310 	add.w	r3, r7, #16
 800324a:	4619      	mov	r1, r3
 800324c:	480f      	ldr	r0, [pc, #60]	; (800328c <HAL_CAN_MspInit+0xa4>)
 800324e:	f002 fa13 	bl	8005678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	2302      	movs	r3, #2
 800325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	4619      	mov	r1, r3
 8003266:	4809      	ldr	r0, [pc, #36]	; (800328c <HAL_CAN_MspInit+0xa4>)
 8003268:	f002 fa06 	bl	8005678 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	2014      	movs	r0, #20
 8003272:	f001 ff2c 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003276:	2014      	movs	r0, #20
 8003278:	f001 ff45 	bl	8005106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800327c:	bf00      	nop
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40006400 	.word	0x40006400
 8003288:	40021000 	.word	0x40021000
 800328c:	40010800 	.word	0x40010800

08003290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_I2C_MspInit+0x74>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d124      	bne.n	80032fa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_I2C_MspInit+0x78>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <HAL_I2C_MspInit+0x78>)
 80032b6:	f043 0308 	orr.w	r3, r3, #8
 80032ba:	6193      	str	r3, [r2, #24]
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_I2C_MspInit+0x78>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ce:	2312      	movs	r3, #18
 80032d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032d2:	2303      	movs	r3, #3
 80032d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d6:	f107 0310 	add.w	r3, r7, #16
 80032da:	4619      	mov	r1, r3
 80032dc:	480b      	ldr	r0, [pc, #44]	; (800330c <HAL_I2C_MspInit+0x7c>)
 80032de:	f002 f9cb 	bl	8005678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_I2C_MspInit+0x78>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <HAL_I2C_MspInit+0x78>)
 80032e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_I2C_MspInit+0x78>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80032fa:	bf00      	nop
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40005800 	.word	0x40005800
 8003308:	40021000 	.word	0x40021000
 800330c:	40010c00 	.word	0x40010c00

08003310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_SPI_MspInit+0xa4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d13d      	bne.n	80033ac <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_SPI_MspInit+0xa8>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <HAL_SPI_MspInit+0xa8>)
 8003336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800333a:	6193      	str	r3, [r2, #24]
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_SPI_MspInit+0xa8>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_SPI_MspInit+0xa8>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_SPI_MspInit+0xa8>)
 800334e:	f043 0308 	orr.w	r3, r3, #8
 8003352:	6193      	str	r3, [r2, #24]
 8003354:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_SPI_MspInit+0xa8>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003360:	2328      	movs	r3, #40	; 0x28
 8003362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4619      	mov	r1, r3
 8003372:	4812      	ldr	r0, [pc, #72]	; (80033bc <HAL_SPI_MspInit+0xac>)
 8003374:	f002 f980 	bl	8005678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003378:	2310      	movs	r3, #16
 800337a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	4619      	mov	r1, r3
 800338a:	480c      	ldr	r0, [pc, #48]	; (80033bc <HAL_SPI_MspInit+0xac>)
 800338c:	f002 f974 	bl	8005678 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_SPI_MspInit+0xb0>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <HAL_SPI_MspInit+0xb0>)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033ac:	bf00      	nop
 80033ae:	3728      	adds	r7, #40	; 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40013000 	.word	0x40013000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010c00 	.word	0x40010c00
 80033c0:	40010000 	.word	0x40010000

080033c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08c      	sub	sp, #48	; 0x30
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0320 	add.w	r3, r7, #32
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_TIM_Base_MspInit+0x160>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d135      	bne.n	8003450 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033e4:	4b50      	ldr	r3, [pc, #320]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80033ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ee:	6193      	str	r3, [r2, #24]
 80033f0:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fc:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4a49      	ldr	r2, [pc, #292]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b47      	ldr	r3, [pc, #284]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800341e:	2302      	movs	r3, #2
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	f107 0320 	add.w	r3, r7, #32
 8003426:	4619      	mov	r1, r3
 8003428:	4840      	ldr	r0, [pc, #256]	; (800352c <HAL_TIM_Base_MspInit+0x168>)
 800342a:	f002 f925 	bl	8005678 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	2019      	movs	r0, #25
 8003434:	f001 fe4b 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003438:	2019      	movs	r0, #25
 800343a:	f001 fe64 	bl	8005106 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	201b      	movs	r0, #27
 8003444:	f001 fe43 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003448:	201b      	movs	r0, #27
 800344a:	f001 fe5c 	bl	8005106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800344e:	e064      	b.n	800351a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d12c      	bne.n	80034b4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	4a32      	ldr	r2, [pc, #200]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	61d3      	str	r3, [r2, #28]
 8003466:	4b30      	ldr	r3, [pc, #192]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	6193      	str	r3, [r2, #24]
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800348a:	2301      	movs	r3, #1
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003492:	2302      	movs	r3, #2
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003496:	f107 0320 	add.w	r3, r7, #32
 800349a:	4619      	mov	r1, r3
 800349c:	4823      	ldr	r0, [pc, #140]	; (800352c <HAL_TIM_Base_MspInit+0x168>)
 800349e:	f002 f8eb 	bl	8005678 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034a2:	2200      	movs	r2, #0
 80034a4:	2100      	movs	r1, #0
 80034a6:	201c      	movs	r0, #28
 80034a8:	f001 fe11 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034ac:	201c      	movs	r0, #28
 80034ae:	f001 fe2a 	bl	8005106 <HAL_NVIC_EnableIRQ>
}
 80034b2:	e032      	b.n	800351a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_TIM_Base_MspInit+0x16c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d114      	bne.n	80034e8 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	4a19      	ldr	r2, [pc, #100]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	61d3      	str	r3, [r2, #28]
 80034ca:	4b17      	ldr	r3, [pc, #92]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2101      	movs	r1, #1
 80034da:	201d      	movs	r0, #29
 80034dc:	f001 fdf7 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034e0:	201d      	movs	r0, #29
 80034e2:	f001 fe10 	bl	8005106 <HAL_NVIC_EnableIRQ>
}
 80034e6:	e018      	b.n	800351a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a11      	ldr	r2, [pc, #68]	; (8003534 <HAL_TIM_Base_MspInit+0x170>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d113      	bne.n	800351a <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	61d3      	str	r3, [r2, #28]
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <HAL_TIM_Base_MspInit+0x164>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2101      	movs	r1, #1
 800350e:	201e      	movs	r0, #30
 8003510:	f001 fddd 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003514:	201e      	movs	r0, #30
 8003516:	f001 fdf6 	bl	8005106 <HAL_NVIC_EnableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3730      	adds	r7, #48	; 0x30
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40021000 	.word	0x40021000
 800352c:	40010800 	.word	0x40010800
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800

08003538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0318 	add.w	r3, r7, #24
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a66      	ldr	r2, [pc, #408]	; (80036ec <HAL_UART_MspInit+0x1b4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d161      	bne.n	800361c <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003558:	4b65      	ldr	r3, [pc, #404]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	4a64      	ldr	r2, [pc, #400]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 800355e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003562:	6193      	str	r3, [r2, #24]
 8003564:	4b62      	ldr	r3, [pc, #392]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003570:	4b5f      	ldr	r3, [pc, #380]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	4a5e      	ldr	r2, [pc, #376]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6193      	str	r3, [r2, #24]
 800357c:	4b5c      	ldr	r3, [pc, #368]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800358c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003592:	2303      	movs	r3, #3
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003596:	f107 0318 	add.w	r3, r7, #24
 800359a:	4619      	mov	r1, r3
 800359c:	4855      	ldr	r0, [pc, #340]	; (80036f4 <HAL_UART_MspInit+0x1bc>)
 800359e:	f002 f86b 	bl	8005678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b0:	f107 0318 	add.w	r3, r7, #24
 80035b4:	4619      	mov	r1, r3
 80035b6:	484f      	ldr	r0, [pc, #316]	; (80036f4 <HAL_UART_MspInit+0x1bc>)
 80035b8:	f002 f85e 	bl	8005678 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80035bc:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035be:	4a4f      	ldr	r2, [pc, #316]	; (80036fc <HAL_UART_MspInit+0x1c4>)
 80035c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c2:	4b4d      	ldr	r3, [pc, #308]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ce:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d4:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035e0:	4b45      	ldr	r3, [pc, #276]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035e2:	2220      	movs	r2, #32
 80035e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035e6:	4b44      	ldr	r3, [pc, #272]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035e8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80035ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035ee:	4842      	ldr	r0, [pc, #264]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 80035f0:	f001 fda4 	bl	800513c <HAL_DMA_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80035fa:	f7ff f977 	bl	80028ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a3d      	ldr	r2, [pc, #244]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 8003602:	639a      	str	r2, [r3, #56]	; 0x38
 8003604:	4a3c      	ldr	r2, [pc, #240]	; (80036f8 <HAL_UART_MspInit+0x1c0>)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	2100      	movs	r1, #0
 800360e:	2025      	movs	r0, #37	; 0x25
 8003610:	f001 fd5d 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003614:	2025      	movs	r0, #37	; 0x25
 8003616:	f001 fd76 	bl	8005106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800361a:	e063      	b.n	80036e4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a37      	ldr	r2, [pc, #220]	; (8003700 <HAL_UART_MspInit+0x1c8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d15e      	bne.n	80036e4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003626:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	61d3      	str	r3, [r2, #28]
 8003632:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	4a2b      	ldr	r2, [pc, #172]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	6193      	str	r3, [r2, #24]
 800364a:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <HAL_UART_MspInit+0x1b8>)
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003656:	2304      	movs	r3, #4
 8003658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800365e:	2303      	movs	r3, #3
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003662:	f107 0318 	add.w	r3, r7, #24
 8003666:	4619      	mov	r1, r3
 8003668:	4822      	ldr	r0, [pc, #136]	; (80036f4 <HAL_UART_MspInit+0x1bc>)
 800366a:	f002 f805 	bl	8005678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800366e:	2308      	movs	r3, #8
 8003670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f107 0318 	add.w	r3, r7, #24
 800367e:	4619      	mov	r1, r3
 8003680:	481c      	ldr	r0, [pc, #112]	; (80036f4 <HAL_UART_MspInit+0x1bc>)
 8003682:	f001 fff9 	bl	8005678 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003686:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 8003688:	4a1f      	ldr	r2, [pc, #124]	; (8003708 <HAL_UART_MspInit+0x1d0>)
 800368a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 800368e:	2200      	movs	r2, #0
 8003690:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 80036ac:	2220      	movs	r2, #32
 80036ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 80036b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80036b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036b8:	4812      	ldr	r0, [pc, #72]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 80036ba:	f001 fd3f 	bl	800513c <HAL_DMA_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80036c4:	f7ff f912 	bl	80028ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
 80036ce:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <HAL_UART_MspInit+0x1cc>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	2026      	movs	r0, #38	; 0x26
 80036da:	f001 fcf8 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036de:	2026      	movs	r0, #38	; 0x26
 80036e0:	f001 fd11 	bl	8005106 <HAL_NVIC_EnableIRQ>
}
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40013800 	.word	0x40013800
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40010800 	.word	0x40010800
 80036f8:	20000d2c 	.word	0x20000d2c
 80036fc:	40020058 	.word	0x40020058
 8003700:	40004400 	.word	0x40004400
 8003704:	20000c1c 	.word	0x20000c1c
 8003708:	4002006c 	.word	0x4002006c

0800370c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <SDTimer_Handler+0x3c>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d006      	beq.n	8003728 <SDTimer_Handler+0x1c>
    Timer1--;
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <SDTimer_Handler+0x3c>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b2da      	uxtb	r2, r3
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <SDTimer_Handler+0x3c>)
 8003726:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <SDTimer_Handler+0x40>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <SDTimer_Handler+0x34>
    Timer2--;
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <SDTimer_Handler+0x40>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <SDTimer_Handler+0x40>)
 800373e:	701a      	strb	r2, [r3, #0]
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	20000f1d 	.word	0x20000f1d
 800374c:	20000f1c 	.word	0x20000f1c

08003750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003754:	e7fe      	b.n	8003754 <NMI_Handler+0x4>

08003756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003756:	b480      	push	{r7}
 8003758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800375a:	e7fe      	b.n	800375a <HardFault_Handler+0x4>

0800375c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003760:	e7fe      	b.n	8003760 <MemManage_Handler+0x4>

08003762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003766:	e7fe      	b.n	8003766 <BusFault_Handler+0x4>

08003768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800376c:	e7fe      	b.n	800376c <UsageFault_Handler+0x4>

0800376e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
	...

08003794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <SysTick_Handler+0x30>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <SysTick_Handler+0x30>)
 80037a4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <SysTick_Handler+0x30>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b09      	cmp	r3, #9
 80037ae:	d904      	bls.n	80037ba <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <SysTick_Handler+0x30>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80037b6:	f7ff ffa9 	bl	800370c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ba:	f000 f9b3 	bl	8003b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200000a6 	.word	0x200000a6

080037c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <DMA1_Channel1_IRQHandler+0x10>)
 80037ce:	f001 fe1f 	bl	8005410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000db4 	.word	0x20000db4

080037dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <DMA1_Channel5_IRQHandler+0x10>)
 80037e2:	f001 fe15 	bl	8005410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000d2c 	.word	0x20000d2c

080037f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <DMA1_Channel6_IRQHandler+0x10>)
 80037f6:	f001 fe0b 	bl	8005410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000c1c 	.word	0x20000c1c

08003804 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	can_bus_Recieve();
 8003808:	f7fd fd38 	bl	800127c <can_bus_Recieve>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 800380e:	f001 f95b 	bl	8004ac8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2000040c 	.word	0x2000040c

0800381c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_UPDATE) != RESET)
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <TIM1_UP_IRQHandler+0x20>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <TIM1_UP_IRQHandler+0x16>
		rot_Reset();
 800382e:	f7ff f879 	bl	8002924 <rot_Reset>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003832:	4802      	ldr	r0, [pc, #8]	; (800383c <TIM1_UP_IRQHandler+0x20>)
 8003834:	f004 fc80 	bl	8008138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000df8 	.word	0x20000df8

08003840 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_CC2) != RESET)
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <TIM1_CC_IRQHandler+0x20>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d101      	bne.n	8003856 <TIM1_CC_IRQHandler+0x16>
		rot_Calc();
 8003852:	f7ff f871 	bl	8002938 <rot_Calc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003856:	4802      	ldr	r0, [pc, #8]	; (8003860 <TIM1_CC_IRQHandler+0x20>)
 8003858:	f004 fc6e 	bl	8008138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000df8 	.word	0x20000df8

08003864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1) != RESET)
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <TIM2_IRQHandler+0x34>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b02      	cmp	r3, #2
 8003874:	d101      	bne.n	800387a <TIM2_IRQHandler+0x16>
		vel_Calc();
 8003876:	f000 f8df 	bl	8003a38 <vel_Calc>
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_UPDATE) != RESET)
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <TIM2_IRQHandler+0x34>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <TIM2_IRQHandler+0x28>
		vel_Reset();
 8003888:	f000 f8cc 	bl	8003a24 <vel_Reset>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <TIM2_IRQHandler+0x34>)
 800388e:	f004 fc53 	bl	8008138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000ed4 	.word	0x20000ed4

0800389c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <TIM3_IRQHandler+0x10>)
 80038a2:	f004 fc49 	bl	8008138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000cb4 	.word	0x20000cb4

080038b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (sdCard.mode == 1)
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <TIM4_IRQHandler+0x50>)
 80038b6:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <TIM4_IRQHandler+0x12>
		dina_Update();
 80038be:	f7fd fd49 	bl	8001354 <dina_Update>
	if (sdCard.mode == 3)
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <TIM4_IRQHandler+0x50>)
 80038c4:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d101      	bne.n	80038d0 <TIM4_IRQHandler+0x20>
		traction_Update();
 80038cc:	f000 f886 	bl	80039dc <traction_Update>
	if (sdCard.mode == 2)
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <TIM4_IRQHandler+0x50>)
 80038d2:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d101      	bne.n	80038de <TIM4_IRQHandler+0x2e>
	{
		aceGir_Read();
 80038da:	f7fd fb99 	bl	8001010 <aceGir_Read>
	}
	if (sdCard.mode != 9)
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <TIM4_IRQHandler+0x50>)
 80038e0:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80038e4:	2b09      	cmp	r3, #9
 80038e6:	d005      	beq.n	80038f4 <TIM4_IRQHandler+0x44>
		fresult = SD_logger();
 80038e8:	f7ff faa2 	bl	8002e30 <SD_logger>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <TIM4_IRQHandler+0x54>)
 80038f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038f4:	4804      	ldr	r0, [pc, #16]	; (8003908 <TIM4_IRQHandler+0x58>)
 80038f6:	f004 fc1f 	bl	8008138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200004c4 	.word	0x200004c4
 8003904:	20000e78 	.word	0x20000e78
 8003908:	20000314 	.word	0x20000314

0800390c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <USART1_IRQHandler+0x10>)
 8003912:	f005 f9b7 	bl	8008c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000d70 	.word	0x20000d70

08003920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <USART2_IRQHandler+0x10>)
 8003926:	f005 f9ad 	bl	8008c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000450 	.word	0x20000450

08003934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <_sbrk+0x5c>)
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <_sbrk+0x60>)
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <_sbrk+0x64>)
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <_sbrk+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <_sbrk+0x64>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d207      	bcs.n	8003974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003964:	f009 f9ca 	bl	800ccfc <__errno>
 8003968:	4603      	mov	r3, r0
 800396a:	220c      	movs	r2, #12
 800396c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	e009      	b.n	8003988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <_sbrk+0x64>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <_sbrk+0x64>)
 8003984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20005000 	.word	0x20005000
 8003994:	00000400 	.word	0x00000400
 8003998:	200000a8 	.word	0x200000a8
 800399c:	20001398 	.word	0x20001398

080039a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <traction_Init>:
 */

#include "traction.h"

void traction_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
	traction.cell1.huart = &huart1;
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <traction_Init+0x20>)
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <traction_Init+0x24>)
 80039b4:	601a      	str	r2, [r3, #0]
	traction.cell2.huart = &huart2;
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <traction_Init+0x20>)
 80039b8:	4a06      	ldr	r2, [pc, #24]	; (80039d4 <traction_Init+0x28>)
 80039ba:	61da      	str	r2, [r3, #28]
	forceGauge_uart_Init_DMA(&traction.cell1);
 80039bc:	4803      	ldr	r0, [pc, #12]	; (80039cc <traction_Init+0x20>)
 80039be:	f7fe f9a9 	bl	8001d14 <forceGauge_uart_Init_DMA>
	forceGauge_uart_Init_DMA(&traction.cell2);
 80039c2:	4805      	ldr	r0, [pc, #20]	; (80039d8 <traction_Init+0x2c>)
 80039c4:	f7fe f9a6 	bl	8001d14 <forceGauge_uart_Init_DMA>
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000e40 	.word	0x20000e40
 80039d0:	20000d70 	.word	0x20000d70
 80039d4:	20000450 	.word	0x20000450
 80039d8:	20000e5c 	.word	0x20000e5c

080039dc <traction_Update>:

void traction_Update(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
	forceGauge_getForce(&traction.cell1);
 80039e0:	4803      	ldr	r0, [pc, #12]	; (80039f0 <traction_Update+0x14>)
 80039e2:	f7fe f9ab 	bl	8001d3c <forceGauge_getForce>
	forceGauge_getForce(&traction.cell2);
 80039e6:	4803      	ldr	r0, [pc, #12]	; (80039f4 <traction_Update+0x18>)
 80039e8:	f7fe f9a8 	bl	8001d3c <forceGauge_getForce>
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000e40 	.word	0x20000e40
 80039f4:	20000e5c 	.word	0x20000e5c

080039f8 <vel_Init>:

/*
 * 	Função de inicialização
 */
void vel_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
	vel.constante = 1.65179;			/* < Salva a constante para calculo da velocidade */
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <vel_Init+0x20>)
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <vel_Init+0x24>)
 8003a00:	601a      	str	r2, [r3, #0]
	vel.htim = &htim2;				/* < Salva o ponteiro do Timer que será utilizado */
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <vel_Init+0x20>)
 8003a04:	4a06      	ldr	r2, [pc, #24]	; (8003a20 <vel_Init+0x28>)
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
	vel.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <vel_Init+0x20>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&vel);			/* < Chama função de inicialização */
 8003a0e:	4802      	ldr	r0, [pc, #8]	; (8003a18 <vel_Init+0x20>)
 8003a10:	f7fe fa49 	bl	8001ea6 <indutivo_Init>
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000cfc 	.word	0x20000cfc
 8003a1c:	3fd36ddb 	.word	0x3fd36ddb
 8003a20:	20000ed4 	.word	0x20000ed4

08003a24 <vel_Reset>:

/*
 * 	Função de reset
 */
void vel_Reset(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
	indutivo_reset(&vel);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <vel_Reset+0x10>)
 8003a2a:	f7fe fb1d 	bl	8002068 <indutivo_reset>
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000cfc 	.word	0x20000cfc

08003a38 <vel_Calc>:

/*
 * 	Função de calculo
 */
void vel_Calc(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
	indutivo_calc(&vel);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <vel_Calc+0x10>)
 8003a3e:	f7fe faaf 	bl	8001fa0 <indutivo_calc>
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000cfc 	.word	0x20000cfc

08003a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a4c:	480c      	ldr	r0, [pc, #48]	; (8003a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a4e:	490d      	ldr	r1, [pc, #52]	; (8003a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a50:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a54:	e002      	b.n	8003a5c <LoopCopyDataInit>

08003a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a5a:	3304      	adds	r3, #4

08003a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a60:	d3f9      	bcc.n	8003a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a64:	4c0a      	ldr	r4, [pc, #40]	; (8003a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a68:	e001      	b.n	8003a6e <LoopFillZerobss>

08003a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a6c:	3204      	adds	r2, #4

08003a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a70:	d3fb      	bcc.n	8003a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a72:	f7ff ff95 	bl	80039a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a76:	f009 f947 	bl	800cd08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a7a:	f7fe fb15 	bl	80020a8 <main>
  bx lr
 8003a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8003a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a84:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003a88:	0800dd34 	.word	0x0800dd34
  ldr r2, =_sbss
 8003a8c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003a90:	20001398 	.word	0x20001398

08003a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a94:	e7fe      	b.n	8003a94 <ADC1_2_IRQHandler>
	...

08003a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <HAL_Init+0x28>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <HAL_Init+0x28>)
 8003aa2:	f043 0310 	orr.w	r3, r3, #16
 8003aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa8:	2003      	movs	r0, #3
 8003aaa:	f001 fb05 	bl	80050b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f000 f808 	bl	8003ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ab4:	f7ff fae6 	bl	8003084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40022000 	.word	0x40022000

08003ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_InitTick+0x54>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_InitTick+0x58>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 fb1d 	bl	8005122 <HAL_SYSTICK_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e00e      	b.n	8003b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b0f      	cmp	r3, #15
 8003af6:	d80a      	bhi.n	8003b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af8:	2200      	movs	r2, #0
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f001 fae5 	bl	80050ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b04:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <HAL_InitTick+0x5c>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	2000000c 	.word	0x2000000c
 8003b20:	20000008 	.word	0x20000008

08003b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_IncTick+0x1c>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_IncTick+0x20>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <HAL_IncTick+0x20>)
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	2000000c 	.word	0x2000000c
 8003b44:	20000f20 	.word	0x20000f20

08003b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <HAL_GetTick+0x10>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	20000f20 	.word	0x20000f20

08003b5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0be      	b.n	8003cfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff faa4 	bl	80030e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 faff 	bl	80041a4 <ADC_ConversionStop_Disable>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 8099 	bne.w	8003cea <HAL_ADC_Init+0x18e>
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 8095 	bne.w	8003cea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bc8:	f023 0302 	bic.w	r3, r3, #2
 8003bcc:	f043 0202 	orr.w	r2, r3, #2
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003bdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7b1b      	ldrb	r3, [r3, #12]
 8003be2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003be4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf4:	d003      	beq.n	8003bfe <HAL_ADC_Init+0xa2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_ADC_Init+0xa8>
 8003bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c02:	e000      	b.n	8003c06 <HAL_ADC_Init+0xaa>
 8003c04:	2300      	movs	r3, #0
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	7d1b      	ldrb	r3, [r3, #20]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d119      	bne.n	8003c48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7b1b      	ldrb	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	035a      	lsls	r2, r3, #13
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	e00b      	b.n	8003c48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f043 0201 	orr.w	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <HAL_ADC_Init+0x1a8>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c78:	d003      	beq.n	8003c82 <HAL_ADC_Init+0x126>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d104      	bne.n	8003c8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	051b      	lsls	r3, r3, #20
 8003c8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <HAL_ADC_Init+0x1ac>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d10b      	bne.n	8003cc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003cc6:	e018      	b.n	8003cfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	f023 0312 	bic.w	r3, r3, #18
 8003cd0:	f043 0210 	orr.w	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ce8:	e007      	b.n	8003cfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	f043 0210 	orr.w	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffe1f7fd 	.word	0xffe1f7fd
 8003d08:	ff1f0efe 	.word	0xff1f0efe

08003d0c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a64      	ldr	r2, [pc, #400]	; (8003eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_ADC_Start_DMA+0x24>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a63      	ldr	r2, [pc, #396]	; (8003eb8 <HAL_ADC_Start_DMA+0x1ac>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d106      	bne.n	8003d3e <HAL_ADC_Start_DMA+0x32>
 8003d30:	4b60      	ldr	r3, [pc, #384]	; (8003eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 80b3 	bne.w	8003ea4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_Start_DMA+0x40>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0ae      	b.n	8003eaa <HAL_ADC_Start_DMA+0x19e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f9cb 	bl	80040f0 <ADC_Enable>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 809a 	bne.w	8003e9a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a4e      	ldr	r2, [pc, #312]	; (8003eb8 <HAL_ADC_Start_DMA+0x1ac>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d105      	bne.n	8003d90 <HAL_ADC_Start_DMA+0x84>
 8003d84:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d115      	bne.n	8003dbc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d026      	beq.n	8003df8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003db2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dba:	e01d      	b.n	8003df8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a39      	ldr	r2, [pc, #228]	; (8003eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADC_Start_DMA+0xd0>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a38      	ldr	r2, [pc, #224]	; (8003eb8 <HAL_ADC_Start_DMA+0x1ac>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d10d      	bne.n	8003df8 <HAL_ADC_Start_DMA+0xec>
 8003ddc:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003df0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d006      	beq.n	8003e12 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f023 0206 	bic.w	r2, r3, #6
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e10:	e002      	b.n	8003e18 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <HAL_ADC_Start_DMA+0x1b0>)
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <HAL_ADC_Start_DMA+0x1b4>)
 8003e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <HAL_ADC_Start_DMA+0x1b8>)
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0202 	mvn.w	r2, #2
 8003e40:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e50:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a18      	ldr	r0, [r3, #32]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	334c      	adds	r3, #76	; 0x4c
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f001 f9c5 	bl	80051f0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003e70:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e74:	d108      	bne.n	8003e88 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003e84:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003e86:	e00f      	b.n	8003ea8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003e96:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003e98:	e006      	b.n	8003ea8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003ea2:	e001      	b.n	8003ea8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40012400 	.word	0x40012400
 8003eb8:	40012800 	.word	0x40012800
 8003ebc:	08004227 	.word	0x08004227
 8003ec0:	080042a3 	.word	0x080042a3
 8003ec4:	080042bf 	.word	0x080042bf

08003ec8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x20>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0dc      	b.n	80040da <HAL_ADC_ConfigChannel+0x1da>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b06      	cmp	r3, #6
 8003f2e:	d81c      	bhi.n	8003f6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	3b05      	subs	r3, #5
 8003f42:	221f      	movs	r2, #31
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	4019      	ands	r1, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	3b05      	subs	r3, #5
 8003f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	635a      	str	r2, [r3, #52]	; 0x34
 8003f68:	e03c      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d81c      	bhi.n	8003fac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	3b23      	subs	r3, #35	; 0x23
 8003f84:	221f      	movs	r2, #31
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	4019      	ands	r1, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3b23      	subs	r3, #35	; 0x23
 8003f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8003faa:	e01b      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	3b41      	subs	r3, #65	; 0x41
 8003fbe:	221f      	movs	r2, #31
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	4019      	ands	r1, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3b41      	subs	r3, #65	; 0x41
 8003fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b09      	cmp	r3, #9
 8003fea:	d91c      	bls.n	8004026 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68d9      	ldr	r1, [r3, #12]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3b1e      	subs	r3, #30
 8003ffe:	2207      	movs	r2, #7
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	4019      	ands	r1, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6898      	ldr	r0, [r3, #8]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	3b1e      	subs	r3, #30
 8004018:	fa00 f203 	lsl.w	r2, r0, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	60da      	str	r2, [r3, #12]
 8004024:	e019      	b.n	800405a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6919      	ldr	r1, [r3, #16]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	2207      	movs	r2, #7
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	4019      	ands	r1, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6898      	ldr	r0, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4413      	add	r3, r2
 800404e:	fa00 f203 	lsl.w	r2, r0, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b10      	cmp	r3, #16
 8004060:	d003      	beq.n	800406a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004066:	2b11      	cmp	r3, #17
 8004068:	d132      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d125      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d126      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004090:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b10      	cmp	r3, #16
 8004098:	d11a      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a13      	ldr	r2, [pc, #76]	; (80040ec <HAL_ADC_ConfigChannel+0x1ec>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	0c9a      	lsrs	r2, r3, #18
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040b0:	e002      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f9      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x1b2>
 80040be:	e007      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	40012400 	.word	0x40012400
 80040e8:	20000004 	.word	0x20000004
 80040ec:	431bde83 	.word	0x431bde83

080040f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d040      	beq.n	8004190 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800411e:	4b1f      	ldr	r3, [pc, #124]	; (800419c <ADC_Enable+0xac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <ADC_Enable+0xb0>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	0c9b      	lsrs	r3, r3, #18
 800412a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800412c:	e002      	b.n	8004134 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	3b01      	subs	r3, #1
 8004132:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f9      	bne.n	800412e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800413a:	f7ff fd05 	bl	8003b48 <HAL_GetTick>
 800413e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004140:	e01f      	b.n	8004182 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004142:	f7ff fd01 	bl	8003b48 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d918      	bls.n	8004182 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d011      	beq.n	8004182 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e007      	b.n	8004192 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d1d8      	bne.n	8004142 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000004 	.word	0x20000004
 80041a0:	431bde83 	.word	0x431bde83

080041a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d12e      	bne.n	800421c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041ce:	f7ff fcbb 	bl	8003b48 <HAL_GetTick>
 80041d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041d4:	e01b      	b.n	800420e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041d6:	f7ff fcb7 	bl	8003b48 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d914      	bls.n	800420e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d10d      	bne.n	800420e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f043 0210 	orr.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e007      	b.n	800421e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d0dc      	beq.n	80041d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d127      	bne.n	8004290 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004256:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800425a:	d115      	bne.n	8004288 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004260:	2b00      	cmp	r3, #0
 8004262:	d111      	bne.n	8004288 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f043 0201 	orr.w	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fe1d 	bl	8003ec8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800428e:	e004      	b.n	800429a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff fe12 	bl	8003eda <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	f043 0204 	orr.w	r2, r3, #4
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fe01 	bl	8003eec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_ADCEx_Calibration_Start+0x1e>
 800430e:	2302      	movs	r3, #2
 8004310:	e095      	b.n	800443e <HAL_ADCEx_Calibration_Start+0x14a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff ff42 	bl	80041a4 <ADC_ConversionStop_Disable>
 8004320:	4603      	mov	r3, r0
 8004322:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 8084 	bne.w	8004434 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004334:	f023 0302 	bic.w	r3, r3, #2
 8004338:	f043 0202 	orr.w	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004340:	4b41      	ldr	r3, [pc, #260]	; (8004448 <HAL_ADCEx_Calibration_Start+0x154>)
 8004342:	681c      	ldr	r4, [r3, #0]
 8004344:	2002      	movs	r0, #2
 8004346:	f003 f81d 	bl	8007384 <HAL_RCCEx_GetPeriphCLKFreq>
 800434a:	4603      	mov	r3, r0
 800434c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004350:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004352:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004354:	e002      	b.n	800435c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b01      	subs	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f9      	bne.n	8004356 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fec4 	bl	80040f0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004378:	f7ff fbe6 	bl	8003b48 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800437e:	e01b      	b.n	80043b8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004380:	f7ff fbe2 	bl	8003b48 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b0a      	cmp	r3, #10
 800438c:	d914      	bls.n	80043b8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f023 0312 	bic.w	r3, r3, #18
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e042      	b.n	800443e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1dc      	bne.n	8004380 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0204 	orr.w	r2, r2, #4
 80043d4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80043d6:	f7ff fbb7 	bl	8003b48 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80043dc:	e01b      	b.n	8004416 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80043de:	f7ff fbb3 	bl	8003b48 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b0a      	cmp	r3, #10
 80043ea:	d914      	bls.n	8004416 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	f023 0312 	bic.w	r3, r3, #18
 8004402:	f043 0210 	orr.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e013      	b.n	800443e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1dc      	bne.n	80043de <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	f023 0303 	bic.w	r3, r3, #3
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800443c:	7dfb      	ldrb	r3, [r7, #23]
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd90      	pop	{r4, r7, pc}
 8004446:	bf00      	nop
 8004448:	20000004 	.word	0x20000004

0800444c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0ed      	b.n	800463a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fe febc 	bl	80031e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004480:	f7ff fb62 	bl	8003b48 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004486:	e012      	b.n	80044ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004488:	f7ff fb5e 	bl	8003b48 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b0a      	cmp	r3, #10
 8004494:	d90b      	bls.n	80044ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2205      	movs	r2, #5
 80044a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e0c5      	b.n	800463a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0e5      	beq.n	8004488 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0202 	bic.w	r2, r2, #2
 80044ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044cc:	f7ff fb3c 	bl	8003b48 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044d2:	e012      	b.n	80044fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044d4:	f7ff fb38 	bl	8003b48 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b0a      	cmp	r3, #10
 80044e0:	d90b      	bls.n	80044fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2205      	movs	r2, #5
 80044f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e09f      	b.n	800463a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e5      	bne.n	80044d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	7e1b      	ldrb	r3, [r3, #24]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d108      	bne.n	8004522 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	e007      	b.n	8004532 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004530:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	7e5b      	ldrb	r3, [r3, #25]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d108      	bne.n	800454c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e007      	b.n	800455c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7e9b      	ldrb	r3, [r3, #26]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d108      	bne.n	8004576 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0220 	orr.w	r2, r2, #32
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e007      	b.n	8004586 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0220 	bic.w	r2, r2, #32
 8004584:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7edb      	ldrb	r3, [r3, #27]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d108      	bne.n	80045a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0210 	bic.w	r2, r2, #16
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e007      	b.n	80045b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0210 	orr.w	r2, r2, #16
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	7f1b      	ldrb	r3, [r3, #28]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d108      	bne.n	80045ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0208 	orr.w	r2, r2, #8
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e007      	b.n	80045da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0208 	bic.w	r2, r2, #8
 80045d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7f5b      	ldrb	r3, [r3, #29]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d108      	bne.n	80045f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0204 	orr.w	r2, r2, #4
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e007      	b.n	8004604 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0204 	bic.w	r2, r2, #4
 8004602:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	ea42 0103 	orr.w	r1, r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004642:	b480      	push	{r7}
 8004644:	b087      	sub	sp, #28
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004658:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d003      	beq.n	8004668 <HAL_CAN_ConfigFilter+0x26>
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	2b02      	cmp	r3, #2
 8004664:	f040 80aa 	bne.w	80047bc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800466e:	f043 0201 	orr.w	r2, r3, #1
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2201      	movs	r2, #1
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d123      	bne.n	80046ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	401a      	ands	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	3248      	adds	r2, #72	; 0x48
 80046ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046e0:	6979      	ldr	r1, [r7, #20]
 80046e2:	3348      	adds	r3, #72	; 0x48
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	440b      	add	r3, r1
 80046e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d122      	bne.n	8004738 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004712:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	3248      	adds	r2, #72	; 0x48
 8004718:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800472c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	3348      	adds	r3, #72	; 0x48
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	440b      	add	r3, r1
 8004736:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	43db      	mvns	r3, r3
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004752:	e007      	b.n	8004764 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	431a      	orrs	r2, r3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	43db      	mvns	r3, r3
 8004776:	401a      	ands	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800477e:	e007      	b.n	8004790 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	431a      	orrs	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e006      	b.n	80047ca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d12e      	bne.n	8004846 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004800:	f7ff f9a2 	bl	8003b48 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004806:	e012      	b.n	800482e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004808:	f7ff f99e 	bl	8003b48 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b0a      	cmp	r3, #10
 8004814:	d90b      	bls.n	800482e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2205      	movs	r2, #5
 8004826:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e012      	b.n	8004854 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e5      	bne.n	8004808 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	e006      	b.n	8004854 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004870:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d003      	beq.n	8004880 <HAL_CAN_GetRxMessage+0x24>
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b02      	cmp	r3, #2
 800487c:	f040 80f3 	bne.w	8004a66 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10e      	bne.n	80048a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d116      	bne.n	80048c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0e7      	b.n	8004a74 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0d8      	b.n	8004a74 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	331b      	adds	r3, #27
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	4413      	add	r3, r2
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0204 	and.w	r2, r3, #4
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10c      	bne.n	80048fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	331b      	adds	r3, #27
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	4413      	add	r3, r2
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	0d5b      	lsrs	r3, r3, #21
 80048f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e00b      	b.n	8004912 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	331b      	adds	r3, #27
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	4413      	add	r3, r2
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	331b      	adds	r3, #27
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	4413      	add	r3, r2
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0202 	and.w	r2, r3, #2
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	331b      	adds	r3, #27
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	4413      	add	r3, r2
 8004934:	3304      	adds	r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	331b      	adds	r3, #27
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	4413      	add	r3, r2
 800494c:	3304      	adds	r3, #4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	b2da      	uxtb	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	331b      	adds	r3, #27
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	4413      	add	r3, r2
 8004964:	3304      	adds	r3, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	4413      	add	r3, r2
 800497a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	4413      	add	r3, r2
 8004990:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	0a1a      	lsrs	r2, r3, #8
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0c1a      	lsrs	r2, r3, #16
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	3302      	adds	r3, #2
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	0e1a      	lsrs	r2, r3, #24
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	3303      	adds	r3, #3
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4413      	add	r3, r2
 80049de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	3304      	adds	r3, #4
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0a1a      	lsrs	r2, r3, #8
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	3305      	adds	r3, #5
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	0c1a      	lsrs	r2, r3, #16
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	3306      	adds	r3, #6
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0e1a      	lsrs	r2, r3, #24
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3307      	adds	r3, #7
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0220 	orr.w	r2, r2, #32
 8004a4e:	60da      	str	r2, [r3, #12]
 8004a50:	e007      	b.n	8004a62 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0220 	orr.w	r2, r2, #32
 8004a60:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e006      	b.n	8004a74 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a8e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d002      	beq.n	8004a9c <HAL_CAN_ActivateNotification+0x1e>
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d109      	bne.n	8004ab0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6959      	ldr	r1, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e006      	b.n	8004abe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d07c      	beq.n	8004c08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d023      	beq.n	8004b60 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f983 	bl	8004e36 <HAL_CAN_TxMailbox0CompleteCallback>
 8004b30:	e016      	b.n	8004b60 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	e00c      	b.n	8004b60 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	e002      	b.n	8004b60 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f986 	bl	8004e6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d024      	beq.n	8004bb4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f962 	bl	8004e48 <HAL_CAN_TxMailbox1CompleteCallback>
 8004b84:	e016      	b.n	8004bb4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
 8004b98:	e00c      	b.n	8004bb4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bac:	e002      	b.n	8004bb4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f965 	bl	8004e7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d024      	beq.n	8004c08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f941 	bl	8004e5a <HAL_CAN_TxMailbox2CompleteCallback>
 8004bd8:	e016      	b.n	8004c08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
 8004bec:	e00c      	b.n	8004c08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004c00:	e002      	b.n	8004c08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f944 	bl	8004e90 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d006      	beq.n	8004c4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2208      	movs	r2, #8
 8004c46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f933 	bl	8004eb4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f91b 	bl	8004ea2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d006      	beq.n	8004cb2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2208      	movs	r2, #8
 8004caa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f913 	bl	8004ed8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8fb 	bl	8004ec6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2210      	movs	r2, #16
 8004cea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8fc 	bl	8004eea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00b      	beq.n	8004d14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f8f4 	bl	8004efc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d07b      	beq.n	8004e16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d072      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d008      	beq.n	8004d60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	f043 0304 	orr.w	r3, r3, #4
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d043      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d03e      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d96:	2b60      	cmp	r3, #96	; 0x60
 8004d98:	d02b      	beq.n	8004df2 <HAL_CAN_IRQHandler+0x32a>
 8004d9a:	2b60      	cmp	r3, #96	; 0x60
 8004d9c:	d82e      	bhi.n	8004dfc <HAL_CAN_IRQHandler+0x334>
 8004d9e:	2b50      	cmp	r3, #80	; 0x50
 8004da0:	d022      	beq.n	8004de8 <HAL_CAN_IRQHandler+0x320>
 8004da2:	2b50      	cmp	r3, #80	; 0x50
 8004da4:	d82a      	bhi.n	8004dfc <HAL_CAN_IRQHandler+0x334>
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d019      	beq.n	8004dde <HAL_CAN_IRQHandler+0x316>
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d826      	bhi.n	8004dfc <HAL_CAN_IRQHandler+0x334>
 8004dae:	2b30      	cmp	r3, #48	; 0x30
 8004db0:	d010      	beq.n	8004dd4 <HAL_CAN_IRQHandler+0x30c>
 8004db2:	2b30      	cmp	r3, #48	; 0x30
 8004db4:	d822      	bhi.n	8004dfc <HAL_CAN_IRQHandler+0x334>
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d002      	beq.n	8004dc0 <HAL_CAN_IRQHandler+0x2f8>
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d005      	beq.n	8004dca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004dbe:	e01d      	b.n	8004dfc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f043 0308 	orr.w	r3, r3, #8
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dc8:	e019      	b.n	8004dfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f043 0310 	orr.w	r3, r3, #16
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dd2:	e014      	b.n	8004dfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	f043 0320 	orr.w	r3, r3, #32
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ddc:	e00f      	b.n	8004dfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004de6:	e00a      	b.n	8004dfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004df0:	e005      	b.n	8004dfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dfa:	e000      	b.n	8004dfe <HAL_CAN_IRQHandler+0x336>
            break;
 8004dfc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2204      	movs	r2, #4
 8004e14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f870 	bl	8004f0e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e2e:	bf00      	nop
 8004e30:	3728      	adds	r7, #40	; 0x28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr

08004e6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr

08004e90 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <__NVIC_SetPriorityGrouping+0x44>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f52:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <__NVIC_SetPriorityGrouping+0x44>)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	60d3      	str	r3, [r2, #12]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <__NVIC_GetPriorityGrouping+0x18>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	f003 0307 	and.w	r3, r3, #7
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000ed00 	.word	0xe000ed00

08004f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	db0b      	blt.n	8004fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	f003 021f 	and.w	r2, r3, #31
 8004f9c:	4906      	ldr	r1, [pc, #24]	; (8004fb8 <__NVIC_EnableIRQ+0x34>)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8004faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr
 8004fb8:	e000e100 	.word	0xe000e100

08004fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	6039      	str	r1, [r7, #0]
 8004fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	db0a      	blt.n	8004fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	490c      	ldr	r1, [pc, #48]	; (8005008 <__NVIC_SetPriority+0x4c>)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	0112      	lsls	r2, r2, #4
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	440b      	add	r3, r1
 8004fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fe4:	e00a      	b.n	8004ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	4908      	ldr	r1, [pc, #32]	; (800500c <__NVIC_SetPriority+0x50>)
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	3b04      	subs	r3, #4
 8004ff4:	0112      	lsls	r2, r2, #4
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	761a      	strb	r2, [r3, #24]
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	e000e100 	.word	0xe000e100
 800500c:	e000ed00 	.word	0xe000ed00

08005010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f1c3 0307 	rsb	r3, r3, #7
 800502a:	2b04      	cmp	r3, #4
 800502c:	bf28      	it	cs
 800502e:	2304      	movcs	r3, #4
 8005030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	3304      	adds	r3, #4
 8005036:	2b06      	cmp	r3, #6
 8005038:	d902      	bls.n	8005040 <NVIC_EncodePriority+0x30>
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	3b03      	subs	r3, #3
 800503e:	e000      	b.n	8005042 <NVIC_EncodePriority+0x32>
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005044:	f04f 32ff 	mov.w	r2, #4294967295
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43da      	mvns	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	401a      	ands	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005058:	f04f 31ff 	mov.w	r1, #4294967295
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	fa01 f303 	lsl.w	r3, r1, r3
 8005062:	43d9      	mvns	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005068:	4313      	orrs	r3, r2
         );
}
 800506a:	4618      	mov	r0, r3
 800506c:	3724      	adds	r7, #36	; 0x24
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005084:	d301      	bcc.n	800508a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005086:	2301      	movs	r3, #1
 8005088:	e00f      	b.n	80050aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800508a:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <SysTick_Config+0x40>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005092:	210f      	movs	r1, #15
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	f7ff ff90 	bl	8004fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <SysTick_Config+0x40>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <SysTick_Config+0x40>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	e000e010 	.word	0xe000e010

080050b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff2d 	bl	8004f20 <__NVIC_SetPriorityGrouping>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	4603      	mov	r3, r0
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e0:	f7ff ff42 	bl	8004f68 <__NVIC_GetPriorityGrouping>
 80050e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff ff90 	bl	8005010 <NVIC_EncodePriority>
 80050f0:	4602      	mov	r2, r0
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff ff5f 	bl	8004fbc <__NVIC_SetPriority>
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	4603      	mov	r3, r0
 800510e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff35 	bl	8004f84 <__NVIC_EnableIRQ>
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ffa2 	bl	8005074 <SysTick_Config>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e043      	b.n	80051da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	4b22      	ldr	r3, [pc, #136]	; (80051e4 <HAL_DMA_Init+0xa8>)
 800515a:	4413      	add	r3, r2
 800515c:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <HAL_DMA_Init+0xac>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	009a      	lsls	r2, r3, #2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <HAL_DMA_Init+0xb0>)
 800516e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005186:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800518a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005194:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	bffdfff8 	.word	0xbffdfff8
 80051e8:	cccccccd 	.word	0xcccccccd
 80051ec:	40020000 	.word	0x40020000

080051f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_DMA_Start_IT+0x20>
 800520c:	2302      	movs	r3, #2
 800520e:	e04a      	b.n	80052a6 <HAL_DMA_Start_IT+0xb6>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800521e:	2b01      	cmp	r3, #1
 8005220:	d13a      	bne.n	8005298 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f9e8 	bl	800561c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 020e 	orr.w	r2, r2, #14
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e00f      	b.n	8005286 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0204 	bic.w	r2, r2, #4
 8005274:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 020a 	orr.w	r2, r2, #10
 8005284:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0201 	orr.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e005      	b.n	80052a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
 80052a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d008      	beq.n	80052d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2204      	movs	r2, #4
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e020      	b.n	8005318 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 020e 	bic.w	r2, r2, #14
 80052e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	2101      	movs	r1, #1
 8005300:	fa01 f202 	lsl.w	r2, r1, r2
 8005304:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr
	...

08005324 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005336:	2b02      	cmp	r3, #2
 8005338:	d005      	beq.n	8005346 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2204      	movs	r2, #4
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	e051      	b.n	80053ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 020e 	bic.w	r2, r2, #14
 8005354:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <HAL_DMA_Abort_IT+0xd0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d029      	beq.n	80053c4 <HAL_DMA_Abort_IT+0xa0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a20      	ldr	r2, [pc, #128]	; (80053f8 <HAL_DMA_Abort_IT+0xd4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d022      	beq.n	80053c0 <HAL_DMA_Abort_IT+0x9c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <HAL_DMA_Abort_IT+0xd8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d01a      	beq.n	80053ba <HAL_DMA_Abort_IT+0x96>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <HAL_DMA_Abort_IT+0xdc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d012      	beq.n	80053b4 <HAL_DMA_Abort_IT+0x90>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <HAL_DMA_Abort_IT+0xe0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00a      	beq.n	80053ae <HAL_DMA_Abort_IT+0x8a>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1a      	ldr	r2, [pc, #104]	; (8005408 <HAL_DMA_Abort_IT+0xe4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d102      	bne.n	80053a8 <HAL_DMA_Abort_IT+0x84>
 80053a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053a6:	e00e      	b.n	80053c6 <HAL_DMA_Abort_IT+0xa2>
 80053a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ac:	e00b      	b.n	80053c6 <HAL_DMA_Abort_IT+0xa2>
 80053ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053b2:	e008      	b.n	80053c6 <HAL_DMA_Abort_IT+0xa2>
 80053b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b8:	e005      	b.n	80053c6 <HAL_DMA_Abort_IT+0xa2>
 80053ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053be:	e002      	b.n	80053c6 <HAL_DMA_Abort_IT+0xa2>
 80053c0:	2310      	movs	r3, #16
 80053c2:	e000      	b.n	80053c6 <HAL_DMA_Abort_IT+0xa2>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4a11      	ldr	r2, [pc, #68]	; (800540c <HAL_DMA_Abort_IT+0xe8>)
 80053c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
    } 
  }
  return status;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40020008 	.word	0x40020008
 80053f8:	4002001c 	.word	0x4002001c
 80053fc:	40020030 	.word	0x40020030
 8005400:	40020044 	.word	0x40020044
 8005404:	40020058 	.word	0x40020058
 8005408:	4002006c 	.word	0x4002006c
 800540c:	40020000 	.word	0x40020000

08005410 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	2204      	movs	r2, #4
 800542e:	409a      	lsls	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d04f      	beq.n	80054d8 <HAL_DMA_IRQHandler+0xc8>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d04a      	beq.n	80054d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d107      	bne.n	8005460 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a66      	ldr	r2, [pc, #408]	; (8005600 <HAL_DMA_IRQHandler+0x1f0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d029      	beq.n	80054be <HAL_DMA_IRQHandler+0xae>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a65      	ldr	r2, [pc, #404]	; (8005604 <HAL_DMA_IRQHandler+0x1f4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d022      	beq.n	80054ba <HAL_DMA_IRQHandler+0xaa>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a63      	ldr	r2, [pc, #396]	; (8005608 <HAL_DMA_IRQHandler+0x1f8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01a      	beq.n	80054b4 <HAL_DMA_IRQHandler+0xa4>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a62      	ldr	r2, [pc, #392]	; (800560c <HAL_DMA_IRQHandler+0x1fc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d012      	beq.n	80054ae <HAL_DMA_IRQHandler+0x9e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a60      	ldr	r2, [pc, #384]	; (8005610 <HAL_DMA_IRQHandler+0x200>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00a      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x98>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a5f      	ldr	r2, [pc, #380]	; (8005614 <HAL_DMA_IRQHandler+0x204>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d102      	bne.n	80054a2 <HAL_DMA_IRQHandler+0x92>
 800549c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054a0:	e00e      	b.n	80054c0 <HAL_DMA_IRQHandler+0xb0>
 80054a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054a6:	e00b      	b.n	80054c0 <HAL_DMA_IRQHandler+0xb0>
 80054a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054ac:	e008      	b.n	80054c0 <HAL_DMA_IRQHandler+0xb0>
 80054ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054b2:	e005      	b.n	80054c0 <HAL_DMA_IRQHandler+0xb0>
 80054b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b8:	e002      	b.n	80054c0 <HAL_DMA_IRQHandler+0xb0>
 80054ba:	2340      	movs	r3, #64	; 0x40
 80054bc:	e000      	b.n	80054c0 <HAL_DMA_IRQHandler+0xb0>
 80054be:	2304      	movs	r3, #4
 80054c0:	4a55      	ldr	r2, [pc, #340]	; (8005618 <HAL_DMA_IRQHandler+0x208>)
 80054c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8094 	beq.w	80055f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80054d6:	e08e      	b.n	80055f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	2202      	movs	r2, #2
 80054de:	409a      	lsls	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d056      	beq.n	8005596 <HAL_DMA_IRQHandler+0x186>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d051      	beq.n	8005596 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 020a 	bic.w	r2, r2, #10
 800550e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a38      	ldr	r2, [pc, #224]	; (8005600 <HAL_DMA_IRQHandler+0x1f0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d029      	beq.n	8005576 <HAL_DMA_IRQHandler+0x166>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a37      	ldr	r2, [pc, #220]	; (8005604 <HAL_DMA_IRQHandler+0x1f4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d022      	beq.n	8005572 <HAL_DMA_IRQHandler+0x162>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a35      	ldr	r2, [pc, #212]	; (8005608 <HAL_DMA_IRQHandler+0x1f8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d01a      	beq.n	800556c <HAL_DMA_IRQHandler+0x15c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a34      	ldr	r2, [pc, #208]	; (800560c <HAL_DMA_IRQHandler+0x1fc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d012      	beq.n	8005566 <HAL_DMA_IRQHandler+0x156>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a32      	ldr	r2, [pc, #200]	; (8005610 <HAL_DMA_IRQHandler+0x200>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00a      	beq.n	8005560 <HAL_DMA_IRQHandler+0x150>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a31      	ldr	r2, [pc, #196]	; (8005614 <HAL_DMA_IRQHandler+0x204>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d102      	bne.n	800555a <HAL_DMA_IRQHandler+0x14a>
 8005554:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005558:	e00e      	b.n	8005578 <HAL_DMA_IRQHandler+0x168>
 800555a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800555e:	e00b      	b.n	8005578 <HAL_DMA_IRQHandler+0x168>
 8005560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005564:	e008      	b.n	8005578 <HAL_DMA_IRQHandler+0x168>
 8005566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800556a:	e005      	b.n	8005578 <HAL_DMA_IRQHandler+0x168>
 800556c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005570:	e002      	b.n	8005578 <HAL_DMA_IRQHandler+0x168>
 8005572:	2320      	movs	r3, #32
 8005574:	e000      	b.n	8005578 <HAL_DMA_IRQHandler+0x168>
 8005576:	2302      	movs	r3, #2
 8005578:	4a27      	ldr	r2, [pc, #156]	; (8005618 <HAL_DMA_IRQHandler+0x208>)
 800557a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	d034      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005594:	e02f      	b.n	80055f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	2208      	movs	r2, #8
 800559c:	409a      	lsls	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d028      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x1e8>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d023      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 020e 	bic.w	r2, r2, #14
 80055be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	2101      	movs	r1, #1
 80055ca:	fa01 f202 	lsl.w	r2, r1, r2
 80055ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
    }
  }
  return;
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
}
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40020008 	.word	0x40020008
 8005604:	4002001c 	.word	0x4002001c
 8005608:	40020030 	.word	0x40020030
 800560c:	40020044 	.word	0x40020044
 8005610:	40020058 	.word	0x40020058
 8005614:	4002006c 	.word	0x4002006c
 8005618:	40020000 	.word	0x40020000

0800561c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	2101      	movs	r1, #1
 8005634:	fa01 f202 	lsl.w	r2, r1, r2
 8005638:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b10      	cmp	r3, #16
 8005648:	d108      	bne.n	800565c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800565a:	e007      	b.n	800566c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr
	...

08005678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005678:	b480      	push	{r7}
 800567a:	b08b      	sub	sp, #44	; 0x2c
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005682:	2300      	movs	r3, #0
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005686:	2300      	movs	r3, #0
 8005688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800568a:	e169      	b.n	8005960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800568c:	2201      	movs	r2, #1
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	f040 8158 	bne.w	800595a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4a9a      	ldr	r2, [pc, #616]	; (8005918 <HAL_GPIO_Init+0x2a0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d05e      	beq.n	8005772 <HAL_GPIO_Init+0xfa>
 80056b4:	4a98      	ldr	r2, [pc, #608]	; (8005918 <HAL_GPIO_Init+0x2a0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d875      	bhi.n	80057a6 <HAL_GPIO_Init+0x12e>
 80056ba:	4a98      	ldr	r2, [pc, #608]	; (800591c <HAL_GPIO_Init+0x2a4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d058      	beq.n	8005772 <HAL_GPIO_Init+0xfa>
 80056c0:	4a96      	ldr	r2, [pc, #600]	; (800591c <HAL_GPIO_Init+0x2a4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d86f      	bhi.n	80057a6 <HAL_GPIO_Init+0x12e>
 80056c6:	4a96      	ldr	r2, [pc, #600]	; (8005920 <HAL_GPIO_Init+0x2a8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d052      	beq.n	8005772 <HAL_GPIO_Init+0xfa>
 80056cc:	4a94      	ldr	r2, [pc, #592]	; (8005920 <HAL_GPIO_Init+0x2a8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d869      	bhi.n	80057a6 <HAL_GPIO_Init+0x12e>
 80056d2:	4a94      	ldr	r2, [pc, #592]	; (8005924 <HAL_GPIO_Init+0x2ac>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d04c      	beq.n	8005772 <HAL_GPIO_Init+0xfa>
 80056d8:	4a92      	ldr	r2, [pc, #584]	; (8005924 <HAL_GPIO_Init+0x2ac>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d863      	bhi.n	80057a6 <HAL_GPIO_Init+0x12e>
 80056de:	4a92      	ldr	r2, [pc, #584]	; (8005928 <HAL_GPIO_Init+0x2b0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d046      	beq.n	8005772 <HAL_GPIO_Init+0xfa>
 80056e4:	4a90      	ldr	r2, [pc, #576]	; (8005928 <HAL_GPIO_Init+0x2b0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d85d      	bhi.n	80057a6 <HAL_GPIO_Init+0x12e>
 80056ea:	2b12      	cmp	r3, #18
 80056ec:	d82a      	bhi.n	8005744 <HAL_GPIO_Init+0xcc>
 80056ee:	2b12      	cmp	r3, #18
 80056f0:	d859      	bhi.n	80057a6 <HAL_GPIO_Init+0x12e>
 80056f2:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <HAL_GPIO_Init+0x80>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005773 	.word	0x08005773
 80056fc:	0800574d 	.word	0x0800574d
 8005700:	0800575f 	.word	0x0800575f
 8005704:	080057a1 	.word	0x080057a1
 8005708:	080057a7 	.word	0x080057a7
 800570c:	080057a7 	.word	0x080057a7
 8005710:	080057a7 	.word	0x080057a7
 8005714:	080057a7 	.word	0x080057a7
 8005718:	080057a7 	.word	0x080057a7
 800571c:	080057a7 	.word	0x080057a7
 8005720:	080057a7 	.word	0x080057a7
 8005724:	080057a7 	.word	0x080057a7
 8005728:	080057a7 	.word	0x080057a7
 800572c:	080057a7 	.word	0x080057a7
 8005730:	080057a7 	.word	0x080057a7
 8005734:	080057a7 	.word	0x080057a7
 8005738:	080057a7 	.word	0x080057a7
 800573c:	08005755 	.word	0x08005755
 8005740:	08005769 	.word	0x08005769
 8005744:	4a79      	ldr	r2, [pc, #484]	; (800592c <HAL_GPIO_Init+0x2b4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800574a:	e02c      	b.n	80057a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	623b      	str	r3, [r7, #32]
          break;
 8005752:	e029      	b.n	80057a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	3304      	adds	r3, #4
 800575a:	623b      	str	r3, [r7, #32]
          break;
 800575c:	e024      	b.n	80057a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	3308      	adds	r3, #8
 8005764:	623b      	str	r3, [r7, #32]
          break;
 8005766:	e01f      	b.n	80057a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	330c      	adds	r3, #12
 800576e:	623b      	str	r3, [r7, #32]
          break;
 8005770:	e01a      	b.n	80057a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800577a:	2304      	movs	r3, #4
 800577c:	623b      	str	r3, [r7, #32]
          break;
 800577e:	e013      	b.n	80057a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d105      	bne.n	8005794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005788:	2308      	movs	r3, #8
 800578a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	611a      	str	r2, [r3, #16]
          break;
 8005792:	e009      	b.n	80057a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005794:	2308      	movs	r3, #8
 8005796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	615a      	str	r2, [r3, #20]
          break;
 800579e:	e003      	b.n	80057a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057a0:	2300      	movs	r3, #0
 80057a2:	623b      	str	r3, [r7, #32]
          break;
 80057a4:	e000      	b.n	80057a8 <HAL_GPIO_Init+0x130>
          break;
 80057a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2bff      	cmp	r3, #255	; 0xff
 80057ac:	d801      	bhi.n	80057b2 <HAL_GPIO_Init+0x13a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	e001      	b.n	80057b6 <HAL_GPIO_Init+0x13e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2bff      	cmp	r3, #255	; 0xff
 80057bc:	d802      	bhi.n	80057c4 <HAL_GPIO_Init+0x14c>
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	e002      	b.n	80057ca <HAL_GPIO_Init+0x152>
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	3b08      	subs	r3, #8
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	210f      	movs	r1, #15
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	fa01 f303 	lsl.w	r3, r1, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	401a      	ands	r2, r3
 80057dc:	6a39      	ldr	r1, [r7, #32]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	fa01 f303 	lsl.w	r3, r1, r3
 80057e4:	431a      	orrs	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80b1 	beq.w	800595a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80057f8:	4b4d      	ldr	r3, [pc, #308]	; (8005930 <HAL_GPIO_Init+0x2b8>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	4a4c      	ldr	r2, [pc, #304]	; (8005930 <HAL_GPIO_Init+0x2b8>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6193      	str	r3, [r2, #24]
 8005804:	4b4a      	ldr	r3, [pc, #296]	; (8005930 <HAL_GPIO_Init+0x2b8>)
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005810:	4a48      	ldr	r2, [pc, #288]	; (8005934 <HAL_GPIO_Init+0x2bc>)
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	3302      	adds	r3, #2
 8005818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	220f      	movs	r2, #15
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4013      	ands	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a40      	ldr	r2, [pc, #256]	; (8005938 <HAL_GPIO_Init+0x2c0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d013      	beq.n	8005864 <HAL_GPIO_Init+0x1ec>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3f      	ldr	r2, [pc, #252]	; (800593c <HAL_GPIO_Init+0x2c4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00d      	beq.n	8005860 <HAL_GPIO_Init+0x1e8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a3e      	ldr	r2, [pc, #248]	; (8005940 <HAL_GPIO_Init+0x2c8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <HAL_GPIO_Init+0x1e4>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a3d      	ldr	r2, [pc, #244]	; (8005944 <HAL_GPIO_Init+0x2cc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_GPIO_Init+0x1e0>
 8005854:	2303      	movs	r3, #3
 8005856:	e006      	b.n	8005866 <HAL_GPIO_Init+0x1ee>
 8005858:	2304      	movs	r3, #4
 800585a:	e004      	b.n	8005866 <HAL_GPIO_Init+0x1ee>
 800585c:	2302      	movs	r3, #2
 800585e:	e002      	b.n	8005866 <HAL_GPIO_Init+0x1ee>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_GPIO_Init+0x1ee>
 8005864:	2300      	movs	r3, #0
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	f002 0203 	and.w	r2, r2, #3
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	4093      	lsls	r3, r2
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005876:	492f      	ldr	r1, [pc, #188]	; (8005934 <HAL_GPIO_Init+0x2bc>)
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	3302      	adds	r3, #2
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d006      	beq.n	800589e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005890:	4b2d      	ldr	r3, [pc, #180]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	492c      	ldr	r1, [pc, #176]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	4313      	orrs	r3, r2
 800589a:	600b      	str	r3, [r1, #0]
 800589c:	e006      	b.n	80058ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800589e:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	43db      	mvns	r3, r3
 80058a6:	4928      	ldr	r1, [pc, #160]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d006      	beq.n	80058c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80058b8:	4b23      	ldr	r3, [pc, #140]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	4922      	ldr	r1, [pc, #136]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	604b      	str	r3, [r1, #4]
 80058c4:	e006      	b.n	80058d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80058c6:	4b20      	ldr	r3, [pc, #128]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	491e      	ldr	r1, [pc, #120]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80058e0:	4b19      	ldr	r3, [pc, #100]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	4918      	ldr	r1, [pc, #96]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	608b      	str	r3, [r1, #8]
 80058ec:	e006      	b.n	80058fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80058ee:	4b16      	ldr	r3, [pc, #88]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	4914      	ldr	r1, [pc, #80]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d021      	beq.n	800594c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	490e      	ldr	r1, [pc, #56]	; (8005948 <HAL_GPIO_Init+0x2d0>)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	4313      	orrs	r3, r2
 8005912:	60cb      	str	r3, [r1, #12]
 8005914:	e021      	b.n	800595a <HAL_GPIO_Init+0x2e2>
 8005916:	bf00      	nop
 8005918:	10320000 	.word	0x10320000
 800591c:	10310000 	.word	0x10310000
 8005920:	10220000 	.word	0x10220000
 8005924:	10210000 	.word	0x10210000
 8005928:	10120000 	.word	0x10120000
 800592c:	10110000 	.word	0x10110000
 8005930:	40021000 	.word	0x40021000
 8005934:	40010000 	.word	0x40010000
 8005938:	40010800 	.word	0x40010800
 800593c:	40010c00 	.word	0x40010c00
 8005940:	40011000 	.word	0x40011000
 8005944:	40011400 	.word	0x40011400
 8005948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800594c:	4b0b      	ldr	r3, [pc, #44]	; (800597c <HAL_GPIO_Init+0x304>)
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	43db      	mvns	r3, r3
 8005954:	4909      	ldr	r1, [pc, #36]	; (800597c <HAL_GPIO_Init+0x304>)
 8005956:	4013      	ands	r3, r2
 8005958:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	3301      	adds	r3, #1
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	fa22 f303 	lsr.w	r3, r2, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	f47f ae8e 	bne.w	800568c <HAL_GPIO_Init+0x14>
  }
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	372c      	adds	r7, #44	; 0x2c
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr
 800597c:	40010400 	.word	0x40010400

08005980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
 800598c:	4613      	mov	r3, r2
 800598e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800599c:	e003      	b.n	80059a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4013      	ands	r3, r2
 80059c8:	041a      	lsls	r2, r3, #16
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	43d9      	mvns	r1, r3
 80059ce:	887b      	ldrh	r3, [r7, #2]
 80059d0:	400b      	ands	r3, r1
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	611a      	str	r2, [r3, #16]
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e12b      	b.n	8005c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fd fc40 	bl	8003290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a48:	f001 fba0 	bl	800718c <HAL_RCC_GetPCLK1Freq>
 8005a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4a81      	ldr	r2, [pc, #516]	; (8005c58 <HAL_I2C_Init+0x274>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d807      	bhi.n	8005a68 <HAL_I2C_Init+0x84>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a80      	ldr	r2, [pc, #512]	; (8005c5c <HAL_I2C_Init+0x278>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	bf94      	ite	ls
 8005a60:	2301      	movls	r3, #1
 8005a62:	2300      	movhi	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	e006      	b.n	8005a76 <HAL_I2C_Init+0x92>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a7d      	ldr	r2, [pc, #500]	; (8005c60 <HAL_I2C_Init+0x27c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bf94      	ite	ls
 8005a70:	2301      	movls	r3, #1
 8005a72:	2300      	movhi	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0e7      	b.n	8005c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a78      	ldr	r2, [pc, #480]	; (8005c64 <HAL_I2C_Init+0x280>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	0c9b      	lsrs	r3, r3, #18
 8005a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a6a      	ldr	r2, [pc, #424]	; (8005c58 <HAL_I2C_Init+0x274>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d802      	bhi.n	8005ab8 <HAL_I2C_Init+0xd4>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	e009      	b.n	8005acc <HAL_I2C_Init+0xe8>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	4a69      	ldr	r2, [pc, #420]	; (8005c68 <HAL_I2C_Init+0x284>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	099b      	lsrs	r3, r3, #6
 8005aca:	3301      	adds	r3, #1
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	495c      	ldr	r1, [pc, #368]	; (8005c58 <HAL_I2C_Init+0x274>)
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	d819      	bhi.n	8005b20 <HAL_I2C_Init+0x13c>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1e59      	subs	r1, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b00:	400b      	ands	r3, r1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_I2C_Init+0x138>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1e59      	subs	r1, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b14:	3301      	adds	r3, #1
 8005b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1a:	e051      	b.n	8005bc0 <HAL_I2C_Init+0x1dc>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	e04f      	b.n	8005bc0 <HAL_I2C_Init+0x1dc>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d111      	bne.n	8005b4c <HAL_I2C_Init+0x168>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1e58      	subs	r0, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6859      	ldr	r1, [r3, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	440b      	add	r3, r1
 8005b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e012      	b.n	8005b72 <HAL_I2C_Init+0x18e>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1e58      	subs	r0, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	0099      	lsls	r1, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b62:	3301      	adds	r3, #1
 8005b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_I2C_Init+0x196>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e022      	b.n	8005bc0 <HAL_I2C_Init+0x1dc>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10e      	bne.n	8005ba0 <HAL_I2C_Init+0x1bc>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1e58      	subs	r0, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	440b      	add	r3, r1
 8005b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b94:	3301      	adds	r3, #1
 8005b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	e00f      	b.n	8005bc0 <HAL_I2C_Init+0x1dc>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1e58      	subs	r0, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6859      	ldr	r1, [r3, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	0099      	lsls	r1, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	6809      	ldr	r1, [r1, #0]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6911      	ldr	r1, [r2, #16]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68d2      	ldr	r2, [r2, #12]
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	000186a0 	.word	0x000186a0
 8005c5c:	001e847f 	.word	0x001e847f
 8005c60:	003d08ff 	.word	0x003d08ff
 8005c64:	431bde83 	.word	0x431bde83
 8005c68:	10624dd3 	.word	0x10624dd3

08005c6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	817b      	strh	r3, [r7, #10]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	813b      	strh	r3, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c86:	f7fd ff5f 	bl	8003b48 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	f040 80d9 	bne.w	8005e4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2319      	movs	r3, #25
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	496d      	ldr	r1, [pc, #436]	; (8005e58 <HAL_I2C_Mem_Write+0x1ec>)
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fcc1 	bl	800662c <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e0cc      	b.n	8005e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_I2C_Mem_Write+0x56>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e0c5      	b.n	8005e4e <HAL_I2C_Mem_Write+0x1e2>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d007      	beq.n	8005ce8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2221      	movs	r2, #33	; 0x21
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2240      	movs	r2, #64	; 0x40
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a3a      	ldr	r2, [r7, #32]
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a4d      	ldr	r2, [pc, #308]	; (8005e5c <HAL_I2C_Mem_Write+0x1f0>)
 8005d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d2a:	88f8      	ldrh	r0, [r7, #6]
 8005d2c:	893a      	ldrh	r2, [r7, #8]
 8005d2e:	8979      	ldrh	r1, [r7, #10]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4603      	mov	r3, r0
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 faf8 	bl	8006330 <I2C_RequestMemoryWrite>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d052      	beq.n	8005dec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e081      	b.n	8005e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fd42 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d107      	bne.n	8005d72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e06b      	b.n	8005e4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d11b      	bne.n	8005dec <HAL_I2C_Mem_Write+0x180>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d017      	beq.n	8005dec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1aa      	bne.n	8005d4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fd2e 	bl	800685a <I2C_WaitOnBTFFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00d      	beq.n	8005e20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d107      	bne.n	8005e1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e016      	b.n	8005e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e000      	b.n	8005e4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	00100002 	.word	0x00100002
 8005e5c:	ffff0000 	.word	0xffff0000

08005e60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	4608      	mov	r0, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	817b      	strh	r3, [r7, #10]
 8005e72:	460b      	mov	r3, r1
 8005e74:	813b      	strh	r3, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e7e:	f7fd fe63 	bl	8003b48 <HAL_GetTick>
 8005e82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	f040 8244 	bne.w	800631a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	2319      	movs	r3, #25
 8005e98:	2201      	movs	r2, #1
 8005e9a:	4982      	ldr	r1, [pc, #520]	; (80060a4 <HAL_I2C_Mem_Read+0x244>)
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fbc5 	bl	800662c <I2C_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e237      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_I2C_Mem_Read+0x5a>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e230      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d007      	beq.n	8005ee0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2222      	movs	r2, #34	; 0x22
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2240      	movs	r2, #64	; 0x40
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a62      	ldr	r2, [pc, #392]	; (80060a8 <HAL_I2C_Mem_Read+0x248>)
 8005f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f22:	88f8      	ldrh	r0, [r7, #6]
 8005f24:	893a      	ldrh	r2, [r7, #8]
 8005f26:	8979      	ldrh	r1, [r7, #10]
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	4603      	mov	r3, r0
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 fa92 	bl	800645c <I2C_RequestMemoryRead>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e1ec      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d113      	bne.n	8005f72 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e1c0      	b.n	80062f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d11e      	bne.n	8005fb8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f8a:	b672      	cpsid	i
}
 8005f8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005fb4:	b662      	cpsie	i
}
 8005fb6:	e035      	b.n	8006024 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d11e      	bne.n	8005ffe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fd0:	b672      	cpsid	i
}
 8005fd2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ffa:	b662      	cpsie	i
}
 8005ffc:	e012      	b.n	8006024 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800600c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006024:	e166      	b.n	80062f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602a:	2b03      	cmp	r3, #3
 800602c:	f200 811f 	bhi.w	800626e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006034:	2b01      	cmp	r3, #1
 8006036:	d123      	bne.n	8006080 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fc4d 	bl	80068dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e167      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800607e:	e139      	b.n	80062f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006084:	2b02      	cmp	r3, #2
 8006086:	d152      	bne.n	800612e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	2200      	movs	r2, #0
 8006090:	4906      	ldr	r1, [pc, #24]	; (80060ac <HAL_I2C_Mem_Read+0x24c>)
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 faca 	bl	800662c <I2C_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e13c      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
 80060a2:	bf00      	nop
 80060a4:	00100002 	.word	0x00100002
 80060a8:	ffff0000 	.word	0xffff0000
 80060ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80060b0:	b672      	cpsid	i
}
 80060b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80060f6:	b662      	cpsie	i
}
 80060f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800612c:	e0e2      	b.n	80062f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2200      	movs	r2, #0
 8006136:	497b      	ldr	r1, [pc, #492]	; (8006324 <HAL_I2C_Mem_Read+0x4c4>)
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fa77 	bl	800662c <I2C_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0e9      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006156:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006158:	b672      	cpsid	i
}
 800615a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800618e:	4b66      	ldr	r3, [pc, #408]	; (8006328 <HAL_I2C_Mem_Read+0x4c8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	08db      	lsrs	r3, r3, #3
 8006194:	4a65      	ldr	r2, [pc, #404]	; (800632c <HAL_I2C_Mem_Read+0x4cc>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	0a1a      	lsrs	r2, r3, #8
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	00da      	lsls	r2, r3, #3
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d118      	bne.n	80061e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0220 	orr.w	r2, r3, #32
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80061d6:	b662      	cpsie	i
}
 80061d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e09a      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d1d9      	bne.n	80061a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006236:	b662      	cpsie	i
}
 8006238:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800626c:	e042      	b.n	80062f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800626e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fb32 	bl	80068dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e04c      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d118      	bne.n	80062f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f47f ae94 	bne.w	8006026 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	e000      	b.n	800631c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800631a:	2302      	movs	r3, #2
  }
}
 800631c:	4618      	mov	r0, r3
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	00010004 	.word	0x00010004
 8006328:	20000004 	.word	0x20000004
 800632c:	14f8b589 	.word	0x14f8b589

08006330 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	461a      	mov	r2, r3
 800633e:	4603      	mov	r3, r0
 8006340:	817b      	strh	r3, [r7, #10]
 8006342:	460b      	mov	r3, r1
 8006344:	813b      	strh	r3, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	2200      	movs	r2, #0
 8006362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f960 	bl	800662c <I2C_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006380:	d103      	bne.n	800638a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006388:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e05f      	b.n	800644e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800638e:	897b      	ldrh	r3, [r7, #10]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800639c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	492d      	ldr	r1, [pc, #180]	; (8006458 <I2C_RequestMemoryWrite+0x128>)
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f998 	bl	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e04c      	b.n	800644e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063cc:	6a39      	ldr	r1, [r7, #32]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fa02 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00d      	beq.n	80063f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d107      	bne.n	80063f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e02b      	b.n	800644e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d105      	bne.n	8006408 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063fc:	893b      	ldrh	r3, [r7, #8]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	611a      	str	r2, [r3, #16]
 8006406:	e021      	b.n	800644c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006408:	893b      	ldrh	r3, [r7, #8]
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	b29b      	uxth	r3, r3
 800640e:	b2da      	uxtb	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006418:	6a39      	ldr	r1, [r7, #32]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f9dc 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	2b04      	cmp	r3, #4
 800642c:	d107      	bne.n	800643e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e005      	b.n	800644e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006442:	893b      	ldrh	r3, [r7, #8]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	00010002 	.word	0x00010002

0800645c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	4608      	mov	r0, r1
 8006466:	4611      	mov	r1, r2
 8006468:	461a      	mov	r2, r3
 800646a:	4603      	mov	r3, r0
 800646c:	817b      	strh	r3, [r7, #10]
 800646e:	460b      	mov	r3, r1
 8006470:	813b      	strh	r3, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006484:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2200      	movs	r2, #0
 800649e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f8c2 	bl	800662c <I2C_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064bc:	d103      	bne.n	80064c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e0aa      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ca:	897b      	ldrh	r3, [r7, #10]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	6a3a      	ldr	r2, [r7, #32]
 80064de:	4952      	ldr	r1, [pc, #328]	; (8006628 <I2C_RequestMemoryRead+0x1cc>)
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f8fa 	bl	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e097      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	6a39      	ldr	r1, [r7, #32]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 f964 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00d      	beq.n	8006532 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	2b04      	cmp	r3, #4
 800651c:	d107      	bne.n	800652e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800652c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e076      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d105      	bne.n	8006544 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006538:	893b      	ldrh	r3, [r7, #8]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]
 8006542:	e021      	b.n	8006588 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006544:	893b      	ldrh	r3, [r7, #8]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	b29b      	uxth	r3, r3
 800654a:	b2da      	uxtb	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	6a39      	ldr	r1, [r7, #32]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f93e 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	2b04      	cmp	r3, #4
 8006568:	d107      	bne.n	800657a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e050      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800657e:	893b      	ldrh	r3, [r7, #8]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658a:	6a39      	ldr	r1, [r7, #32]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f923 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	2b04      	cmp	r3, #4
 800659e:	d107      	bne.n	80065b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e035      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f82b 	bl	800662c <I2C_WaitOnFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ea:	d103      	bne.n	80065f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e013      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065f8:	897b      	ldrh	r3, [r7, #10]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	6a3a      	ldr	r2, [r7, #32]
 800660c:	4906      	ldr	r1, [pc, #24]	; (8006628 <I2C_RequestMemoryRead+0x1cc>)
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f863 	bl	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	00010002 	.word	0x00010002

0800662c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800663c:	e025      	b.n	800668a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d021      	beq.n	800668a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006646:	f7fd fa7f 	bl	8003b48 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d302      	bcc.n	800665c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d116      	bne.n	800668a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	f043 0220 	orr.w	r2, r3, #32
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e023      	b.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	0c1b      	lsrs	r3, r3, #16
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b01      	cmp	r3, #1
 8006692:	d10d      	bne.n	80066b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	43da      	mvns	r2, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4013      	ands	r3, r2
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	e00c      	b.n	80066ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	43da      	mvns	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4013      	ands	r3, r2
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bf0c      	ite	eq
 80066c2:	2301      	moveq	r3, #1
 80066c4:	2300      	movne	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d0b6      	beq.n	800663e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066e8:	e051      	b.n	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f8:	d123      	bne.n	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006708:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006712:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f043 0204 	orr.w	r2, r3, #4
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e046      	b.n	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d021      	beq.n	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674a:	f7fd f9fd 	bl	8003b48 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d116      	bne.n	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e020      	b.n	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	d10c      	bne.n	80067b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	43da      	mvns	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4013      	ands	r3, r2
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bf14      	ite	ne
 80067aa:	2301      	movne	r3, #1
 80067ac:	2300      	moveq	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	e00b      	b.n	80067ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	43da      	mvns	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4013      	ands	r3, r2
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf14      	ite	ne
 80067c4:	2301      	movne	r3, #1
 80067c6:	2300      	moveq	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d18d      	bne.n	80066ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067e4:	e02d      	b.n	8006842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f8ce 	bl	8006988 <I2C_IsAcknowledgeFailed>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e02d      	b.n	8006852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d021      	beq.n	8006842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	f7fd f9a3 	bl	8003b48 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d116      	bne.n	8006842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f043 0220 	orr.w	r2, r3, #32
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e007      	b.n	8006852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d1ca      	bne.n	80067e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006866:	e02d      	b.n	80068c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f88d 	bl	8006988 <I2C_IsAcknowledgeFailed>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e02d      	b.n	80068d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d021      	beq.n	80068c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006880:	f7fd f962 	bl	8003b48 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	429a      	cmp	r2, r3
 800688e:	d302      	bcc.n	8006896 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d116      	bne.n	80068c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	f043 0220 	orr.w	r2, r3, #32
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e007      	b.n	80068d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d1ca      	bne.n	8006868 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068e8:	e042      	b.n	8006970 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d119      	bne.n	800692c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0210 	mvn.w	r2, #16
 8006900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e029      	b.n	8006980 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692c:	f7fd f90c 	bl	8003b48 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	429a      	cmp	r2, r3
 800693a:	d302      	bcc.n	8006942 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d116      	bne.n	8006970 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	f043 0220 	orr.w	r2, r3, #32
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e007      	b.n	8006980 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d1b5      	bne.n	80068ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800699a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699e:	d11b      	bne.n	80069d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	f043 0204 	orr.w	r2, r3, #4
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e26c      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8087 	beq.w	8006b12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a04:	4b92      	ldr	r3, [pc, #584]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f003 030c 	and.w	r3, r3, #12
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d00c      	beq.n	8006a2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a10:	4b8f      	ldr	r3, [pc, #572]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 030c 	and.w	r3, r3, #12
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d112      	bne.n	8006a42 <HAL_RCC_OscConfig+0x5e>
 8006a1c:	4b8c      	ldr	r3, [pc, #560]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a28:	d10b      	bne.n	8006a42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a2a:	4b89      	ldr	r3, [pc, #548]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d06c      	beq.n	8006b10 <HAL_RCC_OscConfig+0x12c>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d168      	bne.n	8006b10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e246      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4a:	d106      	bne.n	8006a5a <HAL_RCC_OscConfig+0x76>
 8006a4c:	4b80      	ldr	r3, [pc, #512]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a7f      	ldr	r2, [pc, #508]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	e02e      	b.n	8006ab8 <HAL_RCC_OscConfig+0xd4>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCC_OscConfig+0x98>
 8006a62:	4b7b      	ldr	r3, [pc, #492]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a7a      	ldr	r2, [pc, #488]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	4b78      	ldr	r3, [pc, #480]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a77      	ldr	r2, [pc, #476]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	e01d      	b.n	8006ab8 <HAL_RCC_OscConfig+0xd4>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0xbc>
 8006a86:	4b72      	ldr	r3, [pc, #456]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a71      	ldr	r2, [pc, #452]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	4b6f      	ldr	r3, [pc, #444]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6e      	ldr	r2, [pc, #440]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	e00b      	b.n	8006ab8 <HAL_RCC_OscConfig+0xd4>
 8006aa0:	4b6b      	ldr	r3, [pc, #428]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a6a      	ldr	r2, [pc, #424]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	4b68      	ldr	r3, [pc, #416]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a67      	ldr	r2, [pc, #412]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ab6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d013      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac0:	f7fd f842 	bl	8003b48 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ac8:	f7fd f83e 	bl	8003b48 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b64      	cmp	r3, #100	; 0x64
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e1fa      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ada:	4b5d      	ldr	r3, [pc, #372]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f0      	beq.n	8006ac8 <HAL_RCC_OscConfig+0xe4>
 8006ae6:	e014      	b.n	8006b12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae8:	f7fd f82e 	bl	8003b48 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fd f82a 	bl	8003b48 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	; 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e1e6      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b02:	4b53      	ldr	r3, [pc, #332]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f0      	bne.n	8006af0 <HAL_RCC_OscConfig+0x10c>
 8006b0e:	e000      	b.n	8006b12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d063      	beq.n	8006be6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b1e:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f003 030c 	and.w	r3, r3, #12
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b2a:	4b49      	ldr	r3, [pc, #292]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d11c      	bne.n	8006b70 <HAL_RCC_OscConfig+0x18c>
 8006b36:	4b46      	ldr	r3, [pc, #280]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d116      	bne.n	8006b70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b42:	4b43      	ldr	r3, [pc, #268]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_RCC_OscConfig+0x176>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d001      	beq.n	8006b5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e1ba      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5a:	4b3d      	ldr	r3, [pc, #244]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4939      	ldr	r1, [pc, #228]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b6e:	e03a      	b.n	8006be6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d020      	beq.n	8006bba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b78:	4b36      	ldr	r3, [pc, #216]	; (8006c54 <HAL_RCC_OscConfig+0x270>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7e:	f7fc ffe3 	bl	8003b48 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b86:	f7fc ffdf 	bl	8003b48 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e19b      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b98:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0f0      	beq.n	8006b86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba4:	4b2a      	ldr	r3, [pc, #168]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4927      	ldr	r1, [pc, #156]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	600b      	str	r3, [r1, #0]
 8006bb8:	e015      	b.n	8006be6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bba:	4b26      	ldr	r3, [pc, #152]	; (8006c54 <HAL_RCC_OscConfig+0x270>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc0:	f7fc ffc2 	bl	8003b48 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc8:	f7fc ffbe 	bl	8003b48 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e17a      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bda:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d03a      	beq.n	8006c68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d019      	beq.n	8006c2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bfa:	4b17      	ldr	r3, [pc, #92]	; (8006c58 <HAL_RCC_OscConfig+0x274>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c00:	f7fc ffa2 	bl	8003b48 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c08:	f7fc ff9e 	bl	8003b48 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e15a      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <HAL_RCC_OscConfig+0x26c>)
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c26:	2001      	movs	r0, #1
 8006c28:	f000 fad8 	bl	80071dc <RCC_Delay>
 8006c2c:	e01c      	b.n	8006c68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c2e:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <HAL_RCC_OscConfig+0x274>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c34:	f7fc ff88 	bl	8003b48 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c3a:	e00f      	b.n	8006c5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c3c:	f7fc ff84 	bl	8003b48 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d908      	bls.n	8006c5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e140      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
 8006c4e:	bf00      	nop
 8006c50:	40021000 	.word	0x40021000
 8006c54:	42420000 	.word	0x42420000
 8006c58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c5c:	4b9e      	ldr	r3, [pc, #632]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e9      	bne.n	8006c3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a6 	beq.w	8006dc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c76:	2300      	movs	r3, #0
 8006c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c7a:	4b97      	ldr	r3, [pc, #604]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10d      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c86:	4b94      	ldr	r3, [pc, #592]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	4a93      	ldr	r2, [pc, #588]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c90:	61d3      	str	r3, [r2, #28]
 8006c92:	4b91      	ldr	r3, [pc, #580]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca2:	4b8e      	ldr	r3, [pc, #568]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d118      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cae:	4b8b      	ldr	r3, [pc, #556]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a8a      	ldr	r2, [pc, #552]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cba:	f7fc ff45 	bl	8003b48 <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cc2:	f7fc ff41 	bl	8003b48 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b64      	cmp	r3, #100	; 0x64
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e0fd      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd4:	4b81      	ldr	r3, [pc, #516]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f0      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d106      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x312>
 8006ce8:	4b7b      	ldr	r3, [pc, #492]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	4a7a      	ldr	r2, [pc, #488]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6213      	str	r3, [r2, #32]
 8006cf4:	e02d      	b.n	8006d52 <HAL_RCC_OscConfig+0x36e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10c      	bne.n	8006d18 <HAL_RCC_OscConfig+0x334>
 8006cfe:	4b76      	ldr	r3, [pc, #472]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	4a75      	ldr	r2, [pc, #468]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	6213      	str	r3, [r2, #32]
 8006d0a:	4b73      	ldr	r3, [pc, #460]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	4a72      	ldr	r2, [pc, #456]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	6213      	str	r3, [r2, #32]
 8006d16:	e01c      	b.n	8006d52 <HAL_RCC_OscConfig+0x36e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	d10c      	bne.n	8006d3a <HAL_RCC_OscConfig+0x356>
 8006d20:	4b6d      	ldr	r3, [pc, #436]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	4a6c      	ldr	r2, [pc, #432]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d26:	f043 0304 	orr.w	r3, r3, #4
 8006d2a:	6213      	str	r3, [r2, #32]
 8006d2c:	4b6a      	ldr	r3, [pc, #424]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	4a69      	ldr	r2, [pc, #420]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	6213      	str	r3, [r2, #32]
 8006d38:	e00b      	b.n	8006d52 <HAL_RCC_OscConfig+0x36e>
 8006d3a:	4b67      	ldr	r3, [pc, #412]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	4a66      	ldr	r2, [pc, #408]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	6213      	str	r3, [r2, #32]
 8006d46:	4b64      	ldr	r3, [pc, #400]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	4a63      	ldr	r2, [pc, #396]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d4c:	f023 0304 	bic.w	r3, r3, #4
 8006d50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d015      	beq.n	8006d86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d5a:	f7fc fef5 	bl	8003b48 <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d60:	e00a      	b.n	8006d78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d62:	f7fc fef1 	bl	8003b48 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e0ab      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d78:	4b57      	ldr	r3, [pc, #348]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0ee      	beq.n	8006d62 <HAL_RCC_OscConfig+0x37e>
 8006d84:	e014      	b.n	8006db0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d86:	f7fc fedf 	bl	8003b48 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d8c:	e00a      	b.n	8006da4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8e:	f7fc fedb 	bl	8003b48 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e095      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da4:	4b4c      	ldr	r3, [pc, #304]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1ee      	bne.n	8006d8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d105      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db6:	4b48      	ldr	r3, [pc, #288]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4a47      	ldr	r2, [pc, #284]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8081 	beq.w	8006ece <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dcc:	4b42      	ldr	r3, [pc, #264]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f003 030c 	and.w	r3, r3, #12
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d061      	beq.n	8006e9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d146      	bne.n	8006e6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de0:	4b3f      	ldr	r3, [pc, #252]	; (8006ee0 <HAL_RCC_OscConfig+0x4fc>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de6:	f7fc feaf 	bl	8003b48 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dee:	f7fc feab 	bl	8003b48 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e067      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e00:	4b35      	ldr	r3, [pc, #212]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f0      	bne.n	8006dee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e14:	d108      	bne.n	8006e28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e16:	4b30      	ldr	r3, [pc, #192]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	492d      	ldr	r1, [pc, #180]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e28:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a19      	ldr	r1, [r3, #32]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	4927      	ldr	r1, [pc, #156]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e40:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <HAL_RCC_OscConfig+0x4fc>)
 8006e42:	2201      	movs	r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e46:	f7fc fe7f 	bl	8003b48 <HAL_GetTick>
 8006e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e4e:	f7fc fe7b 	bl	8003b48 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e037      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0f0      	beq.n	8006e4e <HAL_RCC_OscConfig+0x46a>
 8006e6c:	e02f      	b.n	8006ece <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ee0 <HAL_RCC_OscConfig+0x4fc>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e74:	f7fc fe68 	bl	8003b48 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e7c:	f7fc fe64 	bl	8003b48 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e020      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e8e:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f0      	bne.n	8006e7c <HAL_RCC_OscConfig+0x498>
 8006e9a:	e018      	b.n	8006ece <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e013      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ea8:	4b0b      	ldr	r3, [pc, #44]	; (8006ed8 <HAL_RCC_OscConfig+0x4f4>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d106      	bne.n	8006eca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d001      	beq.n	8006ece <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	40007000 	.word	0x40007000
 8006ee0:	42420060 	.word	0x42420060

08006ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e0d0      	b.n	800709a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef8:	4b6a      	ldr	r3, [pc, #424]	; (80070a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d910      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f06:	4b67      	ldr	r3, [pc, #412]	; (80070a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 0207 	bic.w	r2, r3, #7
 8006f0e:	4965      	ldr	r1, [pc, #404]	; (80070a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b63      	ldr	r3, [pc, #396]	; (80070a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0b8      	b.n	800709a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d020      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f40:	4b59      	ldr	r3, [pc, #356]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4a58      	ldr	r2, [pc, #352]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f58:	4b53      	ldr	r3, [pc, #332]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4a52      	ldr	r2, [pc, #328]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f64:	4b50      	ldr	r3, [pc, #320]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	494d      	ldr	r1, [pc, #308]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d040      	beq.n	8007004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8a:	4b47      	ldr	r3, [pc, #284]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d115      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e07f      	b.n	800709a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d107      	bne.n	8006fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa2:	4b41      	ldr	r3, [pc, #260]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e073      	b.n	800709a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fb2:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e06b      	b.n	800709a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fc2:	4b39      	ldr	r3, [pc, #228]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f023 0203 	bic.w	r2, r3, #3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4936      	ldr	r1, [pc, #216]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fd4:	f7fc fdb8 	bl	8003b48 <HAL_GetTick>
 8006fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fda:	e00a      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fdc:	f7fc fdb4 	bl	8003b48 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e053      	b.n	800709a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f003 020c 	and.w	r2, r3, #12
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	429a      	cmp	r2, r3
 8007002:	d1eb      	bne.n	8006fdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007004:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d210      	bcs.n	8007034 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007012:	4b24      	ldr	r3, [pc, #144]	; (80070a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f023 0207 	bic.w	r2, r3, #7
 800701a:	4922      	ldr	r1, [pc, #136]	; (80070a4 <HAL_RCC_ClockConfig+0x1c0>)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	4313      	orrs	r3, r2
 8007020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007022:	4b20      	ldr	r3, [pc, #128]	; (80070a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d001      	beq.n	8007034 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e032      	b.n	800709a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d008      	beq.n	8007052 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4916      	ldr	r1, [pc, #88]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 800704e:	4313      	orrs	r3, r2
 8007050:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	490e      	ldr	r1, [pc, #56]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 800706e:	4313      	orrs	r3, r2
 8007070:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007072:	f000 f821 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8007076:	4602      	mov	r2, r0
 8007078:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_RCC_ClockConfig+0x1c4>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	490a      	ldr	r1, [pc, #40]	; (80070ac <HAL_RCC_ClockConfig+0x1c8>)
 8007084:	5ccb      	ldrb	r3, [r1, r3]
 8007086:	fa22 f303 	lsr.w	r3, r2, r3
 800708a:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <HAL_RCC_ClockConfig+0x1cc>)
 800708c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800708e:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <HAL_RCC_ClockConfig+0x1d0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f7fc fd16 	bl	8003ac4 <HAL_InitTick>

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40022000 	.word	0x40022000
 80070a8:	40021000 	.word	0x40021000
 80070ac:	0800d790 	.word	0x0800d790
 80070b0:	20000004 	.word	0x20000004
 80070b4:	20000008 	.word	0x20000008

080070b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b8:	b490      	push	{r4, r7}
 80070ba:	b08a      	sub	sp, #40	; 0x28
 80070bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80070be:	4b2a      	ldr	r3, [pc, #168]	; (8007168 <HAL_RCC_GetSysClockFreq+0xb0>)
 80070c0:	1d3c      	adds	r4, r7, #4
 80070c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80070c8:	f240 2301 	movw	r3, #513	; 0x201
 80070cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	2300      	movs	r3, #0
 80070d4:	61bb      	str	r3, [r7, #24]
 80070d6:	2300      	movs	r3, #0
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070e2:	4b22      	ldr	r3, [pc, #136]	; (800716c <HAL_RCC_GetSysClockFreq+0xb4>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f003 030c 	and.w	r3, r3, #12
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d002      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x40>
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d003      	beq.n	80070fe <HAL_RCC_GetSysClockFreq+0x46>
 80070f6:	e02d      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070fa:	623b      	str	r3, [r7, #32]
      break;
 80070fc:	e02d      	b.n	800715a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	0c9b      	lsrs	r3, r3, #18
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800710a:	4413      	add	r3, r2
 800710c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007110:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d013      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800711c:	4b13      	ldr	r3, [pc, #76]	; (800716c <HAL_RCC_GetSysClockFreq+0xb4>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	0c5b      	lsrs	r3, r3, #17
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800712a:	4413      	add	r3, r2
 800712c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007130:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4a0e      	ldr	r2, [pc, #56]	; (8007170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007136:	fb02 f203 	mul.w	r2, r2, r3
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
 8007142:	e004      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	4a0b      	ldr	r2, [pc, #44]	; (8007174 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007148:	fb02 f303 	mul.w	r3, r2, r3
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	623b      	str	r3, [r7, #32]
      break;
 8007152:	e002      	b.n	800715a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007156:	623b      	str	r3, [r7, #32]
      break;
 8007158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800715a:	6a3b      	ldr	r3, [r7, #32]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3728      	adds	r7, #40	; 0x28
 8007160:	46bd      	mov	sp, r7
 8007162:	bc90      	pop	{r4, r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	0800d728 	.word	0x0800d728
 800716c:	40021000 	.word	0x40021000
 8007170:	007a1200 	.word	0x007a1200
 8007174:	003d0900 	.word	0x003d0900

08007178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800717c:	4b02      	ldr	r3, [pc, #8]	; (8007188 <HAL_RCC_GetHCLKFreq+0x10>)
 800717e:	681b      	ldr	r3, [r3, #0]
}
 8007180:	4618      	mov	r0, r3
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr
 8007188:	20000004 	.word	0x20000004

0800718c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007190:	f7ff fff2 	bl	8007178 <HAL_RCC_GetHCLKFreq>
 8007194:	4602      	mov	r2, r0
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	0a1b      	lsrs	r3, r3, #8
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	4903      	ldr	r1, [pc, #12]	; (80071b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071a2:	5ccb      	ldrb	r3, [r1, r3]
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40021000 	.word	0x40021000
 80071b0:	0800d7a0 	.word	0x0800d7a0

080071b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071b8:	f7ff ffde 	bl	8007178 <HAL_RCC_GetHCLKFreq>
 80071bc:	4602      	mov	r2, r0
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	0adb      	lsrs	r3, r3, #11
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	4903      	ldr	r1, [pc, #12]	; (80071d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ca:	5ccb      	ldrb	r3, [r1, r3]
 80071cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40021000 	.word	0x40021000
 80071d8:	0800d7a0 	.word	0x0800d7a0

080071dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <RCC_Delay+0x34>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <RCC_Delay+0x38>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	0a5b      	lsrs	r3, r3, #9
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
 80071f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80071f8:	bf00      	nop
  }
  while (Delay --);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	1e5a      	subs	r2, r3, #1
 80071fe:	60fa      	str	r2, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f9      	bne.n	80071f8 <RCC_Delay+0x1c>
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	bc80      	pop	{r7}
 800720e:	4770      	bx	lr
 8007210:	20000004 	.word	0x20000004
 8007214:	10624dd3 	.word	0x10624dd3

08007218 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d07d      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007234:	2300      	movs	r3, #0
 8007236:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007238:	4b4f      	ldr	r3, [pc, #316]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10d      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007244:	4b4c      	ldr	r3, [pc, #304]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	4a4b      	ldr	r2, [pc, #300]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800724e:	61d3      	str	r3, [r2, #28]
 8007250:	4b49      	ldr	r3, [pc, #292]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800725c:	2301      	movs	r3, #1
 800725e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007260:	4b46      	ldr	r3, [pc, #280]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007268:	2b00      	cmp	r3, #0
 800726a:	d118      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800726c:	4b43      	ldr	r3, [pc, #268]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a42      	ldr	r2, [pc, #264]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007276:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007278:	f7fc fc66 	bl	8003b48 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800727e:	e008      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007280:	f7fc fc62 	bl	8003b48 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b64      	cmp	r3, #100	; 0x64
 800728c:	d901      	bls.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e06d      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007292:	4b3a      	ldr	r3, [pc, #232]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0f0      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800729e:	4b36      	ldr	r3, [pc, #216]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d02e      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d027      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072bc:	4b2e      	ldr	r3, [pc, #184]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072c6:	4b2e      	ldr	r3, [pc, #184]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072c8:	2201      	movs	r2, #1
 80072ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072cc:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80072d2:	4a29      	ldr	r2, [pc, #164]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d014      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e2:	f7fc fc31 	bl	8003b48 <HAL_GetTick>
 80072e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e8:	e00a      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ea:	f7fc fc2d 	bl	8003b48 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d901      	bls.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e036      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007300:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0ee      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800730c:	4b1a      	ldr	r3, [pc, #104]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	4917      	ldr	r1, [pc, #92]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731a:	4313      	orrs	r3, r2
 800731c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d105      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007324:	4b14      	ldr	r3, [pc, #80]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	4a13      	ldr	r2, [pc, #76]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800732e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800733c:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	490b      	ldr	r1, [pc, #44]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800734a:	4313      	orrs	r3, r2
 800734c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	d008      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800735a:	4b07      	ldr	r3, [pc, #28]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	4904      	ldr	r1, [pc, #16]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007368:	4313      	orrs	r3, r2
 800736a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40021000 	.word	0x40021000
 800737c:	40007000 	.word	0x40007000
 8007380:	42420440 	.word	0x42420440

08007384 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007384:	b590      	push	{r4, r7, lr}
 8007386:	b08d      	sub	sp, #52	; 0x34
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800738c:	4b5a      	ldr	r3, [pc, #360]	; (80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800738e:	f107 040c 	add.w	r4, r7, #12
 8007392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007398:	f240 2301 	movw	r3, #513	; 0x201
 800739c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
 80073a2:	2300      	movs	r3, #0
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a6:	2300      	movs	r3, #0
 80073a8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	61fb      	str	r3, [r7, #28]
 80073ae:	2300      	movs	r3, #0
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d00a      	beq.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b10      	cmp	r3, #16
 80073bc:	f200 8091 	bhi.w	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d04c      	beq.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d07c      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80073cc:	e089      	b.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80073ce:	4b4b      	ldr	r3, [pc, #300]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80073d4:	4b49      	ldr	r3, [pc, #292]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8082 	beq.w	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	0c9b      	lsrs	r3, r3, #18
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80073ee:	4413      	add	r3, r2
 80073f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80073f4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d018      	beq.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007400:	4b3e      	ldr	r3, [pc, #248]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	0c5b      	lsrs	r3, r3, #17
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800740e:	4413      	add	r3, r2
 8007410:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00d      	beq.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007420:	4a37      	ldr	r2, [pc, #220]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	fbb2 f2f3 	udiv	r2, r2, r3
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007430:	e004      	b.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	4a33      	ldr	r2, [pc, #204]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800743c:	4b2f      	ldr	r3, [pc, #188]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007448:	d102      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800744e:	e04a      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	4a2c      	ldr	r2, [pc, #176]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800745e:	e042      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8007460:	4b26      	ldr	r3, [pc, #152]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007470:	d108      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800747c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007480:	62bb      	str	r3, [r7, #40]	; 0x28
 8007482:	e01f      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800748e:	d109      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007490:	4b1a      	ldr	r3, [pc, #104]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800749c:	f649 4340 	movw	r3, #40000	; 0x9c40
 80074a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a2:	e00f      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ae:	d11c      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80074b0:	4b12      	ldr	r3, [pc, #72]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d016      	beq.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80074bc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80074c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80074c2:	e012      	b.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80074c4:	e011      	b.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80074c6:	f7ff fe75 	bl	80071b4 <HAL_RCC_GetPCLK2Freq>
 80074ca:	4602      	mov	r2, r0
 80074cc:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	0b9b      	lsrs	r3, r3, #14
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	3301      	adds	r3, #1
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	fbb2 f3f3 	udiv	r3, r2, r3
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80074e0:	e004      	b.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80074e2:	bf00      	nop
 80074e4:	e002      	b.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80074ea:	bf00      	nop
    }
  }
  return (frequency);
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3734      	adds	r7, #52	; 0x34
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd90      	pop	{r4, r7, pc}
 80074f6:	bf00      	nop
 80074f8:	0800d738 	.word	0x0800d738
 80074fc:	40021000 	.word	0x40021000
 8007500:	007a1200 	.word	0x007a1200
 8007504:	003d0900 	.word	0x003d0900
 8007508:	aaaaaaab 	.word	0xaaaaaaab

0800750c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e076      	b.n	800760c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d108      	bne.n	8007538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800752e:	d009      	beq.n	8007544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	61da      	str	r2, [r3, #28]
 8007536:	e005      	b.n	8007544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fb fed6 	bl	8003310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c8:	ea42 0103 	orr.w	r1, r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	0c1a      	lsrs	r2, r3, #16
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f002 0204 	and.w	r2, r2, #4
 80075ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69da      	ldr	r2, [r3, #28]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	4613      	mov	r3, r2
 8007622:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_SPI_Transmit+0x22>
 8007632:	2302      	movs	r3, #2
 8007634:	e126      	b.n	8007884 <HAL_SPI_Transmit+0x270>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800763e:	f7fc fa83 	bl	8003b48 <HAL_GetTick>
 8007642:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007644:	88fb      	ldrh	r3, [r7, #6]
 8007646:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b01      	cmp	r3, #1
 8007652:	d002      	beq.n	800765a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007654:	2302      	movs	r3, #2
 8007656:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007658:	e10b      	b.n	8007872 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_SPI_Transmit+0x52>
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800766a:	e102      	b.n	8007872 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2203      	movs	r2, #3
 8007670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b2:	d10f      	bne.n	80076d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076de:	2b40      	cmp	r3, #64	; 0x40
 80076e0:	d007      	beq.n	80076f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076fa:	d14b      	bne.n	8007794 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_SPI_Transmit+0xf6>
 8007704:	8afb      	ldrh	r3, [r7, #22]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d13e      	bne.n	8007788 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	881a      	ldrh	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	1c9a      	adds	r2, r3, #2
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800772e:	e02b      	b.n	8007788 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b02      	cmp	r3, #2
 800773c:	d112      	bne.n	8007764 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	881a      	ldrh	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	1c9a      	adds	r2, r3, #2
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	86da      	strh	r2, [r3, #54]	; 0x36
 8007762:	e011      	b.n	8007788 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007764:	f7fc f9f0 	bl	8003b48 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	429a      	cmp	r2, r3
 8007772:	d803      	bhi.n	800777c <HAL_SPI_Transmit+0x168>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d102      	bne.n	8007782 <HAL_SPI_Transmit+0x16e>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007786:	e074      	b.n	8007872 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1ce      	bne.n	8007730 <HAL_SPI_Transmit+0x11c>
 8007792:	e04c      	b.n	800782e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <HAL_SPI_Transmit+0x18e>
 800779c:	8afb      	ldrh	r3, [r7, #22]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d140      	bne.n	8007824 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	330c      	adds	r3, #12
 80077ac:	7812      	ldrb	r2, [r2, #0]
 80077ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077c8:	e02c      	b.n	8007824 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d113      	bne.n	8007800 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	330c      	adds	r3, #12
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80077fe:	e011      	b.n	8007824 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007800:	f7fc f9a2 	bl	8003b48 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d803      	bhi.n	8007818 <HAL_SPI_Transmit+0x204>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	d102      	bne.n	800781e <HAL_SPI_Transmit+0x20a>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007822:	e026      	b.n	8007872 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1cd      	bne.n	80077ca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fa62 	bl	8007cfc <SPI_EndRxTxTransaction>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e000      	b.n	8007872 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007870:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007882:	7ffb      	ldrb	r3, [r7, #31]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08c      	sub	sp, #48	; 0x30
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800789a:	2301      	movs	r3, #1
 800789c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d101      	bne.n	80078b2 <HAL_SPI_TransmitReceive+0x26>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e18a      	b.n	8007bc8 <HAL_SPI_TransmitReceive+0x33c>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ba:	f7fc f945 	bl	8003b48 <HAL_GetTick>
 80078be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078d0:	887b      	ldrh	r3, [r7, #2]
 80078d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d00f      	beq.n	80078fc <HAL_SPI_TransmitReceive+0x70>
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e2:	d107      	bne.n	80078f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d103      	bne.n	80078f4 <HAL_SPI_TransmitReceive+0x68>
 80078ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d003      	beq.n	80078fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078f4:	2302      	movs	r3, #2
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078fa:	e15b      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <HAL_SPI_TransmitReceive+0x82>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <HAL_SPI_TransmitReceive+0x82>
 8007908:	887b      	ldrh	r3, [r7, #2]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d103      	bne.n	8007916 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007914:	e14e      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b04      	cmp	r3, #4
 8007920:	d003      	beq.n	800792a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2205      	movs	r2, #5
 8007926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	887a      	ldrh	r2, [r7, #2]
 800793a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	887a      	ldrh	r2, [r7, #2]
 8007940:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	887a      	ldrh	r2, [r7, #2]
 800794c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	887a      	ldrh	r2, [r7, #2]
 8007952:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	d007      	beq.n	800797e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800797c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007986:	d178      	bne.n	8007a7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_SPI_TransmitReceive+0x10a>
 8007990:	8b7b      	ldrh	r3, [r7, #26]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d166      	bne.n	8007a64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	881a      	ldrh	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	1c9a      	adds	r2, r3, #2
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ba:	e053      	b.n	8007a64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d11b      	bne.n	8007a02 <HAL_SPI_TransmitReceive+0x176>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d016      	beq.n	8007a02 <HAL_SPI_TransmitReceive+0x176>
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d113      	bne.n	8007a02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	881a      	ldrh	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	1c9a      	adds	r2, r3, #2
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d119      	bne.n	8007a44 <HAL_SPI_TransmitReceive+0x1b8>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d014      	beq.n	8007a44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	b292      	uxth	r2, r2
 8007a26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	1c9a      	adds	r2, r3, #2
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a40:	2301      	movs	r3, #1
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a44:	f7fc f880 	bl	8003b48 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d807      	bhi.n	8007a64 <HAL_SPI_TransmitReceive+0x1d8>
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5a:	d003      	beq.n	8007a64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a62:	e0a7      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1a6      	bne.n	80079bc <HAL_SPI_TransmitReceive+0x130>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1a1      	bne.n	80079bc <HAL_SPI_TransmitReceive+0x130>
 8007a78:	e07c      	b.n	8007b74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <HAL_SPI_TransmitReceive+0x1fc>
 8007a82:	8b7b      	ldrh	r3, [r7, #26]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d16b      	bne.n	8007b60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aae:	e057      	b.n	8007b60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d11c      	bne.n	8007af8 <HAL_SPI_TransmitReceive+0x26c>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d017      	beq.n	8007af8 <HAL_SPI_TransmitReceive+0x26c>
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d114      	bne.n	8007af8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d119      	bne.n	8007b3a <HAL_SPI_TransmitReceive+0x2ae>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d014      	beq.n	8007b3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b36:	2301      	movs	r3, #1
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b3a:	f7fc f805 	bl	8003b48 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d803      	bhi.n	8007b52 <HAL_SPI_TransmitReceive+0x2c6>
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d102      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x2cc>
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d103      	bne.n	8007b60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b5e:	e029      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1a2      	bne.n	8007ab0 <HAL_SPI_TransmitReceive+0x224>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d19d      	bne.n	8007ab0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f8bf 	bl	8007cfc <SPI_EndRxTxTransaction>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d006      	beq.n	8007b92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b90:	e010      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10b      	bne.n	8007bb2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	e000      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3730      	adds	r7, #48	; 0x30
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bde:	b2db      	uxtb	r3, r3
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
	...

08007bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bfc:	f7fb ffa4 	bl	8003b48 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	1a9b      	subs	r3, r3, r2
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4413      	add	r3, r2
 8007c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c0c:	f7fb ff9c 	bl	8003b48 <HAL_GetTick>
 8007c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c12:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	015b      	lsls	r3, r3, #5
 8007c18:	0d1b      	lsrs	r3, r3, #20
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	fb02 f303 	mul.w	r3, r2, r3
 8007c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c22:	e054      	b.n	8007cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2a:	d050      	beq.n	8007cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c2c:	f7fb ff8c 	bl	8003b48 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d902      	bls.n	8007c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d13d      	bne.n	8007cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c5a:	d111      	bne.n	8007c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c64:	d004      	beq.n	8007c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6e:	d107      	bne.n	8007c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c88:	d10f      	bne.n	8007caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e017      	b.n	8007cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	bf0c      	ite	eq
 8007cde:	2301      	moveq	r3, #1
 8007ce0:	2300      	movne	r3, #0
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d19b      	bne.n	8007c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000004 	.word	0x20000004

08007cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff ff6a 	bl	8007bec <SPI_WaitFlagStateUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e000      	b.n	8007d30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e041      	b.n	8007dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fb fb30 	bl	80033c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f000 fc6c 	bl	8008654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d001      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e03a      	b.n	8007e66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a18      	ldr	r2, [pc, #96]	; (8007e70 <HAL_TIM_Base_Start_IT+0x98>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00e      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x58>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1a:	d009      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x58>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a14      	ldr	r2, [pc, #80]	; (8007e74 <HAL_TIM_Base_Start_IT+0x9c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x58>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a13      	ldr	r2, [pc, #76]	; (8007e78 <HAL_TIM_Base_Start_IT+0xa0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d111      	bne.n	8007e54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b06      	cmp	r3, #6
 8007e40:	d010      	beq.n	8007e64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0201 	orr.w	r2, r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e52:	e007      	b.n	8007e64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bc80      	pop	{r7}
 8007e6e:	4770      	bx	lr
 8007e70:	40012c00 	.word	0x40012c00
 8007e74:	40000400 	.word	0x40000400
 8007e78:	40000800 	.word	0x40000800

08007e7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e041      	b.n	8007f12 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f839 	bl	8007f1a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f000 fbca 	bl	8008654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d104      	bne.n	8007f46 <HAL_TIM_IC_Start_IT+0x1a>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	e013      	b.n	8007f6e <HAL_TIM_IC_Start_IT+0x42>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_IC_Start_IT+0x2a>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	e00b      	b.n	8007f6e <HAL_TIM_IC_Start_IT+0x42>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d104      	bne.n	8007f66 <HAL_TIM_IC_Start_IT+0x3a>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	e003      	b.n	8007f6e <HAL_TIM_IC_Start_IT+0x42>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <HAL_TIM_IC_Start_IT+0x54>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	e013      	b.n	8007fa8 <HAL_TIM_IC_Start_IT+0x7c>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d104      	bne.n	8007f90 <HAL_TIM_IC_Start_IT+0x64>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e00b      	b.n	8007fa8 <HAL_TIM_IC_Start_IT+0x7c>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	d104      	bne.n	8007fa0 <HAL_TIM_IC_Start_IT+0x74>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	e003      	b.n	8007fa8 <HAL_TIM_IC_Start_IT+0x7c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d102      	bne.n	8007fb6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d001      	beq.n	8007fba <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e0b3      	b.n	8008122 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <HAL_TIM_IC_Start_IT+0x9e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc8:	e013      	b.n	8007ff2 <HAL_TIM_IC_Start_IT+0xc6>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d104      	bne.n	8007fda <HAL_TIM_IC_Start_IT+0xae>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd8:	e00b      	b.n	8007ff2 <HAL_TIM_IC_Start_IT+0xc6>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d104      	bne.n	8007fea <HAL_TIM_IC_Start_IT+0xbe>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe8:	e003      	b.n	8007ff2 <HAL_TIM_IC_Start_IT+0xc6>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d104      	bne.n	8008002 <HAL_TIM_IC_Start_IT+0xd6>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008000:	e013      	b.n	800802a <HAL_TIM_IC_Start_IT+0xfe>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b04      	cmp	r3, #4
 8008006:	d104      	bne.n	8008012 <HAL_TIM_IC_Start_IT+0xe6>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008010:	e00b      	b.n	800802a <HAL_TIM_IC_Start_IT+0xfe>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b08      	cmp	r3, #8
 8008016:	d104      	bne.n	8008022 <HAL_TIM_IC_Start_IT+0xf6>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008020:	e003      	b.n	800802a <HAL_TIM_IC_Start_IT+0xfe>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b0c      	cmp	r3, #12
 800802e:	d841      	bhi.n	80080b4 <HAL_TIM_IC_Start_IT+0x188>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <HAL_TIM_IC_Start_IT+0x10c>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	0800806d 	.word	0x0800806d
 800803c:	080080b5 	.word	0x080080b5
 8008040:	080080b5 	.word	0x080080b5
 8008044:	080080b5 	.word	0x080080b5
 8008048:	0800807f 	.word	0x0800807f
 800804c:	080080b5 	.word	0x080080b5
 8008050:	080080b5 	.word	0x080080b5
 8008054:	080080b5 	.word	0x080080b5
 8008058:	08008091 	.word	0x08008091
 800805c:	080080b5 	.word	0x080080b5
 8008060:	080080b5 	.word	0x080080b5
 8008064:	080080b5 	.word	0x080080b5
 8008068:	080080a3 	.word	0x080080a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0202 	orr.w	r2, r2, #2
 800807a:	60da      	str	r2, [r3, #12]
      break;
 800807c:	e01b      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0204 	orr.w	r2, r2, #4
 800808c:	60da      	str	r2, [r3, #12]
      break;
 800808e:	e012      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0208 	orr.w	r2, r2, #8
 800809e:	60da      	str	r2, [r3, #12]
      break;
 80080a0:	e009      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0210 	orr.w	r2, r2, #16
 80080b0:	60da      	str	r2, [r3, #12]
      break;
 80080b2:	e000      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80080b4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2201      	movs	r2, #1
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fccd 	bl	8008a5e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a18      	ldr	r2, [pc, #96]	; (800812c <HAL_TIM_IC_Start_IT+0x200>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00e      	beq.n	80080ec <HAL_TIM_IC_Start_IT+0x1c0>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d6:	d009      	beq.n	80080ec <HAL_TIM_IC_Start_IT+0x1c0>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a14      	ldr	r2, [pc, #80]	; (8008130 <HAL_TIM_IC_Start_IT+0x204>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d004      	beq.n	80080ec <HAL_TIM_IC_Start_IT+0x1c0>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a13      	ldr	r2, [pc, #76]	; (8008134 <HAL_TIM_IC_Start_IT+0x208>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d111      	bne.n	8008110 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b06      	cmp	r3, #6
 80080fc:	d010      	beq.n	8008120 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0201 	orr.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810e:	e007      	b.n	8008120 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800

08008138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b02      	cmp	r3, #2
 800814c:	d122      	bne.n	8008194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b02      	cmp	r3, #2
 800815a:	d11b      	bne.n	8008194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0202 	mvn.w	r2, #2
 8008164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa4e 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 8008180:	e005      	b.n	800818e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa41 	bl	800860a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fa50 	bl	800862e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0304 	and.w	r3, r3, #4
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d122      	bne.n	80081e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d11b      	bne.n	80081e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0204 	mvn.w	r2, #4
 80081b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2202      	movs	r2, #2
 80081be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa24 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 80081d4:	e005      	b.n	80081e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa17 	bl	800860a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fa26 	bl	800862e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b08      	cmp	r3, #8
 80081f4:	d122      	bne.n	800823c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b08      	cmp	r3, #8
 8008202:	d11b      	bne.n	800823c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f06f 0208 	mvn.w	r2, #8
 800820c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2204      	movs	r2, #4
 8008212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f9fa 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 8008228:	e005      	b.n	8008236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f9ed 	bl	800860a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f9fc 	bl	800862e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0310 	and.w	r3, r3, #16
 8008246:	2b10      	cmp	r3, #16
 8008248:	d122      	bne.n	8008290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0310 	and.w	r3, r3, #16
 8008254:	2b10      	cmp	r3, #16
 8008256:	d11b      	bne.n	8008290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0210 	mvn.w	r2, #16
 8008260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2208      	movs	r2, #8
 8008266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f9d0 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 800827c:	e005      	b.n	800828a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9c3 	bl	800860a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f9d2 	bl	800862e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10e      	bne.n	80082bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d107      	bne.n	80082bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0201 	mvn.w	r2, #1
 80082b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f99e 	bl	80085f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c6:	2b80      	cmp	r3, #128	; 0x80
 80082c8:	d10e      	bne.n	80082e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d4:	2b80      	cmp	r3, #128	; 0x80
 80082d6:	d107      	bne.n	80082e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fc47 	bl	8008b76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f2:	2b40      	cmp	r3, #64	; 0x40
 80082f4:	d10e      	bne.n	8008314 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b40      	cmp	r3, #64	; 0x40
 8008302:	d107      	bne.n	8008314 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800830c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f996 	bl	8008640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b20      	cmp	r3, #32
 8008320:	d10e      	bne.n	8008340 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b20      	cmp	r3, #32
 800832e:	d107      	bne.n	8008340 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f06f 0220 	mvn.w	r2, #32
 8008338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc12 	bl	8008b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_TIM_IC_ConfigChannel+0x1a>
 800835e:	2302      	movs	r3, #2
 8008360:	e082      	b.n	8008468 <HAL_TIM_IC_ConfigChannel+0x120>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d11b      	bne.n	80083a8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6819      	ldr	r1, [r3, #0]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f000 f9ca 	bl	8008718 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 020c 	bic.w	r2, r2, #12
 8008392:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6999      	ldr	r1, [r3, #24]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	619a      	str	r2, [r3, #24]
 80083a6:	e05a      	b.n	800845e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d11c      	bne.n	80083e8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6819      	ldr	r1, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f000 fa33 	bl	8008828 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699a      	ldr	r2, [r3, #24]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80083d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6999      	ldr	r1, [r3, #24]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	021a      	lsls	r2, r3, #8
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	619a      	str	r2, [r3, #24]
 80083e6:	e03a      	b.n	800845e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	d11b      	bne.n	8008426 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	6819      	ldr	r1, [r3, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f000 fa7e 	bl	80088fe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69da      	ldr	r2, [r3, #28]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 020c 	bic.w	r2, r2, #12
 8008410:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69d9      	ldr	r1, [r3, #28]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	61da      	str	r2, [r3, #28]
 8008424:	e01b      	b.n	800845e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6819      	ldr	r1, [r3, #0]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f000 fa9d 	bl	8008974 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69da      	ldr	r2, [r3, #28]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008448:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69d9      	ldr	r1, [r3, #28]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	021a      	lsls	r2, r3, #8
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <HAL_TIM_ConfigClockSource+0x18>
 8008484:	2302      	movs	r3, #2
 8008486:	e0b3      	b.n	80085f0 <HAL_TIM_ConfigClockSource+0x180>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c0:	d03e      	beq.n	8008540 <HAL_TIM_ConfigClockSource+0xd0>
 80084c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c6:	f200 8087 	bhi.w	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 80084ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ce:	f000 8085 	beq.w	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 80084d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d6:	d87f      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 80084d8:	2b70      	cmp	r3, #112	; 0x70
 80084da:	d01a      	beq.n	8008512 <HAL_TIM_ConfigClockSource+0xa2>
 80084dc:	2b70      	cmp	r3, #112	; 0x70
 80084de:	d87b      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 80084e0:	2b60      	cmp	r3, #96	; 0x60
 80084e2:	d050      	beq.n	8008586 <HAL_TIM_ConfigClockSource+0x116>
 80084e4:	2b60      	cmp	r3, #96	; 0x60
 80084e6:	d877      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 80084e8:	2b50      	cmp	r3, #80	; 0x50
 80084ea:	d03c      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0xf6>
 80084ec:	2b50      	cmp	r3, #80	; 0x50
 80084ee:	d873      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	d058      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x136>
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d86f      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 80084f8:	2b30      	cmp	r3, #48	; 0x30
 80084fa:	d064      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x156>
 80084fc:	2b30      	cmp	r3, #48	; 0x30
 80084fe:	d86b      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 8008500:	2b20      	cmp	r3, #32
 8008502:	d060      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x156>
 8008504:	2b20      	cmp	r3, #32
 8008506:	d867      	bhi.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
 8008508:	2b00      	cmp	r3, #0
 800850a:	d05c      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x156>
 800850c:	2b10      	cmp	r3, #16
 800850e:	d05a      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008510:	e062      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	6899      	ldr	r1, [r3, #8]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	f000 fa7d 	bl	8008a20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008534:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	609a      	str	r2, [r3, #8]
      break;
 800853e:	e04e      	b.n	80085de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	6899      	ldr	r1, [r3, #8]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f000 fa66 	bl	8008a20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008562:	609a      	str	r2, [r3, #8]
      break;
 8008564:	e03b      	b.n	80085de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	6859      	ldr	r1, [r3, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	461a      	mov	r2, r3
 8008574:	f000 f92a 	bl	80087cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2150      	movs	r1, #80	; 0x50
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fa34 	bl	80089ec <TIM_ITRx_SetConfig>
      break;
 8008584:	e02b      	b.n	80085de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6859      	ldr	r1, [r3, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	461a      	mov	r2, r3
 8008594:	f000 f984 	bl	80088a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2160      	movs	r1, #96	; 0x60
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fa24 	bl	80089ec <TIM_ITRx_SetConfig>
      break;
 80085a4:	e01b      	b.n	80085de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6859      	ldr	r1, [r3, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	461a      	mov	r2, r3
 80085b4:	f000 f90a 	bl	80087cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2140      	movs	r1, #64	; 0x40
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fa14 	bl	80089ec <TIM_ITRx_SetConfig>
      break;
 80085c4:	e00b      	b.n	80085de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f000 fa0b 	bl	80089ec <TIM_ITRx_SetConfig>
        break;
 80085d6:	e002      	b.n	80085de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085d8:	bf00      	nop
 80085da:	e000      	b.n	80085de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr

0800860a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	bc80      	pop	{r7}
 800861a:	4770      	bx	lr

0800861c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr

08008640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr
	...

08008654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a29      	ldr	r2, [pc, #164]	; (800870c <TIM_Base_SetConfig+0xb8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00b      	beq.n	8008684 <TIM_Base_SetConfig+0x30>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008672:	d007      	beq.n	8008684 <TIM_Base_SetConfig+0x30>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a26      	ldr	r2, [pc, #152]	; (8008710 <TIM_Base_SetConfig+0xbc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <TIM_Base_SetConfig+0x30>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a25      	ldr	r2, [pc, #148]	; (8008714 <TIM_Base_SetConfig+0xc0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d108      	bne.n	8008696 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1c      	ldr	r2, [pc, #112]	; (800870c <TIM_Base_SetConfig+0xb8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d00b      	beq.n	80086b6 <TIM_Base_SetConfig+0x62>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a4:	d007      	beq.n	80086b6 <TIM_Base_SetConfig+0x62>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a19      	ldr	r2, [pc, #100]	; (8008710 <TIM_Base_SetConfig+0xbc>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d003      	beq.n	80086b6 <TIM_Base_SetConfig+0x62>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a18      	ldr	r2, [pc, #96]	; (8008714 <TIM_Base_SetConfig+0xc0>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d108      	bne.n	80086c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a07      	ldr	r2, [pc, #28]	; (800870c <TIM_Base_SetConfig+0xb8>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d103      	bne.n	80086fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	691a      	ldr	r2, [r3, #16]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	615a      	str	r2, [r3, #20]
}
 8008702:	bf00      	nop
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr
 800870c:	40012c00 	.word	0x40012c00
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800

08008718 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	f023 0201 	bic.w	r2, r3, #1
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <TIM_TI1_SetConfig+0xa8>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00b      	beq.n	800875e <TIM_TI1_SetConfig+0x46>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874c:	d007      	beq.n	800875e <TIM_TI1_SetConfig+0x46>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4a1c      	ldr	r2, [pc, #112]	; (80087c4 <TIM_TI1_SetConfig+0xac>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_TI1_SetConfig+0x46>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <TIM_TI1_SetConfig+0xb0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d101      	bne.n	8008762 <TIM_TI1_SetConfig+0x4a>
 800875e:	2301      	movs	r3, #1
 8008760:	e000      	b.n	8008764 <TIM_TI1_SetConfig+0x4c>
 8008762:	2300      	movs	r3, #0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d008      	beq.n	800877a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f023 0303 	bic.w	r3, r3, #3
 800876e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	e003      	b.n	8008782 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f043 0301 	orr.w	r3, r3, #1
 8008780:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	b2db      	uxtb	r3, r3
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f023 030a 	bic.w	r3, r3, #10
 800879c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f003 030a 	and.w	r3, r3, #10
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr
 80087c0:	40012c00 	.word	0x40012c00
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800

080087cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	f023 0201 	bic.w	r2, r3, #1
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	011b      	lsls	r3, r3, #4
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f023 030a 	bic.w	r3, r3, #10
 8008808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	621a      	str	r2, [r3, #32]
}
 800881e:	bf00      	nop
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	bc80      	pop	{r7}
 8008826:	4770      	bx	lr

08008828 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f023 0210 	bic.w	r2, r3, #16
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	021b      	lsls	r3, r3, #8
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008866:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	031b      	lsls	r3, r3, #12
 800886c:	b29b      	uxth	r3, r3
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	4313      	orrs	r3, r2
 8008872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800887a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	bc80      	pop	{r7}
 800889e:	4770      	bx	lr

080088a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	f023 0210 	bic.w	r2, r3, #16
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	031b      	lsls	r3, r3, #12
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	011b      	lsls	r3, r3, #4
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	621a      	str	r2, [r3, #32]
}
 80088f4:	bf00      	nop
 80088f6:	371c      	adds	r7, #28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr

080088fe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088fe:	b480      	push	{r7}
 8008900:	b087      	sub	sp, #28
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f023 0303 	bic.w	r3, r3, #3
 800892a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4313      	orrs	r3, r2
 8008932:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800893a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	b2db      	uxtb	r3, r3
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	4313      	orrs	r3, r2
 8008946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800894e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr

08008974 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	031b      	lsls	r3, r3, #12
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	031b      	lsls	r3, r3, #12
 80089cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	621a      	str	r2, [r3, #32]
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bc80      	pop	{r7}
 80089ea:	4770      	bx	lr

080089ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f043 0307 	orr.w	r3, r3, #7
 8008a0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	609a      	str	r2, [r3, #8]
}
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bc80      	pop	{r7}
 8008a1e:	4770      	bx	lr

08008a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	021a      	lsls	r2, r3, #8
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	431a      	orrs	r2, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	609a      	str	r2, [r3, #8]
}
 8008a54:	bf00      	nop
 8008a56:	371c      	adds	r7, #28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr

08008a5e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b087      	sub	sp, #28
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	2201      	movs	r2, #1
 8008a72:	fa02 f303 	lsl.w	r3, r2, r3
 8008a76:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a1a      	ldr	r2, [r3, #32]
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	401a      	ands	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a1a      	ldr	r2, [r3, #32]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f003 031f 	and.w	r3, r3, #31
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	fa01 f303 	lsl.w	r3, r1, r3
 8008a96:	431a      	orrs	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	621a      	str	r2, [r3, #32]
}
 8008a9c:	bf00      	nop
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bc80      	pop	{r7}
 8008aa4:	4770      	bx	lr
	...

08008aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e046      	b.n	8008b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a16      	ldr	r2, [pc, #88]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d00e      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0c:	d009      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a12      	ldr	r2, [pc, #72]	; (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d004      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a10      	ldr	r2, [pc, #64]	; (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d10c      	bne.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr
 8008b58:	40012c00 	.word	0x40012c00
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800

08008b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr

08008b76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e03f      	b.n	8008c1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fa fcc2 	bl	8003538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2224      	movs	r2, #36	; 0x24
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fcad 	bl	800952c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	691a      	ldr	r2, [r3, #16]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	695a      	ldr	r2, [r3, #20]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	d11d      	bne.n	8008c78 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <HAL_UART_Receive_DMA+0x26>
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e016      	b.n	8008c7a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_UART_Receive_DMA+0x38>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e00f      	b.n	8008c7a <HAL_UART_Receive_DMA+0x58>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008c68:	88fb      	ldrh	r3, [r7, #6]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68b9      	ldr	r1, [r7, #8]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fa92 	bl	8009198 <UART_Start_Receive_DMA>
 8008c74:	4603      	mov	r3, r0
 8008c76:	e000      	b.n	8008c7a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c78:	2302      	movs	r3, #2
  }
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08a      	sub	sp, #40	; 0x28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10d      	bne.n	8008cd6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d008      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x52>
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fb82 	bl	80093d8 <UART_Receive_IT>
      return;
 8008cd4:	e17b      	b.n	8008fce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 80b1 	beq.w	8008e40 <HAL_UART_IRQHandler+0x1bc>
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d105      	bne.n	8008cf4 <HAL_UART_IRQHandler+0x70>
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 80a6 	beq.w	8008e40 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <HAL_UART_IRQHandler+0x90>
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0c:	f043 0201 	orr.w	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	f003 0304 	and.w	r3, r3, #4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <HAL_UART_IRQHandler+0xb0>
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2c:	f043 0202 	orr.w	r2, r3, #2
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00a      	beq.n	8008d54 <HAL_UART_IRQHandler+0xd0>
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	f043 0204 	orr.w	r2, r3, #4
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	f003 0308 	and.w	r3, r3, #8
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00f      	beq.n	8008d7e <HAL_UART_IRQHandler+0xfa>
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	f003 0320 	and.w	r3, r3, #32
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d104      	bne.n	8008d72 <HAL_UART_IRQHandler+0xee>
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	f043 0208 	orr.w	r2, r3, #8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 811e 	beq.w	8008fc4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <HAL_UART_IRQHandler+0x11e>
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	f003 0320 	and.w	r3, r3, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fb1b 	bl	80093d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bf14      	ite	ne
 8008db0:	2301      	movne	r3, #1
 8008db2:	2300      	moveq	r3, #0
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	f003 0308 	and.w	r3, r3, #8
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <HAL_UART_IRQHandler+0x146>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d031      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fa5d 	bl	800928a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d023      	beq.n	8008e26 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d013      	beq.n	8008e1e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfa:	4a76      	ldr	r2, [pc, #472]	; (8008fd4 <HAL_UART_IRQHandler+0x350>)
 8008dfc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fc fa8e 	bl	8005324 <HAL_DMA_Abort_IT>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d016      	beq.n	8008e3c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e18:	4610      	mov	r0, r2
 8008e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1c:	e00e      	b.n	8008e3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f8f5 	bl	800900e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e24:	e00a      	b.n	8008e3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f8f1 	bl	800900e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2c:	e006      	b.n	8008e3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f8ed 	bl	800900e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e3a:	e0c3      	b.n	8008fc4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3c:	bf00      	nop
    return;
 8008e3e:	e0c1      	b.n	8008fc4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	f040 80a1 	bne.w	8008f8c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 809b 	beq.w	8008f8c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 8095 	beq.w	8008f8c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d04e      	beq.n	8008f24 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008e90:	8a3b      	ldrh	r3, [r7, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 8098 	beq.w	8008fc8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e9c:	8a3a      	ldrh	r2, [r7, #16]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	f080 8092 	bcs.w	8008fc8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	8a3a      	ldrh	r2, [r7, #16]
 8008ea8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	2b20      	cmp	r3, #32
 8008eb2:	d02b      	beq.n	8008f0c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ec2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	695a      	ldr	r2, [r3, #20]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0201 	bic.w	r2, r2, #1
 8008ed2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	695a      	ldr	r2, [r3, #20]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0210 	bic.w	r2, r2, #16
 8008f00:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fc f9d1 	bl	80052ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f87f 	bl	8009020 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f22:	e051      	b.n	8008fc8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d047      	beq.n	8008fcc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008f3c:	8a7b      	ldrh	r3, [r7, #18]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d044      	beq.n	8008fcc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f50:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	695a      	ldr	r2, [r3, #20]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0210 	bic.w	r2, r2, #16
 8008f7e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f80:	8a7b      	ldrh	r3, [r7, #18]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f84b 	bl	8009020 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f8a:	e01f      	b.n	8008fcc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d008      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x324>
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d003      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f9b2 	bl	800930a <UART_Transmit_IT>
    return;
 8008fa6:	e012      	b.n	8008fce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00d      	beq.n	8008fce <HAL_UART_IRQHandler+0x34a>
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d008      	beq.n	8008fce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9f3 	bl	80093a8 <UART_EndTransmit_IT>
    return;
 8008fc2:	e004      	b.n	8008fce <HAL_UART_IRQHandler+0x34a>
    return;
 8008fc4:	bf00      	nop
 8008fc6:	e002      	b.n	8008fce <HAL_UART_IRQHandler+0x34a>
      return;
 8008fc8:	bf00      	nop
 8008fca:	e000      	b.n	8008fce <HAL_UART_IRQHandler+0x34a>
      return;
 8008fcc:	bf00      	nop
  }
}
 8008fce:	3728      	adds	r7, #40	; 0x28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	080092e3 	.word	0x080092e3

08008fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr

08008fea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr

0800900e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	bc80      	pop	{r7}
 800901e:	4770      	bx	lr

08009020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	bc80      	pop	{r7}
 8009034:	4770      	bx	lr

08009036 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d12a      	bne.n	80090a8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009066:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695a      	ldr	r2, [r3, #20]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0201 	bic.w	r2, r2, #1
 8009076:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	695a      	ldr	r2, [r3, #20]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009086:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2220      	movs	r2, #32
 800908c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	2b01      	cmp	r3, #1
 8009096:	d107      	bne.n	80090a8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68da      	ldr	r2, [r3, #12]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f022 0210 	bic.w	r2, r2, #16
 80090a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d106      	bne.n	80090be <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090b4:	4619      	mov	r1, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff ffb2 	bl	8009020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090bc:	e002      	b.n	80090c4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f7ff ff93 	bl	8008fea <HAL_UART_RxCpltCallback>
}
 80090c4:	bf00      	nop
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d108      	bne.n	80090f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090e6:	085b      	lsrs	r3, r3, #1
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4619      	mov	r1, r3
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f7ff ff97 	bl	8009020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090f2:	e002      	b.n	80090fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f7ff ff81 	bl	8008ffc <HAL_UART_RxHalfCpltCallback>
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800911e:	2b00      	cmp	r3, #0
 8009120:	bf14      	ite	ne
 8009122:	2301      	movne	r3, #1
 8009124:	2300      	moveq	r3, #0
 8009126:	b2db      	uxtb	r3, r3
 8009128:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b21      	cmp	r3, #33	; 0x21
 8009134:	d108      	bne.n	8009148 <UART_DMAError+0x46>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2200      	movs	r2, #0
 8009140:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009142:	68b8      	ldr	r0, [r7, #8]
 8009144:	f000 f88c 	bl	8009260 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009152:	2b00      	cmp	r3, #0
 8009154:	bf14      	ite	ne
 8009156:	2301      	movne	r3, #1
 8009158:	2300      	moveq	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b22      	cmp	r3, #34	; 0x22
 8009168:	d108      	bne.n	800917c <UART_DMAError+0x7a>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d005      	beq.n	800917c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2200      	movs	r2, #0
 8009174:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009176:	68b8      	ldr	r0, [r7, #8]
 8009178:	f000 f887 	bl	800928a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009180:	f043 0210 	orr.w	r2, r3, #16
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009188:	68b8      	ldr	r0, [r7, #8]
 800918a:	f7ff ff40 	bl	800900e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4613      	mov	r3, r2
 80091a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	88fa      	ldrh	r2, [r7, #6]
 80091b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2222      	movs	r2, #34	; 0x22
 80091bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c4:	4a23      	ldr	r2, [pc, #140]	; (8009254 <UART_Start_Receive_DMA+0xbc>)
 80091c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	4a22      	ldr	r2, [pc, #136]	; (8009258 <UART_Start_Receive_DMA+0xc0>)
 80091ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	4a21      	ldr	r2, [pc, #132]	; (800925c <UART_Start_Receive_DMA+0xc4>)
 80091d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	2200      	movs	r2, #0
 80091de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80091e0:	f107 0308 	add.w	r3, r7, #8
 80091e4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4619      	mov	r1, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	88fb      	ldrh	r3, [r7, #6]
 80091f8:	f7fb fffa 	bl	80051f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68da      	ldr	r2, [r3, #12]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009228:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	695a      	ldr	r2, [r3, #20]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0201 	orr.w	r2, r2, #1
 8009238:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	695a      	ldr	r2, [r3, #20]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009248:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	08009037 	.word	0x08009037
 8009258:	080090cd 	.word	0x080090cd
 800925c:	08009103 	.word	0x08009103

08009260 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68da      	ldr	r2, [r3, #12]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009276:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr

0800928a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	695a      	ldr	r2, [r3, #20]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0201 	bic.w	r2, r2, #1
 80092b0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d107      	bne.n	80092ca <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68da      	ldr	r2, [r3, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0210 	bic.w	r2, r2, #16
 80092c8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr

080092e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f7ff fe86 	bl	800900e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b21      	cmp	r3, #33	; 0x21
 800931c:	d13e      	bne.n	800939c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009326:	d114      	bne.n	8009352 <UART_Transmit_IT+0x48>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d110      	bne.n	8009352 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009344:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	1c9a      	adds	r2, r3, #2
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	621a      	str	r2, [r3, #32]
 8009350:	e008      	b.n	8009364 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	1c59      	adds	r1, r3, #1
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	6211      	str	r1, [r2, #32]
 800935c:	781a      	ldrb	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009368:	b29b      	uxth	r3, r3
 800936a:	3b01      	subs	r3, #1
 800936c:	b29b      	uxth	r3, r3
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	4619      	mov	r1, r3
 8009372:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10f      	bne.n	8009398 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009386:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009396:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	e000      	b.n	800939e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800939c:	2302      	movs	r3, #2
  }
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr

080093a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff fe05 	bl	8008fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b22      	cmp	r3, #34	; 0x22
 80093ea:	f040 8099 	bne.w	8009520 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f6:	d117      	bne.n	8009428 <UART_Receive_IT+0x50>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d113      	bne.n	8009428 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	b29b      	uxth	r3, r3
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	b29a      	uxth	r2, r3
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009420:	1c9a      	adds	r2, r3, #2
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	629a      	str	r2, [r3, #40]	; 0x28
 8009426:	e026      	b.n	8009476 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943a:	d007      	beq.n	800944c <UART_Receive_IT+0x74>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <UART_Receive_IT+0x82>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d106      	bne.n	800945a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	b2da      	uxtb	r2, r3
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	701a      	strb	r2, [r3, #0]
 8009458:	e008      	b.n	800946c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009466:	b2da      	uxtb	r2, r3
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800947a:	b29b      	uxth	r3, r3
 800947c:	3b01      	subs	r3, #1
 800947e:	b29b      	uxth	r3, r3
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	4619      	mov	r1, r3
 8009484:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009486:	2b00      	cmp	r3, #0
 8009488:	d148      	bne.n	800951c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 0220 	bic.w	r2, r2, #32
 8009498:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68da      	ldr	r2, [r3, #12]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	695a      	ldr	r2, [r3, #20]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 0201 	bic.w	r2, r2, #1
 80094b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2220      	movs	r2, #32
 80094be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d123      	bne.n	8009512 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 0210 	bic.w	r2, r2, #16
 80094de:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0310 	and.w	r3, r3, #16
 80094ea:	2b10      	cmp	r3, #16
 80094ec:	d10a      	bne.n	8009504 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7ff fd88 	bl	8009020 <HAL_UARTEx_RxEventCallback>
 8009510:	e002      	b.n	8009518 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff fd69 	bl	8008fea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	e002      	b.n	8009522 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	e000      	b.n	8009522 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009520:	2302      	movs	r3, #2
  }
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689a      	ldr	r2, [r3, #8]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	4313      	orrs	r3, r2
 800955a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009566:	f023 030c 	bic.w	r3, r3, #12
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	430b      	orrs	r3, r1
 8009572:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	699a      	ldr	r2, [r3, #24]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a2c      	ldr	r2, [pc, #176]	; (8009640 <UART_SetConfig+0x114>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d103      	bne.n	800959c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009594:	f7fd fe0e 	bl	80071b4 <HAL_RCC_GetPCLK2Freq>
 8009598:	60f8      	str	r0, [r7, #12]
 800959a:	e002      	b.n	80095a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800959c:	f7fd fdf6 	bl	800718c <HAL_RCC_GetPCLK1Freq>
 80095a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009a      	lsls	r2, r3, #2
 80095ac:	441a      	add	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b8:	4a22      	ldr	r2, [pc, #136]	; (8009644 <UART_SetConfig+0x118>)
 80095ba:	fba2 2303 	umull	r2, r3, r2, r3
 80095be:	095b      	lsrs	r3, r3, #5
 80095c0:	0119      	lsls	r1, r3, #4
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009a      	lsls	r2, r3, #2
 80095cc:	441a      	add	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80095d8:	4b1a      	ldr	r3, [pc, #104]	; (8009644 <UART_SetConfig+0x118>)
 80095da:	fba3 0302 	umull	r0, r3, r3, r2
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	2064      	movs	r0, #100	; 0x64
 80095e2:	fb00 f303 	mul.w	r3, r0, r3
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	3332      	adds	r3, #50	; 0x32
 80095ec:	4a15      	ldr	r2, [pc, #84]	; (8009644 <UART_SetConfig+0x118>)
 80095ee:	fba2 2303 	umull	r2, r3, r2, r3
 80095f2:	095b      	lsrs	r3, r3, #5
 80095f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095f8:	4419      	add	r1, r3
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009a      	lsls	r2, r3, #2
 8009604:	441a      	add	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <UART_SetConfig+0x118>)
 8009612:	fba3 0302 	umull	r0, r3, r3, r2
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	2064      	movs	r0, #100	; 0x64
 800961a:	fb00 f303 	mul.w	r3, r0, r3
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	3332      	adds	r3, #50	; 0x32
 8009624:	4a07      	ldr	r2, [pc, #28]	; (8009644 <UART_SetConfig+0x118>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	095b      	lsrs	r3, r3, #5
 800962c:	f003 020f 	and.w	r2, r3, #15
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	440a      	add	r2, r1
 8009636:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009638:	bf00      	nop
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	40013800 	.word	0x40013800
 8009644:	51eb851f 	.word	0x51eb851f

08009648 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800964c:	4904      	ldr	r1, [pc, #16]	; (8009660 <MX_FATFS_Init+0x18>)
 800964e:	4805      	ldr	r0, [pc, #20]	; (8009664 <MX_FATFS_Init+0x1c>)
 8009650:	f003 fadc 	bl	800cc0c <FATFS_LinkDriver>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	4b03      	ldr	r3, [pc, #12]	; (8009668 <MX_FATFS_Init+0x20>)
 800965a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800965c:	bf00      	nop
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20000f24 	.word	0x20000f24
 8009664:	20000010 	.word	0x20000010
 8009668:	20000f28 	.word	0x20000f28

0800966c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009670:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009672:	4618      	mov	r0, r3
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr
	...

0800967c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	4618      	mov	r0, r3
 800968a:	f7f8 f825 	bl	80016d8 <SD_disk_initialize>
 800968e:	4603      	mov	r3, r0
 8009690:	461a      	mov	r2, r3
 8009692:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <USER_initialize+0x28>)
 8009694:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009696:	4b03      	ldr	r3, [pc, #12]	; (80096a4 <USER_initialize+0x28>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	2000000d 	.word	0x2000000d

080096a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7f8 f8f9 	bl	80018ac <SD_disk_status>
 80096ba:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80096d4:	7bf8      	ldrb	r0, [r7, #15]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	f7f8 f8fa 	bl	80018d4 <SD_disk_read>
 80096e0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80096fa:	7bf8      	ldrb	r0, [r7, #15]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	f7f8 f951 	bl	80019a8 <SD_disk_write>
 8009706:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	603a      	str	r2, [r7, #0]
 800971a:	71fb      	strb	r3, [r7, #7]
 800971c:	460b      	mov	r3, r1
 800971e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8009720:	79b9      	ldrb	r1, [r7, #6]
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f7f8 f9c2 	bl	8001ab0 <SD_disk_ioctl>
 800972c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	4a08      	ldr	r2, [pc, #32]	; (8009768 <disk_status+0x30>)
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	79fa      	ldrb	r2, [r7, #7]
 8009750:	4905      	ldr	r1, [pc, #20]	; (8009768 <disk_status+0x30>)
 8009752:	440a      	add	r2, r1
 8009754:	7a12      	ldrb	r2, [r2, #8]
 8009756:	4610      	mov	r0, r2
 8009758:	4798      	blx	r3
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800975e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	200002cc 	.word	0x200002cc

0800976c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	4a0d      	ldr	r2, [pc, #52]	; (80097b4 <disk_initialize+0x48>)
 800977e:	5cd3      	ldrb	r3, [r2, r3]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d111      	bne.n	80097a8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	4a0b      	ldr	r2, [pc, #44]	; (80097b4 <disk_initialize+0x48>)
 8009788:	2101      	movs	r1, #1
 800978a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <disk_initialize+0x48>)
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	79fa      	ldrb	r2, [r7, #7]
 800979a:	4906      	ldr	r1, [pc, #24]	; (80097b4 <disk_initialize+0x48>)
 800979c:	440a      	add	r2, r1
 800979e:	7a12      	ldrb	r2, [r2, #8]
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	200002cc 	.word	0x200002cc

080097b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80097b8:	b590      	push	{r4, r7, lr}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60b9      	str	r1, [r7, #8]
 80097c0:	607a      	str	r2, [r7, #4]
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	4603      	mov	r3, r0
 80097c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	4a0a      	ldr	r2, [pc, #40]	; (80097f4 <disk_read+0x3c>)
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	689c      	ldr	r4, [r3, #8]
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4a07      	ldr	r2, [pc, #28]	; (80097f4 <disk_read+0x3c>)
 80097d8:	4413      	add	r3, r2
 80097da:	7a18      	ldrb	r0, [r3, #8]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	68b9      	ldr	r1, [r7, #8]
 80097e2:	47a0      	blx	r4
 80097e4:	4603      	mov	r3, r0
 80097e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd90      	pop	{r4, r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200002cc 	.word	0x200002cc

080097f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	4a0a      	ldr	r2, [pc, #40]	; (8009834 <disk_write+0x3c>)
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68dc      	ldr	r4, [r3, #12]
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4a07      	ldr	r2, [pc, #28]	; (8009834 <disk_write+0x3c>)
 8009818:	4413      	add	r3, r2
 800981a:	7a18      	ldrb	r0, [r3, #8]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	47a0      	blx	r4
 8009824:	4603      	mov	r3, r0
 8009826:	75fb      	strb	r3, [r7, #23]
  return res;
 8009828:	7dfb      	ldrb	r3, [r7, #23]
}
 800982a:	4618      	mov	r0, r3
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	bd90      	pop	{r4, r7, pc}
 8009832:	bf00      	nop
 8009834:	200002cc 	.word	0x200002cc

08009838 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	4603      	mov	r3, r0
 8009840:	603a      	str	r2, [r7, #0]
 8009842:	71fb      	strb	r3, [r7, #7]
 8009844:	460b      	mov	r3, r1
 8009846:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	4a09      	ldr	r2, [pc, #36]	; (8009870 <disk_ioctl+0x38>)
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	79fa      	ldrb	r2, [r7, #7]
 8009856:	4906      	ldr	r1, [pc, #24]	; (8009870 <disk_ioctl+0x38>)
 8009858:	440a      	add	r2, r1
 800985a:	7a10      	ldrb	r0, [r2, #8]
 800985c:	79b9      	ldrb	r1, [r7, #6]
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
  return res;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	200002cc 	.word	0x200002cc

08009874 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009888:	e007      	b.n	800989a <mem_cpy+0x26>
		*d++ = *s++;
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	1c53      	adds	r3, r2, #1
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	1c59      	adds	r1, r3, #1
 8009894:	6179      	str	r1, [r7, #20]
 8009896:	7812      	ldrb	r2, [r2, #0]
 8009898:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	1e5a      	subs	r2, r3, #1
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1f2      	bne.n	800988a <mem_cpy+0x16>
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	371c      	adds	r7, #28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bc80      	pop	{r7}
 80098ae:	4770      	bx	lr

080098b0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80098c0:	e005      	b.n	80098ce <mem_set+0x1e>
		*d++ = (BYTE)val;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	617a      	str	r2, [r7, #20]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1f4      	bne.n	80098c2 <mem_set+0x12>
}
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	bc80      	pop	{r7}
 80098e2:	4770      	bx	lr

080098e4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80098e4:	b480      	push	{r7}
 80098e6:	b089      	sub	sp, #36	; 0x24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	61fb      	str	r3, [r7, #28]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80098fc:	bf00      	nop
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	1e5a      	subs	r2, r3, #1
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00d      	beq.n	8009924 <mem_cmp+0x40>
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	61fa      	str	r2, [r7, #28]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	4619      	mov	r1, r3
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	61ba      	str	r2, [r7, #24]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	1acb      	subs	r3, r1, r3
 800991c:	617b      	str	r3, [r7, #20]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0ec      	beq.n	80098fe <mem_cmp+0x1a>
	return r;
 8009924:	697b      	ldr	r3, [r7, #20]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3724      	adds	r7, #36	; 0x24
 800992a:	46bd      	mov	sp, r7
 800992c:	bc80      	pop	{r7}
 800992e:	4770      	bx	lr

08009930 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800993a:	e002      	b.n	8009942 <chk_chr+0x12>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3301      	adds	r3, #1
 8009940:	607b      	str	r3, [r7, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <chk_chr+0x26>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	4293      	cmp	r3, r2
 8009954:	d1f2      	bne.n	800993c <chk_chr+0xc>
	return *str;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	781b      	ldrb	r3, [r3, #0]
}
 800995a:	4618      	mov	r0, r3
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	bc80      	pop	{r7}
 8009962:	4770      	bx	lr

08009964 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800996e:	2300      	movs	r3, #0
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	e035      	b.n	80099e4 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 8009978:	492e      	ldr	r1, [pc, #184]	; (8009a34 <chk_lock+0xd0>)
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4613      	mov	r3, r2
 800997e:	005b      	lsls	r3, r3, #1
 8009980:	4413      	add	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d026      	beq.n	80099da <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800998c:	4929      	ldr	r1, [pc, #164]	; (8009a34 <chk_lock+0xd0>)
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4613      	mov	r3, r2
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d11c      	bne.n	80099de <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 80099a4:	4923      	ldr	r1, [pc, #140]	; (8009a34 <chk_lock+0xd0>)
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	4613      	mov	r3, r2
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	440b      	add	r3, r1
 80099b2:	3304      	adds	r3, #4
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d10f      	bne.n	80099de <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80099be:	491d      	ldr	r1, [pc, #116]	; (8009a34 <chk_lock+0xd0>)
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4613      	mov	r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	440b      	add	r3, r1
 80099cc:	3308      	adds	r3, #8
 80099ce:	881a      	ldrh	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d102      	bne.n	80099de <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80099d8:	e007      	b.n	80099ea <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 80099da:	2301      	movs	r3, #1
 80099dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3301      	adds	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d9c6      	bls.n	8009978 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d109      	bne.n	8009a04 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d102      	bne.n	80099fc <chk_lock+0x98>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d101      	bne.n	8009a00 <chk_lock+0x9c>
 80099fc:	2300      	movs	r3, #0
 80099fe:	e013      	b.n	8009a28 <chk_lock+0xc4>
 8009a00:	2312      	movs	r3, #18
 8009a02:	e011      	b.n	8009a28 <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10b      	bne.n	8009a22 <chk_lock+0xbe>
 8009a0a:	490a      	ldr	r1, [pc, #40]	; (8009a34 <chk_lock+0xd0>)
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	440b      	add	r3, r1
 8009a18:	330a      	adds	r3, #10
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a20:	d101      	bne.n	8009a26 <chk_lock+0xc2>
 8009a22:	2310      	movs	r3, #16
 8009a24:	e000      	b.n	8009a28 <chk_lock+0xc4>
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bc80      	pop	{r7}
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	200000b4 	.word	0x200000b4

08009a38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	607b      	str	r3, [r7, #4]
 8009a42:	e002      	b.n	8009a4a <enq_lock+0x12>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3301      	adds	r3, #1
 8009a48:	607b      	str	r3, [r7, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d809      	bhi.n	8009a64 <enq_lock+0x2c>
 8009a50:	490a      	ldr	r1, [pc, #40]	; (8009a7c <enq_lock+0x44>)
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	4613      	mov	r3, r2
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	4413      	add	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	440b      	add	r3, r1
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1ef      	bne.n	8009a44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	bf14      	ite	ne
 8009a6a:	2301      	movne	r3, #1
 8009a6c:	2300      	moveq	r3, #0
 8009a6e:	b2db      	uxtb	r3, r3
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bc80      	pop	{r7}
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	200000b4 	.word	0x200000b4

08009a80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	e028      	b.n	8009ae2 <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 8009a90:	4952      	ldr	r1, [pc, #328]	; (8009bdc <inc_lock+0x15c>)
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d119      	bne.n	8009adc <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 8009aa8:	494c      	ldr	r1, [pc, #304]	; (8009bdc <inc_lock+0x15c>)
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4613      	mov	r3, r2
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d10c      	bne.n	8009adc <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 8009ac2:	4946      	ldr	r1, [pc, #280]	; (8009bdc <inc_lock+0x15c>)
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	881a      	ldrh	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d006      	beq.n	8009aea <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d9d3      	bls.n	8009a90 <inc_lock+0x10>
 8009ae8:	e000      	b.n	8009aec <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8009aea:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d142      	bne.n	8009b78 <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	e002      	b.n	8009afe <inc_lock+0x7e>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3301      	adds	r3, #1
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d809      	bhi.n	8009b18 <inc_lock+0x98>
 8009b04:	4935      	ldr	r1, [pc, #212]	; (8009bdc <inc_lock+0x15c>)
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	440b      	add	r3, r1
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1ef      	bne.n	8009af8 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d101      	bne.n	8009b22 <inc_lock+0xa2>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e057      	b.n	8009bd2 <inc_lock+0x152>
		Files[i].fs = dp->fs;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6819      	ldr	r1, [r3, #0]
 8009b26:	482d      	ldr	r0, [pc, #180]	; (8009bdc <inc_lock+0x15c>)
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4403      	add	r3, r0
 8009b34:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6899      	ldr	r1, [r3, #8]
 8009b3a:	4828      	ldr	r0, [pc, #160]	; (8009bdc <inc_lock+0x15c>)
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4403      	add	r3, r0
 8009b48:	3304      	adds	r3, #4
 8009b4a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	88d8      	ldrh	r0, [r3, #6]
 8009b50:	4922      	ldr	r1, [pc, #136]	; (8009bdc <inc_lock+0x15c>)
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4613      	mov	r3, r2
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	440b      	add	r3, r1
 8009b5e:	3308      	adds	r3, #8
 8009b60:	4602      	mov	r2, r0
 8009b62:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b64:	491d      	ldr	r1, [pc, #116]	; (8009bdc <inc_lock+0x15c>)
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	4413      	add	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	440b      	add	r3, r1
 8009b72:	330a      	adds	r3, #10
 8009b74:	2200      	movs	r2, #0
 8009b76:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00c      	beq.n	8009b98 <inc_lock+0x118>
 8009b7e:	4917      	ldr	r1, [pc, #92]	; (8009bdc <inc_lock+0x15c>)
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4613      	mov	r3, r2
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	4413      	add	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	440b      	add	r3, r1
 8009b8c:	330a      	adds	r3, #10
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <inc_lock+0x118>
 8009b94:	2300      	movs	r3, #0
 8009b96:	e01c      	b.n	8009bd2 <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10b      	bne.n	8009bb6 <inc_lock+0x136>
 8009b9e:	490f      	ldr	r1, [pc, #60]	; (8009bdc <inc_lock+0x15c>)
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	005b      	lsls	r3, r3, #1
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	330a      	adds	r3, #10
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	b299      	uxth	r1, r3
 8009bb4:	e001      	b.n	8009bba <inc_lock+0x13a>
 8009bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bba:	4808      	ldr	r0, [pc, #32]	; (8009bdc <inc_lock+0x15c>)
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4403      	add	r3, r0
 8009bc8:	330a      	adds	r3, #10
 8009bca:	460a      	mov	r2, r1
 8009bcc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bc80      	pop	{r7}
 8009bda:	4770      	bx	lr
 8009bdc:	200000b4 	.word	0x200000b4

08009be0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	607b      	str	r3, [r7, #4]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d82e      	bhi.n	8009c52 <dec_lock+0x72>
		n = Files[i].ctr;
 8009bf4:	491b      	ldr	r1, [pc, #108]	; (8009c64 <dec_lock+0x84>)
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	005b      	lsls	r3, r3, #1
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	440b      	add	r3, r1
 8009c02:	330a      	adds	r3, #10
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c08:	89fb      	ldrh	r3, [r7, #14]
 8009c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0e:	d101      	bne.n	8009c14 <dec_lock+0x34>
 8009c10:	2300      	movs	r3, #0
 8009c12:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009c14:	89fb      	ldrh	r3, [r7, #14]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <dec_lock+0x40>
 8009c1a:	89fb      	ldrh	r3, [r7, #14]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c20:	4910      	ldr	r1, [pc, #64]	; (8009c64 <dec_lock+0x84>)
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	4613      	mov	r3, r2
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	440b      	add	r3, r1
 8009c2e:	330a      	adds	r3, #10
 8009c30:	89fa      	ldrh	r2, [r7, #14]
 8009c32:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c34:	89fb      	ldrh	r3, [r7, #14]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d108      	bne.n	8009c4c <dec_lock+0x6c>
 8009c3a:	490a      	ldr	r1, [pc, #40]	; (8009c64 <dec_lock+0x84>)
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	440b      	add	r3, r1
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	737b      	strb	r3, [r7, #13]
 8009c50:	e001      	b.n	8009c56 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c52:	2302      	movs	r3, #2
 8009c54:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c56:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bc80      	pop	{r7}
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	200000b4 	.word	0x200000b4

08009c68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e016      	b.n	8009ca4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c76:	4910      	ldr	r1, [pc, #64]	; (8009cb8 <clear_lock+0x50>)
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	440b      	add	r3, r1
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d108      	bne.n	8009c9e <clear_lock+0x36>
 8009c8c:	490a      	ldr	r1, [pc, #40]	; (8009cb8 <clear_lock+0x50>)
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	4613      	mov	r3, r2
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d9e5      	bls.n	8009c76 <clear_lock+0xe>
	}
}
 8009caa:	bf00      	nop
 8009cac:	bf00      	nop
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bc80      	pop	{r7}
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	200000b4 	.word	0x200000b4

08009cbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d038      	beq.n	8009d44 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8009cd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	f7ff fd87 	bl	80097f8 <disk_write>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	73fb      	strb	r3, [r7, #15]
 8009cf4:	e026      	b.n	8009d44 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	1ad2      	subs	r2, r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d218      	bcs.n	8009d44 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	e010      	b.n	8009d3e <sync_window+0x82>
					wsect += fs->fsize;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	4413      	add	r3, r2
 8009d26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	2301      	movs	r3, #1
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	f7ff fd60 	bl	80097f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	613b      	str	r3, [r7, #16]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d8eb      	bhi.n	8009d1c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d01b      	beq.n	8009da0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff ffa7 	bl	8009cbc <sync_window>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d113      	bne.n	8009da0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	2301      	movs	r3, #1
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	f7ff fd18 	bl	80097b8 <disk_read>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d004      	beq.n	8009d98 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff ff82 	bl	8009cbc <sync_window>
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f040 809c 	bne.w	8009efc <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	f040 8089 	bne.w	8009ee2 <sync_fs+0x138>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	f040 8083 	bne.w	8009ee2 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009de4:	461a      	mov	r2, r3
 8009de6:	2100      	movs	r1, #0
 8009de8:	f7ff fd62 	bl	80098b0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2255      	movs	r2, #85	; 0x55
 8009df0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	22aa      	movs	r2, #170	; 0xaa
 8009df8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2252      	movs	r2, #82	; 0x52
 8009e00:	701a      	strb	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2252      	movs	r2, #82	; 0x52
 8009e06:	705a      	strb	r2, [r3, #1]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2261      	movs	r2, #97	; 0x61
 8009e0c:	709a      	strb	r2, [r3, #2]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2241      	movs	r2, #65	; 0x41
 8009e12:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2272      	movs	r2, #114	; 0x72
 8009e18:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2272      	movs	r2, #114	; 0x72
 8009e20:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2241      	movs	r2, #65	; 0x41
 8009e28:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2261      	movs	r2, #97	; 0x61
 8009e30:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	0a1b      	lsrs	r3, r3, #8
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009e5c:	0c1b      	lsrs	r3, r3, #16
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009e6c:	0e1b      	lsrs	r3, r3, #24
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	0a1b      	lsrs	r3, r3, #8
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009e9e:	0c1b      	lsrs	r3, r3, #16
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009eae:	0e1b      	lsrs	r3, r3, #24
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009ecc:	6879      	ldr	r1, [r7, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f7ff fc8f 	bl	80097f8 <disk_write>
			fs->fsi_flag = 0;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff fca3 	bl	8009838 <disk_ioctl>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <sync_fs+0x152>
			res = FR_DISK_ERR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	3b02      	subs	r3, #2
 8009f14:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009f1c:	3b02      	subs	r3, #2
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d301      	bcc.n	8009f28 <clust2sect+0x22>
 8009f24:	2300      	movs	r3, #0
 8009f26:	e00a      	b.n	8009f3e <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009f2e:	461a      	mov	r2, r3
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	fb03 f202 	mul.w	r2, r3, r2
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8009f3c:	4413      	add	r3, r2
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bc80      	pop	{r7}
 8009f46:	4770      	bx	lr

08009f48 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d905      	bls.n	8009f64 <get_fat+0x1c>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d302      	bcc.n	8009f6a <get_fat+0x22>
		val = 1;	/* Internal error */
 8009f64:	2301      	movs	r3, #1
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	e0d7      	b.n	800a11a <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	f000 808f 	beq.w	800a09a <get_fat+0x152>
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	f300 80c2 	bgt.w	800a106 <get_fat+0x1be>
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d002      	beq.n	8009f8c <get_fat+0x44>
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d059      	beq.n	800a03e <get_fat+0xf6>
 8009f8a:	e0bc      	b.n	800a106 <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	4413      	add	r3, r2
 8009f98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fae:	4413      	add	r3, r2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff fecb 	bl	8009d4e <move_window>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f040 80a6 	bne.w	800a10c <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	60fa      	str	r2, [r7, #12]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009fcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fd0:	fb02 f201 	mul.w	r2, r2, r1
 8009fd4:	1a9b      	subs	r3, r3, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	5cd3      	ldrb	r3, [r2, r3]
 8009fda:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009fe8:	4619      	mov	r1, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ff0:	4413      	add	r3, r2
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff feaa 	bl	8009d4e <move_window>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f040 8087 	bne.w	800a110 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a008:	461a      	mov	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a010:	fb02 f201 	mul.w	r2, r2, r1
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	5cd3      	ldrb	r3, [r2, r3]
 800a01a:	021b      	lsls	r3, r3, #8
 800a01c:	461a      	mov	r2, r3
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	4313      	orrs	r3, r2
 800a022:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <get_fat+0xec>
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	091b      	lsrs	r3, r3, #4
 800a032:	e002      	b.n	800a03a <get_fat+0xf2>
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03a:	617b      	str	r3, [r7, #20]
			break;
 800a03c:	e06d      	b.n	800a11a <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4619      	mov	r1, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	fbb3 f3f1 	udiv	r3, r3, r1
 800a056:	4413      	add	r3, r2
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7ff fe77 	bl	8009d4e <move_window>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d156      	bne.n	800a114 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a070:	fbb3 f1f2 	udiv	r1, r3, r2
 800a074:	fb02 f201 	mul.w	r2, r2, r1
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	4413      	add	r3, r2
 800a07e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	3301      	adds	r3, #1
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	021b      	lsls	r3, r3, #8
 800a088:	b21a      	sxth	r2, r3
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	b21b      	sxth	r3, r3
 800a090:	4313      	orrs	r3, r2
 800a092:	b21b      	sxth	r3, r3
 800a094:	b29b      	uxth	r3, r3
 800a096:	617b      	str	r3, [r7, #20]
			break;
 800a098:	e03f      	b.n	800a11a <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a0a6:	089b      	lsrs	r3, r3, #2
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0b2:	4413      	add	r3, r2
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7ff fe49 	bl	8009d4e <move_window>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d12a      	bne.n	800a118 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a0cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0d0:	fb02 f201 	mul.w	r2, r2, r1
 800a0d4:	1a9b      	subs	r3, r3, r2
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	4413      	add	r3, r2
 800a0da:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	3303      	adds	r3, #3
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	061a      	lsls	r2, r3, #24
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	3302      	adds	r3, #2
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	041b      	lsls	r3, r3, #16
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	3201      	adds	r2, #1
 800a0f2:	7812      	ldrb	r2, [r2, #0]
 800a0f4:	0212      	lsls	r2, r2, #8
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a102:	617b      	str	r3, [r7, #20]
			break;
 800a104:	e009      	b.n	800a11a <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 800a106:	2301      	movs	r3, #1
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	e006      	b.n	800a11a <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a10c:	bf00      	nop
 800a10e:	e004      	b.n	800a11a <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a110:	bf00      	nop
 800a112:	e002      	b.n	800a11a <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a114:	bf00      	nop
 800a116:	e000      	b.n	800a11a <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a118:	bf00      	nop
		}
	}

	return val;
 800a11a:	697b      	ldr	r3, [r7, #20]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d905      	bls.n	800a142 <put_fat+0x1e>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d302      	bcc.n	800a148 <put_fat+0x24>
		res = FR_INT_ERR;
 800a142:	2302      	movs	r3, #2
 800a144:	77fb      	strb	r3, [r7, #31]
 800a146:	e128      	b.n	800a39a <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a14e:	2b03      	cmp	r3, #3
 800a150:	f000 80c3 	beq.w	800a2da <put_fat+0x1b6>
 800a154:	2b03      	cmp	r3, #3
 800a156:	f300 8116 	bgt.w	800a386 <put_fat+0x262>
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d003      	beq.n	800a166 <put_fat+0x42>
 800a15e:	2b02      	cmp	r3, #2
 800a160:	f000 8087 	beq.w	800a272 <put_fat+0x14e>
 800a164:	e10f      	b.n	800a386 <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	085b      	lsrs	r3, r3, #1
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4413      	add	r3, r2
 800a172:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a180:	4619      	mov	r1, r3
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	fbb3 f3f1 	udiv	r3, r3, r1
 800a188:	4413      	add	r3, r2
 800a18a:	4619      	mov	r1, r3
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7ff fdde 	bl	8009d4e <move_window>
 800a192:	4603      	mov	r3, r0
 800a194:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a196:	7ffb      	ldrb	r3, [r7, #31]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f040 80f7 	bne.w	800a38c <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	617a      	str	r2, [r7, #20]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a1aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1ae:	fb02 f201 	mul.w	r2, r2, r1
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00d      	beq.n	800a1e0 <put_fat+0xbc>
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	b25b      	sxtb	r3, r3
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	b25a      	sxtb	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	b25b      	sxtb	r3, r3
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	b25b      	sxtb	r3, r3
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	e001      	b.n	800a1e4 <put_fat+0xc0>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	69ba      	ldr	r2, [r7, #24]
 800a1e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	fbb3 f3f1 	udiv	r3, r3, r1
 800a204:	4413      	add	r3, r2
 800a206:	4619      	mov	r1, r3
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f7ff fda0 	bl	8009d4e <move_window>
 800a20e:	4603      	mov	r3, r0
 800a210:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a212:	7ffb      	ldrb	r3, [r7, #31]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f040 80bb 	bne.w	800a390 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a220:	461a      	mov	r2, r3
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	fbb3 f1f2 	udiv	r1, r3, r2
 800a228:	fb02 f201 	mul.w	r2, r2, r1
 800a22c:	1a9b      	subs	r3, r3, r2
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	4413      	add	r3, r2
 800a232:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <put_fat+0x122>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	091b      	lsrs	r3, r3, #4
 800a242:	b2db      	uxtb	r3, r3
 800a244:	e00e      	b.n	800a264 <put_fat+0x140>
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b25b      	sxtb	r3, r3
 800a24c:	f023 030f 	bic.w	r3, r3, #15
 800a250:	b25a      	sxtb	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	0a1b      	lsrs	r3, r3, #8
 800a256:	b25b      	sxtb	r3, r3
 800a258:	f003 030f 	and.w	r3, r3, #15
 800a25c:	b25b      	sxtb	r3, r3
 800a25e:	4313      	orrs	r3, r2
 800a260:	b25b      	sxtb	r3, r3
 800a262:	b2db      	uxtb	r3, r3
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800a270:	e093      	b.n	800a39a <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a27e:	085b      	lsrs	r3, r3, #1
 800a280:	b29b      	uxth	r3, r3
 800a282:	4619      	mov	r1, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	fbb3 f3f1 	udiv	r3, r3, r1
 800a28a:	4413      	add	r3, r2
 800a28c:	4619      	mov	r1, r3
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7ff fd5d 	bl	8009d4e <move_window>
 800a294:	4603      	mov	r3, r0
 800a296:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a298:	7ffb      	ldrb	r3, [r7, #31]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d17a      	bne.n	800a394 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a2a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2ac:	fb02 f201 	mul.w	r2, r2, r1
 800a2b0:	1a9b      	subs	r3, r3, r2
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	701a      	strb	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	0a1b      	lsrs	r3, r3, #8
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800a2d8:	e05f      	b.n	800a39a <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a2e6:	089b      	lsrs	r3, r3, #2
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2f2:	4413      	add	r3, r2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff fd29 	bl	8009d4e <move_window>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a300:	7ffb      	ldrb	r3, [r7, #31]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d148      	bne.n	800a398 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a310:	fbb3 f1f2 	udiv	r1, r3, r2
 800a314:	fb02 f201 	mul.w	r2, r2, r1
 800a318:	1a9b      	subs	r3, r3, r2
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	3303      	adds	r3, #3
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	061a      	lsls	r2, r3, #24
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	3302      	adds	r3, #2
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	041b      	lsls	r3, r3, #16
 800a330:	4313      	orrs	r3, r2
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	3201      	adds	r2, #1
 800a336:	7812      	ldrb	r2, [r2, #0]
 800a338:	0212      	lsls	r2, r2, #8
 800a33a:	4313      	orrs	r3, r2
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	7812      	ldrb	r2, [r2, #0]
 800a340:	4313      	orrs	r3, r2
 800a342:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	4313      	orrs	r3, r2
 800a34a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	b29b      	uxth	r3, r3
 800a358:	0a1b      	lsrs	r3, r3, #8
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	3301      	adds	r3, #1
 800a360:	b2d2      	uxtb	r2, r2
 800a362:	701a      	strb	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	0c1a      	lsrs	r2, r3, #16
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	3302      	adds	r3, #2
 800a36c:	b2d2      	uxtb	r2, r2
 800a36e:	701a      	strb	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	0e1a      	lsrs	r2, r3, #24
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	3303      	adds	r3, #3
 800a378:	b2d2      	uxtb	r2, r2
 800a37a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800a384:	e009      	b.n	800a39a <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800a386:	2302      	movs	r3, #2
 800a388:	77fb      	strb	r3, [r7, #31]
 800a38a:	e006      	b.n	800a39a <put_fat+0x276>
			if (res != FR_OK) break;
 800a38c:	bf00      	nop
 800a38e:	e004      	b.n	800a39a <put_fat+0x276>
			if (res != FR_OK) break;
 800a390:	bf00      	nop
 800a392:	e002      	b.n	800a39a <put_fat+0x276>
			if (res != FR_OK) break;
 800a394:	bf00      	nop
 800a396:	e000      	b.n	800a39a <put_fat+0x276>
			if (res != FR_OK) break;
 800a398:	bf00      	nop
		}
	}

	return res;
 800a39a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d905      	bls.n	800a3c0 <remove_chain+0x1c>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d302      	bcc.n	800a3c6 <remove_chain+0x22>
		res = FR_INT_ERR;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	73fb      	strb	r3, [r7, #15]
 800a3c4:	e043      	b.n	800a44e <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a3ca:	e036      	b.n	800a43a <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff fdba 	bl	8009f48 <get_fat>
 800a3d4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d035      	beq.n	800a448 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d102      	bne.n	800a3e8 <remove_chain+0x44>
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	73fb      	strb	r3, [r7, #15]
 800a3e6:	e032      	b.n	800a44e <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ee:	d102      	bne.n	800a3f6 <remove_chain+0x52>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	73fb      	strb	r3, [r7, #15]
 800a3f4:	e02b      	b.n	800a44e <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7ff fe92 	bl	800a124 <put_fat>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d120      	bne.n	800a44c <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a414:	d00f      	beq.n	800a436 <remove_chain+0x92>
				fs->free_clust++;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800a42a:	f043 0301 	orr.w	r3, r3, #1
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d3c2      	bcc.n	800a3cc <remove_chain+0x28>
 800a446:	e002      	b.n	800a44e <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a448:	bf00      	nop
 800a44a:	e000      	b.n	800a44e <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a44c:	bf00      	nop
		}
	}

	return res;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10f      	bne.n	800a488 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a46e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d005      	beq.n	800a482 <create_chain+0x2a>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d31c      	bcc.n	800a4bc <create_chain+0x64>
 800a482:	2301      	movs	r3, #1
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	e019      	b.n	800a4bc <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff fd5c 	bl	8009f48 <get_fat>
 800a490:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d801      	bhi.n	800a49c <create_chain+0x44>
 800a498:	2301      	movs	r3, #1
 800a49a:	e076      	b.n	800a58a <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a2:	d101      	bne.n	800a4a8 <create_chain+0x50>
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	e070      	b.n	800a58a <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d201      	bcs.n	800a4b8 <create_chain+0x60>
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	e068      	b.n	800a58a <create_chain+0x132>
		scl = clst;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d307      	bcc.n	800a4e2 <create_chain+0x8a>
			ncl = 2;
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d901      	bls.n	800a4e2 <create_chain+0x8a>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e053      	b.n	800a58a <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a4e2:	6979      	ldr	r1, [r7, #20]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff fd2f 	bl	8009f48 <get_fat>
 800a4ea:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00e      	beq.n	800a510 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f8:	d002      	beq.n	800a500 <create_chain+0xa8>
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <create_chain+0xac>
			return cs;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	e042      	b.n	800a58a <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d1d9      	bne.n	800a4c0 <create_chain+0x68>
 800a50c:	2300      	movs	r3, #0
 800a50e:	e03c      	b.n	800a58a <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a510:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a512:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a516:	6979      	ldr	r1, [r7, #20]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff fe03 	bl	800a124 <put_fat>
 800a51e:	4603      	mov	r3, r0
 800a520:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d109      	bne.n	800a53c <create_chain+0xe4>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d006      	beq.n	800a53c <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff fdf6 	bl	800a124 <put_fat>
 800a538:	4603      	mov	r3, r0
 800a53a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d11a      	bne.n	800a578 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a554:	d018      	beq.n	800a588 <create_chain+0x130>
			fs->free_clust--;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a55c:	1e5a      	subs	r2, r3, #1
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800a56a:	f043 0301 	orr.w	r3, r3, #1
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800a576:	e007      	b.n	800a588 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d102      	bne.n	800a584 <create_chain+0x12c>
 800a57e:	f04f 33ff 	mov.w	r3, #4294967295
 800a582:	e000      	b.n	800a586 <create_chain+0x12e>
 800a584:	2301      	movs	r3, #1
 800a586:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a588:	697b      	ldr	r3, [r7, #20]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a592:	b480      	push	{r7}
 800a594:	b087      	sub	sp, #28
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	6812      	ldr	r2, [r2, #0]
 800a5b8:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800a5bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	1d1a      	adds	r2, r3, #4
 800a5c6:	613a      	str	r2, [r7, #16]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <clmt_clust+0x44>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e010      	b.n	800a5f8 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d307      	bcc.n	800a5ee <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5ec:	e7e9      	b.n	800a5c2 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 800a5ee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	4413      	add	r3, r2
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	371c      	adds	r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bc80      	pop	{r7}
 800a600:	4770      	bx	lr

0800a602 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b086      	sub	sp, #24
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	b29a      	uxth	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d006      	beq.n	800a62e <dir_sdi+0x2c>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d301      	bcc.n	800a632 <dir_sdi+0x30>
		return FR_INT_ERR;
 800a62e:	2302      	movs	r3, #2
 800a630:	e082      	b.n	800a738 <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <dir_sdi+0x4c>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a640:	2b03      	cmp	r3, #3
 800a642:	d104      	bne.n	800a64e <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800a64c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10f      	bne.n	800a674 <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800a65c:	461a      	mov	r2, r3
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	4293      	cmp	r3, r2
 800a662:	d301      	bcc.n	800a668 <dir_sdi+0x66>
			return FR_INT_ERR;
 800a664:	2302      	movs	r3, #2
 800a666:	e067      	b.n	800a738 <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800a670:	613b      	str	r3, [r7, #16]
 800a672:	e036      	b.n	800a6e2 <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a67c:	095b      	lsrs	r3, r3, #5
 800a67e:	b29b      	uxth	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a68a:	fb03 f302 	mul.w	r3, r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a690:	e01c      	b.n	800a6cc <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6979      	ldr	r1, [r7, #20]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff fc55 	bl	8009f48 <get_fat>
 800a69e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a6:	d101      	bne.n	800a6ac <dir_sdi+0xaa>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e045      	b.n	800a738 <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d906      	bls.n	800a6c0 <dir_sdi+0xbe>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d301      	bcc.n	800a6c4 <dir_sdi+0xc2>
				return FR_INT_ERR;
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e039      	b.n	800a738 <dir_sdi+0x136>
			idx -= ic;
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d2de      	bcs.n	800a692 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6979      	ldr	r1, [r7, #20]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff fc13 	bl	8009f06 <clust2sect>
 800a6e0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <dir_sdi+0xf0>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e022      	b.n	800a738 <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a6fa:	095b      	lsrs	r3, r3, #5
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	fbb3 f2f2 	udiv	r2, r3, r2
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	441a      	add	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a71c:	095b      	lsrs	r3, r3, #5
 800a71e:	b29b      	uxth	r3, r3
 800a720:	461a      	mov	r2, r3
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	fbb3 f1f2 	udiv	r1, r3, r2
 800a728:	fb02 f201 	mul.w	r2, r2, r1
 800a72c:	1a9b      	subs	r3, r3, r2
 800a72e:	015b      	lsls	r3, r3, #5
 800a730:	18c2      	adds	r2, r0, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	88db      	ldrh	r3, [r3, #6]
 800a74e:	3301      	adds	r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	b29b      	uxth	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <dir_next+0x22>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <dir_next+0x26>
		return FR_NO_FILE;
 800a762:	2304      	movs	r3, #4
 800a764:	e0e2      	b.n	800a92c <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a76e:	095b      	lsrs	r3, r3, #5
 800a770:	b29b      	uxth	r3, r3
 800a772:	461a      	mov	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	fbb3 f1f2 	udiv	r1, r3, r2
 800a77a:	fb02 f201 	mul.w	r2, r2, r1
 800a77e:	1a9b      	subs	r3, r3, r2
 800a780:	2b00      	cmp	r3, #0
 800a782:	f040 80ba 	bne.w	800a8fa <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10a      	bne.n	800a7ae <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	f0c0 80a8 	bcc.w	800a8fa <dir_next+0x1ba>
				return FR_NO_FILE;
 800a7aa:	2304      	movs	r3, #4
 800a7ac:	e0be      	b.n	800a92c <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a7b6:	095b      	lsrs	r3, r3, #5
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800a7ca:	3a01      	subs	r2, #1
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f040 8093 	bne.w	800a8fa <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4610      	mov	r0, r2
 800a7e0:	f7ff fbb2 	bl	8009f48 <get_fat>
 800a7e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d801      	bhi.n	800a7f0 <dir_next+0xb0>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	e09d      	b.n	800a92c <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d101      	bne.n	800a7fc <dir_next+0xbc>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e097      	b.n	800a92c <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d36b      	bcc.n	800a8e2 <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <dir_next+0xd4>
 800a810:	2304      	movs	r3, #4
 800a812:	e08b      	b.n	800a92c <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f7ff fe1a 	bl	800a458 <create_chain>
 800a824:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <dir_next+0xf0>
 800a82c:	2307      	movs	r3, #7
 800a82e:	e07d      	b.n	800a92c <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <dir_next+0xfa>
 800a836:	2302      	movs	r3, #2
 800a838:	e078      	b.n	800a92c <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a840:	d101      	bne.n	800a846 <dir_next+0x106>
 800a842:	2301      	movs	r3, #1
 800a844:	e072      	b.n	800a92c <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7ff fa36 	bl	8009cbc <sync_window>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <dir_next+0x11a>
 800a856:	2301      	movs	r3, #1
 800a858:	e068      	b.n	800a92c <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4618      	mov	r0, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a868:	461a      	mov	r2, r3
 800a86a:	2100      	movs	r1, #0
 800a86c:	f7ff f820 	bl	80098b0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681c      	ldr	r4, [r3, #0]
 800a878:	6979      	ldr	r1, [r7, #20]
 800a87a:	4610      	mov	r0, r2
 800a87c:	f7ff fb43 	bl	8009f06 <clust2sect>
 800a880:	4603      	mov	r3, r0
 800a882:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a886:	2300      	movs	r3, #0
 800a888:	613b      	str	r3, [r7, #16]
 800a88a:	e018      	b.n	800a8be <dir_next+0x17e>
						dp->fs->wflag = 1;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff fa0e 	bl	8009cbc <sync_window>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <dir_next+0x16a>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e040      	b.n	800a92c <dir_next+0x1ec>
						dp->fs->winsect++;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800a8b2:	3201      	adds	r2, #1
 800a8b4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	613b      	str	r3, [r7, #16]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d3de      	bcc.n	800a88c <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	1a8a      	subs	r2, r1, r2
 800a8de:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6979      	ldr	r1, [r7, #20]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff fb09 	bl	8009f06 <clust2sect>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4618      	mov	r0, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a910:	095b      	lsrs	r3, r3, #5
 800a912:	b29b      	uxth	r3, r3
 800a914:	461a      	mov	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	fbb3 f1f2 	udiv	r1, r3, r2
 800a91c:	fb02 f201 	mul.w	r2, r2, r1
 800a920:	1a9b      	subs	r3, r3, r2
 800a922:	015b      	lsls	r3, r3, #5
 800a924:	18c2      	adds	r2, r0, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	bd90      	pop	{r4, r7, pc}

0800a934 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a93e:	2100      	movs	r1, #0
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff fe5e 	bl	800a602 <dir_sdi>
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d12d      	bne.n	800a9ac <dir_alloc+0x78>
		n = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	4619      	mov	r1, r3
 800a95e:	4610      	mov	r0, r2
 800a960:	f7ff f9f5 	bl	8009d4e <move_window>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d11d      	bne.n	800a9aa <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	2be5      	cmp	r3, #229	; 0xe5
 800a976:	d004      	beq.n	800a982 <dir_alloc+0x4e>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d107      	bne.n	800a992 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	3301      	adds	r3, #1
 800a986:	60bb      	str	r3, [r7, #8]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d102      	bne.n	800a996 <dir_alloc+0x62>
 800a990:	e00c      	b.n	800a9ac <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a992:	2300      	movs	r3, #0
 800a994:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a996:	2101      	movs	r1, #1
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff fed1 	bl	800a740 <dir_next>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d0d5      	beq.n	800a954 <dir_alloc+0x20>
 800a9a8:	e000      	b.n	800a9ac <dir_alloc+0x78>
			if (res != FR_OK) break;
 800a9aa:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	d101      	bne.n	800a9b6 <dir_alloc+0x82>
 800a9b2:	2307      	movs	r3, #7
 800a9b4:	73fb      	strb	r3, [r7, #15]
	return res;
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	331b      	adds	r3, #27
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	b21a      	sxth	r2, r3
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	331a      	adds	r3, #26
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	b21b      	sxth	r3, r3
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	b21b      	sxth	r3, r3
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d10f      	bne.n	800aa0e <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	3315      	adds	r3, #21
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	021b      	lsls	r3, r3, #8
 800a9f6:	b21a      	sxth	r2, r3
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	3314      	adds	r3, #20
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	b21b      	sxth	r3, r3
 800aa00:	4313      	orrs	r3, r2
 800aa02:	b21b      	sxth	r3, r3
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	041b      	lsls	r3, r3, #16
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]

	return cl;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bc80      	pop	{r7}
 800aa18:	4770      	bx	lr

0800aa1a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	331a      	adds	r3, #26
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	b2d2      	uxtb	r2, r2
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	0a1b      	lsrs	r3, r3, #8
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	331b      	adds	r3, #27
 800aa3a:	b2d2      	uxtb	r2, r2
 800aa3c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	0c1a      	lsrs	r2, r3, #16
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	3314      	adds	r3, #20
 800aa46:	b2d2      	uxtb	r2, r2
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	0c1b      	lsrs	r3, r3, #16
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	0a1b      	lsrs	r3, r3, #8
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	3315      	adds	r3, #21
 800aa58:	b2d2      	uxtb	r2, r2
 800aa5a:	701a      	strb	r2, [r3, #0]
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr
	...

0800aa68 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa7a:	1e5a      	subs	r2, r3, #1
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	4413      	add	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800aa90:	4a2b      	ldr	r2, [pc, #172]	; (800ab40 <cmp_lfn+0xd8>)
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	4413      	add	r3, r2
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	b21a      	sxth	r2, r3
 800aaa4:	4926      	ldr	r1, [pc, #152]	; (800ab40 <cmp_lfn+0xd8>)
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	440b      	add	r3, r1
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	4619      	mov	r1, r3
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	440b      	add	r3, r1
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	b21b      	sxth	r3, r3
 800aab6:	4313      	orrs	r3, r2
 800aab8:	b21b      	sxth	r3, r3
 800aaba:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800aabc:	89fb      	ldrh	r3, [r7, #14]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d019      	beq.n	800aaf6 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800aac2:	89bb      	ldrh	r3, [r7, #12]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f002 f8eb 	bl	800cca0 <ff_wtoupper>
 800aaca:	4603      	mov	r3, r0
 800aacc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	2bfe      	cmp	r3, #254	; 0xfe
 800aad2:	d80e      	bhi.n	800aaf2 <cmp_lfn+0x8a>
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	617a      	str	r2, [r7, #20]
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	4413      	add	r3, r2
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f002 f8dc 	bl	800cca0 <ff_wtoupper>
 800aae8:	4603      	mov	r3, r0
 800aaea:	461a      	mov	r2, r3
 800aaec:	89fb      	ldrh	r3, [r7, #14]
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d008      	beq.n	800ab04 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e01f      	b.n	800ab36 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800aaf6:	89bb      	ldrh	r3, [r7, #12]
 800aaf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d001      	beq.n	800ab04 <cmp_lfn+0x9c>
 800ab00:	2300      	movs	r3, #0
 800ab02:	e018      	b.n	800ab36 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	3301      	adds	r3, #1
 800ab08:	613b      	str	r3, [r7, #16]
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b0c      	cmp	r3, #12
 800ab0e:	d9bf      	bls.n	800aa90 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <cmp_lfn+0xcc>
 800ab1c:	89fb      	ldrh	r3, [r7, #14]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d008      	beq.n	800ab34 <cmp_lfn+0xcc>
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	4413      	add	r3, r2
 800ab2a:	881b      	ldrh	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <cmp_lfn+0xcc>
		return 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	e000      	b.n	800ab36 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800ab34:	2301      	movs	r3, #1
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	0800d828 	.word	0x0800d828

0800ab44 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b089      	sub	sp, #36	; 0x24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4611      	mov	r1, r2
 800ab50:	461a      	mov	r2, r3
 800ab52:	460b      	mov	r3, r1
 800ab54:	71fb      	strb	r3, [r7, #7]
 800ab56:	4613      	mov	r3, r2
 800ab58:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	330d      	adds	r3, #13
 800ab5e:	79ba      	ldrb	r2, [r7, #6]
 800ab60:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	330b      	adds	r3, #11
 800ab66:	220f      	movs	r2, #15
 800ab68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	330c      	adds	r3, #12
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	331a      	adds	r3, #26
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	331b      	adds	r3, #27
 800ab7e:	2200      	movs	r2, #0
 800ab80:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800ab82:	79fb      	ldrb	r3, [r7, #7]
 800ab84:	1e5a      	subs	r2, r3, #1
 800ab86:	4613      	mov	r3, r2
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	82fb      	strh	r3, [r7, #22]
 800ab96:	2300      	movs	r3, #0
 800ab98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800ab9a:	8afb      	ldrh	r3, [r7, #22]
 800ab9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d007      	beq.n	800abb4 <fit_lfn+0x70>
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	61fa      	str	r2, [r7, #28]
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800abb4:	4a1c      	ldr	r2, [pc, #112]	; (800ac28 <fit_lfn+0xe4>)
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	4413      	add	r3, r2
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	4413      	add	r3, r2
 800abc2:	8afa      	ldrh	r2, [r7, #22]
 800abc4:	b2d2      	uxtb	r2, r2
 800abc6:	701a      	strb	r2, [r3, #0]
 800abc8:	8afb      	ldrh	r3, [r7, #22]
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	b299      	uxth	r1, r3
 800abce:	4a16      	ldr	r2, [pc, #88]	; (800ac28 <fit_lfn+0xe4>)
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	4413      	add	r3, r2
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	3301      	adds	r3, #1
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	4413      	add	r3, r2
 800abdc:	b2ca      	uxtb	r2, r1
 800abde:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800abe0:	8afb      	ldrh	r3, [r7, #22]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <fit_lfn+0xa8>
 800abe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	3301      	adds	r3, #1
 800abf0:	61bb      	str	r3, [r7, #24]
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	2b0c      	cmp	r3, #12
 800abf6:	d9d0      	bls.n	800ab9a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800abf8:	8afb      	ldrh	r3, [r7, #22]
 800abfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d006      	beq.n	800ac10 <fit_lfn+0xcc>
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4413      	add	r3, r2
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d103      	bne.n	800ac18 <fit_lfn+0xd4>
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac16:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	79fa      	ldrb	r2, [r7, #7]
 800ac1c:	701a      	strb	r2, [r3, #0]
}
 800ac1e:	bf00      	nop
 800ac20:	3724      	adds	r7, #36	; 0x24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bc80      	pop	{r7}
 800ac26:	4770      	bx	lr
 800ac28:	0800d828 	.word	0x0800d828

0800ac2c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08c      	sub	sp, #48	; 0x30
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ac3a:	220b      	movs	r2, #11
 800ac3c:	68b9      	ldr	r1, [r7, #8]
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7fe fe18 	bl	8009874 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b05      	cmp	r3, #5
 800ac48:	d92b      	bls.n	800aca2 <gen_numname+0x76>
		sr = seq;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ac4e:	e022      	b.n	800ac96 <gen_numname+0x6a>
			wc = *lfn++;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	1c9a      	adds	r2, r3, #2
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac5e:	e017      	b.n	800ac90 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	005a      	lsls	r2, r3, #1
 800ac64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	4413      	add	r3, r2
 800ac6c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ac6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <gen_numname+0x5e>
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ac84:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ac88:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	2b0f      	cmp	r3, #15
 800ac94:	d9e4      	bls.n	800ac60 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1d8      	bne.n	800ac50 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800aca2:	2307      	movs	r3, #7
 800aca4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	f003 030f 	and.w	r3, r3, #15
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	3330      	adds	r3, #48	; 0x30
 800acb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800acb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acba:	2b39      	cmp	r3, #57	; 0x39
 800acbc:	d904      	bls.n	800acc8 <gen_numname+0x9c>
 800acbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acc2:	3307      	adds	r3, #7
 800acc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	1e5a      	subs	r2, r3, #1
 800accc:	62ba      	str	r2, [r7, #40]	; 0x28
 800acce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800acd2:	4413      	add	r3, r2
 800acd4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800acd8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	091b      	lsrs	r3, r3, #4
 800ace0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1de      	bne.n	800aca6 <gen_numname+0x7a>
	ns[i] = '~';
 800ace8:	f107 0214 	add.w	r2, r7, #20
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	4413      	add	r3, r2
 800acf0:	227e      	movs	r2, #126	; 0x7e
 800acf2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800acf4:	2300      	movs	r3, #0
 800acf6:	627b      	str	r3, [r7, #36]	; 0x24
 800acf8:	e002      	b.n	800ad00 <gen_numname+0xd4>
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	3301      	adds	r3, #1
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ad00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d205      	bcs.n	800ad14 <gen_numname+0xe8>
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0c:	4413      	add	r3, r2
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	d1f2      	bne.n	800acfa <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	2b07      	cmp	r3, #7
 800ad18:	d808      	bhi.n	800ad2c <gen_numname+0x100>
 800ad1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1c:	1c5a      	adds	r2, r3, #1
 800ad1e:	62ba      	str	r2, [r7, #40]	; 0x28
 800ad20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ad24:	4413      	add	r3, r2
 800ad26:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ad2a:	e000      	b.n	800ad2e <gen_numname+0x102>
 800ad2c:	2120      	movs	r1, #32
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	627a      	str	r2, [r7, #36]	; 0x24
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4413      	add	r3, r2
 800ad38:	460a      	mov	r2, r1
 800ad3a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	2b07      	cmp	r3, #7
 800ad40:	d9e8      	bls.n	800ad14 <gen_numname+0xe8>
}
 800ad42:	bf00      	nop
 800ad44:	bf00      	nop
 800ad46:	3730      	adds	r7, #48	; 0x30
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ad58:	230b      	movs	r3, #11
 800ad5a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	0852      	lsrs	r2, r2, #1
 800ad62:	01db      	lsls	r3, r3, #7
 800ad64:	4313      	orrs	r3, r2
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	1c59      	adds	r1, r3, #1
 800ad6c:	6079      	str	r1, [r7, #4]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	4413      	add	r3, r2
 800ad72:	73fb      	strb	r3, [r7, #15]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	3b01      	subs	r3, #1
 800ad78:	60bb      	str	r3, [r7, #8]
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1ed      	bne.n	800ad5c <sum_sfn+0x10>
	return sum;
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bc80      	pop	{r7}
 800ad8a:	4770      	bx	lr

0800ad8c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad94:	2100      	movs	r1, #0
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fc33 	bl	800a602 <dir_sdi>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ada0:	7dfb      	ldrb	r3, [r7, #23]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <dir_find+0x1e>
 800ada6:	7dfb      	ldrb	r3, [r7, #23]
 800ada8:	e0a0      	b.n	800aeec <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800adaa:	23ff      	movs	r3, #255	; 0xff
 800adac:	753b      	strb	r3, [r7, #20]
 800adae:	7d3b      	ldrb	r3, [r7, #20]
 800adb0:	757b      	strb	r3, [r7, #21]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adb8:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7fe ffc2 	bl	8009d4e <move_window>
 800adca:	4603      	mov	r3, r0
 800adcc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f040 8085 	bne.w	800aee0 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ade2:	7dbb      	ldrb	r3, [r7, #22]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <dir_find+0x62>
 800ade8:	2304      	movs	r3, #4
 800adea:	75fb      	strb	r3, [r7, #23]
 800adec:	e07d      	b.n	800aeea <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	330b      	adds	r3, #11
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adf8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800adfa:	7dbb      	ldrb	r3, [r7, #22]
 800adfc:	2be5      	cmp	r3, #229	; 0xe5
 800adfe:	d007      	beq.n	800ae10 <dir_find+0x84>
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	f003 0308 	and.w	r3, r3, #8
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d009      	beq.n	800ae1e <dir_find+0x92>
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	2b0f      	cmp	r3, #15
 800ae0e:	d006      	beq.n	800ae1e <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ae10:	23ff      	movs	r3, #255	; 0xff
 800ae12:	757b      	strb	r3, [r7, #21]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae1a:	849a      	strh	r2, [r3, #36]	; 0x24
 800ae1c:	e055      	b.n	800aeca <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	2b0f      	cmp	r3, #15
 800ae22:	d12f      	bne.n	800ae84 <dir_find+0xf8>
				if (dp->lfn) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d04e      	beq.n	800aeca <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae2c:	7dbb      	ldrb	r3, [r7, #22]
 800ae2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00c      	beq.n	800ae50 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	7b5b      	ldrb	r3, [r3, #13]
 800ae3a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ae3c:	7dbb      	ldrb	r3, [r7, #22]
 800ae3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae42:	75bb      	strb	r3, [r7, #22]
 800ae44:	7dbb      	ldrb	r3, [r7, #22]
 800ae46:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	88da      	ldrh	r2, [r3, #6]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ae50:	7dba      	ldrb	r2, [r7, #22]
 800ae52:	7d7b      	ldrb	r3, [r7, #21]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d112      	bne.n	800ae7e <dir_find+0xf2>
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	330d      	adds	r3, #13
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	7d3a      	ldrb	r2, [r7, #20]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d10c      	bne.n	800ae7e <dir_find+0xf2>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	6939      	ldr	r1, [r7, #16]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff fdfc 	bl	800aa68 <cmp_lfn>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <dir_find+0xf2>
 800ae76:	7d7b      	ldrb	r3, [r7, #21]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	e000      	b.n	800ae80 <dir_find+0xf4>
 800ae7e:	23ff      	movs	r3, #255	; 0xff
 800ae80:	757b      	strb	r3, [r7, #21]
 800ae82:	e022      	b.n	800aeca <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ae84:	7d7b      	ldrb	r3, [r7, #21]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d107      	bne.n	800ae9a <dir_find+0x10e>
 800ae8a:	6938      	ldr	r0, [r7, #16]
 800ae8c:	f7ff ff5e 	bl	800ad4c <sum_sfn>
 800ae90:	4603      	mov	r3, r0
 800ae92:	461a      	mov	r2, r3
 800ae94:	7d3b      	ldrb	r3, [r7, #20]
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d024      	beq.n	800aee4 <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	330b      	adds	r3, #11
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	f003 0301 	and.w	r3, r3, #1
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d109      	bne.n	800aebe <dir_find+0x132>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	220b      	movs	r2, #11
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6938      	ldr	r0, [r7, #16]
 800aeb4:	f7fe fd16 	bl	80098e4 <mem_cmp>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d014      	beq.n	800aee8 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800aebe:	23ff      	movs	r3, #255	; 0xff
 800aec0:	757b      	strb	r3, [r7, #21]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aec8:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800aeca:	2100      	movs	r1, #0
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff fc37 	bl	800a740 <dir_next>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f43f af6e 	beq.w	800adba <dir_find+0x2e>
 800aede:	e004      	b.n	800aeea <dir_find+0x15e>
		if (res != FR_OK) break;
 800aee0:	bf00      	nop
 800aee2:	e002      	b.n	800aeea <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800aee4:	bf00      	nop
 800aee6:	e000      	b.n	800aeea <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800aee8:	bf00      	nop

	return res;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08c      	sub	sp, #48	; 0x30
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	623b      	str	r3, [r7, #32]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800af08:	f107 030c 	add.w	r3, r7, #12
 800af0c:	220c      	movs	r2, #12
 800af0e:	6a39      	ldr	r1, [r7, #32]
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fcaf 	bl	8009874 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d035      	beq.n	800af8c <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	330b      	adds	r3, #11
 800af24:	2200      	movs	r2, #0
 800af26:	701a      	strb	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 800af2e:	2301      	movs	r3, #1
 800af30:	62bb      	str	r3, [r7, #40]	; 0x28
 800af32:	e013      	b.n	800af5c <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800af34:	f107 010c 	add.w	r1, r7, #12
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	6a38      	ldr	r0, [r7, #32]
 800af3e:	f7ff fe75 	bl	800ac2c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff ff22 	bl	800ad8c <dir_find>
 800af48:	4603      	mov	r3, r0
 800af4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800af4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	3301      	adds	r3, #1
 800af5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	2b63      	cmp	r3, #99	; 0x63
 800af60:	d9e8      	bls.n	800af34 <dir_register+0x40>
 800af62:	e000      	b.n	800af66 <dir_register+0x72>
			if (res != FR_OK) break;
 800af64:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	2b64      	cmp	r3, #100	; 0x64
 800af6a:	d101      	bne.n	800af70 <dir_register+0x7c>
 800af6c:	2307      	movs	r3, #7
 800af6e:	e0b5      	b.n	800b0dc <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800af70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af74:	2b04      	cmp	r3, #4
 800af76:	d002      	beq.n	800af7e <dir_register+0x8a>
 800af78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af7c:	e0ae      	b.n	800b0dc <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	330b      	adds	r3, #11
 800af82:	7dfa      	ldrb	r2, [r7, #23]
 800af84:	701a      	strb	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	69fa      	ldr	r2, [r7, #28]
 800af8a:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800af8c:	7dfb      	ldrb	r3, [r7, #23]
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d014      	beq.n	800afc0 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 800af96:	2300      	movs	r3, #0
 800af98:	62bb      	str	r3, [r7, #40]	; 0x28
 800af9a:	e002      	b.n	800afa2 <dir_register+0xae>
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	3301      	adds	r3, #1
 800afa0:	62bb      	str	r3, [r7, #40]	; 0x28
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	005b      	lsls	r3, r3, #1
 800afa6:	69fa      	ldr	r2, [r7, #28]
 800afa8:	4413      	add	r3, r2
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1f5      	bne.n	800af9c <dir_register+0xa8>
		nent = (n + 25) / 13;
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	3319      	adds	r3, #25
 800afb4:	4a4b      	ldr	r2, [pc, #300]	; (800b0e4 <dir_register+0x1f0>)
 800afb6:	fba2 2303 	umull	r2, r3, r2, r3
 800afba:	089b      	lsrs	r3, r3, #2
 800afbc:	627b      	str	r3, [r7, #36]	; 0x24
 800afbe:	e001      	b.n	800afc4 <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800afc0:	2301      	movs	r3, #1
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800afc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff fcb4 	bl	800a934 <dir_alloc>
 800afcc:	4603      	mov	r3, r0
 800afce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800afd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d14c      	bne.n	800b074 <dir_register+0x180>
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	3b01      	subs	r3, #1
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d046      	beq.n	800b074 <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	88db      	ldrh	r3, [r3, #6]
 800afea:	461a      	mov	r2, r3
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fb05 	bl	800a602 <dir_sdi>
 800aff8:	4603      	mov	r3, r0
 800affa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800affe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b002:	2b00      	cmp	r3, #0
 800b004:	d136      	bne.n	800b074 <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fe9e 	bl	800ad4c <sum_sfn>
 800b010:	4603      	mov	r3, r0
 800b012:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	4619      	mov	r1, r3
 800b01e:	4610      	mov	r0, r2
 800b020:	f7fe fe95 	bl	8009d4e <move_window>
 800b024:	4603      	mov	r3, r0
 800b026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b02a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d11f      	bne.n	800b072 <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a18      	ldr	r0, [r3, #32]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6959      	ldr	r1, [r3, #20]
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	b2da      	uxtb	r2, r3
 800b03e:	7efb      	ldrb	r3, [r7, #27]
 800b040:	f7ff fd80 	bl	800ab44 <fit_lfn>
				dp->fs->wflag = 1;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 800b04e:	2100      	movs	r1, #0
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff fb75 	bl	800a740 <dir_next>
 800b056:	4603      	mov	r3, r0
 800b058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b05c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b060:	2b00      	cmp	r3, #0
 800b062:	d107      	bne.n	800b074 <dir_register+0x180>
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	3b01      	subs	r3, #1
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1d1      	bne.n	800b014 <dir_register+0x120>
 800b070:	e000      	b.n	800b074 <dir_register+0x180>
				if (res != FR_OK) break;
 800b072:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800b074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d12d      	bne.n	800b0d8 <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	4619      	mov	r1, r3
 800b086:	4610      	mov	r0, r2
 800b088:	f7fe fe61 	bl	8009d4e <move_window>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b096:	2b00      	cmp	r3, #0
 800b098:	d11e      	bne.n	800b0d8 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	2220      	movs	r2, #32
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe fc04 	bl	80098b0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6958      	ldr	r0, [r3, #20]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	220b      	movs	r2, #11
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	f7fe fbde 	bl	8009874 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	330b      	adds	r3, #11
 800b0be:	781a      	ldrb	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	f002 0218 	and.w	r2, r2, #24
 800b0ca:	b2d2      	uxtb	r2, r2
 800b0cc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800b0d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3730      	adds	r7, #48	; 0x30
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	4ec4ec4f 	.word	0x4ec4ec4f

0800b0e8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08a      	sub	sp, #40	; 0x28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	613b      	str	r3, [r7, #16]
 800b0f8:	e002      	b.n	800b100 <create_name+0x18>
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	613b      	str	r3, [r7, #16]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b2f      	cmp	r3, #47	; 0x2f
 800b106:	d0f8      	beq.n	800b0fa <create_name+0x12>
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b5c      	cmp	r3, #92	; 0x5c
 800b10e:	d0f4      	beq.n	800b0fa <create_name+0x12>
	lfn = dp->lfn;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	61ba      	str	r2, [r7, #24]
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	4413      	add	r3, r2
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800b12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b12e:	2b1f      	cmp	r3, #31
 800b130:	d92f      	bls.n	800b192 <create_name+0xaa>
 800b132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b134:	2b2f      	cmp	r3, #47	; 0x2f
 800b136:	d02c      	beq.n	800b192 <create_name+0xaa>
 800b138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b13a:	2b5c      	cmp	r3, #92	; 0x5c
 800b13c:	d029      	beq.n	800b192 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2bfe      	cmp	r3, #254	; 0xfe
 800b142:	d901      	bls.n	800b148 <create_name+0x60>
			return FR_INVALID_NAME;
 800b144:	2306      	movs	r3, #6
 800b146:	e176      	b.n	800b436 <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b14e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b150:	2101      	movs	r1, #1
 800b152:	4618      	mov	r0, r3
 800b154:	f001 fd6a 	bl	800cc2c <ff_convert>
 800b158:	4603      	mov	r3, r0
 800b15a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b15c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <create_name+0x7e>
 800b162:	2306      	movs	r3, #6
 800b164:	e167      	b.n	800b436 <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800b166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b168:	2b7f      	cmp	r3, #127	; 0x7f
 800b16a:	d809      	bhi.n	800b180 <create_name+0x98>
 800b16c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b16e:	4619      	mov	r1, r3
 800b170:	48b3      	ldr	r0, [pc, #716]	; (800b440 <create_name+0x358>)
 800b172:	f7fe fbdd 	bl	8009930 <chk_chr>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <create_name+0x98>
			return FR_INVALID_NAME;
 800b17c:	2306      	movs	r3, #6
 800b17e:	e15a      	b.n	800b436 <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	617a      	str	r2, [r7, #20]
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	4413      	add	r3, r2
 800b18c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b18e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b190:	e7c5      	b.n	800b11e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	441a      	add	r2, r3
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b19c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b19e:	2b1f      	cmp	r3, #31
 800b1a0:	d801      	bhi.n	800b1a6 <create_name+0xbe>
 800b1a2:	2304      	movs	r3, #4
 800b1a4:	e000      	b.n	800b1a8 <create_name+0xc0>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b1ac:	e011      	b.n	800b1d2 <create_name+0xea>
		w = lfn[di - 1];
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b1c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c2:	2b20      	cmp	r3, #32
 800b1c4:	d002      	beq.n	800b1cc <create_name+0xe4>
 800b1c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ca:	d106      	bne.n	800b1da <create_name+0xf2>
		di--;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1ea      	bne.n	800b1ae <create_name+0xc6>
 800b1d8:	e000      	b.n	800b1dc <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 800b1da:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <create_name+0xfe>
 800b1e2:	2306      	movs	r3, #6
 800b1e4:	e127      	b.n	800b436 <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	005b      	lsls	r3, r3, #1
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	220b      	movs	r2, #11
 800b1f8:	2120      	movs	r1, #32
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe fb58 	bl	80098b0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b200:	2300      	movs	r3, #0
 800b202:	61bb      	str	r3, [r7, #24]
 800b204:	e002      	b.n	800b20c <create_name+0x124>
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	3301      	adds	r3, #1
 800b20a:	61bb      	str	r3, [r7, #24]
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	4413      	add	r3, r2
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	2b20      	cmp	r3, #32
 800b218:	d0f5      	beq.n	800b206 <create_name+0x11e>
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	4413      	add	r3, r2
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	2b2e      	cmp	r3, #46	; 0x2e
 800b226:	d0ee      	beq.n	800b206 <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d009      	beq.n	800b242 <create_name+0x15a>
 800b22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b232:	f043 0303 	orr.w	r3, r3, #3
 800b236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b23a:	e002      	b.n	800b242 <create_name+0x15a>
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	3b01      	subs	r3, #1
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d009      	beq.n	800b25c <create_name+0x174>
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b24e:	3b01      	subs	r3, #1
 800b250:	005b      	lsls	r3, r3, #1
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	4413      	add	r3, r2
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	2b2e      	cmp	r3, #46	; 0x2e
 800b25a:	d1ef      	bne.n	800b23c <create_name+0x154>

	b = i = 0; ni = 8;
 800b25c:	2300      	movs	r3, #0
 800b25e:	623b      	str	r3, [r7, #32]
 800b260:	2300      	movs	r3, #0
 800b262:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b266:	2308      	movs	r3, #8
 800b268:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	61ba      	str	r2, [r7, #24]
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	4413      	add	r3, r2
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b27a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 808f 	beq.w	800b3a0 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b284:	2b20      	cmp	r3, #32
 800b286:	d006      	beq.n	800b296 <create_name+0x1ae>
 800b288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b28a:	2b2e      	cmp	r3, #46	; 0x2e
 800b28c:	d10a      	bne.n	800b2a4 <create_name+0x1bc>
 800b28e:	69ba      	ldr	r2, [r7, #24]
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	429a      	cmp	r2, r3
 800b294:	d006      	beq.n	800b2a4 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 800b296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b29a:	f043 0303 	orr.w	r3, r3, #3
 800b29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2a2:	e07c      	b.n	800b39e <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b2a4:	6a3a      	ldr	r2, [r7, #32]
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d203      	bcs.n	800b2b4 <create_name+0x1cc>
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d123      	bne.n	800b2fc <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	2b0b      	cmp	r3, #11
 800b2b8:	d106      	bne.n	800b2c8 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 800b2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2be:	f043 0303 	orr.w	r3, r3, #3
 800b2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2c6:	e06e      	b.n	800b3a6 <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d005      	beq.n	800b2dc <create_name+0x1f4>
 800b2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2d4:	f043 0303 	orr.w	r3, r3, #3
 800b2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d85f      	bhi.n	800b3a4 <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	61bb      	str	r3, [r7, #24]
 800b2e8:	2308      	movs	r3, #8
 800b2ea:	623b      	str	r3, [r7, #32]
 800b2ec:	230b      	movs	r3, #11
 800b2ee:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b2f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2fa:	e050      	b.n	800b39e <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b2fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2fe:	2b7f      	cmp	r3, #127	; 0x7f
 800b300:	d914      	bls.n	800b32c <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b304:	2100      	movs	r1, #0
 800b306:	4618      	mov	r0, r3
 800b308:	f001 fc90 	bl	800cc2c <ff_convert>
 800b30c:	4603      	mov	r3, r0
 800b30e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <create_name+0x238>
 800b316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b318:	3b80      	subs	r3, #128	; 0x80
 800b31a:	4a4a      	ldr	r2, [pc, #296]	; (800b444 <create_name+0x35c>)
 800b31c:	5cd3      	ldrb	r3, [r2, r3]
 800b31e:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b324:	f043 0302 	orr.w	r3, r3, #2
 800b328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b32c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d007      	beq.n	800b342 <create_name+0x25a>
 800b332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b334:	4619      	mov	r1, r3
 800b336:	4844      	ldr	r0, [pc, #272]	; (800b448 <create_name+0x360>)
 800b338:	f7fe fafa 	bl	8009930 <chk_chr>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d008      	beq.n	800b354 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b342:	235f      	movs	r3, #95	; 0x5f
 800b344:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b34a:	f043 0303 	orr.w	r3, r3, #3
 800b34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b352:	e01b      	b.n	800b38c <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b356:	2b40      	cmp	r3, #64	; 0x40
 800b358:	d909      	bls.n	800b36e <create_name+0x286>
 800b35a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b35c:	2b5a      	cmp	r3, #90	; 0x5a
 800b35e:	d806      	bhi.n	800b36e <create_name+0x286>
					b |= 2;
 800b360:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b364:	f043 0302 	orr.w	r3, r3, #2
 800b368:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b36c:	e00e      	b.n	800b38c <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b370:	2b60      	cmp	r3, #96	; 0x60
 800b372:	d90b      	bls.n	800b38c <create_name+0x2a4>
 800b374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b376:	2b7a      	cmp	r3, #122	; 0x7a
 800b378:	d808      	bhi.n	800b38c <create_name+0x2a4>
						b |= 1; w -= 0x20;
 800b37a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b388:	3b20      	subs	r3, #32
 800b38a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	699a      	ldr	r2, [r3, #24]
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	1c59      	adds	r1, r3, #1
 800b394:	6239      	str	r1, [r7, #32]
 800b396:	4413      	add	r3, r2
 800b398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b39a:	b2d2      	uxtb	r2, r2
 800b39c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b39e:	e764      	b.n	800b26a <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 800b3a0:	bf00      	nop
 800b3a2:	e000      	b.n	800b3a6 <create_name+0x2be>
			if (si > di) break;			/* No extension */
 800b3a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2be5      	cmp	r3, #229	; 0xe5
 800b3ae:	d103      	bne.n	800b3b8 <create_name+0x2d0>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	2205      	movs	r2, #5
 800b3b6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2b08      	cmp	r3, #8
 800b3bc:	d104      	bne.n	800b3c8 <create_name+0x2e0>
 800b3be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b3c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3cc:	f003 030c 	and.w	r3, r3, #12
 800b3d0:	2b0c      	cmp	r3, #12
 800b3d2:	d005      	beq.n	800b3e0 <create_name+0x2f8>
 800b3d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	2b03      	cmp	r3, #3
 800b3de:	d105      	bne.n	800b3ec <create_name+0x304>
		cf |= NS_LFN;
 800b3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3e4:	f043 0302 	orr.w	r3, r3, #2
 800b3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f0:	f003 0302 	and.w	r3, r3, #2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d117      	bne.n	800b428 <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b3f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3fc:	f003 0303 	and.w	r3, r3, #3
 800b400:	2b01      	cmp	r3, #1
 800b402:	d105      	bne.n	800b410 <create_name+0x328>
 800b404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b408:	f043 0310 	orr.w	r3, r3, #16
 800b40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b414:	f003 030c 	and.w	r3, r3, #12
 800b418:	2b04      	cmp	r3, #4
 800b41a:	d105      	bne.n	800b428 <create_name+0x340>
 800b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b420:	f043 0308 	orr.w	r3, r3, #8
 800b424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	330b      	adds	r3, #11
 800b42e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b432:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b434:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b436:	4618      	mov	r0, r3
 800b438:	3728      	adds	r7, #40	; 0x28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	0800d748 	.word	0x0800d748
 800b444:	0800d7a8 	.word	0x0800d7a8
 800b448:	0800d754 	.word	0x0800d754

0800b44c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b2f      	cmp	r3, #47	; 0x2f
 800b45c:	d003      	beq.n	800b466 <follow_path+0x1a>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	2b5c      	cmp	r3, #92	; 0x5c
 800b464:	d102      	bne.n	800b46c <follow_path+0x20>
		path++;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	3301      	adds	r3, #1
 800b46a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b1f      	cmp	r3, #31
 800b478:	d809      	bhi.n	800b48e <follow_path+0x42>
		res = dir_sdi(dp, 0);
 800b47a:	2100      	movs	r1, #0
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff f8c0 	bl	800a602 <dir_sdi>
 800b482:	4603      	mov	r3, r0
 800b484:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	615a      	str	r2, [r3, #20]
 800b48c:	e041      	b.n	800b512 <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b48e:	463b      	mov	r3, r7
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff fe28 	bl	800b0e8 <create_name>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d132      	bne.n	800b508 <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff fc72 	bl	800ad8c <dir_find>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	7adb      	ldrb	r3, [r3, #11]
 800b4b2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00a      	beq.n	800b4d0 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	d125      	bne.n	800b50c <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	f003 0304 	and.w	r3, r3, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d120      	bne.n	800b50c <follow_path+0xc0>
 800b4ca:	2305      	movs	r3, #5
 800b4cc:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b4ce:	e01d      	b.n	800b50c <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
 800b4d2:	f003 0304 	and.w	r3, r3, #4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d11a      	bne.n	800b510 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	330b      	adds	r3, #11
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	f003 0310 	and.w	r3, r3, #16
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 800b4ee:	2305      	movs	r3, #5
 800b4f0:	73fb      	strb	r3, [r7, #15]
 800b4f2:	e00e      	b.n	800b512 <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68b9      	ldr	r1, [r7, #8]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff fa60 	bl	800a9c0 <ld_clust>
 800b500:	4602      	mov	r2, r0
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b506:	e7c2      	b.n	800b48e <follow_path+0x42>
			if (res != FR_OK) break;
 800b508:	bf00      	nop
 800b50a:	e002      	b.n	800b512 <follow_path+0xc6>
				break;
 800b50c:	bf00      	nop
 800b50e:	e000      	b.n	800b512 <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b510:	bf00      	nop
		}
	}

	return res;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b524:	f04f 33ff 	mov.w	r3, #4294967295
 800b528:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d031      	beq.n	800b596 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	617b      	str	r3, [r7, #20]
 800b538:	e002      	b.n	800b540 <get_ldnumber+0x24>
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	3301      	adds	r3, #1
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b1f      	cmp	r3, #31
 800b546:	d903      	bls.n	800b550 <get_ldnumber+0x34>
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2b3a      	cmp	r3, #58	; 0x3a
 800b54e:	d1f4      	bne.n	800b53a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	2b3a      	cmp	r3, #58	; 0x3a
 800b556:	d11c      	bne.n	800b592 <get_ldnumber+0x76>
			tp = *path;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	60fa      	str	r2, [r7, #12]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	3b30      	subs	r3, #48	; 0x30
 800b568:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b09      	cmp	r3, #9
 800b56e:	d80e      	bhi.n	800b58e <get_ldnumber+0x72>
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	429a      	cmp	r2, r3
 800b576:	d10a      	bne.n	800b58e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d107      	bne.n	800b58e <get_ldnumber+0x72>
					vol = (int)i;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	3301      	adds	r3, #1
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	e002      	b.n	800b598 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b592:	2300      	movs	r3, #0
 800b594:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b596:	693b      	ldr	r3, [r7, #16]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	371c      	adds	r7, #28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bc80      	pop	{r7}
 800b5a0:	4770      	bx	lr
	...

0800b5a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5bc:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b5c0:	6839      	ldr	r1, [r7, #0]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7fe fbc3 	bl	8009d4e <move_window>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <check_fs+0x2e>
		return 3;
 800b5ce:	2303      	movs	r3, #3
 800b5d0:	e04a      	b.n	800b668 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5d8:	3301      	adds	r3, #1
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	021b      	lsls	r3, r3, #8
 800b5de:	b21a      	sxth	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b5e6:	b21b      	sxth	r3, r3
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	b21b      	sxth	r3, r3
 800b5ec:	4a20      	ldr	r2, [pc, #128]	; (800b670 <check_fs+0xcc>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d001      	beq.n	800b5f6 <check_fs+0x52>
		return 2;
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	e038      	b.n	800b668 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3336      	adds	r3, #54	; 0x36
 800b5fa:	3303      	adds	r3, #3
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	061a      	lsls	r2, r3, #24
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3336      	adds	r3, #54	; 0x36
 800b604:	3302      	adds	r3, #2
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	041b      	lsls	r3, r3, #16
 800b60a:	4313      	orrs	r3, r2
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	3236      	adds	r2, #54	; 0x36
 800b610:	3201      	adds	r2, #1
 800b612:	7812      	ldrb	r2, [r2, #0]
 800b614:	0212      	lsls	r2, r2, #8
 800b616:	4313      	orrs	r3, r2
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b61e:	4313      	orrs	r3, r2
 800b620:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b624:	4a13      	ldr	r2, [pc, #76]	; (800b674 <check_fs+0xd0>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d101      	bne.n	800b62e <check_fs+0x8a>
		return 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	e01c      	b.n	800b668 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3352      	adds	r3, #82	; 0x52
 800b632:	3303      	adds	r3, #3
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	061a      	lsls	r2, r3, #24
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3352      	adds	r3, #82	; 0x52
 800b63c:	3302      	adds	r3, #2
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	041b      	lsls	r3, r3, #16
 800b642:	4313      	orrs	r3, r2
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	3252      	adds	r2, #82	; 0x52
 800b648:	3201      	adds	r2, #1
 800b64a:	7812      	ldrb	r2, [r2, #0]
 800b64c:	0212      	lsls	r2, r2, #8
 800b64e:	4313      	orrs	r3, r2
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b656:	4313      	orrs	r3, r2
 800b658:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b65c:	4a05      	ldr	r2, [pc, #20]	; (800b674 <check_fs+0xd0>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d101      	bne.n	800b666 <check_fs+0xc2>
		return 0;
 800b662:	2300      	movs	r3, #0
 800b664:	e000      	b.n	800b668 <check_fs+0xc4>

	return 1;
 800b666:	2301      	movs	r3, #1
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	ffffaa55 	.word	0xffffaa55
 800b674:	00544146 	.word	0x00544146

0800b678 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b096      	sub	sp, #88	; 0x58
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	4613      	mov	r3, r2
 800b684:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b68c:	68b8      	ldr	r0, [r7, #8]
 800b68e:	f7ff ff45 	bl	800b51c <get_ldnumber>
 800b692:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b696:	2b00      	cmp	r3, #0
 800b698:	da01      	bge.n	800b69e <find_volume+0x26>
 800b69a:	230b      	movs	r3, #11
 800b69c:	e2de      	b.n	800bc5c <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b69e:	4ab1      	ldr	r2, [pc, #708]	; (800b964 <find_volume+0x2ec>)
 800b6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <find_volume+0x3a>
 800b6ae:	230c      	movs	r3, #12
 800b6b0:	e2d4      	b.n	800bc5c <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6b6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d01b      	beq.n	800b6fa <find_volume+0x82>
		stat = disk_status(fs->drv);
 800b6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe f835 	bl	8009738 <disk_status>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b6d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10c      	bne.n	800b6fa <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d007      	beq.n	800b6f6 <find_volume+0x7e>
 800b6e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6ea:	f003 0304 	and.w	r3, r3, #4
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800b6f2:	230a      	movs	r3, #10
 800b6f4:	e2b2      	b.n	800bc5c <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e2b0      	b.n	800bc5c <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b704:	b2da      	uxtb	r2, r3
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe f82a 	bl	800976c <disk_initialize>
 800b718:	4603      	mov	r3, r0
 800b71a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b71e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b72a:	2303      	movs	r3, #3
 800b72c:	e296      	b.n	800bc5c <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d007      	beq.n	800b744 <find_volume+0xcc>
 800b734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b738:	f003 0304 	and.w	r3, r3, #4
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b740:	230a      	movs	r3, #10
 800b742:	e28b      	b.n	800bc5c <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800b750:	461a      	mov	r2, r3
 800b752:	2102      	movs	r1, #2
 800b754:	f7fe f870 	bl	8009838 <disk_ioctl>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10b      	bne.n	800b776 <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800b75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b760:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b768:	d305      	bcc.n	800b776 <find_volume+0xfe>
 800b76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b774:	d901      	bls.n	800b77a <find_volume+0x102>
 800b776:	2301      	movs	r3, #1
 800b778:	e270      	b.n	800bc5c <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b77e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b780:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b782:	f7ff ff0f 	bl	800b5a4 <check_fs>
 800b786:	4603      	mov	r3, r0
 800b788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b78c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b790:	2b01      	cmp	r3, #1
 800b792:	d155      	bne.n	800b840 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b794:	2300      	movs	r3, #0
 800b796:	643b      	str	r3, [r7, #64]	; 0x40
 800b798:	e029      	b.n	800b7ee <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b79a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b79e:	011b      	lsls	r3, r3, #4
 800b7a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b7a4:	4413      	add	r3, r2
 800b7a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d012      	beq.n	800b7d8 <find_volume+0x160>
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	330b      	adds	r3, #11
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	061a      	lsls	r2, r3, #24
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	330a      	adds	r3, #10
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	041b      	lsls	r3, r3, #16
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c6:	3209      	adds	r2, #9
 800b7c8:	7812      	ldrb	r2, [r2, #0]
 800b7ca:	0212      	lsls	r2, r2, #8
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d0:	3208      	adds	r2, #8
 800b7d2:	7812      	ldrb	r2, [r2, #0]
 800b7d4:	431a      	orrs	r2, r3
 800b7d6:	e000      	b.n	800b7da <find_volume+0x162>
 800b7d8:	2200      	movs	r2, #0
 800b7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b7e2:	440b      	add	r3, r1
 800b7e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b7e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d9d2      	bls.n	800b79a <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <find_volume+0x18c>
 800b7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b800:	3b01      	subs	r3, #1
 800b802:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b80c:	4413      	add	r3, r2
 800b80e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b812:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b816:	2b00      	cmp	r3, #0
 800b818:	d005      	beq.n	800b826 <find_volume+0x1ae>
 800b81a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b81c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b81e:	f7ff fec1 	bl	800b5a4 <check_fs>
 800b822:	4603      	mov	r3, r0
 800b824:	e000      	b.n	800b828 <find_volume+0x1b0>
 800b826:	2302      	movs	r3, #2
 800b828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b82c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b830:	2b00      	cmp	r3, #0
 800b832:	d005      	beq.n	800b840 <find_volume+0x1c8>
 800b834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b836:	3301      	adds	r3, #1
 800b838:	643b      	str	r3, [r7, #64]	; 0x40
 800b83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d9e1      	bls.n	800b804 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b844:	2b03      	cmp	r3, #3
 800b846:	d101      	bne.n	800b84c <find_volume+0x1d4>
 800b848:	2301      	movs	r3, #1
 800b84a:	e207      	b.n	800bc5c <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b84c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b850:	2b00      	cmp	r3, #0
 800b852:	d001      	beq.n	800b858 <find_volume+0x1e0>
 800b854:	230d      	movs	r3, #13
 800b856:	e201      	b.n	800bc5c <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	7b1b      	ldrb	r3, [r3, #12]
 800b85c:	021b      	lsls	r3, r3, #8
 800b85e:	b21a      	sxth	r2, r3
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	7adb      	ldrb	r3, [r3, #11]
 800b864:	b21b      	sxth	r3, r3
 800b866:	4313      	orrs	r3, r2
 800b868:	b21a      	sxth	r2, r3
 800b86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b870:	b21b      	sxth	r3, r3
 800b872:	429a      	cmp	r2, r3
 800b874:	d001      	beq.n	800b87a <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 800b876:	230d      	movs	r3, #13
 800b878:	e1f0      	b.n	800bc5c <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87c:	7ddb      	ldrb	r3, [r3, #23]
 800b87e:	021b      	lsls	r3, r3, #8
 800b880:	b21a      	sxth	r2, r3
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	7d9b      	ldrb	r3, [r3, #22]
 800b886:	b21b      	sxth	r3, r3
 800b888:	4313      	orrs	r3, r2
 800b88a:	b21b      	sxth	r3, r3
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b892:	2b00      	cmp	r3, #0
 800b894:	d112      	bne.n	800b8bc <find_volume+0x244>
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b89c:	061a      	lsls	r2, r3, #24
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b8a4:	041b      	lsls	r3, r3, #16
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8aa:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b8ae:	0212      	lsls	r2, r2, #8
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8b4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8c0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	7c1a      	ldrb	r2, [r3, #16]
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d006      	beq.n	800b8e6 <find_volume+0x26e>
 800b8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8da:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d001      	beq.n	800b8e6 <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 800b8e2:	230d      	movs	r3, #13
 800b8e4:	e1ba      	b.n	800bc5c <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e8:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f0:	fb02 f303 	mul.w	r3, r2, r3
 800b8f4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f8:	7b5a      	ldrb	r2, [r3, #13]
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <find_volume+0x2a8>
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b910:	461a      	mov	r2, r3
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b918:	3b01      	subs	r3, #1
 800b91a:	4013      	ands	r3, r2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 800b920:	230d      	movs	r3, #13
 800b922:	e19b      	b.n	800bc5c <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	7c9b      	ldrb	r3, [r3, #18]
 800b928:	021b      	lsls	r3, r3, #8
 800b92a:	b21a      	sxth	r2, r3
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	7c5b      	ldrb	r3, [r3, #17]
 800b930:	b21b      	sxth	r3, r3
 800b932:	4313      	orrs	r3, r2
 800b934:	b21b      	sxth	r3, r3
 800b936:	b29a      	uxth	r2, r3
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b940:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800b944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b946:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b94a:	0952      	lsrs	r2, r2, #5
 800b94c:	b292      	uxth	r2, r2
 800b94e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b952:	fb02 f201 	mul.w	r2, r2, r1
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	b29b      	uxth	r3, r3
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d004      	beq.n	800b968 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800b95e:	230d      	movs	r3, #13
 800b960:	e17c      	b.n	800bc5c <find_volume+0x5e4>
 800b962:	bf00      	nop
 800b964:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	7d1b      	ldrb	r3, [r3, #20]
 800b96c:	021b      	lsls	r3, r3, #8
 800b96e:	b21a      	sxth	r2, r3
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	7cdb      	ldrb	r3, [r3, #19]
 800b974:	b21b      	sxth	r3, r3
 800b976:	4313      	orrs	r3, r2
 800b978:	b21b      	sxth	r3, r3
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b97e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b980:	2b00      	cmp	r3, #0
 800b982:	d112      	bne.n	800b9aa <find_volume+0x332>
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b98a:	061a      	lsls	r2, r3, #24
 800b98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b992:	041b      	lsls	r3, r3, #16
 800b994:	4313      	orrs	r3, r2
 800b996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b998:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b99c:	0212      	lsls	r2, r2, #8
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	7bdb      	ldrb	r3, [r3, #15]
 800b9ae:	021b      	lsls	r3, r3, #8
 800b9b0:	b21a      	sxth	r2, r3
 800b9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b4:	7b9b      	ldrb	r3, [r3, #14]
 800b9b6:	b21b      	sxth	r3, r3
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	b21b      	sxth	r3, r3
 800b9bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b9be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <find_volume+0x350>
 800b9c4:	230d      	movs	r3, #13
 800b9c6:	e149      	b.n	800bc5c <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b9c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9cc:	4413      	add	r3, r2
 800b9ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9d0:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 800b9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9d6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b9da:	0952      	lsrs	r2, r2, #5
 800b9dc:	b292      	uxth	r2, r2
 800b9de:	fbb1 f2f2 	udiv	r2, r1, r2
 800b9e2:	b292      	uxth	r2, r2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b9e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d201      	bcs.n	800b9f4 <find_volume+0x37c>
 800b9f0:	230d      	movs	r3, #13
 800b9f2:	e133      	b.n	800bc5c <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b9f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9fc:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800ba00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba04:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d101      	bne.n	800ba10 <find_volume+0x398>
 800ba0c:	230d      	movs	r3, #13
 800ba0e:	e125      	b.n	800bc5c <find_volume+0x5e4>
	fmt = FS_FAT12;
 800ba10:	2301      	movs	r3, #1
 800ba12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d902      	bls.n	800ba26 <find_volume+0x3ae>
 800ba20:	2302      	movs	r3, #2
 800ba22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d902      	bls.n	800ba36 <find_volume+0x3be>
 800ba30:	2303      	movs	r3, #3
 800ba32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ba36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba38:	1c9a      	adds	r2, r3, #2
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba44:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ba48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba4c:	441a      	add	r2, r3
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 800ba54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba58:	441a      	add	r2, r3
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800ba60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d121      	bne.n	800baac <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <find_volume+0x3fe>
 800ba72:	230d      	movs	r3, #13
 800ba74:	e0f2      	b.n	800bc5c <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba7c:	061a      	lsls	r2, r3, #24
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba80:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ba84:	041b      	lsls	r3, r3, #16
 800ba86:	4313      	orrs	r3, r2
 800ba88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba8a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ba8e:	0212      	lsls	r2, r2, #8
 800ba90:	4313      	orrs	r3, r2
 800ba92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba94:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800baa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	647b      	str	r3, [r7, #68]	; 0x44
 800baaa:	e025      	b.n	800baf8 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800baac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baae:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <find_volume+0x442>
 800bab6:	230d      	movs	r3, #13
 800bab8:	e0d0      	b.n	800bc5c <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac2:	441a      	add	r2, r3
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800baca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d104      	bne.n	800badc <find_volume+0x464>
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800bad8:	005b      	lsls	r3, r3, #1
 800bada:	e00c      	b.n	800baf6 <find_volume+0x47e>
 800badc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bade:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800bae2:	4613      	mov	r3, r2
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	4413      	add	r3, r2
 800bae8:	085a      	lsrs	r2, r3, #1
 800baea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baec:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800baf6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800baf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb00:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bb04:	4619      	mov	r1, r3
 800bb06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb08:	440b      	add	r3, r1
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb0e:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 800bb12:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d201      	bcs.n	800bb1e <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800bb1a:	230d      	movs	r3, #13
 800bb1c:	e09e      	b.n	800bc5c <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	f04f 32ff 	mov.w	r2, #4294967295
 800bb24:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800bb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb30:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	2280      	movs	r2, #128	; 0x80
 800bb38:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800bb3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d177      	bne.n	800bc34 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	b21a      	sxth	r2, r3
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb54:	b21b      	sxth	r3, r3
 800bb56:	4313      	orrs	r3, r2
 800bb58:	b21b      	sxth	r3, r3
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d16a      	bne.n	800bc34 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 800bb5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb60:	3301      	adds	r3, #1
 800bb62:	4619      	mov	r1, r3
 800bb64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb66:	f7fe f8f2 	bl	8009d4e <move_window>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d161      	bne.n	800bc34 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800bb7e:	021b      	lsls	r3, r3, #8
 800bb80:	b21a      	sxth	r2, r3
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bb88:	b21b      	sxth	r3, r3
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	b21b      	sxth	r3, r3
 800bb8e:	4a35      	ldr	r2, [pc, #212]	; (800bc64 <find_volume+0x5ec>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d14f      	bne.n	800bc34 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800bb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb96:	78db      	ldrb	r3, [r3, #3]
 800bb98:	061a      	lsls	r2, r3, #24
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	789b      	ldrb	r3, [r3, #2]
 800bb9e:	041b      	lsls	r3, r3, #16
 800bba0:	4313      	orrs	r3, r2
 800bba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bba4:	7852      	ldrb	r2, [r2, #1]
 800bba6:	0212      	lsls	r2, r2, #8
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbac:	7812      	ldrb	r2, [r2, #0]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	4a2d      	ldr	r2, [pc, #180]	; (800bc68 <find_volume+0x5f0>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d13e      	bne.n	800bc34 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800bbbc:	061a      	lsls	r2, r3, #24
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc0:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800bbc4:	041b      	lsls	r3, r3, #16
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbca:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800bbce:	0212      	lsls	r2, r2, #8
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd4:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	4a24      	ldr	r2, [pc, #144]	; (800bc6c <find_volume+0x5f4>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d129      	bne.n	800bc34 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800bbe6:	061a      	lsls	r2, r3, #24
 800bbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbea:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800bbee:	041b      	lsls	r3, r3, #16
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800bbf8:	0212      	lsls	r2, r2, #8
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbfe:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800bc02:	431a      	orrs	r2, r3
 800bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc06:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800bc10:	061a      	lsls	r2, r3, #24
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800bc18:	041b      	lsls	r3, r3, #16
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc1e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800bc22:	0212      	lsls	r2, r2, #8
 800bc24:	4313      	orrs	r3, r2
 800bc26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc28:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800bc2c:	431a      	orrs	r2, r3
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc30:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800bc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc36:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc3a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 800bc3e:	4b0c      	ldr	r3, [pc, #48]	; (800bc70 <find_volume+0x5f8>)
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	3301      	adds	r3, #1
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	4b0a      	ldr	r3, [pc, #40]	; (800bc70 <find_volume+0x5f8>)
 800bc48:	801a      	strh	r2, [r3, #0]
 800bc4a:	4b09      	ldr	r3, [pc, #36]	; (800bc70 <find_volume+0x5f8>)
 800bc4c:	881a      	ldrh	r2, [r3, #0]
 800bc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc50:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc56:	f7fe f807 	bl	8009c68 <clear_lock>
#endif

	return FR_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3758      	adds	r7, #88	; 0x58
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	ffffaa55 	.word	0xffffaa55
 800bc68:	41615252 	.word	0x41615252
 800bc6c:	61417272 	.word	0x61417272
 800bc70:	200000b0 	.word	0x200000b0

0800bc74 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d01d      	beq.n	800bcc2 <validate+0x4e>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d019      	beq.n	800bcc2 <validate+0x4e>
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d013      	beq.n	800bcc2 <validate+0x4e>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	889b      	ldrh	r3, [r3, #4]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d10b      	bne.n	800bcc2 <validate+0x4e>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fd fd40 	bl	8009738 <disk_status>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f003 0301 	and.w	r3, r3, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <validate+0x52>
		return FR_INVALID_OBJECT;
 800bcc2:	2309      	movs	r3, #9
 800bcc4:	e000      	b.n	800bcc8 <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800bce2:	f107 0310 	add.w	r3, r7, #16
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7ff fc18 	bl	800b51c <get_ldnumber>
 800bcec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	da01      	bge.n	800bcf8 <f_mount+0x28>
 800bcf4:	230b      	movs	r3, #11
 800bcf6:	e02d      	b.n	800bd54 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bcf8:	4a18      	ldr	r2, [pc, #96]	; (800bd5c <f_mount+0x8c>)
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d006      	beq.n	800bd16 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800bd08:	69b8      	ldr	r0, [r7, #24]
 800bd0a:	f7fd ffad 	bl	8009c68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d003      	beq.n	800bd24 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	490d      	ldr	r1, [pc, #52]	; (800bd5c <f_mount+0x8c>)
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <f_mount+0x6a>
 800bd34:	79fb      	ldrb	r3, [r7, #7]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d001      	beq.n	800bd3e <f_mount+0x6e>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e00a      	b.n	800bd54 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800bd3e:	f107 0108 	add.w	r1, r7, #8
 800bd42:	f107 030c 	add.w	r3, r7, #12
 800bd46:	2200      	movs	r2, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff fc95 	bl	800b678 <find_volume>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3720      	adds	r7, #32
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	200000ac 	.word	0x200000ac

0800bd60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b096      	sub	sp, #88	; 0x58
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <f_open+0x18>
 800bd74:	2309      	movs	r3, #9
 800bd76:	e16d      	b.n	800c054 <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	f003 031f 	and.w	r3, r3, #31
 800bd84:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800bd86:	79fb      	ldrb	r3, [r7, #7]
 800bd88:	f023 0301 	bic.w	r3, r3, #1
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	f107 0108 	add.w	r1, r7, #8
 800bd92:	f107 0320 	add.w	r3, r7, #32
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7ff fc6e 	bl	800b678 <find_volume>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800bda2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f040 8152 	bne.w	800c050 <f_open+0x2f0>
		INIT_BUF(dj);
 800bdac:	f107 0314 	add.w	r3, r7, #20
 800bdb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdb2:	4baa      	ldr	r3, [pc, #680]	; (800c05c <f_open+0x2fc>)
 800bdb4:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	f107 0320 	add.w	r3, r7, #32
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff fb44 	bl	800b44c <follow_path>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 800bdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdcc:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bdce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d118      	bne.n	800be08 <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800bdd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d103      	bne.n	800bde4 <f_open+0x84>
				res = FR_INVALID_NAME;
 800bddc:	2306      	movs	r3, #6
 800bdde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bde2:	e011      	b.n	800be08 <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bde4:	79fb      	ldrb	r3, [r7, #7]
 800bde6:	f023 0301 	bic.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	bf14      	ite	ne
 800bdee:	2301      	movne	r3, #1
 800bdf0:	2300      	moveq	r3, #0
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	f107 0320 	add.w	r3, r7, #32
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fd fdb1 	bl	8009964 <chk_lock>
 800be02:	4603      	mov	r3, r0
 800be04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	f003 031c 	and.w	r3, r3, #28
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f000 809a 	beq.w	800bf48 <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 800be14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d019      	beq.n	800be50 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800be1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be20:	2b04      	cmp	r3, #4
 800be22:	d10e      	bne.n	800be42 <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be24:	f7fd fe08 	bl	8009a38 <enq_lock>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d006      	beq.n	800be3c <f_open+0xdc>
 800be2e:	f107 0320 	add.w	r3, r7, #32
 800be32:	4618      	mov	r0, r3
 800be34:	f7ff f85e 	bl	800aef4 <dir_register>
 800be38:	4603      	mov	r3, r0
 800be3a:	e000      	b.n	800be3e <f_open+0xde>
 800be3c:	2312      	movs	r3, #18
 800be3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be42:	79fb      	ldrb	r3, [r7, #7]
 800be44:	f043 0308 	orr.w	r3, r3, #8
 800be48:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 800be4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be4c:	653b      	str	r3, [r7, #80]	; 0x50
 800be4e:	e012      	b.n	800be76 <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be52:	330b      	adds	r3, #11
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	f003 0311 	and.w	r3, r3, #17
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <f_open+0x106>
					res = FR_DENIED;
 800be5e:	2307      	movs	r3, #7
 800be60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800be64:	e007      	b.n	800be76 <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800be66:	79fb      	ldrb	r3, [r7, #7]
 800be68:	f003 0304 	and.w	r3, r3, #4
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <f_open+0x116>
						res = FR_EXIST;
 800be70:	2308      	movs	r3, #8
 800be72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f040 8082 	bne.w	800bf84 <f_open+0x224>
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	f003 0308 	and.w	r3, r3, #8
 800be86:	2b00      	cmp	r3, #0
 800be88:	d07c      	beq.n	800bf84 <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 800be8a:	f7fd fbef 	bl	800966c <get_fattime>
 800be8e:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800be90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be92:	330e      	adds	r3, #14
 800be94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be96:	b2d2      	uxtb	r2, r2
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	0a1b      	lsrs	r3, r3, #8
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bea4:	330f      	adds	r3, #15
 800bea6:	b2d2      	uxtb	r2, r2
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beac:	0c1a      	lsrs	r2, r3, #16
 800beae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb0:	3310      	adds	r3, #16
 800beb2:	b2d2      	uxtb	r2, r2
 800beb4:	701a      	strb	r2, [r3, #0]
 800beb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb8:	0e1a      	lsrs	r2, r3, #24
 800beba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bebc:	3311      	adds	r3, #17
 800bebe:	b2d2      	uxtb	r2, r2
 800bec0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec4:	330b      	adds	r3, #11
 800bec6:	2200      	movs	r2, #0
 800bec8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800beca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800becc:	331c      	adds	r3, #28
 800bece:	2200      	movs	r2, #0
 800bed0:	701a      	strb	r2, [r3, #0]
 800bed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed4:	331d      	adds	r3, #29
 800bed6:	2200      	movs	r2, #0
 800bed8:	701a      	strb	r2, [r3, #0]
 800beda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bedc:	331e      	adds	r3, #30
 800bede:	2200      	movs	r2, #0
 800bee0:	701a      	strb	r2, [r3, #0]
 800bee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee4:	331f      	adds	r3, #31
 800bee6:	2200      	movs	r2, #0
 800bee8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fe fd66 	bl	800a9c0 <ld_clust>
 800bef4:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 800bef6:	2100      	movs	r1, #0
 800bef8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800befa:	f7fe fd8e 	bl	800aa1a <st_clust>
				dj.fs->wflag = 1;
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800bf06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d03b      	beq.n	800bf84 <f_open+0x224>
					dw = dj.fs->winsect;
 800bf0c:	6a3b      	ldr	r3, [r7, #32]
 800bf0e:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800bf12:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 800bf14:	6a3b      	ldr	r3, [r7, #32]
 800bf16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fe fa43 	bl	800a3a4 <remove_chain>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 800bf24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d12b      	bne.n	800bf84 <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf30:	3a01      	subs	r2, #1
 800bf32:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fd ff07 	bl	8009d4e <move_window>
 800bf40:	4603      	mov	r3, r0
 800bf42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bf46:	e01d      	b.n	800bf84 <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bf48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d119      	bne.n	800bf84 <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800bf50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf52:	330b      	adds	r3, #11
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	f003 0310 	and.w	r3, r3, #16
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <f_open+0x206>
					res = FR_NO_FILE;
 800bf5e:	2304      	movs	r3, #4
 800bf60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bf64:	e00e      	b.n	800bf84 <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	f003 0302 	and.w	r3, r3, #2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d009      	beq.n	800bf84 <f_open+0x224>
 800bf70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf72:	330b      	adds	r3, #11
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <f_open+0x224>
						res = FR_DENIED;
 800bf7e:	2307      	movs	r3, #7
 800bf80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 800bf84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d129      	bne.n	800bfe0 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf8c:	79fb      	ldrb	r3, [r7, #7]
 800bf8e:	f003 0308 	and.w	r3, r3, #8
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <f_open+0x23e>
				mode |= FA__WRITTEN;
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	f043 0320 	orr.w	r3, r3, #32
 800bf9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfac:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	f023 0301 	bic.w	r3, r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bf14      	ite	ne
 800bfb8:	2301      	movne	r3, #1
 800bfba:	2300      	moveq	r3, #0
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	f107 0320 	add.w	r3, r7, #32
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fd fd5a 	bl	8009a80 <inc_lock>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d102      	bne.n	800bfe0 <f_open+0x280>
 800bfda:	2302      	movs	r3, #2
 800bfdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800bfe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d133      	bne.n	800c050 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	79fa      	ldrb	r2, [r7, #7]
 800bfec:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bff4:	6a3b      	ldr	r3, [r7, #32]
 800bff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe fce1 	bl	800a9c0 <ld_clust>
 800bffe:	4602      	mov	r2, r0
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c006:	331f      	adds	r3, #31
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	061a      	lsls	r2, r3, #24
 800c00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00e:	331e      	adds	r3, #30
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	041b      	lsls	r3, r3, #16
 800c014:	4313      	orrs	r3, r2
 800c016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c018:	321d      	adds	r2, #29
 800c01a:	7812      	ldrb	r2, [r2, #0]
 800c01c:	0212      	lsls	r2, r2, #8
 800c01e:	4313      	orrs	r3, r2
 800c020:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c022:	321c      	adds	r2, #28
 800c024:	7812      	ldrb	r2, [r2, #0]
 800c026:	431a      	orrs	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c03e:	6a3a      	ldr	r2, [r7, #32]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800c050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800c054:	4618      	mov	r0, r3
 800c056:	3758      	adds	r7, #88	; 0x58
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	200000cc 	.word	0x200000cc

0800c060 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08c      	sub	sp, #48	; 0x30
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7ff fdfb 	bl	800bc74 <validate>
 800c07e:	4603      	mov	r3, r0
 800c080:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c082:	7ffb      	ldrb	r3, [r7, #31]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <f_read+0x2c>
 800c088:	7ffb      	ldrb	r3, [r7, #31]
 800c08a:	e13a      	b.n	800c302 <f_read+0x2a2>
	if (fp->err)								/* Check error */
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	79db      	ldrb	r3, [r3, #7]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	79db      	ldrb	r3, [r3, #7]
 800c098:	e133      	b.n	800c302 <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	799b      	ldrb	r3, [r3, #6]
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c0a6:	2307      	movs	r3, #7
 800c0a8:	e12b      	b.n	800c302 <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	f240 811c 	bls.w	800c2f8 <f_read+0x298>
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c0c4:	e118      	b.n	800c2f8 <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	6812      	ldr	r2, [r2, #0]
 800c0ce:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c0d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0d6:	fb02 f201 	mul.w	r2, r2, r1
 800c0da:	1a9b      	subs	r3, r3, r2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f040 80bc 	bne.w	800c25a <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	6812      	ldr	r2, [r2, #0]
 800c0ea:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c0ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	4013      	ands	r3, r2
 800c102:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800c104:	7dfb      	ldrb	r3, [r7, #23]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d130      	bne.n	800c16c <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d103      	bne.n	800c11a <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c118:	e014      	b.n	800c144 <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d007      	beq.n	800c132 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	4619      	mov	r1, r3
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f7fe fa32 	bl	800a592 <clmt_clust>
 800c12e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c130:	e008      	b.n	800c144 <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	4619      	mov	r1, r3
 800c13c:	4610      	mov	r0, r2
 800c13e:	f7fd ff03 	bl	8009f48 <get_fat>
 800c142:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800c144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c146:	2b01      	cmp	r3, #1
 800c148:	d804      	bhi.n	800c154 <f_read+0xf4>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2202      	movs	r2, #2
 800c14e:	71da      	strb	r2, [r3, #7]
 800c150:	2302      	movs	r3, #2
 800c152:	e0d6      	b.n	800c302 <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15a:	d104      	bne.n	800c166 <f_read+0x106>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2201      	movs	r2, #1
 800c160:	71da      	strb	r2, [r3, #7]
 800c162:	2301      	movs	r3, #1
 800c164:	e0cd      	b.n	800c302 <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c16a:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	695b      	ldr	r3, [r3, #20]
 800c174:	4619      	mov	r1, r3
 800c176:	4610      	mov	r0, r2
 800c178:	f7fd fec5 	bl	8009f06 <clust2sect>
 800c17c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d104      	bne.n	800c18e <f_read+0x12e>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2202      	movs	r2, #2
 800c188:	71da      	strb	r2, [r3, #7]
 800c18a:	2302      	movs	r3, #2
 800c18c:	e0b9      	b.n	800c302 <f_read+0x2a2>
			sect += csect;
 800c18e:	7dfb      	ldrb	r3, [r7, #23]
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	4413      	add	r3, r2
 800c194:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c19e:	461a      	mov	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1a6:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d052      	beq.n	800c254 <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c1ae:	7dfa      	ldrb	r2, [r7, #23]
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	4413      	add	r3, r2
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	6812      	ldr	r2, [r2, #0]
 800c1b8:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d907      	bls.n	800c1d0 <f_read+0x170>
					cc = fp->fs->csize - csect;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	6a39      	ldr	r1, [r7, #32]
 800c1de:	f7fd faeb 	bl	80097b8 <disk_read>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d004      	beq.n	800c1f2 <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	71da      	strb	r2, [r3, #7]
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e087      	b.n	800c302 <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d020      	beq.n	800c240 <f_read+0x1e0>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d917      	bls.n	800c240 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	1ad3      	subs	r3, r2, r3
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	6812      	ldr	r2, [r2, #0]
 800c220:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c224:	fb02 f303 	mul.w	r3, r2, r3
 800c228:	6a3a      	ldr	r2, [r7, #32]
 800c22a:	18d0      	adds	r0, r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4619      	mov	r1, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c23a:	461a      	mov	r2, r3
 800c23c:	f7fd fb1a 	bl	8009874 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c248:	461a      	mov	r2, r3
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	fb02 f303 	mul.w	r3, r2, r3
 800c250:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800c252:	e03d      	b.n	800c2d0 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c262:	4618      	mov	r0, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	6812      	ldr	r2, [r2, #0]
 800c26c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c270:	fbb3 f1f2 	udiv	r1, r3, r2
 800c274:	fb02 f201 	mul.w	r2, r2, r1
 800c278:	1a9b      	subs	r3, r3, r2
 800c27a:	1ac3      	subs	r3, r0, r3
 800c27c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800c27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d901      	bls.n	800c28a <f_read+0x22a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7fd fd5a 	bl	8009d4e <move_window>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d004      	beq.n	800c2aa <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	71da      	strb	r2, [r3, #7]
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e02b      	b.n	800c302 <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6819      	ldr	r1, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	6812      	ldr	r2, [r2, #0]
 800c2b6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c2ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2be:	fb02 f200 	mul.w	r2, r2, r0
 800c2c2:	1a9b      	subs	r3, r3, r2
 800c2c4:	440b      	add	r3, r1
 800c2c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	6a38      	ldr	r0, [r7, #32]
 800c2cc:	f7fd fad2 	bl	8009874 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c2d0:	6a3a      	ldr	r2, [r7, #32]
 800c2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d4:	4413      	add	r3, r2
 800c2d6:	623b      	str	r3, [r7, #32]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	689a      	ldr	r2, [r3, #8]
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	441a      	add	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	609a      	str	r2, [r3, #8]
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ea:	441a      	add	r2, r3
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f47f aee3 	bne.w	800c0c6 <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3730      	adds	r7, #48	; 0x30
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b08a      	sub	sp, #40	; 0x28
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	607a      	str	r2, [r7, #4]
 800c316:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2200      	movs	r2, #0
 800c320:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f7ff fca6 	bl	800bc74 <validate>
 800c328:	4603      	mov	r3, r0
 800c32a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <f_write+0x2c>
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	e191      	b.n	800c65a <f_write+0x350>
	if (fp->err)							/* Check error */
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	79db      	ldrb	r3, [r3, #7]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d002      	beq.n	800c344 <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	79db      	ldrb	r3, [r3, #7]
 800c342:	e18a      	b.n	800c65a <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	799b      	ldrb	r3, [r3, #6]
 800c348:	f003 0302 	and.w	r3, r3, #2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d101      	bne.n	800c354 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c350:	2307      	movs	r3, #7
 800c352:	e182      	b.n	800c65a <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	689a      	ldr	r2, [r3, #8]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	441a      	add	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	429a      	cmp	r2, r3
 800c362:	f080 8162 	bcs.w	800c62a <f_write+0x320>
 800c366:	2300      	movs	r3, #0
 800c368:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800c36a:	e15e      	b.n	800c62a <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	6812      	ldr	r2, [r2, #0]
 800c374:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c378:	fbb3 f1f2 	udiv	r1, r3, r2
 800c37c:	fb02 f201 	mul.w	r2, r2, r1
 800c380:	1a9b      	subs	r3, r3, r2
 800c382:	2b00      	cmp	r3, #0
 800c384:	f040 80fd 	bne.w	800c582 <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	6812      	ldr	r2, [r2, #0]
 800c390:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c394:	fbb3 f3f2 	udiv	r3, r3, r2
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800c3aa:	7dbb      	ldrb	r3, [r7, #22]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d145      	bne.n	800c43c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10d      	bne.n	800c3d4 <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d11c      	bne.n	800c3fe <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fe f844 	bl	800a458 <create_chain>
 800c3d0:	6278      	str	r0, [r7, #36]	; 0x24
 800c3d2:	e014      	b.n	800c3fe <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d007      	beq.n	800c3ec <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f7fe f8d5 	bl	800a592 <clmt_clust>
 800c3e8:	6278      	str	r0, [r7, #36]	; 0x24
 800c3ea:	e008      	b.n	800c3fe <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	f7fe f82e 	bl	800a458 <create_chain>
 800c3fc:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 8117 	beq.w	800c634 <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d104      	bne.n	800c416 <f_write+0x10c>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2202      	movs	r2, #2
 800c410:	71da      	strb	r2, [r3, #7]
 800c412:	2302      	movs	r3, #2
 800c414:	e121      	b.n	800c65a <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c41c:	d104      	bne.n	800c428 <f_write+0x11e>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	71da      	strb	r2, [r3, #7]
 800c424:	2301      	movs	r3, #1
 800c426:	e118      	b.n	800c65a <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c42c:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d102      	bne.n	800c43c <f_write+0x132>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c43a:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d10c      	bne.n	800c466 <f_write+0x15c>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4618      	mov	r0, r3
 800c452:	f7fd fc33 	bl	8009cbc <sync_window>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d004      	beq.n	800c466 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2201      	movs	r2, #1
 800c460:	71da      	strb	r2, [r3, #7]
 800c462:	2301      	movs	r3, #1
 800c464:	e0f9      	b.n	800c65a <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	4619      	mov	r1, r3
 800c470:	4610      	mov	r0, r2
 800c472:	f7fd fd48 	bl	8009f06 <clust2sect>
 800c476:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d104      	bne.n	800c488 <f_write+0x17e>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2202      	movs	r2, #2
 800c482:	71da      	strb	r2, [r3, #7]
 800c484:	2302      	movs	r3, #2
 800c486:	e0e8      	b.n	800c65a <f_write+0x350>
			sect += csect;
 800c488:	7dbb      	ldrb	r3, [r7, #22]
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	4413      	add	r3, r2
 800c48e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c498:	461a      	mov	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d051      	beq.n	800c54c <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c4a8:	7dba      	ldrb	r2, [r7, #22]
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	6812      	ldr	r2, [r2, #0]
 800c4b2:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d907      	bls.n	800c4ca <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	7dbb      	ldrb	r3, [r7, #22]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	69b9      	ldr	r1, [r7, #24]
 800c4d8:	f7fd f98e 	bl	80097f8 <disk_write>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d004      	beq.n	800c4ec <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	71da      	strb	r2, [r3, #7]
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e0b6      	b.n	800c65a <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	69fa      	ldr	r2, [r7, #28]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d91c      	bls.n	800c538 <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4618      	mov	r0, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	6812      	ldr	r2, [r2, #0]
 800c514:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c518:	fb02 f303 	mul.w	r3, r2, r3
 800c51c:	69ba      	ldr	r2, [r7, #24]
 800c51e:	18d1      	adds	r1, r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c528:	461a      	mov	r2, r3
 800c52a:	f7fd f9a3 	bl	8009874 <mem_cpy>
					fp->fs->wflag = 0;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c540:	461a      	mov	r2, r3
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	fb02 f303 	mul.w	r3, r2, r3
 800c548:	623b      	str	r3, [r7, #32]
				continue;
 800c54a:	e05a      	b.n	800c602 <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	429a      	cmp	r2, r3
 800c556:	d311      	bcc.n	800c57c <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fd fbad 	bl	8009cbc <sync_window>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d004      	beq.n	800c572 <f_write+0x268>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2201      	movs	r2, #1
 800c56c:	71da      	strb	r2, [r3, #7]
 800c56e:	2301      	movs	r3, #1
 800c570:	e073      	b.n	800c65a <f_write+0x350>
				fp->fs->winsect = sect;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	693a      	ldr	r2, [r7, #16]
 800c580:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c58a:	4618      	mov	r0, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	6812      	ldr	r2, [r2, #0]
 800c594:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c598:	fbb3 f1f2 	udiv	r1, r3, r2
 800c59c:	fb02 f201 	mul.w	r2, r2, r1
 800c5a0:	1a9b      	subs	r3, r3, r2
 800c5a2:	1ac3      	subs	r3, r0, r3
 800c5a4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800c5a6:	6a3a      	ldr	r2, [r7, #32]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d901      	bls.n	800c5b2 <f_write+0x2a8>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	699b      	ldr	r3, [r3, #24]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4610      	mov	r0, r2
 800c5be:	f7fd fbc6 	bl	8009d4e <move_window>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d004      	beq.n	800c5d2 <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	71da      	strb	r2, [r3, #7]
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e043      	b.n	800c65a <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6819      	ldr	r1, [r3, #0]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	6812      	ldr	r2, [r2, #0]
 800c5de:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c5e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5e6:	fb02 f200 	mul.w	r2, r2, r0
 800c5ea:	1a9b      	subs	r3, r3, r2
 800c5ec:	440b      	add	r3, r1
 800c5ee:	6a3a      	ldr	r2, [r7, #32]
 800c5f0:	69b9      	ldr	r1, [r7, #24]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fd f93e 	bl	8009874 <mem_cpy>
		fp->fs->wflag = 1;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800c602:	69ba      	ldr	r2, [r7, #24]
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	4413      	add	r3, r2
 800c608:	61bb      	str	r3, [r7, #24]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	689a      	ldr	r2, [r3, #8]
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	441a      	add	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	609a      	str	r2, [r3, #8]
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	441a      	add	r2, r3
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f47f ae9d 	bne.w	800c36c <f_write+0x62>
 800c632:	e000      	b.n	800c636 <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c634:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	689a      	ldr	r2, [r3, #8]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d903      	bls.n	800c64a <f_write+0x340>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	689a      	ldr	r2, [r3, #8]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	799b      	ldrb	r3, [r3, #6]
 800c64e:	f043 0320 	orr.w	r3, r3, #32
 800c652:	b2da      	uxtb	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3728      	adds	r7, #40	; 0x28
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b086      	sub	sp, #24
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7ff fb02 	bl	800bc74 <validate>
 800c670:	4603      	mov	r3, r0
 800c672:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c674:	7dfb      	ldrb	r3, [r7, #23]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d178      	bne.n	800c76c <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	799b      	ldrb	r3, [r3, #6]
 800c67e:	f003 0320 	and.w	r3, r3, #32
 800c682:	2b00      	cmp	r3, #0
 800c684:	d072      	beq.n	800c76c <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	4619      	mov	r1, r3
 800c690:	4610      	mov	r0, r2
 800c692:	f7fd fb5c 	bl	8009d4e <move_window>
 800c696:	4603      	mov	r3, r0
 800c698:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d165      	bne.n	800c76c <f_sync+0x10a>
				dir = fp->dir_ptr;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	330b      	adds	r3, #11
 800c6aa:	781a      	ldrb	r2, [r3, #0]
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	330b      	adds	r3, #11
 800c6b0:	f042 0220 	orr.w	r2, r2, #32
 800c6b4:	b2d2      	uxtb	r2, r2
 800c6b6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68da      	ldr	r2, [r3, #12]
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	331c      	adds	r3, #28
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	0a1b      	lsrs	r3, r3, #8
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	331d      	adds	r3, #29
 800c6d2:	b2d2      	uxtb	r2, r2
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	0c1a      	lsrs	r2, r3, #16
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	331e      	adds	r3, #30
 800c6e0:	b2d2      	uxtb	r2, r2
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	0e1a      	lsrs	r2, r3, #24
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	331f      	adds	r3, #31
 800c6ee:	b2d2      	uxtb	r2, r2
 800c6f0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6938      	ldr	r0, [r7, #16]
 800c6fa:	f7fe f98e 	bl	800aa1a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c6fe:	f7fc ffb5 	bl	800966c <get_fattime>
 800c702:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	3316      	adds	r3, #22
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	701a      	strb	r2, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	b29b      	uxth	r3, r3
 800c712:	0a1b      	lsrs	r3, r3, #8
 800c714:	b29a      	uxth	r2, r3
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	3317      	adds	r3, #23
 800c71a:	b2d2      	uxtb	r2, r2
 800c71c:	701a      	strb	r2, [r3, #0]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	0c1a      	lsrs	r2, r3, #16
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	3318      	adds	r3, #24
 800c726:	b2d2      	uxtb	r2, r2
 800c728:	701a      	strb	r2, [r3, #0]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	0e1a      	lsrs	r2, r3, #24
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	3319      	adds	r3, #25
 800c732:	b2d2      	uxtb	r2, r2
 800c734:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	3312      	adds	r3, #18
 800c73a:	2200      	movs	r2, #0
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	3313      	adds	r3, #19
 800c742:	2200      	movs	r2, #0
 800c744:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	799b      	ldrb	r3, [r3, #6]
 800c74a:	f023 0320 	bic.w	r3, r3, #32
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4618      	mov	r0, r3
 800c764:	f7fd fb21 	bl	8009daa <sync_fs>
 800c768:	4603      	mov	r3, r0
 800c76a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3718      	adds	r7, #24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7ff ff6f 	bl	800c662 <f_sync>
 800c784:	4603      	mov	r3, r0
 800c786:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c788:	7bfb      	ldrb	r3, [r7, #15]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d114      	bne.n	800c7b8 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7ff fa70 	bl	800bc74 <validate>
 800c794:	4603      	mov	r3, r0
 800c796:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c798:	7bfb      	ldrb	r3, [r7, #15]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10c      	bne.n	800c7b8 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fd fa1c 	bl	8009be0 <dec_lock>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d102      	bne.n	800c7b8 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b090      	sub	sp, #64	; 0x40
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff fa51 	bl	800bc74 <validate>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c7d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <f_lseek+0x24>
 800c7e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7e4:	e1c4      	b.n	800cb70 <f_lseek+0x3ae>
	if (fp->err)						/* Check error */
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	79db      	ldrb	r3, [r3, #7]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d002      	beq.n	800c7f4 <f_lseek+0x32>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	79db      	ldrb	r3, [r3, #7]
 800c7f2:	e1bd      	b.n	800cb70 <f_lseek+0x3ae>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 80b4 	beq.w	800c966 <f_lseek+0x1a4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c804:	d15d      	bne.n	800c8c2 <f_lseek+0x100>
			tbl = fp->cltbl;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	1d1a      	adds	r2, r3, #4
 800c810:	627a      	str	r2, [r7, #36]	; 0x24
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	617b      	str	r3, [r7, #20]
 800c816:	2302      	movs	r3, #2
 800c818:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	2b00      	cmp	r3, #0
 800c824:	d03d      	beq.n	800c8a2 <f_lseek+0xe0>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	613b      	str	r3, [r7, #16]
 800c82a:	2300      	movs	r3, #0
 800c82c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	3302      	adds	r3, #2
 800c832:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	3301      	adds	r3, #1
 800c83c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c844:	4618      	mov	r0, r3
 800c846:	f7fd fb7f 	bl	8009f48 <get_fat>
 800c84a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800c84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d804      	bhi.n	800c85c <f_lseek+0x9a>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2202      	movs	r2, #2
 800c856:	71da      	strb	r2, [r3, #7]
 800c858:	2302      	movs	r3, #2
 800c85a:	e189      	b.n	800cb70 <f_lseek+0x3ae>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c862:	d104      	bne.n	800c86e <f_lseek+0xac>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	71da      	strb	r2, [r3, #7]
 800c86a:	2301      	movs	r3, #1
 800c86c:	e180      	b.n	800cb70 <f_lseek+0x3ae>
					} while (cl == pcl + 1);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3301      	adds	r3, #1
 800c872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c874:	429a      	cmp	r2, r3
 800c876:	d0dd      	beq.n	800c834 <f_lseek+0x72>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d809      	bhi.n	800c894 <f_lseek+0xd2>
						*tbl++ = ncl; *tbl++ = tcl;
 800c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c882:	1d1a      	adds	r2, r3, #4
 800c884:	627a      	str	r2, [r7, #36]	; 0x24
 800c886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	1d1a      	adds	r2, r3, #4
 800c88e:	627a      	str	r2, [r7, #36]	; 0x24
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800c89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d3c1      	bcc.n	800c826 <f_lseek+0x64>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8a8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800c8aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d803      	bhi.n	800c8ba <f_lseek+0xf8>
				*tbl = 0;		/* Terminate table */
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	e158      	b.n	800cb6c <f_lseek+0x3aa>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c8ba:	2311      	movs	r3, #17
 800c8bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c8c0:	e154      	b.n	800cb6c <f_lseek+0x3aa>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d902      	bls.n	800c8d2 <f_lseek+0x110>
				ofs = fp->fsize;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	609a      	str	r2, [r3, #8]
			if (ofs) {
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 8146 	beq.w	800cb6c <f_lseek+0x3aa>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7fd fe53 	bl	800a592 <clmt_clust>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	695b      	ldr	r3, [r3, #20]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	f7fd fb02 	bl	8009f06 <clust2sect>
 800c902:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d104      	bne.n	800c914 <f_lseek+0x152>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2202      	movs	r2, #2
 800c90e:	71da      	strb	r2, [r3, #7]
 800c910:	2302      	movs	r3, #2
 800c912:	e12d      	b.n	800cb70 <f_lseek+0x3ae>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	3b01      	subs	r3, #1
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	6812      	ldr	r2, [r2, #0]
 800c91c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c920:	fbb3 f3f2 	udiv	r3, r3, r2
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	6812      	ldr	r2, [r2, #0]
 800c928:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c92c:	3a01      	subs	r2, #1
 800c92e:	4013      	ands	r3, r2
 800c930:	69ba      	ldr	r2, [r7, #24]
 800c932:	4413      	add	r3, r2
 800c934:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	6812      	ldr	r2, [r2, #0]
 800c93e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c942:	fbb3 f1f2 	udiv	r1, r3, r2
 800c946:	fb02 f201 	mul.w	r2, r2, r1
 800c94a:	1a9b      	subs	r3, r3, r2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 810d 	beq.w	800cb6c <f_lseek+0x3aa>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	429a      	cmp	r2, r3
 800c95a:	f000 8107 	beq.w	800cb6c <f_lseek+0x3aa>
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
						ABORT(fp->fs, FR_DISK_ERR);
#endif
					fp->dsect = dsc;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	69ba      	ldr	r2, [r7, #24]
 800c962:	619a      	str	r2, [r3, #24]
 800c964:	e102      	b.n	800cb6c <f_lseek+0x3aa>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d908      	bls.n	800c982 <f_lseek+0x1c0>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	799b      	ldrb	r3, [r3, #6]
 800c974:	f003 0302 	and.w	r3, r3, #2
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d102      	bne.n	800c982 <f_lseek+0x1c0>
#endif
			) ofs = fp->fsize;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	637b      	str	r3, [r7, #52]	; 0x34
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c990:	609a      	str	r2, [r3, #8]
		if (ofs) {
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 80c3 	beq.w	800cb20 <f_lseek+0x35e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c9ac:	fb03 f302 	mul.w	r3, r3, r2
 800c9b0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c9b2:	6a3b      	ldr	r3, [r7, #32]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01b      	beq.n	800c9f0 <f_lseek+0x22e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	1e5a      	subs	r2, r3, #1
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9c2:	6a3b      	ldr	r3, [r7, #32]
 800c9c4:	1e59      	subs	r1, r3, #1
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d30f      	bcc.n	800c9f0 <f_lseek+0x22e>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	1e5a      	subs	r2, r3, #1
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	425b      	negs	r3, r3
 800c9d8:	401a      	ands	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9ee:	e023      	b.n	800ca38 <f_lseek+0x276>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d11a      	bne.n	800ca32 <f_lseek+0x270>
					clst = create_chain(fp->fs, 0);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2100      	movs	r1, #0
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fd fd28 	bl	800a458 <create_chain>
 800ca08:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d104      	bne.n	800ca1a <f_lseek+0x258>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	71da      	strb	r2, [r3, #7]
 800ca16:	2302      	movs	r3, #2
 800ca18:	e0aa      	b.n	800cb70 <f_lseek+0x3ae>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca20:	d104      	bne.n	800ca2c <f_lseek+0x26a>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	71da      	strb	r2, [r3, #7]
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e0a1      	b.n	800cb70 <f_lseek+0x3ae>
					fp->sclust = clst;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca30:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca36:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d070      	beq.n	800cb20 <f_lseek+0x35e>
				while (ofs > bcs) {						/* Cluster following loop */
 800ca3e:	e03e      	b.n	800cabe <f_lseek+0x2fc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	799b      	ldrb	r3, [r3, #6]
 800ca44:	f003 0302 	and.w	r3, r3, #2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00c      	beq.n	800ca66 <f_lseek+0x2a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fd fd00 	bl	800a458 <create_chain>
 800ca58:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d109      	bne.n	800ca74 <f_lseek+0x2b2>
							ofs = bcs; break;
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	e02f      	b.n	800cac6 <f_lseek+0x304>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7fd fa6b 	bl	8009f48 <get_fat>
 800ca72:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7a:	d104      	bne.n	800ca86 <f_lseek+0x2c4>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	71da      	strb	r2, [r3, #7]
 800ca82:	2301      	movs	r3, #1
 800ca84:	e074      	b.n	800cb70 <f_lseek+0x3ae>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800ca86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d906      	bls.n	800ca9a <f_lseek+0x2d8>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800ca94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d304      	bcc.n	800caa4 <f_lseek+0x2e2>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2202      	movs	r2, #2
 800ca9e:	71da      	strb	r2, [r3, #7]
 800caa0:	2302      	movs	r3, #2
 800caa2:	e065      	b.n	800cb70 <f_lseek+0x3ae>
					fp->clust = clst;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caa8:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	689a      	ldr	r2, [r3, #8]
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	441a      	add	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800cabe:	683a      	ldr	r2, [r7, #0]
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d8bc      	bhi.n	800ca40 <f_lseek+0x27e>
				}
				fp->fptr += ofs;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	441a      	add	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800cada:	461a      	mov	r2, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	fbb3 f1f2 	udiv	r1, r3, r2
 800cae2:	fb02 f201 	mul.w	r2, r2, r1
 800cae6:	1a9b      	subs	r3, r3, r2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d019      	beq.n	800cb20 <f_lseek+0x35e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fd fa07 	bl	8009f06 <clust2sect>
 800caf8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800cafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d104      	bne.n	800cb0a <f_lseek+0x348>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	71da      	strb	r2, [r3, #7]
 800cb06:	2302      	movs	r3, #2
 800cb08:	e032      	b.n	800cb70 <f_lseek+0x3ae>
					nsect += ofs / SS(fp->fs);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800cb12:	461a      	mov	r2, r3
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb1c:	4413      	add	r3, r2
 800cb1e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	6812      	ldr	r2, [r2, #0]
 800cb28:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800cb2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb30:	fb02 f201 	mul.w	r2, r2, r1
 800cb34:	1a9b      	subs	r3, r3, r2
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d007      	beq.n	800cb4a <f_lseek+0x388>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d002      	beq.n	800cb4a <f_lseek+0x388>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb48:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	689a      	ldr	r2, [r3, #8]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d90a      	bls.n	800cb6c <f_lseek+0x3aa>
			fp->fsize = fp->fptr;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	689a      	ldr	r2, [r3, #8]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	799b      	ldrb	r3, [r3, #6]
 800cb62:	f043 0320 	orr.w	r3, r3, #32
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800cb6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3740      	adds	r7, #64	; 0x40
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b087      	sub	sp, #28
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	4613      	mov	r3, r2
 800cb84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb86:	2301      	movs	r3, #1
 800cb88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800cb8e:	4b1e      	ldr	r3, [pc, #120]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cb90:	7a5b      	ldrb	r3, [r3, #9]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d831      	bhi.n	800cbfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb98:	4b1b      	ldr	r3, [pc, #108]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cb9a:	7a5b      	ldrb	r3, [r3, #9]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	461a      	mov	r2, r3
 800cba0:	4b19      	ldr	r3, [pc, #100]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cba2:	2100      	movs	r1, #0
 800cba4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800cba6:	4b18      	ldr	r3, [pc, #96]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cba8:	7a5b      	ldrb	r3, [r3, #9]
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	4a16      	ldr	r2, [pc, #88]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800cbb6:	4b14      	ldr	r3, [pc, #80]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cbb8:	7a5b      	ldrb	r3, [r3, #9]
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	4b12      	ldr	r3, [pc, #72]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cbc0:	4413      	add	r3, r2
 800cbc2:	79fa      	ldrb	r2, [r7, #7]
 800cbc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cbc6:	4b10      	ldr	r3, [pc, #64]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cbc8:	7a5b      	ldrb	r3, [r3, #9]
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	1c5a      	adds	r2, r3, #1
 800cbce:	b2d1      	uxtb	r1, r2
 800cbd0:	4a0d      	ldr	r2, [pc, #52]	; (800cc08 <FATFS_LinkDriverEx+0x90>)
 800cbd2:	7251      	strb	r1, [r2, #9]
 800cbd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cbd6:	7dbb      	ldrb	r3, [r7, #22]
 800cbd8:	3330      	adds	r3, #48	; 0x30
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	223a      	movs	r2, #58	; 0x3a
 800cbe6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	3302      	adds	r3, #2
 800cbec:	222f      	movs	r2, #47	; 0x2f
 800cbee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	3303      	adds	r3, #3
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800cbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	371c      	adds	r7, #28
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bc80      	pop	{r7}
 800cc06:	4770      	bx	lr
 800cc08:	200002cc 	.word	0x200002cc

0800cc0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc16:	2200      	movs	r2, #0
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff ffac 	bl	800cb78 <FATFS_LinkDriverEx>
 800cc20:	4603      	mov	r3, r0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cc38:	88fb      	ldrh	r3, [r7, #6]
 800cc3a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc3c:	d802      	bhi.n	800cc44 <ff_convert+0x18>
		c = chr;
 800cc3e:	88fb      	ldrh	r3, [r7, #6]
 800cc40:	81fb      	strh	r3, [r7, #14]
 800cc42:	e025      	b.n	800cc90 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00b      	beq.n	800cc62 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cc4a:	88fb      	ldrh	r3, [r7, #6]
 800cc4c:	2bff      	cmp	r3, #255	; 0xff
 800cc4e:	d805      	bhi.n	800cc5c <ff_convert+0x30>
 800cc50:	88fb      	ldrh	r3, [r7, #6]
 800cc52:	3b80      	subs	r3, #128	; 0x80
 800cc54:	4a11      	ldr	r2, [pc, #68]	; (800cc9c <ff_convert+0x70>)
 800cc56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc5a:	e000      	b.n	800cc5e <ff_convert+0x32>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	81fb      	strh	r3, [r7, #14]
 800cc60:	e016      	b.n	800cc90 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800cc62:	2300      	movs	r3, #0
 800cc64:	81fb      	strh	r3, [r7, #14]
 800cc66:	e009      	b.n	800cc7c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cc68:	89fb      	ldrh	r3, [r7, #14]
 800cc6a:	4a0c      	ldr	r2, [pc, #48]	; (800cc9c <ff_convert+0x70>)
 800cc6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc70:	88fa      	ldrh	r2, [r7, #6]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d006      	beq.n	800cc84 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cc76:	89fb      	ldrh	r3, [r7, #14]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	81fb      	strh	r3, [r7, #14]
 800cc7c:	89fb      	ldrh	r3, [r7, #14]
 800cc7e:	2b7f      	cmp	r3, #127	; 0x7f
 800cc80:	d9f2      	bls.n	800cc68 <ff_convert+0x3c>
 800cc82:	e000      	b.n	800cc86 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cc84:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cc86:	89fb      	ldrh	r3, [r7, #14]
 800cc88:	3380      	adds	r3, #128	; 0x80
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cc90:	89fb      	ldrh	r3, [r7, #14]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bc80      	pop	{r7}
 800cc9a:	4770      	bx	lr
 800cc9c:	0800d838 	.word	0x0800d838

0800cca0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60fb      	str	r3, [r7, #12]
 800ccae:	e002      	b.n	800ccb6 <ff_wtoupper+0x16>
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	4a0f      	ldr	r2, [pc, #60]	; (800ccf4 <ff_wtoupper+0x54>)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d006      	beq.n	800ccd0 <ff_wtoupper+0x30>
 800ccc2:	4a0c      	ldr	r2, [pc, #48]	; (800ccf4 <ff_wtoupper+0x54>)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccca:	88fa      	ldrh	r2, [r7, #6]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d1ef      	bne.n	800ccb0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800ccd0:	4a08      	ldr	r2, [pc, #32]	; (800ccf4 <ff_wtoupper+0x54>)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d004      	beq.n	800cce6 <ff_wtoupper+0x46>
 800ccdc:	4a06      	ldr	r2, [pc, #24]	; (800ccf8 <ff_wtoupper+0x58>)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cce4:	e000      	b.n	800cce8 <ff_wtoupper+0x48>
 800cce6:	88fb      	ldrh	r3, [r7, #6]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bc80      	pop	{r7}
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	0800d938 	.word	0x0800d938
 800ccf8:	0800db18 	.word	0x0800db18

0800ccfc <__errno>:
 800ccfc:	4b01      	ldr	r3, [pc, #4]	; (800cd04 <__errno+0x8>)
 800ccfe:	6818      	ldr	r0, [r3, #0]
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	20000024 	.word	0x20000024

0800cd08 <__libc_init_array>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	2600      	movs	r6, #0
 800cd0c:	4d0c      	ldr	r5, [pc, #48]	; (800cd40 <__libc_init_array+0x38>)
 800cd0e:	4c0d      	ldr	r4, [pc, #52]	; (800cd44 <__libc_init_array+0x3c>)
 800cd10:	1b64      	subs	r4, r4, r5
 800cd12:	10a4      	asrs	r4, r4, #2
 800cd14:	42a6      	cmp	r6, r4
 800cd16:	d109      	bne.n	800cd2c <__libc_init_array+0x24>
 800cd18:	f000 fc5c 	bl	800d5d4 <_init>
 800cd1c:	2600      	movs	r6, #0
 800cd1e:	4d0a      	ldr	r5, [pc, #40]	; (800cd48 <__libc_init_array+0x40>)
 800cd20:	4c0a      	ldr	r4, [pc, #40]	; (800cd4c <__libc_init_array+0x44>)
 800cd22:	1b64      	subs	r4, r4, r5
 800cd24:	10a4      	asrs	r4, r4, #2
 800cd26:	42a6      	cmp	r6, r4
 800cd28:	d105      	bne.n	800cd36 <__libc_init_array+0x2e>
 800cd2a:	bd70      	pop	{r4, r5, r6, pc}
 800cd2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd30:	4798      	blx	r3
 800cd32:	3601      	adds	r6, #1
 800cd34:	e7ee      	b.n	800cd14 <__libc_init_array+0xc>
 800cd36:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd3a:	4798      	blx	r3
 800cd3c:	3601      	adds	r6, #1
 800cd3e:	e7f2      	b.n	800cd26 <__libc_init_array+0x1e>
 800cd40:	0800dd2c 	.word	0x0800dd2c
 800cd44:	0800dd2c 	.word	0x0800dd2c
 800cd48:	0800dd2c 	.word	0x0800dd2c
 800cd4c:	0800dd30 	.word	0x0800dd30

0800cd50 <memset>:
 800cd50:	4603      	mov	r3, r0
 800cd52:	4402      	add	r2, r0
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d100      	bne.n	800cd5a <memset+0xa>
 800cd58:	4770      	bx	lr
 800cd5a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd5e:	e7f9      	b.n	800cd54 <memset+0x4>

0800cd60 <siprintf>:
 800cd60:	b40e      	push	{r1, r2, r3}
 800cd62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd66:	b500      	push	{lr}
 800cd68:	b09c      	sub	sp, #112	; 0x70
 800cd6a:	ab1d      	add	r3, sp, #116	; 0x74
 800cd6c:	9002      	str	r0, [sp, #8]
 800cd6e:	9006      	str	r0, [sp, #24]
 800cd70:	9107      	str	r1, [sp, #28]
 800cd72:	9104      	str	r1, [sp, #16]
 800cd74:	4808      	ldr	r0, [pc, #32]	; (800cd98 <siprintf+0x38>)
 800cd76:	4909      	ldr	r1, [pc, #36]	; (800cd9c <siprintf+0x3c>)
 800cd78:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd7c:	9105      	str	r1, [sp, #20]
 800cd7e:	6800      	ldr	r0, [r0, #0]
 800cd80:	a902      	add	r1, sp, #8
 800cd82:	9301      	str	r3, [sp, #4]
 800cd84:	f000 f868 	bl	800ce58 <_svfiprintf_r>
 800cd88:	2200      	movs	r2, #0
 800cd8a:	9b02      	ldr	r3, [sp, #8]
 800cd8c:	701a      	strb	r2, [r3, #0]
 800cd8e:	b01c      	add	sp, #112	; 0x70
 800cd90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd94:	b003      	add	sp, #12
 800cd96:	4770      	bx	lr
 800cd98:	20000024 	.word	0x20000024
 800cd9c:	ffff0208 	.word	0xffff0208

0800cda0 <__ssputs_r>:
 800cda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda4:	688e      	ldr	r6, [r1, #8]
 800cda6:	4682      	mov	sl, r0
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	460c      	mov	r4, r1
 800cdac:	4690      	mov	r8, r2
 800cdae:	461f      	mov	r7, r3
 800cdb0:	d838      	bhi.n	800ce24 <__ssputs_r+0x84>
 800cdb2:	898a      	ldrh	r2, [r1, #12]
 800cdb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdb8:	d032      	beq.n	800ce20 <__ssputs_r+0x80>
 800cdba:	6825      	ldr	r5, [r4, #0]
 800cdbc:	6909      	ldr	r1, [r1, #16]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	eba5 0901 	sub.w	r9, r5, r1
 800cdc4:	6965      	ldr	r5, [r4, #20]
 800cdc6:	444b      	add	r3, r9
 800cdc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdd0:	106d      	asrs	r5, r5, #1
 800cdd2:	429d      	cmp	r5, r3
 800cdd4:	bf38      	it	cc
 800cdd6:	461d      	movcc	r5, r3
 800cdd8:	0553      	lsls	r3, r2, #21
 800cdda:	d531      	bpl.n	800ce40 <__ssputs_r+0xa0>
 800cddc:	4629      	mov	r1, r5
 800cdde:	f000 fb53 	bl	800d488 <_malloc_r>
 800cde2:	4606      	mov	r6, r0
 800cde4:	b950      	cbnz	r0, 800cdfc <__ssputs_r+0x5c>
 800cde6:	230c      	movs	r3, #12
 800cde8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdec:	f8ca 3000 	str.w	r3, [sl]
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdf6:	81a3      	strh	r3, [r4, #12]
 800cdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdfc:	464a      	mov	r2, r9
 800cdfe:	6921      	ldr	r1, [r4, #16]
 800ce00:	f000 face 	bl	800d3a0 <memcpy>
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	6126      	str	r6, [r4, #16]
 800ce12:	444e      	add	r6, r9
 800ce14:	6026      	str	r6, [r4, #0]
 800ce16:	463e      	mov	r6, r7
 800ce18:	6165      	str	r5, [r4, #20]
 800ce1a:	eba5 0509 	sub.w	r5, r5, r9
 800ce1e:	60a5      	str	r5, [r4, #8]
 800ce20:	42be      	cmp	r6, r7
 800ce22:	d900      	bls.n	800ce26 <__ssputs_r+0x86>
 800ce24:	463e      	mov	r6, r7
 800ce26:	4632      	mov	r2, r6
 800ce28:	4641      	mov	r1, r8
 800ce2a:	6820      	ldr	r0, [r4, #0]
 800ce2c:	f000 fac6 	bl	800d3bc <memmove>
 800ce30:	68a3      	ldr	r3, [r4, #8]
 800ce32:	6822      	ldr	r2, [r4, #0]
 800ce34:	1b9b      	subs	r3, r3, r6
 800ce36:	4432      	add	r2, r6
 800ce38:	2000      	movs	r0, #0
 800ce3a:	60a3      	str	r3, [r4, #8]
 800ce3c:	6022      	str	r2, [r4, #0]
 800ce3e:	e7db      	b.n	800cdf8 <__ssputs_r+0x58>
 800ce40:	462a      	mov	r2, r5
 800ce42:	f000 fb7b 	bl	800d53c <_realloc_r>
 800ce46:	4606      	mov	r6, r0
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d1e1      	bne.n	800ce10 <__ssputs_r+0x70>
 800ce4c:	4650      	mov	r0, sl
 800ce4e:	6921      	ldr	r1, [r4, #16]
 800ce50:	f000 face 	bl	800d3f0 <_free_r>
 800ce54:	e7c7      	b.n	800cde6 <__ssputs_r+0x46>
	...

0800ce58 <_svfiprintf_r>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	4698      	mov	r8, r3
 800ce5e:	898b      	ldrh	r3, [r1, #12]
 800ce60:	4607      	mov	r7, r0
 800ce62:	061b      	lsls	r3, r3, #24
 800ce64:	460d      	mov	r5, r1
 800ce66:	4614      	mov	r4, r2
 800ce68:	b09d      	sub	sp, #116	; 0x74
 800ce6a:	d50e      	bpl.n	800ce8a <_svfiprintf_r+0x32>
 800ce6c:	690b      	ldr	r3, [r1, #16]
 800ce6e:	b963      	cbnz	r3, 800ce8a <_svfiprintf_r+0x32>
 800ce70:	2140      	movs	r1, #64	; 0x40
 800ce72:	f000 fb09 	bl	800d488 <_malloc_r>
 800ce76:	6028      	str	r0, [r5, #0]
 800ce78:	6128      	str	r0, [r5, #16]
 800ce7a:	b920      	cbnz	r0, 800ce86 <_svfiprintf_r+0x2e>
 800ce7c:	230c      	movs	r3, #12
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	f04f 30ff 	mov.w	r0, #4294967295
 800ce84:	e0d1      	b.n	800d02a <_svfiprintf_r+0x1d2>
 800ce86:	2340      	movs	r3, #64	; 0x40
 800ce88:	616b      	str	r3, [r5, #20]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce8e:	2320      	movs	r3, #32
 800ce90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce94:	2330      	movs	r3, #48	; 0x30
 800ce96:	f04f 0901 	mov.w	r9, #1
 800ce9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d044 <_svfiprintf_r+0x1ec>
 800cea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cea6:	4623      	mov	r3, r4
 800cea8:	469a      	mov	sl, r3
 800ceaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceae:	b10a      	cbz	r2, 800ceb4 <_svfiprintf_r+0x5c>
 800ceb0:	2a25      	cmp	r2, #37	; 0x25
 800ceb2:	d1f9      	bne.n	800cea8 <_svfiprintf_r+0x50>
 800ceb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ceb8:	d00b      	beq.n	800ced2 <_svfiprintf_r+0x7a>
 800ceba:	465b      	mov	r3, fp
 800cebc:	4622      	mov	r2, r4
 800cebe:	4629      	mov	r1, r5
 800cec0:	4638      	mov	r0, r7
 800cec2:	f7ff ff6d 	bl	800cda0 <__ssputs_r>
 800cec6:	3001      	adds	r0, #1
 800cec8:	f000 80aa 	beq.w	800d020 <_svfiprintf_r+0x1c8>
 800cecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cece:	445a      	add	r2, fp
 800ced0:	9209      	str	r2, [sp, #36]	; 0x24
 800ced2:	f89a 3000 	ldrb.w	r3, [sl]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 80a2 	beq.w	800d020 <_svfiprintf_r+0x1c8>
 800cedc:	2300      	movs	r3, #0
 800cede:	f04f 32ff 	mov.w	r2, #4294967295
 800cee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cee6:	f10a 0a01 	add.w	sl, sl, #1
 800ceea:	9304      	str	r3, [sp, #16]
 800ceec:	9307      	str	r3, [sp, #28]
 800ceee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cef2:	931a      	str	r3, [sp, #104]	; 0x68
 800cef4:	4654      	mov	r4, sl
 800cef6:	2205      	movs	r2, #5
 800cef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cefc:	4851      	ldr	r0, [pc, #324]	; (800d044 <_svfiprintf_r+0x1ec>)
 800cefe:	f000 fa41 	bl	800d384 <memchr>
 800cf02:	9a04      	ldr	r2, [sp, #16]
 800cf04:	b9d8      	cbnz	r0, 800cf3e <_svfiprintf_r+0xe6>
 800cf06:	06d0      	lsls	r0, r2, #27
 800cf08:	bf44      	itt	mi
 800cf0a:	2320      	movmi	r3, #32
 800cf0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf10:	0711      	lsls	r1, r2, #28
 800cf12:	bf44      	itt	mi
 800cf14:	232b      	movmi	r3, #43	; 0x2b
 800cf16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf20:	d015      	beq.n	800cf4e <_svfiprintf_r+0xf6>
 800cf22:	4654      	mov	r4, sl
 800cf24:	2000      	movs	r0, #0
 800cf26:	f04f 0c0a 	mov.w	ip, #10
 800cf2a:	9a07      	ldr	r2, [sp, #28]
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf32:	3b30      	subs	r3, #48	; 0x30
 800cf34:	2b09      	cmp	r3, #9
 800cf36:	d94e      	bls.n	800cfd6 <_svfiprintf_r+0x17e>
 800cf38:	b1b0      	cbz	r0, 800cf68 <_svfiprintf_r+0x110>
 800cf3a:	9207      	str	r2, [sp, #28]
 800cf3c:	e014      	b.n	800cf68 <_svfiprintf_r+0x110>
 800cf3e:	eba0 0308 	sub.w	r3, r0, r8
 800cf42:	fa09 f303 	lsl.w	r3, r9, r3
 800cf46:	4313      	orrs	r3, r2
 800cf48:	46a2      	mov	sl, r4
 800cf4a:	9304      	str	r3, [sp, #16]
 800cf4c:	e7d2      	b.n	800cef4 <_svfiprintf_r+0x9c>
 800cf4e:	9b03      	ldr	r3, [sp, #12]
 800cf50:	1d19      	adds	r1, r3, #4
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	9103      	str	r1, [sp, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	bfbb      	ittet	lt
 800cf5a:	425b      	neglt	r3, r3
 800cf5c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf60:	9307      	strge	r3, [sp, #28]
 800cf62:	9307      	strlt	r3, [sp, #28]
 800cf64:	bfb8      	it	lt
 800cf66:	9204      	strlt	r2, [sp, #16]
 800cf68:	7823      	ldrb	r3, [r4, #0]
 800cf6a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf6c:	d10c      	bne.n	800cf88 <_svfiprintf_r+0x130>
 800cf6e:	7863      	ldrb	r3, [r4, #1]
 800cf70:	2b2a      	cmp	r3, #42	; 0x2a
 800cf72:	d135      	bne.n	800cfe0 <_svfiprintf_r+0x188>
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	3402      	adds	r4, #2
 800cf78:	1d1a      	adds	r2, r3, #4
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	9203      	str	r2, [sp, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	bfb8      	it	lt
 800cf82:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf86:	9305      	str	r3, [sp, #20]
 800cf88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d054 <_svfiprintf_r+0x1fc>
 800cf8c:	2203      	movs	r2, #3
 800cf8e:	4650      	mov	r0, sl
 800cf90:	7821      	ldrb	r1, [r4, #0]
 800cf92:	f000 f9f7 	bl	800d384 <memchr>
 800cf96:	b140      	cbz	r0, 800cfaa <_svfiprintf_r+0x152>
 800cf98:	2340      	movs	r3, #64	; 0x40
 800cf9a:	eba0 000a 	sub.w	r0, r0, sl
 800cf9e:	fa03 f000 	lsl.w	r0, r3, r0
 800cfa2:	9b04      	ldr	r3, [sp, #16]
 800cfa4:	3401      	adds	r4, #1
 800cfa6:	4303      	orrs	r3, r0
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfae:	2206      	movs	r2, #6
 800cfb0:	4825      	ldr	r0, [pc, #148]	; (800d048 <_svfiprintf_r+0x1f0>)
 800cfb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfb6:	f000 f9e5 	bl	800d384 <memchr>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d038      	beq.n	800d030 <_svfiprintf_r+0x1d8>
 800cfbe:	4b23      	ldr	r3, [pc, #140]	; (800d04c <_svfiprintf_r+0x1f4>)
 800cfc0:	bb1b      	cbnz	r3, 800d00a <_svfiprintf_r+0x1b2>
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	3307      	adds	r3, #7
 800cfc6:	f023 0307 	bic.w	r3, r3, #7
 800cfca:	3308      	adds	r3, #8
 800cfcc:	9303      	str	r3, [sp, #12]
 800cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd0:	4433      	add	r3, r6
 800cfd2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd4:	e767      	b.n	800cea6 <_svfiprintf_r+0x4e>
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	2001      	movs	r0, #1
 800cfda:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfde:	e7a5      	b.n	800cf2c <_svfiprintf_r+0xd4>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f04f 0c0a 	mov.w	ip, #10
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	3401      	adds	r4, #1
 800cfea:	9305      	str	r3, [sp, #20]
 800cfec:	4620      	mov	r0, r4
 800cfee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff2:	3a30      	subs	r2, #48	; 0x30
 800cff4:	2a09      	cmp	r2, #9
 800cff6:	d903      	bls.n	800d000 <_svfiprintf_r+0x1a8>
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d0c5      	beq.n	800cf88 <_svfiprintf_r+0x130>
 800cffc:	9105      	str	r1, [sp, #20]
 800cffe:	e7c3      	b.n	800cf88 <_svfiprintf_r+0x130>
 800d000:	4604      	mov	r4, r0
 800d002:	2301      	movs	r3, #1
 800d004:	fb0c 2101 	mla	r1, ip, r1, r2
 800d008:	e7f0      	b.n	800cfec <_svfiprintf_r+0x194>
 800d00a:	ab03      	add	r3, sp, #12
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	462a      	mov	r2, r5
 800d010:	4638      	mov	r0, r7
 800d012:	4b0f      	ldr	r3, [pc, #60]	; (800d050 <_svfiprintf_r+0x1f8>)
 800d014:	a904      	add	r1, sp, #16
 800d016:	f3af 8000 	nop.w
 800d01a:	1c42      	adds	r2, r0, #1
 800d01c:	4606      	mov	r6, r0
 800d01e:	d1d6      	bne.n	800cfce <_svfiprintf_r+0x176>
 800d020:	89ab      	ldrh	r3, [r5, #12]
 800d022:	065b      	lsls	r3, r3, #25
 800d024:	f53f af2c 	bmi.w	800ce80 <_svfiprintf_r+0x28>
 800d028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d02a:	b01d      	add	sp, #116	; 0x74
 800d02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d030:	ab03      	add	r3, sp, #12
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	462a      	mov	r2, r5
 800d036:	4638      	mov	r0, r7
 800d038:	4b05      	ldr	r3, [pc, #20]	; (800d050 <_svfiprintf_r+0x1f8>)
 800d03a:	a904      	add	r1, sp, #16
 800d03c:	f000 f87c 	bl	800d138 <_printf_i>
 800d040:	e7eb      	b.n	800d01a <_svfiprintf_r+0x1c2>
 800d042:	bf00      	nop
 800d044:	0800dcf8 	.word	0x0800dcf8
 800d048:	0800dd02 	.word	0x0800dd02
 800d04c:	00000000 	.word	0x00000000
 800d050:	0800cda1 	.word	0x0800cda1
 800d054:	0800dcfe 	.word	0x0800dcfe

0800d058 <_printf_common>:
 800d058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d05c:	4616      	mov	r6, r2
 800d05e:	4699      	mov	r9, r3
 800d060:	688a      	ldr	r2, [r1, #8]
 800d062:	690b      	ldr	r3, [r1, #16]
 800d064:	4607      	mov	r7, r0
 800d066:	4293      	cmp	r3, r2
 800d068:	bfb8      	it	lt
 800d06a:	4613      	movlt	r3, r2
 800d06c:	6033      	str	r3, [r6, #0]
 800d06e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d072:	460c      	mov	r4, r1
 800d074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d078:	b10a      	cbz	r2, 800d07e <_printf_common+0x26>
 800d07a:	3301      	adds	r3, #1
 800d07c:	6033      	str	r3, [r6, #0]
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	0699      	lsls	r1, r3, #26
 800d082:	bf42      	ittt	mi
 800d084:	6833      	ldrmi	r3, [r6, #0]
 800d086:	3302      	addmi	r3, #2
 800d088:	6033      	strmi	r3, [r6, #0]
 800d08a:	6825      	ldr	r5, [r4, #0]
 800d08c:	f015 0506 	ands.w	r5, r5, #6
 800d090:	d106      	bne.n	800d0a0 <_printf_common+0x48>
 800d092:	f104 0a19 	add.w	sl, r4, #25
 800d096:	68e3      	ldr	r3, [r4, #12]
 800d098:	6832      	ldr	r2, [r6, #0]
 800d09a:	1a9b      	subs	r3, r3, r2
 800d09c:	42ab      	cmp	r3, r5
 800d09e:	dc28      	bgt.n	800d0f2 <_printf_common+0x9a>
 800d0a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0a4:	1e13      	subs	r3, r2, #0
 800d0a6:	6822      	ldr	r2, [r4, #0]
 800d0a8:	bf18      	it	ne
 800d0aa:	2301      	movne	r3, #1
 800d0ac:	0692      	lsls	r2, r2, #26
 800d0ae:	d42d      	bmi.n	800d10c <_printf_common+0xb4>
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	4638      	mov	r0, r7
 800d0b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0b8:	47c0      	blx	r8
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	d020      	beq.n	800d100 <_printf_common+0xa8>
 800d0be:	6823      	ldr	r3, [r4, #0]
 800d0c0:	68e5      	ldr	r5, [r4, #12]
 800d0c2:	f003 0306 	and.w	r3, r3, #6
 800d0c6:	2b04      	cmp	r3, #4
 800d0c8:	bf18      	it	ne
 800d0ca:	2500      	movne	r5, #0
 800d0cc:	6832      	ldr	r2, [r6, #0]
 800d0ce:	f04f 0600 	mov.w	r6, #0
 800d0d2:	68a3      	ldr	r3, [r4, #8]
 800d0d4:	bf08      	it	eq
 800d0d6:	1aad      	subeq	r5, r5, r2
 800d0d8:	6922      	ldr	r2, [r4, #16]
 800d0da:	bf08      	it	eq
 800d0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	bfc4      	itt	gt
 800d0e4:	1a9b      	subgt	r3, r3, r2
 800d0e6:	18ed      	addgt	r5, r5, r3
 800d0e8:	341a      	adds	r4, #26
 800d0ea:	42b5      	cmp	r5, r6
 800d0ec:	d11a      	bne.n	800d124 <_printf_common+0xcc>
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	e008      	b.n	800d104 <_printf_common+0xac>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	4652      	mov	r2, sl
 800d0f6:	4649      	mov	r1, r9
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	47c0      	blx	r8
 800d0fc:	3001      	adds	r0, #1
 800d0fe:	d103      	bne.n	800d108 <_printf_common+0xb0>
 800d100:	f04f 30ff 	mov.w	r0, #4294967295
 800d104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d108:	3501      	adds	r5, #1
 800d10a:	e7c4      	b.n	800d096 <_printf_common+0x3e>
 800d10c:	2030      	movs	r0, #48	; 0x30
 800d10e:	18e1      	adds	r1, r4, r3
 800d110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d114:	1c5a      	adds	r2, r3, #1
 800d116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d11a:	4422      	add	r2, r4
 800d11c:	3302      	adds	r3, #2
 800d11e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d122:	e7c5      	b.n	800d0b0 <_printf_common+0x58>
 800d124:	2301      	movs	r3, #1
 800d126:	4622      	mov	r2, r4
 800d128:	4649      	mov	r1, r9
 800d12a:	4638      	mov	r0, r7
 800d12c:	47c0      	blx	r8
 800d12e:	3001      	adds	r0, #1
 800d130:	d0e6      	beq.n	800d100 <_printf_common+0xa8>
 800d132:	3601      	adds	r6, #1
 800d134:	e7d9      	b.n	800d0ea <_printf_common+0x92>
	...

0800d138 <_printf_i>:
 800d138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d13c:	460c      	mov	r4, r1
 800d13e:	7e27      	ldrb	r7, [r4, #24]
 800d140:	4691      	mov	r9, r2
 800d142:	2f78      	cmp	r7, #120	; 0x78
 800d144:	4680      	mov	r8, r0
 800d146:	469a      	mov	sl, r3
 800d148:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d14a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d14e:	d807      	bhi.n	800d160 <_printf_i+0x28>
 800d150:	2f62      	cmp	r7, #98	; 0x62
 800d152:	d80a      	bhi.n	800d16a <_printf_i+0x32>
 800d154:	2f00      	cmp	r7, #0
 800d156:	f000 80d9 	beq.w	800d30c <_printf_i+0x1d4>
 800d15a:	2f58      	cmp	r7, #88	; 0x58
 800d15c:	f000 80a4 	beq.w	800d2a8 <_printf_i+0x170>
 800d160:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d168:	e03a      	b.n	800d1e0 <_printf_i+0xa8>
 800d16a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d16e:	2b15      	cmp	r3, #21
 800d170:	d8f6      	bhi.n	800d160 <_printf_i+0x28>
 800d172:	a001      	add	r0, pc, #4	; (adr r0, 800d178 <_printf_i+0x40>)
 800d174:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d178:	0800d1d1 	.word	0x0800d1d1
 800d17c:	0800d1e5 	.word	0x0800d1e5
 800d180:	0800d161 	.word	0x0800d161
 800d184:	0800d161 	.word	0x0800d161
 800d188:	0800d161 	.word	0x0800d161
 800d18c:	0800d161 	.word	0x0800d161
 800d190:	0800d1e5 	.word	0x0800d1e5
 800d194:	0800d161 	.word	0x0800d161
 800d198:	0800d161 	.word	0x0800d161
 800d19c:	0800d161 	.word	0x0800d161
 800d1a0:	0800d161 	.word	0x0800d161
 800d1a4:	0800d2f3 	.word	0x0800d2f3
 800d1a8:	0800d215 	.word	0x0800d215
 800d1ac:	0800d2d5 	.word	0x0800d2d5
 800d1b0:	0800d161 	.word	0x0800d161
 800d1b4:	0800d161 	.word	0x0800d161
 800d1b8:	0800d315 	.word	0x0800d315
 800d1bc:	0800d161 	.word	0x0800d161
 800d1c0:	0800d215 	.word	0x0800d215
 800d1c4:	0800d161 	.word	0x0800d161
 800d1c8:	0800d161 	.word	0x0800d161
 800d1cc:	0800d2dd 	.word	0x0800d2dd
 800d1d0:	680b      	ldr	r3, [r1, #0]
 800d1d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1d6:	1d1a      	adds	r2, r3, #4
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	600a      	str	r2, [r1, #0]
 800d1dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e0a4      	b.n	800d32e <_printf_i+0x1f6>
 800d1e4:	6825      	ldr	r5, [r4, #0]
 800d1e6:	6808      	ldr	r0, [r1, #0]
 800d1e8:	062e      	lsls	r6, r5, #24
 800d1ea:	f100 0304 	add.w	r3, r0, #4
 800d1ee:	d50a      	bpl.n	800d206 <_printf_i+0xce>
 800d1f0:	6805      	ldr	r5, [r0, #0]
 800d1f2:	600b      	str	r3, [r1, #0]
 800d1f4:	2d00      	cmp	r5, #0
 800d1f6:	da03      	bge.n	800d200 <_printf_i+0xc8>
 800d1f8:	232d      	movs	r3, #45	; 0x2d
 800d1fa:	426d      	negs	r5, r5
 800d1fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d200:	230a      	movs	r3, #10
 800d202:	485e      	ldr	r0, [pc, #376]	; (800d37c <_printf_i+0x244>)
 800d204:	e019      	b.n	800d23a <_printf_i+0x102>
 800d206:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d20a:	6805      	ldr	r5, [r0, #0]
 800d20c:	600b      	str	r3, [r1, #0]
 800d20e:	bf18      	it	ne
 800d210:	b22d      	sxthne	r5, r5
 800d212:	e7ef      	b.n	800d1f4 <_printf_i+0xbc>
 800d214:	680b      	ldr	r3, [r1, #0]
 800d216:	6825      	ldr	r5, [r4, #0]
 800d218:	1d18      	adds	r0, r3, #4
 800d21a:	6008      	str	r0, [r1, #0]
 800d21c:	0628      	lsls	r0, r5, #24
 800d21e:	d501      	bpl.n	800d224 <_printf_i+0xec>
 800d220:	681d      	ldr	r5, [r3, #0]
 800d222:	e002      	b.n	800d22a <_printf_i+0xf2>
 800d224:	0669      	lsls	r1, r5, #25
 800d226:	d5fb      	bpl.n	800d220 <_printf_i+0xe8>
 800d228:	881d      	ldrh	r5, [r3, #0]
 800d22a:	2f6f      	cmp	r7, #111	; 0x6f
 800d22c:	bf0c      	ite	eq
 800d22e:	2308      	moveq	r3, #8
 800d230:	230a      	movne	r3, #10
 800d232:	4852      	ldr	r0, [pc, #328]	; (800d37c <_printf_i+0x244>)
 800d234:	2100      	movs	r1, #0
 800d236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d23a:	6866      	ldr	r6, [r4, #4]
 800d23c:	2e00      	cmp	r6, #0
 800d23e:	bfa8      	it	ge
 800d240:	6821      	ldrge	r1, [r4, #0]
 800d242:	60a6      	str	r6, [r4, #8]
 800d244:	bfa4      	itt	ge
 800d246:	f021 0104 	bicge.w	r1, r1, #4
 800d24a:	6021      	strge	r1, [r4, #0]
 800d24c:	b90d      	cbnz	r5, 800d252 <_printf_i+0x11a>
 800d24e:	2e00      	cmp	r6, #0
 800d250:	d04d      	beq.n	800d2ee <_printf_i+0x1b6>
 800d252:	4616      	mov	r6, r2
 800d254:	fbb5 f1f3 	udiv	r1, r5, r3
 800d258:	fb03 5711 	mls	r7, r3, r1, r5
 800d25c:	5dc7      	ldrb	r7, [r0, r7]
 800d25e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d262:	462f      	mov	r7, r5
 800d264:	42bb      	cmp	r3, r7
 800d266:	460d      	mov	r5, r1
 800d268:	d9f4      	bls.n	800d254 <_printf_i+0x11c>
 800d26a:	2b08      	cmp	r3, #8
 800d26c:	d10b      	bne.n	800d286 <_printf_i+0x14e>
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	07df      	lsls	r7, r3, #31
 800d272:	d508      	bpl.n	800d286 <_printf_i+0x14e>
 800d274:	6923      	ldr	r3, [r4, #16]
 800d276:	6861      	ldr	r1, [r4, #4]
 800d278:	4299      	cmp	r1, r3
 800d27a:	bfde      	ittt	le
 800d27c:	2330      	movle	r3, #48	; 0x30
 800d27e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d282:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d286:	1b92      	subs	r2, r2, r6
 800d288:	6122      	str	r2, [r4, #16]
 800d28a:	464b      	mov	r3, r9
 800d28c:	4621      	mov	r1, r4
 800d28e:	4640      	mov	r0, r8
 800d290:	f8cd a000 	str.w	sl, [sp]
 800d294:	aa03      	add	r2, sp, #12
 800d296:	f7ff fedf 	bl	800d058 <_printf_common>
 800d29a:	3001      	adds	r0, #1
 800d29c:	d14c      	bne.n	800d338 <_printf_i+0x200>
 800d29e:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a2:	b004      	add	sp, #16
 800d2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a8:	4834      	ldr	r0, [pc, #208]	; (800d37c <_printf_i+0x244>)
 800d2aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2ae:	680e      	ldr	r6, [r1, #0]
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2b6:	061f      	lsls	r7, r3, #24
 800d2b8:	600e      	str	r6, [r1, #0]
 800d2ba:	d514      	bpl.n	800d2e6 <_printf_i+0x1ae>
 800d2bc:	07d9      	lsls	r1, r3, #31
 800d2be:	bf44      	itt	mi
 800d2c0:	f043 0320 	orrmi.w	r3, r3, #32
 800d2c4:	6023      	strmi	r3, [r4, #0]
 800d2c6:	b91d      	cbnz	r5, 800d2d0 <_printf_i+0x198>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	f023 0320 	bic.w	r3, r3, #32
 800d2ce:	6023      	str	r3, [r4, #0]
 800d2d0:	2310      	movs	r3, #16
 800d2d2:	e7af      	b.n	800d234 <_printf_i+0xfc>
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	f043 0320 	orr.w	r3, r3, #32
 800d2da:	6023      	str	r3, [r4, #0]
 800d2dc:	2378      	movs	r3, #120	; 0x78
 800d2de:	4828      	ldr	r0, [pc, #160]	; (800d380 <_printf_i+0x248>)
 800d2e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2e4:	e7e3      	b.n	800d2ae <_printf_i+0x176>
 800d2e6:	065e      	lsls	r6, r3, #25
 800d2e8:	bf48      	it	mi
 800d2ea:	b2ad      	uxthmi	r5, r5
 800d2ec:	e7e6      	b.n	800d2bc <_printf_i+0x184>
 800d2ee:	4616      	mov	r6, r2
 800d2f0:	e7bb      	b.n	800d26a <_printf_i+0x132>
 800d2f2:	680b      	ldr	r3, [r1, #0]
 800d2f4:	6826      	ldr	r6, [r4, #0]
 800d2f6:	1d1d      	adds	r5, r3, #4
 800d2f8:	6960      	ldr	r0, [r4, #20]
 800d2fa:	600d      	str	r5, [r1, #0]
 800d2fc:	0635      	lsls	r5, r6, #24
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	d501      	bpl.n	800d306 <_printf_i+0x1ce>
 800d302:	6018      	str	r0, [r3, #0]
 800d304:	e002      	b.n	800d30c <_printf_i+0x1d4>
 800d306:	0671      	lsls	r1, r6, #25
 800d308:	d5fb      	bpl.n	800d302 <_printf_i+0x1ca>
 800d30a:	8018      	strh	r0, [r3, #0]
 800d30c:	2300      	movs	r3, #0
 800d30e:	4616      	mov	r6, r2
 800d310:	6123      	str	r3, [r4, #16]
 800d312:	e7ba      	b.n	800d28a <_printf_i+0x152>
 800d314:	680b      	ldr	r3, [r1, #0]
 800d316:	1d1a      	adds	r2, r3, #4
 800d318:	600a      	str	r2, [r1, #0]
 800d31a:	681e      	ldr	r6, [r3, #0]
 800d31c:	2100      	movs	r1, #0
 800d31e:	4630      	mov	r0, r6
 800d320:	6862      	ldr	r2, [r4, #4]
 800d322:	f000 f82f 	bl	800d384 <memchr>
 800d326:	b108      	cbz	r0, 800d32c <_printf_i+0x1f4>
 800d328:	1b80      	subs	r0, r0, r6
 800d32a:	6060      	str	r0, [r4, #4]
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	6123      	str	r3, [r4, #16]
 800d330:	2300      	movs	r3, #0
 800d332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d336:	e7a8      	b.n	800d28a <_printf_i+0x152>
 800d338:	4632      	mov	r2, r6
 800d33a:	4649      	mov	r1, r9
 800d33c:	4640      	mov	r0, r8
 800d33e:	6923      	ldr	r3, [r4, #16]
 800d340:	47d0      	blx	sl
 800d342:	3001      	adds	r0, #1
 800d344:	d0ab      	beq.n	800d29e <_printf_i+0x166>
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	079b      	lsls	r3, r3, #30
 800d34a:	d413      	bmi.n	800d374 <_printf_i+0x23c>
 800d34c:	68e0      	ldr	r0, [r4, #12]
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	4298      	cmp	r0, r3
 800d352:	bfb8      	it	lt
 800d354:	4618      	movlt	r0, r3
 800d356:	e7a4      	b.n	800d2a2 <_printf_i+0x16a>
 800d358:	2301      	movs	r3, #1
 800d35a:	4632      	mov	r2, r6
 800d35c:	4649      	mov	r1, r9
 800d35e:	4640      	mov	r0, r8
 800d360:	47d0      	blx	sl
 800d362:	3001      	adds	r0, #1
 800d364:	d09b      	beq.n	800d29e <_printf_i+0x166>
 800d366:	3501      	adds	r5, #1
 800d368:	68e3      	ldr	r3, [r4, #12]
 800d36a:	9903      	ldr	r1, [sp, #12]
 800d36c:	1a5b      	subs	r3, r3, r1
 800d36e:	42ab      	cmp	r3, r5
 800d370:	dcf2      	bgt.n	800d358 <_printf_i+0x220>
 800d372:	e7eb      	b.n	800d34c <_printf_i+0x214>
 800d374:	2500      	movs	r5, #0
 800d376:	f104 0619 	add.w	r6, r4, #25
 800d37a:	e7f5      	b.n	800d368 <_printf_i+0x230>
 800d37c:	0800dd09 	.word	0x0800dd09
 800d380:	0800dd1a 	.word	0x0800dd1a

0800d384 <memchr>:
 800d384:	4603      	mov	r3, r0
 800d386:	b510      	push	{r4, lr}
 800d388:	b2c9      	uxtb	r1, r1
 800d38a:	4402      	add	r2, r0
 800d38c:	4293      	cmp	r3, r2
 800d38e:	4618      	mov	r0, r3
 800d390:	d101      	bne.n	800d396 <memchr+0x12>
 800d392:	2000      	movs	r0, #0
 800d394:	e003      	b.n	800d39e <memchr+0x1a>
 800d396:	7804      	ldrb	r4, [r0, #0]
 800d398:	3301      	adds	r3, #1
 800d39a:	428c      	cmp	r4, r1
 800d39c:	d1f6      	bne.n	800d38c <memchr+0x8>
 800d39e:	bd10      	pop	{r4, pc}

0800d3a0 <memcpy>:
 800d3a0:	440a      	add	r2, r1
 800d3a2:	4291      	cmp	r1, r2
 800d3a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3a8:	d100      	bne.n	800d3ac <memcpy+0xc>
 800d3aa:	4770      	bx	lr
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3b2:	4291      	cmp	r1, r2
 800d3b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3b8:	d1f9      	bne.n	800d3ae <memcpy+0xe>
 800d3ba:	bd10      	pop	{r4, pc}

0800d3bc <memmove>:
 800d3bc:	4288      	cmp	r0, r1
 800d3be:	b510      	push	{r4, lr}
 800d3c0:	eb01 0402 	add.w	r4, r1, r2
 800d3c4:	d902      	bls.n	800d3cc <memmove+0x10>
 800d3c6:	4284      	cmp	r4, r0
 800d3c8:	4623      	mov	r3, r4
 800d3ca:	d807      	bhi.n	800d3dc <memmove+0x20>
 800d3cc:	1e43      	subs	r3, r0, #1
 800d3ce:	42a1      	cmp	r1, r4
 800d3d0:	d008      	beq.n	800d3e4 <memmove+0x28>
 800d3d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3da:	e7f8      	b.n	800d3ce <memmove+0x12>
 800d3dc:	4601      	mov	r1, r0
 800d3de:	4402      	add	r2, r0
 800d3e0:	428a      	cmp	r2, r1
 800d3e2:	d100      	bne.n	800d3e6 <memmove+0x2a>
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3ee:	e7f7      	b.n	800d3e0 <memmove+0x24>

0800d3f0 <_free_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	2900      	cmp	r1, #0
 800d3f6:	d043      	beq.n	800d480 <_free_r+0x90>
 800d3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fc:	1f0c      	subs	r4, r1, #4
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	bfb8      	it	lt
 800d402:	18e4      	addlt	r4, r4, r3
 800d404:	f000 f8d0 	bl	800d5a8 <__malloc_lock>
 800d408:	4a1e      	ldr	r2, [pc, #120]	; (800d484 <_free_r+0x94>)
 800d40a:	6813      	ldr	r3, [r2, #0]
 800d40c:	4610      	mov	r0, r2
 800d40e:	b933      	cbnz	r3, 800d41e <_free_r+0x2e>
 800d410:	6063      	str	r3, [r4, #4]
 800d412:	6014      	str	r4, [r2, #0]
 800d414:	4628      	mov	r0, r5
 800d416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d41a:	f000 b8cb 	b.w	800d5b4 <__malloc_unlock>
 800d41e:	42a3      	cmp	r3, r4
 800d420:	d90a      	bls.n	800d438 <_free_r+0x48>
 800d422:	6821      	ldr	r1, [r4, #0]
 800d424:	1862      	adds	r2, r4, r1
 800d426:	4293      	cmp	r3, r2
 800d428:	bf01      	itttt	eq
 800d42a:	681a      	ldreq	r2, [r3, #0]
 800d42c:	685b      	ldreq	r3, [r3, #4]
 800d42e:	1852      	addeq	r2, r2, r1
 800d430:	6022      	streq	r2, [r4, #0]
 800d432:	6063      	str	r3, [r4, #4]
 800d434:	6004      	str	r4, [r0, #0]
 800d436:	e7ed      	b.n	800d414 <_free_r+0x24>
 800d438:	461a      	mov	r2, r3
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	b10b      	cbz	r3, 800d442 <_free_r+0x52>
 800d43e:	42a3      	cmp	r3, r4
 800d440:	d9fa      	bls.n	800d438 <_free_r+0x48>
 800d442:	6811      	ldr	r1, [r2, #0]
 800d444:	1850      	adds	r0, r2, r1
 800d446:	42a0      	cmp	r0, r4
 800d448:	d10b      	bne.n	800d462 <_free_r+0x72>
 800d44a:	6820      	ldr	r0, [r4, #0]
 800d44c:	4401      	add	r1, r0
 800d44e:	1850      	adds	r0, r2, r1
 800d450:	4283      	cmp	r3, r0
 800d452:	6011      	str	r1, [r2, #0]
 800d454:	d1de      	bne.n	800d414 <_free_r+0x24>
 800d456:	6818      	ldr	r0, [r3, #0]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	4401      	add	r1, r0
 800d45c:	6011      	str	r1, [r2, #0]
 800d45e:	6053      	str	r3, [r2, #4]
 800d460:	e7d8      	b.n	800d414 <_free_r+0x24>
 800d462:	d902      	bls.n	800d46a <_free_r+0x7a>
 800d464:	230c      	movs	r3, #12
 800d466:	602b      	str	r3, [r5, #0]
 800d468:	e7d4      	b.n	800d414 <_free_r+0x24>
 800d46a:	6820      	ldr	r0, [r4, #0]
 800d46c:	1821      	adds	r1, r4, r0
 800d46e:	428b      	cmp	r3, r1
 800d470:	bf01      	itttt	eq
 800d472:	6819      	ldreq	r1, [r3, #0]
 800d474:	685b      	ldreq	r3, [r3, #4]
 800d476:	1809      	addeq	r1, r1, r0
 800d478:	6021      	streq	r1, [r4, #0]
 800d47a:	6063      	str	r3, [r4, #4]
 800d47c:	6054      	str	r4, [r2, #4]
 800d47e:	e7c9      	b.n	800d414 <_free_r+0x24>
 800d480:	bd38      	pop	{r3, r4, r5, pc}
 800d482:	bf00      	nop
 800d484:	200002d8 	.word	0x200002d8

0800d488 <_malloc_r>:
 800d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48a:	1ccd      	adds	r5, r1, #3
 800d48c:	f025 0503 	bic.w	r5, r5, #3
 800d490:	3508      	adds	r5, #8
 800d492:	2d0c      	cmp	r5, #12
 800d494:	bf38      	it	cc
 800d496:	250c      	movcc	r5, #12
 800d498:	2d00      	cmp	r5, #0
 800d49a:	4606      	mov	r6, r0
 800d49c:	db01      	blt.n	800d4a2 <_malloc_r+0x1a>
 800d49e:	42a9      	cmp	r1, r5
 800d4a0:	d903      	bls.n	800d4aa <_malloc_r+0x22>
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	6033      	str	r3, [r6, #0]
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4aa:	f000 f87d 	bl	800d5a8 <__malloc_lock>
 800d4ae:	4921      	ldr	r1, [pc, #132]	; (800d534 <_malloc_r+0xac>)
 800d4b0:	680a      	ldr	r2, [r1, #0]
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	b99c      	cbnz	r4, 800d4de <_malloc_r+0x56>
 800d4b6:	4f20      	ldr	r7, [pc, #128]	; (800d538 <_malloc_r+0xb0>)
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	b923      	cbnz	r3, 800d4c6 <_malloc_r+0x3e>
 800d4bc:	4621      	mov	r1, r4
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f000 f862 	bl	800d588 <_sbrk_r>
 800d4c4:	6038      	str	r0, [r7, #0]
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f000 f85d 	bl	800d588 <_sbrk_r>
 800d4ce:	1c43      	adds	r3, r0, #1
 800d4d0:	d123      	bne.n	800d51a <_malloc_r+0x92>
 800d4d2:	230c      	movs	r3, #12
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	6033      	str	r3, [r6, #0]
 800d4d8:	f000 f86c 	bl	800d5b4 <__malloc_unlock>
 800d4dc:	e7e3      	b.n	800d4a6 <_malloc_r+0x1e>
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	1b5b      	subs	r3, r3, r5
 800d4e2:	d417      	bmi.n	800d514 <_malloc_r+0x8c>
 800d4e4:	2b0b      	cmp	r3, #11
 800d4e6:	d903      	bls.n	800d4f0 <_malloc_r+0x68>
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	441c      	add	r4, r3
 800d4ec:	6025      	str	r5, [r4, #0]
 800d4ee:	e004      	b.n	800d4fa <_malloc_r+0x72>
 800d4f0:	6863      	ldr	r3, [r4, #4]
 800d4f2:	42a2      	cmp	r2, r4
 800d4f4:	bf0c      	ite	eq
 800d4f6:	600b      	streq	r3, [r1, #0]
 800d4f8:	6053      	strne	r3, [r2, #4]
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f000 f85a 	bl	800d5b4 <__malloc_unlock>
 800d500:	f104 000b 	add.w	r0, r4, #11
 800d504:	1d23      	adds	r3, r4, #4
 800d506:	f020 0007 	bic.w	r0, r0, #7
 800d50a:	1ac2      	subs	r2, r0, r3
 800d50c:	d0cc      	beq.n	800d4a8 <_malloc_r+0x20>
 800d50e:	1a1b      	subs	r3, r3, r0
 800d510:	50a3      	str	r3, [r4, r2]
 800d512:	e7c9      	b.n	800d4a8 <_malloc_r+0x20>
 800d514:	4622      	mov	r2, r4
 800d516:	6864      	ldr	r4, [r4, #4]
 800d518:	e7cc      	b.n	800d4b4 <_malloc_r+0x2c>
 800d51a:	1cc4      	adds	r4, r0, #3
 800d51c:	f024 0403 	bic.w	r4, r4, #3
 800d520:	42a0      	cmp	r0, r4
 800d522:	d0e3      	beq.n	800d4ec <_malloc_r+0x64>
 800d524:	1a21      	subs	r1, r4, r0
 800d526:	4630      	mov	r0, r6
 800d528:	f000 f82e 	bl	800d588 <_sbrk_r>
 800d52c:	3001      	adds	r0, #1
 800d52e:	d1dd      	bne.n	800d4ec <_malloc_r+0x64>
 800d530:	e7cf      	b.n	800d4d2 <_malloc_r+0x4a>
 800d532:	bf00      	nop
 800d534:	200002d8 	.word	0x200002d8
 800d538:	200002dc 	.word	0x200002dc

0800d53c <_realloc_r>:
 800d53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53e:	4607      	mov	r7, r0
 800d540:	4614      	mov	r4, r2
 800d542:	460e      	mov	r6, r1
 800d544:	b921      	cbnz	r1, 800d550 <_realloc_r+0x14>
 800d546:	4611      	mov	r1, r2
 800d548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d54c:	f7ff bf9c 	b.w	800d488 <_malloc_r>
 800d550:	b922      	cbnz	r2, 800d55c <_realloc_r+0x20>
 800d552:	f7ff ff4d 	bl	800d3f0 <_free_r>
 800d556:	4625      	mov	r5, r4
 800d558:	4628      	mov	r0, r5
 800d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d55c:	f000 f830 	bl	800d5c0 <_malloc_usable_size_r>
 800d560:	42a0      	cmp	r0, r4
 800d562:	d20f      	bcs.n	800d584 <_realloc_r+0x48>
 800d564:	4621      	mov	r1, r4
 800d566:	4638      	mov	r0, r7
 800d568:	f7ff ff8e 	bl	800d488 <_malloc_r>
 800d56c:	4605      	mov	r5, r0
 800d56e:	2800      	cmp	r0, #0
 800d570:	d0f2      	beq.n	800d558 <_realloc_r+0x1c>
 800d572:	4631      	mov	r1, r6
 800d574:	4622      	mov	r2, r4
 800d576:	f7ff ff13 	bl	800d3a0 <memcpy>
 800d57a:	4631      	mov	r1, r6
 800d57c:	4638      	mov	r0, r7
 800d57e:	f7ff ff37 	bl	800d3f0 <_free_r>
 800d582:	e7e9      	b.n	800d558 <_realloc_r+0x1c>
 800d584:	4635      	mov	r5, r6
 800d586:	e7e7      	b.n	800d558 <_realloc_r+0x1c>

0800d588 <_sbrk_r>:
 800d588:	b538      	push	{r3, r4, r5, lr}
 800d58a:	2300      	movs	r3, #0
 800d58c:	4d05      	ldr	r5, [pc, #20]	; (800d5a4 <_sbrk_r+0x1c>)
 800d58e:	4604      	mov	r4, r0
 800d590:	4608      	mov	r0, r1
 800d592:	602b      	str	r3, [r5, #0]
 800d594:	f7f6 f9ce 	bl	8003934 <_sbrk>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d102      	bne.n	800d5a2 <_sbrk_r+0x1a>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	b103      	cbz	r3, 800d5a2 <_sbrk_r+0x1a>
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	20001388 	.word	0x20001388

0800d5a8 <__malloc_lock>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	; (800d5b0 <__malloc_lock+0x8>)
 800d5aa:	f000 b811 	b.w	800d5d0 <__retarget_lock_acquire_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	20001390 	.word	0x20001390

0800d5b4 <__malloc_unlock>:
 800d5b4:	4801      	ldr	r0, [pc, #4]	; (800d5bc <__malloc_unlock+0x8>)
 800d5b6:	f000 b80c 	b.w	800d5d2 <__retarget_lock_release_recursive>
 800d5ba:	bf00      	nop
 800d5bc:	20001390 	.word	0x20001390

0800d5c0 <_malloc_usable_size_r>:
 800d5c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5c4:	1f18      	subs	r0, r3, #4
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	bfbc      	itt	lt
 800d5ca:	580b      	ldrlt	r3, [r1, r0]
 800d5cc:	18c0      	addlt	r0, r0, r3
 800d5ce:	4770      	bx	lr

0800d5d0 <__retarget_lock_acquire_recursive>:
 800d5d0:	4770      	bx	lr

0800d5d2 <__retarget_lock_release_recursive>:
 800d5d2:	4770      	bx	lr

0800d5d4 <_init>:
 800d5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d6:	bf00      	nop
 800d5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5da:	bc08      	pop	{r3}
 800d5dc:	469e      	mov	lr, r3
 800d5de:	4770      	bx	lr

0800d5e0 <_fini>:
 800d5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e2:	bf00      	nop
 800d5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e6:	bc08      	pop	{r3}
 800d5e8:	469e      	mov	lr, r3
 800d5ea:	4770      	bx	lr
