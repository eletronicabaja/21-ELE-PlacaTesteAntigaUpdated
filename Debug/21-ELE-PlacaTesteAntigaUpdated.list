
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800d5f0  0800d5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd30  0800dd30  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd30  0800dd30  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd30  0800dd30  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd30  0800dd30  0001dd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd34  0800dd34  0001dd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800dd38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001310  20000088  0800ddc0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  0800ddc0  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b4f  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af3  00000000  00000000  00043c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  000486f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  0004a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca5f  00000000  00000000  0004b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221e4  00000000  00000000  000682e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009898b  00000000  00000000  0008a4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122e56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007014  00000000  00000000  00122eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d5d8 	.word	0x0800d5d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800d5d8 	.word	0x0800d5d8

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_f2iz>:
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e78:	d30f      	bcc.n	8000e9a <__aeabi_f2iz+0x2a>
 8000e7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e82:	d90d      	bls.n	8000ea0 <__aeabi_f2iz+0x30>
 8000e84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e8c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e90:	fa23 f002 	lsr.w	r0, r3, r2
 8000e94:	bf18      	it	ne
 8000e96:	4240      	negne	r0, r0
 8000e98:	4770      	bx	lr
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	4770      	bx	lr
 8000ea0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_f2iz+0x3a>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d105      	bne.n	8000eb6 <__aeabi_f2iz+0x46>
 8000eaa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	bf08      	it	eq
 8000eb0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	4770      	bx	lr

08000ebc <ADC_DMA_Init>:
 */

#include <ADC_DMA.h>

void ADC_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <ADC_DMA_Init+0x2c>)
 8000ec2:	f003 fa19 	bl	80042f8 <HAL_ADCEx_Calibration_Start>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <ADC_DMA_Init+0x14>
		Error_Handler();
 8000ecc:	f001 fd0c 	bl	80028e8 <Error_Handler>
	if (HAL_ADC_Start_DMA(&hadc1, &analog.buffer, ADC_BUF_SIZE) != HAL_OK)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4906      	ldr	r1, [pc, #24]	; (8000eec <ADC_DMA_Init+0x30>)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <ADC_DMA_Init+0x2c>)
 8000ed6:	f002 ff1b 	bl	8003d10 <HAL_ADC_Start_DMA>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <ADC_DMA_Init+0x28>
		Error_Handler();
 8000ee0:	f001 fd02 	bl	80028e8 <Error_Handler>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200002e4 	.word	0x200002e4
 8000eec:	200002e0 	.word	0x200002e0

08000ef0 <aceGir_Init>:
 */

#include "ace_gir.h"

HAL_StatusTypeDef aceGir_Init(I2C_HandleTypeDef *hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	6078      	str	r0, [r7, #4]

	aceGir.hi2c = hi2c;
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <aceGir_Init+0x114>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef result;
	uint8_t check;
	uint8_t dados;

	// checar se o módulo está conectado
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <aceGir_Init+0x114>)
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f107 030e 	add.w	r3, r7, #14
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2275      	movs	r2, #117	; 0x75
 8000f16:	21d0      	movs	r1, #208	; 0xd0
 8000f18:	f004 ffa4 	bl	8005e64 <HAL_I2C_Mem_Read>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK)
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <aceGir_Init+0x3a>
		return result;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e068      	b.n	8000ffc <aceGir_Init+0x10c>

	if (check == 104)  // 0x68 = 104 -> será retornado seu o modulo estiver OK
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	2b68      	cmp	r3, #104	; 0x68
 8000f2e:	d15f      	bne.n	8000ff0 <aceGir_Init+0x100>
	{
		// ligar sensor
		dados = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&dados, 1, 1000);
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <aceGir_Init+0x114>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	f107 030d 	add.w	r3, r7, #13
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	226b      	movs	r2, #107	; 0x6b
 8000f4c:	21d0      	movs	r1, #208	; 0xd0
 8000f4e:	f004 fe8f 	bl	8005c70 <HAL_I2C_Mem_Write>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <aceGir_Init+0x70>
			return result;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	e04d      	b.n	8000ffc <aceGir_Init+0x10c>

		// definir frequencia de 1khz
		dados = 0x07;
 8000f60:	2307      	movs	r3, #7
 8000f62:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &dados, 1, 1000);
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <aceGir_Init+0x114>)
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	f107 030d 	add.w	r3, r7, #13
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	2219      	movs	r2, #25
 8000f7c:	21d0      	movs	r1, #208	; 0xd0
 8000f7e:	f004 fe77 	bl	8005c70 <HAL_I2C_Mem_Write>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <aceGir_Init+0xa0>
			return result;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	e035      	b.n	8000ffc <aceGir_Init+0x10c>

		// definir configuracao de acelerometro
		dados = 0x00;
 8000f90:	2300      	movs	r3, #0
 8000f92:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &dados, 1, 1000);
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <aceGir_Init+0x114>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	f107 030d 	add.w	r3, r7, #13
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	221c      	movs	r2, #28
 8000fac:	21d0      	movs	r1, #208	; 0xd0
 8000fae:	f004 fe5f 	bl	8005c70 <HAL_I2C_Mem_Write>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <aceGir_Init+0xd0>
			return result;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	e01d      	b.n	8000ffc <aceGir_Init+0x10c>

		// definir configuracao de giroscopio
		dados = 0x00;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &dados, 1, 1000);
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <aceGir_Init+0x114>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030d 	add.w	r3, r7, #13
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	221b      	movs	r2, #27
 8000fdc:	21d0      	movs	r1, #208	; 0xd0
 8000fde:	f004 fe47 	bl	8005c70 <HAL_I2C_Mem_Write>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <aceGir_Init+0x100>
			return result;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	e005      	b.n	8000ffc <aceGir_Init+0x10c>
	}

	result = HAL_TIM_Base_Start_IT(&htim4);
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <aceGir_Init+0x118>)
 8000ff2:	f006 fef3 	bl	8007ddc <HAL_TIM_Base_Start_IT>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]

	return result;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000035c 	.word	0x2000035c
 8001008:	20000314 	.word	0x20000314
 800100c:	00000000 	.word	0x00000000

08001010 <aceGir_Read>:

HAL_StatusTypeDef aceGir_Read(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef result;
	uint8_t buf[6];

	/*	Leitura do Acelerometro	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, buf, 6, 1000);
 8001016:	4b70      	ldr	r3, [pc, #448]	; (80011d8 <aceGir_Read+0x1c8>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2306      	movs	r3, #6
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	463b      	mov	r3, r7
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	223b      	movs	r2, #59	; 0x3b
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	f004 ff19 	bl	8005e64 <HAL_I2C_Mem_Read>
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <aceGir_Read+0x30>
		return result;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	e0c3      	b.n	80011c8 <aceGir_Read+0x1b8>

	aceGir.accel.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8001040:	783b      	ldrb	r3, [r7, #0]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	787b      	ldrb	r3, [r7, #1]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b62      	ldr	r3, [pc, #392]	; (80011d8 <aceGir_Read+0x1c8>)
 8001050:	809a      	strh	r2, [r3, #4]
	aceGir.accel.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <aceGir_Read+0x1c8>)
 8001062:	80da      	strh	r2, [r3, #6]
	aceGir.accel.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <aceGir_Read+0x1c8>)
 8001074:	811a      	strh	r2, [r3, #8]

	//converter valores em 'g', dividindo por 16384 (FS_SEL)=0
	aceGir.accel.x = aceGir.accel.X_RAW/16384.0;
 8001076:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <aceGir_Read+0x1c8>)
 8001078:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa6d 	bl	800055c <__aeabi_i2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b55      	ldr	r3, [pc, #340]	; (80011dc <aceGir_Read+0x1cc>)
 8001088:	f7ff fbfc 	bl	8000884 <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd8e 	bl	8000bb4 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <aceGir_Read+0x1c8>)
 800109c:	60d3      	str	r3, [r2, #12]
	aceGir.accel.y = aceGir.accel.Y_RAW/16384.0;
 800109e:	4b4e      	ldr	r3, [pc, #312]	; (80011d8 <aceGir_Read+0x1c8>)
 80010a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa59 	bl	800055c <__aeabi_i2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <aceGir_Read+0x1cc>)
 80010b0:	f7ff fbe8 	bl	8000884 <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd7a 	bl	8000bb4 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <aceGir_Read+0x1c8>)
 80010c4:	6113      	str	r3, [r2, #16]
	aceGir.accel.z = aceGir.accel.Z_RAW/16384.0;
 80010c6:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <aceGir_Read+0x1c8>)
 80010c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa45 	bl	800055c <__aeabi_i2d>
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b41      	ldr	r3, [pc, #260]	; (80011dc <aceGir_Read+0x1cc>)
 80010d8:	f7ff fbd4 	bl	8000884 <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd66 	bl	8000bb4 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a3b      	ldr	r2, [pc, #236]	; (80011d8 <aceGir_Read+0x1c8>)
 80010ec:	6153      	str	r3, [r2, #20]

	/*	Leitura do Giroscopio	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, buf, 6, 1000);
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <aceGir_Read+0x1c8>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2306      	movs	r3, #6
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	463b      	mov	r3, r7
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	2243      	movs	r2, #67	; 0x43
 8001104:	21d0      	movs	r1, #208	; 0xd0
 8001106:	f004 fead 	bl	8005e64 <HAL_I2C_Mem_Read>
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <aceGir_Read+0x108>
		return result;
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	e057      	b.n	80011c8 <aceGir_Read+0x1b8>

	aceGir.gyro.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8001118:	783b      	ldrb	r3, [r7, #0]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	787b      	ldrb	r3, [r7, #1]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <aceGir_Read+0x1c8>)
 8001128:	831a      	strh	r2, [r3, #24]
	aceGir.gyro.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 800112a:	78bb      	ldrb	r3, [r7, #2]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <aceGir_Read+0x1c8>)
 800113a:	835a      	strh	r2, [r3, #26]
	aceGir.gyro.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 800113c:	793b      	ldrb	r3, [r7, #4]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <aceGir_Read+0x1c8>)
 800114c:	839a      	strh	r2, [r3, #28]

	//converter valores em 'graus/segundo', dividindo por 131 (FS_SEL)=0
	aceGir.gyro.x = aceGir.gyro.X_RAW/131.0;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <aceGir_Read+0x1c8>)
 8001150:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fa01 	bl	800055c <__aeabi_i2d>
 800115a:	a31d      	add	r3, pc, #116	; (adr r3, 80011d0 <aceGir_Read+0x1c0>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fb90 	bl	8000884 <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd22 	bl	8000bb4 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <aceGir_Read+0x1c8>)
 8001174:	6213      	str	r3, [r2, #32]
	aceGir.gyro.y = aceGir.gyro.Y_RAW/131.0;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <aceGir_Read+0x1c8>)
 8001178:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9ed 	bl	800055c <__aeabi_i2d>
 8001182:	a313      	add	r3, pc, #76	; (adr r3, 80011d0 <aceGir_Read+0x1c0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb7c 	bl	8000884 <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd0e 	bl	8000bb4 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <aceGir_Read+0x1c8>)
 800119c:	6253      	str	r3, [r2, #36]	; 0x24
	aceGir.gyro.z = aceGir.gyro.Z_RAW/131.0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <aceGir_Read+0x1c8>)
 80011a0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9d9 	bl	800055c <__aeabi_i2d>
 80011aa:	a309      	add	r3, pc, #36	; (adr r3, 80011d0 <aceGir_Read+0x1c0>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff fb68 	bl	8000884 <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fcfa 	bl	8000bb4 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <aceGir_Read+0x1c8>)
 80011c4:	6293      	str	r3, [r2, #40]	; 0x28



	return result;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40606000 	.word	0x40606000
 80011d8:	2000035c 	.word	0x2000035c
 80011dc:	40d00000 	.word	0x40d00000

080011e0 <can_bus_Init>:

#include "can_bus.h"
#include "ace_gir.h"

void can_bus_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;

	canBus.tx_header.StdId = 				0x000;						//Id Padrão (11Bit)
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <can_bus_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
	canBus.tx_header.ExtId = 				0x000;						//Id Extendido (29Bit, STDID+18)
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <can_bus_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
	canBus.tx_header.IDE = 					CAN_ID_STD;					//Define se está usando id padrão (CAN_ID_STD) ou estendido (CAN_ID_EXT)
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <can_bus_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
	canBus.tx_header.RTR = 					CAN_RTR_DATA;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <can_bus_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
	canBus.tx_header.DLC = 					1;							//Quantidade de bytes por mensagem (1 a 8)
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <can_bus_Init+0x90>)
 8001200:	2201      	movs	r2, #1
 8001202:	61da      	str	r2, [r3, #28]
	canBus.tx_header.TransmitGlobalTime =	DISABLE;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <can_bus_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]

	canBus.filter.FilterIdHigh = 			0x010 << 5;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <can_bus_Init+0x90>)
 800120e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
	canBus.filter.FilterIdLow = 			0x000 << 5;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <can_bus_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
	canBus.filter.FilterMaskIdHigh = 		0x7F0 << 5;
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <can_bus_Init+0x90>)
 800121c:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 8001220:	649a      	str	r2, [r3, #72]	; 0x48
	canBus.filter.FilterMaskIdLow = 		0x000 << 5;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <can_bus_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	64da      	str	r2, [r3, #76]	; 0x4c
	canBus.filter.FilterFIFOAssignment = 	CAN_FILTER_FIFO0;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <can_bus_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	651a      	str	r2, [r3, #80]	; 0x50
	canBus.filter.FilterBank = 				0;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <can_bus_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	655a      	str	r2, [r3, #84]	; 0x54
	canBus.filter.FilterMode = 				CAN_FILTERMODE_IDMASK;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <can_bus_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	659a      	str	r2, [r3, #88]	; 0x58
	canBus.filter.FilterScale = 			CAN_FILTERSCALE_32BIT;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <can_bus_Init+0x90>)
 800123c:	2201      	movs	r2, #1
 800123e:	65da      	str	r2, [r3, #92]	; 0x5c
	canBus.filter.FilterActivation = 		ENABLE;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <can_bus_Init+0x90>)
 8001242:	2201      	movs	r2, #1
 8001244:	661a      	str	r2, [r3, #96]	; 0x60

	result = HAL_CAN_Start(&hcan);
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <can_bus_Init+0x94>)
 8001248:	f003 fac6 	bl	80047d8 <HAL_CAN_Start>
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_ConfigFilter(&hcan, &canBus.filter);
 8001250:	4909      	ldr	r1, [pc, #36]	; (8001278 <can_bus_Init+0x98>)
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <can_bus_Init+0x94>)
 8001254:	f003 f9f7 	bl	8004646 <HAL_CAN_ConfigFilter>
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800125c:	2102      	movs	r1, #2
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <can_bus_Init+0x94>)
 8001260:	f003 fc0f 	bl	8004a82 <HAL_CAN_ActivateNotification>
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000388 	.word	0x20000388
 8001274:	2000040c 	.word	0x2000040c
 8001278:	200003c8 	.word	0x200003c8

0800127c <can_bus_Recieve>:
	if (canBus.count>50000)
		canBus.count = 0;
}

void can_bus_Recieve(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canBus.rx_header, canBus.recieve);
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <can_bus_Recieve+0xac>)
 8001282:	4a2a      	ldr	r2, [pc, #168]	; (800132c <can_bus_Recieve+0xb0>)
 8001284:	2100      	movs	r1, #0
 8001286:	482a      	ldr	r0, [pc, #168]	; (8001330 <can_bus_Recieve+0xb4>)
 8001288:	f003 faea 	bl	8004860 <HAL_CAN_GetRxMessage>

	if (canBus.rx_header.StdId == 0x010)
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <can_bus_Recieve+0xb8>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2b10      	cmp	r3, #16
 8001292:	d144      	bne.n	800131e <can_bus_Recieve+0xa2>
	{
		canBus.rx.fuel = (canBus.recieve[4] << 8) + canBus.recieve[5];
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <can_bus_Recieve+0xb8>)
 8001296:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800129a:	b29b      	uxth	r3, r3
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <can_bus_Recieve+0xb8>)
 80012a2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <can_bus_Recieve+0xb8>)
 80012ae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		canBus.rx.vel = (canBus.recieve[2] << 8) + canBus.recieve[3];
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <can_bus_Recieve+0xb8>)
 80012b4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <can_bus_Recieve+0xb8>)
 80012c0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4413      	add	r3, r2
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <can_bus_Recieve+0xb8>)
 80012cc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		canBus.rx.rpm = (canBus.recieve[0] << 8) + canBus.recieve[1];
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <can_bus_Recieve+0xb8>)
 80012d2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <can_bus_Recieve+0xb8>)
 80012de:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <can_bus_Recieve+0xb8>)
 80012ea:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		if (canBus.rx.vel > 9999)
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <can_bus_Recieve+0xb8>)
 80012f0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80012f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d904      	bls.n	8001306 <can_bus_Recieve+0x8a>
			canBus.rx.vel = 9999;
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <can_bus_Recieve+0xb8>)
 80012fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001302:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

		if (canBus.rx.rpm > 9999)
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <can_bus_Recieve+0xb8>)
 8001308:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800130c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001310:	4293      	cmp	r3, r2
 8001312:	d904      	bls.n	800131e <can_bus_Recieve+0xa2>
			canBus.rx.rpm = 9999;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <can_bus_Recieve+0xb8>)
 8001316:	f242 720f 	movw	r2, #9999	; 0x270f
 800131a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		can_rData.gyro.x = (canBus.recieve[1] << 8) + canBus.recieve[0];
		can_rData.gyro.y = (canBus.recieve[3] << 8) + canBus.recieve[2];
		can_rData.gyro.z = (canBus.recieve[5] << 8) + canBus.recieve[4];
	}*/

	canBus.count=0;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <can_bus_Recieve+0xb8>)
 8001320:	2200      	movs	r2, #0
 8001322:	801a      	strh	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200003fc 	.word	0x200003fc
 800132c:	200003ac 	.word	0x200003ac
 8001330:	2000040c 	.word	0x2000040c
 8001334:	20000388 	.word	0x20000388

08001338 <dina_Init>:
 */

#include "dina.h"

void dina_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	dina.huart = &huart2;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <dina_Init+0x14>)
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <dina_Init+0x18>)
 8001340:	601a      	str	r2, [r3, #0]
	forceGauge_uart_Init_DMA(&dina);
 8001342:	4802      	ldr	r0, [pc, #8]	; (800134c <dina_Init+0x14>)
 8001344:	f000 fce6 	bl	8001d14 <forceGauge_uart_Init_DMA>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000434 	.word	0x20000434
 8001350:	20000450 	.word	0x20000450

08001354 <dina_Update>:

void dina_Update(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	forceGauge_getForce(&dina);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <dina_Update+0x10>)
 800135a:	f000 fcef 	bl	8001d3c <forceGauge_getForce>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000434 	.word	0x20000434

08001368 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <SELECT+0x14>)
 8001374:	f004 fb06 	bl	8005984 <HAL_GPIO_WritePin>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010800 	.word	0x40010800

08001380 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <DESELECT+0x14>)
 800138c:	f004 fafa 	bl	8005984 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010800 	.word	0x40010800

08001398 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013a2:	bf00      	nop
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <SPI_TxByte+0x30>)
 80013a6:	f006 fc15 	bl	8007bd4 <HAL_SPI_GetState>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d1f9      	bne.n	80013a4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80013b0:	1df9      	adds	r1, r7, #7
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	2201      	movs	r2, #1
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <SPI_TxByte+0x30>)
 80013ba:	f006 f92d 	bl	8007618 <HAL_SPI_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000e7c 	.word	0x20000e7c

080013cc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80013d2:	23ff      	movs	r3, #255	; 0xff
 80013d4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80013da:	bf00      	nop
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <SPI_RxByte+0x38>)
 80013de:	f006 fbf9 	bl	8007bd4 <HAL_SPI_GetState>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d1f9      	bne.n	80013dc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80013e8:	1dba      	adds	r2, r7, #6
 80013ea:	1df9      	adds	r1, r7, #7
 80013ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <SPI_RxByte+0x38>)
 80013f6:	f006 fa4b 	bl	8007890 <HAL_SPI_TransmitReceive>

  return data;
 80013fa:	79bb      	ldrb	r3, [r7, #6]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000e7c 	.word	0x20000e7c

08001408 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001410:	f7ff ffdc 	bl	80013cc <SPI_RxByte>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	701a      	strb	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <SD_ReadyWait+0x34>)
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001430:	f7ff ffcc 	bl	80013cc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001434:	f7ff ffca 	bl	80013cc <SPI_RxByte>
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2bff      	cmp	r3, #255	; 0xff
 8001440:	d004      	beq.n	800144c <SD_ReadyWait+0x28>
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SD_ReadyWait+0x34>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f3      	bne.n	8001434 <SD_ReadyWait+0x10>

  return res;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000f1c 	.word	0x20000f1c

0800145c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001462:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001466:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001468:	f7ff ff8a 	bl	8001380 <DESELECT>

  for(int i = 0; i < 10; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	e005      	b.n	800147e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001472:	20ff      	movs	r0, #255	; 0xff
 8001474:	f7ff ff90 	bl	8001398 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	3301      	adds	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b09      	cmp	r3, #9
 8001482:	ddf6      	ble.n	8001472 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001484:	f7ff ff70 	bl	8001368 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001488:	2340      	movs	r3, #64	; 0x40
 800148a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800149c:	2395      	movs	r3, #149	; 0x95
 800149e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e009      	b.n	80014ba <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80014a6:	1d3a      	adds	r2, r7, #4
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff72 	bl	8001398 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b05      	cmp	r3, #5
 80014be:	ddf2      	ble.n	80014a6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80014c0:	e002      	b.n	80014c8 <SD_PowerOn+0x6c>
  {
    Count--;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80014c8:	f7ff ff80 	bl	80013cc <SPI_RxByte>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d002      	beq.n	80014d8 <SD_PowerOn+0x7c>
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f4      	bne.n	80014c2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80014d8:	f7ff ff52 	bl	8001380 <DESELECT>
  SPI_TxByte(0XFF);
 80014dc:	20ff      	movs	r0, #255	; 0xff
 80014de:	f7ff ff5b 	bl	8001398 <SPI_TxByte>

  PowerFlag = 1;
 80014e2:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <SD_PowerOn+0x94>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200000a5 	.word	0x200000a5

080014f4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <SD_PowerOff+0x14>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200000a5 	.word	0x200000a5

0800150c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <SD_CheckPower+0x10>)
 8001512:	781b      	ldrb	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	200000a5 	.word	0x200000a5

08001520 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <SD_RxDataBlock+0x68>)
 800152c:	220a      	movs	r2, #10
 800152e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001530:	f7ff ff4c 	bl	80013cc <SPI_RxByte>
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2bff      	cmp	r3, #255	; 0xff
 800153c:	d104      	bne.n	8001548 <SD_RxDataBlock+0x28>
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <SD_RxDataBlock+0x68>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f3      	bne.n	8001530 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2bfe      	cmp	r3, #254	; 0xfe
 800154c:	d001      	beq.n	8001552 <SD_RxDataBlock+0x32>
    return FALSE;
 800154e:	2300      	movs	r3, #0
 8001550:	e016      	b.n	8001580 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff55 	bl	8001408 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff4f 	bl	8001408 <SPI_RxBytePtr>
  } while(btr -= 2);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3b02      	subs	r3, #2
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ed      	bne.n	8001552 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001576:	f7ff ff29 	bl	80013cc <SPI_RxByte>
  SPI_RxByte();
 800157a:	f7ff ff27 	bl	80013cc <SPI_RxByte>

  return TRUE;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000f1d 	.word	0x20000f1d

0800158c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800159c:	f7ff ff42 	bl	8001424 <SD_ReadyWait>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2bff      	cmp	r3, #255	; 0xff
 80015a4:	d001      	beq.n	80015aa <SD_TxDataBlock+0x1e>
    return FALSE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e040      	b.n	800162c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fef3 	bl	8001398 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	2bfd      	cmp	r3, #253	; 0xfd
 80015b6:	d031      	beq.n	800161c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fee7 	bl	8001398 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fee0 	bl	8001398 <SPI_TxByte>
    } while (--wc);
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	3b01      	subs	r3, #1
 80015dc:	73bb      	strb	r3, [r7, #14]
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1eb      	bne.n	80015bc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80015e4:	f7ff fef2 	bl	80013cc <SPI_RxByte>
    SPI_RxByte();
 80015e8:	f7ff fef0 	bl	80013cc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80015ec:	e00b      	b.n	8001606 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80015ee:	f7ff feed 	bl	80013cc <SPI_RxByte>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d006      	beq.n	800160e <SD_TxDataBlock+0x82>
        break;

      i++;
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	3301      	adds	r3, #1
 8001604:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001606:	7b7b      	ldrb	r3, [r7, #13]
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d9f0      	bls.n	80015ee <SD_TxDataBlock+0x62>
 800160c:	e000      	b.n	8001610 <SD_TxDataBlock+0x84>
        break;
 800160e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001610:	bf00      	nop
 8001612:	f7ff fedb 	bl	80013cc <SPI_RxByte>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0fa      	beq.n	8001612 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	2b05      	cmp	r3, #5
 8001624:	d101      	bne.n	800162a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001640:	f7ff fef0 	bl	8001424 <SD_ReadyWait>
 8001644:	4603      	mov	r3, r0
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d001      	beq.n	800164e <SD_SendCmd+0x1a>
    return 0xFF;
 800164a:	23ff      	movs	r3, #255	; 0xff
 800164c:	e040      	b.n	80016d0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fea1 	bl	8001398 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	0e1b      	lsrs	r3, r3, #24
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fe9b 	bl	8001398 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe95 	bl	8001398 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fe8f 	bl	8001398 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fe8a 	bl	8001398 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b40      	cmp	r3, #64	; 0x40
 800168c:	d101      	bne.n	8001692 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800168e:	2395      	movs	r3, #149	; 0x95
 8001690:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b48      	cmp	r3, #72	; 0x48
 8001696:	d101      	bne.n	800169c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001698:	2387      	movs	r3, #135	; 0x87
 800169a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fe7a 	bl	8001398 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b4c      	cmp	r3, #76	; 0x4c
 80016a8:	d101      	bne.n	80016ae <SD_SendCmd+0x7a>
    SPI_RxByte();
 80016aa:	f7ff fe8f 	bl	80013cc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80016ae:	230a      	movs	r3, #10
 80016b0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80016b2:	f7ff fe8b 	bl	80013cc <SPI_RxByte>
 80016b6:	4603      	mov	r3, r0
 80016b8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80016ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da05      	bge.n	80016ce <SD_SendCmd+0x9a>
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f1      	bne.n	80016b2 <SD_SendCmd+0x7e>

  return res;
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0d5      	b.n	8001898 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80016ec:	4b6c      	ldr	r3, [pc, #432]	; (80018a0 <SD_disk_initialize+0x1c8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <SD_disk_initialize+0x2a>
    return Stat;
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <SD_disk_initialize+0x1c8>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	e0ca      	b.n	8001898 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001702:	f7ff feab 	bl	800145c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001706:	f7ff fe2f 	bl	8001368 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800170e:	2100      	movs	r1, #0
 8001710:	2040      	movs	r0, #64	; 0x40
 8001712:	f7ff ff8f 	bl	8001634 <SD_SendCmd>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	f040 80a5 	bne.w	8001868 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800171e:	4b61      	ldr	r3, [pc, #388]	; (80018a4 <SD_disk_initialize+0x1cc>)
 8001720:	2264      	movs	r2, #100	; 0x64
 8001722:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001724:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001728:	2048      	movs	r0, #72	; 0x48
 800172a:	f7ff ff83 	bl	8001634 <SD_SendCmd>
 800172e:	4603      	mov	r3, r0
 8001730:	2b01      	cmp	r3, #1
 8001732:	d158      	bne.n	80017e6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e00c      	b.n	8001754 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800173a:	7bfc      	ldrb	r4, [r7, #15]
 800173c:	f7ff fe46 	bl	80013cc <SPI_RxByte>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4423      	add	r3, r4
 800174a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	3301      	adds	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d9ef      	bls.n	800173a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800175a:	7abb      	ldrb	r3, [r7, #10]
 800175c:	2b01      	cmp	r3, #1
 800175e:	f040 8083 	bne.w	8001868 <SD_disk_initialize+0x190>
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	2baa      	cmp	r3, #170	; 0xaa
 8001766:	d17f      	bne.n	8001868 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001768:	2100      	movs	r1, #0
 800176a:	2077      	movs	r0, #119	; 0x77
 800176c:	f7ff ff62 	bl	8001634 <SD_SendCmd>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d807      	bhi.n	8001786 <SD_disk_initialize+0xae>
 8001776:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800177a:	2069      	movs	r0, #105	; 0x69
 800177c:	f7ff ff5a 	bl	8001634 <SD_SendCmd>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <SD_disk_initialize+0x1cc>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1eb      	bne.n	8001768 <SD_disk_initialize+0x90>
 8001790:	e000      	b.n	8001794 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001792:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <SD_disk_initialize+0x1cc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d064      	beq.n	8001868 <SD_disk_initialize+0x190>
 800179e:	2100      	movs	r1, #0
 80017a0:	207a      	movs	r0, #122	; 0x7a
 80017a2:	f7ff ff47 	bl	8001634 <SD_SendCmd>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d15d      	bne.n	8001868 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e00c      	b.n	80017cc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80017b2:	7bfc      	ldrb	r4, [r7, #15]
 80017b4:	f7ff fe0a 	bl	80013cc <SPI_RxByte>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4423      	add	r3, r4
 80017c2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	3301      	adds	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d9ef      	bls.n	80017b2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80017d2:	7a3b      	ldrb	r3, [r7, #8]
 80017d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SD_disk_initialize+0x108>
 80017dc:	2306      	movs	r3, #6
 80017de:	e000      	b.n	80017e2 <SD_disk_initialize+0x10a>
 80017e0:	2302      	movs	r3, #2
 80017e2:	73bb      	strb	r3, [r7, #14]
 80017e4:	e040      	b.n	8001868 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80017e6:	2100      	movs	r1, #0
 80017e8:	2077      	movs	r0, #119	; 0x77
 80017ea:	f7ff ff23 	bl	8001634 <SD_SendCmd>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d808      	bhi.n	8001806 <SD_disk_initialize+0x12e>
 80017f4:	2100      	movs	r1, #0
 80017f6:	2069      	movs	r0, #105	; 0x69
 80017f8:	f7ff ff1c 	bl	8001634 <SD_SendCmd>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d801      	bhi.n	8001806 <SD_disk_initialize+0x12e>
 8001802:	2302      	movs	r3, #2
 8001804:	e000      	b.n	8001808 <SD_disk_initialize+0x130>
 8001806:	2301      	movs	r3, #1
 8001808:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d10e      	bne.n	800182e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001810:	2100      	movs	r1, #0
 8001812:	2077      	movs	r0, #119	; 0x77
 8001814:	f7ff ff0e 	bl	8001634 <SD_SendCmd>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	d80e      	bhi.n	800183c <SD_disk_initialize+0x164>
 800181e:	2100      	movs	r1, #0
 8001820:	2069      	movs	r0, #105	; 0x69
 8001822:	f7ff ff07 	bl	8001634 <SD_SendCmd>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d107      	bne.n	800183c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800182c:	e00d      	b.n	800184a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800182e:	2100      	movs	r1, #0
 8001830:	2041      	movs	r0, #65	; 0x41
 8001832:	f7ff feff 	bl	8001634 <SD_SendCmd>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <SD_disk_initialize+0x1cc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e1      	bne.n	800180a <SD_disk_initialize+0x132>
 8001846:	e000      	b.n	800184a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001848:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <SD_disk_initialize+0x1cc>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <SD_disk_initialize+0x18c>
 8001854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001858:	2050      	movs	r0, #80	; 0x50
 800185a:	f7ff feeb 	bl	8001634 <SD_SendCmd>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <SD_disk_initialize+0x1d0>)
 800186a:	7bbb      	ldrb	r3, [r7, #14]
 800186c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800186e:	f7ff fd87 	bl	8001380 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001872:	f7ff fdab 	bl	80013cc <SPI_RxByte>

  if (type)
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <SD_disk_initialize+0x1c8>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SD_disk_initialize+0x1c8>)
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e001      	b.n	8001892 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800188e:	f7ff fe31 	bl	80014f4 <SD_PowerOff>
  }

  return Stat;
 8001892:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <SD_disk_initialize+0x1c8>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b2db      	uxtb	r3, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000f1d 	.word	0x20000f1d
 80018a8:	200000a4 	.word	0x200000a4

080018ac <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SD_disk_status+0x14>
    return STA_NOINIT;
 80018bc:	2301      	movs	r3, #1
 80018be:	e002      	b.n	80018c6 <SD_disk_status+0x1a>

  return Stat;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <SD_disk_status+0x24>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000000 	.word	0x20000000

080018d4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <SD_disk_read+0x1c>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <SD_disk_read+0x20>
    return RES_PARERR;
 80018f0:	2304      	movs	r3, #4
 80018f2:	e051      	b.n	8001998 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <SD_disk_read+0xcc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001902:	2303      	movs	r3, #3
 8001904:	e048      	b.n	8001998 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <SD_disk_read+0xd0>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	607b      	str	r3, [r7, #4]

  SELECT();
 8001918:	f7ff fd26 	bl	8001368 <SELECT>

  if (count == 1)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d111      	bne.n	8001946 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	2051      	movs	r0, #81	; 0x51
 8001926:	f7ff fe85 	bl	8001634 <SD_SendCmd>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d129      	bne.n	8001984 <SD_disk_read+0xb0>
 8001930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001934:	68b8      	ldr	r0, [r7, #8]
 8001936:	f7ff fdf3 	bl	8001520 <SD_RxDataBlock>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d021      	beq.n	8001984 <SD_disk_read+0xb0>
      count = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	e01e      	b.n	8001984 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	2052      	movs	r0, #82	; 0x52
 800194a:	f7ff fe73 	bl	8001634 <SD_SendCmd>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d117      	bne.n	8001984 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f7ff fde1 	bl	8001520 <SD_RxDataBlock>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800196a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	3b01      	subs	r3, #1
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ed      	bne.n	8001954 <SD_disk_read+0x80>
 8001978:	e000      	b.n	800197c <SD_disk_read+0xa8>
          break;
 800197a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	204c      	movs	r0, #76	; 0x4c
 8001980:	f7ff fe58 	bl	8001634 <SD_SendCmd>
    }
  }

  DESELECT();
 8001984:	f7ff fcfc 	bl	8001380 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001988:	f7ff fd20 	bl	80013cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	b2db      	uxtb	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000
 80019a4:	200000a4 	.word	0x200000a4

080019a8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <SD_disk_write+0x1c>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <SD_disk_write+0x20>
    return RES_PARERR;
 80019c4:	2304      	movs	r3, #4
 80019c6:	e06b      	b.n	8001aa0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80019c8:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <SD_disk_write+0x100>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SD_disk_write+0x32>
    return RES_NOTRDY;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e062      	b.n	8001aa0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <SD_disk_write+0x100>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SD_disk_write+0x44>
    return RES_WRPRT;
 80019e8:	2302      	movs	r3, #2
 80019ea:	e059      	b.n	8001aa0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <SD_disk_write+0x104>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	607b      	str	r3, [r7, #4]

  SELECT();
 80019fe:	f7ff fcb3 	bl	8001368 <SELECT>

  if (count == 1)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d110      	bne.n	8001a2a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	2058      	movs	r0, #88	; 0x58
 8001a0c:	f7ff fe12 	bl	8001634 <SD_SendCmd>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d13a      	bne.n	8001a8c <SD_disk_write+0xe4>
 8001a16:	21fe      	movs	r1, #254	; 0xfe
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f7ff fdb7 	bl	800158c <SD_TxDataBlock>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d033      	beq.n	8001a8c <SD_disk_write+0xe4>
      count = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	e030      	b.n	8001a8c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <SD_disk_write+0x104>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001a36:	2100      	movs	r1, #0
 8001a38:	2077      	movs	r0, #119	; 0x77
 8001a3a:	f7ff fdfb 	bl	8001634 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	2057      	movs	r0, #87	; 0x57
 8001a42:	f7ff fdf7 	bl	8001634 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2059      	movs	r0, #89	; 0x59
 8001a4a:	f7ff fdf3 	bl	8001634 <SD_SendCmd>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11b      	bne.n	8001a8c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001a54:	21fc      	movs	r1, #252	; 0xfc
 8001a56:	68b8      	ldr	r0, [r7, #8]
 8001a58:	f7ff fd98 	bl	800158c <SD_TxDataBlock>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a68:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ee      	bne.n	8001a54 <SD_disk_write+0xac>
 8001a76:	e000      	b.n	8001a7a <SD_disk_write+0xd2>
          break;
 8001a78:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001a7a:	21fd      	movs	r1, #253	; 0xfd
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fd85 	bl	800158c <SD_TxDataBlock>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <SD_disk_write+0xe4>
      {
        count = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001a8c:	f7ff fc78 	bl	8001380 <DESELECT>
  SPI_RxByte();
 8001a90:	f7ff fc9c 	bl	80013cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	200000a4 	.word	0x200000a4

08001ab0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b08b      	sub	sp, #44	; 0x2c
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	603a      	str	r2, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	460b      	mov	r3, r1
 8001abe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001aca:	2304      	movs	r3, #4
 8001acc:	e11b      	b.n	8001d06 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001ad4:	79bb      	ldrb	r3, [r7, #6]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d129      	bne.n	8001b2e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d017      	beq.n	8001b12 <SD_disk_ioctl+0x62>
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	dc1f      	bgt.n	8001b26 <SD_disk_ioctl+0x76>
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <SD_disk_ioctl+0x40>
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d00b      	beq.n	8001b06 <SD_disk_ioctl+0x56>
 8001aee:	e01a      	b.n	8001b26 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001af0:	f7ff fd0c 	bl	800150c <SD_CheckPower>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001afa:	f7ff fcfb 	bl	80014f4 <SD_PowerOff>
      res = RES_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b04:	e0fd      	b.n	8001d02 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001b06:	f7ff fca9 	bl	800145c <SD_PowerOn>
      res = RES_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b10:	e0f7      	b.n	8001d02 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	1c5c      	adds	r4, r3, #1
 8001b16:	f7ff fcf9 	bl	800150c <SD_CheckPower>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b24:	e0ed      	b.n	8001d02 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001b26:	2304      	movs	r3, #4
 8001b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b2c:	e0e9      	b.n	8001d02 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001b2e:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <SD_disk_ioctl+0x260>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0e2      	b.n	8001d06 <SD_disk_ioctl+0x256>

    SELECT();
 8001b40:	f7ff fc12 	bl	8001368 <SELECT>

    switch (ctrl)
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	2b0d      	cmp	r3, #13
 8001b48:	f200 80cc 	bhi.w	8001ce4 <SD_disk_ioctl+0x234>
 8001b4c:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <SD_disk_ioctl+0xa4>)
 8001b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b52:	bf00      	nop
 8001b54:	08001c4f 	.word	0x08001c4f
 8001b58:	08001b8d 	.word	0x08001b8d
 8001b5c:	08001c3f 	.word	0x08001c3f
 8001b60:	08001ce5 	.word	0x08001ce5
 8001b64:	08001ce5 	.word	0x08001ce5
 8001b68:	08001ce5 	.word	0x08001ce5
 8001b6c:	08001ce5 	.word	0x08001ce5
 8001b70:	08001ce5 	.word	0x08001ce5
 8001b74:	08001ce5 	.word	0x08001ce5
 8001b78:	08001ce5 	.word	0x08001ce5
 8001b7c:	08001ce5 	.word	0x08001ce5
 8001b80:	08001c61 	.word	0x08001c61
 8001b84:	08001c85 	.word	0x08001c85
 8001b88:	08001ca9 	.word	0x08001ca9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2049      	movs	r0, #73	; 0x49
 8001b90:	f7ff fd50 	bl	8001634 <SD_SendCmd>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 80a8 	bne.w	8001cec <SD_disk_ioctl+0x23c>
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fcbc 	bl	8001520 <SD_RxDataBlock>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 809e 	beq.w	8001cec <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001bb0:	7b3b      	ldrb	r3, [r7, #12]
 8001bb2:	099b      	lsrs	r3, r3, #6
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001bba:	7d7b      	ldrb	r3, [r7, #21]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	7d3b      	ldrb	r3, [r7, #20]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001bce:	8bfb      	ldrh	r3, [r7, #30]
 8001bd0:	029a      	lsls	r2, r3, #10
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e02e      	b.n	8001c36 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001bd8:	7c7b      	ldrb	r3, [r7, #17]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	7dbb      	ldrb	r3, [r7, #22]
 8001be2:	09db      	lsrs	r3, r3, #7
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	7d7b      	ldrb	r3, [r7, #21]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f003 0306 	and.w	r3, r3, #6
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001c00:	7d3b      	ldrb	r3, [r7, #20]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	7cbb      	ldrb	r3, [r7, #18]
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001c28:	8bfa      	ldrh	r2, [r7, #30]
 8001c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c2e:	3b09      	subs	r3, #9
 8001c30:	409a      	lsls	r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001c3c:	e056      	b.n	8001cec <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c44:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c4c:	e055      	b.n	8001cfa <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001c4e:	f7ff fbe9 	bl	8001424 <SD_ReadyWait>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2bff      	cmp	r3, #255	; 0xff
 8001c56:	d14b      	bne.n	8001cf0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c5e:	e047      	b.n	8001cf0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001c60:	2100      	movs	r1, #0
 8001c62:	2049      	movs	r0, #73	; 0x49
 8001c64:	f7ff fce6 	bl	8001634 <SD_SendCmd>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d142      	bne.n	8001cf4 <SD_disk_ioctl+0x244>
 8001c6e:	2110      	movs	r1, #16
 8001c70:	6a38      	ldr	r0, [r7, #32]
 8001c72:	f7ff fc55 	bl	8001520 <SD_RxDataBlock>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d03b      	beq.n	8001cf4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c82:	e037      	b.n	8001cf4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001c84:	2100      	movs	r1, #0
 8001c86:	204a      	movs	r0, #74	; 0x4a
 8001c88:	f7ff fcd4 	bl	8001634 <SD_SendCmd>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d132      	bne.n	8001cf8 <SD_disk_ioctl+0x248>
 8001c92:	2110      	movs	r1, #16
 8001c94:	6a38      	ldr	r0, [r7, #32]
 8001c96:	f7ff fc43 	bl	8001520 <SD_RxDataBlock>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02b      	beq.n	8001cf8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ca6:	e027      	b.n	8001cf8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	207a      	movs	r0, #122	; 0x7a
 8001cac:	f7ff fcc2 	bl	8001634 <SD_SendCmd>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cbc:	e00b      	b.n	8001cd6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001cbe:	6a3c      	ldr	r4, [r7, #32]
 8001cc0:	1c63      	adds	r3, r4, #1
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	f7ff fb82 	bl	80013cc <SPI_RxByte>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d9ef      	bls.n	8001cbe <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cea:	e006      	b.n	8001cfa <SD_disk_ioctl+0x24a>
      break;
 8001cec:	bf00      	nop
 8001cee:	e004      	b.n	8001cfa <SD_disk_ioctl+0x24a>
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e002      	b.n	8001cfa <SD_disk_ioctl+0x24a>
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e000      	b.n	8001cfa <SD_disk_ioctl+0x24a>
      break;
 8001cf8:	bf00      	nop
    }

    DESELECT();
 8001cfa:	f7ff fb41 	bl	8001380 <DESELECT>
    SPI_RxByte();
 8001cfe:	f7ff fb65 	bl	80013cc <SPI_RxByte>
  }

  return res;
 8001d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <forceGauge_uart_Init_DMA>:

/*
 *	Função que inicia a leitura
 */
void forceGauge_uart_Init_DMA(fGauge_HandleTypeDef *hfGauge)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	2210      	movs	r2, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	f006 ff7d 	bl	8008c26 <HAL_UART_Receive_DMA>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <forceGauge_getForce>:
/*
 * 	Função que lê os valores no buffer e converte a string em um int.
 * 	Essa função tambem detecta se a celula de carga foi desconectada e reinicia a leitura quando possivel.
 */
void forceGauge_getForce(fGauge_HandleTypeDef *hfGauge)
{
 8001d3c:	b5b0      	push	{r4, r5, r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	int force = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
	int i = 0, j = 7;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

	/*	Logica para reiniciar a leitura	*/
	if (hfGauge->huart->hdmarx->State != HAL_DMA_STATE_BUSY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d00f      	beq.n	8001d7e <forceGauge_getForce+0x42>
		hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2210      	movs	r2, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f006 ff5c 	bl	8008c26 <HAL_UART_Receive_DMA>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	761a      	strb	r2, [r3, #24]

	/*	Conversão string to int	*/
	for (i; i < 15 && hfGauge->rxbuffer[i] != 13 ; i++);
 8001d76:	e002      	b.n	8001d7e <forceGauge_getForce+0x42>
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b0e      	cmp	r3, #14
 8001d82:	dc06      	bgt.n	8001d92 <forceGauge_getForce+0x56>
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b0d      	cmp	r3, #13
 8001d90:	d1f2      	bne.n	8001d78 <forceGauge_getForce+0x3c>
	if (i > 8)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	dd03      	ble.n	8001da0 <forceGauge_getForce+0x64>
		i -= 8;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	e03e      	b.n	8001e1e <forceGauge_getForce+0xe2>
	else
		i += 8;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	3308      	adds	r3, #8
 8001da4:	613b      	str	r3, [r7, #16]
	while(j > 0)
 8001da6:	e03a      	b.n	8001e1e <forceGauge_getForce+0xe2>
	{
		j--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
		if (i < 15)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b0e      	cmp	r3, #14
 8001db2:	dc03      	bgt.n	8001dbc <forceGauge_getForce+0x80>
			i++;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	3301      	adds	r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	e001      	b.n	8001dc0 <forceGauge_getForce+0x84>
		else
			i = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
		force += (hfGauge->rxbuffer[i] - 48) * pow10(j);
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3b30      	subs	r3, #48	; 0x30
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbc5 	bl	800055c <__aeabi_i2d>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7fe fbc0 	bl	800055c <__aeabi_i2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f000 f836 	bl	8001e54 <pow10>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fc1e 	bl	8000630 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	6978      	ldr	r0, [r7, #20]
 8001dfe:	f7fe fbad 	bl	800055c <__aeabi_i2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fa5b 	bl	80002c4 <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe fea5 	bl	8000b64 <__aeabi_d2iz>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	617b      	str	r3, [r7, #20]
	while(j > 0)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	dcc1      	bgt.n	8001da8 <forceGauge_getForce+0x6c>
	}

	if (force < 0)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da03      	bge.n	8001e32 <forceGauge_getForce+0xf6>
		hfGauge->force = 0;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
	else if (force > 99999)
		hfGauge->force = 99999;
	else
		hfGauge->force = force;
}
 8001e30:	e00a      	b.n	8001e48 <forceGauge_getForce+0x10c>
	else if (force > 99999)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <forceGauge_getForce+0x114>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	dd03      	ble.n	8001e42 <forceGauge_getForce+0x106>
		hfGauge->force = 99999;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <forceGauge_getForce+0x114>)
 8001e3e:	615a      	str	r2, [r3, #20]
}
 8001e40:	e002      	b.n	8001e48 <forceGauge_getForce+0x10c>
		hfGauge->force = force;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	615a      	str	r2, [r3, #20]
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e50:	0001869f 	.word	0x0001869f

08001e54 <pow10>:

double pow10(double y)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	e9c7 0100 	strd	r0, r1, [r7]
	int value = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < y; i++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	e008      	b.n	8001e7a <pow10+0x26>
	{
		value = value * 10;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < y; i++)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	3301      	adds	r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68b8      	ldr	r0, [r7, #8]
 8001e7c:	f7fe fb6e 	bl	800055c <__aeabi_i2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e88:	f7fe fe62 	bl	8000b50 <__aeabi_dcmpgt>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ea      	bne.n	8001e68 <pow10+0x14>
	}

	return value;
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7fe fb62 	bl	800055c <__aeabi_i2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
}
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <indutivo_Init>:

/*
 * 	Função para iniciar a leitura
 */
HAL_StatusTypeDef indutivo_Init(indutivo_typedef *hindutivo)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	hindutivo->value_raw = 0;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
	hindutivo->freq = 0;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
	hindutivo->count = 0;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]

	result = HAL_TIM_Base_Start_IT(hindutivo->htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 ff89 	bl	8007ddc <HAL_TIM_Base_Start_IT>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]
	result = HAL_TIM_IC_Start_IT(hindutivo->htim, hindutivo->channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4610      	mov	r0, r2
 8001eda:	f006 f829 	bl	8007f30 <HAL_TIM_IC_Start_IT>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]

	return result;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <indutivo_filtro>:

/*
 * 	Função para o filtro de dados, calcula o value
 */
void indutivo_filtro(indutivo_typedef *hindutivo)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	hindutivo->value = 0;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]

	if (hindutivo->value_raw > 9999)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f02:	4293      	cmp	r3, r2
 8001f04:	dd03      	ble.n	8001f0e <indutivo_filtro+0x22>
		hindutivo->value_raw = hindutivo->buf[4];
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 4; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e00f      	b.n	8001f34 <indutivo_filtro+0x48>
		hindutivo->buf[i] = hindutivo->buf[i+1];
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3301      	adds	r3, #1
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3304      	adds	r3, #4
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3301      	adds	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	ddec      	ble.n	8001f14 <indutivo_filtro+0x28>

	hindutivo->buf[4] = hindutivo->value_raw;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

	for (int i = 0; i < 5; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	e00d      	b.n	8001f64 <indutivo_filtro+0x78>
		hindutivo->value += hindutivo->buf[i];
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3304      	adds	r3, #4
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	ddee      	ble.n	8001f48 <indutivo_filtro+0x5c>

	hindutivo->value = (int)hindutivo->value/5.0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe faf4 	bl	800055c <__aeabi_i2d>
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <indutivo_filtro+0xac>)
 8001f7a:	f7fe fc83 	bl	8000884 <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fded 	bl	8000b64 <__aeabi_d2iz>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	605a      	str	r2, [r3, #4]
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40140000 	.word	0x40140000
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <indutivo_calc>:
/*
 * 	Função pra ser chamada quando ocorre a interrupção de sinal
 * 	Calcula o value_raw
 */
void indutivo_calc(indutivo_typedef *hindutivo)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	hindutivo->count += __HAL_TIM_GET_COMPARE(hindutivo->htim, hindutivo->channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <indutivo_calc+0x1a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	e015      	b.n	8001fe6 <indutivo_calc+0x46>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d104      	bne.n	8001fcc <indutivo_calc+0x2c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	e00c      	b.n	8001fe6 <indutivo_calc+0x46>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d104      	bne.n	8001fde <indutivo_calc+0x3e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	e003      	b.n	8001fe6 <indutivo_calc+0x46>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68d2      	ldr	r2, [r2, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(hindutivo->htim, 0);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
	hindutivo->freq = (int)(100000000.0 / hindutivo->count);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faab 	bl	800055c <__aeabi_i2d>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	a115      	add	r1, pc, #84	; (adr r1, 8002060 <indutivo_calc+0xc0>)
 800200c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002010:	f7fe fc38 	bl	8000884 <__aeabi_ddiv>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fda2 	bl	8000b64 <__aeabi_d2iz>
 8002020:	4602      	mov	r2, r0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
	hindutivo->value_raw = (int)(hindutivo->constante*hindutivo->freq);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681c      	ldr	r4, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe feca 	bl	8000dc8 <__aeabi_i2f>
 8002034:	4603      	mov	r3, r0
 8002036:	4619      	mov	r1, r3
 8002038:	4620      	mov	r0, r4
 800203a:	f7fe f889 	bl	8000150 <__aeabi_fmul>
 800203e:	4603      	mov	r3, r0
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe ff15 	bl	8000e70 <__aeabi_f2iz>
 8002046:	4602      	mov	r2, r0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
	indutivo_filtro(hindutivo);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff4d 	bl	8001eec <indutivo_filtro>
	hindutivo->count = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bd90      	pop	{r4, r7, pc}
 8002060:	00000000 	.word	0x00000000
 8002064:	4197d784 	.word	0x4197d784

08002068 <indutivo_reset>:
/*
 * 	Função pra ser chamada quando o timer atinge valor maximo
 * 	Zera os valores
 */
void indutivo_reset(indutivo_typedef *hindutivo)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	if(hindutivo->count<1000000)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <indutivo_reset+0x3c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	dc07      	bgt.n	800208a <indutivo_reset+0x22>
	{
		hindutivo->count+=50000;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8002082:	3350      	adds	r3, #80	; 0x50
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	60d3      	str	r3, [r2, #12]
	{
		hindutivo->freq=0;
		hindutivo->value_raw=0;
		indutivo_filtro(hindutivo);
	}
}
 8002088:	e008      	b.n	800209c <indutivo_reset+0x34>
		hindutivo->freq=0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
		hindutivo->value_raw=0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
		indutivo_filtro(hindutivo);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff28 	bl	8001eec <indutivo_filtro>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	000f423f 	.word	0x000f423f

080020a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ac:	f001 fcf6 	bl	8003a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b0:	f000 f866 	bl	8002180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b4:	f000 fbaa 	bl	800280c <MX_GPIO_Init>
  MX_DMA_Init();
 80020b8:	f000 fb7a 	bl	80027b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80020bc:	f000 f8bc 	bl	8002238 <MX_ADC1_Init>
  MX_I2C2_Init();
 80020c0:	f000 f93e 	bl	8002340 <MX_I2C2_Init>
  MX_SPI1_Init();
 80020c4:	f000 f96a 	bl	800239c <MX_SPI1_Init>
  MX_TIM2_Init();
 80020c8:	f000 fa12 	bl	80024f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020cc:	f000 fa80 	bl	80025d0 <MX_TIM3_Init>
  MX_FATFS_Init();
 80020d0:	f007 fabc 	bl	800964c <MX_FATFS_Init>
  MX_TIM4_Init();
 80020d4:	f000 faca 	bl	800266c <MX_TIM4_Init>
  MX_TIM1_Init();
 80020d8:	f000 f996 	bl	8002408 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80020dc:	f000 fb14 	bl	8002708 <MX_USART1_UART_Init>
  MX_CAN_Init();
 80020e0:	f000 f8f8 	bl	80022d4 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80020e4:	f000 fb3a 	bl	800275c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	fresult = SD_Init();
 80020e8:	f000 fc64 	bl	80029b4 <SD_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <main+0xc8>)
 80020f2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NOT_READY)
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <main+0xc8>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d103      	bne.n	8002104 <main+0x5c>
		sdCard.mode = 9;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <main+0xcc>)
 80020fe:	2209      	movs	r2, #9
 8002100:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754

	if (sdCard.mode == 0)
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <main+0xcc>)
 8002106:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <main+0x70>
	{
	  rot_Init();
 800210e:	f000 fbf1 	bl	80028f4 <rot_Init>
	  vel_Init();
 8002112:	f001 fc73 	bl	80039fc <vel_Init>
 8002116:	e027      	b.n	8002168 <main+0xc0>
	}
	else if (sdCard.mode == 1)
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <main+0xcc>)
 800211a:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800211e:	2b01      	cmp	r3, #1
 8002120:	d104      	bne.n	800212c <main+0x84>
	{
		dina_Init();
 8002122:	f7ff f909 	bl	8001338 <dina_Init>
		rot_Init();
 8002126:	f000 fbe5 	bl	80028f4 <rot_Init>
 800212a:	e01d      	b.n	8002168 <main+0xc0>
	}
	else if (sdCard.mode == 2)
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <main+0xcc>)
 800212e:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002132:	2b02      	cmp	r3, #2
 8002134:	d107      	bne.n	8002146 <main+0x9e>
	{
		can_bus_Init();
 8002136:	f7ff f853 	bl	80011e0 <can_bus_Init>
		aceGir_Init(&hi2c2);
 800213a:	480f      	ldr	r0, [pc, #60]	; (8002178 <main+0xd0>)
 800213c:	f7fe fed8 	bl	8000ef0 <aceGir_Init>
		ADC_DMA_Init();
 8002140:	f7fe febc 	bl	8000ebc <ADC_DMA_Init>
 8002144:	e010      	b.n	8002168 <main+0xc0>
	}
	else if (sdCard.mode == 3)
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <main+0xcc>)
 8002148:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 800214c:	2b03      	cmp	r3, #3
 800214e:	d104      	bne.n	800215a <main+0xb2>
	{
		traction_Init();
 8002150:	f001 fc2e 	bl	80039b0 <traction_Init>
		can_bus_Init();
 8002154:	f7ff f844 	bl	80011e0 <can_bus_Init>
 8002158:	e006      	b.n	8002168 <main+0xc0>
	}
	else if (sdCard.mode == 4)
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <main+0xcc>)
 800215c:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002160:	2b04      	cmp	r3, #4
 8002162:	d101      	bne.n	8002168 <main+0xc0>
	{
		can_bus_Init();
 8002164:	f7ff f83c 	bl	80011e0 <can_bus_Init>
	}

	HAL_TIM_Base_Start_IT(&htim4);
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <main+0xd4>)
 800216a:	f005 fe37 	bl	8007ddc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800216e:	e7fe      	b.n	800216e <main+0xc6>
 8002170:	20000e78 	.word	0x20000e78
 8002174:	200004c4 	.word	0x200004c4
 8002178:	20000c60 	.word	0x20000c60
 800217c:	20000314 	.word	0x20000314

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b094      	sub	sp, #80	; 0x50
 8002184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218a:	2228      	movs	r2, #40	; 0x28
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f00a fde0 	bl	800cd54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021be:	2301      	movs	r3, #1
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c2:	2302      	movs	r3, #2
 80021c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fc06 	bl	80069e8 <HAL_RCC_OscConfig>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80021e2:	f000 fb81 	bl	80028e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e6:	230f      	movs	r3, #15
 80021e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f004 fe70 	bl	8006ee8 <HAL_RCC_ClockConfig>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800220e:	f000 fb6b 	bl	80028e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002212:	2302      	movs	r3, #2
 8002214:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fffc 	bl	800721c <HAL_RCCEx_PeriphCLKConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800222a:	f000 fb5d 	bl	80028e8 <Error_Handler>
  }
}
 800222e:	bf00      	nop
 8002230:	3750      	adds	r7, #80	; 0x50
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <MX_ADC1_Init+0x94>)
 800224a:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <MX_ADC1_Init+0x98>)
 800224c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800224e:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <MX_ADC1_Init+0x94>)
 8002250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002254:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <MX_ADC1_Init+0x94>)
 8002258:	2201      	movs	r2, #1
 800225a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <MX_ADC1_Init+0x94>)
 800225e:	2200      	movs	r2, #0
 8002260:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <MX_ADC1_Init+0x94>)
 8002264:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <MX_ADC1_Init+0x94>)
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <MX_ADC1_Init+0x94>)
 8002272:	2202      	movs	r2, #2
 8002274:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <MX_ADC1_Init+0x94>)
 8002278:	f001 fc72 	bl	8003b60 <HAL_ADC_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002282:	f000 fb31 	bl	80028e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002286:	2307      	movs	r3, #7
 8002288:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800228a:	2301      	movs	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800228e:	2307      	movs	r3, #7
 8002290:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	4619      	mov	r1, r3
 8002296:	480d      	ldr	r0, [pc, #52]	; (80022cc <MX_ADC1_Init+0x94>)
 8002298:	f001 fe34 	bl	8003f04 <HAL_ADC_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80022a2:	f000 fb21 	bl	80028e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022a6:	2309      	movs	r3, #9
 80022a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80022aa:	2302      	movs	r3, #2
 80022ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4806      	ldr	r0, [pc, #24]	; (80022cc <MX_ADC1_Init+0x94>)
 80022b4:	f001 fe26 	bl	8003f04 <HAL_ADC_ConfigChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80022be:	f000 fb13 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200002e4 	.word	0x200002e4
 80022d0:	40012400 	.word	0x40012400

080022d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_CAN_Init+0x64>)
 80022da:	4a18      	ldr	r2, [pc, #96]	; (800233c <MX_CAN_Init+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <MX_CAN_Init+0x64>)
 80022e0:	2212      	movs	r2, #18
 80022e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <MX_CAN_Init+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <MX_CAN_Init+0x64>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_CAN_Init+0x64>)
 80022f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022f6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_CAN_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_CAN_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_CAN_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <MX_CAN_Init+0x64>)
 800230c:	2200      	movs	r2, #0
 800230e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_CAN_Init+0x64>)
 8002312:	2200      	movs	r2, #0
 8002314:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <MX_CAN_Init+0x64>)
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_CAN_Init+0x64>)
 800231e:	2200      	movs	r2, #0
 8002320:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_CAN_Init+0x64>)
 8002324:	f002 f894 	bl	8004450 <HAL_CAN_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800232e:	f000 fadb 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000040c 	.word	0x2000040c
 800233c:	40006400 	.word	0x40006400

08002340 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <MX_I2C2_Init+0x50>)
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <MX_I2C2_Init+0x54>)
 8002348:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_I2C2_Init+0x50>)
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <MX_I2C2_Init+0x58>)
 800234e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_I2C2_Init+0x50>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_I2C2_Init+0x50>)
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_I2C2_Init+0x50>)
 800235e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002362:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <MX_I2C2_Init+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_I2C2_Init+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <MX_I2C2_Init+0x50>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_I2C2_Init+0x50>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <MX_I2C2_Init+0x50>)
 800237e:	f003 fb33 	bl	80059e8 <HAL_I2C_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002388:	f000 faae 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000c60 	.word	0x20000c60
 8002394:	40005800 	.word	0x40005800
 8002398:	000186a0 	.word	0x000186a0

0800239c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023a0:	4b17      	ldr	r3, [pc, #92]	; (8002400 <MX_SPI1_Init+0x64>)
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <MX_SPI1_Init+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <MX_SPI1_Init+0x64>)
 80023a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <MX_SPI1_Init+0x64>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <MX_SPI1_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <MX_SPI1_Init+0x64>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <MX_SPI1_Init+0x64>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_SPI1_Init+0x64>)
 80023c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <MX_SPI1_Init+0x64>)
 80023d0:	2210      	movs	r2, #16
 80023d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <MX_SPI1_Init+0x64>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <MX_SPI1_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <MX_SPI1_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_SPI1_Init+0x64>)
 80023e8:	220a      	movs	r2, #10
 80023ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ec:	4804      	ldr	r0, [pc, #16]	; (8002400 <MX_SPI1_Init+0x64>)
 80023ee:	f005 f88f 	bl	8007510 <HAL_SPI_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023f8:	f000 fa76 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000e7c 	.word	0x20000e7c
 8002404:	40013000 	.word	0x40013000

08002408 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240e:	f107 0318 	add.w	r3, r7, #24
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002426:	463b      	mov	r3, r7
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <MX_TIM1_Init+0xe0>)
 8002434:	4a2d      	ldr	r2, [pc, #180]	; (80024ec <MX_TIM1_Init+0xe4>)
 8002436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <MX_TIM1_Init+0xe0>)
 800243a:	2247      	movs	r2, #71	; 0x47
 800243c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <MX_TIM1_Init+0xe0>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <MX_TIM1_Init+0xe0>)
 8002446:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800244a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <MX_TIM1_Init+0xe0>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <MX_TIM1_Init+0xe0>)
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <MX_TIM1_Init+0xe0>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800245e:	4822      	ldr	r0, [pc, #136]	; (80024e8 <MX_TIM1_Init+0xe0>)
 8002460:	f005 fc6c 	bl	8007d3c <HAL_TIM_Base_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800246a:	f000 fa3d 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002472:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002474:	f107 0318 	add.w	r3, r7, #24
 8002478:	4619      	mov	r1, r3
 800247a:	481b      	ldr	r0, [pc, #108]	; (80024e8 <MX_TIM1_Init+0xe0>)
 800247c:	f005 fffa 	bl	8008474 <HAL_TIM_ConfigClockSource>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002486:	f000 fa2f 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800248a:	4817      	ldr	r0, [pc, #92]	; (80024e8 <MX_TIM1_Init+0xe0>)
 800248c:	f005 fcf8 	bl	8007e80 <HAL_TIM_IC_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002496:	f000 fa27 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4619      	mov	r1, r3
 80024a8:	480f      	ldr	r0, [pc, #60]	; (80024e8 <MX_TIM1_Init+0xe0>)
 80024aa:	f006 faff 	bl	8008aac <HAL_TIMEx_MasterConfigSynchronization>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80024b4:	f000 fa18 	bl	80028e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024b8:	2300      	movs	r3, #0
 80024ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024bc:	2301      	movs	r3, #1
 80024be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80024c4:	230f      	movs	r3, #15
 80024c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024c8:	463b      	mov	r3, r7
 80024ca:	2200      	movs	r2, #0
 80024cc:	4619      	mov	r1, r3
 80024ce:	4806      	ldr	r0, [pc, #24]	; (80024e8 <MX_TIM1_Init+0xe0>)
 80024d0:	f005 ff3c 	bl	800834c <HAL_TIM_IC_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80024da:	f000 fa05 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000df8 	.word	0x20000df8
 80024ec:	40012c00 	.word	0x40012c00

080024f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800250e:	463b      	mov	r3, r7
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <MX_TIM2_Init+0xdc>)
 800251c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002522:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <MX_TIM2_Init+0xdc>)
 8002524:	2247      	movs	r2, #71	; 0x47
 8002526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b28      	ldr	r3, [pc, #160]	; (80025cc <MX_TIM2_Init+0xdc>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <MX_TIM2_Init+0xdc>)
 8002530:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b25      	ldr	r3, [pc, #148]	; (80025cc <MX_TIM2_Init+0xdc>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <MX_TIM2_Init+0xdc>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002542:	4822      	ldr	r0, [pc, #136]	; (80025cc <MX_TIM2_Init+0xdc>)
 8002544:	f005 fbfa 	bl	8007d3c <HAL_TIM_Base_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800254e:	f000 f9cb 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002556:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	4619      	mov	r1, r3
 800255e:	481b      	ldr	r0, [pc, #108]	; (80025cc <MX_TIM2_Init+0xdc>)
 8002560:	f005 ff88 	bl	8008474 <HAL_TIM_ConfigClockSource>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800256a:	f000 f9bd 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800256e:	4817      	ldr	r0, [pc, #92]	; (80025cc <MX_TIM2_Init+0xdc>)
 8002570:	f005 fc86 	bl	8007e80 <HAL_TIM_IC_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800257a:	f000 f9b5 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	4619      	mov	r1, r3
 800258c:	480f      	ldr	r0, [pc, #60]	; (80025cc <MX_TIM2_Init+0xdc>)
 800258e:	f006 fa8d 	bl	8008aac <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002598:	f000 f9a6 	bl	80028e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800259c:	2300      	movs	r3, #0
 800259e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025a0:	2301      	movs	r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80025a8:	230f      	movs	r3, #15
 80025aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025ac:	463b      	mov	r3, r7
 80025ae:	2200      	movs	r2, #0
 80025b0:	4619      	mov	r1, r3
 80025b2:	4806      	ldr	r0, [pc, #24]	; (80025cc <MX_TIM2_Init+0xdc>)
 80025b4:	f005 feca 	bl	800834c <HAL_TIM_IC_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80025be:	f000 f993 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000ed4 	.word	0x20000ed4

080025d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e4:	463b      	mov	r3, r7
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <MX_TIM3_Init+0x94>)
 80025ee:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <MX_TIM3_Init+0x98>)
 80025f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <MX_TIM3_Init+0x94>)
 80025f4:	2247      	movs	r2, #71	; 0x47
 80025f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <MX_TIM3_Init+0x94>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <MX_TIM3_Init+0x94>)
 8002600:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002604:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <MX_TIM3_Init+0x94>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <MX_TIM3_Init+0x94>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002612:	4814      	ldr	r0, [pc, #80]	; (8002664 <MX_TIM3_Init+0x94>)
 8002614:	f005 fb92 	bl	8007d3c <HAL_TIM_Base_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800261e:	f000 f963 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	4619      	mov	r1, r3
 800262e:	480d      	ldr	r0, [pc, #52]	; (8002664 <MX_TIM3_Init+0x94>)
 8002630:	f005 ff20 	bl	8008474 <HAL_TIM_ConfigClockSource>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800263a:	f000 f955 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002646:	463b      	mov	r3, r7
 8002648:	4619      	mov	r1, r3
 800264a:	4806      	ldr	r0, [pc, #24]	; (8002664 <MX_TIM3_Init+0x94>)
 800264c:	f006 fa2e 	bl	8008aac <HAL_TIMEx_MasterConfigSynchronization>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002656:	f000 f947 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000cb4 	.word	0x20000cb4
 8002668:	40000400 	.word	0x40000400

0800266c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002680:	463b      	mov	r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <MX_TIM4_Init+0x94>)
 800268a:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <MX_TIM4_Init+0x98>)
 800268c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <MX_TIM4_Init+0x94>)
 8002690:	2247      	movs	r2, #71	; 0x47
 8002692:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <MX_TIM4_Init+0x94>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800269a:	4b19      	ldr	r3, [pc, #100]	; (8002700 <MX_TIM4_Init+0x94>)
 800269c:	f242 720f 	movw	r2, #9999	; 0x270f
 80026a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <MX_TIM4_Init+0x94>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <MX_TIM4_Init+0x94>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026ae:	4814      	ldr	r0, [pc, #80]	; (8002700 <MX_TIM4_Init+0x94>)
 80026b0:	f005 fb44 	bl	8007d3c <HAL_TIM_Base_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80026ba:	f000 f915 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	4619      	mov	r1, r3
 80026ca:	480d      	ldr	r0, [pc, #52]	; (8002700 <MX_TIM4_Init+0x94>)
 80026cc:	f005 fed2 	bl	8008474 <HAL_TIM_ConfigClockSource>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80026d6:	f000 f907 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026e2:	463b      	mov	r3, r7
 80026e4:	4619      	mov	r1, r3
 80026e6:	4806      	ldr	r0, [pc, #24]	; (8002700 <MX_TIM4_Init+0x94>)
 80026e8:	f006 f9e0 	bl	8008aac <HAL_TIMEx_MasterConfigSynchronization>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80026f2:	f000 f8f9 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000314 	.word	0x20000314
 8002704:	40000800 	.word	0x40000800

08002708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <MX_USART1_UART_Init+0x50>)
 8002710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002714:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002740:	f006 fa24 	bl	8008b8c <HAL_UART_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800274a:	f000 f8cd 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000d70 	.word	0x20000d70
 8002758:	40013800 	.word	0x40013800

0800275c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <MX_USART2_UART_Init+0x50>)
 8002764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002768:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800276c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002782:	220c      	movs	r2, #12
 8002784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002794:	f006 f9fa 	bl	8008b8c <HAL_UART_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800279e:	f000 f8a3 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000450 	.word	0x20000450
 80027ac:	40004400 	.word	0x40004400

080027b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <MX_DMA_Init+0x58>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4a13      	ldr	r2, [pc, #76]	; (8002808 <MX_DMA_Init+0x58>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6153      	str	r3, [r2, #20]
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_DMA_Init+0x58>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	200b      	movs	r0, #11
 80027d4:	f002 fc7d 	bl	80050d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027d8:	200b      	movs	r0, #11
 80027da:	f002 fc96 	bl	800510a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	200f      	movs	r0, #15
 80027e4:	f002 fc75 	bl	80050d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80027e8:	200f      	movs	r0, #15
 80027ea:	f002 fc8e 	bl	800510a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	2010      	movs	r0, #16
 80027f4:	f002 fc6d 	bl	80050d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80027f8:	2010      	movs	r0, #16
 80027fa:	f002 fc86 	bl	800510a <HAL_NVIC_EnableIRQ>

}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <MX_GPIO_Init+0xd0>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <MX_GPIO_Init+0xd0>)
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <MX_GPIO_Init+0xd0>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <MX_GPIO_Init+0xd0>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a27      	ldr	r2, [pc, #156]	; (80028dc <MX_GPIO_Init+0xd0>)
 800283e:	f043 0320 	orr.w	r3, r3, #32
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <MX_GPIO_Init+0xd0>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <MX_GPIO_Init+0xd0>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a21      	ldr	r2, [pc, #132]	; (80028dc <MX_GPIO_Init+0xd0>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <MX_GPIO_Init+0xd0>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <MX_GPIO_Init+0xd0>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <MX_GPIO_Init+0xd0>)
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <MX_GPIO_Init+0xd0>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002886:	4816      	ldr	r0, [pc, #88]	; (80028e0 <MX_GPIO_Init+0xd4>)
 8002888:	f003 f87c 	bl	8005984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002892:	4814      	ldr	r0, [pc, #80]	; (80028e4 <MX_GPIO_Init+0xd8>)
 8002894:	f003 f876 	bl	8005984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8002898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289e:	2301      	movs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4619      	mov	r1, r3
 80028b0:	480b      	ldr	r0, [pc, #44]	; (80028e0 <MX_GPIO_Init+0xd4>)
 80028b2:	f002 fee3 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80028b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4619      	mov	r1, r3
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_GPIO_Init+0xd8>)
 80028d0:	f002 fed4 	bl	800567c <HAL_GPIO_Init>

}
 80028d4:	bf00      	nop
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40011000 	.word	0x40011000
 80028e4:	40010800 	.word	0x40010800

080028e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ec:	b672      	cpsid	i
}
 80028ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <Error_Handler+0x8>
	...

080028f4 <rot_Init>:

/*
 * 	Função de inicialização
 */
void rot_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	rot.constante = 0.6;			/* < Salva a constante para calculo da rotação do motor */
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <rot_Init+0x20>)
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <rot_Init+0x24>)
 80028fc:	601a      	str	r2, [r3, #0]
	rot.htim = &htim1;				/* < Salva o ponteiro do Timer que será utilizado */
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <rot_Init+0x20>)
 8002900:	4a06      	ldr	r2, [pc, #24]	; (800291c <rot_Init+0x28>)
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
	rot.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <rot_Init+0x20>)
 8002906:	2200      	movs	r2, #0
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c

    indutivo_Init(&rot);			/* < Chama função de inicialização */
 800290a:	4802      	ldr	r0, [pc, #8]	; (8002914 <rot_Init+0x20>)
 800290c:	f7ff facb 	bl	8001ea6 <indutivo_Init>
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000494 	.word	0x20000494
 8002918:	3f19999a 	.word	0x3f19999a
 800291c:	20000df8 	.word	0x20000df8

08002920 <rot_Reset>:

/*
 * 	Função de reset
 */
void rot_Reset(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	indutivo_reset(&rot);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <rot_Reset+0x10>)
 8002926:	f7ff fb9f 	bl	8002068 <indutivo_reset>
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000494 	.word	0x20000494

08002934 <rot_Calc>:

/*
 * 	Função de calculo
 */
void rot_Calc(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	indutivo_calc(&rot);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <rot_Calc+0x10>)
 800293a:	f7ff fb31 	bl	8001fa0 <indutivo_calc>
	//LDEBUG;
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000494 	.word	0x20000494

08002948 <bufsize>:

/*
 * 	Função para calcular tamanho de um buffer
 */
int bufsize(char *buf)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8002954:	e002      	b.n	800295c <bufsize+0x14>
		i++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3301      	adds	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f6      	bne.n	8002956 <bufsize+0xe>
	return i;
 8002968:	68fb      	ldr	r3, [r7, #12]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <bufclear>:

/*
 * 	Função para limpar um buffer
 */
void bufclear(SD_CARD_typedef *buf)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<bufsize(buf->buffer); i++)
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e009      	b.n	8002996 <bufclear+0x22>
		buf->buffer[i] = '\0';
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	f203 4364 	addw	r3, r3, #1124	; 0x464
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<bufsize(buf->buffer); i++)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f203 4364 	addw	r3, r3, #1124	; 0x464
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ffd3 	bl	8002948 <bufsize>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4293      	cmp	r3, r2
 80029a8:	dbeb      	blt.n	8002982 <bufclear+0xe>
}
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <SD_Init>:

/*
 * 	Inicialização do cartão sd
 */
FRESULT SD_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	4924      	ldr	r1, [pc, #144]	; (8002a4c <SD_Init+0x98>)
 80029bc:	4824      	ldr	r0, [pc, #144]	; (8002a50 <SD_Init+0x9c>)
 80029be:	f009 f989 	bl	800bcd4 <f_mount>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <SD_Init+0xa0>)
 80029c8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <SD_Init+0xa0>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <SD_Init+0x24>
		return fresult;
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <SD_Init+0xa0>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	e037      	b.n	8002a48 <SD_Init+0x94>

	fresult = SD_loadSettings();
 80029d8:	f000 f840 	bl	8002a5c <SD_loadSettings>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <SD_Init+0xa0>)
 80029e2:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <SD_Init+0xa0>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <SD_Init+0x3e>
		return fresult;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <SD_Init+0xa0>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	e02a      	b.n	8002a48 <SD_Init+0x94>


	fresult = SD_createFile();
 80029f2:	f000 f963 	bl	8002cbc <SD_createFile>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <SD_Init+0xa0>)
 80029fc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <SD_Init+0xa0>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <SD_Init+0x58>
		return fresult;
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <SD_Init+0xa0>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	e01d      	b.n	8002a48 <SD_Init+0x94>

	bufclear(&sdCard);
 8002a0c:	4810      	ldr	r0, [pc, #64]	; (8002a50 <SD_Init+0x9c>)
 8002a0e:	f7ff ffb1 	bl	8002974 <bufclear>

	LDEBUG;
 8002a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a16:	4810      	ldr	r0, [pc, #64]	; (8002a58 <SD_Init+0xa4>)
 8002a18:	f002 ffcc 	bl	80059b4 <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <SD_Init+0x9c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	sdCard.blen = 0;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <SD_Init+0x9c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <SD_Init+0x9c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <SD_Init+0x9c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
	sdCard.timer = 0;
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <SD_Init+0x9c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736

	return fresult;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <SD_Init+0xa0>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	0800d5f0 	.word	0x0800d5f0
 8002a50:	200004c4 	.word	0x200004c4
 8002a54:	20000e78 	.word	0x20000e78
 8002a58:	40011000 	.word	0x40011000

08002a5c <SD_loadSettings>:

/*
 * 	Função para ler o settings.ini
 */
FRESULT SD_loadSettings(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 8002a60:	4912      	ldr	r1, [pc, #72]	; (8002aac <SD_loadSettings+0x50>)
 8002a62:	4813      	ldr	r0, [pc, #76]	; (8002ab0 <SD_loadSettings+0x54>)
 8002a64:	f00a f97e 	bl	800cd64 <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4911      	ldr	r1, [pc, #68]	; (8002ab0 <SD_loadSettings+0x54>)
 8002a6c:	4811      	ldr	r0, [pc, #68]	; (8002ab4 <SD_loadSettings+0x58>)
 8002a6e:	f009 f979 	bl	800bd64 <f_open>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <SD_loadSettings+0x5c>)
 8002a78:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <SD_loadSettings+0x5c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d106      	bne.n	8002a90 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 8002a82:	f000 f81b 	bl	8002abc <SD_createSettings>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <SD_loadSettings+0x5c>)
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e009      	b.n	8002aa4 <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <SD_loadSettings+0x5c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 8002a98:	f000 f866 	bl	8002b68 <SD_searchSettings>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SD_loadSettings+0x5c>)
 8002aa2:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <SD_loadSettings+0x5c>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	0800d5f4 	.word	0x0800d5f4
 8002ab0:	20000be8 	.word	0x20000be8
 8002ab4:	200008f4 	.word	0x200008f4
 8002ab8:	20000e78 	.word	0x20000e78

08002abc <SD_createSettings>:

/*
 * 	Função para criar o settings.ini quando não disponivel
 */
FRESULT SD_createSettings(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 8002ac2:	4822      	ldr	r0, [pc, #136]	; (8002b4c <SD_createSettings+0x90>)
 8002ac4:	f009 fe59 	bl	800c77a <f_close>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <SD_createSettings+0x94>)
 8002ace:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 8002ad0:	2212      	movs	r2, #18
 8002ad2:	4920      	ldr	r1, [pc, #128]	; (8002b54 <SD_createSettings+0x98>)
 8002ad4:	481d      	ldr	r0, [pc, #116]	; (8002b4c <SD_createSettings+0x90>)
 8002ad6:	f009 f945 	bl	800bd64 <f_open>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <SD_createSettings+0x94>)
 8002ae0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <SD_createSettings+0x94>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <SD_createSettings+0x34>
		return fresult;
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <SD_createSettings+0x94>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	e029      	b.n	8002b44 <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 8002af0:	4919      	ldr	r1, [pc, #100]	; (8002b58 <SD_createSettings+0x9c>)
 8002af2:	481a      	ldr	r0, [pc, #104]	; (8002b5c <SD_createSettings+0xa0>)
 8002af4:	f00a f936 	bl	800cd64 <siprintf>
 8002af8:	6078      	str	r0, [r7, #4]
			";Mode 1 para Teste de Dinamometro\n"
			";Mode 2 testes com o MPU6050 no 20\n"
			";Mode 3 teste de tração\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <SD_createSettings+0xa4>)
 8002afe:	4917      	ldr	r1, [pc, #92]	; (8002b5c <SD_createSettings+0xa0>)
 8002b00:	4812      	ldr	r0, [pc, #72]	; (8002b4c <SD_createSettings+0x90>)
 8002b02:	f009 fc04 	bl	800c30e <f_write>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <SD_createSettings+0x94>)
 8002b0c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <SD_createSettings+0x94>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <SD_createSettings+0x60>
		return fresult;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <SD_createSettings+0x94>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	e013      	b.n	8002b44 <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 8002b1c:	480b      	ldr	r0, [pc, #44]	; (8002b4c <SD_createSettings+0x90>)
 8002b1e:	f009 fe2c 	bl	800c77a <f_close>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <SD_createSettings+0x94>)
 8002b28:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <SD_createSettings+0x94>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <SD_createSettings+0x7c>
		return fresult;
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <SD_createSettings+0x94>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	e005      	b.n	8002b44 <SD_createSettings+0x88>

	sdCard.mode = 0;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <SD_createSettings+0xa8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754

	return fresult;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <SD_createSettings+0x94>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200008f4 	.word	0x200008f4
 8002b50:	20000e78 	.word	0x20000e78
 8002b54:	20000be8 	.word	0x20000be8
 8002b58:	0800d604 	.word	0x0800d604
 8002b5c:	20000968 	.word	0x20000968
 8002b60:	20000c04 	.word	0x20000c04
 8002b64:	200004c4 	.word	0x200004c4

08002b68 <SD_searchSettings>:

/*
 * 	Função que lê o conteudo do settings.ini
 */
FRESULT SD_searchSettings(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
	int index = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 8002b76:	4b4c      	ldr	r3, [pc, #304]	; (8002ca8 <SD_searchSettings+0x140>)
 8002b78:	f240 227f 	movw	r2, #639	; 0x27f
 8002b7c:	494b      	ldr	r1, [pc, #300]	; (8002cac <SD_searchSettings+0x144>)
 8002b7e:	484c      	ldr	r0, [pc, #304]	; (8002cb0 <SD_searchSettings+0x148>)
 8002b80:	f009 fa70 	bl	800c064 <f_read>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <SD_searchSettings+0x14c>)
 8002b8a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <SD_searchSettings+0x14c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <SD_searchSettings+0x38>
		return fresult;
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <SD_searchSettings+0x14c>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	e082      	b.n	8002ca0 <SD_searchSettings+0x138>

	for (index; sdCard.longBuffer[index] != '='; index++);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	4a45      	ldr	r2, [pc, #276]	; (8002cb8 <SD_searchSettings+0x150>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b3d      	cmp	r3, #61	; 0x3d
 8002bae:	d1f4      	bne.n	8002b9a <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f240 227d 	movw	r2, #637	; 0x27d
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	dd0b      	ble.n	8002bd2 <SD_searchSettings+0x6a>
	{
		fresult = SD_createSettings();
 8002bba:	f7ff ff7f 	bl	8002abc <SD_createSettings>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <SD_searchSettings+0x14c>)
 8002bc4:	701a      	strb	r2, [r3, #0]
		return fresult;
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <SD_searchSettings+0x14c>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	e069      	b.n	8002ca0 <SD_searchSettings+0x138>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4a37      	ldr	r2, [pc, #220]	; (8002cb8 <SD_searchSettings+0x150>)
 8002bda:	4413      	add	r3, r2
 8002bdc:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d908      	bls.n	8002bf6 <SD_searchSettings+0x8e>
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <SD_searchSettings+0x150>)
 8002bec:	4413      	add	r3, r2
 8002bee:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 8002bf2:	2b5a      	cmp	r3, #90	; 0x5a
 8002bf4:	d9ea      	bls.n	8002bcc <SD_searchSettings+0x64>
	deindex--;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	e012      	b.n	8002c28 <SD_searchSettings+0xc0>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	1ad2      	subs	r2, r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c0e:	4413      	add	r3, r2
 8002c10:	f893 14a4 	ldrb.w	r1, [r3, #1188]	; 0x4a4
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8002c1e:	460a      	mov	r2, r1
 8002c20:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3301      	adds	r3, #1
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dde7      	ble.n	8002c02 <SD_searchSettings+0x9a>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c34:	f893 3744 	ldrb.w	r3, [r3, #1860]	; 0x744
 8002c38:	2b4d      	cmp	r3, #77	; 0x4d
 8002c3a:	d129      	bne.n	8002c90 <SD_searchSettings+0x128>
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c3e:	f893 3745 	ldrb.w	r3, [r3, #1861]	; 0x745
 8002c42:	2b4f      	cmp	r3, #79	; 0x4f
 8002c44:	d124      	bne.n	8002c90 <SD_searchSettings+0x128>
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c48:	f893 3746 	ldrb.w	r3, [r3, #1862]	; 0x746
 8002c4c:	2b44      	cmp	r3, #68	; 0x44
 8002c4e:	d11f      	bne.n	8002c90 <SD_searchSettings+0x128>
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c52:	f893 3747 	ldrb.w	r3, [r3, #1863]	; 0x747
 8002c56:	2b45      	cmp	r3, #69	; 0x45
 8002c58:	d11a      	bne.n	8002c90 <SD_searchSettings+0x128>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c5c:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002c60:	2b2f      	cmp	r3, #47	; 0x2f
 8002c62:	d90e      	bls.n	8002c82 <SD_searchSettings+0x11a>
 8002c64:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c66:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002c6a:	2b39      	cmp	r3, #57	; 0x39
 8002c6c:	d809      	bhi.n	8002c82 <SD_searchSettings+0x11a>
			sdCard.mode = sdCard.setting[5] - 48;
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c70:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b30      	subs	r3, #48	; 0x30
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <SD_searchSettings+0x150>)
 8002c7c:	f8a3 2754 	strh.w	r2, [r3, #1876]	; 0x754
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002c80:	e00c      	b.n	8002c9c <SD_searchSettings+0x134>
		else
			fresult = SD_createSettings();
 8002c82:	f7ff ff1b 	bl	8002abc <SD_createSettings>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <SD_searchSettings+0x14c>)
 8002c8c:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002c8e:	e005      	b.n	8002c9c <SD_searchSettings+0x134>
	}
	else
		fresult = SD_createSettings();
 8002c90:	f7ff ff14 	bl	8002abc <SD_createSettings>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <SD_searchSettings+0x14c>)
 8002c9a:	701a      	strb	r2, [r3, #0]

	return fresult;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <SD_searchSettings+0x14c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000c00 	.word	0x20000c00
 8002cac:	20000968 	.word	0x20000968
 8002cb0:	200008f4 	.word	0x200008f4
 8002cb4:	20000e78 	.word	0x20000e78
 8002cb8:	200004c4 	.word	0x200004c4

08002cbc <SD_createFile>:

/*
 * 	Função que cria o fileXXX.txt
 */
FRESULT SD_createFile(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4921      	ldr	r1, [pc, #132]	; (8002d50 <SD_createFile+0x94>)
 8002cca:	4822      	ldr	r0, [pc, #136]	; (8002d54 <SD_createFile+0x98>)
 8002ccc:	f00a f84a 	bl	800cd64 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 8002cd0:	2206      	movs	r2, #6
 8002cd2:	4920      	ldr	r1, [pc, #128]	; (8002d54 <SD_createFile+0x98>)
 8002cd4:	4820      	ldr	r0, [pc, #128]	; (8002d58 <SD_createFile+0x9c>)
 8002cd6:	f009 f845 	bl	800bd64 <f_open>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <SD_createFile+0xa0>)
 8002ce0:	701a      	strb	r2, [r3, #0]
		filnum++;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8002ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cec:	481c      	ldr	r0, [pc, #112]	; (8002d60 <SD_createFile+0xa4>)
 8002cee:	f002 fe61 	bl	80059b4 <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <SD_createFile+0xa0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d0e5      	beq.n	8002cc6 <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 8002cfa:	491a      	ldr	r1, [pc, #104]	; (8002d64 <SD_createFile+0xa8>)
 8002cfc:	481a      	ldr	r0, [pc, #104]	; (8002d68 <SD_createFile+0xac>)
 8002cfe:	f00a f831 	bl	800cd64 <siprintf>
 8002d02:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <SD_createFile+0xb0>)
 8002d08:	4917      	ldr	r1, [pc, #92]	; (8002d68 <SD_createFile+0xac>)
 8002d0a:	4813      	ldr	r0, [pc, #76]	; (8002d58 <SD_createFile+0x9c>)
 8002d0c:	f009 faff 	bl	800c30e <f_write>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <SD_createFile+0xa0>)
 8002d16:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <SD_createFile+0xa0>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <SD_createFile+0x6a>
		return fresult;
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <SD_createFile+0xa0>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	e00f      	b.n	8002d46 <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 8002d26:	480c      	ldr	r0, [pc, #48]	; (8002d58 <SD_createFile+0x9c>)
 8002d28:	f009 fd27 	bl	800c77a <f_close>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <SD_createFile+0xa0>)
 8002d32:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <SD_createFile+0xa0>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <SD_createFile+0x86>
		return fresult;
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <SD_createFile+0xa0>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	e001      	b.n	8002d46 <SD_createFile+0x8a>

	return fresult;
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <SD_createFile+0xa0>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	0800d6c0 	.word	0x0800d6c0
 8002d54:	20000be8 	.word	0x20000be8
 8002d58:	200008f4 	.word	0x200008f4
 8002d5c:	20000e78 	.word	0x20000e78
 8002d60:	40011000 	.word	0x40011000
 8002d64:	0800d6d0 	.word	0x0800d6d0
 8002d68:	20000928 	.word	0x20000928
 8002d6c:	20000c04 	.word	0x20000c04

08002d70 <SD_write>:

/*
 * 	Função que escreve em um arquivo
 */
FRESULT SD_write(int bsize, char wBuf[bsize])
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_WRITE);
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4925      	ldr	r1, [pc, #148]	; (8002e14 <SD_write+0xa4>)
 8002d7e:	4826      	ldr	r0, [pc, #152]	; (8002e18 <SD_write+0xa8>)
 8002d80:	f008 fff0 	bl	800bd64 <f_open>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <SD_write+0xac>)
 8002d8a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <SD_write+0xac>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <SD_write+0x2a>
		return fresult;
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <SD_write+0xac>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	e037      	b.n	8002e0a <SD_write+0x9a>

	fresult = f_lseek(&sdCard.fil, sdCard.fil.fsize);
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <SD_write+0xb0>)
 8002d9c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002da0:	4619      	mov	r1, r3
 8002da2:	481d      	ldr	r0, [pc, #116]	; (8002e18 <SD_write+0xa8>)
 8002da4:	f009 fd0f 	bl	800c7c6 <f_lseek>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <SD_write+0xac>)
 8002dae:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <SD_write+0xac>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <SD_write+0x4e>
		return fresult;
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <SD_write+0xac>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	e025      	b.n	8002e0a <SD_write+0x9a>

	fresult = f_write(&sdCard.fil, wBuf, bsize, &sdCard.bw);
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <SD_write+0xb4>)
 8002dc2:	6839      	ldr	r1, [r7, #0]
 8002dc4:	4814      	ldr	r0, [pc, #80]	; (8002e18 <SD_write+0xa8>)
 8002dc6:	f009 faa2 	bl	800c30e <f_write>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <SD_write+0xac>)
 8002dd0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <SD_write+0xac>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <SD_write+0x70>
		return fresult;
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <SD_write+0xac>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	e014      	b.n	8002e0a <SD_write+0x9a>

	fresult = f_close(&sdCard.fil);
 8002de0:	480d      	ldr	r0, [pc, #52]	; (8002e18 <SD_write+0xa8>)
 8002de2:	f009 fcca 	bl	800c77a <f_close>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <SD_write+0xac>)
 8002dec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <SD_write+0xac>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <SD_write+0x8c>
		return fresult;
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <SD_write+0xac>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	e006      	b.n	8002e0a <SD_write+0x9a>

	LDEBUG;
 8002dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e00:	4809      	ldr	r0, [pc, #36]	; (8002e28 <SD_write+0xb8>)
 8002e02:	f002 fdd7 	bl	80059b4 <HAL_GPIO_TogglePin>

	return fresult;
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <SD_write+0xac>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000be8 	.word	0x20000be8
 8002e18:	200008f4 	.word	0x200008f4
 8002e1c:	20000e78 	.word	0x20000e78
 8002e20:	200004c4 	.word	0x200004c4
 8002e24:	20000c04 	.word	0x20000c04
 8002e28:	40011000 	.word	0x40011000

08002e2c <SD_logger>:

/*
 * 	Função de datalogger
 */
FRESULT SD_logger(void)
{
 8002e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2e:	b08f      	sub	sp, #60	; 0x3c
 8002e30:	af0a      	add	r7, sp, #40	; 0x28
	if (sdCard.counter < 9999)
 8002e32:	4b87      	ldr	r3, [pc, #540]	; (8003050 <SD_logger+0x224>)
 8002e34:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8002e38:	f242 720e 	movw	r2, #9998	; 0x270e
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d808      	bhi.n	8002e52 <SD_logger+0x26>
		sdCard.counter++;
 8002e40:	4b83      	ldr	r3, [pc, #524]	; (8003050 <SD_logger+0x224>)
 8002e42:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8002e46:	3301      	adds	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b81      	ldr	r3, [pc, #516]	; (8003050 <SD_logger+0x224>)
 8002e4c:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
 8002e50:	e003      	b.n	8002e5a <SD_logger+0x2e>
	else
		sdCard.counter = 0;
 8002e52:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <SD_logger+0x224>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734

	if (sdCard.mode == 0 || sdCard.mode == 4)
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	; (8003050 <SD_logger+0x224>)
 8002e5c:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <SD_logger+0x42>
 8002e64:	4b7a      	ldr	r3, [pc, #488]	; (8003050 <SD_logger+0x224>)
 8002e66:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d110      	bne.n	8002e90 <SD_logger+0x64>
			sdCard.blen = sprintf(sdCard.buffer,
 8002e6e:	4b79      	ldr	r3, [pc, #484]	; (8003054 <SD_logger+0x228>)
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4b79      	ldr	r3, [pc, #484]	; (8003058 <SD_logger+0x22c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, vel.value,
					sdCard.counter);
 8002e76:	4976      	ldr	r1, [pc, #472]	; (8003050 <SD_logger+0x224>)
 8002e78:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002e7c:	9100      	str	r1, [sp, #0]
 8002e7e:	4977      	ldr	r1, [pc, #476]	; (800305c <SD_logger+0x230>)
 8002e80:	4877      	ldr	r0, [pc, #476]	; (8003060 <SD_logger+0x234>)
 8002e82:	f009 ff6f 	bl	800cd64 <siprintf>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a71      	ldr	r2, [pc, #452]	; (8003050 <SD_logger+0x224>)
 8002e8a:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002e8e:	e092      	b.n	8002fb6 <SD_logger+0x18a>

	else if (sdCard.mode == 1)
 8002e90:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <SD_logger+0x224>)
 8002e92:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d110      	bne.n	8002ebc <SD_logger+0x90>
			sdCard.blen = sprintf(sdCard.buffer,
 8002e9a:	4b6e      	ldr	r3, [pc, #440]	; (8003054 <SD_logger+0x228>)
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4b71      	ldr	r3, [pc, #452]	; (8003064 <SD_logger+0x238>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, dina.force,
					sdCard.counter);
 8002ea2:	496b      	ldr	r1, [pc, #428]	; (8003050 <SD_logger+0x224>)
 8002ea4:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002ea8:	9100      	str	r1, [sp, #0]
 8002eaa:	496c      	ldr	r1, [pc, #432]	; (800305c <SD_logger+0x230>)
 8002eac:	486c      	ldr	r0, [pc, #432]	; (8003060 <SD_logger+0x234>)
 8002eae:	f009 ff59 	bl	800cd64 <siprintf>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a66      	ldr	r2, [pc, #408]	; (8003050 <SD_logger+0x224>)
 8002eb6:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002eba:	e07c      	b.n	8002fb6 <SD_logger+0x18a>

	else if (sdCard.mode == 2)
 8002ebc:	4b64      	ldr	r3, [pc, #400]	; (8003050 <SD_logger+0x224>)
 8002ebe:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d156      	bne.n	8002f74 <SD_logger+0x148>
					"%05d%05d%05d"
					"%05d%05d%05d"
					"%04d%04d"
					"%04d"
					"\n",
					canBus.rx.rpm, canBus.rx.vel,
 8002ec6:	4b68      	ldr	r3, [pc, #416]	; (8003068 <SD_logger+0x23c>)
 8002ec8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			sdCard.blen = sprintf(sdCard.buffer,
 8002ecc:	469c      	mov	ip, r3
					canBus.rx.rpm, canBus.rx.vel,
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <SD_logger+0x23c>)
 8002ed0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			sdCard.blen = sprintf(sdCard.buffer,
 8002ed4:	469e      	mov	lr, r3
					((uint16_t)(aceGir.accel.X_RAW+32768)),
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <SD_logger+0x240>)
 8002ed8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002ee2:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002ee4:	461a      	mov	r2, r3
					((uint16_t)(aceGir.accel.Y_RAW+32768)),
 8002ee6:	4b61      	ldr	r3, [pc, #388]	; (800306c <SD_logger+0x240>)
 8002ee8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002ef2:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002ef4:	4619      	mov	r1, r3
					((uint16_t)(aceGir.accel.Z_RAW+32768)),
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <SD_logger+0x240>)
 8002ef8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f02:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002f04:	4618      	mov	r0, r3
					((uint16_t)(aceGir.gyro.X_RAW+32768)),
 8002f06:	4b59      	ldr	r3, [pc, #356]	; (800306c <SD_logger+0x240>)
 8002f08:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f12:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002f14:	461c      	mov	r4, r3
					((uint16_t)(aceGir.gyro.Y_RAW+32768)),
 8002f16:	4b55      	ldr	r3, [pc, #340]	; (800306c <SD_logger+0x240>)
 8002f18:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f22:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002f24:	461d      	mov	r5, r3
					((uint16_t)(aceGir.gyro.Z_RAW+32768)),
 8002f26:	4b51      	ldr	r3, [pc, #324]	; (800306c <SD_logger+0x240>)
 8002f28:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f32:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002f34:	461e      	mov	r6, r3
					analog.buffer[0], analog.buffer[1],
 8002f36:	4b4e      	ldr	r3, [pc, #312]	; (8003070 <SD_logger+0x244>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
			sdCard.blen = sprintf(sdCard.buffer,
 8002f3a:	607b      	str	r3, [r7, #4]
					analog.buffer[0], analog.buffer[1],
 8002f3c:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <SD_logger+0x244>)
 8002f3e:	885b      	ldrh	r3, [r3, #2]
			sdCard.blen = sprintf(sdCard.buffer,
 8002f40:	603b      	str	r3, [r7, #0]
					sdCard.counter);
 8002f42:	4b43      	ldr	r3, [pc, #268]	; (8003050 <SD_logger+0x224>)
 8002f44:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002f48:	9308      	str	r3, [sp, #32]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9307      	str	r3, [sp, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	9306      	str	r3, [sp, #24]
 8002f52:	9605      	str	r6, [sp, #20]
 8002f54:	9504      	str	r5, [sp, #16]
 8002f56:	9403      	str	r4, [sp, #12]
 8002f58:	9002      	str	r0, [sp, #8]
 8002f5a:	9101      	str	r1, [sp, #4]
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	4673      	mov	r3, lr
 8002f60:	4662      	mov	r2, ip
 8002f62:	4944      	ldr	r1, [pc, #272]	; (8003074 <SD_logger+0x248>)
 8002f64:	483e      	ldr	r0, [pc, #248]	; (8003060 <SD_logger+0x234>)
 8002f66:	f009 fefd 	bl	800cd64 <siprintf>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4a38      	ldr	r2, [pc, #224]	; (8003050 <SD_logger+0x224>)
 8002f6e:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8002f72:	e020      	b.n	8002fb6 <SD_logger+0x18a>

	else if (sdCard.mode == 3)
 8002f74:	4b36      	ldr	r3, [pc, #216]	; (8003050 <SD_logger+0x224>)
 8002f76:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d11b      	bne.n	8002fb6 <SD_logger+0x18a>
			sdCard.blen = sprintf(sdCard.buffer,
					"%04d%04d"
					"%04d%04d"
					"%04d"
					"\n",
					canBus.rx.rpm, canBus.rx.vel,
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <SD_logger+0x23c>)
 8002f80:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			sdCard.blen = sprintf(sdCard.buffer,
 8002f84:	4618      	mov	r0, r3
					canBus.rx.rpm, canBus.rx.vel,
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <SD_logger+0x23c>)
 8002f88:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			sdCard.blen = sprintf(sdCard.buffer,
 8002f8c:	461c      	mov	r4, r3
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <SD_logger+0x24c>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4a39      	ldr	r2, [pc, #228]	; (8003078 <SD_logger+0x24c>)
 8002f94:	6b12      	ldr	r2, [r2, #48]	; 0x30
					traction.cell1.force, traction.cell2.force,
					sdCard.counter);
 8002f96:	492e      	ldr	r1, [pc, #184]	; (8003050 <SD_logger+0x224>)
 8002f98:	f8b1 1734 	ldrh.w	r1, [r1, #1844]	; 0x734
			sdCard.blen = sprintf(sdCard.buffer,
 8002f9c:	9102      	str	r1, [sp, #8]
 8002f9e:	9201      	str	r2, [sp, #4]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4935      	ldr	r1, [pc, #212]	; (800307c <SD_logger+0x250>)
 8002fa8:	482d      	ldr	r0, [pc, #180]	; (8003060 <SD_logger+0x234>)
 8002faa:	f009 fedb 	bl	800cd64 <siprintf>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <SD_logger+0x224>)
 8002fb2:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

	for (int i = 0; i < sdCard.blen; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e012      	b.n	8002fe2 <SD_logger+0x1b6>
		sdCard.longBuffer[i+sdCard.blenLong] = sdCard.buffer[i];
 8002fbc:	4b24      	ldr	r3, [pc, #144]	; (8003050 <SD_logger+0x224>)
 8002fbe:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4922      	ldr	r1, [pc, #136]	; (8003050 <SD_logger+0x224>)
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	440a      	add	r2, r1
 8002fcc:	f202 4264 	addw	r2, r2, #1124	; 0x464
 8002fd0:	7811      	ldrb	r1, [r2, #0]
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <SD_logger+0x224>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	460a      	mov	r2, r1
 8002fd8:	f883 24a4 	strb.w	r2, [r3, #1188]	; 0x4a4
	for (int i = 0; i < sdCard.blen; i++)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <SD_logger+0x224>)
 8002fe4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	dbe6      	blt.n	8002fbc <SD_logger+0x190>
	sdCard.longCounter++;
 8002fee:	4b18      	ldr	r3, [pc, #96]	; (8003050 <SD_logger+0x224>)
 8002ff0:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <SD_logger+0x224>)
 8002ffa:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	sdCard.blenLong += sdCard.blen;
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <SD_logger+0x224>)
 8003000:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <SD_logger+0x224>)
 8003006:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800300a:	4413      	add	r3, r2
 800300c:	4a10      	ldr	r2, [pc, #64]	; (8003050 <SD_logger+0x224>)
 800300e:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	if (sdCard.longCounter >= SD_BUFFSIZE_LONG)
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <SD_logger+0x224>)
 8003014:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8003018:	2b09      	cmp	r3, #9
 800301a:	d912      	bls.n	8003042 <SD_logger+0x216>
	{
		fresult = SD_write(sdCard.blenLong, sdCard.longBuffer);
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <SD_logger+0x224>)
 800301e:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8003022:	4917      	ldr	r1, [pc, #92]	; (8003080 <SD_logger+0x254>)
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fea3 	bl	8002d70 <SD_write>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <SD_logger+0x258>)
 8003030:	701a      	strb	r2, [r3, #0]
		sdCard.longCounter = 0;
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <SD_logger+0x224>)
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
		sdCard.blenLong = 0;
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <SD_logger+0x224>)
 800303c:	2200      	movs	r2, #0
 800303e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	}

	//LDEBUG;

	return fresult;
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <SD_logger+0x258>)
 8003044:	781b      	ldrb	r3, [r3, #0]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304e:	bf00      	nop
 8003050:	200004c4 	.word	0x200004c4
 8003054:	20000494 	.word	0x20000494
 8003058:	20000cfc 	.word	0x20000cfc
 800305c:	0800d6d4 	.word	0x0800d6d4
 8003060:	20000928 	.word	0x20000928
 8003064:	20000434 	.word	0x20000434
 8003068:	20000388 	.word	0x20000388
 800306c:	2000035c 	.word	0x2000035c
 8003070:	200002e0 	.word	0x200002e0
 8003074:	0800d6e4 	.word	0x0800d6e4
 8003078:	20000e40 	.word	0x20000e40
 800307c:	0800d714 	.word	0x0800d714
 8003080:	20000968 	.word	0x20000968
 8003084:	20000e78 	.word	0x20000e78

08003088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_MspInit+0x5c>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_MspInit+0x5c>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6193      	str	r3, [r2, #24]
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_MspInit+0x5c>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_MspInit+0x5c>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <HAL_MspInit+0x5c>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_MspInit+0x5c>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_MspInit+0x60>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_MspInit+0x60>)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010000 	.word	0x40010000

080030ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0318 	add.w	r3, r7, #24
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_ADC_MspInit+0xe8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d15f      	bne.n	80031cc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800310c:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	4a31      	ldr	r2, [pc, #196]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 8003112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003116:	6193      	str	r3, [r2, #24]
 8003118:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6193      	str	r3, [r2, #24]
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800313c:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 8003142:	f043 0308 	orr.w	r3, r3, #8
 8003146:	6193      	str	r3, [r2, #24]
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <HAL_ADC_MspInit+0xec>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003158:	2303      	movs	r3, #3
 800315a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 0318 	add.w	r3, r7, #24
 8003160:	4619      	mov	r1, r3
 8003162:	481e      	ldr	r0, [pc, #120]	; (80031dc <HAL_ADC_MspInit+0xf0>)
 8003164:	f002 fa8a 	bl	800567c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003168:	2302      	movs	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800316c:	2303      	movs	r3, #3
 800316e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003170:	f107 0318 	add.w	r3, r7, #24
 8003174:	4619      	mov	r1, r3
 8003176:	481a      	ldr	r0, [pc, #104]	; (80031e0 <HAL_ADC_MspInit+0xf4>)
 8003178:	f002 fa80 	bl	800567c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 800317e:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <HAL_ADC_MspInit+0xfc>)
 8003180:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 8003184:	2200      	movs	r2, #0
 8003186:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 8003196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800319a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 800319e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 80031a6:	2220      	movs	r2, #32
 80031a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031b0:	480c      	ldr	r0, [pc, #48]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 80031b2:	f001 ffc5 	bl	8005140 <HAL_DMA_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80031bc:	f7ff fb94 	bl	80028e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 80031c4:	621a      	str	r2, [r3, #32]
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_ADC_MspInit+0xf8>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031cc:	bf00      	nop
 80031ce:	3728      	adds	r7, #40	; 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40012400 	.word	0x40012400
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40010800 	.word	0x40010800
 80031e0:	40010c00 	.word	0x40010c00
 80031e4:	20000db4 	.word	0x20000db4
 80031e8:	40020008 	.word	0x40020008

080031ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0310 	add.w	r3, r7, #16
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a20      	ldr	r2, [pc, #128]	; (8003288 <HAL_CAN_MspInit+0x9c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d139      	bne.n	8003280 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800320c:	4b1f      	ldr	r3, [pc, #124]	; (800328c <HAL_CAN_MspInit+0xa0>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4a1e      	ldr	r2, [pc, #120]	; (800328c <HAL_CAN_MspInit+0xa0>)
 8003212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003216:	61d3      	str	r3, [r2, #28]
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_CAN_MspInit+0xa0>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_CAN_MspInit+0xa0>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_CAN_MspInit+0xa0>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6193      	str	r3, [r2, #24]
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_CAN_MspInit+0xa0>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800323c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324a:	f107 0310 	add.w	r3, r7, #16
 800324e:	4619      	mov	r1, r3
 8003250:	480f      	ldr	r0, [pc, #60]	; (8003290 <HAL_CAN_MspInit+0xa4>)
 8003252:	f002 fa13 	bl	800567c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800325a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003260:	2303      	movs	r3, #3
 8003262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	4619      	mov	r1, r3
 800326a:	4809      	ldr	r0, [pc, #36]	; (8003290 <HAL_CAN_MspInit+0xa4>)
 800326c:	f002 fa06 	bl	800567c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	2014      	movs	r0, #20
 8003276:	f001 ff2c 	bl	80050d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800327a:	2014      	movs	r0, #20
 800327c:	f001 ff45 	bl	800510a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003280:	bf00      	nop
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40006400 	.word	0x40006400
 800328c:	40021000 	.word	0x40021000
 8003290:	40010800 	.word	0x40010800

08003294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 0310 	add.w	r3, r7, #16
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_I2C_MspInit+0x74>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d124      	bne.n	80032fe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_I2C_MspInit+0x78>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	4a14      	ldr	r2, [pc, #80]	; (800330c <HAL_I2C_MspInit+0x78>)
 80032ba:	f043 0308 	orr.w	r3, r3, #8
 80032be:	6193      	str	r3, [r2, #24]
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_I2C_MspInit+0x78>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032d2:	2312      	movs	r3, #18
 80032d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032d6:	2303      	movs	r3, #3
 80032d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	4619      	mov	r1, r3
 80032e0:	480b      	ldr	r0, [pc, #44]	; (8003310 <HAL_I2C_MspInit+0x7c>)
 80032e2:	f002 f9cb 	bl	800567c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_I2C_MspInit+0x78>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_I2C_MspInit+0x78>)
 80032ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032f0:	61d3      	str	r3, [r2, #28]
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_I2C_MspInit+0x78>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80032fe:	bf00      	nop
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40005800 	.word	0x40005800
 800330c:	40021000 	.word	0x40021000
 8003310:	40010c00 	.word	0x40010c00

08003314 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_SPI_MspInit+0xa4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d13d      	bne.n	80033b0 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_SPI_MspInit+0xa8>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_SPI_MspInit+0xa8>)
 800333a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800333e:	6193      	str	r3, [r2, #24]
 8003340:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <HAL_SPI_MspInit+0xa8>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_SPI_MspInit+0xa8>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	4a1a      	ldr	r2, [pc, #104]	; (80033bc <HAL_SPI_MspInit+0xa8>)
 8003352:	f043 0308 	orr.w	r3, r3, #8
 8003356:	6193      	str	r3, [r2, #24]
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_SPI_MspInit+0xa8>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003364:	2328      	movs	r3, #40	; 0x28
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800336c:	2303      	movs	r3, #3
 800336e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	4812      	ldr	r0, [pc, #72]	; (80033c0 <HAL_SPI_MspInit+0xac>)
 8003378:	f002 f980 	bl	800567c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800337c:	2310      	movs	r3, #16
 800337e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4619      	mov	r1, r3
 800338e:	480c      	ldr	r0, [pc, #48]	; (80033c0 <HAL_SPI_MspInit+0xac>)
 8003390:	f002 f974 	bl	800567c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_SPI_MspInit+0xb0>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
 80033aa:	4a06      	ldr	r2, [pc, #24]	; (80033c4 <HAL_SPI_MspInit+0xb0>)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033b0:	bf00      	nop
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40013000 	.word	0x40013000
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40010c00 	.word	0x40010c00
 80033c4:	40010000 	.word	0x40010000

080033c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0320 	add.w	r3, r7, #32
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a51      	ldr	r2, [pc, #324]	; (8003528 <HAL_TIM_Base_MspInit+0x160>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d135      	bne.n	8003454 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033e8:	4b50      	ldr	r3, [pc, #320]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4a4f      	ldr	r2, [pc, #316]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 80033ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033f2:	6193      	str	r3, [r2, #24]
 80033f4:	4b4d      	ldr	r3, [pc, #308]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003400:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a49      	ldr	r2, [pc, #292]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b47      	ldr	r3, [pc, #284]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800341c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341e:	2300      	movs	r3, #0
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003422:	2302      	movs	r3, #2
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f107 0320 	add.w	r3, r7, #32
 800342a:	4619      	mov	r1, r3
 800342c:	4840      	ldr	r0, [pc, #256]	; (8003530 <HAL_TIM_Base_MspInit+0x168>)
 800342e:	f002 f925 	bl	800567c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2100      	movs	r1, #0
 8003436:	2019      	movs	r0, #25
 8003438:	f001 fe4b 	bl	80050d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800343c:	2019      	movs	r0, #25
 800343e:	f001 fe64 	bl	800510a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	201b      	movs	r0, #27
 8003448:	f001 fe43 	bl	80050d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800344c:	201b      	movs	r0, #27
 800344e:	f001 fe5c 	bl	800510a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003452:	e064      	b.n	800351e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345c:	d12c      	bne.n	80034b8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800345e:	4b33      	ldr	r3, [pc, #204]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4a32      	ldr	r2, [pc, #200]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	61d3      	str	r3, [r2, #28]
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	4a2c      	ldr	r2, [pc, #176]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	6193      	str	r3, [r2, #24]
 8003482:	4b2a      	ldr	r3, [pc, #168]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800348e:	2301      	movs	r3, #1
 8003490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003496:	2302      	movs	r3, #2
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	f107 0320 	add.w	r3, r7, #32
 800349e:	4619      	mov	r1, r3
 80034a0:	4823      	ldr	r0, [pc, #140]	; (8003530 <HAL_TIM_Base_MspInit+0x168>)
 80034a2:	f002 f8eb 	bl	800567c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	201c      	movs	r0, #28
 80034ac:	f001 fe11 	bl	80050d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034b0:	201c      	movs	r0, #28
 80034b2:	f001 fe2a 	bl	800510a <HAL_NVIC_EnableIRQ>
}
 80034b6:	e032      	b.n	800351e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_TIM_Base_MspInit+0x16c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d114      	bne.n	80034ec <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	61d3      	str	r3, [r2, #28]
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2101      	movs	r1, #1
 80034de:	201d      	movs	r0, #29
 80034e0:	f001 fdf7 	bl	80050d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034e4:	201d      	movs	r0, #29
 80034e6:	f001 fe10 	bl	800510a <HAL_NVIC_EnableIRQ>
}
 80034ea:	e018      	b.n	800351e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a11      	ldr	r2, [pc, #68]	; (8003538 <HAL_TIM_Base_MspInit+0x170>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d113      	bne.n	800351e <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	61d3      	str	r3, [r2, #28]
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_TIM_Base_MspInit+0x164>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2101      	movs	r1, #1
 8003512:	201e      	movs	r0, #30
 8003514:	f001 fddd 	bl	80050d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003518:	201e      	movs	r0, #30
 800351a:	f001 fdf6 	bl	800510a <HAL_NVIC_EnableIRQ>
}
 800351e:	bf00      	nop
 8003520:	3730      	adds	r7, #48	; 0x30
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40021000 	.word	0x40021000
 8003530:	40010800 	.word	0x40010800
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800

0800353c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	f107 0318 	add.w	r3, r7, #24
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a66      	ldr	r2, [pc, #408]	; (80036f0 <HAL_UART_MspInit+0x1b4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d161      	bne.n	8003620 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800355c:	4b65      	ldr	r3, [pc, #404]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	4a64      	ldr	r2, [pc, #400]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 8003562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003566:	6193      	str	r3, [r2, #24]
 8003568:	4b62      	ldr	r3, [pc, #392]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003574:	4b5f      	ldr	r3, [pc, #380]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4a5e      	ldr	r2, [pc, #376]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 800357a:	f043 0304 	orr.w	r3, r3, #4
 800357e:	6193      	str	r3, [r2, #24]
 8003580:	4b5c      	ldr	r3, [pc, #368]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800358c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003596:	2303      	movs	r3, #3
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359a:	f107 0318 	add.w	r3, r7, #24
 800359e:	4619      	mov	r1, r3
 80035a0:	4855      	ldr	r0, [pc, #340]	; (80036f8 <HAL_UART_MspInit+0x1bc>)
 80035a2:	f002 f86b 	bl	800567c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b4:	f107 0318 	add.w	r3, r7, #24
 80035b8:	4619      	mov	r1, r3
 80035ba:	484f      	ldr	r0, [pc, #316]	; (80036f8 <HAL_UART_MspInit+0x1bc>)
 80035bc:	f002 f85e 	bl	800567c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80035c0:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035c2:	4a4f      	ldr	r2, [pc, #316]	; (8003700 <HAL_UART_MspInit+0x1c4>)
 80035c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c6:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035d2:	4b4a      	ldr	r3, [pc, #296]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035d4:	2280      	movs	r2, #128	; 0x80
 80035d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d8:	4b48      	ldr	r3, [pc, #288]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035e4:	4b45      	ldr	r3, [pc, #276]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035e6:	2220      	movs	r2, #32
 80035e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035ea:	4b44      	ldr	r3, [pc, #272]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035ec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80035f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035f2:	4842      	ldr	r0, [pc, #264]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 80035f4:	f001 fda4 	bl	8005140 <HAL_DMA_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80035fe:	f7ff f973 	bl	80028e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a3d      	ldr	r2, [pc, #244]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
 8003608:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <HAL_UART_MspInit+0x1c0>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2100      	movs	r1, #0
 8003612:	2025      	movs	r0, #37	; 0x25
 8003614:	f001 fd5d 	bl	80050d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003618:	2025      	movs	r0, #37	; 0x25
 800361a:	f001 fd76 	bl	800510a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800361e:	e063      	b.n	80036e8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a37      	ldr	r2, [pc, #220]	; (8003704 <HAL_UART_MspInit+0x1c8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d15e      	bne.n	80036e8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 800362a:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	61d3      	str	r3, [r2, #28]
 8003636:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6193      	str	r3, [r2, #24]
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <HAL_UART_MspInit+0x1b8>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800365a:	2304      	movs	r3, #4
 800365c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003662:	2303      	movs	r3, #3
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003666:	f107 0318 	add.w	r3, r7, #24
 800366a:	4619      	mov	r1, r3
 800366c:	4822      	ldr	r0, [pc, #136]	; (80036f8 <HAL_UART_MspInit+0x1bc>)
 800366e:	f002 f805 	bl	800567c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003672:	2308      	movs	r3, #8
 8003674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367e:	f107 0318 	add.w	r3, r7, #24
 8003682:	4619      	mov	r1, r3
 8003684:	481c      	ldr	r0, [pc, #112]	; (80036f8 <HAL_UART_MspInit+0x1bc>)
 8003686:	f001 fff9 	bl	800567c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800368a:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_UART_MspInit+0x1d0>)
 800368e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 8003692:	2200      	movs	r2, #0
 8003694:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036a2:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036a8:	4b17      	ldr	r3, [pc, #92]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 80036b0:	2220      	movs	r2, #32
 80036b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 80036b6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80036ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036bc:	4812      	ldr	r0, [pc, #72]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 80036be:	f001 fd3f 	bl	8005140 <HAL_DMA_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_UART_MspInit+0x190>
      Error_Handler();
 80036c8:	f7ff f90e 	bl	80028e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
 80036d2:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <HAL_UART_MspInit+0x1cc>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036d8:	2200      	movs	r2, #0
 80036da:	2100      	movs	r1, #0
 80036dc:	2026      	movs	r0, #38	; 0x26
 80036de:	f001 fcf8 	bl	80050d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036e2:	2026      	movs	r0, #38	; 0x26
 80036e4:	f001 fd11 	bl	800510a <HAL_NVIC_EnableIRQ>
}
 80036e8:	bf00      	nop
 80036ea:	3728      	adds	r7, #40	; 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40013800 	.word	0x40013800
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40010800 	.word	0x40010800
 80036fc:	20000d2c 	.word	0x20000d2c
 8003700:	40020058 	.word	0x40020058
 8003704:	40004400 	.word	0x40004400
 8003708:	20000c1c 	.word	0x20000c1c
 800370c:	4002006c 	.word	0x4002006c

08003710 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <SDTimer_Handler+0x3c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <SDTimer_Handler+0x1c>
    Timer1--;
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <SDTimer_Handler+0x3c>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b2da      	uxtb	r2, r3
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <SDTimer_Handler+0x3c>)
 800372a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <SDTimer_Handler+0x40>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <SDTimer_Handler+0x34>
    Timer2--;
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <SDTimer_Handler+0x40>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <SDTimer_Handler+0x40>)
 8003742:	701a      	strb	r2, [r3, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	20000f1d 	.word	0x20000f1d
 8003750:	20000f1c 	.word	0x20000f1c

08003754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003758:	e7fe      	b.n	8003758 <NMI_Handler+0x4>

0800375a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800375e:	e7fe      	b.n	800375e <HardFault_Handler+0x4>

08003760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003764:	e7fe      	b.n	8003764 <MemManage_Handler+0x4>

08003766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800376a:	e7fe      	b.n	800376a <BusFault_Handler+0x4>

0800376c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <UsageFault_Handler+0x4>

08003772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
	...

08003798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <SysTick_Handler+0x30>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <SysTick_Handler+0x30>)
 80037a8:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <SysTick_Handler+0x30>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b09      	cmp	r3, #9
 80037b2:	d904      	bls.n	80037be <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <SysTick_Handler+0x30>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80037ba:	f7ff ffa9 	bl	8003710 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037be:	f000 f9b3 	bl	8003b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200000a6 	.word	0x200000a6

080037cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <DMA1_Channel1_IRQHandler+0x10>)
 80037d2:	f001 fe1f 	bl	8005414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000db4 	.word	0x20000db4

080037e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <DMA1_Channel5_IRQHandler+0x10>)
 80037e6:	f001 fe15 	bl	8005414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000d2c 	.word	0x20000d2c

080037f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <DMA1_Channel6_IRQHandler+0x10>)
 80037fa:	f001 fe0b 	bl	8005414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000c1c 	.word	0x20000c1c

08003808 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	can_bus_Recieve();
 800380c:	f7fd fd36 	bl	800127c <can_bus_Recieve>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8003812:	f001 f95b 	bl	8004acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2000040c 	.word	0x2000040c

08003820 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_UPDATE) != RESET)
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <TIM1_UP_IRQHandler+0x20>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <TIM1_UP_IRQHandler+0x16>
		rot_Reset();
 8003832:	f7ff f875 	bl	8002920 <rot_Reset>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003836:	4802      	ldr	r0, [pc, #8]	; (8003840 <TIM1_UP_IRQHandler+0x20>)
 8003838:	f004 fc80 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000df8 	.word	0x20000df8

08003844 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_CC2) != RESET)
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <TIM1_CC_IRQHandler+0x20>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d101      	bne.n	800385a <TIM1_CC_IRQHandler+0x16>
		rot_Calc();
 8003856:	f7ff f86d 	bl	8002934 <rot_Calc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800385a:	4802      	ldr	r0, [pc, #8]	; (8003864 <TIM1_CC_IRQHandler+0x20>)
 800385c:	f004 fc6e 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000df8 	.word	0x20000df8

08003868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1) != RESET)
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <TIM2_IRQHandler+0x34>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d101      	bne.n	800387e <TIM2_IRQHandler+0x16>
		vel_Calc();
 800387a:	f000 f8df 	bl	8003a3c <vel_Calc>
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_UPDATE) != RESET)
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <TIM2_IRQHandler+0x34>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <TIM2_IRQHandler+0x28>
		vel_Reset();
 800388c:	f000 f8cc 	bl	8003a28 <vel_Reset>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <TIM2_IRQHandler+0x34>)
 8003892:	f004 fc53 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000ed4 	.word	0x20000ed4

080038a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <TIM3_IRQHandler+0x10>)
 80038a6:	f004 fc49 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000cb4 	.word	0x20000cb4

080038b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (sdCard.mode == 1)
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <TIM4_IRQHandler+0x50>)
 80038ba:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <TIM4_IRQHandler+0x12>
		dina_Update();
 80038c2:	f7fd fd47 	bl	8001354 <dina_Update>
	if (sdCard.mode == 3)
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <TIM4_IRQHandler+0x50>)
 80038c8:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d101      	bne.n	80038d4 <TIM4_IRQHandler+0x20>
		traction_Update();
 80038d0:	f000 f886 	bl	80039e0 <traction_Update>
	if (sdCard.mode == 2)
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <TIM4_IRQHandler+0x50>)
 80038d6:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d101      	bne.n	80038e2 <TIM4_IRQHandler+0x2e>
	{
		aceGir_Read();
 80038de:	f7fd fb97 	bl	8001010 <aceGir_Read>
	}
	if (sdCard.mode != 9)
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <TIM4_IRQHandler+0x50>)
 80038e4:	f8b3 3754 	ldrh.w	r3, [r3, #1876]	; 0x754
 80038e8:	2b09      	cmp	r3, #9
 80038ea:	d005      	beq.n	80038f8 <TIM4_IRQHandler+0x44>
		fresult = SD_logger();
 80038ec:	f7ff fa9e 	bl	8002e2c <SD_logger>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <TIM4_IRQHandler+0x54>)
 80038f6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038f8:	4804      	ldr	r0, [pc, #16]	; (800390c <TIM4_IRQHandler+0x58>)
 80038fa:	f004 fc1f 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200004c4 	.word	0x200004c4
 8003908:	20000e78 	.word	0x20000e78
 800390c:	20000314 	.word	0x20000314

08003910 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <USART1_IRQHandler+0x10>)
 8003916:	f005 f9b7 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000d70 	.word	0x20000d70

08003924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003928:	4802      	ldr	r0, [pc, #8]	; (8003934 <USART2_IRQHandler+0x10>)
 800392a:	f005 f9ad 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000450 	.word	0x20000450

08003938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003940:	4a14      	ldr	r2, [pc, #80]	; (8003994 <_sbrk+0x5c>)
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <_sbrk+0x60>)
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800394c:	4b13      	ldr	r3, [pc, #76]	; (800399c <_sbrk+0x64>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <_sbrk+0x64>)
 8003956:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <_sbrk+0x68>)
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <_sbrk+0x64>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	d207      	bcs.n	8003978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003968:	f009 f9ca 	bl	800cd00 <__errno>
 800396c:	4603      	mov	r3, r0
 800396e:	220c      	movs	r2, #12
 8003970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295
 8003976:	e009      	b.n	800398c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <_sbrk+0x64>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	4a05      	ldr	r2, [pc, #20]	; (800399c <_sbrk+0x64>)
 8003988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20005000 	.word	0x20005000
 8003998:	00000400 	.word	0x00000400
 800399c:	200000a8 	.word	0x200000a8
 80039a0:	20001398 	.word	0x20001398

080039a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <traction_Init>:
 */

#include "traction.h"

void traction_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	traction.cell1.huart = &huart1;
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <traction_Init+0x20>)
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <traction_Init+0x24>)
 80039b8:	601a      	str	r2, [r3, #0]
	traction.cell2.huart = &huart2;
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <traction_Init+0x20>)
 80039bc:	4a06      	ldr	r2, [pc, #24]	; (80039d8 <traction_Init+0x28>)
 80039be:	61da      	str	r2, [r3, #28]
	forceGauge_uart_Init_DMA(&traction.cell1);
 80039c0:	4803      	ldr	r0, [pc, #12]	; (80039d0 <traction_Init+0x20>)
 80039c2:	f7fe f9a7 	bl	8001d14 <forceGauge_uart_Init_DMA>
	forceGauge_uart_Init_DMA(&traction.cell2);
 80039c6:	4805      	ldr	r0, [pc, #20]	; (80039dc <traction_Init+0x2c>)
 80039c8:	f7fe f9a4 	bl	8001d14 <forceGauge_uart_Init_DMA>
}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000e40 	.word	0x20000e40
 80039d4:	20000d70 	.word	0x20000d70
 80039d8:	20000450 	.word	0x20000450
 80039dc:	20000e5c 	.word	0x20000e5c

080039e0 <traction_Update>:

void traction_Update(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
	forceGauge_getForce(&traction.cell1);
 80039e4:	4803      	ldr	r0, [pc, #12]	; (80039f4 <traction_Update+0x14>)
 80039e6:	f7fe f9a9 	bl	8001d3c <forceGauge_getForce>
	forceGauge_getForce(&traction.cell2);
 80039ea:	4803      	ldr	r0, [pc, #12]	; (80039f8 <traction_Update+0x18>)
 80039ec:	f7fe f9a6 	bl	8001d3c <forceGauge_getForce>
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000e40 	.word	0x20000e40
 80039f8:	20000e5c 	.word	0x20000e5c

080039fc <vel_Init>:

/*
 * 	Função de inicialização
 */
void vel_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
	vel.constante = 1.65179;			/* < Salva a constante para calculo da velocidade */
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <vel_Init+0x20>)
 8003a02:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <vel_Init+0x24>)
 8003a04:	601a      	str	r2, [r3, #0]
	vel.htim = &htim2;				/* < Salva o ponteiro do Timer que será utilizado */
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <vel_Init+0x20>)
 8003a08:	4a06      	ldr	r2, [pc, #24]	; (8003a24 <vel_Init+0x28>)
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
	vel.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <vel_Init+0x20>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&vel);			/* < Chama função de inicialização */
 8003a12:	4802      	ldr	r0, [pc, #8]	; (8003a1c <vel_Init+0x20>)
 8003a14:	f7fe fa47 	bl	8001ea6 <indutivo_Init>
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000cfc 	.word	0x20000cfc
 8003a20:	3fd36ddb 	.word	0x3fd36ddb
 8003a24:	20000ed4 	.word	0x20000ed4

08003a28 <vel_Reset>:

/*
 * 	Função de reset
 */
void vel_Reset(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
	indutivo_reset(&vel);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <vel_Reset+0x10>)
 8003a2e:	f7fe fb1b 	bl	8002068 <indutivo_reset>
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000cfc 	.word	0x20000cfc

08003a3c <vel_Calc>:

/*
 * 	Função de calculo
 */
void vel_Calc(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	indutivo_calc(&vel);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <vel_Calc+0x10>)
 8003a42:	f7fe faad 	bl	8001fa0 <indutivo_calc>
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000cfc 	.word	0x20000cfc

08003a50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a50:	480c      	ldr	r0, [pc, #48]	; (8003a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a52:	490d      	ldr	r1, [pc, #52]	; (8003a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a58:	e002      	b.n	8003a60 <LoopCopyDataInit>

08003a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a5e:	3304      	adds	r3, #4

08003a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a64:	d3f9      	bcc.n	8003a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a68:	4c0a      	ldr	r4, [pc, #40]	; (8003a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a6c:	e001      	b.n	8003a72 <LoopFillZerobss>

08003a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a70:	3204      	adds	r2, #4

08003a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a74:	d3fb      	bcc.n	8003a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a76:	f7ff ff95 	bl	80039a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a7a:	f009 f947 	bl	800cd0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a7e:	f7fe fb13 	bl	80020a8 <main>
  bx lr
 8003a82:	4770      	bx	lr
  ldr r0, =_sdata
 8003a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a88:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003a8c:	0800dd38 	.word	0x0800dd38
  ldr r2, =_sbss
 8003a90:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003a94:	20001398 	.word	0x20001398

08003a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a98:	e7fe      	b.n	8003a98 <ADC1_2_IRQHandler>
	...

08003a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_Init+0x28>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_Init+0x28>)
 8003aa6:	f043 0310 	orr.w	r3, r3, #16
 8003aaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aac:	2003      	movs	r0, #3
 8003aae:	f001 fb05 	bl	80050bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f000 f808 	bl	8003ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ab8:	f7ff fae6 	bl	8003088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40022000 	.word	0x40022000

08003ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_InitTick+0x54>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_InitTick+0x58>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fb1d 	bl	8005126 <HAL_SYSTICK_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e00e      	b.n	8003b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b0f      	cmp	r3, #15
 8003afa:	d80a      	bhi.n	8003b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003afc:	2200      	movs	r2, #0
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	f001 fae5 	bl	80050d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b08:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <HAL_InitTick+0x5c>)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000004 	.word	0x20000004
 8003b20:	2000000c 	.word	0x2000000c
 8003b24:	20000008 	.word	0x20000008

08003b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_IncTick+0x1c>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_IncTick+0x20>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4413      	add	r3, r2
 8003b38:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <HAL_IncTick+0x20>)
 8003b3a:	6013      	str	r3, [r2, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	2000000c 	.word	0x2000000c
 8003b48:	20000f20 	.word	0x20000f20

08003b4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b50:	4b02      	ldr	r3, [pc, #8]	; (8003b5c <HAL_GetTick+0x10>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	20000f20 	.word	0x20000f20

08003b60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0be      	b.n	8003d00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff faa4 	bl	80030ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 faff 	bl	80041a8 <ADC_ConversionStop_Disable>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f040 8099 	bne.w	8003cee <HAL_ADC_Init+0x18e>
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 8095 	bne.w	8003cee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bcc:	f023 0302 	bic.w	r3, r3, #2
 8003bd0:	f043 0202 	orr.w	r2, r3, #2
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003be0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7b1b      	ldrb	r3, [r3, #12]
 8003be6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003be8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf8:	d003      	beq.n	8003c02 <HAL_ADC_Init+0xa2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_ADC_Init+0xa8>
 8003c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c06:	e000      	b.n	8003c0a <HAL_ADC_Init+0xaa>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7d1b      	ldrb	r3, [r3, #20]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d119      	bne.n	8003c4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7b1b      	ldrb	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	035a      	lsls	r2, r3, #13
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e00b      	b.n	8003c4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f043 0220 	orr.w	r2, r3, #32
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_ADC_Init+0x1a8>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7c:	d003      	beq.n	8003c86 <HAL_ADC_Init+0x126>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d104      	bne.n	8003c90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	051b      	lsls	r3, r3, #20
 8003c8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <HAL_ADC_Init+0x1ac>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d10b      	bne.n	8003ccc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003cca:	e018      	b.n	8003cfe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	f023 0312 	bic.w	r3, r3, #18
 8003cd4:	f043 0210 	orr.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003cec:	e007      	b.n	8003cfe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	f043 0210 	orr.w	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	ffe1f7fd 	.word	0xffe1f7fd
 8003d0c:	ff1f0efe 	.word	0xff1f0efe

08003d10 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a64      	ldr	r2, [pc, #400]	; (8003eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_ADC_Start_DMA+0x24>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a63      	ldr	r2, [pc, #396]	; (8003ebc <HAL_ADC_Start_DMA+0x1ac>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d106      	bne.n	8003d42 <HAL_ADC_Start_DMA+0x32>
 8003d34:	4b60      	ldr	r3, [pc, #384]	; (8003eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f040 80b3 	bne.w	8003ea8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_Start_DMA+0x40>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0ae      	b.n	8003eae <HAL_ADC_Start_DMA+0x19e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f9cb 	bl	80040f4 <ADC_Enable>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 809a 	bne.w	8003e9e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a4e      	ldr	r2, [pc, #312]	; (8003ebc <HAL_ADC_Start_DMA+0x1ac>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d105      	bne.n	8003d94 <HAL_ADC_Start_DMA+0x84>
 8003d88:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d115      	bne.n	8003dc0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d026      	beq.n	8003dfc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dbe:	e01d      	b.n	8003dfc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	; (8003eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_ADC_Start_DMA+0xd0>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a38      	ldr	r2, [pc, #224]	; (8003ebc <HAL_ADC_Start_DMA+0x1ac>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10d      	bne.n	8003dfc <HAL_ADC_Start_DMA+0xec>
 8003de0:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f023 0206 	bic.w	r2, r3, #6
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e14:	e002      	b.n	8003e1c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4a25      	ldr	r2, [pc, #148]	; (8003ec0 <HAL_ADC_Start_DMA+0x1b0>)
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <HAL_ADC_Start_DMA+0x1b4>)
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a23      	ldr	r2, [pc, #140]	; (8003ec8 <HAL_ADC_Start_DMA+0x1b8>)
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0202 	mvn.w	r2, #2
 8003e44:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e54:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a18      	ldr	r0, [r3, #32]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	334c      	adds	r3, #76	; 0x4c
 8003e60:	4619      	mov	r1, r3
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f001 f9c5 	bl	80051f4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003e74:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e78:	d108      	bne.n	8003e8c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003e88:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003e8a:	e00f      	b.n	8003eac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003e9a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003e9c:	e006      	b.n	8003eac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003ea6:	e001      	b.n	8003eac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40012400 	.word	0x40012400
 8003ebc:	40012800 	.word	0x40012800
 8003ec0:	0800422b 	.word	0x0800422b
 8003ec4:	080042a7 	.word	0x080042a7
 8003ec8:	080042c3 	.word	0x080042c3

08003ecc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x20>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e0dc      	b.n	80040de <HAL_ADC_ConfigChannel+0x1da>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b06      	cmp	r3, #6
 8003f32:	d81c      	bhi.n	8003f6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	3b05      	subs	r3, #5
 8003f46:	221f      	movs	r2, #31
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	4019      	ands	r1, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3b05      	subs	r3, #5
 8003f60:	fa00 f203 	lsl.w	r2, r0, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8003f6c:	e03c      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d81c      	bhi.n	8003fb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	3b23      	subs	r3, #35	; 0x23
 8003f88:	221f      	movs	r2, #31
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	4019      	ands	r1, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3b23      	subs	r3, #35	; 0x23
 8003fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
 8003fae:	e01b      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3b41      	subs	r3, #65	; 0x41
 8003fc2:	221f      	movs	r2, #31
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	4019      	ands	r1, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	3b41      	subs	r3, #65	; 0x41
 8003fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b09      	cmp	r3, #9
 8003fee:	d91c      	bls.n	800402a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68d9      	ldr	r1, [r3, #12]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	3b1e      	subs	r3, #30
 8004002:	2207      	movs	r2, #7
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	4019      	ands	r1, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6898      	ldr	r0, [r3, #8]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	3b1e      	subs	r3, #30
 800401c:	fa00 f203 	lsl.w	r2, r0, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	60da      	str	r2, [r3, #12]
 8004028:	e019      	b.n	800405e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6919      	ldr	r1, [r3, #16]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	2207      	movs	r2, #7
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	4019      	ands	r1, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6898      	ldr	r0, [r3, #8]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	fa00 f203 	lsl.w	r2, r0, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b10      	cmp	r3, #16
 8004064:	d003      	beq.n	800406e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800406a:	2b11      	cmp	r3, #17
 800406c:	d132      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d125      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d126      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004094:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b10      	cmp	r3, #16
 800409c:	d11a      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800409e:	4b13      	ldr	r3, [pc, #76]	; (80040ec <HAL_ADC_ConfigChannel+0x1e8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	0c9a      	lsrs	r2, r3, #18
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040b4:	e002      	b.n	80040bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f9      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x1b2>
 80040c2:	e007      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	40012400 	.word	0x40012400
 80040ec:	20000004 	.word	0x20000004
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d040      	beq.n	8004194 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004122:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <ADC_Enable+0xac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1f      	ldr	r2, [pc, #124]	; (80041a4 <ADC_Enable+0xb0>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	0c9b      	lsrs	r3, r3, #18
 800412e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004130:	e002      	b.n	8004138 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3b01      	subs	r3, #1
 8004136:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f9      	bne.n	8004132 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800413e:	f7ff fd05 	bl	8003b4c <HAL_GetTick>
 8004142:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004144:	e01f      	b.n	8004186 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004146:	f7ff fd01 	bl	8003b4c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d918      	bls.n	8004186 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d011      	beq.n	8004186 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	f043 0210 	orr.w	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e007      	b.n	8004196 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d1d8      	bne.n	8004146 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000004 	.word	0x20000004
 80041a4:	431bde83 	.word	0x431bde83

080041a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d12e      	bne.n	8004220 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041d2:	f7ff fcbb 	bl	8003b4c <HAL_GetTick>
 80041d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041d8:	e01b      	b.n	8004212 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041da:	f7ff fcb7 	bl	8003b4c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d914      	bls.n	8004212 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d10d      	bne.n	8004212 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	f043 0210 	orr.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e007      	b.n	8004222 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d0dc      	beq.n	80041da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d127      	bne.n	8004294 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800425a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800425e:	d115      	bne.n	800428c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004264:	2b00      	cmp	r3, #0
 8004266:	d111      	bne.n	800428c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	f043 0201 	orr.w	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff fe1d 	bl	8003ecc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004292:	e004      	b.n	800429e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff fe12 	bl	8003ede <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff fe01 	bl	8003ef0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_ADCEx_Calibration_Start+0x1e>
 8004312:	2302      	movs	r3, #2
 8004314:	e095      	b.n	8004442 <HAL_ADCEx_Calibration_Start+0x14a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ff42 	bl	80041a8 <ADC_ConversionStop_Disable>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 8084 	bne.w	8004438 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004338:	f023 0302 	bic.w	r3, r3, #2
 800433c:	f043 0202 	orr.w	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004344:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_ADCEx_Calibration_Start+0x154>)
 8004346:	681c      	ldr	r4, [r3, #0]
 8004348:	2002      	movs	r0, #2
 800434a:	f003 f81d 	bl	8007388 <HAL_RCCEx_GetPeriphCLKFreq>
 800434e:	4603      	mov	r3, r0
 8004350:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004354:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004356:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004358:	e002      	b.n	8004360 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3b01      	subs	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f9      	bne.n	800435a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fec4 	bl	80040f4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0208 	orr.w	r2, r2, #8
 800437a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800437c:	f7ff fbe6 	bl	8003b4c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004382:	e01b      	b.n	80043bc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004384:	f7ff fbe2 	bl	8003b4c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b0a      	cmp	r3, #10
 8004390:	d914      	bls.n	80043bc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00d      	beq.n	80043bc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	f023 0312 	bic.w	r3, r3, #18
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e042      	b.n	8004442 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1dc      	bne.n	8004384 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0204 	orr.w	r2, r2, #4
 80043d8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80043da:	f7ff fbb7 	bl	8003b4c <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80043e0:	e01b      	b.n	800441a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80043e2:	f7ff fbb3 	bl	8003b4c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b0a      	cmp	r3, #10
 80043ee:	d914      	bls.n	800441a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	f023 0312 	bic.w	r3, r3, #18
 8004406:	f043 0210 	orr.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e013      	b.n	8004442 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1dc      	bne.n	80043e2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	f023 0303 	bic.w	r3, r3, #3
 8004430:	f043 0201 	orr.w	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
}
 8004442:	4618      	mov	r0, r3
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd90      	pop	{r4, r7, pc}
 800444a:	bf00      	nop
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e0ed      	b.n	800463e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fe febc 	bl	80031ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004484:	f7ff fb62 	bl	8003b4c <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800448a:	e012      	b.n	80044b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800448c:	f7ff fb5e 	bl	8003b4c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b0a      	cmp	r3, #10
 8004498:	d90b      	bls.n	80044b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2205      	movs	r2, #5
 80044aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0c5      	b.n	800463e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0e5      	beq.n	800448c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0202 	bic.w	r2, r2, #2
 80044ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044d0:	f7ff fb3c 	bl	8003b4c <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044d6:	e012      	b.n	80044fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044d8:	f7ff fb38 	bl	8003b4c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b0a      	cmp	r3, #10
 80044e4:	d90b      	bls.n	80044fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2205      	movs	r2, #5
 80044f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e09f      	b.n	800463e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7e1b      	ldrb	r3, [r3, #24]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d108      	bne.n	8004526 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e007      	b.n	8004536 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004534:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	7e5b      	ldrb	r3, [r3, #25]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d108      	bne.n	8004550 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e007      	b.n	8004560 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7e9b      	ldrb	r3, [r3, #26]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d108      	bne.n	800457a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0220 	orr.w	r2, r2, #32
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e007      	b.n	800458a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0220 	bic.w	r2, r2, #32
 8004588:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7edb      	ldrb	r3, [r3, #27]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d108      	bne.n	80045a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0210 	bic.w	r2, r2, #16
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e007      	b.n	80045b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0210 	orr.w	r2, r2, #16
 80045b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	7f1b      	ldrb	r3, [r3, #28]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d108      	bne.n	80045ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e007      	b.n	80045de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0208 	bic.w	r2, r2, #8
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	7f5b      	ldrb	r3, [r3, #29]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0204 	orr.w	r2, r2, #4
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e007      	b.n	8004608 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	ea42 0103 	orr.w	r1, r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004646:	b480      	push	{r7}
 8004648:	b087      	sub	sp, #28
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800465c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d003      	beq.n	800466c <HAL_CAN_ConfigFilter+0x26>
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	2b02      	cmp	r3, #2
 8004668:	f040 80aa 	bne.w	80047c0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004672:	f043 0201 	orr.w	r2, r3, #1
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2201      	movs	r2, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	43db      	mvns	r3, r3
 8004696:	401a      	ands	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d123      	bne.n	80046ee <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	401a      	ands	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	3248      	adds	r2, #72	; 0x48
 80046ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046e4:	6979      	ldr	r1, [r7, #20]
 80046e6:	3348      	adds	r3, #72	; 0x48
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	440b      	add	r3, r1
 80046ec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d122      	bne.n	800473c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	431a      	orrs	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004716:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3248      	adds	r2, #72	; 0x48
 800471c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004730:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	3348      	adds	r3, #72	; 0x48
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	43db      	mvns	r3, r3
 800474e:	401a      	ands	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004756:	e007      	b.n	8004768 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	431a      	orrs	r2, r3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	43db      	mvns	r3, r3
 800477a:	401a      	ands	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004782:	e007      	b.n	8004794 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	431a      	orrs	r2, r3
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047b2:	f023 0201 	bic.w	r2, r3, #1
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e006      	b.n	80047ce <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d12e      	bne.n	800484a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004804:	f7ff f9a2 	bl	8003b4c <HAL_GetTick>
 8004808:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800480a:	e012      	b.n	8004832 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800480c:	f7ff f99e 	bl	8003b4c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b0a      	cmp	r3, #10
 8004818:	d90b      	bls.n	8004832 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2205      	movs	r2, #5
 800482a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e012      	b.n	8004858 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e006      	b.n	8004858 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004874:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d003      	beq.n	8004884 <HAL_CAN_GetRxMessage+0x24>
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b02      	cmp	r3, #2
 8004880:	f040 80f3 	bne.w	8004a6a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10e      	bne.n	80048a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0e7      	b.n	8004a78 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0d8      	b.n	8004a78 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	331b      	adds	r3, #27
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	4413      	add	r3, r2
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0204 	and.w	r2, r3, #4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10c      	bne.n	80048fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	331b      	adds	r3, #27
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	4413      	add	r3, r2
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	0d5b      	lsrs	r3, r3, #21
 80048f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e00b      	b.n	8004916 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	331b      	adds	r3, #27
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	4413      	add	r3, r2
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	08db      	lsrs	r3, r3, #3
 800490e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	331b      	adds	r3, #27
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	4413      	add	r3, r2
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0202 	and.w	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	331b      	adds	r3, #27
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	4413      	add	r3, r2
 8004938:	3304      	adds	r3, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	331b      	adds	r3, #27
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	4413      	add	r3, r2
 8004950:	3304      	adds	r3, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0a1b      	lsrs	r3, r3, #8
 8004956:	b2da      	uxtb	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	331b      	adds	r3, #27
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	3304      	adds	r3, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	4413      	add	r3, r2
 800497e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	4413      	add	r3, r2
 8004994:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	0a1a      	lsrs	r2, r3, #8
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0c1a      	lsrs	r2, r3, #16
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	3302      	adds	r3, #2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	0e1a      	lsrs	r2, r3, #24
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	3303      	adds	r3, #3
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	3304      	adds	r3, #4
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	0a1a      	lsrs	r2, r3, #8
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	3305      	adds	r3, #5
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	0c1a      	lsrs	r2, r3, #16
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	3306      	adds	r3, #6
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	0e1a      	lsrs	r2, r3, #24
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	3307      	adds	r3, #7
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d108      	bne.n	8004a56 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0220 	orr.w	r2, r2, #32
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	e007      	b.n	8004a66 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0220 	orr.w	r2, r2, #32
 8004a64:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e006      	b.n	8004a78 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
  }
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr

08004a82 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a92:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d002      	beq.n	8004aa0 <HAL_CAN_ActivateNotification+0x1e>
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d109      	bne.n	8004ab4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6959      	ldr	r1, [r3, #20]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e006      	b.n	8004ac2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d07c      	beq.n	8004c0c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d023      	beq.n	8004b64 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2201      	movs	r2, #1
 8004b22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f983 	bl	8004e3a <HAL_CAN_TxMailbox0CompleteCallback>
 8004b34:	e016      	b.n	8004b64 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	e00c      	b.n	8004b64 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5c:	e002      	b.n	8004b64 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f986 	bl	8004e70 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d024      	beq.n	8004bb8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f962 	bl	8004e4c <HAL_CAN_TxMailbox1CompleteCallback>
 8004b88:	e016      	b.n	8004bb8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d004      	beq.n	8004b9e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9c:	e00c      	b.n	8004bb8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb0:	e002      	b.n	8004bb8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f965 	bl	8004e82 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d024      	beq.n	8004c0c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f941 	bl	8004e5e <HAL_CAN_TxMailbox2CompleteCallback>
 8004bdc:	e016      	b.n	8004c0c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	e00c      	b.n	8004c0c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
 8004c04:	e002      	b.n	8004c0c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f944 	bl	8004e94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00c      	beq.n	8004c30 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d006      	beq.n	8004c52 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f933 	bl	8004eb8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f91b 	bl	8004ea6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2210      	movs	r2, #16
 8004c92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2208      	movs	r2, #8
 8004cae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f913 	bl	8004edc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d009      	beq.n	8004cd4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8fb 	bl	8004eca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d006      	beq.n	8004cf6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2210      	movs	r2, #16
 8004cee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f8fc 	bl	8004eee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2208      	movs	r2, #8
 8004d10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8f4 	bl	8004f00 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d07b      	beq.n	8004e1a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d072      	beq.n	8004e12 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	f043 0302 	orr.w	r3, r3, #2
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	f043 0304 	orr.w	r3, r3, #4
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d043      	beq.n	8004e12 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03e      	beq.n	8004e12 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d9a:	2b60      	cmp	r3, #96	; 0x60
 8004d9c:	d02b      	beq.n	8004df6 <HAL_CAN_IRQHandler+0x32a>
 8004d9e:	2b60      	cmp	r3, #96	; 0x60
 8004da0:	d82e      	bhi.n	8004e00 <HAL_CAN_IRQHandler+0x334>
 8004da2:	2b50      	cmp	r3, #80	; 0x50
 8004da4:	d022      	beq.n	8004dec <HAL_CAN_IRQHandler+0x320>
 8004da6:	2b50      	cmp	r3, #80	; 0x50
 8004da8:	d82a      	bhi.n	8004e00 <HAL_CAN_IRQHandler+0x334>
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d019      	beq.n	8004de2 <HAL_CAN_IRQHandler+0x316>
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d826      	bhi.n	8004e00 <HAL_CAN_IRQHandler+0x334>
 8004db2:	2b30      	cmp	r3, #48	; 0x30
 8004db4:	d010      	beq.n	8004dd8 <HAL_CAN_IRQHandler+0x30c>
 8004db6:	2b30      	cmp	r3, #48	; 0x30
 8004db8:	d822      	bhi.n	8004e00 <HAL_CAN_IRQHandler+0x334>
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d002      	beq.n	8004dc4 <HAL_CAN_IRQHandler+0x2f8>
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d005      	beq.n	8004dce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004dc2:	e01d      	b.n	8004e00 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	f043 0308 	orr.w	r3, r3, #8
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dcc:	e019      	b.n	8004e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f043 0310 	orr.w	r3, r3, #16
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dd6:	e014      	b.n	8004e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	f043 0320 	orr.w	r3, r3, #32
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004de0:	e00f      	b.n	8004e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dea:	e00a      	b.n	8004e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004df4:	e005      	b.n	8004e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dfe:	e000      	b.n	8004e02 <HAL_CAN_IRQHandler+0x336>
            break;
 8004e00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2204      	movs	r2, #4
 8004e18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f870 	bl	8004f12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e32:	bf00      	nop
 8004e34:	3728      	adds	r7, #40	; 0x28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr

08004eca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr

08004eee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <__NVIC_SetPriorityGrouping+0x44>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f40:	4013      	ands	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f56:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <__NVIC_SetPriorityGrouping+0x44>)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	60d3      	str	r3, [r2, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <__NVIC_GetPriorityGrouping+0x18>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	f003 0307 	and.w	r3, r3, #7
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	e000ed00 	.word	0xe000ed00

08004f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	db0b      	blt.n	8004fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	f003 021f 	and.w	r2, r3, #31
 8004fa0:	4906      	ldr	r1, [pc, #24]	; (8004fbc <__NVIC_EnableIRQ+0x34>)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2001      	movs	r0, #1
 8004faa:	fa00 f202 	lsl.w	r2, r0, r2
 8004fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	e000e100 	.word	0xe000e100

08004fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	6039      	str	r1, [r7, #0]
 8004fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	db0a      	blt.n	8004fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	490c      	ldr	r1, [pc, #48]	; (800500c <__NVIC_SetPriority+0x4c>)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	0112      	lsls	r2, r2, #4
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fe8:	e00a      	b.n	8005000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4908      	ldr	r1, [pc, #32]	; (8005010 <__NVIC_SetPriority+0x50>)
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	3b04      	subs	r3, #4
 8004ff8:	0112      	lsls	r2, r2, #4
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	761a      	strb	r2, [r3, #24]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	e000e100 	.word	0xe000e100
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005014:	b480      	push	{r7}
 8005016:	b089      	sub	sp, #36	; 0x24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f1c3 0307 	rsb	r3, r3, #7
 800502e:	2b04      	cmp	r3, #4
 8005030:	bf28      	it	cs
 8005032:	2304      	movcs	r3, #4
 8005034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3304      	adds	r3, #4
 800503a:	2b06      	cmp	r3, #6
 800503c:	d902      	bls.n	8005044 <NVIC_EncodePriority+0x30>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3b03      	subs	r3, #3
 8005042:	e000      	b.n	8005046 <NVIC_EncodePriority+0x32>
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005048:	f04f 32ff 	mov.w	r2, #4294967295
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43da      	mvns	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	401a      	ands	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800505c:	f04f 31ff 	mov.w	r1, #4294967295
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	43d9      	mvns	r1, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800506c:	4313      	orrs	r3, r2
         );
}
 800506e:	4618      	mov	r0, r3
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3b01      	subs	r3, #1
 8005084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005088:	d301      	bcc.n	800508e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800508a:	2301      	movs	r3, #1
 800508c:	e00f      	b.n	80050ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800508e:	4a0a      	ldr	r2, [pc, #40]	; (80050b8 <SysTick_Config+0x40>)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3b01      	subs	r3, #1
 8005094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005096:	210f      	movs	r1, #15
 8005098:	f04f 30ff 	mov.w	r0, #4294967295
 800509c:	f7ff ff90 	bl	8004fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <SysTick_Config+0x40>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <SysTick_Config+0x40>)
 80050a8:	2207      	movs	r2, #7
 80050aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	e000e010 	.word	0xe000e010

080050bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff ff2d 	bl	8004f24 <__NVIC_SetPriorityGrouping>
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	4603      	mov	r3, r0
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e4:	f7ff ff42 	bl	8004f6c <__NVIC_GetPriorityGrouping>
 80050e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f7ff ff90 	bl	8005014 <NVIC_EncodePriority>
 80050f4:	4602      	mov	r2, r0
 80050f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fa:	4611      	mov	r1, r2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff ff5f 	bl	8004fc0 <__NVIC_SetPriority>
}
 8005102:	bf00      	nop
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	4603      	mov	r3, r0
 8005112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff ff35 	bl	8004f88 <__NVIC_EnableIRQ>
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff ffa2 	bl	8005078 <SysTick_Config>
 8005134:	4603      	mov	r3, r0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e043      	b.n	80051de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <HAL_DMA_Init+0xa8>)
 800515e:	4413      	add	r3, r2
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <HAL_DMA_Init+0xac>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	009a      	lsls	r2, r3, #2
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <HAL_DMA_Init+0xb0>)
 8005172:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800518a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800518e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	bffdfff8 	.word	0xbffdfff8
 80051ec:	cccccccd 	.word	0xcccccccd
 80051f0:	40020000 	.word	0x40020000

080051f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_DMA_Start_IT+0x20>
 8005210:	2302      	movs	r3, #2
 8005212:	e04a      	b.n	80052aa <HAL_DMA_Start_IT+0xb6>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005222:	2b01      	cmp	r3, #1
 8005224:	d13a      	bne.n	800529c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f9e8 	bl	8005620 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 020e 	orr.w	r2, r2, #14
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e00f      	b.n	800528a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0204 	bic.w	r2, r2, #4
 8005278:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 020a 	orr.w	r2, r2, #10
 8005288:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0201 	orr.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e005      	b.n	80052a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
 80052a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d008      	beq.n	80052da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2204      	movs	r2, #4
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e020      	b.n	800531c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 020e 	bic.w	r2, r2, #14
 80052e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	2101      	movs	r1, #1
 8005304:	fa01 f202 	lsl.w	r2, r1, r2
 8005308:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr
	...

08005328 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800533a:	2b02      	cmp	r3, #2
 800533c:	d005      	beq.n	800534a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2204      	movs	r2, #4
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
 8005348:	e051      	b.n	80053ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 020e 	bic.w	r2, r2, #14
 8005358:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_DMA_Abort_IT+0xd0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d029      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xa0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a20      	ldr	r2, [pc, #128]	; (80053fc <HAL_DMA_Abort_IT+0xd4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_DMA_Abort_IT+0x9c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_DMA_Abort_IT+0xd8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d01a      	beq.n	80053be <HAL_DMA_Abort_IT+0x96>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <HAL_DMA_Abort_IT+0xdc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d012      	beq.n	80053b8 <HAL_DMA_Abort_IT+0x90>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_DMA_Abort_IT+0xe0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00a      	beq.n	80053b2 <HAL_DMA_Abort_IT+0x8a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1a      	ldr	r2, [pc, #104]	; (800540c <HAL_DMA_Abort_IT+0xe4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d102      	bne.n	80053ac <HAL_DMA_Abort_IT+0x84>
 80053a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053aa:	e00e      	b.n	80053ca <HAL_DMA_Abort_IT+0xa2>
 80053ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053b0:	e00b      	b.n	80053ca <HAL_DMA_Abort_IT+0xa2>
 80053b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053b6:	e008      	b.n	80053ca <HAL_DMA_Abort_IT+0xa2>
 80053b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053bc:	e005      	b.n	80053ca <HAL_DMA_Abort_IT+0xa2>
 80053be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053c2:	e002      	b.n	80053ca <HAL_DMA_Abort_IT+0xa2>
 80053c4:	2310      	movs	r3, #16
 80053c6:	e000      	b.n	80053ca <HAL_DMA_Abort_IT+0xa2>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4a11      	ldr	r2, [pc, #68]	; (8005410 <HAL_DMA_Abort_IT+0xe8>)
 80053cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
    } 
  }
  return status;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40020008 	.word	0x40020008
 80053fc:	4002001c 	.word	0x4002001c
 8005400:	40020030 	.word	0x40020030
 8005404:	40020044 	.word	0x40020044
 8005408:	40020058 	.word	0x40020058
 800540c:	4002006c 	.word	0x4002006c
 8005410:	40020000 	.word	0x40020000

08005414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	2204      	movs	r2, #4
 8005432:	409a      	lsls	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d04f      	beq.n	80054dc <HAL_DMA_IRQHandler+0xc8>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d04a      	beq.n	80054dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d107      	bne.n	8005464 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0204 	bic.w	r2, r2, #4
 8005462:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a66      	ldr	r2, [pc, #408]	; (8005604 <HAL_DMA_IRQHandler+0x1f0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d029      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xae>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a65      	ldr	r2, [pc, #404]	; (8005608 <HAL_DMA_IRQHandler+0x1f4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <HAL_DMA_IRQHandler+0xaa>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a63      	ldr	r2, [pc, #396]	; (800560c <HAL_DMA_IRQHandler+0x1f8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01a      	beq.n	80054b8 <HAL_DMA_IRQHandler+0xa4>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a62      	ldr	r2, [pc, #392]	; (8005610 <HAL_DMA_IRQHandler+0x1fc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d012      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x9e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a60      	ldr	r2, [pc, #384]	; (8005614 <HAL_DMA_IRQHandler+0x200>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00a      	beq.n	80054ac <HAL_DMA_IRQHandler+0x98>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a5f      	ldr	r2, [pc, #380]	; (8005618 <HAL_DMA_IRQHandler+0x204>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d102      	bne.n	80054a6 <HAL_DMA_IRQHandler+0x92>
 80054a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054a4:	e00e      	b.n	80054c4 <HAL_DMA_IRQHandler+0xb0>
 80054a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054aa:	e00b      	b.n	80054c4 <HAL_DMA_IRQHandler+0xb0>
 80054ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054b0:	e008      	b.n	80054c4 <HAL_DMA_IRQHandler+0xb0>
 80054b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054b6:	e005      	b.n	80054c4 <HAL_DMA_IRQHandler+0xb0>
 80054b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054bc:	e002      	b.n	80054c4 <HAL_DMA_IRQHandler+0xb0>
 80054be:	2340      	movs	r3, #64	; 0x40
 80054c0:	e000      	b.n	80054c4 <HAL_DMA_IRQHandler+0xb0>
 80054c2:	2304      	movs	r3, #4
 80054c4:	4a55      	ldr	r2, [pc, #340]	; (800561c <HAL_DMA_IRQHandler+0x208>)
 80054c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8094 	beq.w	80055fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80054da:	e08e      	b.n	80055fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2202      	movs	r2, #2
 80054e2:	409a      	lsls	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d056      	beq.n	800559a <HAL_DMA_IRQHandler+0x186>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d051      	beq.n	800559a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 020a 	bic.w	r2, r2, #10
 8005512:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a38      	ldr	r2, [pc, #224]	; (8005604 <HAL_DMA_IRQHandler+0x1f0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d029      	beq.n	800557a <HAL_DMA_IRQHandler+0x166>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a37      	ldr	r2, [pc, #220]	; (8005608 <HAL_DMA_IRQHandler+0x1f4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_DMA_IRQHandler+0x162>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a35      	ldr	r2, [pc, #212]	; (800560c <HAL_DMA_IRQHandler+0x1f8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01a      	beq.n	8005570 <HAL_DMA_IRQHandler+0x15c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a34      	ldr	r2, [pc, #208]	; (8005610 <HAL_DMA_IRQHandler+0x1fc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d012      	beq.n	800556a <HAL_DMA_IRQHandler+0x156>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a32      	ldr	r2, [pc, #200]	; (8005614 <HAL_DMA_IRQHandler+0x200>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00a      	beq.n	8005564 <HAL_DMA_IRQHandler+0x150>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a31      	ldr	r2, [pc, #196]	; (8005618 <HAL_DMA_IRQHandler+0x204>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d102      	bne.n	800555e <HAL_DMA_IRQHandler+0x14a>
 8005558:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800555c:	e00e      	b.n	800557c <HAL_DMA_IRQHandler+0x168>
 800555e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005562:	e00b      	b.n	800557c <HAL_DMA_IRQHandler+0x168>
 8005564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005568:	e008      	b.n	800557c <HAL_DMA_IRQHandler+0x168>
 800556a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800556e:	e005      	b.n	800557c <HAL_DMA_IRQHandler+0x168>
 8005570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005574:	e002      	b.n	800557c <HAL_DMA_IRQHandler+0x168>
 8005576:	2320      	movs	r3, #32
 8005578:	e000      	b.n	800557c <HAL_DMA_IRQHandler+0x168>
 800557a:	2302      	movs	r3, #2
 800557c:	4a27      	ldr	r2, [pc, #156]	; (800561c <HAL_DMA_IRQHandler+0x208>)
 800557e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	2b00      	cmp	r3, #0
 800558e:	d034      	beq.n	80055fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005598:	e02f      	b.n	80055fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2208      	movs	r2, #8
 80055a0:	409a      	lsls	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4013      	ands	r3, r2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d028      	beq.n	80055fc <HAL_DMA_IRQHandler+0x1e8>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d023      	beq.n	80055fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 020e 	bic.w	r2, r2, #14
 80055c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	2101      	movs	r1, #1
 80055ce:	fa01 f202 	lsl.w	r2, r1, r2
 80055d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4798      	blx	r3
    }
  }
  return;
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
}
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40020008 	.word	0x40020008
 8005608:	4002001c 	.word	0x4002001c
 800560c:	40020030 	.word	0x40020030
 8005610:	40020044 	.word	0x40020044
 8005614:	40020058 	.word	0x40020058
 8005618:	4002006c 	.word	0x4002006c
 800561c:	40020000 	.word	0x40020000

08005620 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005636:	2101      	movs	r1, #1
 8005638:	fa01 f202 	lsl.w	r2, r1, r2
 800563c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b10      	cmp	r3, #16
 800564c:	d108      	bne.n	8005660 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800565e:	e007      	b.n	8005670 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr
	...

0800567c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800567c:	b480      	push	{r7}
 800567e:	b08b      	sub	sp, #44	; 0x2c
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005686:	2300      	movs	r3, #0
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800568a:	2300      	movs	r3, #0
 800568c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800568e:	e169      	b.n	8005964 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005690:	2201      	movs	r2, #1
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	4013      	ands	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	f040 8158 	bne.w	800595e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	4a9a      	ldr	r2, [pc, #616]	; (800591c <HAL_GPIO_Init+0x2a0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d05e      	beq.n	8005776 <HAL_GPIO_Init+0xfa>
 80056b8:	4a98      	ldr	r2, [pc, #608]	; (800591c <HAL_GPIO_Init+0x2a0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d875      	bhi.n	80057aa <HAL_GPIO_Init+0x12e>
 80056be:	4a98      	ldr	r2, [pc, #608]	; (8005920 <HAL_GPIO_Init+0x2a4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d058      	beq.n	8005776 <HAL_GPIO_Init+0xfa>
 80056c4:	4a96      	ldr	r2, [pc, #600]	; (8005920 <HAL_GPIO_Init+0x2a4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d86f      	bhi.n	80057aa <HAL_GPIO_Init+0x12e>
 80056ca:	4a96      	ldr	r2, [pc, #600]	; (8005924 <HAL_GPIO_Init+0x2a8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d052      	beq.n	8005776 <HAL_GPIO_Init+0xfa>
 80056d0:	4a94      	ldr	r2, [pc, #592]	; (8005924 <HAL_GPIO_Init+0x2a8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d869      	bhi.n	80057aa <HAL_GPIO_Init+0x12e>
 80056d6:	4a94      	ldr	r2, [pc, #592]	; (8005928 <HAL_GPIO_Init+0x2ac>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d04c      	beq.n	8005776 <HAL_GPIO_Init+0xfa>
 80056dc:	4a92      	ldr	r2, [pc, #584]	; (8005928 <HAL_GPIO_Init+0x2ac>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d863      	bhi.n	80057aa <HAL_GPIO_Init+0x12e>
 80056e2:	4a92      	ldr	r2, [pc, #584]	; (800592c <HAL_GPIO_Init+0x2b0>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d046      	beq.n	8005776 <HAL_GPIO_Init+0xfa>
 80056e8:	4a90      	ldr	r2, [pc, #576]	; (800592c <HAL_GPIO_Init+0x2b0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d85d      	bhi.n	80057aa <HAL_GPIO_Init+0x12e>
 80056ee:	2b12      	cmp	r3, #18
 80056f0:	d82a      	bhi.n	8005748 <HAL_GPIO_Init+0xcc>
 80056f2:	2b12      	cmp	r3, #18
 80056f4:	d859      	bhi.n	80057aa <HAL_GPIO_Init+0x12e>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <HAL_GPIO_Init+0x80>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	08005777 	.word	0x08005777
 8005700:	08005751 	.word	0x08005751
 8005704:	08005763 	.word	0x08005763
 8005708:	080057a5 	.word	0x080057a5
 800570c:	080057ab 	.word	0x080057ab
 8005710:	080057ab 	.word	0x080057ab
 8005714:	080057ab 	.word	0x080057ab
 8005718:	080057ab 	.word	0x080057ab
 800571c:	080057ab 	.word	0x080057ab
 8005720:	080057ab 	.word	0x080057ab
 8005724:	080057ab 	.word	0x080057ab
 8005728:	080057ab 	.word	0x080057ab
 800572c:	080057ab 	.word	0x080057ab
 8005730:	080057ab 	.word	0x080057ab
 8005734:	080057ab 	.word	0x080057ab
 8005738:	080057ab 	.word	0x080057ab
 800573c:	080057ab 	.word	0x080057ab
 8005740:	08005759 	.word	0x08005759
 8005744:	0800576d 	.word	0x0800576d
 8005748:	4a79      	ldr	r2, [pc, #484]	; (8005930 <HAL_GPIO_Init+0x2b4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800574e:	e02c      	b.n	80057aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	623b      	str	r3, [r7, #32]
          break;
 8005756:	e029      	b.n	80057ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	3304      	adds	r3, #4
 800575e:	623b      	str	r3, [r7, #32]
          break;
 8005760:	e024      	b.n	80057ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	3308      	adds	r3, #8
 8005768:	623b      	str	r3, [r7, #32]
          break;
 800576a:	e01f      	b.n	80057ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	330c      	adds	r3, #12
 8005772:	623b      	str	r3, [r7, #32]
          break;
 8005774:	e01a      	b.n	80057ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800577e:	2304      	movs	r3, #4
 8005780:	623b      	str	r3, [r7, #32]
          break;
 8005782:	e013      	b.n	80057ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800578c:	2308      	movs	r3, #8
 800578e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	611a      	str	r2, [r3, #16]
          break;
 8005796:	e009      	b.n	80057ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005798:	2308      	movs	r3, #8
 800579a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	615a      	str	r2, [r3, #20]
          break;
 80057a2:	e003      	b.n	80057ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057a4:	2300      	movs	r3, #0
 80057a6:	623b      	str	r3, [r7, #32]
          break;
 80057a8:	e000      	b.n	80057ac <HAL_GPIO_Init+0x130>
          break;
 80057aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2bff      	cmp	r3, #255	; 0xff
 80057b0:	d801      	bhi.n	80057b6 <HAL_GPIO_Init+0x13a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	e001      	b.n	80057ba <HAL_GPIO_Init+0x13e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2bff      	cmp	r3, #255	; 0xff
 80057c0:	d802      	bhi.n	80057c8 <HAL_GPIO_Init+0x14c>
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	e002      	b.n	80057ce <HAL_GPIO_Init+0x152>
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	3b08      	subs	r3, #8
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	210f      	movs	r1, #15
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	401a      	ands	r2, r3
 80057e0:	6a39      	ldr	r1, [r7, #32]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	431a      	orrs	r2, r3
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80b1 	beq.w	800595e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80057fc:	4b4d      	ldr	r3, [pc, #308]	; (8005934 <HAL_GPIO_Init+0x2b8>)
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	4a4c      	ldr	r2, [pc, #304]	; (8005934 <HAL_GPIO_Init+0x2b8>)
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	6193      	str	r3, [r2, #24]
 8005808:	4b4a      	ldr	r3, [pc, #296]	; (8005934 <HAL_GPIO_Init+0x2b8>)
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005814:	4a48      	ldr	r2, [pc, #288]	; (8005938 <HAL_GPIO_Init+0x2bc>)
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	089b      	lsrs	r3, r3, #2
 800581a:	3302      	adds	r3, #2
 800581c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	220f      	movs	r2, #15
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4013      	ands	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a40      	ldr	r2, [pc, #256]	; (800593c <HAL_GPIO_Init+0x2c0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <HAL_GPIO_Init+0x1ec>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3f      	ldr	r2, [pc, #252]	; (8005940 <HAL_GPIO_Init+0x2c4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00d      	beq.n	8005864 <HAL_GPIO_Init+0x1e8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3e      	ldr	r2, [pc, #248]	; (8005944 <HAL_GPIO_Init+0x2c8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <HAL_GPIO_Init+0x1e4>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <HAL_GPIO_Init+0x2cc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d101      	bne.n	800585c <HAL_GPIO_Init+0x1e0>
 8005858:	2303      	movs	r3, #3
 800585a:	e006      	b.n	800586a <HAL_GPIO_Init+0x1ee>
 800585c:	2304      	movs	r3, #4
 800585e:	e004      	b.n	800586a <HAL_GPIO_Init+0x1ee>
 8005860:	2302      	movs	r3, #2
 8005862:	e002      	b.n	800586a <HAL_GPIO_Init+0x1ee>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_GPIO_Init+0x1ee>
 8005868:	2300      	movs	r3, #0
 800586a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586c:	f002 0203 	and.w	r2, r2, #3
 8005870:	0092      	lsls	r2, r2, #2
 8005872:	4093      	lsls	r3, r2
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800587a:	492f      	ldr	r1, [pc, #188]	; (8005938 <HAL_GPIO_Init+0x2bc>)
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	3302      	adds	r3, #2
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005894:	4b2d      	ldr	r3, [pc, #180]	; (800594c <HAL_GPIO_Init+0x2d0>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	492c      	ldr	r1, [pc, #176]	; (800594c <HAL_GPIO_Init+0x2d0>)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	4313      	orrs	r3, r2
 800589e:	600b      	str	r3, [r1, #0]
 80058a0:	e006      	b.n	80058b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80058a2:	4b2a      	ldr	r3, [pc, #168]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	4928      	ldr	r1, [pc, #160]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d006      	beq.n	80058ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80058bc:	4b23      	ldr	r3, [pc, #140]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4922      	ldr	r1, [pc, #136]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
 80058c8:	e006      	b.n	80058d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80058ca:	4b20      	ldr	r3, [pc, #128]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	491e      	ldr	r1, [pc, #120]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d006      	beq.n	80058f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80058e4:	4b19      	ldr	r3, [pc, #100]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	4918      	ldr	r1, [pc, #96]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80058f2:	4b16      	ldr	r3, [pc, #88]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	43db      	mvns	r3, r3
 80058fa:	4914      	ldr	r1, [pc, #80]	; (800594c <HAL_GPIO_Init+0x2d0>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d021      	beq.n	8005950 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <HAL_GPIO_Init+0x2d0>)
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	490e      	ldr	r1, [pc, #56]	; (800594c <HAL_GPIO_Init+0x2d0>)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	60cb      	str	r3, [r1, #12]
 8005918:	e021      	b.n	800595e <HAL_GPIO_Init+0x2e2>
 800591a:	bf00      	nop
 800591c:	10320000 	.word	0x10320000
 8005920:	10310000 	.word	0x10310000
 8005924:	10220000 	.word	0x10220000
 8005928:	10210000 	.word	0x10210000
 800592c:	10120000 	.word	0x10120000
 8005930:	10110000 	.word	0x10110000
 8005934:	40021000 	.word	0x40021000
 8005938:	40010000 	.word	0x40010000
 800593c:	40010800 	.word	0x40010800
 8005940:	40010c00 	.word	0x40010c00
 8005944:	40011000 	.word	0x40011000
 8005948:	40011400 	.word	0x40011400
 800594c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_GPIO_Init+0x304>)
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	43db      	mvns	r3, r3
 8005958:	4909      	ldr	r1, [pc, #36]	; (8005980 <HAL_GPIO_Init+0x304>)
 800595a:	4013      	ands	r3, r2
 800595c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	3301      	adds	r3, #1
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	fa22 f303 	lsr.w	r3, r2, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	f47f ae8e 	bne.w	8005690 <HAL_GPIO_Init+0x14>
  }
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	372c      	adds	r7, #44	; 0x2c
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	40010400 	.word	0x40010400

08005984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
 8005990:	4613      	mov	r3, r2
 8005992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005994:	787b      	ldrb	r3, [r7, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80059a0:	e003      	b.n	80059aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	041a      	lsls	r2, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	611a      	str	r2, [r3, #16]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4013      	ands	r3, r2
 80059cc:	041a      	lsls	r2, r3, #16
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	43d9      	mvns	r1, r3
 80059d2:	887b      	ldrh	r3, [r7, #2]
 80059d4:	400b      	ands	r3, r1
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	611a      	str	r2, [r3, #16]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e12b      	b.n	8005c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fd fc40 	bl	8003294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	; 0x24
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a4c:	f001 fba0 	bl	8007190 <HAL_RCC_GetPCLK1Freq>
 8005a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4a81      	ldr	r2, [pc, #516]	; (8005c5c <HAL_I2C_Init+0x274>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d807      	bhi.n	8005a6c <HAL_I2C_Init+0x84>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4a80      	ldr	r2, [pc, #512]	; (8005c60 <HAL_I2C_Init+0x278>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	bf94      	ite	ls
 8005a64:	2301      	movls	r3, #1
 8005a66:	2300      	movhi	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e006      	b.n	8005a7a <HAL_I2C_Init+0x92>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a7d      	ldr	r2, [pc, #500]	; (8005c64 <HAL_I2C_Init+0x27c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	bf94      	ite	ls
 8005a74:	2301      	movls	r3, #1
 8005a76:	2300      	movhi	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0e7      	b.n	8005c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a78      	ldr	r2, [pc, #480]	; (8005c68 <HAL_I2C_Init+0x280>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	0c9b      	lsrs	r3, r3, #18
 8005a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4a6a      	ldr	r2, [pc, #424]	; (8005c5c <HAL_I2C_Init+0x274>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d802      	bhi.n	8005abc <HAL_I2C_Init+0xd4>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	e009      	b.n	8005ad0 <HAL_I2C_Init+0xe8>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	4a69      	ldr	r2, [pc, #420]	; (8005c6c <HAL_I2C_Init+0x284>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	3301      	adds	r3, #1
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	495c      	ldr	r1, [pc, #368]	; (8005c5c <HAL_I2C_Init+0x274>)
 8005aec:	428b      	cmp	r3, r1
 8005aee:	d819      	bhi.n	8005b24 <HAL_I2C_Init+0x13c>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1e59      	subs	r1, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b04:	400b      	ands	r3, r1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_I2C_Init+0x138>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1e59      	subs	r1, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1e:	e051      	b.n	8005bc4 <HAL_I2C_Init+0x1dc>
 8005b20:	2304      	movs	r3, #4
 8005b22:	e04f      	b.n	8005bc4 <HAL_I2C_Init+0x1dc>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d111      	bne.n	8005b50 <HAL_I2C_Init+0x168>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1e58      	subs	r0, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	440b      	add	r3, r1
 8005b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e012      	b.n	8005b76 <HAL_I2C_Init+0x18e>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1e58      	subs	r0, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	0099      	lsls	r1, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b66:	3301      	adds	r3, #1
 8005b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bf0c      	ite	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	2300      	movne	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_I2C_Init+0x196>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e022      	b.n	8005bc4 <HAL_I2C_Init+0x1dc>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10e      	bne.n	8005ba4 <HAL_I2C_Init+0x1bc>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1e58      	subs	r0, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6859      	ldr	r1, [r3, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	440b      	add	r3, r1
 8005b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba2:	e00f      	b.n	8005bc4 <HAL_I2C_Init+0x1dc>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1e58      	subs	r0, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6859      	ldr	r1, [r3, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	0099      	lsls	r1, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	6809      	ldr	r1, [r1, #0]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6911      	ldr	r1, [r2, #16]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68d2      	ldr	r2, [r2, #12]
 8005bfe:	4311      	orrs	r1, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	000186a0 	.word	0x000186a0
 8005c60:	001e847f 	.word	0x001e847f
 8005c64:	003d08ff 	.word	0x003d08ff
 8005c68:	431bde83 	.word	0x431bde83
 8005c6c:	10624dd3 	.word	0x10624dd3

08005c70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	4608      	mov	r0, r1
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	817b      	strh	r3, [r7, #10]
 8005c82:	460b      	mov	r3, r1
 8005c84:	813b      	strh	r3, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c8a:	f7fd ff5f 	bl	8003b4c <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	f040 80d9 	bne.w	8005e50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	2319      	movs	r3, #25
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	496d      	ldr	r1, [pc, #436]	; (8005e5c <HAL_I2C_Mem_Write+0x1ec>)
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fcc1 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e0cc      	b.n	8005e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_I2C_Mem_Write+0x56>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0c5      	b.n	8005e52 <HAL_I2C_Mem_Write+0x1e2>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d007      	beq.n	8005cec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2221      	movs	r2, #33	; 0x21
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2240      	movs	r2, #64	; 0x40
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a3a      	ldr	r2, [r7, #32]
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a4d      	ldr	r2, [pc, #308]	; (8005e60 <HAL_I2C_Mem_Write+0x1f0>)
 8005d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d2e:	88f8      	ldrh	r0, [r7, #6]
 8005d30:	893a      	ldrh	r2, [r7, #8]
 8005d32:	8979      	ldrh	r1, [r7, #10]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 faf8 	bl	8006334 <I2C_RequestMemoryWrite>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d052      	beq.n	8005df0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e081      	b.n	8005e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fd42 	bl	80067dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00d      	beq.n	8005d7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d107      	bne.n	8005d76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e06b      	b.n	8005e52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	781a      	ldrb	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d11b      	bne.n	8005df0 <HAL_I2C_Mem_Write+0x180>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d017      	beq.n	8005df0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	781a      	ldrb	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1aa      	bne.n	8005d4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fd2e 	bl	800685e <I2C_WaitOnBTFFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00d      	beq.n	8005e24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d107      	bne.n	8005e20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e016      	b.n	8005e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e000      	b.n	8005e52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e50:	2302      	movs	r3, #2
  }
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	00100002 	.word	0x00100002
 8005e60:	ffff0000 	.word	0xffff0000

08005e64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	; 0x30
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	4611      	mov	r1, r2
 8005e70:	461a      	mov	r2, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	817b      	strh	r3, [r7, #10]
 8005e76:	460b      	mov	r3, r1
 8005e78:	813b      	strh	r3, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e82:	f7fd fe63 	bl	8003b4c <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	f040 8244 	bne.w	800631e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2319      	movs	r3, #25
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4982      	ldr	r1, [pc, #520]	; (80060a8 <HAL_I2C_Mem_Read+0x244>)
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fbc5 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
 8005eae:	e237      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_I2C_Mem_Read+0x5a>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e230      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d007      	beq.n	8005ee4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2222      	movs	r2, #34	; 0x22
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2240      	movs	r2, #64	; 0x40
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a62      	ldr	r2, [pc, #392]	; (80060ac <HAL_I2C_Mem_Read+0x248>)
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f26:	88f8      	ldrh	r0, [r7, #6]
 8005f28:	893a      	ldrh	r2, [r7, #8]
 8005f2a:	8979      	ldrh	r1, [r7, #10]
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4603      	mov	r3, r0
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fa92 	bl	8006460 <I2C_RequestMemoryRead>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e1ec      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d113      	bne.n	8005f76 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e1c0      	b.n	80062f8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d11e      	bne.n	8005fbc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f8e:	b672      	cpsid	i
}
 8005f90:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f92:	2300      	movs	r3, #0
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005fb8:	b662      	cpsie	i
}
 8005fba:	e035      	b.n	8006028 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d11e      	bne.n	8006002 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fd4:	b672      	cpsid	i
}
 8005fd6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ffe:	b662      	cpsie	i
}
 8006000:	e012      	b.n	8006028 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006010:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006028:	e166      	b.n	80062f8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602e:	2b03      	cmp	r3, #3
 8006030:	f200 811f 	bhi.w	8006272 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006038:	2b01      	cmp	r3, #1
 800603a:	d123      	bne.n	8006084 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800603c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fc4d 	bl	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e167      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006082:	e139      	b.n	80062f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006088:	2b02      	cmp	r3, #2
 800608a:	d152      	bne.n	8006132 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	2200      	movs	r2, #0
 8006094:	4906      	ldr	r1, [pc, #24]	; (80060b0 <HAL_I2C_Mem_Read+0x24c>)
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 faca 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d008      	beq.n	80060b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e13c      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
 80060a6:	bf00      	nop
 80060a8:	00100002 	.word	0x00100002
 80060ac:	ffff0000 	.word	0xffff0000
 80060b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80060b4:	b672      	cpsid	i
}
 80060b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80060fa:	b662      	cpsie	i
}
 80060fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006130:	e0e2      	b.n	80062f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	2200      	movs	r2, #0
 800613a:	497b      	ldr	r1, [pc, #492]	; (8006328 <HAL_I2C_Mem_Read+0x4c4>)
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fa77 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0e9      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800615c:	b672      	cpsid	i
}
 800615e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006192:	4b66      	ldr	r3, [pc, #408]	; (800632c <HAL_I2C_Mem_Read+0x4c8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	08db      	lsrs	r3, r3, #3
 8006198:	4a65      	ldr	r2, [pc, #404]	; (8006330 <HAL_I2C_Mem_Read+0x4cc>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	0a1a      	lsrs	r2, r3, #8
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	00da      	lsls	r2, r3, #3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d118      	bne.n	80061ea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80061da:	b662      	cpsie	i
}
 80061dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e09a      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d1d9      	bne.n	80061ac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800623a:	b662      	cpsie	i
}
 800623c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006270:	e042      	b.n	80062f8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006274:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fb32 	bl	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e04c      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d118      	bne.n	80062f8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f47f ae94 	bne.w	800602a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	e000      	b.n	8006320 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800631e:	2302      	movs	r3, #2
  }
}
 8006320:	4618      	mov	r0, r3
 8006322:	3728      	adds	r7, #40	; 0x28
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	00010004 	.word	0x00010004
 800632c:	20000004 	.word	0x20000004
 8006330:	14f8b589 	.word	0x14f8b589

08006334 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	461a      	mov	r2, r3
 8006342:	4603      	mov	r3, r0
 8006344:	817b      	strh	r3, [r7, #10]
 8006346:	460b      	mov	r3, r1
 8006348:	813b      	strh	r3, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800635c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	2200      	movs	r2, #0
 8006366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f960 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006384:	d103      	bne.n	800638e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e05f      	b.n	8006452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006392:	897b      	ldrh	r3, [r7, #10]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	6a3a      	ldr	r2, [r7, #32]
 80063a6:	492d      	ldr	r1, [pc, #180]	; (800645c <I2C_RequestMemoryWrite+0x128>)
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f998 	bl	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e04c      	b.n	8006452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d0:	6a39      	ldr	r1, [r7, #32]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fa02 	bl	80067dc <I2C_WaitOnTXEFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d107      	bne.n	80063f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e02b      	b.n	8006452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d105      	bne.n	800640c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	b2da      	uxtb	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	611a      	str	r2, [r3, #16]
 800640a:	e021      	b.n	8006450 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800640c:	893b      	ldrh	r3, [r7, #8]
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	b29b      	uxth	r3, r3
 8006412:	b2da      	uxtb	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800641a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641c:	6a39      	ldr	r1, [r7, #32]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f9dc 	bl	80067dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00d      	beq.n	8006446 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	2b04      	cmp	r3, #4
 8006430:	d107      	bne.n	8006442 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e005      	b.n	8006452 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006446:	893b      	ldrh	r3, [r7, #8]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	00010002 	.word	0x00010002

08006460 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	4603      	mov	r3, r0
 8006470:	817b      	strh	r3, [r7, #10]
 8006472:	460b      	mov	r3, r1
 8006474:	813b      	strh	r3, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006488:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006498:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f8c2 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00d      	beq.n	80064ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c0:	d103      	bne.n	80064ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e0aa      	b.n	8006624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ce:	897b      	ldrh	r3, [r7, #10]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	4952      	ldr	r1, [pc, #328]	; (800662c <I2C_RequestMemoryRead+0x1cc>)
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f8fa 	bl	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e097      	b.n	8006624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	6a39      	ldr	r1, [r7, #32]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f964 	bl	80067dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	2b04      	cmp	r3, #4
 8006520:	d107      	bne.n	8006532 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006530:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e076      	b.n	8006624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d105      	bne.n	8006548 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800653c:	893b      	ldrh	r3, [r7, #8]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	611a      	str	r2, [r3, #16]
 8006546:	e021      	b.n	800658c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006548:	893b      	ldrh	r3, [r7, #8]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	b29b      	uxth	r3, r3
 800654e:	b2da      	uxtb	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006558:	6a39      	ldr	r1, [r7, #32]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f93e 	bl	80067dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00d      	beq.n	8006582 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	2b04      	cmp	r3, #4
 800656c:	d107      	bne.n	800657e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e050      	b.n	8006624 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006582:	893b      	ldrh	r3, [r7, #8]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800658c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658e:	6a39      	ldr	r1, [r7, #32]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f923 	bl	80067dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00d      	beq.n	80065b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d107      	bne.n	80065b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e035      	b.n	8006624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f82b 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00d      	beq.n	80065fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ee:	d103      	bne.n	80065f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e013      	b.n	8006624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065fc:	897b      	ldrh	r3, [r7, #10]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	b2da      	uxtb	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	4906      	ldr	r1, [pc, #24]	; (800662c <I2C_RequestMemoryRead+0x1cc>)
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f863 	bl	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	00010002 	.word	0x00010002

08006630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006640:	e025      	b.n	800668e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d021      	beq.n	800668e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664a:	f7fd fa7f 	bl	8003b4c <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d302      	bcc.n	8006660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d116      	bne.n	800668e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f043 0220 	orr.w	r2, r3, #32
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e023      	b.n	80066d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	0c1b      	lsrs	r3, r3, #16
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	d10d      	bne.n	80066b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	43da      	mvns	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4013      	ands	r3, r2
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf0c      	ite	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	2300      	movne	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	e00c      	b.n	80066ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	43da      	mvns	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d0b6      	beq.n	8006642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066ec:	e051      	b.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fc:	d123      	bne.n	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800670c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006716:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f043 0204 	orr.w	r2, r3, #4
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e046      	b.n	80067d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d021      	beq.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674e:	f7fd f9fd 	bl	8003b4c <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	429a      	cmp	r2, r3
 800675c:	d302      	bcc.n	8006764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d116      	bne.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e020      	b.n	80067d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d10c      	bne.n	80067b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	43da      	mvns	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bf14      	ite	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	2300      	moveq	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	e00b      	b.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	43da      	mvns	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4013      	ands	r3, r2
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d18d      	bne.n	80066ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067e8:	e02d      	b.n	8006846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f8ce 	bl	800698c <I2C_IsAcknowledgeFailed>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e02d      	b.n	8006856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d021      	beq.n	8006846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006802:	f7fd f9a3 	bl	8003b4c <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	429a      	cmp	r2, r3
 8006810:	d302      	bcc.n	8006818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d116      	bne.n	8006846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f043 0220 	orr.w	r2, r3, #32
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e007      	b.n	8006856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006850:	2b80      	cmp	r3, #128	; 0x80
 8006852:	d1ca      	bne.n	80067ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800686a:	e02d      	b.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f88d 	bl	800698c <I2C_IsAcknowledgeFailed>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e02d      	b.n	80068d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d021      	beq.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006884:	f7fd f962 	bl	8003b4c <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d116      	bne.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e007      	b.n	80068d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d1ca      	bne.n	800686c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068ec:	e042      	b.n	8006974 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d119      	bne.n	8006930 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0210 	mvn.w	r2, #16
 8006904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e029      	b.n	8006984 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006930:	f7fd f90c 	bl	8003b4c <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d116      	bne.n	8006974 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e007      	b.n	8006984 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d1b5      	bne.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800699e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a2:	d11b      	bne.n	80069dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 0204 	orr.w	r2, r3, #4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e26c      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8087 	beq.w	8006b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a08:	4b92      	ldr	r3, [pc, #584]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f003 030c 	and.w	r3, r3, #12
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d00c      	beq.n	8006a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a14:	4b8f      	ldr	r3, [pc, #572]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f003 030c 	and.w	r3, r3, #12
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d112      	bne.n	8006a46 <HAL_RCC_OscConfig+0x5e>
 8006a20:	4b8c      	ldr	r3, [pc, #560]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2c:	d10b      	bne.n	8006a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a2e:	4b89      	ldr	r3, [pc, #548]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d06c      	beq.n	8006b14 <HAL_RCC_OscConfig+0x12c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d168      	bne.n	8006b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e246      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4e:	d106      	bne.n	8006a5e <HAL_RCC_OscConfig+0x76>
 8006a50:	4b80      	ldr	r3, [pc, #512]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a7f      	ldr	r2, [pc, #508]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	e02e      	b.n	8006abc <HAL_RCC_OscConfig+0xd4>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10c      	bne.n	8006a80 <HAL_RCC_OscConfig+0x98>
 8006a66:	4b7b      	ldr	r3, [pc, #492]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a7a      	ldr	r2, [pc, #488]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	4b78      	ldr	r3, [pc, #480]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a77      	ldr	r2, [pc, #476]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e01d      	b.n	8006abc <HAL_RCC_OscConfig+0xd4>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCC_OscConfig+0xbc>
 8006a8a:	4b72      	ldr	r3, [pc, #456]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a71      	ldr	r2, [pc, #452]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	4b6f      	ldr	r3, [pc, #444]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a6e      	ldr	r2, [pc, #440]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e00b      	b.n	8006abc <HAL_RCC_OscConfig+0xd4>
 8006aa4:	4b6b      	ldr	r3, [pc, #428]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a6a      	ldr	r2, [pc, #424]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	4b68      	ldr	r3, [pc, #416]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a67      	ldr	r2, [pc, #412]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d013      	beq.n	8006aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac4:	f7fd f842 	bl	8003b4c <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006acc:	f7fd f83e 	bl	8003b4c <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b64      	cmp	r3, #100	; 0x64
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e1fa      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ade:	4b5d      	ldr	r3, [pc, #372]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f0      	beq.n	8006acc <HAL_RCC_OscConfig+0xe4>
 8006aea:	e014      	b.n	8006b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aec:	f7fd f82e 	bl	8003b4c <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af4:	f7fd f82a 	bl	8003b4c <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b64      	cmp	r3, #100	; 0x64
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e1e6      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b06:	4b53      	ldr	r3, [pc, #332]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f0      	bne.n	8006af4 <HAL_RCC_OscConfig+0x10c>
 8006b12:	e000      	b.n	8006b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d063      	beq.n	8006bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b22:	4b4c      	ldr	r3, [pc, #304]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f003 030c 	and.w	r3, r3, #12
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b2e:	4b49      	ldr	r3, [pc, #292]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f003 030c 	and.w	r3, r3, #12
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d11c      	bne.n	8006b74 <HAL_RCC_OscConfig+0x18c>
 8006b3a:	4b46      	ldr	r3, [pc, #280]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d116      	bne.n	8006b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b46:	4b43      	ldr	r3, [pc, #268]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_RCC_OscConfig+0x176>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d001      	beq.n	8006b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e1ba      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5e:	4b3d      	ldr	r3, [pc, #244]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	4939      	ldr	r1, [pc, #228]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b72:	e03a      	b.n	8006bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d020      	beq.n	8006bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b7c:	4b36      	ldr	r3, [pc, #216]	; (8006c58 <HAL_RCC_OscConfig+0x270>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b82:	f7fc ffe3 	bl	8003b4c <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b8a:	f7fc ffdf 	bl	8003b4c <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e19b      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba8:	4b2a      	ldr	r3, [pc, #168]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	4927      	ldr	r1, [pc, #156]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	600b      	str	r3, [r1, #0]
 8006bbc:	e015      	b.n	8006bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bbe:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <HAL_RCC_OscConfig+0x270>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc4:	f7fc ffc2 	bl	8003b4c <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bcc:	f7fc ffbe 	bl	8003b4c <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e17a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bde:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d03a      	beq.n	8006c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d019      	beq.n	8006c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bfe:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <HAL_RCC_OscConfig+0x274>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c04:	f7fc ffa2 	bl	8003b4c <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c0c:	f7fc ff9e 	bl	8003b4c <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e15a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <HAL_RCC_OscConfig+0x26c>)
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f0      	beq.n	8006c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	f000 fad8 	bl	80071e0 <RCC_Delay>
 8006c30:	e01c      	b.n	8006c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <HAL_RCC_OscConfig+0x274>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c38:	f7fc ff88 	bl	8003b4c <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c3e:	e00f      	b.n	8006c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c40:	f7fc ff84 	bl	8003b4c <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d908      	bls.n	8006c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e140      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
 8006c52:	bf00      	nop
 8006c54:	40021000 	.word	0x40021000
 8006c58:	42420000 	.word	0x42420000
 8006c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c60:	4b9e      	ldr	r3, [pc, #632]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e9      	bne.n	8006c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80a6 	beq.w	8006dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c7e:	4b97      	ldr	r3, [pc, #604]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10d      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c8a:	4b94      	ldr	r3, [pc, #592]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	4a93      	ldr	r2, [pc, #588]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c94:	61d3      	str	r3, [r2, #28]
 8006c96:	4b91      	ldr	r3, [pc, #580]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca6:	4b8e      	ldr	r3, [pc, #568]	; (8006ee0 <HAL_RCC_OscConfig+0x4f8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d118      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cb2:	4b8b      	ldr	r3, [pc, #556]	; (8006ee0 <HAL_RCC_OscConfig+0x4f8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a8a      	ldr	r2, [pc, #552]	; (8006ee0 <HAL_RCC_OscConfig+0x4f8>)
 8006cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cbe:	f7fc ff45 	bl	8003b4c <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cc6:	f7fc ff41 	bl	8003b4c <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b64      	cmp	r3, #100	; 0x64
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e0fd      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd8:	4b81      	ldr	r3, [pc, #516]	; (8006ee0 <HAL_RCC_OscConfig+0x4f8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f0      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d106      	bne.n	8006cfa <HAL_RCC_OscConfig+0x312>
 8006cec:	4b7b      	ldr	r3, [pc, #492]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	4a7a      	ldr	r2, [pc, #488]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6213      	str	r3, [r2, #32]
 8006cf8:	e02d      	b.n	8006d56 <HAL_RCC_OscConfig+0x36e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCC_OscConfig+0x334>
 8006d02:	4b76      	ldr	r3, [pc, #472]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	4a75      	ldr	r2, [pc, #468]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	6213      	str	r3, [r2, #32]
 8006d0e:	4b73      	ldr	r3, [pc, #460]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	4a72      	ldr	r2, [pc, #456]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d14:	f023 0304 	bic.w	r3, r3, #4
 8006d18:	6213      	str	r3, [r2, #32]
 8006d1a:	e01c      	b.n	8006d56 <HAL_RCC_OscConfig+0x36e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	2b05      	cmp	r3, #5
 8006d22:	d10c      	bne.n	8006d3e <HAL_RCC_OscConfig+0x356>
 8006d24:	4b6d      	ldr	r3, [pc, #436]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	4a6c      	ldr	r2, [pc, #432]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d2a:	f043 0304 	orr.w	r3, r3, #4
 8006d2e:	6213      	str	r3, [r2, #32]
 8006d30:	4b6a      	ldr	r3, [pc, #424]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	4a69      	ldr	r2, [pc, #420]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6213      	str	r3, [r2, #32]
 8006d3c:	e00b      	b.n	8006d56 <HAL_RCC_OscConfig+0x36e>
 8006d3e:	4b67      	ldr	r3, [pc, #412]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	4a66      	ldr	r2, [pc, #408]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	6213      	str	r3, [r2, #32]
 8006d4a:	4b64      	ldr	r3, [pc, #400]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	4a63      	ldr	r2, [pc, #396]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d50:	f023 0304 	bic.w	r3, r3, #4
 8006d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d015      	beq.n	8006d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d5e:	f7fc fef5 	bl	8003b4c <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d64:	e00a      	b.n	8006d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d66:	f7fc fef1 	bl	8003b4c <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e0ab      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d7c:	4b57      	ldr	r3, [pc, #348]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0ee      	beq.n	8006d66 <HAL_RCC_OscConfig+0x37e>
 8006d88:	e014      	b.n	8006db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d8a:	f7fc fedf 	bl	8003b4c <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d90:	e00a      	b.n	8006da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d92:	f7fc fedb 	bl	8003b4c <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e095      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da8:	4b4c      	ldr	r3, [pc, #304]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1ee      	bne.n	8006d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d105      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dba:	4b48      	ldr	r3, [pc, #288]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	4a47      	ldr	r2, [pc, #284]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8081 	beq.w	8006ed2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dd0:	4b42      	ldr	r3, [pc, #264]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 030c 	and.w	r3, r3, #12
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d061      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d146      	bne.n	8006e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de4:	4b3f      	ldr	r3, [pc, #252]	; (8006ee4 <HAL_RCC_OscConfig+0x4fc>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dea:	f7fc feaf 	bl	8003b4c <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df2:	f7fc feab 	bl	8003b4c <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e067      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e04:	4b35      	ldr	r3, [pc, #212]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f0      	bne.n	8006df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e18:	d108      	bne.n	8006e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e1a:	4b30      	ldr	r3, [pc, #192]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	492d      	ldr	r1, [pc, #180]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e2c:	4b2b      	ldr	r3, [pc, #172]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a19      	ldr	r1, [r3, #32]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	4927      	ldr	r1, [pc, #156]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e44:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <HAL_RCC_OscConfig+0x4fc>)
 8006e46:	2201      	movs	r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e4a:	f7fc fe7f 	bl	8003b4c <HAL_GetTick>
 8006e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e50:	e008      	b.n	8006e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e52:	f7fc fe7b 	bl	8003b4c <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e037      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e64:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0f0      	beq.n	8006e52 <HAL_RCC_OscConfig+0x46a>
 8006e70:	e02f      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e72:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <HAL_RCC_OscConfig+0x4fc>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e78:	f7fc fe68 	bl	8003b4c <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e80:	f7fc fe64 	bl	8003b4c <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e020      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e92:	4b12      	ldr	r3, [pc, #72]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1f0      	bne.n	8006e80 <HAL_RCC_OscConfig+0x498>
 8006e9e:	e018      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e013      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <HAL_RCC_OscConfig+0x4f4>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d106      	bne.n	8006ece <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d001      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40007000 	.word	0x40007000
 8006ee4:	42420060 	.word	0x42420060

08006ee8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e0d0      	b.n	800709e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006efc:	4b6a      	ldr	r3, [pc, #424]	; (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d910      	bls.n	8006f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0a:	4b67      	ldr	r3, [pc, #412]	; (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f023 0207 	bic.w	r2, r3, #7
 8006f12:	4965      	ldr	r1, [pc, #404]	; (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1a:	4b63      	ldr	r3, [pc, #396]	; (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d001      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0b8      	b.n	800709e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d020      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f44:	4b59      	ldr	r3, [pc, #356]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4a58      	ldr	r2, [pc, #352]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f5c:	4b53      	ldr	r3, [pc, #332]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4a52      	ldr	r2, [pc, #328]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006f62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006f66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f68:	4b50      	ldr	r3, [pc, #320]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	494d      	ldr	r1, [pc, #308]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d040      	beq.n	8007008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d107      	bne.n	8006f9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8e:	4b47      	ldr	r3, [pc, #284]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d115      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e07f      	b.n	800709e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa6:	4b41      	ldr	r3, [pc, #260]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e073      	b.n	800709e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fb6:	4b3d      	ldr	r3, [pc, #244]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e06b      	b.n	800709e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fc6:	4b39      	ldr	r3, [pc, #228]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f023 0203 	bic.w	r2, r3, #3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4936      	ldr	r1, [pc, #216]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fd8:	f7fc fdb8 	bl	8003b4c <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe0:	f7fc fdb4 	bl	8003b4c <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e053      	b.n	800709e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	4b2d      	ldr	r3, [pc, #180]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f003 020c 	and.w	r2, r3, #12
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	429a      	cmp	r2, r3
 8007006:	d1eb      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007008:	4b27      	ldr	r3, [pc, #156]	; (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d210      	bcs.n	8007038 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 0207 	bic.w	r2, r3, #7
 800701e:	4922      	ldr	r1, [pc, #136]	; (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	4313      	orrs	r3, r2
 8007024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007026:	4b20      	ldr	r3, [pc, #128]	; (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d001      	beq.n	8007038 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e032      	b.n	800709e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d008      	beq.n	8007056 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007044:	4b19      	ldr	r3, [pc, #100]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	4916      	ldr	r1, [pc, #88]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8007052:	4313      	orrs	r3, r2
 8007054:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007062:	4b12      	ldr	r3, [pc, #72]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	490e      	ldr	r1, [pc, #56]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8007072:	4313      	orrs	r3, r2
 8007074:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007076:	f000 f821 	bl	80070bc <HAL_RCC_GetSysClockFreq>
 800707a:	4602      	mov	r2, r0
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	091b      	lsrs	r3, r3, #4
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	490a      	ldr	r1, [pc, #40]	; (80070b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007088:	5ccb      	ldrb	r3, [r1, r3]
 800708a:	fa22 f303 	lsr.w	r3, r2, r3
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <HAL_RCC_ClockConfig+0x1cc>)
 8007090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007092:	4b09      	ldr	r3, [pc, #36]	; (80070b8 <HAL_RCC_ClockConfig+0x1d0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f7fc fd16 	bl	8003ac8 <HAL_InitTick>

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40022000 	.word	0x40022000
 80070ac:	40021000 	.word	0x40021000
 80070b0:	0800d794 	.word	0x0800d794
 80070b4:	20000004 	.word	0x20000004
 80070b8:	20000008 	.word	0x20000008

080070bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070bc:	b490      	push	{r4, r7}
 80070be:	b08a      	sub	sp, #40	; 0x28
 80070c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <HAL_RCC_GetSysClockFreq+0xb0>)
 80070c4:	1d3c      	adds	r4, r7, #4
 80070c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80070cc:	f240 2301 	movw	r3, #513	; 0x201
 80070d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	2300      	movs	r3, #0
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	2300      	movs	r3, #0
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070e6:	4b22      	ldr	r3, [pc, #136]	; (8007170 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d002      	beq.n	80070fc <HAL_RCC_GetSysClockFreq+0x40>
 80070f6:	2b08      	cmp	r3, #8
 80070f8:	d003      	beq.n	8007102 <HAL_RCC_GetSysClockFreq+0x46>
 80070fa:	e02d      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070fc:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070fe:	623b      	str	r3, [r7, #32]
      break;
 8007100:	e02d      	b.n	800715e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	0c9b      	lsrs	r3, r3, #18
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800710e:	4413      	add	r3, r2
 8007110:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007114:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d013      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007120:	4b13      	ldr	r3, [pc, #76]	; (8007170 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	0c5b      	lsrs	r3, r3, #17
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800712e:	4413      	add	r3, r2
 8007130:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007134:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4a0e      	ldr	r2, [pc, #56]	; (8007174 <HAL_RCC_GetSysClockFreq+0xb8>)
 800713a:	fb02 f203 	mul.w	r2, r2, r3
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	fbb2 f3f3 	udiv	r3, r2, r3
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
 8007146:	e004      	b.n	8007152 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	4a0b      	ldr	r2, [pc, #44]	; (8007178 <HAL_RCC_GetSysClockFreq+0xbc>)
 800714c:	fb02 f303 	mul.w	r3, r2, r3
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	623b      	str	r3, [r7, #32]
      break;
 8007156:	e002      	b.n	800715e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007158:	4b06      	ldr	r3, [pc, #24]	; (8007174 <HAL_RCC_GetSysClockFreq+0xb8>)
 800715a:	623b      	str	r3, [r7, #32]
      break;
 800715c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800715e:	6a3b      	ldr	r3, [r7, #32]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3728      	adds	r7, #40	; 0x28
 8007164:	46bd      	mov	sp, r7
 8007166:	bc90      	pop	{r4, r7}
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	0800d72c 	.word	0x0800d72c
 8007170:	40021000 	.word	0x40021000
 8007174:	007a1200 	.word	0x007a1200
 8007178:	003d0900 	.word	0x003d0900

0800717c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <HAL_RCC_GetHCLKFreq+0x10>)
 8007182:	681b      	ldr	r3, [r3, #0]
}
 8007184:	4618      	mov	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr
 800718c:	20000004 	.word	0x20000004

08007190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007194:	f7ff fff2 	bl	800717c <HAL_RCC_GetHCLKFreq>
 8007198:	4602      	mov	r2, r0
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	4903      	ldr	r1, [pc, #12]	; (80071b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40021000 	.word	0x40021000
 80071b4:	0800d7a4 	.word	0x0800d7a4

080071b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071bc:	f7ff ffde 	bl	800717c <HAL_RCC_GetHCLKFreq>
 80071c0:	4602      	mov	r2, r0
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	0adb      	lsrs	r3, r3, #11
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	4903      	ldr	r1, [pc, #12]	; (80071dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ce:	5ccb      	ldrb	r3, [r1, r3]
 80071d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40021000 	.word	0x40021000
 80071dc:	0800d7a4 	.word	0x0800d7a4

080071e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <RCC_Delay+0x34>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a0a      	ldr	r2, [pc, #40]	; (8007218 <RCC_Delay+0x38>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	0a5b      	lsrs	r3, r3, #9
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80071fc:	bf00      	nop
  }
  while (Delay --);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1e5a      	subs	r2, r3, #1
 8007202:	60fa      	str	r2, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f9      	bne.n	80071fc <RCC_Delay+0x1c>
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr
 8007214:	20000004 	.word	0x20000004
 8007218:	10624dd3 	.word	0x10624dd3

0800721c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d07d      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007238:	2300      	movs	r3, #0
 800723a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800723c:	4b4f      	ldr	r3, [pc, #316]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10d      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007248:	4b4c      	ldr	r3, [pc, #304]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	4a4b      	ldr	r2, [pc, #300]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007252:	61d3      	str	r3, [r2, #28]
 8007254:	4b49      	ldr	r3, [pc, #292]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007264:	4b46      	ldr	r3, [pc, #280]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d118      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007270:	4b43      	ldr	r3, [pc, #268]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a42      	ldr	r2, [pc, #264]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800727a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800727c:	f7fc fc66 	bl	8003b4c <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007282:	e008      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007284:	f7fc fc62 	bl	8003b4c <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b64      	cmp	r3, #100	; 0x64
 8007290:	d901      	bls.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e06d      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007296:	4b3a      	ldr	r3, [pc, #232]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0f0      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072a2:	4b36      	ldr	r3, [pc, #216]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d02e      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d027      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072c0:	4b2e      	ldr	r3, [pc, #184]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ca:	4b2e      	ldr	r3, [pc, #184]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072d0:	4b2c      	ldr	r3, [pc, #176]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80072d6:	4a29      	ldr	r2, [pc, #164]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d014      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e6:	f7fc fc31 	bl	8003b4c <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ec:	e00a      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ee:	f7fc fc2d 	bl	8003b4c <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e036      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007304:	4b1d      	ldr	r3, [pc, #116]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0ee      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007310:	4b1a      	ldr	r3, [pc, #104]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4917      	ldr	r1, [pc, #92]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731e:	4313      	orrs	r3, r2
 8007320:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d105      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007328:	4b14      	ldr	r3, [pc, #80]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007332:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007340:	4b0e      	ldr	r3, [pc, #56]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	490b      	ldr	r1, [pc, #44]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800734e:	4313      	orrs	r3, r2
 8007350:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	2b00      	cmp	r3, #0
 800735c:	d008      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800735e:	4b07      	ldr	r3, [pc, #28]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	4904      	ldr	r1, [pc, #16]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800736c:	4313      	orrs	r3, r2
 800736e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40021000 	.word	0x40021000
 8007380:	40007000 	.word	0x40007000
 8007384:	42420440 	.word	0x42420440

08007388 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b08d      	sub	sp, #52	; 0x34
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007390:	4b5a      	ldr	r3, [pc, #360]	; (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007392:	f107 040c 	add.w	r4, r7, #12
 8007396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800739c:	f240 2301 	movw	r3, #513	; 0x201
 80073a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
 80073a6:	2300      	movs	r3, #0
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073aa:	2300      	movs	r3, #0
 80073ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	2300      	movs	r3, #0
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d00a      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b10      	cmp	r3, #16
 80073c0:	f200 8091 	bhi.w	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d04c      	beq.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d07c      	beq.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80073d0:	e089      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80073d2:	4b4b      	ldr	r3, [pc, #300]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80073d8:	4b49      	ldr	r3, [pc, #292]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8082 	beq.w	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	0c9b      	lsrs	r3, r3, #18
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80073f2:	4413      	add	r3, r2
 80073f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80073f8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d018      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007404:	4b3e      	ldr	r3, [pc, #248]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	0c5b      	lsrs	r3, r3, #17
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007412:	4413      	add	r3, r2
 8007414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00d      	beq.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007424:	4a37      	ldr	r2, [pc, #220]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	fbb2 f2f3 	udiv	r2, r2, r3
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007434:	e004      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	4a33      	ldr	r2, [pc, #204]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800743a:	fb02 f303 	mul.w	r3, r2, r3
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007440:	4b2f      	ldr	r3, [pc, #188]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800744c:	d102      	bne.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007452:	e04a      	b.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	4a2c      	ldr	r2, [pc, #176]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800745a:	fba2 2303 	umull	r2, r3, r2, r3
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007462:	e042      	b.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8007464:	4b26      	ldr	r3, [pc, #152]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007474:	d108      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8007480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007484:	62bb      	str	r3, [r7, #40]	; 0x28
 8007486:	e01f      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007492:	d109      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007494:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80074a0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a6:	e00f      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074b2:	d11c      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80074b4:	4b12      	ldr	r3, [pc, #72]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d016      	beq.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80074c0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80074c4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80074c6:	e012      	b.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80074c8:	e011      	b.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80074ca:	f7ff fe75 	bl	80071b8 <HAL_RCC_GetPCLK2Freq>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	0b9b      	lsrs	r3, r3, #14
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	3301      	adds	r3, #1
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80074e4:	e004      	b.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80074e6:	bf00      	nop
 80074e8:	e002      	b.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80074ee:	bf00      	nop
    }
  }
  return (frequency);
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3734      	adds	r7, #52	; 0x34
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd90      	pop	{r4, r7, pc}
 80074fa:	bf00      	nop
 80074fc:	0800d73c 	.word	0x0800d73c
 8007500:	40021000 	.word	0x40021000
 8007504:	007a1200 	.word	0x007a1200
 8007508:	003d0900 	.word	0x003d0900
 800750c:	aaaaaaab 	.word	0xaaaaaaab

08007510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e076      	b.n	8007610 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d108      	bne.n	800753c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007532:	d009      	beq.n	8007548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	61da      	str	r2, [r3, #28]
 800753a:	e005      	b.n	8007548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fb fed6 	bl	8003314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075cc:	ea42 0103 	orr.w	r1, r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	0c1a      	lsrs	r2, r3, #16
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f002 0204 	and.w	r2, r2, #4
 80075ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69da      	ldr	r2, [r3, #28]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_SPI_Transmit+0x22>
 8007636:	2302      	movs	r3, #2
 8007638:	e126      	b.n	8007888 <HAL_SPI_Transmit+0x270>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007642:	f7fc fa83 	bl	8003b4c <HAL_GetTick>
 8007646:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d002      	beq.n	800765e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007658:	2302      	movs	r3, #2
 800765a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800765c:	e10b      	b.n	8007876 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <HAL_SPI_Transmit+0x52>
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800766e:	e102      	b.n	8007876 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2203      	movs	r2, #3
 8007674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	88fa      	ldrh	r2, [r7, #6]
 8007688:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	88fa      	ldrh	r2, [r7, #6]
 800768e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b6:	d10f      	bne.n	80076d8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d007      	beq.n	80076f6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076fe:	d14b      	bne.n	8007798 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_SPI_Transmit+0xf6>
 8007708:	8afb      	ldrh	r3, [r7, #22]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d13e      	bne.n	800778c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	881a      	ldrh	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	1c9a      	adds	r2, r3, #2
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007732:	e02b      	b.n	800778c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b02      	cmp	r3, #2
 8007740:	d112      	bne.n	8007768 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	881a      	ldrh	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	1c9a      	adds	r2, r3, #2
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	86da      	strh	r2, [r3, #54]	; 0x36
 8007766:	e011      	b.n	800778c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007768:	f7fc f9f0 	bl	8003b4c <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d803      	bhi.n	8007780 <HAL_SPI_Transmit+0x168>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d102      	bne.n	8007786 <HAL_SPI_Transmit+0x16e>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	77fb      	strb	r3, [r7, #31]
          goto error;
 800778a:	e074      	b.n	8007876 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1ce      	bne.n	8007734 <HAL_SPI_Transmit+0x11c>
 8007796:	e04c      	b.n	8007832 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <HAL_SPI_Transmit+0x18e>
 80077a0:	8afb      	ldrh	r3, [r7, #22]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d140      	bne.n	8007828 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	330c      	adds	r3, #12
 80077b0:	7812      	ldrb	r2, [r2, #0]
 80077b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077cc:	e02c      	b.n	8007828 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d113      	bne.n	8007804 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	7812      	ldrb	r2, [r2, #0]
 80077e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	86da      	strh	r2, [r3, #54]	; 0x36
 8007802:	e011      	b.n	8007828 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007804:	f7fc f9a2 	bl	8003b4c <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d803      	bhi.n	800781c <HAL_SPI_Transmit+0x204>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d102      	bne.n	8007822 <HAL_SPI_Transmit+0x20a>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007826:	e026      	b.n	8007876 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1cd      	bne.n	80077ce <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fa62 	bl	8007d00 <SPI_EndRxTxTransaction>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2220      	movs	r2, #32
 8007846:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10a      	bne.n	8007866 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007850:	2300      	movs	r3, #0
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e000      	b.n	8007876 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007874:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007886:	7ffb      	ldrb	r3, [r7, #31]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	; 0x30
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800789e:	2301      	movs	r3, #1
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_SPI_TransmitReceive+0x26>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e18a      	b.n	8007bcc <HAL_SPI_TransmitReceive+0x33c>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078be:	f7fc f945 	bl	8003b4c <HAL_GetTick>
 80078c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078d4:	887b      	ldrh	r3, [r7, #2]
 80078d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d00f      	beq.n	8007900 <HAL_SPI_TransmitReceive+0x70>
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e6:	d107      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d103      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x68>
 80078f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d003      	beq.n	8007900 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
 80078fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078fe:	e15b      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d005      	beq.n	8007912 <HAL_SPI_TransmitReceive+0x82>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_SPI_TransmitReceive+0x82>
 800790c:	887b      	ldrh	r3, [r7, #2]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007918:	e14e      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b04      	cmp	r3, #4
 8007924:	d003      	beq.n	800792e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2205      	movs	r2, #5
 800792a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	887a      	ldrh	r2, [r7, #2]
 800793e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	887a      	ldrh	r2, [r7, #2]
 8007944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	887a      	ldrh	r2, [r7, #2]
 8007950:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	887a      	ldrh	r2, [r7, #2]
 8007956:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d007      	beq.n	8007982 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007980:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800798a:	d178      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_SPI_TransmitReceive+0x10a>
 8007994:	8b7b      	ldrh	r3, [r7, #26]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d166      	bne.n	8007a68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	881a      	ldrh	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	1c9a      	adds	r2, r3, #2
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079be:	e053      	b.n	8007a68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d11b      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x176>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d016      	beq.n	8007a06 <HAL_SPI_TransmitReceive+0x176>
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d113      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	881a      	ldrh	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	1c9a      	adds	r2, r3, #2
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d119      	bne.n	8007a48 <HAL_SPI_TransmitReceive+0x1b8>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d014      	beq.n	8007a48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	b292      	uxth	r2, r2
 8007a2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	1c9a      	adds	r2, r3, #2
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a44:	2301      	movs	r3, #1
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a48:	f7fc f880 	bl	8003b4c <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d807      	bhi.n	8007a68 <HAL_SPI_TransmitReceive+0x1d8>
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5e:	d003      	beq.n	8007a68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a66:	e0a7      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1a6      	bne.n	80079c0 <HAL_SPI_TransmitReceive+0x130>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1a1      	bne.n	80079c0 <HAL_SPI_TransmitReceive+0x130>
 8007a7c:	e07c      	b.n	8007b78 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_SPI_TransmitReceive+0x1fc>
 8007a86:	8b7b      	ldrh	r3, [r7, #26]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d16b      	bne.n	8007b64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ab2:	e057      	b.n	8007b64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d11c      	bne.n	8007afc <HAL_SPI_TransmitReceive+0x26c>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d017      	beq.n	8007afc <HAL_SPI_TransmitReceive+0x26c>
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d114      	bne.n	8007afc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d119      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x2ae>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d014      	beq.n	8007b3e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b3e:	f7fc f805 	bl	8003b4c <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d803      	bhi.n	8007b56 <HAL_SPI_TransmitReceive+0x2c6>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b54:	d102      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x2cc>
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b62:	e029      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1a2      	bne.n	8007ab4 <HAL_SPI_TransmitReceive+0x224>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d19d      	bne.n	8007ab4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f8bf 	bl	8007d00 <SPI_EndRxTxTransaction>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d006      	beq.n	8007b96 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2220      	movs	r2, #32
 8007b92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b94:	e010      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	e000      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3730      	adds	r7, #48	; 0x30
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007be2:	b2db      	uxtb	r3, r3
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr
	...

08007bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c00:	f7fb ffa4 	bl	8003b4c <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c10:	f7fb ff9c 	bl	8003b4c <HAL_GetTick>
 8007c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c16:	4b39      	ldr	r3, [pc, #228]	; (8007cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	015b      	lsls	r3, r3, #5
 8007c1c:	0d1b      	lsrs	r3, r3, #20
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
 8007c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c26:	e054      	b.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d050      	beq.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c30:	f7fb ff8c 	bl	8003b4c <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d902      	bls.n	8007c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d13d      	bne.n	8007cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c5e:	d111      	bne.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c68:	d004      	beq.n	8007c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c72:	d107      	bne.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8c:	d10f      	bne.n	8007cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e017      	b.n	8007cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	bf0c      	ite	eq
 8007ce2:	2301      	moveq	r3, #1
 8007ce4:	2300      	movne	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d19b      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3720      	adds	r7, #32
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000004 	.word	0x20000004

08007d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2200      	movs	r2, #0
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff ff6a 	bl	8007bf0 <SPI_WaitFlagStateUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e000      	b.n	8007d34 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e041      	b.n	8007dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7fb fb30 	bl	80033c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	f000 fc6c 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d001      	beq.n	8007df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e03a      	b.n	8007e6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0201 	orr.w	r2, r2, #1
 8007e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a18      	ldr	r2, [pc, #96]	; (8007e74 <HAL_TIM_Base_Start_IT+0x98>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00e      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x58>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1e:	d009      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x58>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a14      	ldr	r2, [pc, #80]	; (8007e78 <HAL_TIM_Base_Start_IT+0x9c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d004      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x58>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <HAL_TIM_Base_Start_IT+0xa0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d111      	bne.n	8007e58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b06      	cmp	r3, #6
 8007e44:	d010      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0201 	orr.w	r2, r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e56:	e007      	b.n	8007e68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr
 8007e74:	40012c00 	.word	0x40012c00
 8007e78:	40000400 	.word	0x40000400
 8007e7c:	40000800 	.word	0x40000800

08007e80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e041      	b.n	8007f16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d106      	bne.n	8007eac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f839 	bl	8007f1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	f000 fbca 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc80      	pop	{r7}
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_TIM_IC_Start_IT+0x1a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	e013      	b.n	8007f72 <HAL_TIM_IC_Start_IT+0x42>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d104      	bne.n	8007f5a <HAL_TIM_IC_Start_IT+0x2a>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	e00b      	b.n	8007f72 <HAL_TIM_IC_Start_IT+0x42>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIM_IC_Start_IT+0x3a>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	e003      	b.n	8007f72 <HAL_TIM_IC_Start_IT+0x42>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d104      	bne.n	8007f84 <HAL_TIM_IC_Start_IT+0x54>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	e013      	b.n	8007fac <HAL_TIM_IC_Start_IT+0x7c>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d104      	bne.n	8007f94 <HAL_TIM_IC_Start_IT+0x64>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	e00b      	b.n	8007fac <HAL_TIM_IC_Start_IT+0x7c>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d104      	bne.n	8007fa4 <HAL_TIM_IC_Start_IT+0x74>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	e003      	b.n	8007fac <HAL_TIM_IC_Start_IT+0x7c>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d102      	bne.n	8007fba <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d001      	beq.n	8007fbe <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e0b3      	b.n	8008126 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <HAL_TIM_IC_Start_IT+0x9e>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fcc:	e013      	b.n	8007ff6 <HAL_TIM_IC_Start_IT+0xc6>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d104      	bne.n	8007fde <HAL_TIM_IC_Start_IT+0xae>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fdc:	e00b      	b.n	8007ff6 <HAL_TIM_IC_Start_IT+0xc6>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_IC_Start_IT+0xbe>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fec:	e003      	b.n	8007ff6 <HAL_TIM_IC_Start_IT+0xc6>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d104      	bne.n	8008006 <HAL_TIM_IC_Start_IT+0xd6>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008004:	e013      	b.n	800802e <HAL_TIM_IC_Start_IT+0xfe>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b04      	cmp	r3, #4
 800800a:	d104      	bne.n	8008016 <HAL_TIM_IC_Start_IT+0xe6>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008014:	e00b      	b.n	800802e <HAL_TIM_IC_Start_IT+0xfe>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b08      	cmp	r3, #8
 800801a:	d104      	bne.n	8008026 <HAL_TIM_IC_Start_IT+0xf6>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008024:	e003      	b.n	800802e <HAL_TIM_IC_Start_IT+0xfe>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b0c      	cmp	r3, #12
 8008032:	d841      	bhi.n	80080b8 <HAL_TIM_IC_Start_IT+0x188>
 8008034:	a201      	add	r2, pc, #4	; (adr r2, 800803c <HAL_TIM_IC_Start_IT+0x10c>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008071 	.word	0x08008071
 8008040:	080080b9 	.word	0x080080b9
 8008044:	080080b9 	.word	0x080080b9
 8008048:	080080b9 	.word	0x080080b9
 800804c:	08008083 	.word	0x08008083
 8008050:	080080b9 	.word	0x080080b9
 8008054:	080080b9 	.word	0x080080b9
 8008058:	080080b9 	.word	0x080080b9
 800805c:	08008095 	.word	0x08008095
 8008060:	080080b9 	.word	0x080080b9
 8008064:	080080b9 	.word	0x080080b9
 8008068:	080080b9 	.word	0x080080b9
 800806c:	080080a7 	.word	0x080080a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0202 	orr.w	r2, r2, #2
 800807e:	60da      	str	r2, [r3, #12]
      break;
 8008080:	e01b      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0204 	orr.w	r2, r2, #4
 8008090:	60da      	str	r2, [r3, #12]
      break;
 8008092:	e012      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0208 	orr.w	r2, r2, #8
 80080a2:	60da      	str	r2, [r3, #12]
      break;
 80080a4:	e009      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0210 	orr.w	r2, r2, #16
 80080b4:	60da      	str	r2, [r3, #12]
      break;
 80080b6:	e000      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80080b8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2201      	movs	r2, #1
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fccd 	bl	8008a62 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a18      	ldr	r2, [pc, #96]	; (8008130 <HAL_TIM_IC_Start_IT+0x200>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00e      	beq.n	80080f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080da:	d009      	beq.n	80080f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a14      	ldr	r2, [pc, #80]	; (8008134 <HAL_TIM_IC_Start_IT+0x204>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a13      	ldr	r2, [pc, #76]	; (8008138 <HAL_TIM_IC_Start_IT+0x208>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d111      	bne.n	8008114 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b06      	cmp	r3, #6
 8008100:	d010      	beq.n	8008124 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0201 	orr.w	r2, r2, #1
 8008110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008112:	e007      	b.n	8008124 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800

0800813c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b02      	cmp	r3, #2
 8008150:	d122      	bne.n	8008198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b02      	cmp	r3, #2
 800815e:	d11b      	bne.n	8008198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0202 	mvn.w	r2, #2
 8008168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa4e 	bl	8008620 <HAL_TIM_IC_CaptureCallback>
 8008184:	e005      	b.n	8008192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa41 	bl	800860e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa50 	bl	8008632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d122      	bne.n	80081ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d11b      	bne.n	80081ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0204 	mvn.w	r2, #4
 80081bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa24 	bl	8008620 <HAL_TIM_IC_CaptureCallback>
 80081d8:	e005      	b.n	80081e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa17 	bl	800860e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa26 	bl	8008632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d122      	bne.n	8008240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d11b      	bne.n	8008240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0208 	mvn.w	r2, #8
 8008210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2204      	movs	r2, #4
 8008216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f9fa 	bl	8008620 <HAL_TIM_IC_CaptureCallback>
 800822c:	e005      	b.n	800823a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f9ed 	bl	800860e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f9fc 	bl	8008632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b10      	cmp	r3, #16
 800824c:	d122      	bne.n	8008294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b10      	cmp	r3, #16
 800825a:	d11b      	bne.n	8008294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0210 	mvn.w	r2, #16
 8008264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2208      	movs	r2, #8
 800826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f9d0 	bl	8008620 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f9c3 	bl	800860e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9d2 	bl	8008632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10e      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d107      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f06f 0201 	mvn.w	r2, #1
 80082b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f99e 	bl	80085fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ca:	2b80      	cmp	r3, #128	; 0x80
 80082cc:	d10e      	bne.n	80082ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d107      	bne.n	80082ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fc47 	bl	8008b7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d10e      	bne.n	8008318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d107      	bne.n	8008318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f996 	bl	8008644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b20      	cmp	r3, #32
 8008324:	d10e      	bne.n	8008344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d107      	bne.n	8008344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0220 	mvn.w	r2, #32
 800833c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fc12 	bl	8008b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008362:	2302      	movs	r3, #2
 8008364:	e082      	b.n	800846c <HAL_TIM_IC_ConfigChannel+0x120>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11b      	bne.n	80083ac <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6819      	ldr	r1, [r3, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f000 f9ca 	bl	800871c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 020c 	bic.w	r2, r2, #12
 8008396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6999      	ldr	r1, [r3, #24]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	619a      	str	r2, [r3, #24]
 80083aa:	e05a      	b.n	8008462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d11c      	bne.n	80083ec <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6819      	ldr	r1, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f000 fa33 	bl	800882c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80083d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6999      	ldr	r1, [r3, #24]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	021a      	lsls	r2, r3, #8
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	619a      	str	r2, [r3, #24]
 80083ea:	e03a      	b.n	8008462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d11b      	bne.n	800842a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6819      	ldr	r1, [r3, #0]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f000 fa7e 	bl	8008902 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 020c 	bic.w	r2, r2, #12
 8008414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69d9      	ldr	r1, [r3, #28]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	61da      	str	r2, [r3, #28]
 8008428:	e01b      	b.n	8008462 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6819      	ldr	r1, [r3, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f000 fa9d 	bl	8008978 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69da      	ldr	r2, [r3, #28]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800844c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69d9      	ldr	r1, [r3, #28]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	021a      	lsls	r2, r3, #8
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_TIM_ConfigClockSource+0x18>
 8008488:	2302      	movs	r3, #2
 800848a:	e0b3      	b.n	80085f4 <HAL_TIM_ConfigClockSource+0x180>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c4:	d03e      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0xd0>
 80084c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ca:	f200 8087 	bhi.w	80085dc <HAL_TIM_ConfigClockSource+0x168>
 80084ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d2:	f000 8085 	beq.w	80085e0 <HAL_TIM_ConfigClockSource+0x16c>
 80084d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084da:	d87f      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x168>
 80084dc:	2b70      	cmp	r3, #112	; 0x70
 80084de:	d01a      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0xa2>
 80084e0:	2b70      	cmp	r3, #112	; 0x70
 80084e2:	d87b      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x168>
 80084e4:	2b60      	cmp	r3, #96	; 0x60
 80084e6:	d050      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x116>
 80084e8:	2b60      	cmp	r3, #96	; 0x60
 80084ea:	d877      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x168>
 80084ec:	2b50      	cmp	r3, #80	; 0x50
 80084ee:	d03c      	beq.n	800856a <HAL_TIM_ConfigClockSource+0xf6>
 80084f0:	2b50      	cmp	r3, #80	; 0x50
 80084f2:	d873      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x168>
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d058      	beq.n	80085aa <HAL_TIM_ConfigClockSource+0x136>
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	d86f      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x168>
 80084fc:	2b30      	cmp	r3, #48	; 0x30
 80084fe:	d064      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x156>
 8008500:	2b30      	cmp	r3, #48	; 0x30
 8008502:	d86b      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x168>
 8008504:	2b20      	cmp	r3, #32
 8008506:	d060      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x156>
 8008508:	2b20      	cmp	r3, #32
 800850a:	d867      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x168>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d05c      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x156>
 8008510:	2b10      	cmp	r3, #16
 8008512:	d05a      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008514:	e062      	b.n	80085dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6899      	ldr	r1, [r3, #8]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f000 fa7d 	bl	8008a24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008538:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	609a      	str	r2, [r3, #8]
      break;
 8008542:	e04e      	b.n	80085e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	6899      	ldr	r1, [r3, #8]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f000 fa66 	bl	8008a24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008566:	609a      	str	r2, [r3, #8]
      break;
 8008568:	e03b      	b.n	80085e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	6859      	ldr	r1, [r3, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	461a      	mov	r2, r3
 8008578:	f000 f92a 	bl	80087d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2150      	movs	r1, #80	; 0x50
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fa34 	bl	80089f0 <TIM_ITRx_SetConfig>
      break;
 8008588:	e02b      	b.n	80085e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6859      	ldr	r1, [r3, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	461a      	mov	r2, r3
 8008598:	f000 f984 	bl	80088a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2160      	movs	r1, #96	; 0x60
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fa24 	bl	80089f0 <TIM_ITRx_SetConfig>
      break;
 80085a8:	e01b      	b.n	80085e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	6859      	ldr	r1, [r3, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f000 f90a 	bl	80087d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2140      	movs	r1, #64	; 0x40
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fa14 	bl	80089f0 <TIM_ITRx_SetConfig>
      break;
 80085c8:	e00b      	b.n	80085e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4619      	mov	r1, r3
 80085d4:	4610      	mov	r0, r2
 80085d6:	f000 fa0b 	bl	80089f0 <TIM_ITRx_SetConfig>
        break;
 80085da:	e002      	b.n	80085e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085dc:	bf00      	nop
 80085de:	e000      	b.n	80085e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr

0800860e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr

08008644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	bc80      	pop	{r7}
 8008654:	4770      	bx	lr
	...

08008658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a29      	ldr	r2, [pc, #164]	; (8008710 <TIM_Base_SetConfig+0xb8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d00b      	beq.n	8008688 <TIM_Base_SetConfig+0x30>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008676:	d007      	beq.n	8008688 <TIM_Base_SetConfig+0x30>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a26      	ldr	r2, [pc, #152]	; (8008714 <TIM_Base_SetConfig+0xbc>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d003      	beq.n	8008688 <TIM_Base_SetConfig+0x30>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a25      	ldr	r2, [pc, #148]	; (8008718 <TIM_Base_SetConfig+0xc0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d108      	bne.n	800869a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a1c      	ldr	r2, [pc, #112]	; (8008710 <TIM_Base_SetConfig+0xb8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00b      	beq.n	80086ba <TIM_Base_SetConfig+0x62>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a8:	d007      	beq.n	80086ba <TIM_Base_SetConfig+0x62>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a19      	ldr	r2, [pc, #100]	; (8008714 <TIM_Base_SetConfig+0xbc>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d003      	beq.n	80086ba <TIM_Base_SetConfig+0x62>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a18      	ldr	r2, [pc, #96]	; (8008718 <TIM_Base_SetConfig+0xc0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d108      	bne.n	80086cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a07      	ldr	r2, [pc, #28]	; (8008710 <TIM_Base_SetConfig+0xb8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d103      	bne.n	8008700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	615a      	str	r2, [r3, #20]
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr
 8008710:	40012c00 	.word	0x40012c00
 8008714:	40000400 	.word	0x40000400
 8008718:	40000800 	.word	0x40000800

0800871c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	f023 0201 	bic.w	r2, r3, #1
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <TIM_TI1_SetConfig+0xa8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00b      	beq.n	8008762 <TIM_TI1_SetConfig+0x46>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008750:	d007      	beq.n	8008762 <TIM_TI1_SetConfig+0x46>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4a1c      	ldr	r2, [pc, #112]	; (80087c8 <TIM_TI1_SetConfig+0xac>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d003      	beq.n	8008762 <TIM_TI1_SetConfig+0x46>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4a1b      	ldr	r2, [pc, #108]	; (80087cc <TIM_TI1_SetConfig+0xb0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d101      	bne.n	8008766 <TIM_TI1_SetConfig+0x4a>
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <TIM_TI1_SetConfig+0x4c>
 8008766:	2300      	movs	r3, #0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d008      	beq.n	800877e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f023 0303 	bic.w	r3, r3, #3
 8008772:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4313      	orrs	r3, r2
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	e003      	b.n	8008786 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f043 0301 	orr.w	r3, r3, #1
 8008784:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800878c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	011b      	lsls	r3, r3, #4
 8008792:	b2db      	uxtb	r3, r3
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	4313      	orrs	r3, r2
 8008798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f023 030a 	bic.w	r3, r3, #10
 80087a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f003 030a 	and.w	r3, r3, #10
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	bc80      	pop	{r7}
 80087c2:	4770      	bx	lr
 80087c4:	40012c00 	.word	0x40012c00
 80087c8:	40000400 	.word	0x40000400
 80087cc:	40000800 	.word	0x40000800

080087d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f023 0201 	bic.w	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f023 030a 	bic.w	r3, r3, #10
 800880c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	621a      	str	r2, [r3, #32]
}
 8008822:	bf00      	nop
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	bc80      	pop	{r7}
 800882a:	4770      	bx	lr

0800882c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f023 0210 	bic.w	r2, r3, #16
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	021b      	lsls	r3, r3, #8
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4313      	orrs	r3, r2
 8008862:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800886a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	031b      	lsls	r3, r3, #12
 8008870:	b29b      	uxth	r3, r3
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	4313      	orrs	r3, r2
 8008876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800887e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	621a      	str	r2, [r3, #32]
}
 800889a:	bf00      	nop
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	f023 0210 	bic.w	r2, r3, #16
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	031b      	lsls	r3, r3, #12
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	621a      	str	r2, [r3, #32]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr

08008902 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008902:	b480      	push	{r7}
 8008904:	b087      	sub	sp, #28
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f023 0303 	bic.w	r3, r3, #3
 800892e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800893e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	011b      	lsls	r3, r3, #4
 8008944:	b2db      	uxtb	r3, r3
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008952:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	021b      	lsls	r3, r3, #8
 8008958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4313      	orrs	r3, r2
 8008960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	bc80      	pop	{r7}
 8008976:	4770      	bx	lr

08008978 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	021b      	lsls	r3, r3, #8
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	031b      	lsls	r3, r3, #12
 80089bc:	b29b      	uxth	r3, r3
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	031b      	lsls	r3, r3, #12
 80089d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr

080089f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	f043 0307 	orr.w	r3, r3, #7
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	609a      	str	r2, [r3, #8]
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr

08008a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	021a      	lsls	r2, r3, #8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	609a      	str	r2, [r3, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b087      	sub	sp, #28
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f003 031f 	and.w	r3, r3, #31
 8008a74:	2201      	movs	r2, #1
 8008a76:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6a1a      	ldr	r2, [r3, #32]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	43db      	mvns	r3, r3
 8008a84:	401a      	ands	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1a      	ldr	r2, [r3, #32]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	621a      	str	r2, [r3, #32]
}
 8008aa0:	bf00      	nop
 8008aa2:	371c      	adds	r7, #28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr
	...

08008aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e046      	b.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a16      	ldr	r2, [pc, #88]	; (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00e      	beq.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b10:	d009      	beq.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a12      	ldr	r2, [pc, #72]	; (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d004      	beq.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a10      	ldr	r2, [pc, #64]	; (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d10c      	bne.n	8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr
 8008b5c:	40012c00 	.word	0x40012c00
 8008b60:	40000400 	.word	0x40000400
 8008b64:	40000800 	.word	0x40000800

08008b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr

08008b7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr

08008b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e03f      	b.n	8008c1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7fa fcc2 	bl	800353c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2224      	movs	r2, #36	; 0x24
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fcad 	bl	8009530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691a      	ldr	r2, [r3, #16]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695a      	ldr	r2, [r3, #20]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	60b9      	str	r1, [r7, #8]
 8008c30:	4613      	mov	r3, r2
 8008c32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d11d      	bne.n	8008c7c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <HAL_UART_Receive_DMA+0x26>
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e016      	b.n	8008c7e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d101      	bne.n	8008c5e <HAL_UART_Receive_DMA+0x38>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e00f      	b.n	8008c7e <HAL_UART_Receive_DMA+0x58>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 fa92 	bl	800919c <UART_Start_Receive_DMA>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	e000      	b.n	8008c7e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c7c:	2302      	movs	r3, #2
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	; 0x28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d008      	beq.n	8008cda <HAL_UART_IRQHandler+0x52>
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	f003 0320 	and.w	r3, r3, #32
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fb82 	bl	80093dc <UART_Receive_IT>
      return;
 8008cd8:	e17b      	b.n	8008fd2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 80b1 	beq.w	8008e44 <HAL_UART_IRQHandler+0x1bc>
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d105      	bne.n	8008cf8 <HAL_UART_IRQHandler+0x70>
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 80a6 	beq.w	8008e44 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <HAL_UART_IRQHandler+0x90>
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	f043 0201 	orr.w	r2, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00a      	beq.n	8008d38 <HAL_UART_IRQHandler+0xb0>
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	f043 0202 	orr.w	r2, r3, #2
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <HAL_UART_IRQHandler+0xd0>
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d005      	beq.n	8008d58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d50:	f043 0204 	orr.w	r2, r3, #4
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	f003 0308 	and.w	r3, r3, #8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00f      	beq.n	8008d82 <HAL_UART_IRQHandler+0xfa>
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <HAL_UART_IRQHandler+0xee>
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d005      	beq.n	8008d82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	f043 0208 	orr.w	r2, r3, #8
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 811e 	beq.w	8008fc8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <HAL_UART_IRQHandler+0x11e>
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fb1b 	bl	80093dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc0:	f003 0308 	and.w	r3, r3, #8
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d102      	bne.n	8008dce <HAL_UART_IRQHandler+0x146>
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d031      	beq.n	8008e32 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa5d 	bl	800928e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d023      	beq.n	8008e2a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	695a      	ldr	r2, [r3, #20]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008df0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d013      	beq.n	8008e22 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	4a76      	ldr	r2, [pc, #472]	; (8008fd8 <HAL_UART_IRQHandler+0x350>)
 8008e00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fc fa8e 	bl	8005328 <HAL_DMA_Abort_IT>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d016      	beq.n	8008e40 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e20:	e00e      	b.n	8008e40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f8f5 	bl	8009012 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e28:	e00a      	b.n	8008e40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f8f1 	bl	8009012 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e30:	e006      	b.n	8008e40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f8ed 	bl	8009012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e3e:	e0c3      	b.n	8008fc8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e40:	bf00      	nop
    return;
 8008e42:	e0c1      	b.n	8008fc8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	f040 80a1 	bne.w	8008f90 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 809b 	beq.w	8008f90 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8095 	beq.w	8008f90 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d04e      	beq.n	8008f28 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008e94:	8a3b      	ldrh	r3, [r7, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 8098 	beq.w	8008fcc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ea0:	8a3a      	ldrh	r2, [r7, #16]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	f080 8092 	bcs.w	8008fcc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	8a3a      	ldrh	r2, [r7, #16]
 8008eac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d02b      	beq.n	8008f10 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ec6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	695a      	ldr	r2, [r3, #20]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0201 	bic.w	r2, r2, #1
 8008ed6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695a      	ldr	r2, [r3, #20]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 0210 	bic.w	r2, r2, #16
 8008f04:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fc f9d1 	bl	80052b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f87f 	bl	8009024 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f26:	e051      	b.n	8008fcc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d047      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008f40:	8a7b      	ldrh	r3, [r7, #18]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d044      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f54:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	695a      	ldr	r2, [r3, #20]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0201 	bic.w	r2, r2, #1
 8008f64:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0210 	bic.w	r2, r2, #16
 8008f82:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f84:	8a7b      	ldrh	r3, [r7, #18]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f84b 	bl	8009024 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f8e:	e01f      	b.n	8008fd0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d008      	beq.n	8008fac <HAL_UART_IRQHandler+0x324>
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9b2 	bl	800930e <UART_Transmit_IT>
    return;
 8008faa:	e012      	b.n	8008fd2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x34a>
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d008      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9f3 	bl	80093ac <UART_EndTransmit_IT>
    return;
 8008fc6:	e004      	b.n	8008fd2 <HAL_UART_IRQHandler+0x34a>
    return;
 8008fc8:	bf00      	nop
 8008fca:	e002      	b.n	8008fd2 <HAL_UART_IRQHandler+0x34a>
      return;
 8008fcc:	bf00      	nop
 8008fce:	e000      	b.n	8008fd2 <HAL_UART_IRQHandler+0x34a>
      return;
 8008fd0:	bf00      	nop
  }
}
 8008fd2:	3728      	adds	r7, #40	; 0x28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	080092e7 	.word	0x080092e7

08008fdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bc80      	pop	{r7}
 8008fec:	4770      	bx	lr

08008fee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bc80      	pop	{r7}
 8008ffe:	4770      	bx	lr

08009000 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr

08009012 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	bc80      	pop	{r7}
 8009022:	4770      	bx	lr

08009024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr

0800903a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	d12a      	bne.n	80090ac <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800906a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695a      	ldr	r2, [r3, #20]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0201 	bic.w	r2, r2, #1
 800907a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	695a      	ldr	r2, [r3, #20]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800908a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	2b01      	cmp	r3, #1
 800909a:	d107      	bne.n	80090ac <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0210 	bic.w	r2, r2, #16
 80090aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d106      	bne.n	80090c2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090b8:	4619      	mov	r1, r3
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f7ff ffb2 	bl	8009024 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090c0:	e002      	b.n	80090c8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff ff93 	bl	8008fee <HAL_UART_RxCpltCallback>
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d108      	bne.n	80090f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090ea:	085b      	lsrs	r3, r3, #1
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	4619      	mov	r1, r3
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7ff ff97 	bl	8009024 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090f6:	e002      	b.n	80090fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7ff ff81 	bl	8009000 <HAL_UART_RxHalfCpltCallback>
}
 80090fe:	bf00      	nop
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009122:	2b00      	cmp	r3, #0
 8009124:	bf14      	ite	ne
 8009126:	2301      	movne	r3, #1
 8009128:	2300      	moveq	r3, #0
 800912a:	b2db      	uxtb	r3, r3
 800912c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b21      	cmp	r3, #33	; 0x21
 8009138:	d108      	bne.n	800914c <UART_DMAError+0x46>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2200      	movs	r2, #0
 8009144:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009146:	68b8      	ldr	r0, [r7, #8]
 8009148:	f000 f88c 	bl	8009264 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	bf14      	ite	ne
 800915a:	2301      	movne	r3, #1
 800915c:	2300      	moveq	r3, #0
 800915e:	b2db      	uxtb	r3, r3
 8009160:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b22      	cmp	r3, #34	; 0x22
 800916c:	d108      	bne.n	8009180 <UART_DMAError+0x7a>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2200      	movs	r2, #0
 8009178:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800917a:	68b8      	ldr	r0, [r7, #8]
 800917c:	f000 f887 	bl	800928e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	f043 0210 	orr.w	r2, r3, #16
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800918c:	68b8      	ldr	r0, [r7, #8]
 800918e:	f7ff ff40 	bl	8009012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	88fa      	ldrh	r2, [r7, #6]
 80091b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2222      	movs	r2, #34	; 0x22
 80091c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	4a23      	ldr	r2, [pc, #140]	; (8009258 <UART_Start_Receive_DMA+0xbc>)
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d0:	4a22      	ldr	r2, [pc, #136]	; (800925c <UART_Start_Receive_DMA+0xc0>)
 80091d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	4a21      	ldr	r2, [pc, #132]	; (8009260 <UART_Start_Receive_DMA+0xc4>)
 80091da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	2200      	movs	r2, #0
 80091e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80091e4:	f107 0308 	add.w	r3, r7, #8
 80091e8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	f7fb fffa 	bl	80051f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009200:	2300      	movs	r3, #0
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	613b      	str	r3, [r7, #16]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	613b      	str	r3, [r7, #16]
 8009214:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800922c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	695a      	ldr	r2, [r3, #20]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f042 0201 	orr.w	r2, r2, #1
 800923c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	695a      	ldr	r2, [r3, #20]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800924c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	0800903b 	.word	0x0800903b
 800925c:	080090d1 	.word	0x080090d1
 8009260:	08009107 	.word	0x08009107

08009264 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800927a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	bc80      	pop	{r7}
 800928c:	4770      	bx	lr

0800928e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	695a      	ldr	r2, [r3, #20]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0201 	bic.w	r2, r2, #1
 80092b4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d107      	bne.n	80092ce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0210 	bic.w	r2, r2, #16
 80092cc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr

080092e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7ff fe86 	bl	8009012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009306:	bf00      	nop
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800930e:	b480      	push	{r7}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b21      	cmp	r3, #33	; 0x21
 8009320:	d13e      	bne.n	80093a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932a:	d114      	bne.n	8009356 <UART_Transmit_IT+0x48>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d110      	bne.n	8009356 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a1b      	ldr	r3, [r3, #32]
 8009338:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009348:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	1c9a      	adds	r2, r3, #2
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	621a      	str	r2, [r3, #32]
 8009354:	e008      	b.n	8009368 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	1c59      	adds	r1, r3, #1
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6211      	str	r1, [r2, #32]
 8009360:	781a      	ldrb	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800936c:	b29b      	uxth	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	b29b      	uxth	r3, r3
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	4619      	mov	r1, r3
 8009376:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10f      	bne.n	800939c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68da      	ldr	r2, [r3, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800938a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800939a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	e000      	b.n	80093a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093a0:	2302      	movs	r3, #2
  }
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bc80      	pop	{r7}
 80093aa:	4770      	bx	lr

080093ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff fe05 	bl	8008fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b22      	cmp	r3, #34	; 0x22
 80093ee:	f040 8099 	bne.w	8009524 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fa:	d117      	bne.n	800942c <UART_Receive_IT+0x50>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d113      	bne.n	800942c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	b29b      	uxth	r3, r3
 8009416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941a:	b29a      	uxth	r2, r3
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	1c9a      	adds	r2, r3, #2
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	629a      	str	r2, [r3, #40]	; 0x28
 800942a:	e026      	b.n	800947a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009430:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943e:	d007      	beq.n	8009450 <UART_Receive_IT+0x74>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <UART_Receive_IT+0x82>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	b2da      	uxtb	r2, r3
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	701a      	strb	r2, [r3, #0]
 800945c:	e008      	b.n	8009470 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946a:	b2da      	uxtb	r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29b      	uxth	r3, r3
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	4619      	mov	r1, r3
 8009488:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800948a:	2b00      	cmp	r3, #0
 800948c:	d148      	bne.n	8009520 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0220 	bic.w	r2, r2, #32
 800949c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68da      	ldr	r2, [r3, #12]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	695a      	ldr	r2, [r3, #20]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0201 	bic.w	r2, r2, #1
 80094bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d123      	bne.n	8009516 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0210 	bic.w	r2, r2, #16
 80094e2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0310 	and.w	r3, r3, #16
 80094ee:	2b10      	cmp	r3, #16
 80094f0:	d10a      	bne.n	8009508 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff fd88 	bl	8009024 <HAL_UARTEx_RxEventCallback>
 8009514:	e002      	b.n	800951c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff fd69 	bl	8008fee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	e002      	b.n	8009526 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	e000      	b.n	8009526 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009524:	2302      	movs	r3, #2
  }
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800956a:	f023 030c 	bic.w	r3, r3, #12
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	68b9      	ldr	r1, [r7, #8]
 8009574:	430b      	orrs	r3, r1
 8009576:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a2c      	ldr	r2, [pc, #176]	; (8009644 <UART_SetConfig+0x114>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d103      	bne.n	80095a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009598:	f7fd fe0e 	bl	80071b8 <HAL_RCC_GetPCLK2Freq>
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	e002      	b.n	80095a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80095a0:	f7fd fdf6 	bl	8007190 <HAL_RCC_GetPCLK1Freq>
 80095a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4613      	mov	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	009a      	lsls	r2, r3, #2
 80095b0:	441a      	add	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095bc:	4a22      	ldr	r2, [pc, #136]	; (8009648 <UART_SetConfig+0x118>)
 80095be:	fba2 2303 	umull	r2, r3, r2, r3
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	0119      	lsls	r1, r3, #4
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009a      	lsls	r2, r3, #2
 80095d0:	441a      	add	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80095dc:	4b1a      	ldr	r3, [pc, #104]	; (8009648 <UART_SetConfig+0x118>)
 80095de:	fba3 0302 	umull	r0, r3, r3, r2
 80095e2:	095b      	lsrs	r3, r3, #5
 80095e4:	2064      	movs	r0, #100	; 0x64
 80095e6:	fb00 f303 	mul.w	r3, r0, r3
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	3332      	adds	r3, #50	; 0x32
 80095f0:	4a15      	ldr	r2, [pc, #84]	; (8009648 <UART_SetConfig+0x118>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	095b      	lsrs	r3, r3, #5
 80095f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095fc:	4419      	add	r1, r3
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	009a      	lsls	r2, r3, #2
 8009608:	441a      	add	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	fbb2 f2f3 	udiv	r2, r2, r3
 8009614:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <UART_SetConfig+0x118>)
 8009616:	fba3 0302 	umull	r0, r3, r3, r2
 800961a:	095b      	lsrs	r3, r3, #5
 800961c:	2064      	movs	r0, #100	; 0x64
 800961e:	fb00 f303 	mul.w	r3, r0, r3
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	3332      	adds	r3, #50	; 0x32
 8009628:	4a07      	ldr	r2, [pc, #28]	; (8009648 <UART_SetConfig+0x118>)
 800962a:	fba2 2303 	umull	r2, r3, r2, r3
 800962e:	095b      	lsrs	r3, r3, #5
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	440a      	add	r2, r1
 800963a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40013800 	.word	0x40013800
 8009648:	51eb851f 	.word	0x51eb851f

0800964c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009650:	4904      	ldr	r1, [pc, #16]	; (8009664 <MX_FATFS_Init+0x18>)
 8009652:	4805      	ldr	r0, [pc, #20]	; (8009668 <MX_FATFS_Init+0x1c>)
 8009654:	f003 fadc 	bl	800cc10 <FATFS_LinkDriver>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	4b03      	ldr	r3, [pc, #12]	; (800966c <MX_FATFS_Init+0x20>)
 800965e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009660:	bf00      	nop
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000f24 	.word	0x20000f24
 8009668:	20000010 	.word	0x20000010
 800966c:	20000f28 	.word	0x20000f28

08009670 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009674:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009676:	4618      	mov	r0, r3
 8009678:	46bd      	mov	sp, r7
 800967a:	bc80      	pop	{r7}
 800967c:	4770      	bx	lr
	...

08009680 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	4618      	mov	r0, r3
 800968e:	f7f8 f823 	bl	80016d8 <SD_disk_initialize>
 8009692:	4603      	mov	r3, r0
 8009694:	461a      	mov	r2, r3
 8009696:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <USER_initialize+0x28>)
 8009698:	701a      	strb	r2, [r3, #0]
    return Stat;
 800969a:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <USER_initialize+0x28>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2000000d 	.word	0x2000000d

080096ac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7f8 f8f7 	bl	80018ac <SD_disk_status>
 80096be:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	607a      	str	r2, [r7, #4]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80096d8:	7bf8      	ldrb	r0, [r7, #15]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	f7f8 f8f8 	bl	80018d4 <SD_disk_read>
 80096e4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80096fe:	7bf8      	ldrb	r0, [r7, #15]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	f7f8 f94f 	bl	80019a8 <SD_disk_write>
 800970a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	603a      	str	r2, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
 8009720:	460b      	mov	r3, r1
 8009722:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8009724:	79b9      	ldrb	r1, [r7, #6]
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	4618      	mov	r0, r3
 800972c:	f7f8 f9c0 	bl	8001ab0 <SD_disk_ioctl>
 8009730:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	4a08      	ldr	r2, [pc, #32]	; (800976c <disk_status+0x30>)
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	79fa      	ldrb	r2, [r7, #7]
 8009754:	4905      	ldr	r1, [pc, #20]	; (800976c <disk_status+0x30>)
 8009756:	440a      	add	r2, r1
 8009758:	7a12      	ldrb	r2, [r2, #8]
 800975a:	4610      	mov	r0, r2
 800975c:	4798      	blx	r3
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009762:	7bfb      	ldrb	r3, [r7, #15]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	200002cc 	.word	0x200002cc

08009770 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800977e:	79fb      	ldrb	r3, [r7, #7]
 8009780:	4a0d      	ldr	r2, [pc, #52]	; (80097b8 <disk_initialize+0x48>)
 8009782:	5cd3      	ldrb	r3, [r2, r3]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d111      	bne.n	80097ac <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	4a0b      	ldr	r2, [pc, #44]	; (80097b8 <disk_initialize+0x48>)
 800978c:	2101      	movs	r1, #1
 800978e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009790:	79fb      	ldrb	r3, [r7, #7]
 8009792:	4a09      	ldr	r2, [pc, #36]	; (80097b8 <disk_initialize+0x48>)
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	79fa      	ldrb	r2, [r7, #7]
 800979e:	4906      	ldr	r1, [pc, #24]	; (80097b8 <disk_initialize+0x48>)
 80097a0:	440a      	add	r2, r1
 80097a2:	7a12      	ldrb	r2, [r2, #8]
 80097a4:	4610      	mov	r0, r2
 80097a6:	4798      	blx	r3
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	200002cc 	.word	0x200002cc

080097bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	4a0a      	ldr	r2, [pc, #40]	; (80097f8 <disk_read+0x3c>)
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	689c      	ldr	r4, [r3, #8]
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4a07      	ldr	r2, [pc, #28]	; (80097f8 <disk_read+0x3c>)
 80097dc:	4413      	add	r3, r2
 80097de:	7a18      	ldrb	r0, [r3, #8]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	47a0      	blx	r4
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd90      	pop	{r4, r7, pc}
 80097f6:	bf00      	nop
 80097f8:	200002cc 	.word	0x200002cc

080097fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097fc:	b590      	push	{r4, r7, lr}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4a0a      	ldr	r2, [pc, #40]	; (8009838 <disk_write+0x3c>)
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4413      	add	r3, r2
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	68dc      	ldr	r4, [r3, #12]
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	4a07      	ldr	r2, [pc, #28]	; (8009838 <disk_write+0x3c>)
 800981c:	4413      	add	r3, r2
 800981e:	7a18      	ldrb	r0, [r3, #8]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	68b9      	ldr	r1, [r7, #8]
 8009826:	47a0      	blx	r4
 8009828:	4603      	mov	r3, r0
 800982a:	75fb      	strb	r3, [r7, #23]
  return res;
 800982c:	7dfb      	ldrb	r3, [r7, #23]
}
 800982e:	4618      	mov	r0, r3
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	bd90      	pop	{r4, r7, pc}
 8009836:	bf00      	nop
 8009838:	200002cc 	.word	0x200002cc

0800983c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	603a      	str	r2, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
 8009848:	460b      	mov	r3, r1
 800984a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	4a09      	ldr	r2, [pc, #36]	; (8009874 <disk_ioctl+0x38>)
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	79fa      	ldrb	r2, [r7, #7]
 800985a:	4906      	ldr	r1, [pc, #24]	; (8009874 <disk_ioctl+0x38>)
 800985c:	440a      	add	r2, r1
 800985e:	7a10      	ldrb	r0, [r2, #8]
 8009860:	79b9      	ldrb	r1, [r7, #6]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4798      	blx	r3
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
  return res;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	200002cc 	.word	0x200002cc

08009878 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800988c:	e007      	b.n	800989e <mem_cpy+0x26>
		*d++ = *s++;
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	1c53      	adds	r3, r2, #1
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	1c59      	adds	r1, r3, #1
 8009898:	6179      	str	r1, [r7, #20]
 800989a:	7812      	ldrb	r2, [r2, #0]
 800989c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	1e5a      	subs	r2, r3, #1
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1f2      	bne.n	800988e <mem_cpy+0x16>
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bc80      	pop	{r7}
 80098b2:	4770      	bx	lr

080098b4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80098c4:	e005      	b.n	80098d2 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	617a      	str	r2, [r7, #20]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	1e5a      	subs	r2, r3, #1
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1f4      	bne.n	80098c6 <mem_set+0x12>
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr

080098e8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80098e8:	b480      	push	{r7}
 80098ea:	b089      	sub	sp, #36	; 0x24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	61fb      	str	r3, [r7, #28]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009900:	bf00      	nop
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	1e5a      	subs	r2, r3, #1
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00d      	beq.n	8009928 <mem_cmp+0x40>
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	61fa      	str	r2, [r7, #28]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	4619      	mov	r1, r3
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	61ba      	str	r2, [r7, #24]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	1acb      	subs	r3, r1, r3
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d0ec      	beq.n	8009902 <mem_cmp+0x1a>
	return r;
 8009928:	697b      	ldr	r3, [r7, #20]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3724      	adds	r7, #36	; 0x24
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800993e:	e002      	b.n	8009946 <chk_chr+0x12>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	3301      	adds	r3, #1
 8009944:	607b      	str	r3, [r7, #4]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d005      	beq.n	800995a <chk_chr+0x26>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	4293      	cmp	r3, r2
 8009958:	d1f2      	bne.n	8009940 <chk_chr+0xc>
	return *str;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	781b      	ldrb	r3, [r3, #0]
}
 800995e:	4618      	mov	r0, r3
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	bc80      	pop	{r7}
 8009966:	4770      	bx	lr

08009968 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009972:	2300      	movs	r3, #0
 8009974:	60bb      	str	r3, [r7, #8]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	60fb      	str	r3, [r7, #12]
 800997a:	e035      	b.n	80099e8 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 800997c:	492e      	ldr	r1, [pc, #184]	; (8009a38 <chk_lock+0xd0>)
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	4613      	mov	r3, r2
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	440b      	add	r3, r1
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d026      	beq.n	80099de <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009990:	4929      	ldr	r1, [pc, #164]	; (8009a38 <chk_lock+0xd0>)
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4613      	mov	r3, r2
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	4413      	add	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	440b      	add	r3, r1
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d11c      	bne.n	80099e2 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 80099a8:	4923      	ldr	r1, [pc, #140]	; (8009a38 <chk_lock+0xd0>)
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	4613      	mov	r3, r2
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	4413      	add	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	3304      	adds	r3, #4
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80099be:	429a      	cmp	r2, r3
 80099c0:	d10f      	bne.n	80099e2 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80099c2:	491d      	ldr	r1, [pc, #116]	; (8009a38 <chk_lock+0xd0>)
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4613      	mov	r3, r2
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	3308      	adds	r3, #8
 80099d2:	881a      	ldrh	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80099d8:	429a      	cmp	r2, r3
 80099da:	d102      	bne.n	80099e2 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80099dc:	e007      	b.n	80099ee <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 80099de:	2301      	movs	r3, #1
 80099e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d9c6      	bls.n	800997c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d109      	bne.n	8009a08 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <chk_lock+0x98>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d101      	bne.n	8009a04 <chk_lock+0x9c>
 8009a00:	2300      	movs	r3, #0
 8009a02:	e013      	b.n	8009a2c <chk_lock+0xc4>
 8009a04:	2312      	movs	r3, #18
 8009a06:	e011      	b.n	8009a2c <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10b      	bne.n	8009a26 <chk_lock+0xbe>
 8009a0e:	490a      	ldr	r1, [pc, #40]	; (8009a38 <chk_lock+0xd0>)
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4613      	mov	r3, r2
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	330a      	adds	r3, #10
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a24:	d101      	bne.n	8009a2a <chk_lock+0xc2>
 8009a26:	2310      	movs	r3, #16
 8009a28:	e000      	b.n	8009a2c <chk_lock+0xc4>
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	200000b4 	.word	0x200000b4

08009a3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a42:	2300      	movs	r3, #0
 8009a44:	607b      	str	r3, [r7, #4]
 8009a46:	e002      	b.n	8009a4e <enq_lock+0x12>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d809      	bhi.n	8009a68 <enq_lock+0x2c>
 8009a54:	490a      	ldr	r1, [pc, #40]	; (8009a80 <enq_lock+0x44>)
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1ef      	bne.n	8009a48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	bf14      	ite	ne
 8009a6e:	2301      	movne	r3, #1
 8009a70:	2300      	moveq	r3, #0
 8009a72:	b2db      	uxtb	r3, r3
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bc80      	pop	{r7}
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	200000b4 	.word	0x200000b4

08009a84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	e028      	b.n	8009ae6 <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 8009a94:	4952      	ldr	r1, [pc, #328]	; (8009be0 <inc_lock+0x15c>)
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d119      	bne.n	8009ae0 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 8009aac:	494c      	ldr	r1, [pc, #304]	; (8009be0 <inc_lock+0x15c>)
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	3304      	adds	r3, #4
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d10c      	bne.n	8009ae0 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 8009ac6:	4946      	ldr	r1, [pc, #280]	; (8009be0 <inc_lock+0x15c>)
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4613      	mov	r3, r2
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	440b      	add	r3, r1
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	881a      	ldrh	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d006      	beq.n	8009aee <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d9d3      	bls.n	8009a94 <inc_lock+0x10>
 8009aec:	e000      	b.n	8009af0 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8009aee:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d142      	bne.n	8009b7c <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	e002      	b.n	8009b02 <inc_lock+0x7e>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3301      	adds	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d809      	bhi.n	8009b1c <inc_lock+0x98>
 8009b08:	4935      	ldr	r1, [pc, #212]	; (8009be0 <inc_lock+0x15c>)
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1ef      	bne.n	8009afc <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d101      	bne.n	8009b26 <inc_lock+0xa2>
 8009b22:	2300      	movs	r3, #0
 8009b24:	e057      	b.n	8009bd6 <inc_lock+0x152>
		Files[i].fs = dp->fs;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6819      	ldr	r1, [r3, #0]
 8009b2a:	482d      	ldr	r0, [pc, #180]	; (8009be0 <inc_lock+0x15c>)
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	4413      	add	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4403      	add	r3, r0
 8009b38:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6899      	ldr	r1, [r3, #8]
 8009b3e:	4828      	ldr	r0, [pc, #160]	; (8009be0 <inc_lock+0x15c>)
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4613      	mov	r3, r2
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4403      	add	r3, r0
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	88d8      	ldrh	r0, [r3, #6]
 8009b54:	4922      	ldr	r1, [pc, #136]	; (8009be0 <inc_lock+0x15c>)
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	440b      	add	r3, r1
 8009b62:	3308      	adds	r3, #8
 8009b64:	4602      	mov	r2, r0
 8009b66:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b68:	491d      	ldr	r1, [pc, #116]	; (8009be0 <inc_lock+0x15c>)
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	440b      	add	r3, r1
 8009b76:	330a      	adds	r3, #10
 8009b78:	2200      	movs	r2, #0
 8009b7a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00c      	beq.n	8009b9c <inc_lock+0x118>
 8009b82:	4917      	ldr	r1, [pc, #92]	; (8009be0 <inc_lock+0x15c>)
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4613      	mov	r3, r2
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	330a      	adds	r3, #10
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <inc_lock+0x118>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	e01c      	b.n	8009bd6 <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10b      	bne.n	8009bba <inc_lock+0x136>
 8009ba2:	490f      	ldr	r1, [pc, #60]	; (8009be0 <inc_lock+0x15c>)
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	4413      	add	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	440b      	add	r3, r1
 8009bb0:	330a      	adds	r3, #10
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	b299      	uxth	r1, r3
 8009bb8:	e001      	b.n	8009bbe <inc_lock+0x13a>
 8009bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bbe:	4808      	ldr	r0, [pc, #32]	; (8009be0 <inc_lock+0x15c>)
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4403      	add	r3, r0
 8009bcc:	330a      	adds	r3, #10
 8009bce:	460a      	mov	r2, r1
 8009bd0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3301      	adds	r3, #1
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bc80      	pop	{r7}
 8009bde:	4770      	bx	lr
 8009be0:	200000b4 	.word	0x200000b4

08009be4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	607b      	str	r3, [r7, #4]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d82e      	bhi.n	8009c56 <dec_lock+0x72>
		n = Files[i].ctr;
 8009bf8:	491b      	ldr	r1, [pc, #108]	; (8009c68 <dec_lock+0x84>)
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	440b      	add	r3, r1
 8009c06:	330a      	adds	r3, #10
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c0c:	89fb      	ldrh	r3, [r7, #14]
 8009c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c12:	d101      	bne.n	8009c18 <dec_lock+0x34>
 8009c14:	2300      	movs	r3, #0
 8009c16:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009c18:	89fb      	ldrh	r3, [r7, #14]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <dec_lock+0x40>
 8009c1e:	89fb      	ldrh	r3, [r7, #14]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c24:	4910      	ldr	r1, [pc, #64]	; (8009c68 <dec_lock+0x84>)
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	330a      	adds	r3, #10
 8009c34:	89fa      	ldrh	r2, [r7, #14]
 8009c36:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d108      	bne.n	8009c50 <dec_lock+0x6c>
 8009c3e:	490a      	ldr	r1, [pc, #40]	; (8009c68 <dec_lock+0x84>)
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	4613      	mov	r3, r2
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	737b      	strb	r3, [r7, #13]
 8009c54:	e001      	b.n	8009c5a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c56:	2302      	movs	r3, #2
 8009c58:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c5a:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bc80      	pop	{r7}
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	200000b4 	.word	0x200000b4

08009c6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	e016      	b.n	8009ca8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c7a:	4910      	ldr	r1, [pc, #64]	; (8009cbc <clear_lock+0x50>)
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d108      	bne.n	8009ca2 <clear_lock+0x36>
 8009c90:	490a      	ldr	r1, [pc, #40]	; (8009cbc <clear_lock+0x50>)
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	4613      	mov	r3, r2
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	4413      	add	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d9e5      	bls.n	8009c7a <clear_lock+0xe>
	}
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bc80      	pop	{r7}
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	200000b4 	.word	0x200000b4

08009cc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d038      	beq.n	8009d48 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8009cdc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	f7ff fd87 	bl	80097fc <disk_write>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <sync_window+0x3a>
			res = FR_DISK_ERR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	73fb      	strb	r3, [r7, #15]
 8009cf8:	e026      	b.n	8009d48 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	1ad2      	subs	r2, r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d218      	bcs.n	8009d48 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8009d1c:	613b      	str	r3, [r7, #16]
 8009d1e:	e010      	b.n	8009d42 <sync_window+0x82>
					wsect += fs->fsize;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	4413      	add	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	2301      	movs	r3, #1
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	f7ff fd60 	bl	80097fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	613b      	str	r3, [r7, #16]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d8eb      	bhi.n	8009d20 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d01b      	beq.n	8009da4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7ff ffa7 	bl	8009cc0 <sync_window>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d113      	bne.n	8009da4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009d82:	6879      	ldr	r1, [r7, #4]
 8009d84:	2301      	movs	r3, #1
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	f7ff fd18 	bl	80097bc <disk_read>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d004      	beq.n	8009d9c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d92:	f04f 33ff 	mov.w	r3, #4294967295
 8009d96:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff ff82 	bl	8009cc0 <sync_window>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f040 809c 	bne.w	8009f00 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	f040 8089 	bne.w	8009ee6 <sync_fs+0x138>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	f040 8083 	bne.w	8009ee6 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009de8:	461a      	mov	r2, r3
 8009dea:	2100      	movs	r1, #0
 8009dec:	f7ff fd62 	bl	80098b4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2255      	movs	r2, #85	; 0x55
 8009df4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	22aa      	movs	r2, #170	; 0xaa
 8009dfc:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2252      	movs	r2, #82	; 0x52
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2252      	movs	r2, #82	; 0x52
 8009e0a:	705a      	strb	r2, [r3, #1]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2261      	movs	r2, #97	; 0x61
 8009e10:	709a      	strb	r2, [r3, #2]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2241      	movs	r2, #65	; 0x41
 8009e16:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2272      	movs	r2, #114	; 0x72
 8009e1c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2272      	movs	r2, #114	; 0x72
 8009e24:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2241      	movs	r2, #65	; 0x41
 8009e2c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2261      	movs	r2, #97	; 0x61
 8009e34:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	0a1b      	lsrs	r3, r3, #8
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009e60:	0c1b      	lsrs	r3, r3, #16
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009e70:	0e1b      	lsrs	r3, r3, #24
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009eb2:	0e1b      	lsrs	r3, r3, #24
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009ed0:	6879      	ldr	r1, [r7, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8009ed8:	2301      	movs	r3, #1
 8009eda:	f7ff fc8f 	bl	80097fc <disk_write>
			fs->fsi_flag = 0;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8009eec:	2200      	movs	r2, #0
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff fca3 	bl	800983c <disk_ioctl>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <sync_fs+0x152>
			res = FR_DISK_ERR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b083      	sub	sp, #12
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	3b02      	subs	r3, #2
 8009f18:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009f20:	3b02      	subs	r3, #2
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d301      	bcc.n	8009f2c <clust2sect+0x22>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	e00a      	b.n	8009f42 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009f32:	461a      	mov	r2, r3
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	fb03 f202 	mul.w	r2, r3, r2
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8009f40:	4413      	add	r3, r2
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc80      	pop	{r7}
 8009f4a:	4770      	bx	lr

08009f4c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d905      	bls.n	8009f68 <get_fat+0x1c>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d302      	bcc.n	8009f6e <get_fat+0x22>
		val = 1;	/* Internal error */
 8009f68:	2301      	movs	r3, #1
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	e0d7      	b.n	800a11e <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f72:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	f000 808f 	beq.w	800a09e <get_fat+0x152>
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	f300 80c2 	bgt.w	800a10a <get_fat+0x1be>
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d002      	beq.n	8009f90 <get_fat+0x44>
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d059      	beq.n	800a042 <get_fat+0xf6>
 8009f8e:	e0bc      	b.n	800a10a <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	085b      	lsrs	r3, r3, #1
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009faa:	4619      	mov	r1, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fb2:	4413      	add	r3, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff fecb 	bl	8009d52 <move_window>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f040 80a6 	bne.w	800a110 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	60fa      	str	r2, [r7, #12]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fd4:	fb02 f201 	mul.w	r2, r2, r1
 8009fd8:	1a9b      	subs	r3, r3, r2
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	5cd3      	ldrb	r3, [r2, r3]
 8009fde:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009fec:	4619      	mov	r1, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff feaa 	bl	8009d52 <move_window>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	f040 8087 	bne.w	800a114 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a00c:	461a      	mov	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	fbb3 f1f2 	udiv	r1, r3, r2
 800a014:	fb02 f201 	mul.w	r2, r2, r1
 800a018:	1a9b      	subs	r3, r3, r2
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	5cd3      	ldrb	r3, [r2, r3]
 800a01e:	021b      	lsls	r3, r3, #8
 800a020:	461a      	mov	r2, r3
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	4313      	orrs	r3, r2
 800a026:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <get_fat+0xec>
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	091b      	lsrs	r3, r3, #4
 800a036:	e002      	b.n	800a03e <get_fat+0xf2>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03e:	617b      	str	r3, [r7, #20]
			break;
 800a040:	e06d      	b.n	800a11e <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	4619      	mov	r1, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	fbb3 f3f1 	udiv	r3, r3, r1
 800a05a:	4413      	add	r3, r2
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fe77 	bl	8009d52 <move_window>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d156      	bne.n	800a118 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a074:	fbb3 f1f2 	udiv	r1, r3, r2
 800a078:	fb02 f201 	mul.w	r2, r2, r1
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	4413      	add	r3, r2
 800a082:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	3301      	adds	r3, #1
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	021b      	lsls	r3, r3, #8
 800a08c:	b21a      	sxth	r2, r3
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b21b      	sxth	r3, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	b21b      	sxth	r3, r3
 800a098:	b29b      	uxth	r3, r3
 800a09a:	617b      	str	r3, [r7, #20]
			break;
 800a09c:	e03f      	b.n	800a11e <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a0aa:	089b      	lsrs	r3, r3, #2
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0b6:	4413      	add	r3, r2
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fe49 	bl	8009d52 <move_window>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d12a      	bne.n	800a11c <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a0d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0d4:	fb02 f201 	mul.w	r2, r2, r1
 800a0d8:	1a9b      	subs	r3, r3, r2
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	4413      	add	r3, r2
 800a0de:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	3303      	adds	r3, #3
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	061a      	lsls	r2, r3, #24
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	3302      	adds	r3, #2
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	041b      	lsls	r3, r3, #16
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	3201      	adds	r2, #1
 800a0f6:	7812      	ldrb	r2, [r2, #0]
 800a0f8:	0212      	lsls	r2, r2, #8
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	7812      	ldrb	r2, [r2, #0]
 800a100:	4313      	orrs	r3, r2
 800a102:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a106:	617b      	str	r3, [r7, #20]
			break;
 800a108:	e009      	b.n	800a11e <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 800a10a:	2301      	movs	r3, #1
 800a10c:	617b      	str	r3, [r7, #20]
 800a10e:	e006      	b.n	800a11e <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a110:	bf00      	nop
 800a112:	e004      	b.n	800a11e <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a114:	bf00      	nop
 800a116:	e002      	b.n	800a11e <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a118:	bf00      	nop
 800a11a:	e000      	b.n	800a11e <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a11c:	bf00      	nop
		}
	}

	return val;
 800a11e:	697b      	ldr	r3, [r7, #20]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b088      	sub	sp, #32
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d905      	bls.n	800a146 <put_fat+0x1e>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	429a      	cmp	r2, r3
 800a144:	d302      	bcc.n	800a14c <put_fat+0x24>
		res = FR_INT_ERR;
 800a146:	2302      	movs	r3, #2
 800a148:	77fb      	strb	r3, [r7, #31]
 800a14a:	e128      	b.n	800a39e <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a152:	2b03      	cmp	r3, #3
 800a154:	f000 80c3 	beq.w	800a2de <put_fat+0x1b6>
 800a158:	2b03      	cmp	r3, #3
 800a15a:	f300 8116 	bgt.w	800a38a <put_fat+0x262>
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d003      	beq.n	800a16a <put_fat+0x42>
 800a162:	2b02      	cmp	r3, #2
 800a164:	f000 8087 	beq.w	800a276 <put_fat+0x14e>
 800a168:	e10f      	b.n	800a38a <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	085b      	lsrs	r3, r3, #1
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4413      	add	r3, r2
 800a176:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a184:	4619      	mov	r1, r3
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	fbb3 f3f1 	udiv	r3, r3, r1
 800a18c:	4413      	add	r3, r2
 800a18e:	4619      	mov	r1, r3
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f7ff fdde 	bl	8009d52 <move_window>
 800a196:	4603      	mov	r3, r0
 800a198:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a19a:	7ffb      	ldrb	r3, [r7, #31]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f040 80f7 	bne.w	800a390 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	617a      	str	r2, [r7, #20]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a1ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1b2:	fb02 f201 	mul.w	r2, r2, r1
 800a1b6:	1a9b      	subs	r3, r3, r2
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00d      	beq.n	800a1e4 <put_fat+0xbc>
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	b25b      	sxtb	r3, r3
 800a1ce:	f003 030f 	and.w	r3, r3, #15
 800a1d2:	b25a      	sxtb	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	b25b      	sxtb	r3, r3
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	b25b      	sxtb	r3, r3
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	e001      	b.n	800a1e8 <put_fat+0xc0>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a200:	4619      	mov	r1, r3
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	fbb3 f3f1 	udiv	r3, r3, r1
 800a208:	4413      	add	r3, r2
 800a20a:	4619      	mov	r1, r3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7ff fda0 	bl	8009d52 <move_window>
 800a212:	4603      	mov	r3, r0
 800a214:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a216:	7ffb      	ldrb	r3, [r7, #31]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f040 80bb 	bne.w	800a394 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a224:	461a      	mov	r2, r3
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	fbb3 f1f2 	udiv	r1, r3, r2
 800a22c:	fb02 f201 	mul.w	r2, r2, r1
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	4413      	add	r3, r2
 800a236:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <put_fat+0x122>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	091b      	lsrs	r3, r3, #4
 800a246:	b2db      	uxtb	r3, r3
 800a248:	e00e      	b.n	800a268 <put_fat+0x140>
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	b25b      	sxtb	r3, r3
 800a250:	f023 030f 	bic.w	r3, r3, #15
 800a254:	b25a      	sxtb	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	0a1b      	lsrs	r3, r3, #8
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	f003 030f 	and.w	r3, r3, #15
 800a260:	b25b      	sxtb	r3, r3
 800a262:	4313      	orrs	r3, r2
 800a264:	b25b      	sxtb	r3, r3
 800a266:	b2db      	uxtb	r3, r3
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800a274:	e093      	b.n	800a39e <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	b29b      	uxth	r3, r3
 800a286:	4619      	mov	r1, r3
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a28e:	4413      	add	r3, r2
 800a290:	4619      	mov	r1, r3
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7ff fd5d 	bl	8009d52 <move_window>
 800a298:	4603      	mov	r3, r0
 800a29a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a29c:	7ffb      	ldrb	r3, [r7, #31]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d17a      	bne.n	800a398 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a2ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2b0:	fb02 f201 	mul.w	r2, r2, r1
 800a2b4:	1a9b      	subs	r3, r3, r2
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	701a      	strb	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	0a1b      	lsrs	r3, r3, #8
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	b2d2      	uxtb	r2, r2
 800a2d2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800a2dc:	e05f      	b.n	800a39e <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a2ea:	089b      	lsrs	r3, r3, #2
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2f6:	4413      	add	r3, r2
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7ff fd29 	bl	8009d52 <move_window>
 800a300:	4603      	mov	r3, r0
 800a302:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a304:	7ffb      	ldrb	r3, [r7, #31]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d148      	bne.n	800a39c <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a314:	fbb3 f1f2 	udiv	r1, r3, r2
 800a318:	fb02 f201 	mul.w	r2, r2, r1
 800a31c:	1a9b      	subs	r3, r3, r2
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	4413      	add	r3, r2
 800a322:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	3303      	adds	r3, #3
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	061a      	lsls	r2, r3, #24
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	3302      	adds	r3, #2
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	041b      	lsls	r3, r3, #16
 800a334:	4313      	orrs	r3, r2
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	3201      	adds	r2, #1
 800a33a:	7812      	ldrb	r2, [r2, #0]
 800a33c:	0212      	lsls	r2, r2, #8
 800a33e:	4313      	orrs	r3, r2
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	7812      	ldrb	r2, [r2, #0]
 800a344:	4313      	orrs	r3, r2
 800a346:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	b2da      	uxtb	r2, r3
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	701a      	strb	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	0a1b      	lsrs	r3, r3, #8
 800a35e:	b29a      	uxth	r2, r3
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	3301      	adds	r3, #1
 800a364:	b2d2      	uxtb	r2, r2
 800a366:	701a      	strb	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	0c1a      	lsrs	r2, r3, #16
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	3302      	adds	r3, #2
 800a370:	b2d2      	uxtb	r2, r2
 800a372:	701a      	strb	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	0e1a      	lsrs	r2, r3, #24
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	3303      	adds	r3, #3
 800a37c:	b2d2      	uxtb	r2, r2
 800a37e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800a388:	e009      	b.n	800a39e <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800a38a:	2302      	movs	r3, #2
 800a38c:	77fb      	strb	r3, [r7, #31]
 800a38e:	e006      	b.n	800a39e <put_fat+0x276>
			if (res != FR_OK) break;
 800a390:	bf00      	nop
 800a392:	e004      	b.n	800a39e <put_fat+0x276>
			if (res != FR_OK) break;
 800a394:	bf00      	nop
 800a396:	e002      	b.n	800a39e <put_fat+0x276>
			if (res != FR_OK) break;
 800a398:	bf00      	nop
 800a39a:	e000      	b.n	800a39e <put_fat+0x276>
			if (res != FR_OK) break;
 800a39c:	bf00      	nop
		}
	}

	return res;
 800a39e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3720      	adds	r7, #32
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d905      	bls.n	800a3c4 <remove_chain+0x1c>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d302      	bcc.n	800a3ca <remove_chain+0x22>
		res = FR_INT_ERR;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	73fb      	strb	r3, [r7, #15]
 800a3c8:	e043      	b.n	800a452 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a3ce:	e036      	b.n	800a43e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff fdba 	bl	8009f4c <get_fat>
 800a3d8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d035      	beq.n	800a44c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d102      	bne.n	800a3ec <remove_chain+0x44>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	e032      	b.n	800a452 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f2:	d102      	bne.n	800a3fa <remove_chain+0x52>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	73fb      	strb	r3, [r7, #15]
 800a3f8:	e02b      	b.n	800a452 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff fe92 	bl	800a128 <put_fat>
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d120      	bne.n	800a450 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a418:	d00f      	beq.n	800a43a <remove_chain+0x92>
				fs->free_clust++;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800a42e:	f043 0301 	orr.w	r3, r3, #1
 800a432:	b2da      	uxtb	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d3c2      	bcc.n	800a3d0 <remove_chain+0x28>
 800a44a:	e002      	b.n	800a452 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a44c:	bf00      	nop
 800a44e:	e000      	b.n	800a452 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a450:	bf00      	nop
		}
	}

	return res;
 800a452:	7bfb      	ldrb	r3, [r7, #15]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10f      	bne.n	800a48c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a472:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <create_chain+0x2a>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	d31c      	bcc.n	800a4c0 <create_chain+0x64>
 800a486:	2301      	movs	r3, #1
 800a488:	613b      	str	r3, [r7, #16]
 800a48a:	e019      	b.n	800a4c0 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff fd5c 	bl	8009f4c <get_fat>
 800a494:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d801      	bhi.n	800a4a0 <create_chain+0x44>
 800a49c:	2301      	movs	r3, #1
 800a49e:	e076      	b.n	800a58e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a6:	d101      	bne.n	800a4ac <create_chain+0x50>
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	e070      	b.n	800a58e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d201      	bcs.n	800a4bc <create_chain+0x60>
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	e068      	b.n	800a58e <create_chain+0x132>
		scl = clst;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d307      	bcc.n	800a4e6 <create_chain+0x8a>
			ncl = 2;
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d901      	bls.n	800a4e6 <create_chain+0x8a>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e053      	b.n	800a58e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a4e6:	6979      	ldr	r1, [r7, #20]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff fd2f 	bl	8009f4c <get_fat>
 800a4ee:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00e      	beq.n	800a514 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fc:	d002      	beq.n	800a504 <create_chain+0xa8>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <create_chain+0xac>
			return cs;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	e042      	b.n	800a58e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d1d9      	bne.n	800a4c4 <create_chain+0x68>
 800a510:	2300      	movs	r3, #0
 800a512:	e03c      	b.n	800a58e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a514:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a516:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a51a:	6979      	ldr	r1, [r7, #20]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff fe03 	bl	800a128 <put_fat>
 800a522:	4603      	mov	r3, r0
 800a524:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d109      	bne.n	800a540 <create_chain+0xe4>
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d006      	beq.n	800a540 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff fdf6 	bl	800a128 <put_fat>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d11a      	bne.n	800a57c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d018      	beq.n	800a58c <create_chain+0x130>
			fs->free_clust--;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a560:	1e5a      	subs	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	b2da      	uxtb	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800a57a:	e007      	b.n	800a58c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d102      	bne.n	800a588 <create_chain+0x12c>
 800a582:	f04f 33ff 	mov.w	r3, #4294967295
 800a586:	e000      	b.n	800a58a <create_chain+0x12e>
 800a588:	2301      	movs	r3, #1
 800a58a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a58c:	697b      	ldr	r3, [r7, #20]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a596:	b480      	push	{r7}
 800a598:	b087      	sub	sp, #28
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	6812      	ldr	r2, [r2, #0]
 800a5bc:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800a5c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	1d1a      	adds	r2, r3, #4
 800a5ca:	613a      	str	r2, [r7, #16]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <clmt_clust+0x44>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e010      	b.n	800a5fc <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d307      	bcc.n	800a5f2 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5f0:	e7e9      	b.n	800a5c6 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 800a5f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	4413      	add	r3, r2
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	371c      	adds	r7, #28
 800a600:	46bd      	mov	sp, r7
 800a602:	bc80      	pop	{r7}
 800a604:	4770      	bx	lr

0800a606 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b086      	sub	sp, #24
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d006      	beq.n	800a632 <dir_sdi+0x2c>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d301      	bcc.n	800a636 <dir_sdi+0x30>
		return FR_INT_ERR;
 800a632:	2302      	movs	r3, #2
 800a634:	e082      	b.n	800a73c <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <dir_sdi+0x4c>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a644:	2b03      	cmp	r3, #3
 800a646:	d104      	bne.n	800a652 <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800a650:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10f      	bne.n	800a678 <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800a660:	461a      	mov	r2, r3
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	4293      	cmp	r3, r2
 800a666:	d301      	bcc.n	800a66c <dir_sdi+0x66>
			return FR_INT_ERR;
 800a668:	2302      	movs	r3, #2
 800a66a:	e067      	b.n	800a73c <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	e036      	b.n	800a6e6 <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a680:	095b      	lsrs	r3, r3, #5
 800a682:	b29b      	uxth	r3, r3
 800a684:	461a      	mov	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a68e:	fb03 f302 	mul.w	r3, r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a694:	e01c      	b.n	800a6d0 <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6979      	ldr	r1, [r7, #20]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff fc55 	bl	8009f4c <get_fat>
 800a6a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6aa:	d101      	bne.n	800a6b0 <dir_sdi+0xaa>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e045      	b.n	800a73c <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d906      	bls.n	800a6c4 <dir_sdi+0xbe>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d301      	bcc.n	800a6c8 <dir_sdi+0xc2>
				return FR_INT_ERR;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e039      	b.n	800a73c <dir_sdi+0x136>
			idx -= ic;
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d2de      	bcs.n	800a696 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6979      	ldr	r1, [r7, #20]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff fc13 	bl	8009f0a <clust2sect>
 800a6e4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <dir_sdi+0xf0>
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e022      	b.n	800a73c <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a6fe:	095b      	lsrs	r3, r3, #5
 800a700:	b29b      	uxth	r3, r3
 800a702:	461a      	mov	r2, r3
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	fbb3 f2f2 	udiv	r2, r3, r2
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	441a      	add	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4618      	mov	r0, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a720:	095b      	lsrs	r3, r3, #5
 800a722:	b29b      	uxth	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	fbb3 f1f2 	udiv	r1, r3, r2
 800a72c:	fb02 f201 	mul.w	r2, r2, r1
 800a730:	1a9b      	subs	r3, r3, r2
 800a732:	015b      	lsls	r3, r3, #5
 800a734:	18c2      	adds	r2, r0, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a744:	b590      	push	{r4, r7, lr}
 800a746:	b087      	sub	sp, #28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	88db      	ldrh	r3, [r3, #6]
 800a752:	3301      	adds	r3, #1
 800a754:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <dir_next+0x22>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <dir_next+0x26>
		return FR_NO_FILE;
 800a766:	2304      	movs	r3, #4
 800a768:	e0e2      	b.n	800a930 <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a772:	095b      	lsrs	r3, r3, #5
 800a774:	b29b      	uxth	r3, r3
 800a776:	461a      	mov	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a77e:	fb02 f201 	mul.w	r2, r2, r1
 800a782:	1a9b      	subs	r3, r3, r2
 800a784:	2b00      	cmp	r3, #0
 800a786:	f040 80ba 	bne.w	800a8fe <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	1c5a      	adds	r2, r3, #1
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	f0c0 80a8 	bcc.w	800a8fe <dir_next+0x1ba>
				return FR_NO_FILE;
 800a7ae:	2304      	movs	r3, #4
 800a7b0:	e0be      	b.n	800a930 <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a7ba:	095b      	lsrs	r3, r3, #5
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	6812      	ldr	r2, [r2, #0]
 800a7ca:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800a7ce:	3a01      	subs	r2, #1
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f040 8093 	bne.w	800a8fe <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7ff fbb2 	bl	8009f4c <get_fat>
 800a7e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d801      	bhi.n	800a7f4 <dir_next+0xb0>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e09d      	b.n	800a930 <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d101      	bne.n	800a800 <dir_next+0xbc>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e097      	b.n	800a930 <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d36b      	bcc.n	800a8e6 <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <dir_next+0xd4>
 800a814:	2304      	movs	r3, #4
 800a816:	e08b      	b.n	800a930 <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f7ff fe1a 	bl	800a45c <create_chain>
 800a828:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <dir_next+0xf0>
 800a830:	2307      	movs	r3, #7
 800a832:	e07d      	b.n	800a930 <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <dir_next+0xfa>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e078      	b.n	800a930 <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d101      	bne.n	800a84a <dir_next+0x106>
 800a846:	2301      	movs	r3, #1
 800a848:	e072      	b.n	800a930 <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff fa36 	bl	8009cc0 <sync_window>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <dir_next+0x11a>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e068      	b.n	800a930 <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4618      	mov	r0, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a86c:	461a      	mov	r2, r3
 800a86e:	2100      	movs	r1, #0
 800a870:	f7ff f820 	bl	80098b4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681c      	ldr	r4, [r3, #0]
 800a87c:	6979      	ldr	r1, [r7, #20]
 800a87e:	4610      	mov	r0, r2
 800a880:	f7ff fb43 	bl	8009f0a <clust2sect>
 800a884:	4603      	mov	r3, r0
 800a886:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a88a:	2300      	movs	r3, #0
 800a88c:	613b      	str	r3, [r7, #16]
 800a88e:	e018      	b.n	800a8c2 <dir_next+0x17e>
						dp->fs->wflag = 1;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff fa0e 	bl	8009cc0 <sync_window>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <dir_next+0x16a>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e040      	b.n	800a930 <dir_next+0x1ec>
						dp->fs->winsect++;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800a8b6:	3201      	adds	r2, #1
 800a8b8:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	613b      	str	r3, [r7, #16]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d3de      	bcc.n	800a890 <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	1a8a      	subs	r2, r1, r2
 800a8e2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6979      	ldr	r1, [r7, #20]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fb09 	bl	8009f0a <clust2sect>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	b29a      	uxth	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4618      	mov	r0, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a914:	095b      	lsrs	r3, r3, #5
 800a916:	b29b      	uxth	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a920:	fb02 f201 	mul.w	r2, r2, r1
 800a924:	1a9b      	subs	r3, r3, r2
 800a926:	015b      	lsls	r3, r3, #5
 800a928:	18c2      	adds	r2, r0, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	371c      	adds	r7, #28
 800a934:	46bd      	mov	sp, r7
 800a936:	bd90      	pop	{r4, r7, pc}

0800a938 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a942:	2100      	movs	r1, #0
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff fe5e 	bl	800a606 <dir_sdi>
 800a94a:	4603      	mov	r3, r0
 800a94c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a94e:	7bfb      	ldrb	r3, [r7, #15]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d12d      	bne.n	800a9b0 <dir_alloc+0x78>
		n = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f7ff f9f5 	bl	8009d52 <move_window>
 800a968:	4603      	mov	r3, r0
 800a96a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d11d      	bne.n	800a9ae <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2be5      	cmp	r3, #229	; 0xe5
 800a97a:	d004      	beq.n	800a986 <dir_alloc+0x4e>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d107      	bne.n	800a996 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	3301      	adds	r3, #1
 800a98a:	60bb      	str	r3, [r7, #8]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d102      	bne.n	800a99a <dir_alloc+0x62>
 800a994:	e00c      	b.n	800a9b0 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a996:	2300      	movs	r3, #0
 800a998:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a99a:	2101      	movs	r1, #1
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7ff fed1 	bl	800a744 <dir_next>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0d5      	beq.n	800a958 <dir_alloc+0x20>
 800a9ac:	e000      	b.n	800a9b0 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800a9ae:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d101      	bne.n	800a9ba <dir_alloc+0x82>
 800a9b6:	2307      	movs	r3, #7
 800a9b8:	73fb      	strb	r3, [r7, #15]
	return res;
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	331b      	adds	r3, #27
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	b21a      	sxth	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	331a      	adds	r3, #26
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	b21b      	sxth	r3, r3
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	b21b      	sxth	r3, r3
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d10f      	bne.n	800aa12 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	3315      	adds	r3, #21
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	021b      	lsls	r3, r3, #8
 800a9fa:	b21a      	sxth	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	3314      	adds	r3, #20
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	b21b      	sxth	r3, r3
 800aa04:	4313      	orrs	r3, r2
 800aa06:	b21b      	sxth	r3, r3
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	041b      	lsls	r3, r3, #16
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	60fb      	str	r3, [r7, #12]

	return cl;
 800aa12:	68fb      	ldr	r3, [r7, #12]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bc80      	pop	{r7}
 800aa1c:	4770      	bx	lr

0800aa1e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	331a      	adds	r3, #26
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	701a      	strb	r2, [r3, #0]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	0a1b      	lsrs	r3, r3, #8
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	331b      	adds	r3, #27
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	0c1a      	lsrs	r2, r3, #16
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3314      	adds	r3, #20
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	0c1b      	lsrs	r3, r3, #16
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	0a1b      	lsrs	r3, r3, #8
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3315      	adds	r3, #21
 800aa5c:	b2d2      	uxtb	r2, r2
 800aa5e:	701a      	strb	r2, [r3, #0]
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bc80      	pop	{r7}
 800aa68:	4770      	bx	lr
	...

0800aa6c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa7e:	1e5a      	subs	r2, r3, #1
 800aa80:	4613      	mov	r3, r2
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	4413      	add	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	2301      	movs	r3, #1
 800aa92:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800aa94:	4a2b      	ldr	r2, [pc, #172]	; (800ab44 <cmp_lfn+0xd8>)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	4413      	add	r3, r2
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	021b      	lsls	r3, r3, #8
 800aaa6:	b21a      	sxth	r2, r3
 800aaa8:	4926      	ldr	r1, [pc, #152]	; (800ab44 <cmp_lfn+0xd8>)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	440b      	add	r3, r1
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	4619      	mov	r1, r3
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	440b      	add	r3, r1
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	b21b      	sxth	r3, r3
 800aaba:	4313      	orrs	r3, r2
 800aabc:	b21b      	sxth	r3, r3
 800aabe:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800aac0:	89fb      	ldrh	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d019      	beq.n	800aafa <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800aac6:	89bb      	ldrh	r3, [r7, #12]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f002 f8eb 	bl	800cca4 <ff_wtoupper>
 800aace:	4603      	mov	r3, r0
 800aad0:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2bfe      	cmp	r3, #254	; 0xfe
 800aad6:	d80e      	bhi.n	800aaf6 <cmp_lfn+0x8a>
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	617a      	str	r2, [r7, #20]
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	4413      	add	r3, r2
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f002 f8dc 	bl	800cca4 <ff_wtoupper>
 800aaec:	4603      	mov	r3, r0
 800aaee:	461a      	mov	r2, r3
 800aaf0:	89fb      	ldrh	r3, [r7, #14]
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d008      	beq.n	800ab08 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e01f      	b.n	800ab3a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800aafa:	89bb      	ldrh	r3, [r7, #12]
 800aafc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d001      	beq.n	800ab08 <cmp_lfn+0x9c>
 800ab04:	2300      	movs	r3, #0
 800ab06:	e018      	b.n	800ab3a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	613b      	str	r3, [r7, #16]
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2b0c      	cmp	r3, #12
 800ab12:	d9bf      	bls.n	800aa94 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <cmp_lfn+0xcc>
 800ab20:	89fb      	ldrh	r3, [r7, #14]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d008      	beq.n	800ab38 <cmp_lfn+0xcc>
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <cmp_lfn+0xcc>
		return 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	e000      	b.n	800ab3a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800ab38:	2301      	movs	r3, #1
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	0800d82c 	.word	0x0800d82c

0800ab48 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b089      	sub	sp, #36	; 0x24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4611      	mov	r1, r2
 800ab54:	461a      	mov	r2, r3
 800ab56:	460b      	mov	r3, r1
 800ab58:	71fb      	strb	r3, [r7, #7]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	330d      	adds	r3, #13
 800ab62:	79ba      	ldrb	r2, [r7, #6]
 800ab64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	330b      	adds	r3, #11
 800ab6a:	220f      	movs	r2, #15
 800ab6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	330c      	adds	r3, #12
 800ab72:	2200      	movs	r2, #0
 800ab74:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	331a      	adds	r3, #26
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	331b      	adds	r3, #27
 800ab82:	2200      	movs	r2, #0
 800ab84:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	1e5a      	subs	r2, r3, #1
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	82fb      	strh	r3, [r7, #22]
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800ab9e:	8afb      	ldrh	r3, [r7, #22]
 800aba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d007      	beq.n	800abb8 <fit_lfn+0x70>
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	1c5a      	adds	r2, r3, #1
 800abac:	61fa      	str	r2, [r7, #28]
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800abb8:	4a1c      	ldr	r2, [pc, #112]	; (800ac2c <fit_lfn+0xe4>)
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	4413      	add	r3, r2
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	4413      	add	r3, r2
 800abc6:	8afa      	ldrh	r2, [r7, #22]
 800abc8:	b2d2      	uxtb	r2, r2
 800abca:	701a      	strb	r2, [r3, #0]
 800abcc:	8afb      	ldrh	r3, [r7, #22]
 800abce:	0a1b      	lsrs	r3, r3, #8
 800abd0:	b299      	uxth	r1, r3
 800abd2:	4a16      	ldr	r2, [pc, #88]	; (800ac2c <fit_lfn+0xe4>)
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	4413      	add	r3, r2
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	3301      	adds	r3, #1
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	4413      	add	r3, r2
 800abe0:	b2ca      	uxtb	r2, r1
 800abe2:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800abe4:	8afb      	ldrh	r3, [r7, #22]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d102      	bne.n	800abf0 <fit_lfn+0xa8>
 800abea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	3301      	adds	r3, #1
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b0c      	cmp	r3, #12
 800abfa:	d9d0      	bls.n	800ab9e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800abfc:	8afb      	ldrh	r3, [r7, #22]
 800abfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d006      	beq.n	800ac14 <fit_lfn+0xcc>
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d103      	bne.n	800ac1c <fit_lfn+0xd4>
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac1a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	79fa      	ldrb	r2, [r7, #7]
 800ac20:	701a      	strb	r2, [r3, #0]
}
 800ac22:	bf00      	nop
 800ac24:	3724      	adds	r7, #36	; 0x24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bc80      	pop	{r7}
 800ac2a:	4770      	bx	lr
 800ac2c:	0800d82c 	.word	0x0800d82c

0800ac30 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08c      	sub	sp, #48	; 0x30
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ac3e:	220b      	movs	r2, #11
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f7fe fe18 	bl	8009878 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	d92b      	bls.n	800aca6 <gen_numname+0x76>
		sr = seq;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ac52:	e022      	b.n	800ac9a <gen_numname+0x6a>
			wc = *lfn++;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	1c9a      	adds	r2, r3, #2
 800ac58:	607a      	str	r2, [r7, #4]
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ac5e:	2300      	movs	r3, #0
 800ac60:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac62:	e017      	b.n	800ac94 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	005a      	lsls	r2, r3, #1
 800ac68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	4413      	add	r3, r2
 800ac70:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ac72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac74:	085b      	lsrs	r3, r3, #1
 800ac76:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d005      	beq.n	800ac8e <gen_numname+0x5e>
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ac88:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ac8c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	3301      	adds	r3, #1
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	2b0f      	cmp	r3, #15
 800ac98:	d9e4      	bls.n	800ac64 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1d8      	bne.n	800ac54 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800aca6:	2307      	movs	r3, #7
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	b2db      	uxtb	r3, r3
 800acae:	f003 030f 	and.w	r3, r3, #15
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	3330      	adds	r3, #48	; 0x30
 800acb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800acba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acbe:	2b39      	cmp	r3, #57	; 0x39
 800acc0:	d904      	bls.n	800accc <gen_numname+0x9c>
 800acc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acc6:	3307      	adds	r3, #7
 800acc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800accc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acce:	1e5a      	subs	r2, r3, #1
 800acd0:	62ba      	str	r2, [r7, #40]	; 0x28
 800acd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800acd6:	4413      	add	r3, r2
 800acd8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800acdc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	091b      	lsrs	r3, r3, #4
 800ace4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1de      	bne.n	800acaa <gen_numname+0x7a>
	ns[i] = '~';
 800acec:	f107 0214 	add.w	r2, r7, #20
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	4413      	add	r3, r2
 800acf4:	227e      	movs	r2, #126	; 0x7e
 800acf6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800acf8:	2300      	movs	r3, #0
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
 800acfc:	e002      	b.n	800ad04 <gen_numname+0xd4>
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	3301      	adds	r3, #1
 800ad02:	627b      	str	r3, [r7, #36]	; 0x24
 800ad04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d205      	bcs.n	800ad18 <gen_numname+0xe8>
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	4413      	add	r3, r2
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	d1f2      	bne.n	800acfe <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	2b07      	cmp	r3, #7
 800ad1c:	d808      	bhi.n	800ad30 <gen_numname+0x100>
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	62ba      	str	r2, [r7, #40]	; 0x28
 800ad24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ad28:	4413      	add	r3, r2
 800ad2a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ad2e:	e000      	b.n	800ad32 <gen_numname+0x102>
 800ad30:	2120      	movs	r1, #32
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	1c5a      	adds	r2, r3, #1
 800ad36:	627a      	str	r2, [r7, #36]	; 0x24
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	460a      	mov	r2, r1
 800ad3e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	2b07      	cmp	r3, #7
 800ad44:	d9e8      	bls.n	800ad18 <gen_numname+0xe8>
}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	3730      	adds	r7, #48	; 0x30
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ad5c:	230b      	movs	r3, #11
 800ad5e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	0852      	lsrs	r2, r2, #1
 800ad66:	01db      	lsls	r3, r3, #7
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	1c59      	adds	r1, r3, #1
 800ad70:	6079      	str	r1, [r7, #4]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	4413      	add	r3, r2
 800ad76:	73fb      	strb	r3, [r7, #15]
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	60bb      	str	r3, [r7, #8]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1ed      	bne.n	800ad60 <sum_sfn+0x10>
	return sum;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bc80      	pop	{r7}
 800ad8e:	4770      	bx	lr

0800ad90 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad98:	2100      	movs	r1, #0
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff fc33 	bl	800a606 <dir_sdi>
 800ada0:	4603      	mov	r3, r0
 800ada2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <dir_find+0x1e>
 800adaa:	7dfb      	ldrb	r3, [r7, #23]
 800adac:	e0a0      	b.n	800aef0 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800adae:	23ff      	movs	r3, #255	; 0xff
 800adb0:	753b      	strb	r3, [r7, #20]
 800adb2:	7d3b      	ldrb	r3, [r7, #20]
 800adb4:	757b      	strb	r3, [r7, #21]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adbc:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	4619      	mov	r1, r3
 800adc8:	4610      	mov	r0, r2
 800adca:	f7fe ffc2 	bl	8009d52 <move_window>
 800adce:	4603      	mov	r3, r0
 800add0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	2b00      	cmp	r3, #0
 800add6:	f040 8085 	bne.w	800aee4 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ade6:	7dbb      	ldrb	r3, [r7, #22]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <dir_find+0x62>
 800adec:	2304      	movs	r3, #4
 800adee:	75fb      	strb	r3, [r7, #23]
 800adf0:	e07d      	b.n	800aeee <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	330b      	adds	r3, #11
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adfc:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800adfe:	7dbb      	ldrb	r3, [r7, #22]
 800ae00:	2be5      	cmp	r3, #229	; 0xe5
 800ae02:	d007      	beq.n	800ae14 <dir_find+0x84>
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	f003 0308 	and.w	r3, r3, #8
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d009      	beq.n	800ae22 <dir_find+0x92>
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	2b0f      	cmp	r3, #15
 800ae12:	d006      	beq.n	800ae22 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ae14:	23ff      	movs	r3, #255	; 0xff
 800ae16:	757b      	strb	r3, [r7, #21]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae1e:	849a      	strh	r2, [r3, #36]	; 0x24
 800ae20:	e055      	b.n	800aece <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	2b0f      	cmp	r3, #15
 800ae26:	d12f      	bne.n	800ae88 <dir_find+0xf8>
				if (dp->lfn) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d04e      	beq.n	800aece <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae30:	7dbb      	ldrb	r3, [r7, #22]
 800ae32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00c      	beq.n	800ae54 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	7b5b      	ldrb	r3, [r3, #13]
 800ae3e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ae40:	7dbb      	ldrb	r3, [r7, #22]
 800ae42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae46:	75bb      	strb	r3, [r7, #22]
 800ae48:	7dbb      	ldrb	r3, [r7, #22]
 800ae4a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	88da      	ldrh	r2, [r3, #6]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ae54:	7dba      	ldrb	r2, [r7, #22]
 800ae56:	7d7b      	ldrb	r3, [r7, #21]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d112      	bne.n	800ae82 <dir_find+0xf2>
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	330d      	adds	r3, #13
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	7d3a      	ldrb	r2, [r7, #20]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d10c      	bne.n	800ae82 <dir_find+0xf2>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	6939      	ldr	r1, [r7, #16]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff fdfc 	bl	800aa6c <cmp_lfn>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <dir_find+0xf2>
 800ae7a:	7d7b      	ldrb	r3, [r7, #21]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	e000      	b.n	800ae84 <dir_find+0xf4>
 800ae82:	23ff      	movs	r3, #255	; 0xff
 800ae84:	757b      	strb	r3, [r7, #21]
 800ae86:	e022      	b.n	800aece <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ae88:	7d7b      	ldrb	r3, [r7, #21]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d107      	bne.n	800ae9e <dir_find+0x10e>
 800ae8e:	6938      	ldr	r0, [r7, #16]
 800ae90:	f7ff ff5e 	bl	800ad50 <sum_sfn>
 800ae94:	4603      	mov	r3, r0
 800ae96:	461a      	mov	r2, r3
 800ae98:	7d3b      	ldrb	r3, [r7, #20]
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d024      	beq.n	800aee8 <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	330b      	adds	r3, #11
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d109      	bne.n	800aec2 <dir_find+0x132>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	220b      	movs	r2, #11
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6938      	ldr	r0, [r7, #16]
 800aeb8:	f7fe fd16 	bl	80098e8 <mem_cmp>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d014      	beq.n	800aeec <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800aec2:	23ff      	movs	r3, #255	; 0xff
 800aec4:	757b      	strb	r3, [r7, #21]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aecc:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800aece:	2100      	movs	r1, #0
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff fc37 	bl	800a744 <dir_next>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f43f af6e 	beq.w	800adbe <dir_find+0x2e>
 800aee2:	e004      	b.n	800aeee <dir_find+0x15e>
		if (res != FR_OK) break;
 800aee4:	bf00      	nop
 800aee6:	e002      	b.n	800aeee <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800aee8:	bf00      	nop
 800aeea:	e000      	b.n	800aeee <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800aeec:	bf00      	nop

	return res;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3718      	adds	r7, #24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08c      	sub	sp, #48	; 0x30
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	623b      	str	r3, [r7, #32]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800af0c:	f107 030c 	add.w	r3, r7, #12
 800af10:	220c      	movs	r2, #12
 800af12:	6a39      	ldr	r1, [r7, #32]
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe fcaf 	bl	8009878 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d035      	beq.n	800af90 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	330b      	adds	r3, #11
 800af28:	2200      	movs	r2, #0
 800af2a:	701a      	strb	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 800af32:	2301      	movs	r3, #1
 800af34:	62bb      	str	r3, [r7, #40]	; 0x28
 800af36:	e013      	b.n	800af60 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800af38:	f107 010c 	add.w	r1, r7, #12
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	69fa      	ldr	r2, [r7, #28]
 800af40:	6a38      	ldr	r0, [r7, #32]
 800af42:	f7ff fe75 	bl	800ac30 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff ff22 	bl	800ad90 <dir_find>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800af52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	3301      	adds	r3, #1
 800af5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af62:	2b63      	cmp	r3, #99	; 0x63
 800af64:	d9e8      	bls.n	800af38 <dir_register+0x40>
 800af66:	e000      	b.n	800af6a <dir_register+0x72>
			if (res != FR_OK) break;
 800af68:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6c:	2b64      	cmp	r3, #100	; 0x64
 800af6e:	d101      	bne.n	800af74 <dir_register+0x7c>
 800af70:	2307      	movs	r3, #7
 800af72:	e0b5      	b.n	800b0e0 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800af74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af78:	2b04      	cmp	r3, #4
 800af7a:	d002      	beq.n	800af82 <dir_register+0x8a>
 800af7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af80:	e0ae      	b.n	800b0e0 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	330b      	adds	r3, #11
 800af86:	7dfa      	ldrb	r2, [r7, #23]
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	69fa      	ldr	r2, [r7, #28]
 800af8e:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800af90:	7dfb      	ldrb	r3, [r7, #23]
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b00      	cmp	r3, #0
 800af98:	d014      	beq.n	800afc4 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 800af9a:	2300      	movs	r3, #0
 800af9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800af9e:	e002      	b.n	800afa6 <dir_register+0xae>
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	3301      	adds	r3, #1
 800afa4:	62bb      	str	r3, [r7, #40]	; 0x28
 800afa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa8:	005b      	lsls	r3, r3, #1
 800afaa:	69fa      	ldr	r2, [r7, #28]
 800afac:	4413      	add	r3, r2
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1f5      	bne.n	800afa0 <dir_register+0xa8>
		nent = (n + 25) / 13;
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	3319      	adds	r3, #25
 800afb8:	4a4b      	ldr	r2, [pc, #300]	; (800b0e8 <dir_register+0x1f0>)
 800afba:	fba2 2303 	umull	r2, r3, r2, r3
 800afbe:	089b      	lsrs	r3, r3, #2
 800afc0:	627b      	str	r3, [r7, #36]	; 0x24
 800afc2:	e001      	b.n	800afc8 <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800afc4:	2301      	movs	r3, #1
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800afc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff fcb4 	bl	800a938 <dir_alloc>
 800afd0:	4603      	mov	r3, r0
 800afd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800afd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d14c      	bne.n	800b078 <dir_register+0x180>
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	3b01      	subs	r3, #1
 800afe2:	627b      	str	r3, [r7, #36]	; 0x24
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d046      	beq.n	800b078 <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	88db      	ldrh	r3, [r3, #6]
 800afee:	461a      	mov	r2, r3
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7ff fb05 	bl	800a606 <dir_sdi>
 800affc:	4603      	mov	r3, r0
 800affe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b006:	2b00      	cmp	r3, #0
 800b008:	d136      	bne.n	800b078 <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	699b      	ldr	r3, [r3, #24]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff fe9e 	bl	800ad50 <sum_sfn>
 800b014:	4603      	mov	r3, r0
 800b016:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f7fe fe95 	bl	8009d52 <move_window>
 800b028:	4603      	mov	r3, r0
 800b02a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b02e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b032:	2b00      	cmp	r3, #0
 800b034:	d11f      	bne.n	800b076 <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a18      	ldr	r0, [r3, #32]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6959      	ldr	r1, [r3, #20]
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	b2da      	uxtb	r2, r3
 800b042:	7efb      	ldrb	r3, [r7, #27]
 800b044:	f7ff fd80 	bl	800ab48 <fit_lfn>
				dp->fs->wflag = 1;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 800b052:	2100      	movs	r1, #0
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff fb75 	bl	800a744 <dir_next>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b064:	2b00      	cmp	r3, #0
 800b066:	d107      	bne.n	800b078 <dir_register+0x180>
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	3b01      	subs	r3, #1
 800b06c:	627b      	str	r3, [r7, #36]	; 0x24
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1d1      	bne.n	800b018 <dir_register+0x120>
 800b074:	e000      	b.n	800b078 <dir_register+0x180>
				if (res != FR_OK) break;
 800b076:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800b078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d12d      	bne.n	800b0dc <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	4619      	mov	r1, r3
 800b08a:	4610      	mov	r0, r2
 800b08c:	f7fe fe61 	bl	8009d52 <move_window>
 800b090:	4603      	mov	r3, r0
 800b092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d11e      	bne.n	800b0dc <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	2220      	movs	r2, #32
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fc04 	bl	80098b4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6958      	ldr	r0, [r3, #20]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	220b      	movs	r2, #11
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	f7fe fbde 	bl	8009878 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	330b      	adds	r3, #11
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	f002 0218 	and.w	r2, r2, #24
 800b0ce:	b2d2      	uxtb	r2, r2
 800b0d0:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800b0dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3730      	adds	r7, #48	; 0x30
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	4ec4ec4f 	.word	0x4ec4ec4f

0800b0ec <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08a      	sub	sp, #40	; 0x28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	e002      	b.n	800b104 <create_name+0x18>
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	3301      	adds	r3, #1
 800b102:	613b      	str	r3, [r7, #16]
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b2f      	cmp	r3, #47	; 0x2f
 800b10a:	d0f8      	beq.n	800b0fe <create_name+0x12>
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b5c      	cmp	r3, #92	; 0x5c
 800b112:	d0f4      	beq.n	800b0fe <create_name+0x12>
	lfn = dp->lfn;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a1b      	ldr	r3, [r3, #32]
 800b118:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	617b      	str	r3, [r7, #20]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	61ba      	str	r2, [r7, #24]
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	4413      	add	r3, r2
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800b130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b132:	2b1f      	cmp	r3, #31
 800b134:	d92f      	bls.n	800b196 <create_name+0xaa>
 800b136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b138:	2b2f      	cmp	r3, #47	; 0x2f
 800b13a:	d02c      	beq.n	800b196 <create_name+0xaa>
 800b13c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b13e:	2b5c      	cmp	r3, #92	; 0x5c
 800b140:	d029      	beq.n	800b196 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2bfe      	cmp	r3, #254	; 0xfe
 800b146:	d901      	bls.n	800b14c <create_name+0x60>
			return FR_INVALID_NAME;
 800b148:	2306      	movs	r3, #6
 800b14a:	e176      	b.n	800b43a <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b14c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b154:	2101      	movs	r1, #1
 800b156:	4618      	mov	r0, r3
 800b158:	f001 fd6a 	bl	800cc30 <ff_convert>
 800b15c:	4603      	mov	r3, r0
 800b15e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <create_name+0x7e>
 800b166:	2306      	movs	r3, #6
 800b168:	e167      	b.n	800b43a <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800b16a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b16c:	2b7f      	cmp	r3, #127	; 0x7f
 800b16e:	d809      	bhi.n	800b184 <create_name+0x98>
 800b170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b172:	4619      	mov	r1, r3
 800b174:	48b3      	ldr	r0, [pc, #716]	; (800b444 <create_name+0x358>)
 800b176:	f7fe fbdd 	bl	8009934 <chk_chr>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <create_name+0x98>
			return FR_INVALID_NAME;
 800b180:	2306      	movs	r3, #6
 800b182:	e15a      	b.n	800b43a <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	617a      	str	r2, [r7, #20]
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b192:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b194:	e7c5      	b.n	800b122 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	441a      	add	r2, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1a2:	2b1f      	cmp	r3, #31
 800b1a4:	d801      	bhi.n	800b1aa <create_name+0xbe>
 800b1a6:	2304      	movs	r3, #4
 800b1a8:	e000      	b.n	800b1ac <create_name+0xc0>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b1b0:	e011      	b.n	800b1d6 <create_name+0xea>
		w = lfn[di - 1];
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	005b      	lsls	r3, r3, #1
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b1c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c6:	2b20      	cmp	r3, #32
 800b1c8:	d002      	beq.n	800b1d0 <create_name+0xe4>
 800b1ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ce:	d106      	bne.n	800b1de <create_name+0xf2>
		di--;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1ea      	bne.n	800b1b2 <create_name+0xc6>
 800b1dc:	e000      	b.n	800b1e0 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 800b1de:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <create_name+0xfe>
 800b1e6:	2306      	movs	r3, #6
 800b1e8:	e127      	b.n	800b43a <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	699b      	ldr	r3, [r3, #24]
 800b1fa:	220b      	movs	r2, #11
 800b1fc:	2120      	movs	r1, #32
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe fb58 	bl	80098b4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b204:	2300      	movs	r3, #0
 800b206:	61bb      	str	r3, [r7, #24]
 800b208:	e002      	b.n	800b210 <create_name+0x124>
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	3301      	adds	r3, #1
 800b20e:	61bb      	str	r3, [r7, #24]
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4413      	add	r3, r2
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	d0f5      	beq.n	800b20a <create_name+0x11e>
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	4413      	add	r3, r2
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	2b2e      	cmp	r3, #46	; 0x2e
 800b22a:	d0ee      	beq.n	800b20a <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d009      	beq.n	800b246 <create_name+0x15a>
 800b232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b236:	f043 0303 	orr.w	r3, r3, #3
 800b23a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b23e:	e002      	b.n	800b246 <create_name+0x15a>
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	3b01      	subs	r3, #1
 800b244:	617b      	str	r3, [r7, #20]
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d009      	beq.n	800b260 <create_name+0x174>
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b252:	3b01      	subs	r3, #1
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	4413      	add	r3, r2
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	2b2e      	cmp	r3, #46	; 0x2e
 800b25e:	d1ef      	bne.n	800b240 <create_name+0x154>

	b = i = 0; ni = 8;
 800b260:	2300      	movs	r3, #0
 800b262:	623b      	str	r3, [r7, #32]
 800b264:	2300      	movs	r3, #0
 800b266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b26a:	2308      	movs	r3, #8
 800b26c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	61ba      	str	r2, [r7, #24]
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	4413      	add	r3, r2
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b27e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 808f 	beq.w	800b3a4 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b288:	2b20      	cmp	r3, #32
 800b28a:	d006      	beq.n	800b29a <create_name+0x1ae>
 800b28c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b28e:	2b2e      	cmp	r3, #46	; 0x2e
 800b290:	d10a      	bne.n	800b2a8 <create_name+0x1bc>
 800b292:	69ba      	ldr	r2, [r7, #24]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	429a      	cmp	r2, r3
 800b298:	d006      	beq.n	800b2a8 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 800b29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b29e:	f043 0303 	orr.w	r3, r3, #3
 800b2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2a6:	e07c      	b.n	800b3a2 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b2a8:	6a3a      	ldr	r2, [r7, #32]
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d203      	bcs.n	800b2b8 <create_name+0x1cc>
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d123      	bne.n	800b300 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	2b0b      	cmp	r3, #11
 800b2bc:	d106      	bne.n	800b2cc <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 800b2be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2c2:	f043 0303 	orr.w	r3, r3, #3
 800b2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2ca:	e06e      	b.n	800b3aa <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d005      	beq.n	800b2e0 <create_name+0x1f4>
 800b2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2d8:	f043 0303 	orr.w	r3, r3, #3
 800b2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d85f      	bhi.n	800b3a8 <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	61bb      	str	r3, [r7, #24]
 800b2ec:	2308      	movs	r3, #8
 800b2ee:	623b      	str	r3, [r7, #32]
 800b2f0:	230b      	movs	r3, #11
 800b2f2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b2f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2fe:	e050      	b.n	800b3a2 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b302:	2b7f      	cmp	r3, #127	; 0x7f
 800b304:	d914      	bls.n	800b330 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b308:	2100      	movs	r1, #0
 800b30a:	4618      	mov	r0, r3
 800b30c:	f001 fc90 	bl	800cc30 <ff_convert>
 800b310:	4603      	mov	r3, r0
 800b312:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b316:	2b00      	cmp	r3, #0
 800b318:	d004      	beq.n	800b324 <create_name+0x238>
 800b31a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b31c:	3b80      	subs	r3, #128	; 0x80
 800b31e:	4a4a      	ldr	r2, [pc, #296]	; (800b448 <create_name+0x35c>)
 800b320:	5cd3      	ldrb	r3, [r2, r3]
 800b322:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b328:	f043 0302 	orr.w	r3, r3, #2
 800b32c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b332:	2b00      	cmp	r3, #0
 800b334:	d007      	beq.n	800b346 <create_name+0x25a>
 800b336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b338:	4619      	mov	r1, r3
 800b33a:	4844      	ldr	r0, [pc, #272]	; (800b44c <create_name+0x360>)
 800b33c:	f7fe fafa 	bl	8009934 <chk_chr>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d008      	beq.n	800b358 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b346:	235f      	movs	r3, #95	; 0x5f
 800b348:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b34e:	f043 0303 	orr.w	r3, r3, #3
 800b352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b356:	e01b      	b.n	800b390 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b358:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b35a:	2b40      	cmp	r3, #64	; 0x40
 800b35c:	d909      	bls.n	800b372 <create_name+0x286>
 800b35e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b360:	2b5a      	cmp	r3, #90	; 0x5a
 800b362:	d806      	bhi.n	800b372 <create_name+0x286>
					b |= 2;
 800b364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b368:	f043 0302 	orr.w	r3, r3, #2
 800b36c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b370:	e00e      	b.n	800b390 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b374:	2b60      	cmp	r3, #96	; 0x60
 800b376:	d90b      	bls.n	800b390 <create_name+0x2a4>
 800b378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b37a:	2b7a      	cmp	r3, #122	; 0x7a
 800b37c:	d808      	bhi.n	800b390 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 800b37e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b382:	f043 0301 	orr.w	r3, r3, #1
 800b386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b38a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b38c:	3b20      	subs	r3, #32
 800b38e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	699a      	ldr	r2, [r3, #24]
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	1c59      	adds	r1, r3, #1
 800b398:	6239      	str	r1, [r7, #32]
 800b39a:	4413      	add	r3, r2
 800b39c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b39e:	b2d2      	uxtb	r2, r2
 800b3a0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b3a2:	e764      	b.n	800b26e <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 800b3a4:	bf00      	nop
 800b3a6:	e000      	b.n	800b3aa <create_name+0x2be>
			if (si > di) break;			/* No extension */
 800b3a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	2be5      	cmp	r3, #229	; 0xe5
 800b3b2:	d103      	bne.n	800b3bc <create_name+0x2d0>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	2205      	movs	r2, #5
 800b3ba:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	2b08      	cmp	r3, #8
 800b3c0:	d104      	bne.n	800b3cc <create_name+0x2e0>
 800b3c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b3cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3d0:	f003 030c 	and.w	r3, r3, #12
 800b3d4:	2b0c      	cmp	r3, #12
 800b3d6:	d005      	beq.n	800b3e4 <create_name+0x2f8>
 800b3d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d105      	bne.n	800b3f0 <create_name+0x304>
		cf |= NS_LFN;
 800b3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3e8:	f043 0302 	orr.w	r3, r3, #2
 800b3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d117      	bne.n	800b42c <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b400:	f003 0303 	and.w	r3, r3, #3
 800b404:	2b01      	cmp	r3, #1
 800b406:	d105      	bne.n	800b414 <create_name+0x328>
 800b408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b40c:	f043 0310 	orr.w	r3, r3, #16
 800b410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b418:	f003 030c 	and.w	r3, r3, #12
 800b41c:	2b04      	cmp	r3, #4
 800b41e:	d105      	bne.n	800b42c <create_name+0x340>
 800b420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b424:	f043 0308 	orr.w	r3, r3, #8
 800b428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	330b      	adds	r3, #11
 800b432:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b436:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b438:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3728      	adds	r7, #40	; 0x28
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	0800d74c 	.word	0x0800d74c
 800b448:	0800d7ac 	.word	0x0800d7ac
 800b44c:	0800d758 	.word	0x0800d758

0800b450 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b2f      	cmp	r3, #47	; 0x2f
 800b460:	d003      	beq.n	800b46a <follow_path+0x1a>
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b5c      	cmp	r3, #92	; 0x5c
 800b468:	d102      	bne.n	800b470 <follow_path+0x20>
		path++;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	3301      	adds	r3, #1
 800b46e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b1f      	cmp	r3, #31
 800b47c:	d809      	bhi.n	800b492 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 800b47e:	2100      	movs	r1, #0
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff f8c0 	bl	800a606 <dir_sdi>
 800b486:	4603      	mov	r3, r0
 800b488:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	615a      	str	r2, [r3, #20]
 800b490:	e041      	b.n	800b516 <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b492:	463b      	mov	r3, r7
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fe28 	bl	800b0ec <create_name>
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d132      	bne.n	800b50c <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff fc72 	bl	800ad90 <dir_find>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	7adb      	ldrb	r3, [r3, #11]
 800b4b6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	2b04      	cmp	r3, #4
 800b4c2:	d125      	bne.n	800b510 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	f003 0304 	and.w	r3, r3, #4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d120      	bne.n	800b510 <follow_path+0xc0>
 800b4ce:	2305      	movs	r3, #5
 800b4d0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b4d2:	e01d      	b.n	800b510 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4d4:	7bbb      	ldrb	r3, [r7, #14]
 800b4d6:	f003 0304 	and.w	r3, r3, #4
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d11a      	bne.n	800b514 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	330b      	adds	r3, #11
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	f003 0310 	and.w	r3, r3, #16
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d102      	bne.n	800b4f8 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 800b4f2:	2305      	movs	r3, #5
 800b4f4:	73fb      	strb	r3, [r7, #15]
 800b4f6:	e00e      	b.n	800b516 <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff fa60 	bl	800a9c4 <ld_clust>
 800b504:	4602      	mov	r2, r0
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b50a:	e7c2      	b.n	800b492 <follow_path+0x42>
			if (res != FR_OK) break;
 800b50c:	bf00      	nop
 800b50e:	e002      	b.n	800b516 <follow_path+0xc6>
				break;
 800b510:	bf00      	nop
 800b512:	e000      	b.n	800b516 <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b514:	bf00      	nop
		}
	}

	return res;
 800b516:	7bfb      	ldrb	r3, [r7, #15]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b528:	f04f 33ff 	mov.w	r3, #4294967295
 800b52c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d031      	beq.n	800b59a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	e002      	b.n	800b544 <get_ldnumber+0x24>
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	3301      	adds	r3, #1
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b1f      	cmp	r3, #31
 800b54a:	d903      	bls.n	800b554 <get_ldnumber+0x34>
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b3a      	cmp	r3, #58	; 0x3a
 800b552:	d1f4      	bne.n	800b53e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b3a      	cmp	r3, #58	; 0x3a
 800b55a:	d11c      	bne.n	800b596 <get_ldnumber+0x76>
			tp = *path;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	60fa      	str	r2, [r7, #12]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	3b30      	subs	r3, #48	; 0x30
 800b56c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b09      	cmp	r3, #9
 800b572:	d80e      	bhi.n	800b592 <get_ldnumber+0x72>
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d10a      	bne.n	800b592 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d107      	bne.n	800b592 <get_ldnumber+0x72>
					vol = (int)i;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	3301      	adds	r3, #1
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	e002      	b.n	800b59c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b596:	2300      	movs	r3, #0
 800b598:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b59a:	693b      	ldr	r3, [r7, #16]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	371c      	adds	r7, #28
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bc80      	pop	{r7}
 800b5a4:	4770      	bx	lr
	...

0800b5a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7fe fbc3 	bl	8009d52 <move_window>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <check_fs+0x2e>
		return 3;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e04a      	b.n	800b66c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5dc:	3301      	adds	r3, #1
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	021b      	lsls	r3, r3, #8
 800b5e2:	b21a      	sxth	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b5ea:	b21b      	sxth	r3, r3
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	b21b      	sxth	r3, r3
 800b5f0:	4a20      	ldr	r2, [pc, #128]	; (800b674 <check_fs+0xcc>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d001      	beq.n	800b5fa <check_fs+0x52>
		return 2;
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	e038      	b.n	800b66c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	3336      	adds	r3, #54	; 0x36
 800b5fe:	3303      	adds	r3, #3
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	061a      	lsls	r2, r3, #24
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	3336      	adds	r3, #54	; 0x36
 800b608:	3302      	adds	r3, #2
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	041b      	lsls	r3, r3, #16
 800b60e:	4313      	orrs	r3, r2
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	3236      	adds	r2, #54	; 0x36
 800b614:	3201      	adds	r2, #1
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	0212      	lsls	r2, r2, #8
 800b61a:	4313      	orrs	r3, r2
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b622:	4313      	orrs	r3, r2
 800b624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b628:	4a13      	ldr	r2, [pc, #76]	; (800b678 <check_fs+0xd0>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d101      	bne.n	800b632 <check_fs+0x8a>
		return 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	e01c      	b.n	800b66c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3352      	adds	r3, #82	; 0x52
 800b636:	3303      	adds	r3, #3
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	061a      	lsls	r2, r3, #24
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3352      	adds	r3, #82	; 0x52
 800b640:	3302      	adds	r3, #2
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	041b      	lsls	r3, r3, #16
 800b646:	4313      	orrs	r3, r2
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	3252      	adds	r2, #82	; 0x52
 800b64c:	3201      	adds	r2, #1
 800b64e:	7812      	ldrb	r2, [r2, #0]
 800b650:	0212      	lsls	r2, r2, #8
 800b652:	4313      	orrs	r3, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b65a:	4313      	orrs	r3, r2
 800b65c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b660:	4a05      	ldr	r2, [pc, #20]	; (800b678 <check_fs+0xd0>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d101      	bne.n	800b66a <check_fs+0xc2>
		return 0;
 800b666:	2300      	movs	r3, #0
 800b668:	e000      	b.n	800b66c <check_fs+0xc4>

	return 1;
 800b66a:	2301      	movs	r3, #1
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	ffffaa55 	.word	0xffffaa55
 800b678:	00544146 	.word	0x00544146

0800b67c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b096      	sub	sp, #88	; 0x58
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b690:	68b8      	ldr	r0, [r7, #8]
 800b692:	f7ff ff45 	bl	800b520 <get_ldnumber>
 800b696:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	da01      	bge.n	800b6a2 <find_volume+0x26>
 800b69e:	230b      	movs	r3, #11
 800b6a0:	e2de      	b.n	800bc60 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b6a2:	4ab1      	ldr	r2, [pc, #708]	; (800b968 <find_volume+0x2ec>)
 800b6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d101      	bne.n	800b6b6 <find_volume+0x3a>
 800b6b2:	230c      	movs	r3, #12
 800b6b4:	e2d4      	b.n	800bc60 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ba:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d01b      	beq.n	800b6fe <find_volume+0x82>
		stat = disk_status(fs->drv);
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe f835 	bl	800973c <disk_status>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b6d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10c      	bne.n	800b6fe <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <find_volume+0x7e>
 800b6ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6ee:	f003 0304 	and.w	r3, r3, #4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800b6f6:	230a      	movs	r3, #10
 800b6f8:	e2b2      	b.n	800bc60 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	e2b0      	b.n	800bc60 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800b716:	4618      	mov	r0, r3
 800b718:	f7fe f82a 	bl	8009770 <disk_initialize>
 800b71c:	4603      	mov	r3, r0
 800b71e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b722:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b72e:	2303      	movs	r3, #3
 800b730:	e296      	b.n	800bc60 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d007      	beq.n	800b748 <find_volume+0xcc>
 800b738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b744:	230a      	movs	r3, #10
 800b746:	e28b      	b.n	800bc60 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b750:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800b754:	461a      	mov	r2, r3
 800b756:	2102      	movs	r1, #2
 800b758:	f7fe f870 	bl	800983c <disk_ioctl>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10b      	bne.n	800b77a <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b76c:	d305      	bcc.n	800b77a <find_volume+0xfe>
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b778:	d901      	bls.n	800b77e <find_volume+0x102>
 800b77a:	2301      	movs	r3, #1
 800b77c:	e270      	b.n	800bc60 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b786:	f7ff ff0f 	bl	800b5a8 <check_fs>
 800b78a:	4603      	mov	r3, r0
 800b78c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b794:	2b01      	cmp	r3, #1
 800b796:	d155      	bne.n	800b844 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b798:	2300      	movs	r3, #0
 800b79a:	643b      	str	r3, [r7, #64]	; 0x40
 800b79c:	e029      	b.n	800b7f2 <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b79e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b7a8:	4413      	add	r3, r2
 800b7aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d012      	beq.n	800b7dc <find_volume+0x160>
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	330b      	adds	r3, #11
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	061a      	lsls	r2, r3, #24
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	330a      	adds	r3, #10
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	041b      	lsls	r3, r3, #16
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ca:	3209      	adds	r2, #9
 800b7cc:	7812      	ldrb	r2, [r2, #0]
 800b7ce:	0212      	lsls	r2, r2, #8
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d4:	3208      	adds	r2, #8
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	431a      	orrs	r2, r3
 800b7da:	e000      	b.n	800b7de <find_volume+0x162>
 800b7dc:	2200      	movs	r2, #0
 800b7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b7e6:	440b      	add	r3, r1
 800b7e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d9d2      	bls.n	800b79e <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <find_volume+0x18c>
 800b802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b804:	3b01      	subs	r3, #1
 800b806:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b810:	4413      	add	r3, r2
 800b812:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b816:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <find_volume+0x1ae>
 800b81e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b822:	f7ff fec1 	bl	800b5a8 <check_fs>
 800b826:	4603      	mov	r3, r0
 800b828:	e000      	b.n	800b82c <find_volume+0x1b0>
 800b82a:	2302      	movs	r3, #2
 800b82c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b830:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b834:	2b00      	cmp	r3, #0
 800b836:	d005      	beq.n	800b844 <find_volume+0x1c8>
 800b838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83a:	3301      	adds	r3, #1
 800b83c:	643b      	str	r3, [r7, #64]	; 0x40
 800b83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b840:	2b03      	cmp	r3, #3
 800b842:	d9e1      	bls.n	800b808 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d101      	bne.n	800b850 <find_volume+0x1d4>
 800b84c:	2301      	movs	r3, #1
 800b84e:	e207      	b.n	800bc60 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <find_volume+0x1e0>
 800b858:	230d      	movs	r3, #13
 800b85a:	e201      	b.n	800bc60 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	7b1b      	ldrb	r3, [r3, #12]
 800b860:	021b      	lsls	r3, r3, #8
 800b862:	b21a      	sxth	r2, r3
 800b864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b866:	7adb      	ldrb	r3, [r3, #11]
 800b868:	b21b      	sxth	r3, r3
 800b86a:	4313      	orrs	r3, r2
 800b86c:	b21a      	sxth	r2, r3
 800b86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b870:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b874:	b21b      	sxth	r3, r3
 800b876:	429a      	cmp	r2, r3
 800b878:	d001      	beq.n	800b87e <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 800b87a:	230d      	movs	r3, #13
 800b87c:	e1f0      	b.n	800bc60 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	7ddb      	ldrb	r3, [r3, #23]
 800b882:	021b      	lsls	r3, r3, #8
 800b884:	b21a      	sxth	r2, r3
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	7d9b      	ldrb	r3, [r3, #22]
 800b88a:	b21b      	sxth	r3, r3
 800b88c:	4313      	orrs	r3, r2
 800b88e:	b21b      	sxth	r3, r3
 800b890:	b29b      	uxth	r3, r3
 800b892:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b896:	2b00      	cmp	r3, #0
 800b898:	d112      	bne.n	800b8c0 <find_volume+0x244>
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b8a0:	061a      	lsls	r2, r3, #24
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b8a8:	041b      	lsls	r3, r3, #16
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8ae:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b8b2:	0212      	lsls	r2, r2, #8
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8b8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8c4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	7c1a      	ldrb	r2, [r3, #16]
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d006      	beq.n	800b8ea <find_volume+0x26e>
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d001      	beq.n	800b8ea <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 800b8e6:	230d      	movs	r3, #13
 800b8e8:	e1ba      	b.n	800bc60 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ec:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f4:	fb02 f303 	mul.w	r3, r2, r3
 800b8f8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	7b5a      	ldrb	r2, [r3, #13]
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <find_volume+0x2a8>
 800b90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b910:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b914:	461a      	mov	r2, r3
 800b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b918:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b91c:	3b01      	subs	r3, #1
 800b91e:	4013      	ands	r3, r2
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 800b924:	230d      	movs	r3, #13
 800b926:	e19b      	b.n	800bc60 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	7c9b      	ldrb	r3, [r3, #18]
 800b92c:	021b      	lsls	r3, r3, #8
 800b92e:	b21a      	sxth	r2, r3
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	7c5b      	ldrb	r3, [r3, #17]
 800b934:	b21b      	sxth	r3, r3
 800b936:	4313      	orrs	r3, r2
 800b938:	b21b      	sxth	r3, r3
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93e:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800b948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b94a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b94e:	0952      	lsrs	r2, r2, #5
 800b950:	b292      	uxth	r2, r2
 800b952:	fbb3 f1f2 	udiv	r1, r3, r2
 800b956:	fb02 f201 	mul.w	r2, r2, r1
 800b95a:	1a9b      	subs	r3, r3, r2
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d004      	beq.n	800b96c <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800b962:	230d      	movs	r3, #13
 800b964:	e17c      	b.n	800bc60 <find_volume+0x5e4>
 800b966:	bf00      	nop
 800b968:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96e:	7d1b      	ldrb	r3, [r3, #20]
 800b970:	021b      	lsls	r3, r3, #8
 800b972:	b21a      	sxth	r2, r3
 800b974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b976:	7cdb      	ldrb	r3, [r3, #19]
 800b978:	b21b      	sxth	r3, r3
 800b97a:	4313      	orrs	r3, r2
 800b97c:	b21b      	sxth	r3, r3
 800b97e:	b29b      	uxth	r3, r3
 800b980:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b984:	2b00      	cmp	r3, #0
 800b986:	d112      	bne.n	800b9ae <find_volume+0x332>
 800b988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b98e:	061a      	lsls	r2, r3, #24
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b996:	041b      	lsls	r3, r3, #16
 800b998:	4313      	orrs	r3, r2
 800b99a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b99c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b9a0:	0212      	lsls	r2, r2, #8
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b0:	7bdb      	ldrb	r3, [r3, #15]
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	b21a      	sxth	r2, r3
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	7b9b      	ldrb	r3, [r3, #14]
 800b9ba:	b21b      	sxth	r3, r3
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	b21b      	sxth	r3, r3
 800b9c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b9c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <find_volume+0x350>
 800b9c8:	230d      	movs	r3, #13
 800b9ca:	e149      	b.n	800bc60 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b9cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d0:	4413      	add	r3, r2
 800b9d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9d4:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 800b9d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9da:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b9de:	0952      	lsrs	r2, r2, #5
 800b9e0:	b292      	uxth	r2, r2
 800b9e2:	fbb1 f2f2 	udiv	r2, r1, r2
 800b9e6:	b292      	uxth	r2, r2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b9ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d201      	bcs.n	800b9f8 <find_volume+0x37c>
 800b9f4:	230d      	movs	r3, #13
 800b9f6:	e133      	b.n	800bc60 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b9f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba00:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800ba04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba08:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <find_volume+0x398>
 800ba10:	230d      	movs	r3, #13
 800ba12:	e125      	b.n	800bc60 <find_volume+0x5e4>
	fmt = FS_FAT12;
 800ba14:	2301      	movs	r3, #1
 800ba16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d902      	bls.n	800ba2a <find_volume+0x3ae>
 800ba24:	2302      	movs	r3, #2
 800ba26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d902      	bls.n	800ba3a <find_volume+0x3be>
 800ba34:	2303      	movs	r3, #3
 800ba36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	1c9a      	adds	r2, r3, #2
 800ba3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba40:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba48:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ba4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba50:	441a      	add	r2, r3
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 800ba58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	441a      	add	r2, r3
 800ba5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba60:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800ba64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d121      	bne.n	800bab0 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <find_volume+0x3fe>
 800ba76:	230d      	movs	r3, #13
 800ba78:	e0f2      	b.n	800bc60 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba80:	061a      	lsls	r2, r3, #24
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ba88:	041b      	lsls	r3, r3, #16
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba8e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ba92:	0212      	lsls	r2, r2, #8
 800ba94:	4313      	orrs	r3, r2
 800ba96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba98:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800baa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	647b      	str	r3, [r7, #68]	; 0x44
 800baae:	e025      	b.n	800bafc <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <find_volume+0x442>
 800baba:	230d      	movs	r3, #13
 800babc:	e0d0      	b.n	800bc60 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800bac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac6:	441a      	add	r2, r3
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bace:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d104      	bne.n	800bae0 <find_volume+0x464>
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800badc:	005b      	lsls	r3, r3, #1
 800bade:	e00c      	b.n	800bafa <find_volume+0x47e>
 800bae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae2:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800bae6:	4613      	mov	r3, r2
 800bae8:	005b      	lsls	r3, r3, #1
 800baea:	4413      	add	r3, r2
 800baec:	085a      	lsrs	r2, r3, #1
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800bafa:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb0c:	440b      	add	r3, r1
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb12:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 800bb16:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d201      	bcs.n	800bb22 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800bb1e:	230d      	movs	r3, #13
 800bb20:	e09e      	b.n	800bc60 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800bb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3a:	2280      	movs	r2, #128	; 0x80
 800bb3c:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800bb40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb44:	2b03      	cmp	r3, #3
 800bb46:	d177      	bne.n	800bc38 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb4e:	021b      	lsls	r3, r3, #8
 800bb50:	b21a      	sxth	r2, r3
 800bb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb58:	b21b      	sxth	r3, r3
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	b21b      	sxth	r3, r3
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d16a      	bne.n	800bc38 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 800bb62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb64:	3301      	adds	r3, #1
 800bb66:	4619      	mov	r1, r3
 800bb68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb6a:	f7fe f8f2 	bl	8009d52 <move_window>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d161      	bne.n	800bc38 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800bb82:	021b      	lsls	r3, r3, #8
 800bb84:	b21a      	sxth	r2, r3
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bb8c:	b21b      	sxth	r3, r3
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	b21b      	sxth	r3, r3
 800bb92:	4a35      	ldr	r2, [pc, #212]	; (800bc68 <find_volume+0x5ec>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d14f      	bne.n	800bc38 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800bb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9a:	78db      	ldrb	r3, [r3, #3]
 800bb9c:	061a      	lsls	r2, r3, #24
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	789b      	ldrb	r3, [r3, #2]
 800bba2:	041b      	lsls	r3, r3, #16
 800bba4:	4313      	orrs	r3, r2
 800bba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bba8:	7852      	ldrb	r2, [r2, #1]
 800bbaa:	0212      	lsls	r2, r2, #8
 800bbac:	4313      	orrs	r3, r2
 800bbae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbb0:	7812      	ldrb	r2, [r2, #0]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	4a2d      	ldr	r2, [pc, #180]	; (800bc6c <find_volume+0x5f0>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d13e      	bne.n	800bc38 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800bbc0:	061a      	lsls	r2, r3, #24
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800bbc8:	041b      	lsls	r3, r3, #16
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbce:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800bbd2:	0212      	lsls	r2, r2, #8
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	4a24      	ldr	r2, [pc, #144]	; (800bc70 <find_volume+0x5f4>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d129      	bne.n	800bc38 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800bbea:	061a      	lsls	r2, r3, #24
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800bbf2:	041b      	lsls	r3, r3, #16
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800bbfc:	0212      	lsls	r2, r2, #8
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc02:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800bc06:	431a      	orrs	r2, r3
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800bc14:	061a      	lsls	r2, r3, #24
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800bc1c:	041b      	lsls	r3, r3, #16
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc22:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800bc26:	0212      	lsls	r2, r2, #8
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc2c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800bc30:	431a      	orrs	r2, r3
 800bc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc34:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc3e:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 800bc42:	4b0c      	ldr	r3, [pc, #48]	; (800bc74 <find_volume+0x5f8>)
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	3301      	adds	r3, #1
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <find_volume+0x5f8>)
 800bc4c:	801a      	strh	r2, [r3, #0]
 800bc4e:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <find_volume+0x5f8>)
 800bc50:	881a      	ldrh	r2, [r3, #0]
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc5a:	f7fe f807 	bl	8009c6c <clear_lock>
#endif

	return FR_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3758      	adds	r7, #88	; 0x58
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	ffffaa55 	.word	0xffffaa55
 800bc6c:	41615252 	.word	0x41615252
 800bc70:	61417272 	.word	0x61417272
 800bc74:	200000b0 	.word	0x200000b0

0800bc78 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d01d      	beq.n	800bcc6 <validate+0x4e>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d019      	beq.n	800bcc6 <validate+0x4e>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d013      	beq.n	800bcc6 <validate+0x4e>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	889b      	ldrh	r3, [r3, #4]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d10b      	bne.n	800bcc6 <validate+0x4e>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fd fd40 	bl	800973c <disk_status>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <validate+0x52>
		return FR_INVALID_OBJECT;
 800bcc6:	2309      	movs	r3, #9
 800bcc8:	e000      	b.n	800bccc <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	4613      	mov	r3, r2
 800bce0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800bce6:	f107 0310 	add.w	r3, r7, #16
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff fc18 	bl	800b520 <get_ldnumber>
 800bcf0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	da01      	bge.n	800bcfc <f_mount+0x28>
 800bcf8:	230b      	movs	r3, #11
 800bcfa:	e02d      	b.n	800bd58 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bcfc:	4a18      	ldr	r2, [pc, #96]	; (800bd60 <f_mount+0x8c>)
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d006      	beq.n	800bd1a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800bd0c:	69b8      	ldr	r0, [r7, #24]
 800bd0e:	f7fd ffad 	bl	8009c6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d003      	beq.n	800bd28 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	490d      	ldr	r1, [pc, #52]	; (800bd60 <f_mount+0x8c>)
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <f_mount+0x6a>
 800bd38:	79fb      	ldrb	r3, [r7, #7]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d001      	beq.n	800bd42 <f_mount+0x6e>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e00a      	b.n	800bd58 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800bd42:	f107 0108 	add.w	r1, r7, #8
 800bd46:	f107 030c 	add.w	r3, r7, #12
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff fc95 	bl	800b67c <find_volume>
 800bd52:	4603      	mov	r3, r0
 800bd54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	200000ac 	.word	0x200000ac

0800bd64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b096      	sub	sp, #88	; 0x58
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <f_open+0x18>
 800bd78:	2309      	movs	r3, #9
 800bd7a:	e16d      	b.n	800c058 <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800bd82:	79fb      	ldrb	r3, [r7, #7]
 800bd84:	f003 031f 	and.w	r3, r3, #31
 800bd88:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800bd8a:	79fb      	ldrb	r3, [r7, #7]
 800bd8c:	f023 0301 	bic.w	r3, r3, #1
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	f107 0108 	add.w	r1, r7, #8
 800bd96:	f107 0320 	add.w	r3, r7, #32
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7ff fc6e 	bl	800b67c <find_volume>
 800bda0:	4603      	mov	r3, r0
 800bda2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800bda6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f040 8152 	bne.w	800c054 <f_open+0x2f0>
		INIT_BUF(dj);
 800bdb0:	f107 0314 	add.w	r3, r7, #20
 800bdb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdb6:	4baa      	ldr	r3, [pc, #680]	; (800c060 <f_open+0x2fc>)
 800bdb8:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	f107 0320 	add.w	r3, r7, #32
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7ff fb44 	bl	800b450 <follow_path>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 800bdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd0:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bdd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d118      	bne.n	800be0c <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800bdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d103      	bne.n	800bde8 <f_open+0x84>
				res = FR_INVALID_NAME;
 800bde0:	2306      	movs	r3, #6
 800bde2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bde6:	e011      	b.n	800be0c <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	f023 0301 	bic.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	bf14      	ite	ne
 800bdf2:	2301      	movne	r3, #1
 800bdf4:	2300      	moveq	r3, #0
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	f107 0320 	add.w	r3, r7, #32
 800bdfe:	4611      	mov	r1, r2
 800be00:	4618      	mov	r0, r3
 800be02:	f7fd fdb1 	bl	8009968 <chk_lock>
 800be06:	4603      	mov	r3, r0
 800be08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	f003 031c 	and.w	r3, r3, #28
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 809a 	beq.w	800bf4c <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 800be18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d019      	beq.n	800be54 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800be20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be24:	2b04      	cmp	r3, #4
 800be26:	d10e      	bne.n	800be46 <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be28:	f7fd fe08 	bl	8009a3c <enq_lock>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d006      	beq.n	800be40 <f_open+0xdc>
 800be32:	f107 0320 	add.w	r3, r7, #32
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff f85e 	bl	800aef8 <dir_register>
 800be3c:	4603      	mov	r3, r0
 800be3e:	e000      	b.n	800be42 <f_open+0xde>
 800be40:	2312      	movs	r3, #18
 800be42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	f043 0308 	orr.w	r3, r3, #8
 800be4c:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 800be4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be50:	653b      	str	r3, [r7, #80]	; 0x50
 800be52:	e012      	b.n	800be7a <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be56:	330b      	adds	r3, #11
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	f003 0311 	and.w	r3, r3, #17
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d003      	beq.n	800be6a <f_open+0x106>
					res = FR_DENIED;
 800be62:	2307      	movs	r3, #7
 800be64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800be68:	e007      	b.n	800be7a <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <f_open+0x116>
						res = FR_EXIST;
 800be74:	2308      	movs	r3, #8
 800be76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f040 8082 	bne.w	800bf88 <f_open+0x224>
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	f003 0308 	and.w	r3, r3, #8
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d07c      	beq.n	800bf88 <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 800be8e:	f7fd fbef 	bl	8009670 <get_fattime>
 800be92:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800be94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be96:	330e      	adds	r3, #14
 800be98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be9a:	b2d2      	uxtb	r2, r2
 800be9c:	701a      	strb	r2, [r3, #0]
 800be9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	0a1b      	lsrs	r3, r3, #8
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bea8:	330f      	adds	r3, #15
 800beaa:	b2d2      	uxtb	r2, r2
 800beac:	701a      	strb	r2, [r3, #0]
 800beae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb0:	0c1a      	lsrs	r2, r3, #16
 800beb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb4:	3310      	adds	r3, #16
 800beb6:	b2d2      	uxtb	r2, r2
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bebc:	0e1a      	lsrs	r2, r3, #24
 800bebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec0:	3311      	adds	r3, #17
 800bec2:	b2d2      	uxtb	r2, r2
 800bec4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec8:	330b      	adds	r3, #11
 800beca:	2200      	movs	r2, #0
 800becc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800bece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed0:	331c      	adds	r3, #28
 800bed2:	2200      	movs	r2, #0
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed8:	331d      	adds	r3, #29
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee0:	331e      	adds	r3, #30
 800bee2:	2200      	movs	r2, #0
 800bee4:	701a      	strb	r2, [r3, #0]
 800bee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee8:	331f      	adds	r3, #31
 800beea:	2200      	movs	r2, #0
 800beec:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800beee:	6a3b      	ldr	r3, [r7, #32]
 800bef0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fd66 	bl	800a9c4 <ld_clust>
 800bef8:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 800befa:	2100      	movs	r1, #0
 800befc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800befe:	f7fe fd8e 	bl	800aa1e <st_clust>
				dj.fs->wflag = 1;
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800bf0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d03b      	beq.n	800bf88 <f_open+0x224>
					dw = dj.fs->winsect;
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800bf16:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 800bf18:	6a3b      	ldr	r3, [r7, #32]
 800bf1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fe fa43 	bl	800a3a8 <remove_chain>
 800bf22:	4603      	mov	r3, r0
 800bf24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 800bf28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d12b      	bne.n	800bf88 <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf34:	3a01      	subs	r2, #1
 800bf36:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fd ff07 	bl	8009d52 <move_window>
 800bf44:	4603      	mov	r3, r0
 800bf46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bf4a:	e01d      	b.n	800bf88 <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bf4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d119      	bne.n	800bf88 <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800bf54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf56:	330b      	adds	r3, #11
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	f003 0310 	and.w	r3, r3, #16
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d003      	beq.n	800bf6a <f_open+0x206>
					res = FR_NO_FILE;
 800bf62:	2304      	movs	r3, #4
 800bf64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bf68:	e00e      	b.n	800bf88 <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	f003 0302 	and.w	r3, r3, #2
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d009      	beq.n	800bf88 <f_open+0x224>
 800bf74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf76:	330b      	adds	r3, #11
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	f003 0301 	and.w	r3, r3, #1
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d002      	beq.n	800bf88 <f_open+0x224>
						res = FR_DENIED;
 800bf82:	2307      	movs	r3, #7
 800bf84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 800bf88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d129      	bne.n	800bfe4 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	f003 0308 	and.w	r3, r3, #8
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <f_open+0x23e>
				mode |= FA__WRITTEN;
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	f043 0320 	orr.w	r3, r3, #32
 800bfa0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfb0:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	f023 0301 	bic.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	bf14      	ite	ne
 800bfbc:	2301      	movne	r3, #1
 800bfbe:	2300      	moveq	r3, #0
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f107 0320 	add.w	r3, r7, #32
 800bfc8:	4611      	mov	r1, r2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fd fd5a 	bl	8009a84 <inc_lock>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d102      	bne.n	800bfe4 <f_open+0x280>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800bfe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d133      	bne.n	800c054 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	79fa      	ldrb	r2, [r7, #7]
 800bff0:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fe fce1 	bl	800a9c4 <ld_clust>
 800c002:	4602      	mov	r2, r0
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00a:	331f      	adds	r3, #31
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	061a      	lsls	r2, r3, #24
 800c010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c012:	331e      	adds	r3, #30
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	041b      	lsls	r3, r3, #16
 800c018:	4313      	orrs	r3, r2
 800c01a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c01c:	321d      	adds	r2, #29
 800c01e:	7812      	ldrb	r2, [r2, #0]
 800c020:	0212      	lsls	r2, r2, #8
 800c022:	4313      	orrs	r3, r2
 800c024:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c026:	321c      	adds	r2, #28
 800c028:	7812      	ldrb	r2, [r2, #0]
 800c02a:	431a      	orrs	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c042:	6a3a      	ldr	r2, [r7, #32]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800c054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3758      	adds	r7, #88	; 0x58
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	200000cc 	.word	0x200000cc

0800c064 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08c      	sub	sp, #48	; 0x30
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f7ff fdfb 	bl	800bc78 <validate>
 800c082:	4603      	mov	r3, r0
 800c084:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c086:	7ffb      	ldrb	r3, [r7, #31]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d001      	beq.n	800c090 <f_read+0x2c>
 800c08c:	7ffb      	ldrb	r3, [r7, #31]
 800c08e:	e13a      	b.n	800c306 <f_read+0x2a2>
	if (fp->err)								/* Check error */
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	79db      	ldrb	r3, [r3, #7]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	79db      	ldrb	r3, [r3, #7]
 800c09c:	e133      	b.n	800c306 <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	799b      	ldrb	r3, [r3, #6]
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d101      	bne.n	800c0ae <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c0aa:	2307      	movs	r3, #7
 800c0ac:	e12b      	b.n	800c306 <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	68da      	ldr	r2, [r3, #12]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	f240 811c 	bls.w	800c2fc <f_read+0x298>
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c0c8:	e118      	b.n	800c2fc <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	6812      	ldr	r2, [r2, #0]
 800c0d2:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c0d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0da:	fb02 f201 	mul.w	r2, r2, r1
 800c0de:	1a9b      	subs	r3, r3, r2
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f040 80bc 	bne.w	800c25e <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	6812      	ldr	r2, [r2, #0]
 800c0ee:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c100:	3b01      	subs	r3, #1
 800c102:	b2db      	uxtb	r3, r3
 800c104:	4013      	ands	r3, r2
 800c106:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d130      	bne.n	800c170 <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d103      	bne.n	800c11e <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c11c:	e014      	b.n	800c148 <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c122:	2b00      	cmp	r3, #0
 800c124:	d007      	beq.n	800c136 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	4619      	mov	r1, r3
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f7fe fa32 	bl	800a596 <clmt_clust>
 800c132:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c134:	e008      	b.n	800c148 <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	695b      	ldr	r3, [r3, #20]
 800c13e:	4619      	mov	r1, r3
 800c140:	4610      	mov	r0, r2
 800c142:	f7fd ff03 	bl	8009f4c <get_fat>
 800c146:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800c148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d804      	bhi.n	800c158 <f_read+0xf4>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2202      	movs	r2, #2
 800c152:	71da      	strb	r2, [r3, #7]
 800c154:	2302      	movs	r3, #2
 800c156:	e0d6      	b.n	800c306 <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15e:	d104      	bne.n	800c16a <f_read+0x106>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2201      	movs	r2, #1
 800c164:	71da      	strb	r2, [r3, #7]
 800c166:	2301      	movs	r3, #1
 800c168:	e0cd      	b.n	800c306 <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c16e:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	695b      	ldr	r3, [r3, #20]
 800c178:	4619      	mov	r1, r3
 800c17a:	4610      	mov	r0, r2
 800c17c:	f7fd fec5 	bl	8009f0a <clust2sect>
 800c180:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d104      	bne.n	800c192 <f_read+0x12e>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2202      	movs	r2, #2
 800c18c:	71da      	strb	r2, [r3, #7]
 800c18e:	2302      	movs	r3, #2
 800c190:	e0b9      	b.n	800c306 <f_read+0x2a2>
			sect += csect;
 800c192:	7dfb      	ldrb	r3, [r7, #23]
 800c194:	693a      	ldr	r2, [r7, #16]
 800c196:	4413      	add	r3, r2
 800c198:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1aa:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d052      	beq.n	800c258 <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c1b2:	7dfa      	ldrb	r2, [r7, #23]
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	4413      	add	r3, r2
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	6812      	ldr	r2, [r2, #0]
 800c1bc:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d907      	bls.n	800c1d4 <f_read+0x170>
					cc = fp->fs->csize - csect;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	7dfb      	ldrb	r3, [r7, #23]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	6a39      	ldr	r1, [r7, #32]
 800c1e2:	f7fd faeb 	bl	80097bc <disk_read>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	71da      	strb	r2, [r3, #7]
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e087      	b.n	800c306 <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d020      	beq.n	800c244 <f_read+0x1e0>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c210:	429a      	cmp	r2, r3
 800c212:	d917      	bls.n	800c244 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	6812      	ldr	r2, [r2, #0]
 800c224:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c228:	fb02 f303 	mul.w	r3, r2, r3
 800c22c:	6a3a      	ldr	r2, [r7, #32]
 800c22e:	18d0      	adds	r0, r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4619      	mov	r1, r3
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c23e:	461a      	mov	r2, r3
 800c240:	f7fd fb1a 	bl	8009878 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c24c:	461a      	mov	r2, r3
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	fb02 f303 	mul.w	r3, r2, r3
 800c254:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800c256:	e03d      	b.n	800c2d4 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c266:	4618      	mov	r0, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	6812      	ldr	r2, [r2, #0]
 800c270:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c274:	fbb3 f1f2 	udiv	r1, r3, r2
 800c278:	fb02 f201 	mul.w	r2, r2, r1
 800c27c:	1a9b      	subs	r3, r3, r2
 800c27e:	1ac3      	subs	r3, r0, r3
 800c280:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800c282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	429a      	cmp	r2, r3
 800c288:	d901      	bls.n	800c28e <f_read+0x22a>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	4619      	mov	r1, r3
 800c298:	4610      	mov	r0, r2
 800c29a:	f7fd fd5a 	bl	8009d52 <move_window>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d004      	beq.n	800c2ae <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	71da      	strb	r2, [r3, #7]
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e02b      	b.n	800c306 <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6819      	ldr	r1, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	6812      	ldr	r2, [r2, #0]
 800c2ba:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c2be:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2c2:	fb02 f200 	mul.w	r2, r2, r0
 800c2c6:	1a9b      	subs	r3, r3, r2
 800c2c8:	440b      	add	r3, r1
 800c2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6a38      	ldr	r0, [r7, #32]
 800c2d0:	f7fd fad2 	bl	8009878 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c2d4:	6a3a      	ldr	r2, [r7, #32]
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	4413      	add	r3, r2
 800c2da:	623b      	str	r3, [r7, #32]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	689a      	ldr	r2, [r3, #8]
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	441a      	add	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	609a      	str	r2, [r3, #8]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	441a      	add	r2, r3
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f47f aee3 	bne.w	800c0ca <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3730      	adds	r7, #48	; 0x30
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b08a      	sub	sp, #40	; 0x28
 800c312:	af00      	add	r7, sp, #0
 800c314:	60f8      	str	r0, [r7, #12]
 800c316:	60b9      	str	r1, [r7, #8]
 800c318:	607a      	str	r2, [r7, #4]
 800c31a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	2200      	movs	r2, #0
 800c324:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f7ff fca6 	bl	800bc78 <validate>
 800c32c:	4603      	mov	r3, r0
 800c32e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <f_write+0x2c>
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	e191      	b.n	800c65e <f_write+0x350>
	if (fp->err)							/* Check error */
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	79db      	ldrb	r3, [r3, #7]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d002      	beq.n	800c348 <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	79db      	ldrb	r3, [r3, #7]
 800c346:	e18a      	b.n	800c65e <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	799b      	ldrb	r3, [r3, #6]
 800c34c:	f003 0302 	and.w	r3, r3, #2
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c354:	2307      	movs	r3, #7
 800c356:	e182      	b.n	800c65e <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	689a      	ldr	r2, [r3, #8]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	441a      	add	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	429a      	cmp	r2, r3
 800c366:	f080 8162 	bcs.w	800c62e <f_write+0x320>
 800c36a:	2300      	movs	r3, #0
 800c36c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800c36e:	e15e      	b.n	800c62e <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	6812      	ldr	r2, [r2, #0]
 800c378:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c37c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c380:	fb02 f201 	mul.w	r2, r2, r1
 800c384:	1a9b      	subs	r3, r3, r2
 800c386:	2b00      	cmp	r3, #0
 800c388:	f040 80fd 	bne.w	800c586 <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	6812      	ldr	r2, [r2, #0]
 800c394:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c398:	fbb3 f3f2 	udiv	r3, r3, r2
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800c3ae:	7dbb      	ldrb	r3, [r7, #22]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d145      	bne.n	800c440 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10d      	bne.n	800c3d8 <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d11c      	bne.n	800c402 <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe f844 	bl	800a45c <create_chain>
 800c3d4:	6278      	str	r0, [r7, #36]	; 0x24
 800c3d6:	e014      	b.n	800c402 <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d007      	beq.n	800c3f0 <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f7fe f8d5 	bl	800a596 <clmt_clust>
 800c3ec:	6278      	str	r0, [r7, #36]	; 0x24
 800c3ee:	e008      	b.n	800c402 <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	4610      	mov	r0, r2
 800c3fc:	f7fe f82e 	bl	800a45c <create_chain>
 800c400:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 8117 	beq.w	800c638 <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d104      	bne.n	800c41a <f_write+0x10c>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2202      	movs	r2, #2
 800c414:	71da      	strb	r2, [r3, #7]
 800c416:	2302      	movs	r3, #2
 800c418:	e121      	b.n	800c65e <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c420:	d104      	bne.n	800c42c <f_write+0x11e>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2201      	movs	r2, #1
 800c426:	71da      	strb	r2, [r3, #7]
 800c428:	2301      	movs	r3, #1
 800c42a:	e118      	b.n	800c65e <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c430:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d102      	bne.n	800c440 <f_write+0x132>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c43e:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d10c      	bne.n	800c46a <f_write+0x15c>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4618      	mov	r0, r3
 800c456:	f7fd fc33 	bl	8009cc0 <sync_window>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d004      	beq.n	800c46a <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2201      	movs	r2, #1
 800c464:	71da      	strb	r2, [r3, #7]
 800c466:	2301      	movs	r3, #1
 800c468:	e0f9      	b.n	800c65e <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	4619      	mov	r1, r3
 800c474:	4610      	mov	r0, r2
 800c476:	f7fd fd48 	bl	8009f0a <clust2sect>
 800c47a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d104      	bne.n	800c48c <f_write+0x17e>
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2202      	movs	r2, #2
 800c486:	71da      	strb	r2, [r3, #7]
 800c488:	2302      	movs	r3, #2
 800c48a:	e0e8      	b.n	800c65e <f_write+0x350>
			sect += csect;
 800c48c:	7dbb      	ldrb	r3, [r7, #22]
 800c48e:	693a      	ldr	r2, [r7, #16]
 800c490:	4413      	add	r3, r2
 800c492:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c49c:	461a      	mov	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a4:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d051      	beq.n	800c550 <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c4ac:	7dba      	ldrb	r2, [r7, #22]
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	6812      	ldr	r2, [r2, #0]
 800c4b6:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d907      	bls.n	800c4ce <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	7dbb      	ldrb	r3, [r7, #22]
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	69b9      	ldr	r1, [r7, #24]
 800c4dc:	f7fd f98e 	bl	80097fc <disk_write>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	71da      	strb	r2, [r3, #7]
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e0b6      	b.n	800c65e <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d91c      	bls.n	800c53c <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4618      	mov	r0, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	6812      	ldr	r2, [r2, #0]
 800c518:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c51c:	fb02 f303 	mul.w	r3, r2, r3
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	18d1      	adds	r1, r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c52c:	461a      	mov	r2, r3
 800c52e:	f7fd f9a3 	bl	8009878 <mem_cpy>
					fp->fs->wflag = 0;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2200      	movs	r2, #0
 800c538:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c544:	461a      	mov	r2, r3
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	fb02 f303 	mul.w	r3, r2, r3
 800c54c:	623b      	str	r3, [r7, #32]
				continue;
 800c54e:	e05a      	b.n	800c606 <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	689a      	ldr	r2, [r3, #8]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d311      	bcc.n	800c580 <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4618      	mov	r0, r3
 800c562:	f7fd fbad 	bl	8009cc0 <sync_window>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d004      	beq.n	800c576 <f_write+0x268>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	71da      	strb	r2, [r3, #7]
 800c572:	2301      	movs	r3, #1
 800c574:	e073      	b.n	800c65e <f_write+0x350>
				fp->fs->winsect = sect;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c58e:	4618      	mov	r0, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	6812      	ldr	r2, [r2, #0]
 800c598:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c59c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5a0:	fb02 f201 	mul.w	r2, r2, r1
 800c5a4:	1a9b      	subs	r3, r3, r2
 800c5a6:	1ac3      	subs	r3, r0, r3
 800c5a8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800c5aa:	6a3a      	ldr	r2, [r7, #32]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d901      	bls.n	800c5b6 <f_write+0x2a8>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f7fd fbc6 	bl	8009d52 <move_window>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d004      	beq.n	800c5d6 <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	71da      	strb	r2, [r3, #7]
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e043      	b.n	800c65e <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6819      	ldr	r1, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	68fa      	ldr	r2, [r7, #12]
 800c5e0:	6812      	ldr	r2, [r2, #0]
 800c5e2:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c5e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5ea:	fb02 f200 	mul.w	r2, r2, r0
 800c5ee:	1a9b      	subs	r3, r3, r2
 800c5f0:	440b      	add	r3, r1
 800c5f2:	6a3a      	ldr	r2, [r7, #32]
 800c5f4:	69b9      	ldr	r1, [r7, #24]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fd f93e 	bl	8009878 <mem_cpy>
		fp->fs->wflag = 1;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800c606:	69ba      	ldr	r2, [r7, #24]
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	4413      	add	r3, r2
 800c60c:	61bb      	str	r3, [r7, #24]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	689a      	ldr	r2, [r3, #8]
 800c612:	6a3b      	ldr	r3, [r7, #32]
 800c614:	441a      	add	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	609a      	str	r2, [r3, #8]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	6a3b      	ldr	r3, [r7, #32]
 800c620:	441a      	add	r2, r3
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	601a      	str	r2, [r3, #0]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	f47f ae9d 	bne.w	800c370 <f_write+0x62>
 800c636:	e000      	b.n	800c63a <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c638:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	429a      	cmp	r2, r3
 800c644:	d903      	bls.n	800c64e <f_write+0x340>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	689a      	ldr	r2, [r3, #8]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	799b      	ldrb	r3, [r3, #6]
 800c652:	f043 0320 	orr.w	r3, r3, #32
 800c656:	b2da      	uxtb	r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3728      	adds	r7, #40	; 0x28
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b086      	sub	sp, #24
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff fb02 	bl	800bc78 <validate>
 800c674:	4603      	mov	r3, r0
 800c676:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c678:	7dfb      	ldrb	r3, [r7, #23]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d178      	bne.n	800c770 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	799b      	ldrb	r3, [r3, #6]
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b00      	cmp	r3, #0
 800c688:	d072      	beq.n	800c770 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	69db      	ldr	r3, [r3, #28]
 800c692:	4619      	mov	r1, r3
 800c694:	4610      	mov	r0, r2
 800c696:	f7fd fb5c 	bl	8009d52 <move_window>
 800c69a:	4603      	mov	r3, r0
 800c69c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d165      	bne.n	800c770 <f_sync+0x10a>
				dir = fp->dir_ptr;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a1b      	ldr	r3, [r3, #32]
 800c6a8:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	330b      	adds	r3, #11
 800c6ae:	781a      	ldrb	r2, [r3, #0]
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	330b      	adds	r3, #11
 800c6b4:	f042 0220 	orr.w	r2, r2, #32
 800c6b8:	b2d2      	uxtb	r2, r2
 800c6ba:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68da      	ldr	r2, [r3, #12]
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	331c      	adds	r3, #28
 800c6c4:	b2d2      	uxtb	r2, r2
 800c6c6:	701a      	strb	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	0a1b      	lsrs	r3, r3, #8
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	331d      	adds	r3, #29
 800c6d6:	b2d2      	uxtb	r2, r2
 800c6d8:	701a      	strb	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	0c1a      	lsrs	r2, r3, #16
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	331e      	adds	r3, #30
 800c6e4:	b2d2      	uxtb	r2, r2
 800c6e6:	701a      	strb	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	0e1a      	lsrs	r2, r3, #24
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	331f      	adds	r3, #31
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6938      	ldr	r0, [r7, #16]
 800c6fe:	f7fe f98e 	bl	800aa1e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c702:	f7fc ffb5 	bl	8009670 <get_fattime>
 800c706:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	3316      	adds	r3, #22
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	b29b      	uxth	r3, r3
 800c716:	0a1b      	lsrs	r3, r3, #8
 800c718:	b29a      	uxth	r2, r3
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	3317      	adds	r3, #23
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	0c1a      	lsrs	r2, r3, #16
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	3318      	adds	r3, #24
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	701a      	strb	r2, [r3, #0]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	0e1a      	lsrs	r2, r3, #24
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	3319      	adds	r3, #25
 800c736:	b2d2      	uxtb	r2, r2
 800c738:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	3312      	adds	r3, #18
 800c73e:	2200      	movs	r2, #0
 800c740:	701a      	strb	r2, [r3, #0]
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	3313      	adds	r3, #19
 800c746:	2200      	movs	r2, #0
 800c748:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	799b      	ldrb	r3, [r3, #6]
 800c74e:	f023 0320 	bic.w	r3, r3, #32
 800c752:	b2da      	uxtb	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4618      	mov	r0, r3
 800c768:	f7fd fb21 	bl	8009dae <sync_fs>
 800c76c:	4603      	mov	r3, r0
 800c76e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c770:	7dfb      	ldrb	r3, [r7, #23]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b084      	sub	sp, #16
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff ff6f 	bl	800c666 <f_sync>
 800c788:	4603      	mov	r3, r0
 800c78a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d114      	bne.n	800c7bc <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff fa70 	bl	800bc78 <validate>
 800c798:	4603      	mov	r3, r0
 800c79a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10c      	bne.n	800c7bc <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fd fa1c 	bl	8009be4 <dec_lock>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d102      	bne.n	800c7bc <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b090      	sub	sp, #64	; 0x40
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fa51 	bl	800bc78 <validate>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c7dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d002      	beq.n	800c7ea <f_lseek+0x24>
 800c7e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7e8:	e1c4      	b.n	800cb74 <f_lseek+0x3ae>
	if (fp->err)						/* Check error */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	79db      	ldrb	r3, [r3, #7]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <f_lseek+0x32>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	79db      	ldrb	r3, [r3, #7]
 800c7f6:	e1bd      	b.n	800cb74 <f_lseek+0x3ae>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80b4 	beq.w	800c96a <f_lseek+0x1a4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c808:	d15d      	bne.n	800c8c6 <f_lseek+0x100>
			tbl = fp->cltbl;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	1d1a      	adds	r2, r3, #4
 800c814:	627a      	str	r2, [r7, #36]	; 0x24
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	617b      	str	r3, [r7, #20]
 800c81a:	2302      	movs	r3, #2
 800c81c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c826:	2b00      	cmp	r3, #0
 800c828:	d03d      	beq.n	800c8a6 <f_lseek+0xe0>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	613b      	str	r3, [r7, #16]
 800c82e:	2300      	movs	r3, #0
 800c830:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c834:	3302      	adds	r3, #2
 800c836:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	3301      	adds	r3, #1
 800c840:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fd fb7f 	bl	8009f4c <get_fat>
 800c84e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	2b01      	cmp	r3, #1
 800c854:	d804      	bhi.n	800c860 <f_lseek+0x9a>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2202      	movs	r2, #2
 800c85a:	71da      	strb	r2, [r3, #7]
 800c85c:	2302      	movs	r3, #2
 800c85e:	e189      	b.n	800cb74 <f_lseek+0x3ae>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c866:	d104      	bne.n	800c872 <f_lseek+0xac>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	71da      	strb	r2, [r3, #7]
 800c86e:	2301      	movs	r3, #1
 800c870:	e180      	b.n	800cb74 <f_lseek+0x3ae>
					} while (cl == pcl + 1);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3301      	adds	r3, #1
 800c876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c878:	429a      	cmp	r2, r3
 800c87a:	d0dd      	beq.n	800c838 <f_lseek+0x72>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c87c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	429a      	cmp	r2, r3
 800c882:	d809      	bhi.n	800c898 <f_lseek+0xd2>
						*tbl++ = ncl; *tbl++ = tcl;
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	1d1a      	adds	r2, r3, #4
 800c888:	627a      	str	r2, [r7, #36]	; 0x24
 800c88a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	1d1a      	adds	r2, r3, #4
 800c892:	627a      	str	r2, [r7, #36]	; 0x24
 800c894:	693a      	ldr	r2, [r7, #16]
 800c896:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800c8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d3c1      	bcc.n	800c82a <f_lseek+0x64>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8ac:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800c8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d803      	bhi.n	800c8be <f_lseek+0xf8>
				*tbl = 0;		/* Terminate table */
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	e158      	b.n	800cb70 <f_lseek+0x3aa>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c8be:	2311      	movs	r3, #17
 800c8c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c8c4:	e154      	b.n	800cb70 <f_lseek+0x3aa>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d902      	bls.n	800c8d6 <f_lseek+0x110>
				ofs = fp->fsize;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	683a      	ldr	r2, [r7, #0]
 800c8da:	609a      	str	r2, [r3, #8]
			if (ofs) {
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f000 8146 	beq.w	800cb70 <f_lseek+0x3aa>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7fd fe53 	bl	800a596 <clmt_clust>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7fd fb02 	bl	8009f0a <clust2sect>
 800c906:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d104      	bne.n	800c918 <f_lseek+0x152>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2202      	movs	r2, #2
 800c912:	71da      	strb	r2, [r3, #7]
 800c914:	2302      	movs	r3, #2
 800c916:	e12d      	b.n	800cb74 <f_lseek+0x3ae>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c924:	fbb3 f3f2 	udiv	r3, r3, r2
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	6812      	ldr	r2, [r2, #0]
 800c92c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800c930:	3a01      	subs	r2, #1
 800c932:	4013      	ands	r3, r2
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	4413      	add	r3, r2
 800c938:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	6812      	ldr	r2, [r2, #0]
 800c942:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800c946:	fbb3 f1f2 	udiv	r1, r3, r2
 800c94a:	fb02 f201 	mul.w	r2, r2, r1
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 810d 	beq.w	800cb70 <f_lseek+0x3aa>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	69ba      	ldr	r2, [r7, #24]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	f000 8107 	beq.w	800cb70 <f_lseek+0x3aa>
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
						ABORT(fp->fs, FR_DISK_ERR);
#endif
					fp->dsect = dsc;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	69ba      	ldr	r2, [r7, #24]
 800c966:	619a      	str	r2, [r3, #24]
 800c968:	e102      	b.n	800cb70 <f_lseek+0x3aa>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	429a      	cmp	r2, r3
 800c972:	d908      	bls.n	800c986 <f_lseek+0x1c0>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	799b      	ldrb	r3, [r3, #6]
 800c978:	f003 0302 	and.w	r3, r3, #2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <f_lseek+0x1c0>
#endif
			) ofs = fp->fsize;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	637b      	str	r3, [r7, #52]	; 0x34
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c994:	609a      	str	r2, [r3, #8]
		if (ofs) {
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 80c3 	beq.w	800cb24 <f_lseek+0x35e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c9b0:	fb03 f302 	mul.w	r3, r3, r2
 800c9b4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01b      	beq.n	800c9f4 <f_lseek+0x22e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	1e5a      	subs	r2, r3, #1
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9c6:	6a3b      	ldr	r3, [r7, #32]
 800c9c8:	1e59      	subs	r1, r3, #1
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d30f      	bcc.n	800c9f4 <f_lseek+0x22e>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800c9d4:	6a3b      	ldr	r3, [r7, #32]
 800c9d6:	1e5a      	subs	r2, r3, #1
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	425b      	negs	r3, r3
 800c9dc:	401a      	ands	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	695b      	ldr	r3, [r3, #20]
 800c9f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9f2:	e023      	b.n	800ca3c <f_lseek+0x276>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d11a      	bne.n	800ca36 <f_lseek+0x270>
					clst = create_chain(fp->fs, 0);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2100      	movs	r1, #0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fd fd28 	bl	800a45c <create_chain>
 800ca0c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d104      	bne.n	800ca1e <f_lseek+0x258>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2202      	movs	r2, #2
 800ca18:	71da      	strb	r2, [r3, #7]
 800ca1a:	2302      	movs	r3, #2
 800ca1c:	e0aa      	b.n	800cb74 <f_lseek+0x3ae>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca24:	d104      	bne.n	800ca30 <f_lseek+0x26a>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	71da      	strb	r2, [r3, #7]
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e0a1      	b.n	800cb74 <f_lseek+0x3ae>
					fp->sclust = clst;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca34:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca3a:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d070      	beq.n	800cb24 <f_lseek+0x35e>
				while (ofs > bcs) {						/* Cluster following loop */
 800ca42:	e03e      	b.n	800cac2 <f_lseek+0x2fc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	799b      	ldrb	r3, [r3, #6]
 800ca48:	f003 0302 	and.w	r3, r3, #2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00c      	beq.n	800ca6a <f_lseek+0x2a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fd fd00 	bl	800a45c <create_chain>
 800ca5c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d109      	bne.n	800ca78 <f_lseek+0x2b2>
							ofs = bcs; break;
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	e02f      	b.n	800caca <f_lseek+0x304>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fd fa6b 	bl	8009f4c <get_fat>
 800ca76:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7e:	d104      	bne.n	800ca8a <f_lseek+0x2c4>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	71da      	strb	r2, [r3, #7]
 800ca86:	2301      	movs	r3, #1
 800ca88:	e074      	b.n	800cb74 <f_lseek+0x3ae>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d906      	bls.n	800ca9e <f_lseek+0x2d8>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800ca98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d304      	bcc.n	800caa8 <f_lseek+0x2e2>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2202      	movs	r2, #2
 800caa2:	71da      	strb	r2, [r3, #7]
 800caa4:	2302      	movs	r3, #2
 800caa6:	e065      	b.n	800cb74 <f_lseek+0x3ae>
					fp->clust = clst;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caac:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	689a      	ldr	r2, [r3, #8]
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	441a      	add	r2, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800cac2:	683a      	ldr	r2, [r7, #0]
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d8bc      	bhi.n	800ca44 <f_lseek+0x27e>
				}
				fp->fptr += ofs;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	689a      	ldr	r2, [r3, #8]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	441a      	add	r2, r3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800cade:	461a      	mov	r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cae6:	fb02 f201 	mul.w	r2, r2, r1
 800caea:	1a9b      	subs	r3, r3, r2
 800caec:	2b00      	cmp	r3, #0
 800caee:	d019      	beq.n	800cb24 <f_lseek+0x35e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fd fa07 	bl	8009f0a <clust2sect>
 800cafc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800cafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d104      	bne.n	800cb0e <f_lseek+0x348>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2202      	movs	r2, #2
 800cb08:	71da      	strb	r2, [r3, #7]
 800cb0a:	2302      	movs	r3, #2
 800cb0c:	e032      	b.n	800cb74 <f_lseek+0x3ae>
					nsect += ofs / SS(fp->fs);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800cb16:	461a      	mov	r2, r3
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb20:	4413      	add	r3, r2
 800cb22:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	6812      	ldr	r2, [r2, #0]
 800cb2c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800cb30:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb34:	fb02 f201 	mul.w	r2, r2, r1
 800cb38:	1a9b      	subs	r3, r3, r2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d007      	beq.n	800cb4e <f_lseek+0x388>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	699b      	ldr	r3, [r3, #24]
 800cb42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d002      	beq.n	800cb4e <f_lseek+0x388>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb4c:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	689a      	ldr	r2, [r3, #8]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d90a      	bls.n	800cb70 <f_lseek+0x3aa>
			fp->fsize = fp->fptr;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	689a      	ldr	r2, [r3, #8]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	799b      	ldrb	r3, [r3, #6]
 800cb66:	f043 0320 	orr.w	r3, r3, #32
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800cb70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3740      	adds	r7, #64	; 0x40
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b087      	sub	sp, #28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	4613      	mov	r3, r2
 800cb88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800cb92:	4b1e      	ldr	r3, [pc, #120]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cb94:	7a5b      	ldrb	r3, [r3, #9]
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d831      	bhi.n	800cc00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb9c:	4b1b      	ldr	r3, [pc, #108]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cb9e:	7a5b      	ldrb	r3, [r3, #9]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	461a      	mov	r2, r3
 800cba4:	4b19      	ldr	r3, [pc, #100]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cba6:	2100      	movs	r1, #0
 800cba8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800cbaa:	4b18      	ldr	r3, [pc, #96]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cbac:	7a5b      	ldrb	r3, [r3, #9]
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	4a16      	ldr	r2, [pc, #88]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800cbba:	4b14      	ldr	r3, [pc, #80]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cbbc:	7a5b      	ldrb	r3, [r3, #9]
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	4b12      	ldr	r3, [pc, #72]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cbc4:	4413      	add	r3, r2
 800cbc6:	79fa      	ldrb	r2, [r7, #7]
 800cbc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cbca:	4b10      	ldr	r3, [pc, #64]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cbcc:	7a5b      	ldrb	r3, [r3, #9]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	b2d1      	uxtb	r1, r2
 800cbd4:	4a0d      	ldr	r2, [pc, #52]	; (800cc0c <FATFS_LinkDriverEx+0x90>)
 800cbd6:	7251      	strb	r1, [r2, #9]
 800cbd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cbda:	7dbb      	ldrb	r3, [r7, #22]
 800cbdc:	3330      	adds	r3, #48	; 0x30
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	223a      	movs	r2, #58	; 0x3a
 800cbea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	3302      	adds	r3, #2
 800cbf0:	222f      	movs	r2, #47	; 0x2f
 800cbf2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	3303      	adds	r3, #3
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	371c      	adds	r7, #28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bc80      	pop	{r7}
 800cc0a:	4770      	bx	lr
 800cc0c:	200002cc 	.word	0x200002cc

0800cc10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff ffac 	bl	800cb7c <FATFS_LinkDriverEx>
 800cc24:	4603      	mov	r3, r0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
	...

0800cc30 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	6039      	str	r1, [r7, #0]
 800cc3a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cc3c:	88fb      	ldrh	r3, [r7, #6]
 800cc3e:	2b7f      	cmp	r3, #127	; 0x7f
 800cc40:	d802      	bhi.n	800cc48 <ff_convert+0x18>
		c = chr;
 800cc42:	88fb      	ldrh	r3, [r7, #6]
 800cc44:	81fb      	strh	r3, [r7, #14]
 800cc46:	e025      	b.n	800cc94 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00b      	beq.n	800cc66 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cc4e:	88fb      	ldrh	r3, [r7, #6]
 800cc50:	2bff      	cmp	r3, #255	; 0xff
 800cc52:	d805      	bhi.n	800cc60 <ff_convert+0x30>
 800cc54:	88fb      	ldrh	r3, [r7, #6]
 800cc56:	3b80      	subs	r3, #128	; 0x80
 800cc58:	4a11      	ldr	r2, [pc, #68]	; (800cca0 <ff_convert+0x70>)
 800cc5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc5e:	e000      	b.n	800cc62 <ff_convert+0x32>
 800cc60:	2300      	movs	r3, #0
 800cc62:	81fb      	strh	r3, [r7, #14]
 800cc64:	e016      	b.n	800cc94 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800cc66:	2300      	movs	r3, #0
 800cc68:	81fb      	strh	r3, [r7, #14]
 800cc6a:	e009      	b.n	800cc80 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cc6c:	89fb      	ldrh	r3, [r7, #14]
 800cc6e:	4a0c      	ldr	r2, [pc, #48]	; (800cca0 <ff_convert+0x70>)
 800cc70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc74:	88fa      	ldrh	r2, [r7, #6]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d006      	beq.n	800cc88 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cc7a:	89fb      	ldrh	r3, [r7, #14]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	81fb      	strh	r3, [r7, #14]
 800cc80:	89fb      	ldrh	r3, [r7, #14]
 800cc82:	2b7f      	cmp	r3, #127	; 0x7f
 800cc84:	d9f2      	bls.n	800cc6c <ff_convert+0x3c>
 800cc86:	e000      	b.n	800cc8a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cc88:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cc8a:	89fb      	ldrh	r3, [r7, #14]
 800cc8c:	3380      	adds	r3, #128	; 0x80
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cc94:	89fb      	ldrh	r3, [r7, #14]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bc80      	pop	{r7}
 800cc9e:	4770      	bx	lr
 800cca0:	0800d83c 	.word	0x0800d83c

0800cca4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60fb      	str	r3, [r7, #12]
 800ccb2:	e002      	b.n	800ccba <ff_wtoupper+0x16>
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	60fb      	str	r3, [r7, #12]
 800ccba:	4a0f      	ldr	r2, [pc, #60]	; (800ccf8 <ff_wtoupper+0x54>)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d006      	beq.n	800ccd4 <ff_wtoupper+0x30>
 800ccc6:	4a0c      	ldr	r2, [pc, #48]	; (800ccf8 <ff_wtoupper+0x54>)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccce:	88fa      	ldrh	r2, [r7, #6]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d1ef      	bne.n	800ccb4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800ccd4:	4a08      	ldr	r2, [pc, #32]	; (800ccf8 <ff_wtoupper+0x54>)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d004      	beq.n	800ccea <ff_wtoupper+0x46>
 800cce0:	4a06      	ldr	r2, [pc, #24]	; (800ccfc <ff_wtoupper+0x58>)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cce8:	e000      	b.n	800ccec <ff_wtoupper+0x48>
 800ccea:	88fb      	ldrh	r3, [r7, #6]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bc80      	pop	{r7}
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	0800d93c 	.word	0x0800d93c
 800ccfc:	0800db1c 	.word	0x0800db1c

0800cd00 <__errno>:
 800cd00:	4b01      	ldr	r3, [pc, #4]	; (800cd08 <__errno+0x8>)
 800cd02:	6818      	ldr	r0, [r3, #0]
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	20000024 	.word	0x20000024

0800cd0c <__libc_init_array>:
 800cd0c:	b570      	push	{r4, r5, r6, lr}
 800cd0e:	2600      	movs	r6, #0
 800cd10:	4d0c      	ldr	r5, [pc, #48]	; (800cd44 <__libc_init_array+0x38>)
 800cd12:	4c0d      	ldr	r4, [pc, #52]	; (800cd48 <__libc_init_array+0x3c>)
 800cd14:	1b64      	subs	r4, r4, r5
 800cd16:	10a4      	asrs	r4, r4, #2
 800cd18:	42a6      	cmp	r6, r4
 800cd1a:	d109      	bne.n	800cd30 <__libc_init_array+0x24>
 800cd1c:	f000 fc5c 	bl	800d5d8 <_init>
 800cd20:	2600      	movs	r6, #0
 800cd22:	4d0a      	ldr	r5, [pc, #40]	; (800cd4c <__libc_init_array+0x40>)
 800cd24:	4c0a      	ldr	r4, [pc, #40]	; (800cd50 <__libc_init_array+0x44>)
 800cd26:	1b64      	subs	r4, r4, r5
 800cd28:	10a4      	asrs	r4, r4, #2
 800cd2a:	42a6      	cmp	r6, r4
 800cd2c:	d105      	bne.n	800cd3a <__libc_init_array+0x2e>
 800cd2e:	bd70      	pop	{r4, r5, r6, pc}
 800cd30:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd34:	4798      	blx	r3
 800cd36:	3601      	adds	r6, #1
 800cd38:	e7ee      	b.n	800cd18 <__libc_init_array+0xc>
 800cd3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd3e:	4798      	blx	r3
 800cd40:	3601      	adds	r6, #1
 800cd42:	e7f2      	b.n	800cd2a <__libc_init_array+0x1e>
 800cd44:	0800dd30 	.word	0x0800dd30
 800cd48:	0800dd30 	.word	0x0800dd30
 800cd4c:	0800dd30 	.word	0x0800dd30
 800cd50:	0800dd34 	.word	0x0800dd34

0800cd54 <memset>:
 800cd54:	4603      	mov	r3, r0
 800cd56:	4402      	add	r2, r0
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d100      	bne.n	800cd5e <memset+0xa>
 800cd5c:	4770      	bx	lr
 800cd5e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd62:	e7f9      	b.n	800cd58 <memset+0x4>

0800cd64 <siprintf>:
 800cd64:	b40e      	push	{r1, r2, r3}
 800cd66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd6a:	b500      	push	{lr}
 800cd6c:	b09c      	sub	sp, #112	; 0x70
 800cd6e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd70:	9002      	str	r0, [sp, #8]
 800cd72:	9006      	str	r0, [sp, #24]
 800cd74:	9107      	str	r1, [sp, #28]
 800cd76:	9104      	str	r1, [sp, #16]
 800cd78:	4808      	ldr	r0, [pc, #32]	; (800cd9c <siprintf+0x38>)
 800cd7a:	4909      	ldr	r1, [pc, #36]	; (800cda0 <siprintf+0x3c>)
 800cd7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd80:	9105      	str	r1, [sp, #20]
 800cd82:	6800      	ldr	r0, [r0, #0]
 800cd84:	a902      	add	r1, sp, #8
 800cd86:	9301      	str	r3, [sp, #4]
 800cd88:	f000 f868 	bl	800ce5c <_svfiprintf_r>
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	9b02      	ldr	r3, [sp, #8]
 800cd90:	701a      	strb	r2, [r3, #0]
 800cd92:	b01c      	add	sp, #112	; 0x70
 800cd94:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd98:	b003      	add	sp, #12
 800cd9a:	4770      	bx	lr
 800cd9c:	20000024 	.word	0x20000024
 800cda0:	ffff0208 	.word	0xffff0208

0800cda4 <__ssputs_r>:
 800cda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda8:	688e      	ldr	r6, [r1, #8]
 800cdaa:	4682      	mov	sl, r0
 800cdac:	429e      	cmp	r6, r3
 800cdae:	460c      	mov	r4, r1
 800cdb0:	4690      	mov	r8, r2
 800cdb2:	461f      	mov	r7, r3
 800cdb4:	d838      	bhi.n	800ce28 <__ssputs_r+0x84>
 800cdb6:	898a      	ldrh	r2, [r1, #12]
 800cdb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdbc:	d032      	beq.n	800ce24 <__ssputs_r+0x80>
 800cdbe:	6825      	ldr	r5, [r4, #0]
 800cdc0:	6909      	ldr	r1, [r1, #16]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	eba5 0901 	sub.w	r9, r5, r1
 800cdc8:	6965      	ldr	r5, [r4, #20]
 800cdca:	444b      	add	r3, r9
 800cdcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdd4:	106d      	asrs	r5, r5, #1
 800cdd6:	429d      	cmp	r5, r3
 800cdd8:	bf38      	it	cc
 800cdda:	461d      	movcc	r5, r3
 800cddc:	0553      	lsls	r3, r2, #21
 800cdde:	d531      	bpl.n	800ce44 <__ssputs_r+0xa0>
 800cde0:	4629      	mov	r1, r5
 800cde2:	f000 fb53 	bl	800d48c <_malloc_r>
 800cde6:	4606      	mov	r6, r0
 800cde8:	b950      	cbnz	r0, 800ce00 <__ssputs_r+0x5c>
 800cdea:	230c      	movs	r3, #12
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	f8ca 3000 	str.w	r3, [sl]
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdfa:	81a3      	strh	r3, [r4, #12]
 800cdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce00:	464a      	mov	r2, r9
 800ce02:	6921      	ldr	r1, [r4, #16]
 800ce04:	f000 face 	bl	800d3a4 <memcpy>
 800ce08:	89a3      	ldrh	r3, [r4, #12]
 800ce0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce12:	81a3      	strh	r3, [r4, #12]
 800ce14:	6126      	str	r6, [r4, #16]
 800ce16:	444e      	add	r6, r9
 800ce18:	6026      	str	r6, [r4, #0]
 800ce1a:	463e      	mov	r6, r7
 800ce1c:	6165      	str	r5, [r4, #20]
 800ce1e:	eba5 0509 	sub.w	r5, r5, r9
 800ce22:	60a5      	str	r5, [r4, #8]
 800ce24:	42be      	cmp	r6, r7
 800ce26:	d900      	bls.n	800ce2a <__ssputs_r+0x86>
 800ce28:	463e      	mov	r6, r7
 800ce2a:	4632      	mov	r2, r6
 800ce2c:	4641      	mov	r1, r8
 800ce2e:	6820      	ldr	r0, [r4, #0]
 800ce30:	f000 fac6 	bl	800d3c0 <memmove>
 800ce34:	68a3      	ldr	r3, [r4, #8]
 800ce36:	6822      	ldr	r2, [r4, #0]
 800ce38:	1b9b      	subs	r3, r3, r6
 800ce3a:	4432      	add	r2, r6
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	60a3      	str	r3, [r4, #8]
 800ce40:	6022      	str	r2, [r4, #0]
 800ce42:	e7db      	b.n	800cdfc <__ssputs_r+0x58>
 800ce44:	462a      	mov	r2, r5
 800ce46:	f000 fb7b 	bl	800d540 <_realloc_r>
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d1e1      	bne.n	800ce14 <__ssputs_r+0x70>
 800ce50:	4650      	mov	r0, sl
 800ce52:	6921      	ldr	r1, [r4, #16]
 800ce54:	f000 face 	bl	800d3f4 <_free_r>
 800ce58:	e7c7      	b.n	800cdea <__ssputs_r+0x46>
	...

0800ce5c <_svfiprintf_r>:
 800ce5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce60:	4698      	mov	r8, r3
 800ce62:	898b      	ldrh	r3, [r1, #12]
 800ce64:	4607      	mov	r7, r0
 800ce66:	061b      	lsls	r3, r3, #24
 800ce68:	460d      	mov	r5, r1
 800ce6a:	4614      	mov	r4, r2
 800ce6c:	b09d      	sub	sp, #116	; 0x74
 800ce6e:	d50e      	bpl.n	800ce8e <_svfiprintf_r+0x32>
 800ce70:	690b      	ldr	r3, [r1, #16]
 800ce72:	b963      	cbnz	r3, 800ce8e <_svfiprintf_r+0x32>
 800ce74:	2140      	movs	r1, #64	; 0x40
 800ce76:	f000 fb09 	bl	800d48c <_malloc_r>
 800ce7a:	6028      	str	r0, [r5, #0]
 800ce7c:	6128      	str	r0, [r5, #16]
 800ce7e:	b920      	cbnz	r0, 800ce8a <_svfiprintf_r+0x2e>
 800ce80:	230c      	movs	r3, #12
 800ce82:	603b      	str	r3, [r7, #0]
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295
 800ce88:	e0d1      	b.n	800d02e <_svfiprintf_r+0x1d2>
 800ce8a:	2340      	movs	r3, #64	; 0x40
 800ce8c:	616b      	str	r3, [r5, #20]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	9309      	str	r3, [sp, #36]	; 0x24
 800ce92:	2320      	movs	r3, #32
 800ce94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce98:	2330      	movs	r3, #48	; 0x30
 800ce9a:	f04f 0901 	mov.w	r9, #1
 800ce9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d048 <_svfiprintf_r+0x1ec>
 800cea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceaa:	4623      	mov	r3, r4
 800ceac:	469a      	mov	sl, r3
 800ceae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceb2:	b10a      	cbz	r2, 800ceb8 <_svfiprintf_r+0x5c>
 800ceb4:	2a25      	cmp	r2, #37	; 0x25
 800ceb6:	d1f9      	bne.n	800ceac <_svfiprintf_r+0x50>
 800ceb8:	ebba 0b04 	subs.w	fp, sl, r4
 800cebc:	d00b      	beq.n	800ced6 <_svfiprintf_r+0x7a>
 800cebe:	465b      	mov	r3, fp
 800cec0:	4622      	mov	r2, r4
 800cec2:	4629      	mov	r1, r5
 800cec4:	4638      	mov	r0, r7
 800cec6:	f7ff ff6d 	bl	800cda4 <__ssputs_r>
 800ceca:	3001      	adds	r0, #1
 800cecc:	f000 80aa 	beq.w	800d024 <_svfiprintf_r+0x1c8>
 800ced0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ced2:	445a      	add	r2, fp
 800ced4:	9209      	str	r2, [sp, #36]	; 0x24
 800ced6:	f89a 3000 	ldrb.w	r3, [sl]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f000 80a2 	beq.w	800d024 <_svfiprintf_r+0x1c8>
 800cee0:	2300      	movs	r3, #0
 800cee2:	f04f 32ff 	mov.w	r2, #4294967295
 800cee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceea:	f10a 0a01 	add.w	sl, sl, #1
 800ceee:	9304      	str	r3, [sp, #16]
 800cef0:	9307      	str	r3, [sp, #28]
 800cef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cef6:	931a      	str	r3, [sp, #104]	; 0x68
 800cef8:	4654      	mov	r4, sl
 800cefa:	2205      	movs	r2, #5
 800cefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf00:	4851      	ldr	r0, [pc, #324]	; (800d048 <_svfiprintf_r+0x1ec>)
 800cf02:	f000 fa41 	bl	800d388 <memchr>
 800cf06:	9a04      	ldr	r2, [sp, #16]
 800cf08:	b9d8      	cbnz	r0, 800cf42 <_svfiprintf_r+0xe6>
 800cf0a:	06d0      	lsls	r0, r2, #27
 800cf0c:	bf44      	itt	mi
 800cf0e:	2320      	movmi	r3, #32
 800cf10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf14:	0711      	lsls	r1, r2, #28
 800cf16:	bf44      	itt	mi
 800cf18:	232b      	movmi	r3, #43	; 0x2b
 800cf1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf1e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf22:	2b2a      	cmp	r3, #42	; 0x2a
 800cf24:	d015      	beq.n	800cf52 <_svfiprintf_r+0xf6>
 800cf26:	4654      	mov	r4, sl
 800cf28:	2000      	movs	r0, #0
 800cf2a:	f04f 0c0a 	mov.w	ip, #10
 800cf2e:	9a07      	ldr	r2, [sp, #28]
 800cf30:	4621      	mov	r1, r4
 800cf32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf36:	3b30      	subs	r3, #48	; 0x30
 800cf38:	2b09      	cmp	r3, #9
 800cf3a:	d94e      	bls.n	800cfda <_svfiprintf_r+0x17e>
 800cf3c:	b1b0      	cbz	r0, 800cf6c <_svfiprintf_r+0x110>
 800cf3e:	9207      	str	r2, [sp, #28]
 800cf40:	e014      	b.n	800cf6c <_svfiprintf_r+0x110>
 800cf42:	eba0 0308 	sub.w	r3, r0, r8
 800cf46:	fa09 f303 	lsl.w	r3, r9, r3
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	46a2      	mov	sl, r4
 800cf4e:	9304      	str	r3, [sp, #16]
 800cf50:	e7d2      	b.n	800cef8 <_svfiprintf_r+0x9c>
 800cf52:	9b03      	ldr	r3, [sp, #12]
 800cf54:	1d19      	adds	r1, r3, #4
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	9103      	str	r1, [sp, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	bfbb      	ittet	lt
 800cf5e:	425b      	neglt	r3, r3
 800cf60:	f042 0202 	orrlt.w	r2, r2, #2
 800cf64:	9307      	strge	r3, [sp, #28]
 800cf66:	9307      	strlt	r3, [sp, #28]
 800cf68:	bfb8      	it	lt
 800cf6a:	9204      	strlt	r2, [sp, #16]
 800cf6c:	7823      	ldrb	r3, [r4, #0]
 800cf6e:	2b2e      	cmp	r3, #46	; 0x2e
 800cf70:	d10c      	bne.n	800cf8c <_svfiprintf_r+0x130>
 800cf72:	7863      	ldrb	r3, [r4, #1]
 800cf74:	2b2a      	cmp	r3, #42	; 0x2a
 800cf76:	d135      	bne.n	800cfe4 <_svfiprintf_r+0x188>
 800cf78:	9b03      	ldr	r3, [sp, #12]
 800cf7a:	3402      	adds	r4, #2
 800cf7c:	1d1a      	adds	r2, r3, #4
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	9203      	str	r2, [sp, #12]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	bfb8      	it	lt
 800cf86:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf8a:	9305      	str	r3, [sp, #20]
 800cf8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d058 <_svfiprintf_r+0x1fc>
 800cf90:	2203      	movs	r2, #3
 800cf92:	4650      	mov	r0, sl
 800cf94:	7821      	ldrb	r1, [r4, #0]
 800cf96:	f000 f9f7 	bl	800d388 <memchr>
 800cf9a:	b140      	cbz	r0, 800cfae <_svfiprintf_r+0x152>
 800cf9c:	2340      	movs	r3, #64	; 0x40
 800cf9e:	eba0 000a 	sub.w	r0, r0, sl
 800cfa2:	fa03 f000 	lsl.w	r0, r3, r0
 800cfa6:	9b04      	ldr	r3, [sp, #16]
 800cfa8:	3401      	adds	r4, #1
 800cfaa:	4303      	orrs	r3, r0
 800cfac:	9304      	str	r3, [sp, #16]
 800cfae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb2:	2206      	movs	r2, #6
 800cfb4:	4825      	ldr	r0, [pc, #148]	; (800d04c <_svfiprintf_r+0x1f0>)
 800cfb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfba:	f000 f9e5 	bl	800d388 <memchr>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d038      	beq.n	800d034 <_svfiprintf_r+0x1d8>
 800cfc2:	4b23      	ldr	r3, [pc, #140]	; (800d050 <_svfiprintf_r+0x1f4>)
 800cfc4:	bb1b      	cbnz	r3, 800d00e <_svfiprintf_r+0x1b2>
 800cfc6:	9b03      	ldr	r3, [sp, #12]
 800cfc8:	3307      	adds	r3, #7
 800cfca:	f023 0307 	bic.w	r3, r3, #7
 800cfce:	3308      	adds	r3, #8
 800cfd0:	9303      	str	r3, [sp, #12]
 800cfd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd4:	4433      	add	r3, r6
 800cfd6:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd8:	e767      	b.n	800ceaa <_svfiprintf_r+0x4e>
 800cfda:	460c      	mov	r4, r1
 800cfdc:	2001      	movs	r0, #1
 800cfde:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfe2:	e7a5      	b.n	800cf30 <_svfiprintf_r+0xd4>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f04f 0c0a 	mov.w	ip, #10
 800cfea:	4619      	mov	r1, r3
 800cfec:	3401      	adds	r4, #1
 800cfee:	9305      	str	r3, [sp, #20]
 800cff0:	4620      	mov	r0, r4
 800cff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff6:	3a30      	subs	r2, #48	; 0x30
 800cff8:	2a09      	cmp	r2, #9
 800cffa:	d903      	bls.n	800d004 <_svfiprintf_r+0x1a8>
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d0c5      	beq.n	800cf8c <_svfiprintf_r+0x130>
 800d000:	9105      	str	r1, [sp, #20]
 800d002:	e7c3      	b.n	800cf8c <_svfiprintf_r+0x130>
 800d004:	4604      	mov	r4, r0
 800d006:	2301      	movs	r3, #1
 800d008:	fb0c 2101 	mla	r1, ip, r1, r2
 800d00c:	e7f0      	b.n	800cff0 <_svfiprintf_r+0x194>
 800d00e:	ab03      	add	r3, sp, #12
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	462a      	mov	r2, r5
 800d014:	4638      	mov	r0, r7
 800d016:	4b0f      	ldr	r3, [pc, #60]	; (800d054 <_svfiprintf_r+0x1f8>)
 800d018:	a904      	add	r1, sp, #16
 800d01a:	f3af 8000 	nop.w
 800d01e:	1c42      	adds	r2, r0, #1
 800d020:	4606      	mov	r6, r0
 800d022:	d1d6      	bne.n	800cfd2 <_svfiprintf_r+0x176>
 800d024:	89ab      	ldrh	r3, [r5, #12]
 800d026:	065b      	lsls	r3, r3, #25
 800d028:	f53f af2c 	bmi.w	800ce84 <_svfiprintf_r+0x28>
 800d02c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d02e:	b01d      	add	sp, #116	; 0x74
 800d030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d034:	ab03      	add	r3, sp, #12
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	462a      	mov	r2, r5
 800d03a:	4638      	mov	r0, r7
 800d03c:	4b05      	ldr	r3, [pc, #20]	; (800d054 <_svfiprintf_r+0x1f8>)
 800d03e:	a904      	add	r1, sp, #16
 800d040:	f000 f87c 	bl	800d13c <_printf_i>
 800d044:	e7eb      	b.n	800d01e <_svfiprintf_r+0x1c2>
 800d046:	bf00      	nop
 800d048:	0800dcfc 	.word	0x0800dcfc
 800d04c:	0800dd06 	.word	0x0800dd06
 800d050:	00000000 	.word	0x00000000
 800d054:	0800cda5 	.word	0x0800cda5
 800d058:	0800dd02 	.word	0x0800dd02

0800d05c <_printf_common>:
 800d05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d060:	4616      	mov	r6, r2
 800d062:	4699      	mov	r9, r3
 800d064:	688a      	ldr	r2, [r1, #8]
 800d066:	690b      	ldr	r3, [r1, #16]
 800d068:	4607      	mov	r7, r0
 800d06a:	4293      	cmp	r3, r2
 800d06c:	bfb8      	it	lt
 800d06e:	4613      	movlt	r3, r2
 800d070:	6033      	str	r3, [r6, #0]
 800d072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d076:	460c      	mov	r4, r1
 800d078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d07c:	b10a      	cbz	r2, 800d082 <_printf_common+0x26>
 800d07e:	3301      	adds	r3, #1
 800d080:	6033      	str	r3, [r6, #0]
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	0699      	lsls	r1, r3, #26
 800d086:	bf42      	ittt	mi
 800d088:	6833      	ldrmi	r3, [r6, #0]
 800d08a:	3302      	addmi	r3, #2
 800d08c:	6033      	strmi	r3, [r6, #0]
 800d08e:	6825      	ldr	r5, [r4, #0]
 800d090:	f015 0506 	ands.w	r5, r5, #6
 800d094:	d106      	bne.n	800d0a4 <_printf_common+0x48>
 800d096:	f104 0a19 	add.w	sl, r4, #25
 800d09a:	68e3      	ldr	r3, [r4, #12]
 800d09c:	6832      	ldr	r2, [r6, #0]
 800d09e:	1a9b      	subs	r3, r3, r2
 800d0a0:	42ab      	cmp	r3, r5
 800d0a2:	dc28      	bgt.n	800d0f6 <_printf_common+0x9a>
 800d0a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0a8:	1e13      	subs	r3, r2, #0
 800d0aa:	6822      	ldr	r2, [r4, #0]
 800d0ac:	bf18      	it	ne
 800d0ae:	2301      	movne	r3, #1
 800d0b0:	0692      	lsls	r2, r2, #26
 800d0b2:	d42d      	bmi.n	800d110 <_printf_common+0xb4>
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0bc:	47c0      	blx	r8
 800d0be:	3001      	adds	r0, #1
 800d0c0:	d020      	beq.n	800d104 <_printf_common+0xa8>
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	68e5      	ldr	r5, [r4, #12]
 800d0c6:	f003 0306 	and.w	r3, r3, #6
 800d0ca:	2b04      	cmp	r3, #4
 800d0cc:	bf18      	it	ne
 800d0ce:	2500      	movne	r5, #0
 800d0d0:	6832      	ldr	r2, [r6, #0]
 800d0d2:	f04f 0600 	mov.w	r6, #0
 800d0d6:	68a3      	ldr	r3, [r4, #8]
 800d0d8:	bf08      	it	eq
 800d0da:	1aad      	subeq	r5, r5, r2
 800d0dc:	6922      	ldr	r2, [r4, #16]
 800d0de:	bf08      	it	eq
 800d0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	bfc4      	itt	gt
 800d0e8:	1a9b      	subgt	r3, r3, r2
 800d0ea:	18ed      	addgt	r5, r5, r3
 800d0ec:	341a      	adds	r4, #26
 800d0ee:	42b5      	cmp	r5, r6
 800d0f0:	d11a      	bne.n	800d128 <_printf_common+0xcc>
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	e008      	b.n	800d108 <_printf_common+0xac>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	4652      	mov	r2, sl
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	47c0      	blx	r8
 800d100:	3001      	adds	r0, #1
 800d102:	d103      	bne.n	800d10c <_printf_common+0xb0>
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d10c:	3501      	adds	r5, #1
 800d10e:	e7c4      	b.n	800d09a <_printf_common+0x3e>
 800d110:	2030      	movs	r0, #48	; 0x30
 800d112:	18e1      	adds	r1, r4, r3
 800d114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d11e:	4422      	add	r2, r4
 800d120:	3302      	adds	r3, #2
 800d122:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d126:	e7c5      	b.n	800d0b4 <_printf_common+0x58>
 800d128:	2301      	movs	r3, #1
 800d12a:	4622      	mov	r2, r4
 800d12c:	4649      	mov	r1, r9
 800d12e:	4638      	mov	r0, r7
 800d130:	47c0      	blx	r8
 800d132:	3001      	adds	r0, #1
 800d134:	d0e6      	beq.n	800d104 <_printf_common+0xa8>
 800d136:	3601      	adds	r6, #1
 800d138:	e7d9      	b.n	800d0ee <_printf_common+0x92>
	...

0800d13c <_printf_i>:
 800d13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d140:	460c      	mov	r4, r1
 800d142:	7e27      	ldrb	r7, [r4, #24]
 800d144:	4691      	mov	r9, r2
 800d146:	2f78      	cmp	r7, #120	; 0x78
 800d148:	4680      	mov	r8, r0
 800d14a:	469a      	mov	sl, r3
 800d14c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d14e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d152:	d807      	bhi.n	800d164 <_printf_i+0x28>
 800d154:	2f62      	cmp	r7, #98	; 0x62
 800d156:	d80a      	bhi.n	800d16e <_printf_i+0x32>
 800d158:	2f00      	cmp	r7, #0
 800d15a:	f000 80d9 	beq.w	800d310 <_printf_i+0x1d4>
 800d15e:	2f58      	cmp	r7, #88	; 0x58
 800d160:	f000 80a4 	beq.w	800d2ac <_printf_i+0x170>
 800d164:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d16c:	e03a      	b.n	800d1e4 <_printf_i+0xa8>
 800d16e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d172:	2b15      	cmp	r3, #21
 800d174:	d8f6      	bhi.n	800d164 <_printf_i+0x28>
 800d176:	a001      	add	r0, pc, #4	; (adr r0, 800d17c <_printf_i+0x40>)
 800d178:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d17c:	0800d1d5 	.word	0x0800d1d5
 800d180:	0800d1e9 	.word	0x0800d1e9
 800d184:	0800d165 	.word	0x0800d165
 800d188:	0800d165 	.word	0x0800d165
 800d18c:	0800d165 	.word	0x0800d165
 800d190:	0800d165 	.word	0x0800d165
 800d194:	0800d1e9 	.word	0x0800d1e9
 800d198:	0800d165 	.word	0x0800d165
 800d19c:	0800d165 	.word	0x0800d165
 800d1a0:	0800d165 	.word	0x0800d165
 800d1a4:	0800d165 	.word	0x0800d165
 800d1a8:	0800d2f7 	.word	0x0800d2f7
 800d1ac:	0800d219 	.word	0x0800d219
 800d1b0:	0800d2d9 	.word	0x0800d2d9
 800d1b4:	0800d165 	.word	0x0800d165
 800d1b8:	0800d165 	.word	0x0800d165
 800d1bc:	0800d319 	.word	0x0800d319
 800d1c0:	0800d165 	.word	0x0800d165
 800d1c4:	0800d219 	.word	0x0800d219
 800d1c8:	0800d165 	.word	0x0800d165
 800d1cc:	0800d165 	.word	0x0800d165
 800d1d0:	0800d2e1 	.word	0x0800d2e1
 800d1d4:	680b      	ldr	r3, [r1, #0]
 800d1d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1da:	1d1a      	adds	r2, r3, #4
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	600a      	str	r2, [r1, #0]
 800d1e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e0a4      	b.n	800d332 <_printf_i+0x1f6>
 800d1e8:	6825      	ldr	r5, [r4, #0]
 800d1ea:	6808      	ldr	r0, [r1, #0]
 800d1ec:	062e      	lsls	r6, r5, #24
 800d1ee:	f100 0304 	add.w	r3, r0, #4
 800d1f2:	d50a      	bpl.n	800d20a <_printf_i+0xce>
 800d1f4:	6805      	ldr	r5, [r0, #0]
 800d1f6:	600b      	str	r3, [r1, #0]
 800d1f8:	2d00      	cmp	r5, #0
 800d1fa:	da03      	bge.n	800d204 <_printf_i+0xc8>
 800d1fc:	232d      	movs	r3, #45	; 0x2d
 800d1fe:	426d      	negs	r5, r5
 800d200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d204:	230a      	movs	r3, #10
 800d206:	485e      	ldr	r0, [pc, #376]	; (800d380 <_printf_i+0x244>)
 800d208:	e019      	b.n	800d23e <_printf_i+0x102>
 800d20a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d20e:	6805      	ldr	r5, [r0, #0]
 800d210:	600b      	str	r3, [r1, #0]
 800d212:	bf18      	it	ne
 800d214:	b22d      	sxthne	r5, r5
 800d216:	e7ef      	b.n	800d1f8 <_printf_i+0xbc>
 800d218:	680b      	ldr	r3, [r1, #0]
 800d21a:	6825      	ldr	r5, [r4, #0]
 800d21c:	1d18      	adds	r0, r3, #4
 800d21e:	6008      	str	r0, [r1, #0]
 800d220:	0628      	lsls	r0, r5, #24
 800d222:	d501      	bpl.n	800d228 <_printf_i+0xec>
 800d224:	681d      	ldr	r5, [r3, #0]
 800d226:	e002      	b.n	800d22e <_printf_i+0xf2>
 800d228:	0669      	lsls	r1, r5, #25
 800d22a:	d5fb      	bpl.n	800d224 <_printf_i+0xe8>
 800d22c:	881d      	ldrh	r5, [r3, #0]
 800d22e:	2f6f      	cmp	r7, #111	; 0x6f
 800d230:	bf0c      	ite	eq
 800d232:	2308      	moveq	r3, #8
 800d234:	230a      	movne	r3, #10
 800d236:	4852      	ldr	r0, [pc, #328]	; (800d380 <_printf_i+0x244>)
 800d238:	2100      	movs	r1, #0
 800d23a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d23e:	6866      	ldr	r6, [r4, #4]
 800d240:	2e00      	cmp	r6, #0
 800d242:	bfa8      	it	ge
 800d244:	6821      	ldrge	r1, [r4, #0]
 800d246:	60a6      	str	r6, [r4, #8]
 800d248:	bfa4      	itt	ge
 800d24a:	f021 0104 	bicge.w	r1, r1, #4
 800d24e:	6021      	strge	r1, [r4, #0]
 800d250:	b90d      	cbnz	r5, 800d256 <_printf_i+0x11a>
 800d252:	2e00      	cmp	r6, #0
 800d254:	d04d      	beq.n	800d2f2 <_printf_i+0x1b6>
 800d256:	4616      	mov	r6, r2
 800d258:	fbb5 f1f3 	udiv	r1, r5, r3
 800d25c:	fb03 5711 	mls	r7, r3, r1, r5
 800d260:	5dc7      	ldrb	r7, [r0, r7]
 800d262:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d266:	462f      	mov	r7, r5
 800d268:	42bb      	cmp	r3, r7
 800d26a:	460d      	mov	r5, r1
 800d26c:	d9f4      	bls.n	800d258 <_printf_i+0x11c>
 800d26e:	2b08      	cmp	r3, #8
 800d270:	d10b      	bne.n	800d28a <_printf_i+0x14e>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	07df      	lsls	r7, r3, #31
 800d276:	d508      	bpl.n	800d28a <_printf_i+0x14e>
 800d278:	6923      	ldr	r3, [r4, #16]
 800d27a:	6861      	ldr	r1, [r4, #4]
 800d27c:	4299      	cmp	r1, r3
 800d27e:	bfde      	ittt	le
 800d280:	2330      	movle	r3, #48	; 0x30
 800d282:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d286:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d28a:	1b92      	subs	r2, r2, r6
 800d28c:	6122      	str	r2, [r4, #16]
 800d28e:	464b      	mov	r3, r9
 800d290:	4621      	mov	r1, r4
 800d292:	4640      	mov	r0, r8
 800d294:	f8cd a000 	str.w	sl, [sp]
 800d298:	aa03      	add	r2, sp, #12
 800d29a:	f7ff fedf 	bl	800d05c <_printf_common>
 800d29e:	3001      	adds	r0, #1
 800d2a0:	d14c      	bne.n	800d33c <_printf_i+0x200>
 800d2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a6:	b004      	add	sp, #16
 800d2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ac:	4834      	ldr	r0, [pc, #208]	; (800d380 <_printf_i+0x244>)
 800d2ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2b2:	680e      	ldr	r6, [r1, #0]
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2ba:	061f      	lsls	r7, r3, #24
 800d2bc:	600e      	str	r6, [r1, #0]
 800d2be:	d514      	bpl.n	800d2ea <_printf_i+0x1ae>
 800d2c0:	07d9      	lsls	r1, r3, #31
 800d2c2:	bf44      	itt	mi
 800d2c4:	f043 0320 	orrmi.w	r3, r3, #32
 800d2c8:	6023      	strmi	r3, [r4, #0]
 800d2ca:	b91d      	cbnz	r5, 800d2d4 <_printf_i+0x198>
 800d2cc:	6823      	ldr	r3, [r4, #0]
 800d2ce:	f023 0320 	bic.w	r3, r3, #32
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	2310      	movs	r3, #16
 800d2d6:	e7af      	b.n	800d238 <_printf_i+0xfc>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	f043 0320 	orr.w	r3, r3, #32
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	2378      	movs	r3, #120	; 0x78
 800d2e2:	4828      	ldr	r0, [pc, #160]	; (800d384 <_printf_i+0x248>)
 800d2e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2e8:	e7e3      	b.n	800d2b2 <_printf_i+0x176>
 800d2ea:	065e      	lsls	r6, r3, #25
 800d2ec:	bf48      	it	mi
 800d2ee:	b2ad      	uxthmi	r5, r5
 800d2f0:	e7e6      	b.n	800d2c0 <_printf_i+0x184>
 800d2f2:	4616      	mov	r6, r2
 800d2f4:	e7bb      	b.n	800d26e <_printf_i+0x132>
 800d2f6:	680b      	ldr	r3, [r1, #0]
 800d2f8:	6826      	ldr	r6, [r4, #0]
 800d2fa:	1d1d      	adds	r5, r3, #4
 800d2fc:	6960      	ldr	r0, [r4, #20]
 800d2fe:	600d      	str	r5, [r1, #0]
 800d300:	0635      	lsls	r5, r6, #24
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	d501      	bpl.n	800d30a <_printf_i+0x1ce>
 800d306:	6018      	str	r0, [r3, #0]
 800d308:	e002      	b.n	800d310 <_printf_i+0x1d4>
 800d30a:	0671      	lsls	r1, r6, #25
 800d30c:	d5fb      	bpl.n	800d306 <_printf_i+0x1ca>
 800d30e:	8018      	strh	r0, [r3, #0]
 800d310:	2300      	movs	r3, #0
 800d312:	4616      	mov	r6, r2
 800d314:	6123      	str	r3, [r4, #16]
 800d316:	e7ba      	b.n	800d28e <_printf_i+0x152>
 800d318:	680b      	ldr	r3, [r1, #0]
 800d31a:	1d1a      	adds	r2, r3, #4
 800d31c:	600a      	str	r2, [r1, #0]
 800d31e:	681e      	ldr	r6, [r3, #0]
 800d320:	2100      	movs	r1, #0
 800d322:	4630      	mov	r0, r6
 800d324:	6862      	ldr	r2, [r4, #4]
 800d326:	f000 f82f 	bl	800d388 <memchr>
 800d32a:	b108      	cbz	r0, 800d330 <_printf_i+0x1f4>
 800d32c:	1b80      	subs	r0, r0, r6
 800d32e:	6060      	str	r0, [r4, #4]
 800d330:	6863      	ldr	r3, [r4, #4]
 800d332:	6123      	str	r3, [r4, #16]
 800d334:	2300      	movs	r3, #0
 800d336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d33a:	e7a8      	b.n	800d28e <_printf_i+0x152>
 800d33c:	4632      	mov	r2, r6
 800d33e:	4649      	mov	r1, r9
 800d340:	4640      	mov	r0, r8
 800d342:	6923      	ldr	r3, [r4, #16]
 800d344:	47d0      	blx	sl
 800d346:	3001      	adds	r0, #1
 800d348:	d0ab      	beq.n	800d2a2 <_printf_i+0x166>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	079b      	lsls	r3, r3, #30
 800d34e:	d413      	bmi.n	800d378 <_printf_i+0x23c>
 800d350:	68e0      	ldr	r0, [r4, #12]
 800d352:	9b03      	ldr	r3, [sp, #12]
 800d354:	4298      	cmp	r0, r3
 800d356:	bfb8      	it	lt
 800d358:	4618      	movlt	r0, r3
 800d35a:	e7a4      	b.n	800d2a6 <_printf_i+0x16a>
 800d35c:	2301      	movs	r3, #1
 800d35e:	4632      	mov	r2, r6
 800d360:	4649      	mov	r1, r9
 800d362:	4640      	mov	r0, r8
 800d364:	47d0      	blx	sl
 800d366:	3001      	adds	r0, #1
 800d368:	d09b      	beq.n	800d2a2 <_printf_i+0x166>
 800d36a:	3501      	adds	r5, #1
 800d36c:	68e3      	ldr	r3, [r4, #12]
 800d36e:	9903      	ldr	r1, [sp, #12]
 800d370:	1a5b      	subs	r3, r3, r1
 800d372:	42ab      	cmp	r3, r5
 800d374:	dcf2      	bgt.n	800d35c <_printf_i+0x220>
 800d376:	e7eb      	b.n	800d350 <_printf_i+0x214>
 800d378:	2500      	movs	r5, #0
 800d37a:	f104 0619 	add.w	r6, r4, #25
 800d37e:	e7f5      	b.n	800d36c <_printf_i+0x230>
 800d380:	0800dd0d 	.word	0x0800dd0d
 800d384:	0800dd1e 	.word	0x0800dd1e

0800d388 <memchr>:
 800d388:	4603      	mov	r3, r0
 800d38a:	b510      	push	{r4, lr}
 800d38c:	b2c9      	uxtb	r1, r1
 800d38e:	4402      	add	r2, r0
 800d390:	4293      	cmp	r3, r2
 800d392:	4618      	mov	r0, r3
 800d394:	d101      	bne.n	800d39a <memchr+0x12>
 800d396:	2000      	movs	r0, #0
 800d398:	e003      	b.n	800d3a2 <memchr+0x1a>
 800d39a:	7804      	ldrb	r4, [r0, #0]
 800d39c:	3301      	adds	r3, #1
 800d39e:	428c      	cmp	r4, r1
 800d3a0:	d1f6      	bne.n	800d390 <memchr+0x8>
 800d3a2:	bd10      	pop	{r4, pc}

0800d3a4 <memcpy>:
 800d3a4:	440a      	add	r2, r1
 800d3a6:	4291      	cmp	r1, r2
 800d3a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3ac:	d100      	bne.n	800d3b0 <memcpy+0xc>
 800d3ae:	4770      	bx	lr
 800d3b0:	b510      	push	{r4, lr}
 800d3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3b6:	4291      	cmp	r1, r2
 800d3b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3bc:	d1f9      	bne.n	800d3b2 <memcpy+0xe>
 800d3be:	bd10      	pop	{r4, pc}

0800d3c0 <memmove>:
 800d3c0:	4288      	cmp	r0, r1
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	eb01 0402 	add.w	r4, r1, r2
 800d3c8:	d902      	bls.n	800d3d0 <memmove+0x10>
 800d3ca:	4284      	cmp	r4, r0
 800d3cc:	4623      	mov	r3, r4
 800d3ce:	d807      	bhi.n	800d3e0 <memmove+0x20>
 800d3d0:	1e43      	subs	r3, r0, #1
 800d3d2:	42a1      	cmp	r1, r4
 800d3d4:	d008      	beq.n	800d3e8 <memmove+0x28>
 800d3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3de:	e7f8      	b.n	800d3d2 <memmove+0x12>
 800d3e0:	4601      	mov	r1, r0
 800d3e2:	4402      	add	r2, r0
 800d3e4:	428a      	cmp	r2, r1
 800d3e6:	d100      	bne.n	800d3ea <memmove+0x2a>
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3f2:	e7f7      	b.n	800d3e4 <memmove+0x24>

0800d3f4 <_free_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	2900      	cmp	r1, #0
 800d3fa:	d043      	beq.n	800d484 <_free_r+0x90>
 800d3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d400:	1f0c      	subs	r4, r1, #4
 800d402:	2b00      	cmp	r3, #0
 800d404:	bfb8      	it	lt
 800d406:	18e4      	addlt	r4, r4, r3
 800d408:	f000 f8d0 	bl	800d5ac <__malloc_lock>
 800d40c:	4a1e      	ldr	r2, [pc, #120]	; (800d488 <_free_r+0x94>)
 800d40e:	6813      	ldr	r3, [r2, #0]
 800d410:	4610      	mov	r0, r2
 800d412:	b933      	cbnz	r3, 800d422 <_free_r+0x2e>
 800d414:	6063      	str	r3, [r4, #4]
 800d416:	6014      	str	r4, [r2, #0]
 800d418:	4628      	mov	r0, r5
 800d41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d41e:	f000 b8cb 	b.w	800d5b8 <__malloc_unlock>
 800d422:	42a3      	cmp	r3, r4
 800d424:	d90a      	bls.n	800d43c <_free_r+0x48>
 800d426:	6821      	ldr	r1, [r4, #0]
 800d428:	1862      	adds	r2, r4, r1
 800d42a:	4293      	cmp	r3, r2
 800d42c:	bf01      	itttt	eq
 800d42e:	681a      	ldreq	r2, [r3, #0]
 800d430:	685b      	ldreq	r3, [r3, #4]
 800d432:	1852      	addeq	r2, r2, r1
 800d434:	6022      	streq	r2, [r4, #0]
 800d436:	6063      	str	r3, [r4, #4]
 800d438:	6004      	str	r4, [r0, #0]
 800d43a:	e7ed      	b.n	800d418 <_free_r+0x24>
 800d43c:	461a      	mov	r2, r3
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	b10b      	cbz	r3, 800d446 <_free_r+0x52>
 800d442:	42a3      	cmp	r3, r4
 800d444:	d9fa      	bls.n	800d43c <_free_r+0x48>
 800d446:	6811      	ldr	r1, [r2, #0]
 800d448:	1850      	adds	r0, r2, r1
 800d44a:	42a0      	cmp	r0, r4
 800d44c:	d10b      	bne.n	800d466 <_free_r+0x72>
 800d44e:	6820      	ldr	r0, [r4, #0]
 800d450:	4401      	add	r1, r0
 800d452:	1850      	adds	r0, r2, r1
 800d454:	4283      	cmp	r3, r0
 800d456:	6011      	str	r1, [r2, #0]
 800d458:	d1de      	bne.n	800d418 <_free_r+0x24>
 800d45a:	6818      	ldr	r0, [r3, #0]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	4401      	add	r1, r0
 800d460:	6011      	str	r1, [r2, #0]
 800d462:	6053      	str	r3, [r2, #4]
 800d464:	e7d8      	b.n	800d418 <_free_r+0x24>
 800d466:	d902      	bls.n	800d46e <_free_r+0x7a>
 800d468:	230c      	movs	r3, #12
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	e7d4      	b.n	800d418 <_free_r+0x24>
 800d46e:	6820      	ldr	r0, [r4, #0]
 800d470:	1821      	adds	r1, r4, r0
 800d472:	428b      	cmp	r3, r1
 800d474:	bf01      	itttt	eq
 800d476:	6819      	ldreq	r1, [r3, #0]
 800d478:	685b      	ldreq	r3, [r3, #4]
 800d47a:	1809      	addeq	r1, r1, r0
 800d47c:	6021      	streq	r1, [r4, #0]
 800d47e:	6063      	str	r3, [r4, #4]
 800d480:	6054      	str	r4, [r2, #4]
 800d482:	e7c9      	b.n	800d418 <_free_r+0x24>
 800d484:	bd38      	pop	{r3, r4, r5, pc}
 800d486:	bf00      	nop
 800d488:	200002d8 	.word	0x200002d8

0800d48c <_malloc_r>:
 800d48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48e:	1ccd      	adds	r5, r1, #3
 800d490:	f025 0503 	bic.w	r5, r5, #3
 800d494:	3508      	adds	r5, #8
 800d496:	2d0c      	cmp	r5, #12
 800d498:	bf38      	it	cc
 800d49a:	250c      	movcc	r5, #12
 800d49c:	2d00      	cmp	r5, #0
 800d49e:	4606      	mov	r6, r0
 800d4a0:	db01      	blt.n	800d4a6 <_malloc_r+0x1a>
 800d4a2:	42a9      	cmp	r1, r5
 800d4a4:	d903      	bls.n	800d4ae <_malloc_r+0x22>
 800d4a6:	230c      	movs	r3, #12
 800d4a8:	6033      	str	r3, [r6, #0]
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ae:	f000 f87d 	bl	800d5ac <__malloc_lock>
 800d4b2:	4921      	ldr	r1, [pc, #132]	; (800d538 <_malloc_r+0xac>)
 800d4b4:	680a      	ldr	r2, [r1, #0]
 800d4b6:	4614      	mov	r4, r2
 800d4b8:	b99c      	cbnz	r4, 800d4e2 <_malloc_r+0x56>
 800d4ba:	4f20      	ldr	r7, [pc, #128]	; (800d53c <_malloc_r+0xb0>)
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	b923      	cbnz	r3, 800d4ca <_malloc_r+0x3e>
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f000 f862 	bl	800d58c <_sbrk_r>
 800d4c8:	6038      	str	r0, [r7, #0]
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f000 f85d 	bl	800d58c <_sbrk_r>
 800d4d2:	1c43      	adds	r3, r0, #1
 800d4d4:	d123      	bne.n	800d51e <_malloc_r+0x92>
 800d4d6:	230c      	movs	r3, #12
 800d4d8:	4630      	mov	r0, r6
 800d4da:	6033      	str	r3, [r6, #0]
 800d4dc:	f000 f86c 	bl	800d5b8 <__malloc_unlock>
 800d4e0:	e7e3      	b.n	800d4aa <_malloc_r+0x1e>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	1b5b      	subs	r3, r3, r5
 800d4e6:	d417      	bmi.n	800d518 <_malloc_r+0x8c>
 800d4e8:	2b0b      	cmp	r3, #11
 800d4ea:	d903      	bls.n	800d4f4 <_malloc_r+0x68>
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	441c      	add	r4, r3
 800d4f0:	6025      	str	r5, [r4, #0]
 800d4f2:	e004      	b.n	800d4fe <_malloc_r+0x72>
 800d4f4:	6863      	ldr	r3, [r4, #4]
 800d4f6:	42a2      	cmp	r2, r4
 800d4f8:	bf0c      	ite	eq
 800d4fa:	600b      	streq	r3, [r1, #0]
 800d4fc:	6053      	strne	r3, [r2, #4]
 800d4fe:	4630      	mov	r0, r6
 800d500:	f000 f85a 	bl	800d5b8 <__malloc_unlock>
 800d504:	f104 000b 	add.w	r0, r4, #11
 800d508:	1d23      	adds	r3, r4, #4
 800d50a:	f020 0007 	bic.w	r0, r0, #7
 800d50e:	1ac2      	subs	r2, r0, r3
 800d510:	d0cc      	beq.n	800d4ac <_malloc_r+0x20>
 800d512:	1a1b      	subs	r3, r3, r0
 800d514:	50a3      	str	r3, [r4, r2]
 800d516:	e7c9      	b.n	800d4ac <_malloc_r+0x20>
 800d518:	4622      	mov	r2, r4
 800d51a:	6864      	ldr	r4, [r4, #4]
 800d51c:	e7cc      	b.n	800d4b8 <_malloc_r+0x2c>
 800d51e:	1cc4      	adds	r4, r0, #3
 800d520:	f024 0403 	bic.w	r4, r4, #3
 800d524:	42a0      	cmp	r0, r4
 800d526:	d0e3      	beq.n	800d4f0 <_malloc_r+0x64>
 800d528:	1a21      	subs	r1, r4, r0
 800d52a:	4630      	mov	r0, r6
 800d52c:	f000 f82e 	bl	800d58c <_sbrk_r>
 800d530:	3001      	adds	r0, #1
 800d532:	d1dd      	bne.n	800d4f0 <_malloc_r+0x64>
 800d534:	e7cf      	b.n	800d4d6 <_malloc_r+0x4a>
 800d536:	bf00      	nop
 800d538:	200002d8 	.word	0x200002d8
 800d53c:	200002dc 	.word	0x200002dc

0800d540 <_realloc_r>:
 800d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d542:	4607      	mov	r7, r0
 800d544:	4614      	mov	r4, r2
 800d546:	460e      	mov	r6, r1
 800d548:	b921      	cbnz	r1, 800d554 <_realloc_r+0x14>
 800d54a:	4611      	mov	r1, r2
 800d54c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d550:	f7ff bf9c 	b.w	800d48c <_malloc_r>
 800d554:	b922      	cbnz	r2, 800d560 <_realloc_r+0x20>
 800d556:	f7ff ff4d 	bl	800d3f4 <_free_r>
 800d55a:	4625      	mov	r5, r4
 800d55c:	4628      	mov	r0, r5
 800d55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d560:	f000 f830 	bl	800d5c4 <_malloc_usable_size_r>
 800d564:	42a0      	cmp	r0, r4
 800d566:	d20f      	bcs.n	800d588 <_realloc_r+0x48>
 800d568:	4621      	mov	r1, r4
 800d56a:	4638      	mov	r0, r7
 800d56c:	f7ff ff8e 	bl	800d48c <_malloc_r>
 800d570:	4605      	mov	r5, r0
 800d572:	2800      	cmp	r0, #0
 800d574:	d0f2      	beq.n	800d55c <_realloc_r+0x1c>
 800d576:	4631      	mov	r1, r6
 800d578:	4622      	mov	r2, r4
 800d57a:	f7ff ff13 	bl	800d3a4 <memcpy>
 800d57e:	4631      	mov	r1, r6
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff ff37 	bl	800d3f4 <_free_r>
 800d586:	e7e9      	b.n	800d55c <_realloc_r+0x1c>
 800d588:	4635      	mov	r5, r6
 800d58a:	e7e7      	b.n	800d55c <_realloc_r+0x1c>

0800d58c <_sbrk_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	2300      	movs	r3, #0
 800d590:	4d05      	ldr	r5, [pc, #20]	; (800d5a8 <_sbrk_r+0x1c>)
 800d592:	4604      	mov	r4, r0
 800d594:	4608      	mov	r0, r1
 800d596:	602b      	str	r3, [r5, #0]
 800d598:	f7f6 f9ce 	bl	8003938 <_sbrk>
 800d59c:	1c43      	adds	r3, r0, #1
 800d59e:	d102      	bne.n	800d5a6 <_sbrk_r+0x1a>
 800d5a0:	682b      	ldr	r3, [r5, #0]
 800d5a2:	b103      	cbz	r3, 800d5a6 <_sbrk_r+0x1a>
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	bd38      	pop	{r3, r4, r5, pc}
 800d5a8:	20001388 	.word	0x20001388

0800d5ac <__malloc_lock>:
 800d5ac:	4801      	ldr	r0, [pc, #4]	; (800d5b4 <__malloc_lock+0x8>)
 800d5ae:	f000 b811 	b.w	800d5d4 <__retarget_lock_acquire_recursive>
 800d5b2:	bf00      	nop
 800d5b4:	20001390 	.word	0x20001390

0800d5b8 <__malloc_unlock>:
 800d5b8:	4801      	ldr	r0, [pc, #4]	; (800d5c0 <__malloc_unlock+0x8>)
 800d5ba:	f000 b80c 	b.w	800d5d6 <__retarget_lock_release_recursive>
 800d5be:	bf00      	nop
 800d5c0:	20001390 	.word	0x20001390

0800d5c4 <_malloc_usable_size_r>:
 800d5c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5c8:	1f18      	subs	r0, r3, #4
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	bfbc      	itt	lt
 800d5ce:	580b      	ldrlt	r3, [r1, r0]
 800d5d0:	18c0      	addlt	r0, r0, r3
 800d5d2:	4770      	bx	lr

0800d5d4 <__retarget_lock_acquire_recursive>:
 800d5d4:	4770      	bx	lr

0800d5d6 <__retarget_lock_release_recursive>:
 800d5d6:	4770      	bx	lr

0800d5d8 <_init>:
 800d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5da:	bf00      	nop
 800d5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5de:	bc08      	pop	{r3}
 800d5e0:	469e      	mov	lr, r3
 800d5e2:	4770      	bx	lr

0800d5e4 <_fini>:
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e6:	bf00      	nop
 800d5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ea:	bc08      	pop	{r3}
 800d5ec:	469e      	mov	lr, r3
 800d5ee:	4770      	bx	lr
