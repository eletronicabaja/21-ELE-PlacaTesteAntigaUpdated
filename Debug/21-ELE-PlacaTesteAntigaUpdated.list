
21-ELE-PlacaTesteAntigaUpdated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e680  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800e790  0800e790  0001e790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee84  0800ee84  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee84  0800ee84  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee84  0800ee84  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee84  0800ee84  0001ee84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee88  0800ee88  0001ee88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800ee8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e0  20000088  0800ef14  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001268  0800ef14  00021268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002218e  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045c2  00000000  00000000  0004223f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  00046808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  000480f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c44c  00000000  00000000  00049828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020501  00000000  00000000  00065c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000985e5  00000000  00000000  00086175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011e75a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb4  00000000  00000000  0011e7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e778 	.word	0x0800e778

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800e778 	.word	0x0800e778

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_frsub>:
 8000b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	e002      	b.n	8000b50 <__addsf3>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fsub>:
 8000b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b50 <__addsf3>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	bf1f      	itttt	ne
 8000b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b58:	ea92 0f03 	teqne	r2, r3
 8000b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b64:	d06a      	beq.n	8000c3c <__addsf3+0xec>
 8000b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6e:	bfc1      	itttt	gt
 8000b70:	18d2      	addgt	r2, r2, r3
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	4048      	eorgt	r0, r1
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	2b19      	cmp	r3, #25
 8000b7e:	bf88      	it	hi
 8000b80:	4770      	bxhi	lr
 8000b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9e:	bf18      	it	ne
 8000ba0:	4249      	negne	r1, r1
 8000ba2:	ea92 0f03 	teq	r2, r3
 8000ba6:	d03f      	beq.n	8000c28 <__addsf3+0xd8>
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb0:	eb10 000c 	adds.w	r0, r0, ip
 8000bb4:	f1c3 0320 	rsb	r3, r3, #32
 8000bb8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__addsf3+0x78>
 8000bc2:	4249      	negs	r1, r1
 8000bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bcc:	d313      	bcc.n	8000bf6 <__addsf3+0xa6>
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d306      	bcc.n	8000be2 <__addsf3+0x92>
 8000bd4:	0840      	lsrs	r0, r0, #1
 8000bd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bda:	f102 0201 	add.w	r2, r2, #1
 8000bde:	2afe      	cmp	r2, #254	; 0xfe
 8000be0:	d251      	bcs.n	8000c86 <__addsf3+0x136>
 8000be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bea:	bf08      	it	eq
 8000bec:	f020 0001 	biceq.w	r0, r0, #1
 8000bf0:	ea40 0003 	orr.w	r0, r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	0049      	lsls	r1, r1, #1
 8000bf8:	eb40 0000 	adc.w	r0, r0, r0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	bf28      	it	cs
 8000c00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c04:	d2ed      	bcs.n	8000be2 <__addsf3+0x92>
 8000c06:	fab0 fc80 	clz	ip, r0
 8000c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c16:	bfaa      	itet	ge
 8000c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c1c:	4252      	neglt	r2, r2
 8000c1e:	4318      	orrge	r0, r3
 8000c20:	bfbc      	itt	lt
 8000c22:	40d0      	lsrlt	r0, r2
 8000c24:	4318      	orrlt	r0, r3
 8000c26:	4770      	bx	lr
 8000c28:	f092 0f00 	teq	r2, #0
 8000c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c30:	bf06      	itte	eq
 8000c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c36:	3201      	addeq	r2, #1
 8000c38:	3b01      	subne	r3, #1
 8000c3a:	e7b5      	b.n	8000ba8 <__addsf3+0x58>
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	bf18      	it	ne
 8000c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4a:	d021      	beq.n	8000c90 <__addsf3+0x140>
 8000c4c:	ea92 0f03 	teq	r2, r3
 8000c50:	d004      	beq.n	8000c5c <__addsf3+0x10c>
 8000c52:	f092 0f00 	teq	r2, #0
 8000c56:	bf08      	it	eq
 8000c58:	4608      	moveq	r0, r1
 8000c5a:	4770      	bx	lr
 8000c5c:	ea90 0f01 	teq	r0, r1
 8000c60:	bf1c      	itt	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	4770      	bxne	lr
 8000c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6a:	d104      	bne.n	8000c76 <__addsf3+0x126>
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7a:	bf3c      	itt	cc
 8000c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c80:	4770      	bxcc	lr
 8000c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c94:	bf16      	itet	ne
 8000c96:	4608      	movne	r0, r1
 8000c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c9c:	4601      	movne	r1, r0
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	bf06      	itte	eq
 8000ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca6:	ea90 0f01 	teqeq	r0, r1
 8000caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_ui2f>:
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e004      	b.n	8000cc0 <__aeabi_i2f+0x8>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_i2f>:
 8000cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	bf48      	it	mi
 8000cbe:	4240      	negmi	r0, r0
 8000cc0:	ea5f 0c00 	movs.w	ip, r0
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ccc:	4601      	mov	r1, r0
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	e01c      	b.n	8000d0e <__aeabi_l2f+0x2a>

08000cd4 <__aeabi_ul2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e00a      	b.n	8000cf8 <__aeabi_l2f+0x14>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_l2f>:
 8000ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__aeabi_l2f+0x14>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	ea5f 0c01 	movs.w	ip, r1
 8000cfc:	bf02      	ittt	eq
 8000cfe:	4684      	moveq	ip, r0
 8000d00:	4601      	moveq	r1, r0
 8000d02:	2000      	moveq	r0, #0
 8000d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d08:	bf08      	it	eq
 8000d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d12:	fabc f28c 	clz	r2, ip
 8000d16:	3a08      	subs	r2, #8
 8000d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d1c:	db10      	blt.n	8000d40 <__aeabi_l2f+0x5c>
 8000d1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d30:	fa20 f202 	lsr.w	r2, r0, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f102 0220 	add.w	r2, r2, #32
 8000d44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d50:	fa21 f202 	lsr.w	r2, r1, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_f2iz>:
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d68:	d30f      	bcc.n	8000d8a <__aeabi_f2iz+0x2a>
 8000d6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_f2iz+0x30>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d7c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	bf18      	it	ne
 8000d86:	4240      	negne	r0, r0
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2iz+0x3a>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d105      	bne.n	8000da6 <__aeabi_f2iz+0x46>
 8000d9a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr

08000dac <aceGir_Init>:
 */

#include "ace_gir.h"

HAL_StatusTypeDef aceGir_Init(I2C_HandleTypeDef *hi2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	6078      	str	r0, [r7, #4]

	aceGir.hi2c = hi2c;
 8000db4:	4a42      	ldr	r2, [pc, #264]	; (8000ec0 <aceGir_Init+0x114>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef result;
	uint8_t check;
	uint8_t dados;

	// checar se o módulo está conectado
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <aceGir_Init+0x114>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	f107 030e 	add.w	r3, r7, #14
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	2275      	movs	r2, #117	; 0x75
 8000dd2:	21d0      	movs	r1, #208	; 0xd0
 8000dd4:	f004 fc04 	bl	80055e0 <HAL_I2C_Mem_Read>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK)
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <aceGir_Init+0x3a>
		return result;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	e068      	b.n	8000eb8 <aceGir_Init+0x10c>

	if (check == 104)  // 0x68 = 104 -> será retornado seu o modulo estiver OK
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	2b68      	cmp	r3, #104	; 0x68
 8000dea:	d15f      	bne.n	8000eac <aceGir_Init+0x100>
	{
		// ligar sensor
		dados = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&dados, 1, 1000);
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <aceGir_Init+0x114>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f107 030d 	add.w	r3, r7, #13
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	226b      	movs	r2, #107	; 0x6b
 8000e08:	21d0      	movs	r1, #208	; 0xd0
 8000e0a:	f004 faef 	bl	80053ec <HAL_I2C_Mem_Write>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <aceGir_Init+0x70>
			return result;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	e04d      	b.n	8000eb8 <aceGir_Init+0x10c>

		// definir frequencia de 1khz
		dados = 0x07;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &dados, 1, 1000);
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <aceGir_Init+0x114>)
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e28:	9302      	str	r3, [sp, #8]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	f107 030d 	add.w	r3, r7, #13
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2301      	movs	r3, #1
 8000e36:	2219      	movs	r2, #25
 8000e38:	21d0      	movs	r1, #208	; 0xd0
 8000e3a:	f004 fad7 	bl	80053ec <HAL_I2C_Mem_Write>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <aceGir_Init+0xa0>
			return result;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	e035      	b.n	8000eb8 <aceGir_Init+0x10c>

		// definir configuracao de acelerometro
		dados = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &dados, 1, 1000);
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <aceGir_Init+0x114>)
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	f107 030d 	add.w	r3, r7, #13
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	221c      	movs	r2, #28
 8000e68:	21d0      	movs	r1, #208	; 0xd0
 8000e6a:	f004 fabf 	bl	80053ec <HAL_I2C_Mem_Write>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <aceGir_Init+0xd0>
			return result;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	e01d      	b.n	8000eb8 <aceGir_Init+0x10c>

		// definir configuracao de giroscopio
		dados = 0x00;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	737b      	strb	r3, [r7, #13]
		result = HAL_I2C_Mem_Write(aceGir.hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &dados, 1, 1000);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <aceGir_Init+0x114>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f107 030d 	add.w	r3, r7, #13
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	221b      	movs	r2, #27
 8000e98:	21d0      	movs	r1, #208	; 0xd0
 8000e9a:	f004 faa7 	bl	80053ec <HAL_I2C_Mem_Write>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	73fb      	strb	r3, [r7, #15]
		if (result != HAL_OK)
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <aceGir_Init+0x100>
			return result;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	e005      	b.n	8000eb8 <aceGir_Init+0x10c>
	}

	result = HAL_TIM_Base_Start_IT(&htim4);
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <aceGir_Init+0x118>)
 8000eae:	f008 f865 	bl	8008f7c <HAL_TIM_Base_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]

	return result;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000328 	.word	0x20000328
 8000ec4:	200002e0 	.word	0x200002e0

08000ec8 <aceGir_Read>:

HAL_StatusTypeDef aceGir_Read(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef result;
	uint8_t buf[6];

	/*	Leitura do Acelerometro	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, buf, 6, 1000);
 8000ece:	4b70      	ldr	r3, [pc, #448]	; (8001090 <aceGir_Read+0x1c8>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2306      	movs	r3, #6
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	463b      	mov	r3, r7
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	223b      	movs	r2, #59	; 0x3b
 8000ee4:	21d0      	movs	r1, #208	; 0xd0
 8000ee6:	f004 fb7b 	bl	80055e0 <HAL_I2C_Mem_Read>
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <aceGir_Read+0x30>
		return result;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	e0c3      	b.n	8001080 <aceGir_Read+0x1b8>

	aceGir.accel.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8000ef8:	783b      	ldrb	r3, [r7, #0]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	787b      	ldrb	r3, [r7, #1]
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b62      	ldr	r3, [pc, #392]	; (8001090 <aceGir_Read+0x1c8>)
 8000f08:	809a      	strh	r2, [r3, #4]
	aceGir.accel.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 8000f0a:	78bb      	ldrb	r3, [r7, #2]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <aceGir_Read+0x1c8>)
 8000f1a:	80da      	strh	r2, [r3, #6]
	aceGir.accel.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 8000f1c:	793b      	ldrb	r3, [r7, #4]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <aceGir_Read+0x1c8>)
 8000f2c:	811a      	strh	r2, [r3, #8]

	//converter valores em 'g', dividindo por 16384 (FS_SEL)=0
	aceGir.accel.x = aceGir.accel.X_RAW/16384.0;
 8000f2e:	4b58      	ldr	r3, [pc, #352]	; (8001090 <aceGir_Read+0x1c8>)
 8000f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb11 	bl	800055c <__aeabi_i2d>
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b55      	ldr	r3, [pc, #340]	; (8001094 <aceGir_Read+0x1cc>)
 8000f40:	f7ff fca0 	bl	8000884 <__aeabi_ddiv>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fdaa 	bl	8000aa4 <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <aceGir_Read+0x1c8>)
 8000f54:	60d3      	str	r3, [r2, #12]
	aceGir.accel.y = aceGir.accel.Y_RAW/16384.0;
 8000f56:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <aceGir_Read+0x1c8>)
 8000f58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fafd 	bl	800055c <__aeabi_i2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <aceGir_Read+0x1cc>)
 8000f68:	f7ff fc8c 	bl	8000884 <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fd96 	bl	8000aa4 <__aeabi_d2f>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a45      	ldr	r2, [pc, #276]	; (8001090 <aceGir_Read+0x1c8>)
 8000f7c:	6113      	str	r3, [r2, #16]
	aceGir.accel.z = aceGir.accel.Z_RAW/16384.0;
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <aceGir_Read+0x1c8>)
 8000f80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fae9 	bl	800055c <__aeabi_i2d>
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <aceGir_Read+0x1cc>)
 8000f90:	f7ff fc78 	bl	8000884 <__aeabi_ddiv>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fd82 	bl	8000aa4 <__aeabi_d2f>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	; (8001090 <aceGir_Read+0x1c8>)
 8000fa4:	6153      	str	r3, [r2, #20]

	/*	Leitura do Giroscopio	*/
	result = HAL_I2C_Mem_Read (aceGir.hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, buf, 6, 1000);
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <aceGir_Read+0x1c8>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2243      	movs	r2, #67	; 0x43
 8000fbc:	21d0      	movs	r1, #208	; 0xd0
 8000fbe:	f004 fb0f 	bl	80055e0 <HAL_I2C_Mem_Read>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <aceGir_Read+0x108>
		return result;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	e057      	b.n	8001080 <aceGir_Read+0x1b8>

	aceGir.gyro.X_RAW = (int16_t)(buf[0] << 8 | buf [1]);
 8000fd0:	783b      	ldrb	r3, [r7, #0]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	787b      	ldrb	r3, [r7, #1]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <aceGir_Read+0x1c8>)
 8000fe0:	831a      	strh	r2, [r3, #24]
	aceGir.gyro.Y_RAW = (int16_t)(buf[2] << 8 | buf [3]);
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <aceGir_Read+0x1c8>)
 8000ff2:	835a      	strh	r2, [r3, #26]
	aceGir.gyro.Z_RAW = (int16_t)(buf[4] << 8 | buf [5]);
 8000ff4:	793b      	ldrb	r3, [r7, #4]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <aceGir_Read+0x1c8>)
 8001004:	839a      	strh	r2, [r3, #28]

	//converter valores em 'graus/segundo', dividindo por 131 (FS_SEL)=0
	aceGir.gyro.x = aceGir.gyro.X_RAW/131.0;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <aceGir_Read+0x1c8>)
 8001008:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff faa5 	bl	800055c <__aeabi_i2d>
 8001012:	a31d      	add	r3, pc, #116	; (adr r3, 8001088 <aceGir_Read+0x1c0>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fc34 	bl	8000884 <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd3e 	bl	8000aa4 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <aceGir_Read+0x1c8>)
 800102c:	6213      	str	r3, [r2, #32]
	aceGir.gyro.y = aceGir.gyro.Y_RAW/131.0;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <aceGir_Read+0x1c8>)
 8001030:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa91 	bl	800055c <__aeabi_i2d>
 800103a:	a313      	add	r3, pc, #76	; (adr r3, 8001088 <aceGir_Read+0x1c0>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fc20 	bl	8000884 <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fd2a 	bl	8000aa4 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <aceGir_Read+0x1c8>)
 8001054:	6253      	str	r3, [r2, #36]	; 0x24
	aceGir.gyro.z = aceGir.gyro.Z_RAW/131.0;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <aceGir_Read+0x1c8>)
 8001058:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa7d 	bl	800055c <__aeabi_i2d>
 8001062:	a309      	add	r3, pc, #36	; (adr r3, 8001088 <aceGir_Read+0x1c0>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fc0c 	bl	8000884 <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd16 	bl	8000aa4 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <aceGir_Read+0x1c8>)
 800107c:	6293      	str	r3, [r2, #40]	; 0x28



	return result;
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	00000000 	.word	0x00000000
 800108c:	40606000 	.word	0x40606000
 8001090:	20000328 	.word	0x20000328
 8001094:	40d00000 	.word	0x40d00000

08001098 <can_bus_Init>:

#include "can_bus.h"
#include "ace_gir.h"

void can_bus_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	canBus.tx_header.DLC = 1;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <can_bus_Init+0x84>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	61da      	str	r2, [r3, #28]
	canBus.tx_header.IDE = CAN_ID_STD;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <can_bus_Init+0x84>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
	canBus.tx_header.RTR = CAN_RTR_DATA;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <can_bus_Init+0x84>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
	canBus.tx_header.StdId = 0x010;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <can_bus_Init+0x84>)
 80010b2:	2210      	movs	r2, #16
 80010b4:	60da      	str	r2, [r3, #12]
	canBus.filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <can_bus_Init+0x84>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	651a      	str	r2, [r3, #80]	; 0x50
	canBus.filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <can_bus_Init+0x84>)
 80010be:	2200      	movs	r2, #0
 80010c0:	659a      	str	r2, [r3, #88]	; 0x58
	canBus.filter.FilterBank = 0;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <can_bus_Init+0x84>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
	canBus.filter.FilterIdHigh = 0x240 << 5;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <can_bus_Init+0x84>)
 80010ca:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
	canBus.filter.FilterIdLow = 0;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <can_bus_Init+0x84>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
	canBus.filter.FilterMaskIdHigh = 0x7fc<<5;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <can_bus_Init+0x84>)
 80010d8:	f64f 7280 	movw	r2, #65408	; 0xff80
 80010dc:	649a      	str	r2, [r3, #72]	; 0x48
	canBus.filter.FilterMaskIdLow = 0;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <can_bus_Init+0x84>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	64da      	str	r2, [r3, #76]	; 0x4c
	canBus.filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <can_bus_Init+0x84>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	65da      	str	r2, [r3, #92]	; 0x5c
	canBus.filter.FilterActivation = ENABLE;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <can_bus_Init+0x84>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	661a      	str	r2, [r3, #96]	; 0x60
	result = HAL_CAN_ConfigFilter(&hcan, &canBus.filter);
 80010f0:	490b      	ldr	r1, [pc, #44]	; (8001120 <can_bus_Init+0x88>)
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <can_bus_Init+0x8c>)
 80010f4:	f002 fe58 	bl	8003da8 <HAL_CAN_ConfigFilter>
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_Start(&hcan);
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <can_bus_Init+0x8c>)
 80010fe:	f002 ff1c 	bl	8003f3a <HAL_CAN_Start>
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	result = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001106:	2102      	movs	r1, #2
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <can_bus_Init+0x8c>)
 800110a:	f003 f86b 	bl	80041e4 <HAL_CAN_ActivateNotification>
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000354 	.word	0x20000354
 8001120:	20000394 	.word	0x20000394
 8001124:	200003d8 	.word	0x200003d8

08001128 <can_bus_Recieve>:
	if (canBus.count>50000)
		canBus.count = 0;
}

void can_bus_Recieve(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &canBus.rx_header, canBus.recieve);
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <can_bus_Recieve+0xa0>)
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <can_bus_Recieve+0xa4>)
 8001130:	2100      	movs	r1, #0
 8001132:	4827      	ldr	r0, [pc, #156]	; (80011d0 <can_bus_Recieve+0xa8>)
 8001134:	f002 ff45 	bl	8003fc2 <HAL_CAN_GetRxMessage>

	if (canBus.rx_header.StdId == 0x242)
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <can_bus_Recieve+0xac>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f240 2242 	movw	r2, #578	; 0x242
 8001140:	4293      	cmp	r3, r2
 8001142:	d13b      	bne.n	80011bc <can_bus_Recieve+0x94>
	{
		canBus.rx.fuel = (canBus.recieve[1] << 8) + canBus.recieve[0];
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <can_bus_Recieve+0xac>)
 8001146:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800114a:	b29b      	uxth	r3, r3
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <can_bus_Recieve+0xac>)
 8001152:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001156:	b29b      	uxth	r3, r3
 8001158:	4413      	add	r3, r2
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <can_bus_Recieve+0xac>)
 800115e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		canBus.rx.vel = (canBus.recieve[3] << 8) + canBus.recieve[2];
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <can_bus_Recieve+0xac>)
 8001164:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001168:	b29b      	uxth	r3, r3
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <can_bus_Recieve+0xac>)
 8001170:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <can_bus_Recieve+0xac>)
 800117c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		canBus.rx.rpm = (canBus.recieve[5] << 8) + canBus.recieve[4];
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <can_bus_Recieve+0xac>)
 8001182:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001186:	b29b      	uxth	r3, r3
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <can_bus_Recieve+0xac>)
 800118e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001192:	b29b      	uxth	r3, r3
 8001194:	4413      	add	r3, r2
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <can_bus_Recieve+0xac>)
 800119a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		canBus.rx.counter = (canBus.recieve[7] << 8) + canBus.recieve[6];
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <can_bus_Recieve+0xac>)
 80011a0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <can_bus_Recieve+0xac>)
 80011ac:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <can_bus_Recieve+0xac>)
 80011b8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		can_rData.gyro.x = (canBus.recieve[1] << 8) + canBus.recieve[0];
		can_rData.gyro.y = (canBus.recieve[3] << 8) + canBus.recieve[2];
		can_rData.gyro.z = (canBus.recieve[5] << 8) + canBus.recieve[4];
	}*/

	canBus.count=0;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <can_bus_Recieve+0xac>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200003c8 	.word	0x200003c8
 80011cc:	20000378 	.word	0x20000378
 80011d0:	200003d8 	.word	0x200003d8
 80011d4:	20000354 	.word	0x20000354

080011d8 <dina_Init>:
 */

#include "dina.h"

void dina_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	dina.huart = &huart2;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <dina_Init+0x14>)
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <dina_Init+0x18>)
 80011e0:	601a      	str	r2, [r3, #0]
	forceGauge_uart_Init_DMA(&dina);
 80011e2:	4802      	ldr	r0, [pc, #8]	; (80011ec <dina_Init+0x14>)
 80011e4:	f000 fce6 	bl	8001bb4 <forceGauge_uart_Init_DMA>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000400 	.word	0x20000400
 80011f0:	2000041c 	.word	0x2000041c

080011f4 <dina_Update>:

void dina_Update(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	forceGauge_getForce(&dina);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <dina_Update+0x10>)
 80011fa:	f000 fcef 	bl	8001bdc <forceGauge_getForce>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000400 	.word	0x20000400

08001208 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001212:	4802      	ldr	r0, [pc, #8]	; (800121c <SELECT+0x14>)
 8001214:	f003 ff74 	bl	8005100 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40010800 	.word	0x40010800

08001220 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4802      	ldr	r0, [pc, #8]	; (8001234 <DESELECT+0x14>)
 800122c:	f003 ff68 	bl	8005100 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40010800 	.word	0x40010800

08001238 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001242:	bf00      	nop
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <SPI_TxByte+0x30>)
 8001246:	f007 fd82 	bl	8008d4e <HAL_SPI_GetState>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d1f9      	bne.n	8001244 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001250:	1df9      	adds	r1, r7, #7
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	2201      	movs	r2, #1
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <SPI_TxByte+0x30>)
 800125a:	f007 f9ab 	bl	80085b4 <HAL_SPI_Transmit>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000d4c 	.word	0x20000d4c

0800126c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001272:	23ff      	movs	r3, #255	; 0xff
 8001274:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800127a:	bf00      	nop
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <SPI_RxByte+0x38>)
 800127e:	f007 fd66 	bl	8008d4e <HAL_SPI_GetState>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d1f9      	bne.n	800127c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001288:	1dba      	adds	r2, r7, #6
 800128a:	1df9      	adds	r1, r7, #7
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <SPI_RxByte+0x38>)
 8001296:	f007 fac9 	bl	800882c <HAL_SPI_TransmitReceive>

  return data;
 800129a:	79bb      	ldrb	r3, [r7, #6]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000d4c 	.word	0x20000d4c

080012a8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80012b0:	f7ff ffdc 	bl	800126c <SPI_RxByte>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <SD_ReadyWait+0x34>)
 80012cc:	2232      	movs	r2, #50	; 0x32
 80012ce:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80012d0:	f7ff ffcc 	bl	800126c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80012d4:	f7ff ffca 	bl	800126c <SPI_RxByte>
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2bff      	cmp	r3, #255	; 0xff
 80012e0:	d004      	beq.n	80012ec <SD_ReadyWait+0x28>
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SD_ReadyWait+0x34>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f3      	bne.n	80012d4 <SD_ReadyWait+0x10>

  return res;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000dec 	.word	0x20000dec

080012fc <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001302:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001306:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001308:	f7ff ff8a 	bl	8001220 <DESELECT>

  for(int i = 0; i < 10; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	e005      	b.n	800131e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001312:	20ff      	movs	r0, #255	; 0xff
 8001314:	f7ff ff90 	bl	8001238 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	3301      	adds	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b09      	cmp	r3, #9
 8001322:	ddf6      	ble.n	8001312 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001324:	f7ff ff70 	bl	8001208 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001328:	2340      	movs	r3, #64	; 0x40
 800132a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800133c:	2395      	movs	r3, #149	; 0x95
 800133e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e009      	b.n	800135a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001346:	1d3a      	adds	r2, r7, #4
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff72 	bl	8001238 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b05      	cmp	r3, #5
 800135e:	ddf2      	ble.n	8001346 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001360:	e002      	b.n	8001368 <SD_PowerOn+0x6c>
  {
    Count--;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3b01      	subs	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001368:	f7ff ff80 	bl	800126c <SPI_RxByte>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d002      	beq.n	8001378 <SD_PowerOn+0x7c>
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f4      	bne.n	8001362 <SD_PowerOn+0x66>
  }

  DESELECT();
 8001378:	f7ff ff52 	bl	8001220 <DESELECT>
  SPI_TxByte(0XFF);
 800137c:	20ff      	movs	r0, #255	; 0xff
 800137e:	f7ff ff5b 	bl	8001238 <SPI_TxByte>

  PowerFlag = 1;
 8001382:	4b03      	ldr	r3, [pc, #12]	; (8001390 <SD_PowerOn+0x94>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200000a5 	.word	0x200000a5

08001394 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <SD_PowerOff+0x14>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200000a5 	.word	0x200000a5

080013ac <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <SD_CheckPower+0x10>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	200000a5 	.word	0x200000a5

080013c0 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <SD_RxDataBlock+0x68>)
 80013cc:	220a      	movs	r2, #10
 80013ce:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80013d0:	f7ff ff4c 	bl	800126c <SPI_RxByte>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2bff      	cmp	r3, #255	; 0xff
 80013dc:	d104      	bne.n	80013e8 <SD_RxDataBlock+0x28>
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <SD_RxDataBlock+0x68>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f3      	bne.n	80013d0 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2bfe      	cmp	r3, #254	; 0xfe
 80013ec:	d001      	beq.n	80013f2 <SD_RxDataBlock+0x32>
    return FALSE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e016      	b.n	8001420 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff55 	bl	80012a8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff4f 	bl	80012a8 <SPI_RxBytePtr>
  } while(btr -= 2);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3b02      	subs	r3, #2
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ed      	bne.n	80013f2 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001416:	f7ff ff29 	bl	800126c <SPI_RxByte>
  SPI_RxByte();
 800141a:	f7ff ff27 	bl	800126c <SPI_RxByte>

  return TRUE;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000ded 	.word	0x20000ded

0800142c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800143c:	f7ff ff42 	bl	80012c4 <SD_ReadyWait>
 8001440:	4603      	mov	r3, r0
 8001442:	2bff      	cmp	r3, #255	; 0xff
 8001444:	d001      	beq.n	800144a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001446:	2300      	movs	r3, #0
 8001448:	e040      	b.n	80014cc <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fef3 	bl	8001238 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	2bfd      	cmp	r3, #253	; 0xfd
 8001456:	d031      	beq.n	80014bc <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fee7 	bl	8001238 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fee0 	bl	8001238 <SPI_TxByte>
    } while (--wc);
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	3b01      	subs	r3, #1
 800147c:	73bb      	strb	r3, [r7, #14]
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1eb      	bne.n	800145c <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001484:	f7ff fef2 	bl	800126c <SPI_RxByte>
    SPI_RxByte();
 8001488:	f7ff fef0 	bl	800126c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800148c:	e00b      	b.n	80014a6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800148e:	f7ff feed 	bl	800126c <SPI_RxByte>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	2b05      	cmp	r3, #5
 800149e:	d006      	beq.n	80014ae <SD_TxDataBlock+0x82>
        break;

      i++;
 80014a0:	7b7b      	ldrb	r3, [r7, #13]
 80014a2:	3301      	adds	r3, #1
 80014a4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80014a6:	7b7b      	ldrb	r3, [r7, #13]
 80014a8:	2b40      	cmp	r3, #64	; 0x40
 80014aa:	d9f0      	bls.n	800148e <SD_TxDataBlock+0x62>
 80014ac:	e000      	b.n	80014b0 <SD_TxDataBlock+0x84>
        break;
 80014ae:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80014b0:	bf00      	nop
 80014b2:	f7ff fedb 	bl	800126c <SPI_RxByte>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0fa      	beq.n	80014b2 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d101      	bne.n	80014ca <SD_TxDataBlock+0x9e>
    return TRUE;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80014e0:	f7ff fef0 	bl	80012c4 <SD_ReadyWait>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2bff      	cmp	r3, #255	; 0xff
 80014e8:	d001      	beq.n	80014ee <SD_SendCmd+0x1a>
    return 0xFF;
 80014ea:	23ff      	movs	r3, #255	; 0xff
 80014ec:	e040      	b.n	8001570 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fea1 	bl	8001238 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	0e1b      	lsrs	r3, r3, #24
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fe9b 	bl	8001238 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe95 	bl	8001238 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe8f 	bl	8001238 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fe8a 	bl	8001238 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b40      	cmp	r3, #64	; 0x40
 800152c:	d101      	bne.n	8001532 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800152e:	2395      	movs	r3, #149	; 0x95
 8001530:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b48      	cmp	r3, #72	; 0x48
 8001536:	d101      	bne.n	800153c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001538:	2387      	movs	r3, #135	; 0x87
 800153a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fe7a 	bl	8001238 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b4c      	cmp	r3, #76	; 0x4c
 8001548:	d101      	bne.n	800154e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800154a:	f7ff fe8f 	bl	800126c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800154e:	230a      	movs	r3, #10
 8001550:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001552:	f7ff fe8b 	bl	800126c <SPI_RxByte>
 8001556:	4603      	mov	r3, r0
 8001558:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800155a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800155e:	2b00      	cmp	r3, #0
 8001560:	da05      	bge.n	800156e <SD_SendCmd+0x9a>
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	3b01      	subs	r3, #1
 8001566:	73bb      	strb	r3, [r7, #14]
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f1      	bne.n	8001552 <SD_SendCmd+0x7e>

  return res;
 800156e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001588:	2301      	movs	r3, #1
 800158a:	e0d5      	b.n	8001738 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800158c:	4b6c      	ldr	r3, [pc, #432]	; (8001740 <SD_disk_initialize+0x1c8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <SD_disk_initialize+0x2a>
    return Stat;
 800159a:	4b69      	ldr	r3, [pc, #420]	; (8001740 <SD_disk_initialize+0x1c8>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	e0ca      	b.n	8001738 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80015a2:	f7ff feab 	bl	80012fc <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80015a6:	f7ff fe2f 	bl	8001208 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80015ae:	2100      	movs	r1, #0
 80015b0:	2040      	movs	r0, #64	; 0x40
 80015b2:	f7ff ff8f 	bl	80014d4 <SD_SendCmd>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 80a5 	bne.w	8001708 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80015be:	4b61      	ldr	r3, [pc, #388]	; (8001744 <SD_disk_initialize+0x1cc>)
 80015c0:	2264      	movs	r2, #100	; 0x64
 80015c2:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80015c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80015c8:	2048      	movs	r0, #72	; 0x48
 80015ca:	f7ff ff83 	bl	80014d4 <SD_SendCmd>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d158      	bne.n	8001686 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e00c      	b.n	80015f4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80015da:	7bfc      	ldrb	r4, [r7, #15]
 80015dc:	f7ff fe46 	bl	800126c <SPI_RxByte>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4423      	add	r3, r4
 80015ea:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d9ef      	bls.n	80015da <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015fa:	7abb      	ldrb	r3, [r7, #10]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 8083 	bne.w	8001708 <SD_disk_initialize+0x190>
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	2baa      	cmp	r3, #170	; 0xaa
 8001606:	d17f      	bne.n	8001708 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001608:	2100      	movs	r1, #0
 800160a:	2077      	movs	r0, #119	; 0x77
 800160c:	f7ff ff62 	bl	80014d4 <SD_SendCmd>
 8001610:	4603      	mov	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	d807      	bhi.n	8001626 <SD_disk_initialize+0xae>
 8001616:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800161a:	2069      	movs	r0, #105	; 0x69
 800161c:	f7ff ff5a 	bl	80014d4 <SD_SendCmd>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001626:	4b47      	ldr	r3, [pc, #284]	; (8001744 <SD_disk_initialize+0x1cc>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1eb      	bne.n	8001608 <SD_disk_initialize+0x90>
 8001630:	e000      	b.n	8001634 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001632:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001634:	4b43      	ldr	r3, [pc, #268]	; (8001744 <SD_disk_initialize+0x1cc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d064      	beq.n	8001708 <SD_disk_initialize+0x190>
 800163e:	2100      	movs	r1, #0
 8001640:	207a      	movs	r0, #122	; 0x7a
 8001642:	f7ff ff47 	bl	80014d4 <SD_SendCmd>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d15d      	bne.n	8001708 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e00c      	b.n	800166c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001652:	7bfc      	ldrb	r4, [r7, #15]
 8001654:	f7ff fe0a 	bl	800126c <SPI_RxByte>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4423      	add	r3, r4
 8001662:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	3301      	adds	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d9ef      	bls.n	8001652 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001672:	7a3b      	ldrb	r3, [r7, #8]
 8001674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_initialize+0x108>
 800167c:	2306      	movs	r3, #6
 800167e:	e000      	b.n	8001682 <SD_disk_initialize+0x10a>
 8001680:	2302      	movs	r3, #2
 8001682:	73bb      	strb	r3, [r7, #14]
 8001684:	e040      	b.n	8001708 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001686:	2100      	movs	r1, #0
 8001688:	2077      	movs	r0, #119	; 0x77
 800168a:	f7ff ff23 	bl	80014d4 <SD_SendCmd>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	d808      	bhi.n	80016a6 <SD_disk_initialize+0x12e>
 8001694:	2100      	movs	r1, #0
 8001696:	2069      	movs	r0, #105	; 0x69
 8001698:	f7ff ff1c 	bl	80014d4 <SD_SendCmd>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d801      	bhi.n	80016a6 <SD_disk_initialize+0x12e>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e000      	b.n	80016a8 <SD_disk_initialize+0x130>
 80016a6:	2301      	movs	r3, #1
 80016a8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80016aa:	7bbb      	ldrb	r3, [r7, #14]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d10e      	bne.n	80016ce <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80016b0:	2100      	movs	r1, #0
 80016b2:	2077      	movs	r0, #119	; 0x77
 80016b4:	f7ff ff0e 	bl	80014d4 <SD_SendCmd>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d80e      	bhi.n	80016dc <SD_disk_initialize+0x164>
 80016be:	2100      	movs	r1, #0
 80016c0:	2069      	movs	r0, #105	; 0x69
 80016c2:	f7ff ff07 	bl	80014d4 <SD_SendCmd>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80016cc:	e00d      	b.n	80016ea <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80016ce:	2100      	movs	r1, #0
 80016d0:	2041      	movs	r0, #65	; 0x41
 80016d2:	f7ff feff 	bl	80014d4 <SD_SendCmd>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <SD_disk_initialize+0x1cc>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1e1      	bne.n	80016aa <SD_disk_initialize+0x132>
 80016e6:	e000      	b.n	80016ea <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80016e8:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <SD_disk_initialize+0x1cc>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <SD_disk_initialize+0x18c>
 80016f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f8:	2050      	movs	r0, #80	; 0x50
 80016fa:	f7ff feeb 	bl	80014d4 <SD_SendCmd>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <SD_disk_initialize+0x1d0>)
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800170e:	f7ff fd87 	bl	8001220 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001712:	f7ff fdab 	bl	800126c <SPI_RxByte>

  if (type)
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <SD_disk_initialize+0x1c8>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SD_disk_initialize+0x1c8>)
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e001      	b.n	8001732 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800172e:	f7ff fe31 	bl	8001394 <SD_PowerOff>
  }

  return Stat;
 8001732:	4b03      	ldr	r3, [pc, #12]	; (8001740 <SD_disk_initialize+0x1c8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000ded 	.word	0x20000ded
 8001748:	200000a4 	.word	0x200000a4

0800174c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SD_disk_status+0x14>
    return STA_NOINIT;
 800175c:	2301      	movs	r3, #1
 800175e:	e002      	b.n	8001766 <SD_disk_status+0x1a>

  return Stat;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <SD_disk_status+0x24>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000000 	.word	0x20000000

08001774 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <SD_disk_read+0x1c>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <SD_disk_read+0x20>
    return RES_PARERR;
 8001790:	2304      	movs	r3, #4
 8001792:	e051      	b.n	8001838 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001794:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <SD_disk_read+0xcc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e048      	b.n	8001838 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <SD_disk_read+0xd0>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	607b      	str	r3, [r7, #4]

  SELECT();
 80017b8:	f7ff fd26 	bl	8001208 <SELECT>

  if (count == 1)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d111      	bne.n	80017e6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	2051      	movs	r0, #81	; 0x51
 80017c6:	f7ff fe85 	bl	80014d4 <SD_SendCmd>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d129      	bne.n	8001824 <SD_disk_read+0xb0>
 80017d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d4:	68b8      	ldr	r0, [r7, #8]
 80017d6:	f7ff fdf3 	bl	80013c0 <SD_RxDataBlock>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d021      	beq.n	8001824 <SD_disk_read+0xb0>
      count = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	e01e      	b.n	8001824 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	2052      	movs	r0, #82	; 0x52
 80017ea:	f7ff fe73 	bl	80014d4 <SD_SendCmd>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d117      	bne.n	8001824 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80017f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f8:	68b8      	ldr	r0, [r7, #8]
 80017fa:	f7ff fde1 	bl	80013c0 <SD_RxDataBlock>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800180a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3b01      	subs	r3, #1
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ed      	bne.n	80017f4 <SD_disk_read+0x80>
 8001818:	e000      	b.n	800181c <SD_disk_read+0xa8>
          break;
 800181a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800181c:	2100      	movs	r1, #0
 800181e:	204c      	movs	r0, #76	; 0x4c
 8001820:	f7ff fe58 	bl	80014d4 <SD_SendCmd>
    }
  }

  DESELECT();
 8001824:	f7ff fcfc 	bl	8001220 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001828:	f7ff fd20 	bl	800126c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	200000a4 	.word	0x200000a4

08001848 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <SD_disk_write+0x1c>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <SD_disk_write+0x20>
    return RES_PARERR;
 8001864:	2304      	movs	r3, #4
 8001866:	e06b      	b.n	8001940 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001868:	4b37      	ldr	r3, [pc, #220]	; (8001948 <SD_disk_write+0x100>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001876:	2303      	movs	r3, #3
 8001878:	e062      	b.n	8001940 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <SD_disk_write+0x100>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001888:	2302      	movs	r3, #2
 800188a:	e059      	b.n	8001940 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <SD_disk_write+0x104>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	025b      	lsls	r3, r3, #9
 800189c:	607b      	str	r3, [r7, #4]

  SELECT();
 800189e:	f7ff fcb3 	bl	8001208 <SELECT>

  if (count == 1)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d110      	bne.n	80018ca <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	2058      	movs	r0, #88	; 0x58
 80018ac:	f7ff fe12 	bl	80014d4 <SD_SendCmd>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d13a      	bne.n	800192c <SD_disk_write+0xe4>
 80018b6:	21fe      	movs	r1, #254	; 0xfe
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f7ff fdb7 	bl	800142c <SD_TxDataBlock>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d033      	beq.n	800192c <SD_disk_write+0xe4>
      count = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	e030      	b.n	800192c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <SD_disk_write+0x104>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80018d6:	2100      	movs	r1, #0
 80018d8:	2077      	movs	r0, #119	; 0x77
 80018da:	f7ff fdfb 	bl	80014d4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	2057      	movs	r0, #87	; 0x57
 80018e2:	f7ff fdf7 	bl	80014d4 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	2059      	movs	r0, #89	; 0x59
 80018ea:	f7ff fdf3 	bl	80014d4 <SD_SendCmd>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d11b      	bne.n	800192c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80018f4:	21fc      	movs	r1, #252	; 0xfc
 80018f6:	68b8      	ldr	r0, [r7, #8]
 80018f8:	f7ff fd98 	bl	800142c <SD_TxDataBlock>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001908:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ee      	bne.n	80018f4 <SD_disk_write+0xac>
 8001916:	e000      	b.n	800191a <SD_disk_write+0xd2>
          break;
 8001918:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800191a:	21fd      	movs	r1, #253	; 0xfd
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fd85 	bl	800142c <SD_TxDataBlock>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <SD_disk_write+0xe4>
      {
        count = 1;
 8001928:	2301      	movs	r3, #1
 800192a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800192c:	f7ff fc78 	bl	8001220 <DESELECT>
  SPI_RxByte();
 8001930:	f7ff fc9c 	bl	800126c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	200000a4 	.word	0x200000a4

08001950 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08b      	sub	sp, #44	; 0x2c
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	603a      	str	r2, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	460b      	mov	r3, r1
 800195e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800196a:	2304      	movs	r3, #4
 800196c:	e11b      	b.n	8001ba6 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d129      	bne.n	80019ce <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d017      	beq.n	80019b2 <SD_disk_ioctl+0x62>
 8001982:	2b02      	cmp	r3, #2
 8001984:	dc1f      	bgt.n	80019c6 <SD_disk_ioctl+0x76>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <SD_disk_ioctl+0x40>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d00b      	beq.n	80019a6 <SD_disk_ioctl+0x56>
 800198e:	e01a      	b.n	80019c6 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001990:	f7ff fd0c 	bl	80013ac <SD_CheckPower>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800199a:	f7ff fcfb 	bl	8001394 <SD_PowerOff>
      res = RES_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019a4:	e0fd      	b.n	8001ba2 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80019a6:	f7ff fca9 	bl	80012fc <SD_PowerOn>
      res = RES_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019b0:	e0f7      	b.n	8001ba2 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	1c5c      	adds	r4, r3, #1
 80019b6:	f7ff fcf9 	bl	80013ac <SD_CheckPower>
 80019ba:	4603      	mov	r3, r0
 80019bc:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019c4:	e0ed      	b.n	8001ba2 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80019c6:	2304      	movs	r3, #4
 80019c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019cc:	e0e9      	b.n	8001ba2 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80019ce:	4b78      	ldr	r3, [pc, #480]	; (8001bb0 <SD_disk_ioctl+0x260>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0e2      	b.n	8001ba6 <SD_disk_ioctl+0x256>

    SELECT();
 80019e0:	f7ff fc12 	bl	8001208 <SELECT>

    switch (ctrl)
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	2b0d      	cmp	r3, #13
 80019e8:	f200 80cc 	bhi.w	8001b84 <SD_disk_ioctl+0x234>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <SD_disk_ioctl+0xa4>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001aef 	.word	0x08001aef
 80019f8:	08001a2d 	.word	0x08001a2d
 80019fc:	08001adf 	.word	0x08001adf
 8001a00:	08001b85 	.word	0x08001b85
 8001a04:	08001b85 	.word	0x08001b85
 8001a08:	08001b85 	.word	0x08001b85
 8001a0c:	08001b85 	.word	0x08001b85
 8001a10:	08001b85 	.word	0x08001b85
 8001a14:	08001b85 	.word	0x08001b85
 8001a18:	08001b85 	.word	0x08001b85
 8001a1c:	08001b85 	.word	0x08001b85
 8001a20:	08001b01 	.word	0x08001b01
 8001a24:	08001b25 	.word	0x08001b25
 8001a28:	08001b49 	.word	0x08001b49
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2049      	movs	r0, #73	; 0x49
 8001a30:	f7ff fd50 	bl	80014d4 <SD_SendCmd>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 80a8 	bne.w	8001b8c <SD_disk_ioctl+0x23c>
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	2110      	movs	r1, #16
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fcbc 	bl	80013c0 <SD_RxDataBlock>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 809e 	beq.w	8001b8c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001a50:	7b3b      	ldrb	r3, [r7, #12]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10e      	bne.n	8001a78 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a5a:	7d7b      	ldrb	r3, [r7, #21]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	7d3b      	ldrb	r3, [r7, #20]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	029a      	lsls	r2, r3, #10
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e02e      	b.n	8001ad6 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a78:	7c7b      	ldrb	r3, [r7, #17]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	7dbb      	ldrb	r3, [r7, #22]
 8001a82:	09db      	lsrs	r3, r3, #7
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	7d7b      	ldrb	r3, [r7, #21]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f003 0306 	and.w	r3, r3, #6
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001aa0:	7d3b      	ldrb	r3, [r7, #20]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	7cfb      	ldrb	r3, [r7, #19]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	7cbb      	ldrb	r3, [r7, #18]
 8001ab6:	029b      	lsls	r3, r3, #10
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ac8:	8bfa      	ldrh	r2, [r7, #30]
 8001aca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ace:	3b09      	subs	r3, #9
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001adc:	e056      	b.n	8001b8c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001aec:	e055      	b.n	8001b9a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001aee:	f7ff fbe9 	bl	80012c4 <SD_ReadyWait>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2bff      	cmp	r3, #255	; 0xff
 8001af6:	d14b      	bne.n	8001b90 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001afe:	e047      	b.n	8001b90 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b00:	2100      	movs	r1, #0
 8001b02:	2049      	movs	r0, #73	; 0x49
 8001b04:	f7ff fce6 	bl	80014d4 <SD_SendCmd>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d142      	bne.n	8001b94 <SD_disk_ioctl+0x244>
 8001b0e:	2110      	movs	r1, #16
 8001b10:	6a38      	ldr	r0, [r7, #32]
 8001b12:	f7ff fc55 	bl	80013c0 <SD_RxDataBlock>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d03b      	beq.n	8001b94 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b22:	e037      	b.n	8001b94 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b24:	2100      	movs	r1, #0
 8001b26:	204a      	movs	r0, #74	; 0x4a
 8001b28:	f7ff fcd4 	bl	80014d4 <SD_SendCmd>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d132      	bne.n	8001b98 <SD_disk_ioctl+0x248>
 8001b32:	2110      	movs	r1, #16
 8001b34:	6a38      	ldr	r0, [r7, #32]
 8001b36:	f7ff fc43 	bl	80013c0 <SD_RxDataBlock>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d02b      	beq.n	8001b98 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b46:	e027      	b.n	8001b98 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	207a      	movs	r0, #122	; 0x7a
 8001b4c:	f7ff fcc2 	bl	80014d4 <SD_SendCmd>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d116      	bne.n	8001b84 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b5c:	e00b      	b.n	8001b76 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001b5e:	6a3c      	ldr	r4, [r7, #32]
 8001b60:	1c63      	adds	r3, r4, #1
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	f7ff fb82 	bl	800126c <SPI_RxByte>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b70:	3301      	adds	r3, #1
 8001b72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d9ef      	bls.n	8001b5e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001b84:	2304      	movs	r3, #4
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b8a:	e006      	b.n	8001b9a <SD_disk_ioctl+0x24a>
      break;
 8001b8c:	bf00      	nop
 8001b8e:	e004      	b.n	8001b9a <SD_disk_ioctl+0x24a>
      break;
 8001b90:	bf00      	nop
 8001b92:	e002      	b.n	8001b9a <SD_disk_ioctl+0x24a>
      break;
 8001b94:	bf00      	nop
 8001b96:	e000      	b.n	8001b9a <SD_disk_ioctl+0x24a>
      break;
 8001b98:	bf00      	nop
    }

    DESELECT();
 8001b9a:	f7ff fb41 	bl	8001220 <DESELECT>
    SPI_RxByte();
 8001b9e:	f7ff fb65 	bl	800126c <SPI_RxByte>
  }

  return res;
 8001ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	372c      	adds	r7, #44	; 0x2c
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <forceGauge_uart_Init_DMA>:

/*
 *	Função que inicia a leitura
 */
void forceGauge_uart_Init_DMA(fGauge_HandleTypeDef *hfGauge)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f008 f8fd 	bl	8009dc6 <HAL_UART_Receive_DMA>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <forceGauge_getForce>:
/*
 * 	Função que lê os valores no buffer e converte a string em um int.
 * 	Essa função tambem detecta se a celula de carga foi desconectada e reinicia a leitura quando possivel.
 */
void forceGauge_getForce(fGauge_HandleTypeDef *hfGauge)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	int force = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]

	/*	Logica para reiniciar a leitura	*/
	if (hfGauge->huart->hdmatx->State != HAL_DMA_STATE_BUSY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d00b      	beq.n	8001c0e <forceGauge_getForce+0x32>
		hfGauge->result = HAL_UART_Receive_DMA(hfGauge->huart, hfGauge->rxbuffer, 16);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2210      	movs	r2, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	f008 f8e0 	bl	8009dc6 <HAL_UART_Receive_DMA>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	761a      	strb	r2, [r3, #24]

	/*	Conversão string to int	*/
	if (hfGauge->rxbuffer[14] >=48 && hfGauge->rxbuffer[14] <= 57)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7c9b      	ldrb	r3, [r3, #18]
 8001c12:	2b2f      	cmp	r3, #47	; 0x2f
 8001c14:	d94d      	bls.n	8001cb2 <forceGauge_getForce+0xd6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7c9b      	ldrb	r3, [r3, #18]
 8001c1a:	2b39      	cmp	r3, #57	; 0x39
 8001c1c:	d849      	bhi.n	8001cb2 <forceGauge_getForce+0xd6>
	{
		force += (hfGauge->rxbuffer[14] - 48) * 1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7c9b      	ldrb	r3, [r3, #18]
 8001c22:	3b30      	subs	r3, #48	; 0x30
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[13] - 48) * 10;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7c5b      	ldrb	r3, [r3, #17]
 8001c2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[12] - 48) * 100;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7c1b      	ldrb	r3, [r3, #16]
 8001c46:	3b30      	subs	r3, #48	; 0x30
 8001c48:	2264      	movs	r2, #100	; 0x64
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[11] - 48) * 1000;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7bdb      	ldrb	r3, [r3, #15]
 8001c58:	3b30      	subs	r3, #48	; 0x30
 8001c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[10] - 48) * 10000;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7b9b      	ldrb	r3, [r3, #14]
 8001c6c:	3b30      	subs	r3, #48	; 0x30
 8001c6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[9] - 48) * 100000;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7b5b      	ldrb	r3, [r3, #13]
 8001c80:	3b30      	subs	r3, #48	; 0x30
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <forceGauge_getForce+0xe4>)
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[8] - 48) * 1000000;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7b1b      	ldrb	r3, [r3, #12]
 8001c92:	3b30      	subs	r3, #48	; 0x30
 8001c94:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <forceGauge_getForce+0xe8>)
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
		force += (hfGauge->rxbuffer[7] - 48) * 10000000;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7adb      	ldrb	r3, [r3, #11]
 8001ca4:	3b30      	subs	r3, #48	; 0x30
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <forceGauge_getForce+0xec>)
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
	}

	hfGauge->force = force;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	615a      	str	r2, [r3, #20]
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	000186a0 	.word	0x000186a0
 8001cc4:	000f4240 	.word	0x000f4240
 8001cc8:	00989680 	.word	0x00989680

08001ccc <indutivo_Init>:

/*
 * 	Função para iniciar a leitura
 */
HAL_StatusTypeDef indutivo_Init(indutivo_typedef *hindutivo)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	hindutivo->value_raw = 0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
	hindutivo->freq = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
	hindutivo->count = 0;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]

	result = HAL_TIM_Base_Start_IT(hindutivo->htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	4618      	mov	r0, r3
 8001cec:	f007 f946 	bl	8008f7c <HAL_TIM_Base_Start_IT>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]
	result = HAL_TIM_IC_Start_IT(hindutivo->htim, hindutivo->channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f007 f9e6 	bl	80090d0 <HAL_TIM_IC_Start_IT>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]

	return result;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <indutivo_filtro>:

/*
 * 	Função para o filtro de dados, calcula o value
 */
void indutivo_filtro(indutivo_typedef *hindutivo)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	hindutivo->value = 0;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]

	if (hindutivo->value_raw > 9999)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	dd03      	ble.n	8001d36 <indutivo_filtro+0x22>
		hindutivo->value_raw = hindutivo->buf[4];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 4; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e00f      	b.n	8001d5c <indutivo_filtro+0x48>
		hindutivo->buf[i] = hindutivo->buf[i+1];
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	ddec      	ble.n	8001d3c <indutivo_filtro+0x28>

	hindutivo->buf[4] = hindutivo->value_raw;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

	for (int i = 0; i < 5; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	e00d      	b.n	8001d8c <indutivo_filtro+0x78>
		hindutivo->value += hindutivo->buf[i];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	441a      	add	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	ddee      	ble.n	8001d70 <indutivo_filtro+0x5c>

	hindutivo->value = (int)hindutivo->value/5.0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbe0 	bl	800055c <__aeabi_i2d>
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <indutivo_filtro+0xac>)
 8001da2:	f7fe fd6f 	bl	8000884 <__aeabi_ddiv>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe fe51 	bl	8000a54 <__aeabi_d2iz>
 8001db2:	4602      	mov	r2, r0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	605a      	str	r2, [r3, #4]
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40140000 	.word	0x40140000
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <indutivo_calc>:
/*
 * 	Função pra ser chamada quando ocorre a interrupção de sinal
 * 	Calcula o value_raw
 */
void indutivo_calc(indutivo_typedef *hindutivo)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	hindutivo->count += __HAL_TIM_GET_COMPARE(hindutivo->htim, hindutivo->channel);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d104      	bne.n	8001de2 <indutivo_calc+0x1a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	e015      	b.n	8001e0e <indutivo_calc+0x46>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d104      	bne.n	8001df4 <indutivo_calc+0x2c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	e00c      	b.n	8001e0e <indutivo_calc+0x46>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d104      	bne.n	8001e06 <indutivo_calc+0x3e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	e003      	b.n	8001e0e <indutivo_calc+0x46>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68d2      	ldr	r2, [r2, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(hindutivo->htim, 0);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
	hindutivo->freq = (int)(100000000.0 / hindutivo->count);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb97 	bl	800055c <__aeabi_i2d>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	a115      	add	r1, pc, #84	; (adr r1, 8001e88 <indutivo_calc+0xc0>)
 8001e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e38:	f7fe fd24 	bl	8000884 <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7fe fe06 	bl	8000a54 <__aeabi_d2iz>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
	hindutivo->value_raw = (int)(hindutivo->constante*hindutivo->freq);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681c      	ldr	r4, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff2e 	bl	8000cb8 <__aeabi_i2f>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7fe f975 	bl	8000150 <__aeabi_fmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe ff79 	bl	8000d60 <__aeabi_f2iz>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
	indutivo_filtro(hindutivo);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff4d 	bl	8001d14 <indutivo_filtro>
	hindutivo->count = 0;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	4197d784 	.word	0x4197d784

08001e90 <indutivo_reset>:
/*
 * 	Função pra ser chamada quando o timer atinge valor maximo
 * 	Zera os valores
 */
void indutivo_reset(indutivo_typedef *hindutivo)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	if(hindutivo->count<1000000)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <indutivo_reset+0x3c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	dc07      	bgt.n	8001eb2 <indutivo_reset+0x22>
	{
		hindutivo->count+=50000;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8001eaa:	3350      	adds	r3, #80	; 0x50
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	60d3      	str	r3, [r2, #12]
	{
		hindutivo->freq=0;
		hindutivo->value_raw=0;
		indutivo_filtro(hindutivo);
	}
}
 8001eb0:	e008      	b.n	8001ec4 <indutivo_reset+0x34>
		hindutivo->freq=0;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
		hindutivo->value_raw=0;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
		indutivo_filtro(hindutivo);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff28 	bl	8001d14 <indutivo_filtro>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	000f423f 	.word	0x000f423f

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed4:	f001 fbfa 	bl	80036cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed8:	f000 f84c 	bl	8001f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001edc:	f000 fb5c 	bl	8002598 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee0:	f000 fb34 	bl	800254c <MX_DMA_Init>
  MX_ADC1_Init();
 8001ee4:	f000 f8a2 	bl	800202c <MX_ADC1_Init>
  MX_I2C2_Init();
 8001ee8:	f000 f922 	bl	8002130 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001eec:	f000 f94e 	bl	800218c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001ef0:	f000 f9f6 	bl	80022e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ef4:	f000 fa64 	bl	80023c0 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001ef8:	f008 fc78 	bl	800a7ec <MX_FATFS_Init>
  MX_TIM4_Init();
 8001efc:	f000 faae 	bl	800245c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f00:	f000 f97a 	bl	80021f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001f04:	f000 faf8 	bl	80024f8 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8001f08:	f000 f8de 	bl	80020c8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	fresult = SD_Init();
 8001f0c:	f000 fc18 	bl	8002740 <SD_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <main+0x98>)
 8001f16:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NOT_READY)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <main+0x98>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d103      	bne.n	8001f28 <main+0x58>
		sdCard.mode = 9;
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <main+0x9c>)
 8001f22:	2209      	movs	r2, #9
 8001f24:	f8a3 26a4 	strh.w	r2, [r3, #1700]	; 0x6a4

	if (sdCard.mode == 0)
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <main+0x9c>)
 8001f2a:	f8b3 36a4 	ldrh.w	r3, [r3, #1700]	; 0x6a4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d104      	bne.n	8001f3c <main+0x6c>
	{
	  rot_Init();
 8001f32:	f000 fba5 	bl	8002680 <rot_Init>
	  vel_Init();
 8001f36:	f001 fb79 	bl	800362c <vel_Init>
 8001f3a:	e013      	b.n	8001f64 <main+0x94>
	}
	else if (sdCard.mode == 1)
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <main+0x9c>)
 8001f3e:	f8b3 36a4 	ldrh.w	r3, [r3, #1700]	; 0x6a4
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d104      	bne.n	8001f50 <main+0x80>
	{
	  rot_Init();
 8001f46:	f000 fb9b 	bl	8002680 <rot_Init>
	  dina_Init();
 8001f4a:	f7ff f945 	bl	80011d8 <dina_Init>
 8001f4e:	e009      	b.n	8001f64 <main+0x94>
	}
	else if (sdCard.mode == 2)
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <main+0x9c>)
 8001f52:	f8b3 36a4 	ldrh.w	r3, [r3, #1700]	; 0x6a4
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d104      	bne.n	8001f64 <main+0x94>
	{
		aceGir_Init(&hi2c2);
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <main+0xa0>)
 8001f5c:	f7fe ff26 	bl	8000dac <aceGir_Init>
		can_bus_Init();
 8001f60:	f7ff f89a 	bl	8001098 <can_bus_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <main+0x94>
 8001f66:	bf00      	nop
 8001f68:	20000d48 	.word	0x20000d48
 8001f6c:	20000490 	.word	0x20000490
 8001f70:	20000b38 	.word	0x20000b38

08001f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b094      	sub	sp, #80	; 0x50
 8001f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7e:	2228      	movs	r2, #40	; 0x28
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f00b ffb6 	bl	800def4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 fd9e 	bl	8007b0c <HAL_RCC_OscConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001fd6:	f000 fb4d 	bl	8002674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fda:	230f      	movs	r3, #15
 8001fdc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f006 f808 	bl	800800c <HAL_RCC_ClockConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002002:	f000 fb37 	bl	8002674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002006:	2302      	movs	r3, #2
 8002008:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800200a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800200e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f006 f994 	bl	8008340 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800201e:	f000 fb29 	bl	8002674 <Error_Handler>
  }
}
 8002022:	bf00      	nop
 8002024:	3750      	adds	r7, #80	; 0x50
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <MX_ADC1_Init+0x94>)
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <MX_ADC1_Init+0x98>)
 8002040:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002042:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <MX_ADC1_Init+0x94>)
 8002044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002048:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <MX_ADC1_Init+0x94>)
 800204c:	2201      	movs	r2, #1
 800204e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_ADC1_Init+0x94>)
 8002052:	2200      	movs	r2, #0
 8002054:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_ADC1_Init+0x94>)
 8002058:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800205c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_ADC1_Init+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_ADC1_Init+0x94>)
 8002066:	2202      	movs	r2, #2
 8002068:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800206a:	4815      	ldr	r0, [pc, #84]	; (80020c0 <MX_ADC1_Init+0x94>)
 800206c:	f001 fb90 	bl	8003790 <HAL_ADC_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002076:	f000 fafd 	bl	8002674 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800207a:	2307      	movs	r3, #7
 800207c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800207e:	2301      	movs	r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002082:	2307      	movs	r3, #7
 8002084:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_ADC1_Init+0x94>)
 800208c:	f001 fc58 	bl	8003940 <HAL_ADC_ConfigChannel>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002096:	f000 faed 	bl	8002674 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800209a:	2309      	movs	r3, #9
 800209c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800209e:	2302      	movs	r3, #2
 80020a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4806      	ldr	r0, [pc, #24]	; (80020c0 <MX_ADC1_Init+0x94>)
 80020a8:	f001 fc4a 	bl	8003940 <HAL_ADC_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80020b2:	f000 fadf 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000c04 	.word	0x20000c04
 80020c4:	40012400 	.word	0x40012400

080020c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_CAN_Init+0x60>)
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <MX_CAN_Init+0x64>)
 80020d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_CAN_Init+0x60>)
 80020d4:	2210      	movs	r2, #16
 80020d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_CAN_Init+0x60>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_CAN_Init+0x60>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_CAN_Init+0x60>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_CAN_Init+0x60>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <MX_CAN_Init+0x60>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_CAN_Init+0x60>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MX_CAN_Init+0x60>)
 80020fe:	2200      	movs	r2, #0
 8002100:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_CAN_Init+0x60>)
 8002104:	2200      	movs	r2, #0
 8002106:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <MX_CAN_Init+0x60>)
 800210a:	2200      	movs	r2, #0
 800210c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_CAN_Init+0x60>)
 8002110:	2200      	movs	r2, #0
 8002112:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <MX_CAN_Init+0x60>)
 8002116:	f001 fd4c 	bl	8003bb2 <HAL_CAN_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8002120:	f000 faa8 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200003d8 	.word	0x200003d8
 800212c:	40006400 	.word	0x40006400

08002130 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <MX_I2C2_Init+0x50>)
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <MX_I2C2_Init+0x54>)
 8002138:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_I2C2_Init+0x50>)
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <MX_I2C2_Init+0x58>)
 800213e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_I2C2_Init+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_I2C2_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_I2C2_Init+0x50>)
 800214e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002152:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <MX_I2C2_Init+0x50>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_I2C2_Init+0x50>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <MX_I2C2_Init+0x50>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_I2C2_Init+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <MX_I2C2_Init+0x50>)
 800216e:	f002 fff9 	bl	8005164 <HAL_I2C_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002178:	f000 fa7c 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000b38 	.word	0x20000b38
 8002184:	40005800 	.word	0x40005800
 8002188:	000186a0 	.word	0x000186a0

0800218c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_SPI1_Init+0x64>)
 8002192:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <MX_SPI1_Init+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MX_SPI1_Init+0x64>)
 8002198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800219c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021c0:	2210      	movs	r2, #16
 80021c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021d8:	220a      	movs	r2, #10
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <MX_SPI1_Init+0x64>)
 80021de:	f006 f965 	bl	80084ac <HAL_SPI_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021e8:	f000 fa44 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000d4c 	.word	0x20000d4c
 80021f4:	40013000 	.word	0x40013000

080021f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fe:	f107 0318 	add.w	r3, r7, #24
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002216:	463b      	mov	r3, r7
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <MX_TIM1_Init+0xe0>)
 8002224:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <MX_TIM1_Init+0xe4>)
 8002226:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <MX_TIM1_Init+0xe0>)
 800222a:	2247      	movs	r2, #71	; 0x47
 800222c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <MX_TIM1_Init+0xe0>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <MX_TIM1_Init+0xe0>)
 8002236:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800223a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <MX_TIM1_Init+0xe0>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <MX_TIM1_Init+0xe0>)
 8002244:	2200      	movs	r2, #0
 8002246:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <MX_TIM1_Init+0xe0>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800224e:	4822      	ldr	r0, [pc, #136]	; (80022d8 <MX_TIM1_Init+0xe0>)
 8002250:	f006 fe44 	bl	8008edc <HAL_TIM_Base_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800225a:	f000 fa0b 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002262:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	4619      	mov	r1, r3
 800226a:	481b      	ldr	r0, [pc, #108]	; (80022d8 <MX_TIM1_Init+0xe0>)
 800226c:	f007 f9d2 	bl	8009614 <HAL_TIM_ConfigClockSource>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002276:	f000 f9fd 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800227a:	4817      	ldr	r0, [pc, #92]	; (80022d8 <MX_TIM1_Init+0xe0>)
 800227c:	f006 fed0 	bl	8009020 <HAL_TIM_IC_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002286:	f000 f9f5 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	4619      	mov	r1, r3
 8002298:	480f      	ldr	r0, [pc, #60]	; (80022d8 <MX_TIM1_Init+0xe0>)
 800229a:	f007 fcd7 	bl	8009c4c <HAL_TIMEx_MasterConfigSynchronization>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80022a4:	f000 f9e6 	bl	8002674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022a8:	2300      	movs	r3, #0
 80022aa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022ac:	2301      	movs	r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80022b4:	230f      	movs	r3, #15
 80022b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022b8:	463b      	mov	r3, r7
 80022ba:	2200      	movs	r2, #0
 80022bc:	4619      	mov	r1, r3
 80022be:	4806      	ldr	r0, [pc, #24]	; (80022d8 <MX_TIM1_Init+0xe0>)
 80022c0:	f007 f914 	bl	80094ec <HAL_TIM_IC_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80022ca:	f000 f9d3 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	; 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000d00 	.word	0x20000d00
 80022dc:	40012c00 	.word	0x40012c00

080022e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e6:	f107 0318 	add.w	r3, r7, #24
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022fe:	463b      	mov	r3, r7
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <MX_TIM2_Init+0xdc>)
 800230c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002314:	2247      	movs	r2, #71	; 0x47
 8002316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <MX_TIM2_Init+0xdc>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800231e:	4b27      	ldr	r3, [pc, #156]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002320:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <MX_TIM2_Init+0xdc>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002332:	4822      	ldr	r0, [pc, #136]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002334:	f006 fdd2 	bl	8008edc <HAL_TIM_Base_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800233e:	f000 f999 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002346:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002348:	f107 0318 	add.w	r3, r7, #24
 800234c:	4619      	mov	r1, r3
 800234e:	481b      	ldr	r0, [pc, #108]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002350:	f007 f960 	bl	8009614 <HAL_TIM_ConfigClockSource>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800235a:	f000 f98b 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800235e:	4817      	ldr	r0, [pc, #92]	; (80023bc <MX_TIM2_Init+0xdc>)
 8002360:	f006 fe5e 	bl	8009020 <HAL_TIM_IC_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800236a:	f000 f983 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4619      	mov	r1, r3
 800237c:	480f      	ldr	r0, [pc, #60]	; (80023bc <MX_TIM2_Init+0xdc>)
 800237e:	f007 fc65 	bl	8009c4c <HAL_TIMEx_MasterConfigSynchronization>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002388:	f000 f974 	bl	8002674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800238c:	2300      	movs	r3, #0
 800238e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002390:	2301      	movs	r3, #1
 8002392:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002398:	230f      	movs	r3, #15
 800239a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	4619      	mov	r1, r3
 80023a2:	4806      	ldr	r0, [pc, #24]	; (80023bc <MX_TIM2_Init+0xdc>)
 80023a4:	f007 f8a2 	bl	80094ec <HAL_TIM_IC_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80023ae:	f000 f961 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	; 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000da4 	.word	0x20000da4

080023c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	463b      	mov	r3, r7
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_TIM3_Init+0x94>)
 80023de:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <MX_TIM3_Init+0x98>)
 80023e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_TIM3_Init+0x94>)
 80023e4:	2247      	movs	r2, #71	; 0x47
 80023e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_TIM3_Init+0x94>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <MX_TIM3_Init+0x94>)
 80023f0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80023f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_TIM3_Init+0x94>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MX_TIM3_Init+0x94>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002402:	4814      	ldr	r0, [pc, #80]	; (8002454 <MX_TIM3_Init+0x94>)
 8002404:	f006 fd6a 	bl	8008edc <HAL_TIM_Base_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800240e:	f000 f931 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002418:	f107 0308 	add.w	r3, r7, #8
 800241c:	4619      	mov	r1, r3
 800241e:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_TIM3_Init+0x94>)
 8002420:	f007 f8f8 	bl	8009614 <HAL_TIM_ConfigClockSource>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800242a:	f000 f923 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002436:	463b      	mov	r3, r7
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	; (8002454 <MX_TIM3_Init+0x94>)
 800243c:	f007 fc06 	bl	8009c4c <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002446:	f000 f915 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000b8c 	.word	0x20000b8c
 8002458:	40000400 	.word	0x40000400

0800245c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002462:	f107 0308 	add.w	r3, r7, #8
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002470:	463b      	mov	r3, r7
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <MX_TIM4_Init+0x94>)
 800247a:	4a1e      	ldr	r2, [pc, #120]	; (80024f4 <MX_TIM4_Init+0x98>)
 800247c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800247e:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <MX_TIM4_Init+0x94>)
 8002480:	2247      	movs	r2, #71	; 0x47
 8002482:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <MX_TIM4_Init+0x94>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <MX_TIM4_Init+0x94>)
 800248c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002490:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <MX_TIM4_Init+0x94>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <MX_TIM4_Init+0x94>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800249e:	4814      	ldr	r0, [pc, #80]	; (80024f0 <MX_TIM4_Init+0x94>)
 80024a0:	f006 fd1c 	bl	8008edc <HAL_TIM_Base_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80024aa:	f000 f8e3 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024b4:	f107 0308 	add.w	r3, r7, #8
 80024b8:	4619      	mov	r1, r3
 80024ba:	480d      	ldr	r0, [pc, #52]	; (80024f0 <MX_TIM4_Init+0x94>)
 80024bc:	f007 f8aa 	bl	8009614 <HAL_TIM_ConfigClockSource>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80024c6:	f000 f8d5 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024d2:	463b      	mov	r3, r7
 80024d4:	4619      	mov	r1, r3
 80024d6:	4806      	ldr	r0, [pc, #24]	; (80024f0 <MX_TIM4_Init+0x94>)
 80024d8:	f007 fbb8 	bl	8009c4c <HAL_TIMEx_MasterConfigSynchronization>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80024e2:	f000 f8c7 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200002e0 	.word	0x200002e0
 80024f4:	40000800 	.word	0x40000800

080024f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <MX_USART1_UART_Init+0x50>)
 8002500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 800251e:	220c      	movs	r2, #12
 8002520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002530:	f007 fbfc 	bl	8009d2c <HAL_UART_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800253a:	f000 f89b 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000c78 	.word	0x20000c78
 8002548:	40013800 	.word	0x40013800

0800254c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <MX_DMA_Init+0x48>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <MX_DMA_Init+0x48>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6153      	str	r3, [r2, #20]
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <MX_DMA_Init+0x48>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	200b      	movs	r0, #11
 8002570:	f002 f961 	bl	8004836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002574:	200b      	movs	r0, #11
 8002576:	f002 f97a 	bl	800486e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200f      	movs	r0, #15
 8002580:	f002 f959 	bl	8004836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002584:	200f      	movs	r0, #15
 8002586:	f002 f972 	bl	800486e <HAL_NVIC_EnableIRQ>

}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025b2:	f043 0310 	orr.w	r3, r3, #16
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a27      	ldr	r2, [pc, #156]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a21      	ldr	r2, [pc, #132]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <MX_GPIO_Init+0xd0>)
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <MX_GPIO_Init+0xd0>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002612:	4816      	ldr	r0, [pc, #88]	; (800266c <MX_GPIO_Init+0xd4>)
 8002614:	f002 fd74 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800261e:	4814      	ldr	r0, [pc, #80]	; (8002670 <MX_GPIO_Init+0xd8>)
 8002620:	f002 fd6e 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8002624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262a:	2301      	movs	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2302      	movs	r3, #2
 8002634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	4619      	mov	r1, r3
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <MX_GPIO_Init+0xd4>)
 800263e:	f002 fbdb 	bl	8004df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002650:	2301      	movs	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4619      	mov	r1, r3
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_GPIO_Init+0xd8>)
 800265c:	f002 fbcc 	bl	8004df8 <HAL_GPIO_Init>

}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	40011000 	.word	0x40011000
 8002670:	40010800 	.word	0x40010800

08002674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002678:	b672      	cpsid	i
}
 800267a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800267c:	e7fe      	b.n	800267c <Error_Handler+0x8>
	...

08002680 <rot_Init>:

/*
 * 	Função de inicialização
 */
void rot_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	rot.constante = 0.6;			/* < Salva a constante para calculo da rotação do motor */
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <rot_Init+0x20>)
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <rot_Init+0x24>)
 8002688:	601a      	str	r2, [r3, #0]
	rot.htim = &htim1;				/* < Salva o ponteiro do Timer que será utilizado */
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <rot_Init+0x20>)
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <rot_Init+0x28>)
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
	rot.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <rot_Init+0x20>)
 8002692:	2200      	movs	r2, #0
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&rot);			/* < Chama função de inicialização */
 8002696:	4802      	ldr	r0, [pc, #8]	; (80026a0 <rot_Init+0x20>)
 8002698:	f7ff fb18 	bl	8001ccc <indutivo_Init>
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000460 	.word	0x20000460
 80026a4:	3f19999a 	.word	0x3f19999a
 80026a8:	20000d00 	.word	0x20000d00

080026ac <rot_Reset>:

/*
 * 	Função de reset
 */
void rot_Reset(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	indutivo_reset(&rot);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <rot_Reset+0x10>)
 80026b2:	f7ff fbed 	bl	8001e90 <indutivo_reset>
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000460 	.word	0x20000460

080026c0 <rot_Calc>:

/*
 * 	Função de calculo
 */
void rot_Calc(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	indutivo_calc(&rot);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <rot_Calc+0x10>)
 80026c6:	f7ff fb7f 	bl	8001dc8 <indutivo_calc>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000460 	.word	0x20000460

080026d4 <bufsize>:

/*
 * 	Função para calcular tamanho de um buffer
 */
int bufsize(char *buf)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	int i = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 80026e0:	e002      	b.n	80026e8 <bufsize+0x14>
		i++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3301      	adds	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f6      	bne.n	80026e2 <bufsize+0xe>
	return i;
 80026f4:	68fb      	ldr	r3, [r7, #12]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <bufclear>:

/*
 * 	Função para limpar um buffer
 */
void bufclear(SD_CARD_typedef *buf)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	for (int i=0; i<bufsize(buf->buffer); i++)
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e009      	b.n	8002722 <bufclear+0x22>
		buf->buffer[i] = '\0';
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4413      	add	r3, r2
 8002714:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<bufsize(buf->buffer); i++)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ffd3 	bl	80026d4 <bufsize>
 800272e:	4602      	mov	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4293      	cmp	r3, r2
 8002734:	dbeb      	blt.n	800270e <bufclear+0xe>
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <SD_Init>:

/*
 * 	Inicialização do cartão sd
 */
FRESULT SD_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	fresult = f_mount(&sdCard.fs, "", 0);
 8002744:	2200      	movs	r2, #0
 8002746:	4926      	ldr	r1, [pc, #152]	; (80027e0 <SD_Init+0xa0>)
 8002748:	4826      	ldr	r0, [pc, #152]	; (80027e4 <SD_Init+0xa4>)
 800274a:	f00a fb93 	bl	800ce74 <f_mount>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <SD_Init+0xa8>)
 8002754:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <SD_Init+0xa8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <SD_Init+0x24>
		return fresult;
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <SD_Init+0xa8>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	e03a      	b.n	80027da <SD_Init+0x9a>

	fresult = SD_loadSettings();
 8002764:	f000 f846 	bl	80027f4 <SD_loadSettings>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <SD_Init+0xa8>)
 800276e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <SD_Init+0xa8>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <SD_Init+0x3e>
		return fresult;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <SD_Init+0xa8>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	e02d      	b.n	80027da <SD_Init+0x9a>


	fresult = SD_createFile();
 800277e:	f000 f969 	bl	8002a54 <SD_createFile>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <SD_Init+0xa8>)
 8002788:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <SD_Init+0xa8>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <SD_Init+0x58>
		return fresult;
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <SD_Init+0xa8>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	e020      	b.n	80027da <SD_Init+0x9a>

	bufclear(&sdCard);
 8002798:	4812      	ldr	r0, [pc, #72]	; (80027e4 <SD_Init+0xa4>)
 800279a:	f7ff ffb1 	bl	8002700 <bufclear>

	LDEBUG;
 800279e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027a2:	4812      	ldr	r0, [pc, #72]	; (80027ec <SD_Init+0xac>)
 80027a4:	f002 fcc4 	bl	8005130 <HAL_GPIO_TogglePin>
	sdCard.longCounter = 0;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <SD_Init+0xa4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	sdCard.blen = 0;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <SD_Init+0xa4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	sdCard.blenLong = 0;
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <SD_Init+0xa4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	sdCard.counter = 0;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <SD_Init+0xa4>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8a3 2684 	strh.w	r2, [r3, #1668]	; 0x684
	sdCard.timer = 0;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <SD_Init+0xa4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8a3 2686 	strh.w	r2, [r3, #1670]	; 0x686

	HAL_TIM_Base_Start_IT(&htim4);
 80027d0:	4807      	ldr	r0, [pc, #28]	; (80027f0 <SD_Init+0xb0>)
 80027d2:	f006 fbd3 	bl	8008f7c <HAL_TIM_Base_Start_IT>

	return fresult;
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <SD_Init+0xa8>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	0800e790 	.word	0x0800e790
 80027e4:	20000490 	.word	0x20000490
 80027e8:	20000d48 	.word	0x20000d48
 80027ec:	40011000 	.word	0x40011000
 80027f0:	200002e0 	.word	0x200002e0

080027f4 <SD_loadSettings>:

/*
 * 	Função para ler o settings.ini
 */
FRESULT SD_loadSettings(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	sprintf(sdCard.filname,"settings.ini");
 80027f8:	4912      	ldr	r1, [pc, #72]	; (8002844 <SD_loadSettings+0x50>)
 80027fa:	4813      	ldr	r0, [pc, #76]	; (8002848 <SD_loadSettings+0x54>)
 80027fc:	f00b fb82 	bl	800df04 <siprintf>
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_READ);
 8002800:	2201      	movs	r2, #1
 8002802:	4911      	ldr	r1, [pc, #68]	; (8002848 <SD_loadSettings+0x54>)
 8002804:	4811      	ldr	r0, [pc, #68]	; (800284c <SD_loadSettings+0x58>)
 8002806:	f00a fb7d 	bl	800cf04 <f_open>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <SD_loadSettings+0x5c>)
 8002810:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_NO_FILE)
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <SD_loadSettings+0x5c>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d106      	bne.n	8002828 <SD_loadSettings+0x34>
	{
		fresult = SD_createSettings();
 800281a:	f000 f81b 	bl	8002854 <SD_createSettings>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <SD_loadSettings+0x5c>)
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e009      	b.n	800283c <SD_loadSettings+0x48>
	}
	else if (fresult == FR_OK)
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <SD_loadSettings+0x5c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <SD_loadSettings+0x48>
	{
		fresult = SD_searchSettings();
 8002830:	f000 f866 	bl	8002900 <SD_searchSettings>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <SD_loadSettings+0x5c>)
 800283a:	701a      	strb	r2, [r3, #0]
	}

	return fresult;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <SD_loadSettings+0x5c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	0800e794 	.word	0x0800e794
 8002848:	20000b04 	.word	0x20000b04
 800284c:	200008c0 	.word	0x200008c0
 8002850:	20000d48 	.word	0x20000d48

08002854 <SD_createSettings>:

/*
 * 	Função para criar o settings.ini quando não disponivel
 */
FRESULT SD_createSettings(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
	int len;

	fresult = f_close(&sdCard.fil);
 800285a:	4822      	ldr	r0, [pc, #136]	; (80028e4 <SD_createSettings+0x90>)
 800285c:	f00b f85d 	bl	800d91a <f_close>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <SD_createSettings+0x94>)
 8002866:	701a      	strb	r2, [r3, #0]

	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_ALWAYS | FA_WRITE);
 8002868:	2212      	movs	r2, #18
 800286a:	4920      	ldr	r1, [pc, #128]	; (80028ec <SD_createSettings+0x98>)
 800286c:	481d      	ldr	r0, [pc, #116]	; (80028e4 <SD_createSettings+0x90>)
 800286e:	f00a fb49 	bl	800cf04 <f_open>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <SD_createSettings+0x94>)
 8002878:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <SD_createSettings+0x94>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <SD_createSettings+0x34>
		return fresult;
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <SD_createSettings+0x94>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	e029      	b.n	80028dc <SD_createSettings+0x88>

	len = sprintf(sdCard.longBuffer,
 8002888:	4919      	ldr	r1, [pc, #100]	; (80028f0 <SD_createSettings+0x9c>)
 800288a:	481a      	ldr	r0, [pc, #104]	; (80028f4 <SD_createSettings+0xa0>)
 800288c:	f00b fb3a 	bl	800df04 <siprintf>
 8002890:	6078      	str	r0, [r7, #4]
			";Mode 0 para teste de AV do 19 (Padrão)\n"
			";Mode 1 para Teste de Dinamometro\n"
			";Mode 2 testes com o MPU6050 no 20\n"
			"MODE=0\n");

	fresult = f_write(&sdCard.fil, sdCard.longBuffer, len, &sdCard.bw);
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <SD_createSettings+0xa4>)
 8002896:	4917      	ldr	r1, [pc, #92]	; (80028f4 <SD_createSettings+0xa0>)
 8002898:	4812      	ldr	r0, [pc, #72]	; (80028e4 <SD_createSettings+0x90>)
 800289a:	f00a fe08 	bl	800d4ae <f_write>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <SD_createSettings+0x94>)
 80028a4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <SD_createSettings+0x94>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <SD_createSettings+0x60>
		return fresult;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <SD_createSettings+0x94>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	e013      	b.n	80028dc <SD_createSettings+0x88>

	fresult = f_close(&sdCard.fil);
 80028b4:	480b      	ldr	r0, [pc, #44]	; (80028e4 <SD_createSettings+0x90>)
 80028b6:	f00b f830 	bl	800d91a <f_close>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <SD_createSettings+0x94>)
 80028c0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <SD_createSettings+0x94>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <SD_createSettings+0x7c>
		return fresult;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <SD_createSettings+0x94>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	e005      	b.n	80028dc <SD_createSettings+0x88>

	sdCard.mode = 0;
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <SD_createSettings+0xa8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8a3 26a4 	strh.w	r2, [r3, #1700]	; 0x6a4

	return fresult;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <SD_createSettings+0x94>)
 80028da:	781b      	ldrb	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200008c0 	.word	0x200008c0
 80028e8:	20000d48 	.word	0x20000d48
 80028ec:	20000b04 	.word	0x20000b04
 80028f0:	0800e7a4 	.word	0x0800e7a4
 80028f4:	20000924 	.word	0x20000924
 80028f8:	20000b20 	.word	0x20000b20
 80028fc:	20000490 	.word	0x20000490

08002900 <SD_searchSettings>:

/*
 * 	Função que lê o conteudo do settings.ini
 */
FRESULT SD_searchSettings(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
	int index = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
	int deindex = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	60bb      	str	r3, [r7, #8]

	fresult = f_read(&sdCard.fil, sdCard.longBuffer, SD_BUFFSIZE_LONG*SD_BUFFSIZE-1, &sdCard.br);
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <SD_searchSettings+0x140>)
 8002910:	f240 12df 	movw	r2, #479	; 0x1df
 8002914:	494b      	ldr	r1, [pc, #300]	; (8002a44 <SD_searchSettings+0x144>)
 8002916:	484c      	ldr	r0, [pc, #304]	; (8002a48 <SD_searchSettings+0x148>)
 8002918:	f00a fc74 	bl	800d204 <f_read>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <SD_searchSettings+0x14c>)
 8002922:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002924:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <SD_searchSettings+0x14c>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <SD_searchSettings+0x38>
		return fresult;
 800292c:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <SD_searchSettings+0x14c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	e081      	b.n	8002a36 <SD_searchSettings+0x136>

	for (index; sdCard.longBuffer[index] != '='; index++);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3301      	adds	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	4a45      	ldr	r2, [pc, #276]	; (8002a50 <SD_searchSettings+0x150>)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b3d      	cmp	r3, #61	; 0x3d
 8002946:	d1f4      	bne.n	8002932 <SD_searchSettings+0x32>

	if (index >= SD_BUFFSIZE_LONG*SD_BUFFSIZE-2)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 800294e:	db0b      	blt.n	8002968 <SD_searchSettings+0x68>
	{
		fresult = SD_createSettings();
 8002950:	f7ff ff80 	bl	8002854 <SD_createSettings>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <SD_searchSettings+0x14c>)
 800295a:	701a      	strb	r2, [r3, #0]
		return fresult;
 800295c:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <SD_searchSettings+0x14c>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	e069      	b.n	8002a36 <SD_searchSettings+0x136>
	}

	for (deindex; sdCard.longBuffer[index-deindex] >= 65 && sdCard.longBuffer[index-deindex] <= 90; deindex++);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3301      	adds	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <SD_searchSettings+0x150>)
 8002970:	4413      	add	r3, r2
 8002972:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d908      	bls.n	800298c <SD_searchSettings+0x8c>
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <SD_searchSettings+0x150>)
 8002982:	4413      	add	r3, r2
 8002984:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002988:	2b5a      	cmp	r3, #90	; 0x5a
 800298a:	d9ea      	bls.n	8002962 <SD_searchSettings+0x62>
	deindex--;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3b01      	subs	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < deindex+2; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	e012      	b.n	80029be <SD_searchSettings+0xbe>
	{
		sdCard.setting[i] = sdCard.longBuffer[index - deindex + i];
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad2      	subs	r2, r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <SD_searchSettings+0x150>)
 80029a4:	4413      	add	r3, r2
 80029a6:	f893 1494 	ldrb.w	r1, [r3, #1172]	; 0x494
 80029aa:	4a29      	ldr	r2, [pc, #164]	; (8002a50 <SD_searchSettings+0x150>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80029b4:	460a      	mov	r2, r1
 80029b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < deindex+2; i++)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3301      	adds	r3, #1
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3301      	adds	r3, #1
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	dde7      	ble.n	8002998 <SD_searchSettings+0x98>
	}

	if (sdCard.setting[0] == 'M' && sdCard.setting[1] == 'O' && sdCard.setting[2] == 'D' && sdCard.setting[3] == 'E')
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <SD_searchSettings+0x150>)
 80029ca:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 80029ce:	2b4d      	cmp	r3, #77	; 0x4d
 80029d0:	d129      	bne.n	8002a26 <SD_searchSettings+0x126>
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <SD_searchSettings+0x150>)
 80029d4:	f893 3695 	ldrb.w	r3, [r3, #1685]	; 0x695
 80029d8:	2b4f      	cmp	r3, #79	; 0x4f
 80029da:	d124      	bne.n	8002a26 <SD_searchSettings+0x126>
 80029dc:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <SD_searchSettings+0x150>)
 80029de:	f893 3696 	ldrb.w	r3, [r3, #1686]	; 0x696
 80029e2:	2b44      	cmp	r3, #68	; 0x44
 80029e4:	d11f      	bne.n	8002a26 <SD_searchSettings+0x126>
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <SD_searchSettings+0x150>)
 80029e8:	f893 3697 	ldrb.w	r3, [r3, #1687]	; 0x697
 80029ec:	2b45      	cmp	r3, #69	; 0x45
 80029ee:	d11a      	bne.n	8002a26 <SD_searchSettings+0x126>
	{
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <SD_searchSettings+0x150>)
 80029f2:	f893 3699 	ldrb.w	r3, [r3, #1689]	; 0x699
 80029f6:	2b2f      	cmp	r3, #47	; 0x2f
 80029f8:	d90e      	bls.n	8002a18 <SD_searchSettings+0x118>
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <SD_searchSettings+0x150>)
 80029fc:	f893 3699 	ldrb.w	r3, [r3, #1689]	; 0x699
 8002a00:	2b39      	cmp	r3, #57	; 0x39
 8002a02:	d809      	bhi.n	8002a18 <SD_searchSettings+0x118>
			sdCard.mode = sdCard.setting[5] - 48;
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <SD_searchSettings+0x150>)
 8002a06:	f893 3699 	ldrb.w	r3, [r3, #1689]	; 0x699
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b30      	subs	r3, #48	; 0x30
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <SD_searchSettings+0x150>)
 8002a12:	f8a3 26a4 	strh.w	r2, [r3, #1700]	; 0x6a4
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002a16:	e00c      	b.n	8002a32 <SD_searchSettings+0x132>
		else
			fresult = SD_createSettings();
 8002a18:	f7ff ff1c 	bl	8002854 <SD_createSettings>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <SD_searchSettings+0x14c>)
 8002a22:	701a      	strb	r2, [r3, #0]
		if (sdCard.setting[5] >= 48 && sdCard.setting[5] <= 57)
 8002a24:	e005      	b.n	8002a32 <SD_searchSettings+0x132>
	}
	else
		fresult = SD_createSettings();
 8002a26:	f7ff ff15 	bl	8002854 <SD_createSettings>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <SD_searchSettings+0x14c>)
 8002a30:	701a      	strb	r2, [r3, #0]

	return fresult;
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <SD_searchSettings+0x14c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000b1c 	.word	0x20000b1c
 8002a44:	20000924 	.word	0x20000924
 8002a48:	200008c0 	.word	0x200008c0
 8002a4c:	20000d48 	.word	0x20000d48
 8002a50:	20000490 	.word	0x20000490

08002a54 <SD_createFile>:

/*
 * 	Função que cria o fileXXX.txt
 */
FRESULT SD_createFile(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
	int len;

	int filnum = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]

	do
	{
		sprintf(sdCard.filname,"file%.3d.txt",filnum);
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4921      	ldr	r1, [pc, #132]	; (8002ae8 <SD_createFile+0x94>)
 8002a62:	4822      	ldr	r0, [pc, #136]	; (8002aec <SD_createFile+0x98>)
 8002a64:	f00b fa4e 	bl	800df04 <siprintf>
		fresult = f_open(&sdCard.fil, sdCard.filname, FA_CREATE_NEW | FA_WRITE);
 8002a68:	2206      	movs	r2, #6
 8002a6a:	4920      	ldr	r1, [pc, #128]	; (8002aec <SD_createFile+0x98>)
 8002a6c:	4820      	ldr	r0, [pc, #128]	; (8002af0 <SD_createFile+0x9c>)
 8002a6e:	f00a fa49 	bl	800cf04 <f_open>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <SD_createFile+0xa0>)
 8002a78:	701a      	strb	r2, [r3, #0]
		filnum++;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	607b      	str	r3, [r7, #4]
		LDEBUG;
 8002a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a84:	481c      	ldr	r0, [pc, #112]	; (8002af8 <SD_createFile+0xa4>)
 8002a86:	f002 fb53 	bl	8005130 <HAL_GPIO_TogglePin>
	}
	while(fresult == FR_EXIST);
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <SD_createFile+0xa0>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d0e5      	beq.n	8002a5e <SD_createFile+0xa>

	len = sprintf(sdCard.buffer,"\n");
 8002a92:	491a      	ldr	r1, [pc, #104]	; (8002afc <SD_createFile+0xa8>)
 8002a94:	481a      	ldr	r0, [pc, #104]	; (8002b00 <SD_createFile+0xac>)
 8002a96:	f00b fa35 	bl	800df04 <siprintf>
 8002a9a:	6038      	str	r0, [r7, #0]
	fresult = f_write(&sdCard.fil, sdCard.buffer, len, &sdCard.bw);
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <SD_createFile+0xb0>)
 8002aa0:	4917      	ldr	r1, [pc, #92]	; (8002b00 <SD_createFile+0xac>)
 8002aa2:	4813      	ldr	r0, [pc, #76]	; (8002af0 <SD_createFile+0x9c>)
 8002aa4:	f00a fd03 	bl	800d4ae <f_write>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <SD_createFile+0xa0>)
 8002aae:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <SD_createFile+0xa0>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <SD_createFile+0x6a>
		return fresult;
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <SD_createFile+0xa0>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	e00f      	b.n	8002ade <SD_createFile+0x8a>

	fresult = f_close(&sdCard.fil);
 8002abe:	480c      	ldr	r0, [pc, #48]	; (8002af0 <SD_createFile+0x9c>)
 8002ac0:	f00a ff2b 	bl	800d91a <f_close>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <SD_createFile+0xa0>)
 8002aca:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <SD_createFile+0xa0>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <SD_createFile+0x86>
		return fresult;
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <SD_createFile+0xa0>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	e001      	b.n	8002ade <SD_createFile+0x8a>

	return fresult;
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <SD_createFile+0xa0>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	0800e844 	.word	0x0800e844
 8002aec:	20000b04 	.word	0x20000b04
 8002af0:	200008c0 	.word	0x200008c0
 8002af4:	20000d48 	.word	0x20000d48
 8002af8:	40011000 	.word	0x40011000
 8002afc:	0800e854 	.word	0x0800e854
 8002b00:	200008f4 	.word	0x200008f4
 8002b04:	20000b20 	.word	0x20000b20

08002b08 <SD_write>:

/*
 * 	Função que escreve em um arquivo
 */
FRESULT SD_write(int bsize, char wBuf[bsize])
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
	fresult = f_open(&sdCard.fil, sdCard.filname, FA_OPEN_EXISTING | FA_WRITE);
 8002b12:	2202      	movs	r2, #2
 8002b14:	4925      	ldr	r1, [pc, #148]	; (8002bac <SD_write+0xa4>)
 8002b16:	4826      	ldr	r0, [pc, #152]	; (8002bb0 <SD_write+0xa8>)
 8002b18:	f00a f9f4 	bl	800cf04 <f_open>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <SD_write+0xac>)
 8002b22:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <SD_write+0xac>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <SD_write+0x2a>
		return fresult;
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <SD_write+0xac>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	e037      	b.n	8002ba2 <SD_write+0x9a>

	fresult = f_lseek(&sdCard.fil, sdCard.fil.fsize);
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <SD_write+0xb0>)
 8002b34:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481d      	ldr	r0, [pc, #116]	; (8002bb0 <SD_write+0xa8>)
 8002b3c:	f00a ff13 	bl	800d966 <f_lseek>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <SD_write+0xac>)
 8002b46:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <SD_write+0xac>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <SD_write+0x4e>
		return fresult;
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <SD_write+0xac>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	e025      	b.n	8002ba2 <SD_write+0x9a>

	fresult = f_write(&sdCard.fil, wBuf, bsize, &sdCard.bw);
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <SD_write+0xb4>)
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	4814      	ldr	r0, [pc, #80]	; (8002bb0 <SD_write+0xa8>)
 8002b5e:	f00a fca6 	bl	800d4ae <f_write>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <SD_write+0xac>)
 8002b68:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <SD_write+0xac>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <SD_write+0x70>
		return fresult;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <SD_write+0xac>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	e014      	b.n	8002ba2 <SD_write+0x9a>

	fresult = f_close(&sdCard.fil);
 8002b78:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <SD_write+0xa8>)
 8002b7a:	f00a fece 	bl	800d91a <f_close>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <SD_write+0xac>)
 8002b84:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <SD_write+0xac>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <SD_write+0x8c>
		return fresult;
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <SD_write+0xac>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	e006      	b.n	8002ba2 <SD_write+0x9a>

	LDEBUG;
 8002b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b98:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <SD_write+0xb8>)
 8002b9a:	f002 fac9 	bl	8005130 <HAL_GPIO_TogglePin>

	return fresult;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SD_write+0xac>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000b04 	.word	0x20000b04
 8002bb0:	200008c0 	.word	0x200008c0
 8002bb4:	20000d48 	.word	0x20000d48
 8002bb8:	20000490 	.word	0x20000490
 8002bbc:	20000b20 	.word	0x20000b20
 8002bc0:	40011000 	.word	0x40011000

08002bc4 <SD_logger>:

/*
 * 	Função de datalogger
 */
FRESULT SD_logger(void)
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	b08b      	sub	sp, #44	; 0x2c
 8002bc8:	af08      	add	r7, sp, #32
	if (sdCard.counter < 9999)
 8002bca:	4b6c      	ldr	r3, [pc, #432]	; (8002d7c <SD_logger+0x1b8>)
 8002bcc:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 8002bd0:	f242 720e 	movw	r2, #9998	; 0x270e
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d808      	bhi.n	8002bea <SD_logger+0x26>
		sdCard.counter++;
 8002bd8:	4b68      	ldr	r3, [pc, #416]	; (8002d7c <SD_logger+0x1b8>)
 8002bda:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 8002bde:	3301      	adds	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <SD_logger+0x1b8>)
 8002be4:	f8a3 2684 	strh.w	r2, [r3, #1668]	; 0x684
 8002be8:	e003      	b.n	8002bf2 <SD_logger+0x2e>
	else
		sdCard.counter = 0;
 8002bea:	4b64      	ldr	r3, [pc, #400]	; (8002d7c <SD_logger+0x1b8>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8a3 2684 	strh.w	r2, [r3, #1668]	; 0x684

	switch (sdCard.mode)
 8002bf2:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <SD_logger+0x1b8>)
 8002bf4:	f8b3 36a4 	ldrh.w	r3, [r3, #1700]	; 0x6a4
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d026      	beq.n	8002c4a <SD_logger+0x86>
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	dc70      	bgt.n	8002ce2 <SD_logger+0x11e>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <SD_logger+0x46>
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d010      	beq.n	8002c2a <SD_logger+0x66>
 8002c08:	e06b      	b.n	8002ce2 <SD_logger+0x11e>
	{
	case 0:
			sdCard.blen = sprintf(sdCard.buffer,
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <SD_logger+0x1bc>)
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <SD_logger+0x1c0>)
 8002c10:	685b      	ldr	r3, [r3, #4]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, vel.value,
					sdCard.counter);
 8002c12:	495a      	ldr	r1, [pc, #360]	; (8002d7c <SD_logger+0x1b8>)
 8002c14:	f8b1 1684 	ldrh.w	r1, [r1, #1668]	; 0x684
			sdCard.blen = sprintf(sdCard.buffer,
 8002c18:	9100      	str	r1, [sp, #0]
 8002c1a:	495b      	ldr	r1, [pc, #364]	; (8002d88 <SD_logger+0x1c4>)
 8002c1c:	485b      	ldr	r0, [pc, #364]	; (8002d8c <SD_logger+0x1c8>)
 8002c1e:	f00b f971 	bl	800df04 <siprintf>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4a55      	ldr	r2, [pc, #340]	; (8002d7c <SD_logger+0x1b8>)
 8002c26:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
	case 1:
			sdCard.blen = sprintf(sdCard.buffer,
 8002c2a:	4b55      	ldr	r3, [pc, #340]	; (8002d80 <SD_logger+0x1bc>)
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4b58      	ldr	r3, [pc, #352]	; (8002d90 <SD_logger+0x1cc>)
 8002c30:	695b      	ldr	r3, [r3, #20]
					"%04d%04d"
					"%04d"
					"\n",
					rot.value, dina.force,
					sdCard.counter);
 8002c32:	4952      	ldr	r1, [pc, #328]	; (8002d7c <SD_logger+0x1b8>)
 8002c34:	f8b1 1684 	ldrh.w	r1, [r1, #1668]	; 0x684
			sdCard.blen = sprintf(sdCard.buffer,
 8002c38:	9100      	str	r1, [sp, #0]
 8002c3a:	4953      	ldr	r1, [pc, #332]	; (8002d88 <SD_logger+0x1c4>)
 8002c3c:	4853      	ldr	r0, [pc, #332]	; (8002d8c <SD_logger+0x1c8>)
 8002c3e:	f00b f961 	bl	800df04 <siprintf>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a4d      	ldr	r2, [pc, #308]	; (8002d7c <SD_logger+0x1b8>)
 8002c46:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
					"%04d%04d"
					"%05d%05d%05d"
					"%05d%05d%05d"
					"%04d"
					"\n",
					canBus.rx.rpm, canBus.rx.vel,
 8002c4a:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <SD_logger+0x1d0>)
 8002c4c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			sdCard.blen = sprintf(sdCard.buffer,
 8002c50:	469c      	mov	ip, r3
					canBus.rx.rpm, canBus.rx.vel,
 8002c52:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <SD_logger+0x1d0>)
 8002c54:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			sdCard.blen = sprintf(sdCard.buffer,
 8002c58:	469e      	mov	lr, r3
					((uint16_t)(aceGir.accel.X_RAW+32768)),
 8002c5a:	4b4f      	ldr	r3, [pc, #316]	; (8002d98 <SD_logger+0x1d4>)
 8002c5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002c66:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002c68:	461a      	mov	r2, r3
					((uint16_t)(aceGir.accel.Y_RAW+32768)),
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <SD_logger+0x1d4>)
 8002c6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002c76:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002c78:	4619      	mov	r1, r3
					((uint16_t)(aceGir.accel.Z_RAW+32768)),
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <SD_logger+0x1d4>)
 8002c7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002c86:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002c88:	4618      	mov	r0, r3
					((uint16_t)(aceGir.gyro.X_RAW+32768)),
 8002c8a:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <SD_logger+0x1d4>)
 8002c8c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002c96:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002c98:	461c      	mov	r4, r3
					((uint16_t)(aceGir.gyro.Y_RAW+32768)),
 8002c9a:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <SD_logger+0x1d4>)
 8002c9c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002ca6:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002ca8:	461d      	mov	r5, r3
					((uint16_t)(aceGir.gyro.Z_RAW+32768)),
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <SD_logger+0x1d4>)
 8002cac:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002cb6:	b29b      	uxth	r3, r3
			sdCard.blen = sprintf(sdCard.buffer,
 8002cb8:	461e      	mov	r6, r3
					sdCard.counter);
 8002cba:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <SD_logger+0x1b8>)
 8002cbc:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
			sdCard.blen = sprintf(sdCard.buffer,
 8002cc0:	9306      	str	r3, [sp, #24]
 8002cc2:	9605      	str	r6, [sp, #20]
 8002cc4:	9504      	str	r5, [sp, #16]
 8002cc6:	9403      	str	r4, [sp, #12]
 8002cc8:	9002      	str	r0, [sp, #8]
 8002cca:	9101      	str	r1, [sp, #4]
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	4673      	mov	r3, lr
 8002cd0:	4662      	mov	r2, ip
 8002cd2:	4932      	ldr	r1, [pc, #200]	; (8002d9c <SD_logger+0x1d8>)
 8002cd4:	482d      	ldr	r0, [pc, #180]	; (8002d8c <SD_logger+0x1c8>)
 8002cd6:	f00b f915 	bl	800df04 <siprintf>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4a27      	ldr	r2, [pc, #156]	; (8002d7c <SD_logger+0x1b8>)
 8002cde:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
	}

	for (int i = 0; i < sdCard.blen; i++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	e012      	b.n	8002d0e <SD_logger+0x14a>
		sdCard.longBuffer[i+sdCard.blenLong] = sdCard.buffer[i];
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <SD_logger+0x1b8>)
 8002cea:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4922      	ldr	r1, [pc, #136]	; (8002d7c <SD_logger+0x1b8>)
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	440a      	add	r2, r1
 8002cf8:	f202 4264 	addw	r2, r2, #1124	; 0x464
 8002cfc:	7811      	ldrb	r1, [r2, #0]
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <SD_logger+0x1b8>)
 8002d00:	4413      	add	r3, r2
 8002d02:	460a      	mov	r2, r1
 8002d04:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
	for (int i = 0; i < sdCard.blen; i++)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <SD_logger+0x1b8>)
 8002d10:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	dbe6      	blt.n	8002ce8 <SD_logger+0x124>
	sdCard.longCounter++;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <SD_logger+0x1b8>)
 8002d1c:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <SD_logger+0x1b8>)
 8002d26:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	sdCard.blenLong += sdCard.blen;
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <SD_logger+0x1b8>)
 8002d2c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8002d30:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <SD_logger+0x1b8>)
 8002d32:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8002d36:	4413      	add	r3, r2
 8002d38:	4a10      	ldr	r2, [pc, #64]	; (8002d7c <SD_logger+0x1b8>)
 8002d3a:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	if (sdCard.longCounter >= SD_BUFFSIZE_LONG)
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <SD_logger+0x1b8>)
 8002d40:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d912      	bls.n	8002d6e <SD_logger+0x1aa>
	{
		fresult = SD_write(sdCard.blenLong, sdCard.longBuffer);
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <SD_logger+0x1b8>)
 8002d4a:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8002d4e:	4914      	ldr	r1, [pc, #80]	; (8002da0 <SD_logger+0x1dc>)
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fed9 	bl	8002b08 <SD_write>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <SD_logger+0x1e0>)
 8002d5c:	701a      	strb	r2, [r3, #0]
		sdCard.longCounter = 0;
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <SD_logger+0x1b8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
		sdCard.blenLong = 0;
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <SD_logger+0x1b8>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
	}

	//LDEBUG;

	return fresult;
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <SD_logger+0x1e0>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000490 	.word	0x20000490
 8002d80:	20000460 	.word	0x20000460
 8002d84:	20000bd4 	.word	0x20000bd4
 8002d88:	0800e858 	.word	0x0800e858
 8002d8c:	200008f4 	.word	0x200008f4
 8002d90:	20000400 	.word	0x20000400
 8002d94:	20000354 	.word	0x20000354
 8002d98:	20000328 	.word	0x20000328
 8002d9c:	0800e868 	.word	0x0800e868
 8002da0:	20000924 	.word	0x20000924
 8002da4:	20000d48 	.word	0x20000d48

08002da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_MspInit+0x5c>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_MspInit+0x5c>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6193      	str	r3, [r2, #24]
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_MspInit+0x5c>)
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_MspInit+0x5c>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <HAL_MspInit+0x5c>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	61d3      	str	r3, [r2, #28]
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_MspInit+0x5c>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_MspInit+0x60>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_MspInit+0x60>)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40010000 	.word	0x40010000

08002e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0318 	add.w	r3, r7, #24
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a33      	ldr	r2, [pc, #204]	; (8002ef4 <HAL_ADC_MspInit+0xe8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d15f      	bne.n	8002eec <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e2c:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e36:	6193      	str	r3, [r2, #24]
 8002e38:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a2b      	ldr	r2, [pc, #172]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	6193      	str	r3, [r2, #24]
 8002e68:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_ADC_MspInit+0xec>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	4619      	mov	r1, r3
 8002e82:	481e      	ldr	r0, [pc, #120]	; (8002efc <HAL_ADC_MspInit+0xf0>)
 8002e84:	f001 ffb8 	bl	8004df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e90:	f107 0318 	add.w	r3, r7, #24
 8002e94:	4619      	mov	r1, r3
 8002e96:	481a      	ldr	r0, [pc, #104]	; (8002f00 <HAL_ADC_MspInit+0xf4>)
 8002e98:	f001 ffae 	bl	8004df8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002e9e:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_ADC_MspInit+0xfc>)
 8002ea0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ed0:	480c      	ldr	r0, [pc, #48]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002ed2:	f001 fce7 	bl	80048a4 <HAL_DMA_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002edc:	f7ff fbca 	bl	8002674 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002ee4:	621a      	str	r2, [r3, #32]
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_ADC_MspInit+0xf8>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	; 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40012400 	.word	0x40012400
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010800 	.word	0x40010800
 8002f00:	40010c00 	.word	0x40010c00
 8002f04:	20000cbc 	.word	0x20000cbc
 8002f08:	40020008 	.word	0x40020008

08002f0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <HAL_CAN_MspInit+0x9c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d139      	bne.n	8002fa0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_CAN_MspInit+0xa0>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <HAL_CAN_MspInit+0xa0>)
 8002f32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f36:	61d3      	str	r3, [r2, #28]
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_CAN_MspInit+0xa0>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_CAN_MspInit+0xa0>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_CAN_MspInit+0xa0>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6193      	str	r3, [r2, #24]
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_CAN_MspInit+0xa0>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 0310 	add.w	r3, r7, #16
 8002f6e:	4619      	mov	r1, r3
 8002f70:	480f      	ldr	r0, [pc, #60]	; (8002fb0 <HAL_CAN_MspInit+0xa4>)
 8002f72:	f001 ff41 	bl	8004df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 0310 	add.w	r3, r7, #16
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <HAL_CAN_MspInit+0xa4>)
 8002f8c:	f001 ff34 	bl	8004df8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2100      	movs	r1, #0
 8002f94:	2014      	movs	r0, #20
 8002f96:	f001 fc4e 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f9a:	2014      	movs	r0, #20
 8002f9c:	f001 fc67 	bl	800486e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002fa0:	bf00      	nop
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40006400 	.word	0x40006400
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010800 	.word	0x40010800

08002fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0310 	add.w	r3, r7, #16
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <HAL_I2C_MspInit+0x94>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d134      	bne.n	800303e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_I2C_MspInit+0x98>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_I2C_MspInit+0x98>)
 8002fda:	f043 0308 	orr.w	r3, r3, #8
 8002fde:	6193      	str	r3, [r2, #24]
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_I2C_MspInit+0x98>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff2:	2312      	movs	r3, #18
 8002ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	4619      	mov	r1, r3
 8003000:	4813      	ldr	r0, [pc, #76]	; (8003050 <HAL_I2C_MspInit+0x9c>)
 8003002:	f001 fef9 	bl	8004df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_I2C_MspInit+0x98>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <HAL_I2C_MspInit+0x98>)
 800300c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003010:	61d3      	str	r3, [r2, #28]
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_I2C_MspInit+0x98>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 15, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	210f      	movs	r1, #15
 8003022:	2021      	movs	r0, #33	; 0x21
 8003024:	f001 fc07 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003028:	2021      	movs	r0, #33	; 0x21
 800302a:	f001 fc20 	bl	800486e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	210f      	movs	r1, #15
 8003032:	2022      	movs	r0, #34	; 0x22
 8003034:	f001 fbff 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003038:	2022      	movs	r0, #34	; 0x22
 800303a:	f001 fc18 	bl	800486e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800303e:	bf00      	nop
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40005800 	.word	0x40005800
 800304c:	40021000 	.word	0x40021000
 8003050:	40010c00 	.word	0x40010c00

08003054 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a26      	ldr	r2, [pc, #152]	; (8003108 <HAL_SPI_MspInit+0xb4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d145      	bne.n	8003100 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_SPI_MspInit+0xb8>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4a24      	ldr	r2, [pc, #144]	; (800310c <HAL_SPI_MspInit+0xb8>)
 800307a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800307e:	6193      	str	r3, [r2, #24]
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_SPI_MspInit+0xb8>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308c:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_SPI_MspInit+0xb8>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	4a1e      	ldr	r2, [pc, #120]	; (800310c <HAL_SPI_MspInit+0xb8>)
 8003092:	f043 0308 	orr.w	r3, r3, #8
 8003096:	6193      	str	r3, [r2, #24]
 8003098:	4b1c      	ldr	r3, [pc, #112]	; (800310c <HAL_SPI_MspInit+0xb8>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80030a4:	2328      	movs	r3, #40	; 0x28
 80030a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	4619      	mov	r1, r3
 80030b6:	4816      	ldr	r0, [pc, #88]	; (8003110 <HAL_SPI_MspInit+0xbc>)
 80030b8:	f001 fe9e 	bl	8004df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030bc:	2310      	movs	r3, #16
 80030be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	4619      	mov	r1, r3
 80030ce:	4810      	ldr	r0, [pc, #64]	; (8003110 <HAL_SPI_MspInit+0xbc>)
 80030d0:	f001 fe92 	bl	8004df8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_SPI_MspInit+0xc0>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <HAL_SPI_MspInit+0xc0>)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 15, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	210f      	movs	r1, #15
 80030f4:	2023      	movs	r0, #35	; 0x23
 80030f6:	f001 fb9e 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030fa:	2023      	movs	r0, #35	; 0x23
 80030fc:	f001 fbb7 	bl	800486e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003100:	bf00      	nop
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40013000 	.word	0x40013000
 800310c:	40021000 	.word	0x40021000
 8003110:	40010c00 	.word	0x40010c00
 8003114:	40010000 	.word	0x40010000

08003118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0320 	add.w	r3, r7, #32
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a51      	ldr	r2, [pc, #324]	; (8003278 <HAL_TIM_Base_MspInit+0x160>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d135      	bne.n	80031a4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 800313e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003142:	6193      	str	r3, [r2, #24]
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003150:	4b4a      	ldr	r3, [pc, #296]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4a49      	ldr	r2, [pc, #292]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	6193      	str	r3, [r2, #24]
 800315c:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003172:	2302      	movs	r3, #2
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003176:	f107 0320 	add.w	r3, r7, #32
 800317a:	4619      	mov	r1, r3
 800317c:	4840      	ldr	r0, [pc, #256]	; (8003280 <HAL_TIM_Base_MspInit+0x168>)
 800317e:	f001 fe3b 	bl	8004df8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 15, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	210f      	movs	r1, #15
 8003186:	2019      	movs	r0, #25
 8003188:	f001 fb55 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800318c:	2019      	movs	r0, #25
 800318e:	f001 fb6e 	bl	800486e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 15, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	210f      	movs	r1, #15
 8003196:	201b      	movs	r0, #27
 8003198:	f001 fb4d 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800319c:	201b      	movs	r0, #27
 800319e:	f001 fb66 	bl	800486e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031a2:	e064      	b.n	800326e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ac:	d12c      	bne.n	8003208 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ae:	4b33      	ldr	r3, [pc, #204]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4a32      	ldr	r2, [pc, #200]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	61d3      	str	r3, [r2, #28]
 80031ba:	4b30      	ldr	r3, [pc, #192]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	4a2c      	ldr	r2, [pc, #176]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	6193      	str	r3, [r2, #24]
 80031d2:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031de:	2301      	movs	r3, #1
 80031e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031e6:	2302      	movs	r3, #2
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	f107 0320 	add.w	r3, r7, #32
 80031ee:	4619      	mov	r1, r3
 80031f0:	4823      	ldr	r0, [pc, #140]	; (8003280 <HAL_TIM_Base_MspInit+0x168>)
 80031f2:	f001 fe01 	bl	8004df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	210f      	movs	r1, #15
 80031fa:	201c      	movs	r0, #28
 80031fc:	f001 fb1b 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003200:	201c      	movs	r0, #28
 8003202:	f001 fb34 	bl	800486e <HAL_NVIC_EnableIRQ>
}
 8003206:	e032      	b.n	800326e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_TIM_Base_MspInit+0x16c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d114      	bne.n	800323c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	61d3      	str	r3, [r2, #28]
 800321e:	4b17      	ldr	r3, [pc, #92]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	210f      	movs	r1, #15
 800322e:	201d      	movs	r0, #29
 8003230:	f001 fb01 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003234:	201d      	movs	r0, #29
 8003236:	f001 fb1a 	bl	800486e <HAL_NVIC_EnableIRQ>
}
 800323a:	e018      	b.n	800326e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <HAL_TIM_Base_MspInit+0x170>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d113      	bne.n	800326e <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 800324c:	f043 0304 	orr.w	r3, r3, #4
 8003250:	61d3      	str	r3, [r2, #28]
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_TIM_Base_MspInit+0x164>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	210f      	movs	r1, #15
 8003262:	201e      	movs	r0, #30
 8003264:	f001 fae7 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003268:	201e      	movs	r0, #30
 800326a:	f001 fb00 	bl	800486e <HAL_NVIC_EnableIRQ>
}
 800326e:	bf00      	nop
 8003270:	3730      	adds	r7, #48	; 0x30
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40021000 	.word	0x40021000
 8003280:	40010800 	.word	0x40010800
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800

0800328c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0310 	add.w	r3, r7, #16
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a33      	ldr	r2, [pc, #204]	; (8003374 <HAL_UART_MspInit+0xe8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d15f      	bne.n	800336c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ac:	4b32      	ldr	r3, [pc, #200]	; (8003378 <HAL_UART_MspInit+0xec>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	4a31      	ldr	r2, [pc, #196]	; (8003378 <HAL_UART_MspInit+0xec>)
 80032b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b6:	6193      	str	r3, [r2, #24]
 80032b8:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_UART_MspInit+0xec>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c4:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_UART_MspInit+0xec>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <HAL_UART_MspInit+0xec>)
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	6193      	str	r3, [r2, #24]
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <HAL_UART_MspInit+0xec>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032e6:	2303      	movs	r3, #3
 80032e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 0310 	add.w	r3, r7, #16
 80032ee:	4619      	mov	r1, r3
 80032f0:	4822      	ldr	r0, [pc, #136]	; (800337c <HAL_UART_MspInit+0xf0>)
 80032f2:	f001 fd81 	bl	8004df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003304:	f107 0310 	add.w	r3, r7, #16
 8003308:	4619      	mov	r1, r3
 800330a:	481c      	ldr	r0, [pc, #112]	; (800337c <HAL_UART_MspInit+0xf0>)
 800330c:	f001 fd74 	bl	8004df8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_UART_MspInit+0xf4>)
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_UART_MspInit+0xf8>)
 8003314:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <HAL_UART_MspInit+0xf4>)
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_UART_MspInit+0xf4>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_UART_MspInit+0xf4>)
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_UART_MspInit+0xf4>)
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_UART_MspInit+0xf4>)
 8003330:	2200      	movs	r2, #0
 8003332:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_UART_MspInit+0xf4>)
 8003336:	2220      	movs	r2, #32
 8003338:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_UART_MspInit+0xf4>)
 800333c:	2200      	movs	r2, #0
 800333e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003340:	480f      	ldr	r0, [pc, #60]	; (8003380 <HAL_UART_MspInit+0xf4>)
 8003342:	f001 faaf 	bl	80048a4 <HAL_DMA_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800334c:	f7ff f992 	bl	8002674 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_UART_MspInit+0xf4>)
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_UART_MspInit+0xf4>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800335c:	2200      	movs	r2, #0
 800335e:	210f      	movs	r1, #15
 8003360:	2025      	movs	r0, #37	; 0x25
 8003362:	f001 fa68 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003366:	2025      	movs	r0, #37	; 0x25
 8003368:	f001 fa81 	bl	800486e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800336c:	bf00      	nop
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40013800 	.word	0x40013800
 8003378:	40021000 	.word	0x40021000
 800337c:	40010800 	.word	0x40010800
 8003380:	20000c34 	.word	0x20000c34
 8003384:	40020058 	.word	0x40020058

08003388 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800338c:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <SDTimer_Handler+0x3c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <SDTimer_Handler+0x1c>
    Timer1--;
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <SDTimer_Handler+0x3c>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <SDTimer_Handler+0x3c>)
 80033a2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <SDTimer_Handler+0x40>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <SDTimer_Handler+0x34>
    Timer2--;
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <SDTimer_Handler+0x40>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <SDTimer_Handler+0x40>)
 80033ba:	701a      	strb	r2, [r3, #0]
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	20000ded 	.word	0x20000ded
 80033c8:	20000dec 	.word	0x20000dec

080033cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <NMI_Handler+0x4>

080033d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <HardFault_Handler+0x4>

080033d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033dc:	e7fe      	b.n	80033dc <MemManage_Handler+0x4>

080033de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033e2:	e7fe      	b.n	80033e2 <BusFault_Handler+0x4>

080033e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <UsageFault_Handler+0x4>

080033ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
	...

08003410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <SysTick_Handler+0x30>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <SysTick_Handler+0x30>)
 8003420:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <SysTick_Handler+0x30>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b09      	cmp	r3, #9
 800342a:	d904      	bls.n	8003436 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <SysTick_Handler+0x30>)
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003432:	f7ff ffa9 	bl	8003388 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003436:	f000 f98f 	bl	8003758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200000a6 	.word	0x200000a6

08003444 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <DMA1_Channel1_IRQHandler+0x10>)
 800344a:	f001 fb95 	bl	8004b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000cbc 	.word	0x20000cbc

08003458 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <DMA1_Channel5_IRQHandler+0x10>)
 800345e:	f001 fb8b 	bl	8004b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000c34 	.word	0x20000c34

0800346c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	can_bus_Recieve();
 8003470:	f7fd fe5a 	bl	8001128 <can_bus_Recieve>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8003476:	f000 feda 	bl	800422e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200003d8 	.word	0x200003d8

08003484 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_UPDATE) != RESET)
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <TIM1_UP_IRQHandler+0x20>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <TIM1_UP_IRQHandler+0x16>
		rot_Reset();
 8003496:	f7ff f909 	bl	80026ac <rot_Reset>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800349a:	4802      	ldr	r0, [pc, #8]	; (80034a4 <TIM1_UP_IRQHandler+0x20>)
 800349c:	f005 ff1e 	bl	80092dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80034a0:	bf00      	nop
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000d00 	.word	0x20000d00

080034a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_CC2) != RESET)
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <TIM1_CC_IRQHandler+0x20>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d101      	bne.n	80034be <TIM1_CC_IRQHandler+0x16>
		rot_Calc();
 80034ba:	f7ff f901 	bl	80026c0 <rot_Calc>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034be:	4802      	ldr	r0, [pc, #8]	; (80034c8 <TIM1_CC_IRQHandler+0x20>)
 80034c0:	f005 ff0c 	bl	80092dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000d00 	.word	0x20000d00

080034cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1) != RESET)
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <TIM2_IRQHandler+0x34>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d101      	bne.n	80034e2 <TIM2_IRQHandler+0x16>
		vel_Calc();
 80034de:	f000 f8c5 	bl	800366c <vel_Calc>
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_UPDATE) != RESET)
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <TIM2_IRQHandler+0x34>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <TIM2_IRQHandler+0x28>
		vel_Reset();
 80034f0:	f000 f8b2 	bl	8003658 <vel_Reset>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <TIM2_IRQHandler+0x34>)
 80034f6:	f005 fef1 	bl	80092dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000da4 	.word	0x20000da4

08003504 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <TIM3_IRQHandler+0x10>)
 800350a:	f005 fee7 	bl	80092dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000b8c 	.word	0x20000b8c

08003518 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (sdCard.mode == 1)
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <TIM4_IRQHandler+0x40>)
 800351e:	f8b3 36a4 	ldrh.w	r3, [r3, #1700]	; 0x6a4
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <TIM4_IRQHandler+0x12>
		dina_Update();
 8003526:	f7fd fe65 	bl	80011f4 <dina_Update>
	if (sdCard.mode == 2)
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <TIM4_IRQHandler+0x40>)
 800352c:	f8b3 36a4 	ldrh.w	r3, [r3, #1700]	; 0x6a4
 8003530:	2b02      	cmp	r3, #2
 8003532:	d101      	bne.n	8003538 <TIM4_IRQHandler+0x20>
	{
		aceGir_Read();
 8003534:	f7fd fcc8 	bl	8000ec8 <aceGir_Read>
	}
	if (sdCard.mode != 9)
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <TIM4_IRQHandler+0x40>)
 800353a:	f8b3 36a4 	ldrh.w	r3, [r3, #1700]	; 0x6a4
 800353e:	2b09      	cmp	r3, #9
 8003540:	d005      	beq.n	800354e <TIM4_IRQHandler+0x36>
		fresult = SD_logger();
 8003542:	f7ff fb3f 	bl	8002bc4 <SD_logger>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <TIM4_IRQHandler+0x44>)
 800354c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800354e:	4804      	ldr	r0, [pc, #16]	; (8003560 <TIM4_IRQHandler+0x48>)
 8003550:	f005 fec4 	bl	80092dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003554:	bf00      	nop
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000490 	.word	0x20000490
 800355c:	20000d48 	.word	0x20000d48
 8003560:	200002e0 	.word	0x200002e0

08003564 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <I2C2_EV_IRQHandler+0x10>)
 800356a:	f002 faa1 	bl	8005ab0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000b38 	.word	0x20000b38

08003578 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <I2C2_ER_IRQHandler+0x10>)
 800357e:	f002 fc08 	bl	8005d92 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000b38 	.word	0x20000b38

0800358c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <SPI1_IRQHandler+0x10>)
 8003592:	f005 faed 	bl	8008b70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000d4c 	.word	0x20000d4c

080035a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <USART1_IRQHandler+0x10>)
 80035a6:	f006 fc3f 	bl	8009e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000c78 	.word	0x20000c78

080035b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <_sbrk+0x5c>)
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <_sbrk+0x60>)
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <_sbrk+0x64>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <_sbrk+0x64>)
 80035d2:	4a12      	ldr	r2, [pc, #72]	; (800361c <_sbrk+0x68>)
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <_sbrk+0x64>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d207      	bcs.n	80035f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035e4:	f00a fc5c 	bl	800dea0 <__errno>
 80035e8:	4603      	mov	r3, r0
 80035ea:	220c      	movs	r2, #12
 80035ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	e009      	b.n	8003608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <_sbrk+0x64>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <_sbrk+0x64>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <_sbrk+0x64>)
 8003604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20005000 	.word	0x20005000
 8003614:	00000400 	.word	0x00000400
 8003618:	200000a8 	.word	0x200000a8
 800361c:	20001268 	.word	0x20001268

08003620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <vel_Init>:

/*
 * 	Função de inicialização
 */
void vel_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	vel.constante = 1.5082;			/* < Salva a constante para calculo da velocidade */
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <vel_Init+0x20>)
 8003632:	4a07      	ldr	r2, [pc, #28]	; (8003650 <vel_Init+0x24>)
 8003634:	601a      	str	r2, [r3, #0]
	vel.htim = &htim2;				/* < Salva o ponteiro do Timer que será utilizado */
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <vel_Init+0x20>)
 8003638:	4a06      	ldr	r2, [pc, #24]	; (8003654 <vel_Init+0x28>)
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
	vel.channel = TIM_CHANNEL_1;	/* < Salva o channel a ser utilizado */
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <vel_Init+0x20>)
 800363e:	2200      	movs	r2, #0
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c

	indutivo_Init(&vel);			/* < Chama função de inicialização */
 8003642:	4802      	ldr	r0, [pc, #8]	; (800364c <vel_Init+0x20>)
 8003644:	f7fe fb42 	bl	8001ccc <indutivo_Init>
}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000bd4 	.word	0x20000bd4
 8003650:	3fc10cb3 	.word	0x3fc10cb3
 8003654:	20000da4 	.word	0x20000da4

08003658 <vel_Reset>:

/*
 * 	Função de reset
 */
void vel_Reset(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
	indutivo_reset(&vel);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <vel_Reset+0x10>)
 800365e:	f7fe fc17 	bl	8001e90 <indutivo_reset>
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000bd4 	.word	0x20000bd4

0800366c <vel_Calc>:

/*
 * 	Função de calculo
 */
void vel_Calc(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
	indutivo_calc(&vel);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <vel_Calc+0x10>)
 8003672:	f7fe fba9 	bl	8001dc8 <indutivo_calc>
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000bd4 	.word	0x20000bd4

08003680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003680:	480c      	ldr	r0, [pc, #48]	; (80036b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003682:	490d      	ldr	r1, [pc, #52]	; (80036b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003688:	e002      	b.n	8003690 <LoopCopyDataInit>

0800368a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800368c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368e:	3304      	adds	r3, #4

08003690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003694:	d3f9      	bcc.n	800368a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003698:	4c0a      	ldr	r4, [pc, #40]	; (80036c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800369c:	e001      	b.n	80036a2 <LoopFillZerobss>

0800369e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a0:	3204      	adds	r2, #4

080036a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a4:	d3fb      	bcc.n	800369e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036a6:	f7ff ffbb 	bl	8003620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036aa:	f00a fbff 	bl	800deac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ae:	f7fe fc0f 	bl	8001ed0 <main>
  bx lr
 80036b2:	4770      	bx	lr
  ldr r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80036bc:	0800ee8c 	.word	0x0800ee8c
  ldr r2, =_sbss
 80036c0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80036c4:	20001268 	.word	0x20001268

080036c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC1_2_IRQHandler>
	...

080036cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_Init+0x28>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_Init+0x28>)
 80036d6:	f043 0310 	orr.w	r3, r3, #16
 80036da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036dc:	2003      	movs	r0, #3
 80036de:	f001 f89f 	bl	8004820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f000 f808 	bl	80036f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e8:	f7ff fb5e 	bl	8002da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000

080036f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_InitTick+0x54>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_InitTick+0x58>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800370e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f8b7 	bl	800488a <HAL_SYSTICK_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e00e      	b.n	8003744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d80a      	bhi.n	8003742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372c:	2200      	movs	r2, #0
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f001 f87f 	bl	8004836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_InitTick+0x5c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000004 	.word	0x20000004
 8003750:	2000000c 	.word	0x2000000c
 8003754:	20000008 	.word	0x20000008

08003758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_IncTick+0x1c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_IncTick+0x20>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a03      	ldr	r2, [pc, #12]	; (8003778 <HAL_IncTick+0x20>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	2000000c 	.word	0x2000000c
 8003778:	20000df0 	.word	0x20000df0

0800377c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return uwTick;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_GetTick+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000df0 	.word	0x20000df0

08003790 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0be      	b.n	8003930 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fb1c 	bl	8002e0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f9ab 	bl	8003b30 <ADC_ConversionStop_Disable>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 8099 	bne.w	800391e <HAL_ADC_Init+0x18e>
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 8095 	bne.w	800391e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	f043 0202 	orr.w	r2, r3, #2
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003810:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7b1b      	ldrb	r3, [r3, #12]
 8003816:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003818:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4313      	orrs	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003828:	d003      	beq.n	8003832 <HAL_ADC_Init+0xa2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_ADC_Init+0xa8>
 8003832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003836:	e000      	b.n	800383a <HAL_ADC_Init+0xaa>
 8003838:	2300      	movs	r3, #0
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7d1b      	ldrb	r3, [r3, #20]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d119      	bne.n	800387c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7b1b      	ldrb	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	3b01      	subs	r3, #1
 8003856:	035a      	lsls	r2, r3, #13
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	e00b      	b.n	800387c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	f043 0201 	orr.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	4b28      	ldr	r3, [pc, #160]	; (8003938 <HAL_ADC_Init+0x1a8>)
 8003898:	4013      	ands	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ac:	d003      	beq.n	80038b6 <HAL_ADC_Init+0x126>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d104      	bne.n	80038c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	051b      	lsls	r3, r3, #20
 80038be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	4b18      	ldr	r3, [pc, #96]	; (800393c <HAL_ADC_Init+0x1ac>)
 80038dc:	4013      	ands	r3, r2
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d10b      	bne.n	80038fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038fa:	e018      	b.n	800392e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	f023 0312 	bic.w	r3, r3, #18
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800391c:	e007      	b.n	800392e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	f043 0210 	orr.w	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800392e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	ffe1f7fd 	.word	0xffe1f7fd
 800393c:	ff1f0efe 	.word	0xff1f0efe

08003940 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x20>
 800395c:	2302      	movs	r3, #2
 800395e:	e0dc      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x1da>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b06      	cmp	r3, #6
 800396e:	d81c      	bhi.n	80039aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	3b05      	subs	r3, #5
 8003982:	221f      	movs	r2, #31
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	4019      	ands	r1, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b05      	subs	r3, #5
 800399c:	fa00 f203 	lsl.w	r2, r0, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34
 80039a8:	e03c      	b.n	8003a24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d81c      	bhi.n	80039ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	3b23      	subs	r3, #35	; 0x23
 80039c4:	221f      	movs	r2, #31
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	4019      	ands	r1, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	3b23      	subs	r3, #35	; 0x23
 80039de:	fa00 f203 	lsl.w	r2, r0, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
 80039ea:	e01b      	b.n	8003a24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	3b41      	subs	r3, #65	; 0x41
 80039fe:	221f      	movs	r2, #31
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	4019      	ands	r1, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	3b41      	subs	r3, #65	; 0x41
 8003a18:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b09      	cmp	r3, #9
 8003a2a:	d91c      	bls.n	8003a66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68d9      	ldr	r1, [r3, #12]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b1e      	subs	r3, #30
 8003a3e:	2207      	movs	r2, #7
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	4019      	ands	r1, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6898      	ldr	r0, [r3, #8]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	3b1e      	subs	r3, #30
 8003a58:	fa00 f203 	lsl.w	r2, r0, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	e019      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6919      	ldr	r1, [r3, #16]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	2207      	movs	r2, #7
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	4019      	ands	r1, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6898      	ldr	r0, [r3, #8]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d003      	beq.n	8003aaa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003aa6:	2b11      	cmp	r3, #17
 8003aa8:	d132      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_ADC_ConfigChannel+0x1e4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d125      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d126      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ad0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11a      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <HAL_ADC_ConfigChannel+0x1e8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <HAL_ADC_ConfigChannel+0x1ec>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	0c9a      	lsrs	r2, r3, #18
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003af0:	e002      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f9      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x1b2>
 8003afe:	e007      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40012400 	.word	0x40012400
 8003b28:	20000004 	.word	0x20000004
 8003b2c:	431bde83 	.word	0x431bde83

08003b30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d12e      	bne.n	8003ba8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b5a:	f7ff fe0f 	bl	800377c <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b60:	e01b      	b.n	8003b9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b62:	f7ff fe0b 	bl	800377c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d914      	bls.n	8003b9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d10d      	bne.n	8003b9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	f043 0210 	orr.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e007      	b.n	8003baa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d0dc      	beq.n	8003b62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0ed      	b.n	8003da0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff f99b 	bl	8002f0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003be6:	f7ff fdc9 	bl	800377c <HAL_GetTick>
 8003bea:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bec:	e012      	b.n	8003c14 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bee:	f7ff fdc5 	bl	800377c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b0a      	cmp	r3, #10
 8003bfa:	d90b      	bls.n	8003c14 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0c5      	b.n	8003da0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0e5      	beq.n	8003bee <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0202 	bic.w	r2, r2, #2
 8003c30:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c32:	f7ff fda3 	bl	800377c <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c38:	e012      	b.n	8003c60 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c3a:	f7ff fd9f 	bl	800377c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b0a      	cmp	r3, #10
 8003c46:	d90b      	bls.n	8003c60 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2205      	movs	r2, #5
 8003c58:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e09f      	b.n	8003da0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7e1b      	ldrb	r3, [r3, #24]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d108      	bne.n	8003c88 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e007      	b.n	8003c98 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7e5b      	ldrb	r3, [r3, #25]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d108      	bne.n	8003cb2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e007      	b.n	8003cc2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7e9b      	ldrb	r3, [r3, #26]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d108      	bne.n	8003cdc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0220 	orr.w	r2, r2, #32
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e007      	b.n	8003cec <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0220 	bic.w	r2, r2, #32
 8003cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7edb      	ldrb	r3, [r3, #27]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d108      	bne.n	8003d06 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0210 	bic.w	r2, r2, #16
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e007      	b.n	8003d16 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0210 	orr.w	r2, r2, #16
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7f1b      	ldrb	r3, [r3, #28]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d108      	bne.n	8003d30 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0208 	orr.w	r2, r2, #8
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e007      	b.n	8003d40 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0208 	bic.w	r2, r2, #8
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7f5b      	ldrb	r3, [r3, #29]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d108      	bne.n	8003d5a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0204 	orr.w	r2, r2, #4
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e007      	b.n	8003d6a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0204 	bic.w	r2, r2, #4
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	ea42 0103 	orr.w	r1, r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	1e5a      	subs	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dbe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d003      	beq.n	8003dce <HAL_CAN_ConfigFilter+0x26>
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	f040 80aa 	bne.w	8003f22 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2201      	movs	r2, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	401a      	ands	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d123      	bne.n	8003e50 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	401a      	ands	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3248      	adds	r2, #72	; 0x48
 8003e30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	3348      	adds	r3, #72	; 0x48
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	440b      	add	r3, r1
 8003e4e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d122      	bne.n	8003e9e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e78:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3248      	adds	r2, #72	; 0x48
 8003e7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e94:	6979      	ldr	r1, [r7, #20]
 8003e96:	3348      	adds	r3, #72	; 0x48
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003eb8:	e007      	b.n	8003eca <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	401a      	ands	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003ee4:	e007      	b.n	8003ef6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d107      	bne.n	8003f0e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f14:	f023 0201 	bic.w	r2, r3, #1
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e006      	b.n	8003f30 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
  }
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr

08003f3a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d12e      	bne.n	8003fac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f66:	f7ff fc09 	bl	800377c <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f6c:	e012      	b.n	8003f94 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f6e:	f7ff fc05 	bl	800377c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b0a      	cmp	r3, #10
 8003f7a:	d90b      	bls.n	8003f94 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2205      	movs	r2, #5
 8003f8c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e012      	b.n	8003fba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e006      	b.n	8003fba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b087      	sub	sp, #28
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d003      	beq.n	8003fe6 <HAL_CAN_GetRxMessage+0x24>
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	f040 80f3 	bne.w	80041cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10e      	bne.n	800400a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0e7      	b.n	80041da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0d8      	b.n	80041da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	331b      	adds	r3, #27
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	4413      	add	r3, r2
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0204 	and.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	331b      	adds	r3, #27
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	4413      	add	r3, r2
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0d5b      	lsrs	r3, r3, #21
 8004056:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e00b      	b.n	8004078 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	331b      	adds	r3, #27
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	4413      	add	r3, r2
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	08db      	lsrs	r3, r3, #3
 8004070:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	331b      	adds	r3, #27
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0202 	and.w	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	331b      	adds	r3, #27
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	4413      	add	r3, r2
 800409a:	3304      	adds	r3, #4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 020f 	and.w	r2, r3, #15
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	331b      	adds	r3, #27
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	4413      	add	r3, r2
 80040b2:	3304      	adds	r3, #4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	331b      	adds	r3, #27
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	4413      	add	r3, r2
 80040ca:	3304      	adds	r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	4413      	add	r3, r2
 80040e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	0a1a      	lsrs	r2, r3, #8
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	4413      	add	r3, r2
 8004110:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0c1a      	lsrs	r2, r3, #16
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	3302      	adds	r3, #2
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	4413      	add	r3, r2
 800412a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0e1a      	lsrs	r2, r3, #24
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	3303      	adds	r3, #3
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	4413      	add	r3, r2
 8004144:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	3304      	adds	r3, #4
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	4413      	add	r3, r2
 800415c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0a1a      	lsrs	r2, r3, #8
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	3305      	adds	r3, #5
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0c1a      	lsrs	r2, r3, #16
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3306      	adds	r3, #6
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4413      	add	r3, r2
 8004190:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0e1a      	lsrs	r2, r3, #24
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	3307      	adds	r3, #7
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d108      	bne.n	80041b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0220 	orr.w	r2, r2, #32
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e007      	b.n	80041c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0220 	orr.w	r2, r2, #32
 80041c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e006      	b.n	80041da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d002      	beq.n	8004202 <HAL_CAN_ActivateNotification+0x1e>
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d109      	bne.n	8004216 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6959      	ldr	r1, [r3, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e006      	b.n	8004224 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
  }
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08a      	sub	sp, #40	; 0x28
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d07c      	beq.n	800436e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d023      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2201      	movs	r2, #1
 8004284:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f983 	bl	800459c <HAL_CAN_TxMailbox0CompleteCallback>
 8004296:	e016      	b.n	80042c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e00c      	b.n	80042c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	e002      	b.n	80042c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f986 	bl	80045d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d024      	beq.n	800431a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f962 	bl	80045ae <HAL_CAN_TxMailbox1CompleteCallback>
 80042ea:	e016      	b.n	800431a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
 80042fe:	e00c      	b.n	800431a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
 8004312:	e002      	b.n	800431a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f965 	bl	80045e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d024      	beq.n	800436e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800432c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f941 	bl	80045c0 <HAL_CAN_TxMailbox2CompleteCallback>
 800433e:	e016      	b.n	800436e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
 8004352:	e00c      	b.n	800436e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	e002      	b.n	800436e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f944 	bl	80045f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004388:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2210      	movs	r2, #16
 8004390:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00b      	beq.n	80043b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d006      	beq.n	80043b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2208      	movs	r2, #8
 80043ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f933 	bl	800461a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f91b 	bl	8004608 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00c      	beq.n	80043f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2210      	movs	r2, #16
 80043f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d006      	beq.n	8004418 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2208      	movs	r2, #8
 8004410:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f913 	bl	800463e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f8fb 	bl	800462c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2210      	movs	r2, #16
 8004450:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f8fc 	bl	8004650 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d006      	beq.n	800447a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2208      	movs	r2, #8
 8004472:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f8f4 	bl	8004662 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d07b      	beq.n	800457c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d072      	beq.n	8004574 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	f043 0302 	orr.w	r3, r3, #2
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d043      	beq.n	8004574 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d03e      	beq.n	8004574 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044fc:	2b60      	cmp	r3, #96	; 0x60
 80044fe:	d02b      	beq.n	8004558 <HAL_CAN_IRQHandler+0x32a>
 8004500:	2b60      	cmp	r3, #96	; 0x60
 8004502:	d82e      	bhi.n	8004562 <HAL_CAN_IRQHandler+0x334>
 8004504:	2b50      	cmp	r3, #80	; 0x50
 8004506:	d022      	beq.n	800454e <HAL_CAN_IRQHandler+0x320>
 8004508:	2b50      	cmp	r3, #80	; 0x50
 800450a:	d82a      	bhi.n	8004562 <HAL_CAN_IRQHandler+0x334>
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d019      	beq.n	8004544 <HAL_CAN_IRQHandler+0x316>
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d826      	bhi.n	8004562 <HAL_CAN_IRQHandler+0x334>
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d010      	beq.n	800453a <HAL_CAN_IRQHandler+0x30c>
 8004518:	2b30      	cmp	r3, #48	; 0x30
 800451a:	d822      	bhi.n	8004562 <HAL_CAN_IRQHandler+0x334>
 800451c:	2b10      	cmp	r3, #16
 800451e:	d002      	beq.n	8004526 <HAL_CAN_IRQHandler+0x2f8>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d005      	beq.n	8004530 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004524:	e01d      	b.n	8004562 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f043 0308 	orr.w	r3, r3, #8
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800452e:	e019      	b.n	8004564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	f043 0310 	orr.w	r3, r3, #16
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004538:	e014      	b.n	8004564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	f043 0320 	orr.w	r3, r3, #32
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004542:	e00f      	b.n	8004564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800454c:	e00a      	b.n	8004564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004556:	e005      	b.n	8004564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004560:	e000      	b.n	8004564 <HAL_CAN_IRQHandler+0x336>
            break;
 8004562:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004572:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2204      	movs	r2, #4
 800457a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f870 	bl	8004674 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004594:	bf00      	nop
 8004596:	3728      	adds	r7, #40	; 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
	...

08004688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <__NVIC_SetPriorityGrouping+0x44>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046a4:	4013      	ands	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ba:	4a04      	ldr	r2, [pc, #16]	; (80046cc <__NVIC_SetPriorityGrouping+0x44>)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	60d3      	str	r3, [r2, #12]
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <__NVIC_GetPriorityGrouping+0x18>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	f003 0307 	and.w	r3, r3, #7
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	db0b      	blt.n	8004716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	f003 021f 	and.w	r2, r3, #31
 8004704:	4906      	ldr	r1, [pc, #24]	; (8004720 <__NVIC_EnableIRQ+0x34>)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2001      	movs	r0, #1
 800470e:	fa00 f202 	lsl.w	r2, r0, r2
 8004712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	e000e100 	.word	0xe000e100

08004724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004734:	2b00      	cmp	r3, #0
 8004736:	db0a      	blt.n	800474e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	490c      	ldr	r1, [pc, #48]	; (8004770 <__NVIC_SetPriority+0x4c>)
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	440b      	add	r3, r1
 8004748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800474c:	e00a      	b.n	8004764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	4908      	ldr	r1, [pc, #32]	; (8004774 <__NVIC_SetPriority+0x50>)
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	3b04      	subs	r3, #4
 800475c:	0112      	lsls	r2, r2, #4
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	440b      	add	r3, r1
 8004762:	761a      	strb	r2, [r3, #24]
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e100 	.word	0xe000e100
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f1c3 0307 	rsb	r3, r3, #7
 8004792:	2b04      	cmp	r3, #4
 8004794:	bf28      	it	cs
 8004796:	2304      	movcs	r3, #4
 8004798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3304      	adds	r3, #4
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d902      	bls.n	80047a8 <NVIC_EncodePriority+0x30>
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3b03      	subs	r3, #3
 80047a6:	e000      	b.n	80047aa <NVIC_EncodePriority+0x32>
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047ac:	f04f 32ff 	mov.w	r2, #4294967295
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43da      	mvns	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	401a      	ands	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047c0:	f04f 31ff 	mov.w	r1, #4294967295
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	43d9      	mvns	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d0:	4313      	orrs	r3, r2
         );
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3724      	adds	r7, #36	; 0x24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ec:	d301      	bcc.n	80047f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ee:	2301      	movs	r3, #1
 80047f0:	e00f      	b.n	8004812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047f2:	4a0a      	ldr	r2, [pc, #40]	; (800481c <SysTick_Config+0x40>)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047fa:	210f      	movs	r1, #15
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	f7ff ff90 	bl	8004724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <SysTick_Config+0x40>)
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <SysTick_Config+0x40>)
 800480c:	2207      	movs	r2, #7
 800480e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	e000e010 	.word	0xe000e010

08004820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff2d 	bl	8004688 <__NVIC_SetPriorityGrouping>
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	4603      	mov	r3, r0
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004848:	f7ff ff42 	bl	80046d0 <__NVIC_GetPriorityGrouping>
 800484c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	6978      	ldr	r0, [r7, #20]
 8004854:	f7ff ff90 	bl	8004778 <NVIC_EncodePriority>
 8004858:	4602      	mov	r2, r0
 800485a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800485e:	4611      	mov	r1, r2
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff ff5f 	bl	8004724 <__NVIC_SetPriority>
}
 8004866:	bf00      	nop
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	4603      	mov	r3, r0
 8004876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ff35 	bl	80046ec <__NVIC_EnableIRQ>
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ffa2 	bl	80047dc <SysTick_Config>
 8004898:	4603      	mov	r3, r0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e043      	b.n	8004942 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <HAL_DMA_Init+0xa8>)
 80048c2:	4413      	add	r3, r2
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <HAL_DMA_Init+0xac>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	009a      	lsls	r2, r3, #2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <HAL_DMA_Init+0xb0>)
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80048f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80048fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	bffdfff8 	.word	0xbffdfff8
 8004950:	cccccccd 	.word	0xcccccccd
 8004954:	40020000 	.word	0x40020000

08004958 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_DMA_Start_IT+0x20>
 8004974:	2302      	movs	r3, #2
 8004976:	e04a      	b.n	8004a0e <HAL_DMA_Start_IT+0xb6>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004986:	2b01      	cmp	r3, #1
 8004988:	d13a      	bne.n	8004a00 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2202      	movs	r2, #2
 800498e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f9f4 	bl	8004d9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 020e 	orr.w	r2, r2, #14
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e00f      	b.n	80049ee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0204 	bic.w	r2, r2, #4
 80049dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 020a 	orr.w	r2, r2, #10
 80049ec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e005      	b.n	8004a0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d008      	beq.n	8004a3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e020      	b.n	8004a80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 020e 	bic.w	r2, r2, #14
 8004a4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	2101      	movs	r1, #1
 8004a68:	fa01 f202 	lsl.w	r2, r1, r2
 8004a6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d005      	beq.n	8004aae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	e051      	b.n	8004b52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 020e 	bic.w	r2, r2, #14
 8004abc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <HAL_DMA_Abort_IT+0xd0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d029      	beq.n	8004b2c <HAL_DMA_Abort_IT+0xa0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a20      	ldr	r2, [pc, #128]	; (8004b60 <HAL_DMA_Abort_IT+0xd4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d022      	beq.n	8004b28 <HAL_DMA_Abort_IT+0x9c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	; (8004b64 <HAL_DMA_Abort_IT+0xd8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d01a      	beq.n	8004b22 <HAL_DMA_Abort_IT+0x96>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <HAL_DMA_Abort_IT+0xdc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d012      	beq.n	8004b1c <HAL_DMA_Abort_IT+0x90>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1c      	ldr	r2, [pc, #112]	; (8004b6c <HAL_DMA_Abort_IT+0xe0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00a      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x8a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1a      	ldr	r2, [pc, #104]	; (8004b70 <HAL_DMA_Abort_IT+0xe4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d102      	bne.n	8004b10 <HAL_DMA_Abort_IT+0x84>
 8004b0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b0e:	e00e      	b.n	8004b2e <HAL_DMA_Abort_IT+0xa2>
 8004b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b14:	e00b      	b.n	8004b2e <HAL_DMA_Abort_IT+0xa2>
 8004b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b1a:	e008      	b.n	8004b2e <HAL_DMA_Abort_IT+0xa2>
 8004b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b20:	e005      	b.n	8004b2e <HAL_DMA_Abort_IT+0xa2>
 8004b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b26:	e002      	b.n	8004b2e <HAL_DMA_Abort_IT+0xa2>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	e000      	b.n	8004b2e <HAL_DMA_Abort_IT+0xa2>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4a11      	ldr	r2, [pc, #68]	; (8004b74 <HAL_DMA_Abort_IT+0xe8>)
 8004b30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
    } 
  }
  return status;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40020008 	.word	0x40020008
 8004b60:	4002001c 	.word	0x4002001c
 8004b64:	40020030 	.word	0x40020030
 8004b68:	40020044 	.word	0x40020044
 8004b6c:	40020058 	.word	0x40020058
 8004b70:	4002006c 	.word	0x4002006c
 8004b74:	40020000 	.word	0x40020000

08004b78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	2204      	movs	r2, #4
 8004b96:	409a      	lsls	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d04f      	beq.n	8004c40 <HAL_DMA_IRQHandler+0xc8>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04a      	beq.n	8004c40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d107      	bne.n	8004bc8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0204 	bic.w	r2, r2, #4
 8004bc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a66      	ldr	r2, [pc, #408]	; (8004d68 <HAL_DMA_IRQHandler+0x1f0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d029      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xae>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a65      	ldr	r2, [pc, #404]	; (8004d6c <HAL_DMA_IRQHandler+0x1f4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d022      	beq.n	8004c22 <HAL_DMA_IRQHandler+0xaa>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a63      	ldr	r2, [pc, #396]	; (8004d70 <HAL_DMA_IRQHandler+0x1f8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01a      	beq.n	8004c1c <HAL_DMA_IRQHandler+0xa4>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a62      	ldr	r2, [pc, #392]	; (8004d74 <HAL_DMA_IRQHandler+0x1fc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d012      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x9e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a60      	ldr	r2, [pc, #384]	; (8004d78 <HAL_DMA_IRQHandler+0x200>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00a      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x98>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a5f      	ldr	r2, [pc, #380]	; (8004d7c <HAL_DMA_IRQHandler+0x204>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d102      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x92>
 8004c04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c08:	e00e      	b.n	8004c28 <HAL_DMA_IRQHandler+0xb0>
 8004c0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c0e:	e00b      	b.n	8004c28 <HAL_DMA_IRQHandler+0xb0>
 8004c10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c14:	e008      	b.n	8004c28 <HAL_DMA_IRQHandler+0xb0>
 8004c16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c1a:	e005      	b.n	8004c28 <HAL_DMA_IRQHandler+0xb0>
 8004c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c20:	e002      	b.n	8004c28 <HAL_DMA_IRQHandler+0xb0>
 8004c22:	2340      	movs	r3, #64	; 0x40
 8004c24:	e000      	b.n	8004c28 <HAL_DMA_IRQHandler+0xb0>
 8004c26:	2304      	movs	r3, #4
 8004c28:	4a55      	ldr	r2, [pc, #340]	; (8004d80 <HAL_DMA_IRQHandler+0x208>)
 8004c2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8094 	beq.w	8004d5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004c3e:	e08e      	b.n	8004d5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2202      	movs	r2, #2
 8004c46:	409a      	lsls	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d056      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x186>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d051      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 020a 	bic.w	r2, r2, #10
 8004c76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a38      	ldr	r2, [pc, #224]	; (8004d68 <HAL_DMA_IRQHandler+0x1f0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d029      	beq.n	8004cde <HAL_DMA_IRQHandler+0x166>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a37      	ldr	r2, [pc, #220]	; (8004d6c <HAL_DMA_IRQHandler+0x1f4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <HAL_DMA_IRQHandler+0x162>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a35      	ldr	r2, [pc, #212]	; (8004d70 <HAL_DMA_IRQHandler+0x1f8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01a      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x15c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a34      	ldr	r2, [pc, #208]	; (8004d74 <HAL_DMA_IRQHandler+0x1fc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d012      	beq.n	8004cce <HAL_DMA_IRQHandler+0x156>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a32      	ldr	r2, [pc, #200]	; (8004d78 <HAL_DMA_IRQHandler+0x200>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x150>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a31      	ldr	r2, [pc, #196]	; (8004d7c <HAL_DMA_IRQHandler+0x204>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d102      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0x14a>
 8004cbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cc0:	e00e      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x168>
 8004cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cc6:	e00b      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x168>
 8004cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ccc:	e008      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x168>
 8004cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cd2:	e005      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x168>
 8004cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd8:	e002      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x168>
 8004cda:	2320      	movs	r3, #32
 8004cdc:	e000      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x168>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	4a27      	ldr	r2, [pc, #156]	; (8004d80 <HAL_DMA_IRQHandler+0x208>)
 8004ce2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d034      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004cfc:	e02f      	b.n	8004d5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2208      	movs	r2, #8
 8004d04:	409a      	lsls	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d028      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x1e8>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d023      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 020e 	bic.w	r2, r2, #14
 8004d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f202 	lsl.w	r2, r1, r2
 8004d36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
    }
  }
  return;
 8004d5e:	bf00      	nop
 8004d60:	bf00      	nop
}
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40020008 	.word	0x40020008
 8004d6c:	4002001c 	.word	0x4002001c
 8004d70:	40020030 	.word	0x40020030
 8004d74:	40020044 	.word	0x40020044
 8004d78:	40020058 	.word	0x40020058
 8004d7c:	4002006c 	.word	0x4002006c
 8004d80:	40020000 	.word	0x40020000

08004d84 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	2101      	movs	r1, #1
 8004db4:	fa01 f202 	lsl.w	r2, r1, r2
 8004db8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d108      	bne.n	8004ddc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dda:	e007      	b.n	8004dec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b08b      	sub	sp, #44	; 0x2c
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004e06:	2300      	movs	r3, #0
 8004e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e0a:	e169      	b.n	80050e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	f040 8158 	bne.w	80050da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4a9a      	ldr	r2, [pc, #616]	; (8005098 <HAL_GPIO_Init+0x2a0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d05e      	beq.n	8004ef2 <HAL_GPIO_Init+0xfa>
 8004e34:	4a98      	ldr	r2, [pc, #608]	; (8005098 <HAL_GPIO_Init+0x2a0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d875      	bhi.n	8004f26 <HAL_GPIO_Init+0x12e>
 8004e3a:	4a98      	ldr	r2, [pc, #608]	; (800509c <HAL_GPIO_Init+0x2a4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d058      	beq.n	8004ef2 <HAL_GPIO_Init+0xfa>
 8004e40:	4a96      	ldr	r2, [pc, #600]	; (800509c <HAL_GPIO_Init+0x2a4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d86f      	bhi.n	8004f26 <HAL_GPIO_Init+0x12e>
 8004e46:	4a96      	ldr	r2, [pc, #600]	; (80050a0 <HAL_GPIO_Init+0x2a8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d052      	beq.n	8004ef2 <HAL_GPIO_Init+0xfa>
 8004e4c:	4a94      	ldr	r2, [pc, #592]	; (80050a0 <HAL_GPIO_Init+0x2a8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d869      	bhi.n	8004f26 <HAL_GPIO_Init+0x12e>
 8004e52:	4a94      	ldr	r2, [pc, #592]	; (80050a4 <HAL_GPIO_Init+0x2ac>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d04c      	beq.n	8004ef2 <HAL_GPIO_Init+0xfa>
 8004e58:	4a92      	ldr	r2, [pc, #584]	; (80050a4 <HAL_GPIO_Init+0x2ac>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d863      	bhi.n	8004f26 <HAL_GPIO_Init+0x12e>
 8004e5e:	4a92      	ldr	r2, [pc, #584]	; (80050a8 <HAL_GPIO_Init+0x2b0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d046      	beq.n	8004ef2 <HAL_GPIO_Init+0xfa>
 8004e64:	4a90      	ldr	r2, [pc, #576]	; (80050a8 <HAL_GPIO_Init+0x2b0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d85d      	bhi.n	8004f26 <HAL_GPIO_Init+0x12e>
 8004e6a:	2b12      	cmp	r3, #18
 8004e6c:	d82a      	bhi.n	8004ec4 <HAL_GPIO_Init+0xcc>
 8004e6e:	2b12      	cmp	r3, #18
 8004e70:	d859      	bhi.n	8004f26 <HAL_GPIO_Init+0x12e>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <HAL_GPIO_Init+0x80>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004ef3 	.word	0x08004ef3
 8004e7c:	08004ecd 	.word	0x08004ecd
 8004e80:	08004edf 	.word	0x08004edf
 8004e84:	08004f21 	.word	0x08004f21
 8004e88:	08004f27 	.word	0x08004f27
 8004e8c:	08004f27 	.word	0x08004f27
 8004e90:	08004f27 	.word	0x08004f27
 8004e94:	08004f27 	.word	0x08004f27
 8004e98:	08004f27 	.word	0x08004f27
 8004e9c:	08004f27 	.word	0x08004f27
 8004ea0:	08004f27 	.word	0x08004f27
 8004ea4:	08004f27 	.word	0x08004f27
 8004ea8:	08004f27 	.word	0x08004f27
 8004eac:	08004f27 	.word	0x08004f27
 8004eb0:	08004f27 	.word	0x08004f27
 8004eb4:	08004f27 	.word	0x08004f27
 8004eb8:	08004f27 	.word	0x08004f27
 8004ebc:	08004ed5 	.word	0x08004ed5
 8004ec0:	08004ee9 	.word	0x08004ee9
 8004ec4:	4a79      	ldr	r2, [pc, #484]	; (80050ac <HAL_GPIO_Init+0x2b4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004eca:	e02c      	b.n	8004f26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	623b      	str	r3, [r7, #32]
          break;
 8004ed2:	e029      	b.n	8004f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	623b      	str	r3, [r7, #32]
          break;
 8004edc:	e024      	b.n	8004f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	623b      	str	r3, [r7, #32]
          break;
 8004ee6:	e01f      	b.n	8004f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	330c      	adds	r3, #12
 8004eee:	623b      	str	r3, [r7, #32]
          break;
 8004ef0:	e01a      	b.n	8004f28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004efa:	2304      	movs	r3, #4
 8004efc:	623b      	str	r3, [r7, #32]
          break;
 8004efe:	e013      	b.n	8004f28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f08:	2308      	movs	r3, #8
 8004f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	611a      	str	r2, [r3, #16]
          break;
 8004f12:	e009      	b.n	8004f28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f14:	2308      	movs	r3, #8
 8004f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	615a      	str	r2, [r3, #20]
          break;
 8004f1e:	e003      	b.n	8004f28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f20:	2300      	movs	r3, #0
 8004f22:	623b      	str	r3, [r7, #32]
          break;
 8004f24:	e000      	b.n	8004f28 <HAL_GPIO_Init+0x130>
          break;
 8004f26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2bff      	cmp	r3, #255	; 0xff
 8004f2c:	d801      	bhi.n	8004f32 <HAL_GPIO_Init+0x13a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	e001      	b.n	8004f36 <HAL_GPIO_Init+0x13e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2bff      	cmp	r3, #255	; 0xff
 8004f3c:	d802      	bhi.n	8004f44 <HAL_GPIO_Init+0x14c>
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	e002      	b.n	8004f4a <HAL_GPIO_Init+0x152>
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	3b08      	subs	r3, #8
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	210f      	movs	r1, #15
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	6a39      	ldr	r1, [r7, #32]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	431a      	orrs	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80b1 	beq.w	80050da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f78:	4b4d      	ldr	r3, [pc, #308]	; (80050b0 <HAL_GPIO_Init+0x2b8>)
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	4a4c      	ldr	r2, [pc, #304]	; (80050b0 <HAL_GPIO_Init+0x2b8>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6193      	str	r3, [r2, #24]
 8004f84:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <HAL_GPIO_Init+0x2b8>)
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f90:	4a48      	ldr	r2, [pc, #288]	; (80050b4 <HAL_GPIO_Init+0x2bc>)
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	3302      	adds	r3, #2
 8004f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	220f      	movs	r2, #15
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a40      	ldr	r2, [pc, #256]	; (80050b8 <HAL_GPIO_Init+0x2c0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <HAL_GPIO_Init+0x1ec>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3f      	ldr	r2, [pc, #252]	; (80050bc <HAL_GPIO_Init+0x2c4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00d      	beq.n	8004fe0 <HAL_GPIO_Init+0x1e8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3e      	ldr	r2, [pc, #248]	; (80050c0 <HAL_GPIO_Init+0x2c8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d007      	beq.n	8004fdc <HAL_GPIO_Init+0x1e4>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a3d      	ldr	r2, [pc, #244]	; (80050c4 <HAL_GPIO_Init+0x2cc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d101      	bne.n	8004fd8 <HAL_GPIO_Init+0x1e0>
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e006      	b.n	8004fe6 <HAL_GPIO_Init+0x1ee>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	e004      	b.n	8004fe6 <HAL_GPIO_Init+0x1ee>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e002      	b.n	8004fe6 <HAL_GPIO_Init+0x1ee>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_GPIO_Init+0x1ee>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	f002 0203 	and.w	r2, r2, #3
 8004fec:	0092      	lsls	r2, r2, #2
 8004fee:	4093      	lsls	r3, r2
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ff6:	492f      	ldr	r1, [pc, #188]	; (80050b4 <HAL_GPIO_Init+0x2bc>)
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d006      	beq.n	800501e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005010:	4b2d      	ldr	r3, [pc, #180]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	492c      	ldr	r1, [pc, #176]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]
 800501c:	e006      	b.n	800502c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800501e:	4b2a      	ldr	r3, [pc, #168]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	43db      	mvns	r3, r3
 8005026:	4928      	ldr	r1, [pc, #160]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005028:	4013      	ands	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d006      	beq.n	8005046 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	4922      	ldr	r1, [pc, #136]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]
 8005044:	e006      	b.n	8005054 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005046:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	43db      	mvns	r3, r3
 800504e:	491e      	ldr	r1, [pc, #120]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005050:	4013      	ands	r3, r2
 8005052:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d006      	beq.n	800506e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005060:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	4918      	ldr	r1, [pc, #96]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	608b      	str	r3, [r1, #8]
 800506c:	e006      	b.n	800507c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	43db      	mvns	r3, r3
 8005076:	4914      	ldr	r1, [pc, #80]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 8005078:	4013      	ands	r3, r2
 800507a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d021      	beq.n	80050cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	490e      	ldr	r1, [pc, #56]	; (80050c8 <HAL_GPIO_Init+0x2d0>)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	4313      	orrs	r3, r2
 8005092:	60cb      	str	r3, [r1, #12]
 8005094:	e021      	b.n	80050da <HAL_GPIO_Init+0x2e2>
 8005096:	bf00      	nop
 8005098:	10320000 	.word	0x10320000
 800509c:	10310000 	.word	0x10310000
 80050a0:	10220000 	.word	0x10220000
 80050a4:	10210000 	.word	0x10210000
 80050a8:	10120000 	.word	0x10120000
 80050ac:	10110000 	.word	0x10110000
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40010800 	.word	0x40010800
 80050bc:	40010c00 	.word	0x40010c00
 80050c0:	40011000 	.word	0x40011000
 80050c4:	40011400 	.word	0x40011400
 80050c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_GPIO_Init+0x304>)
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	43db      	mvns	r3, r3
 80050d4:	4909      	ldr	r1, [pc, #36]	; (80050fc <HAL_GPIO_Init+0x304>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	3301      	adds	r3, #1
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f47f ae8e 	bne.w	8004e0c <HAL_GPIO_Init+0x14>
  }
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	372c      	adds	r7, #44	; 0x2c
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	40010400 	.word	0x40010400

08005100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
 800510c:	4613      	mov	r3, r2
 800510e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005110:	787b      	ldrb	r3, [r7, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800511c:	e003      	b.n	8005126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800511e:	887b      	ldrh	r3, [r7, #2]
 8005120:	041a      	lsls	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	611a      	str	r2, [r3, #16]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr

08005130 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005142:	887a      	ldrh	r2, [r7, #2]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4013      	ands	r3, r2
 8005148:	041a      	lsls	r2, r3, #16
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	43d9      	mvns	r1, r3
 800514e:	887b      	ldrh	r3, [r7, #2]
 8005150:	400b      	ands	r3, r1
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	611a      	str	r2, [r3, #16]
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
	...

08005164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e12b      	b.n	80053ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fd ff12 	bl	8002fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	; 0x24
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051c8:	f003 f874 	bl	80082b4 <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a81      	ldr	r2, [pc, #516]	; (80053d8 <HAL_I2C_Init+0x274>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d807      	bhi.n	80051e8 <HAL_I2C_Init+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a80      	ldr	r2, [pc, #512]	; (80053dc <HAL_I2C_Init+0x278>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	bf94      	ite	ls
 80051e0:	2301      	movls	r3, #1
 80051e2:	2300      	movhi	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e006      	b.n	80051f6 <HAL_I2C_Init+0x92>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a7d      	ldr	r2, [pc, #500]	; (80053e0 <HAL_I2C_Init+0x27c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	bf94      	ite	ls
 80051f0:	2301      	movls	r3, #1
 80051f2:	2300      	movhi	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0e7      	b.n	80053ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a78      	ldr	r2, [pc, #480]	; (80053e4 <HAL_I2C_Init+0x280>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0c9b      	lsrs	r3, r3, #18
 8005208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4a6a      	ldr	r2, [pc, #424]	; (80053d8 <HAL_I2C_Init+0x274>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d802      	bhi.n	8005238 <HAL_I2C_Init+0xd4>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	3301      	adds	r3, #1
 8005236:	e009      	b.n	800524c <HAL_I2C_Init+0xe8>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	4a69      	ldr	r2, [pc, #420]	; (80053e8 <HAL_I2C_Init+0x284>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	099b      	lsrs	r3, r3, #6
 800524a:	3301      	adds	r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	430b      	orrs	r3, r1
 8005252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800525e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	495c      	ldr	r1, [pc, #368]	; (80053d8 <HAL_I2C_Init+0x274>)
 8005268:	428b      	cmp	r3, r1
 800526a:	d819      	bhi.n	80052a0 <HAL_I2C_Init+0x13c>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e59      	subs	r1, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	fbb1 f3f3 	udiv	r3, r1, r3
 800527a:	1c59      	adds	r1, r3, #1
 800527c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005280:	400b      	ands	r3, r1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_I2C_Init+0x138>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1e59      	subs	r1, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fbb1 f3f3 	udiv	r3, r1, r3
 8005294:	3301      	adds	r3, #1
 8005296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529a:	e051      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 800529c:	2304      	movs	r3, #4
 800529e:	e04f      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d111      	bne.n	80052cc <HAL_I2C_Init+0x168>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1e58      	subs	r0, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	440b      	add	r3, r1
 80052b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ba:	3301      	adds	r3, #1
 80052bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e012      	b.n	80052f2 <HAL_I2C_Init+0x18e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e58      	subs	r0, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	0099      	lsls	r1, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Init+0x196>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e022      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10e      	bne.n	8005320 <HAL_I2C_Init+0x1bc>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1e58      	subs	r0, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	440b      	add	r3, r1
 8005310:	fbb0 f3f3 	udiv	r3, r0, r3
 8005314:	3301      	adds	r3, #1
 8005316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	e00f      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1e58      	subs	r0, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	0099      	lsls	r1, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	fbb0 f3f3 	udiv	r3, r0, r3
 8005336:	3301      	adds	r3, #1
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69da      	ldr	r2, [r3, #28]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800536e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6911      	ldr	r1, [r2, #16]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68d2      	ldr	r2, [r2, #12]
 800537a:	4311      	orrs	r1, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	430b      	orrs	r3, r1
 8005382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695a      	ldr	r2, [r3, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	000186a0 	.word	0x000186a0
 80053dc:	001e847f 	.word	0x001e847f
 80053e0:	003d08ff 	.word	0x003d08ff
 80053e4:	431bde83 	.word	0x431bde83
 80053e8:	10624dd3 	.word	0x10624dd3

080053ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	817b      	strh	r3, [r7, #10]
 80053fe:	460b      	mov	r3, r1
 8005400:	813b      	strh	r3, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005406:	f7fe f9b9 	bl	800377c <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b20      	cmp	r3, #32
 8005416:	f040 80d9 	bne.w	80055cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2319      	movs	r3, #25
 8005420:	2201      	movs	r2, #1
 8005422:	496d      	ldr	r1, [pc, #436]	; (80055d8 <HAL_I2C_Mem_Write+0x1ec>)
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f002 f949 	bl	80076bc <I2C_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
 8005432:	e0cc      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_I2C_Mem_Write+0x56>
 800543e:	2302      	movs	r3, #2
 8005440:	e0c5      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d007      	beq.n	8005468 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2221      	movs	r2, #33	; 0x21
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005498:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a4d      	ldr	r2, [pc, #308]	; (80055dc <HAL_I2C_Mem_Write+0x1f0>)
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054aa:	88f8      	ldrh	r0, [r7, #6]
 80054ac:	893a      	ldrh	r2, [r7, #8]
 80054ae:	8979      	ldrh	r1, [r7, #10]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	4603      	mov	r3, r0
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f001 fed8 	bl	8007270 <I2C_RequestMemoryWrite>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d052      	beq.n	800556c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e081      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f002 f9ca 	bl	8007868 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d107      	bne.n	80054f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e06b      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	781a      	ldrb	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d11b      	bne.n	800556c <HAL_I2C_Mem_Write+0x180>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d017      	beq.n	800556c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1aa      	bne.n	80054ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f002 f9b6 	bl	80078ea <I2C_WaitOnBTFFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b04      	cmp	r3, #4
 800558a:	d107      	bne.n	800559c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e016      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	00100002 	.word	0x00100002
 80055dc:	ffff0000 	.word	0xffff0000

080055e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08c      	sub	sp, #48	; 0x30
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	461a      	mov	r2, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	817b      	strh	r3, [r7, #10]
 80055f2:	460b      	mov	r3, r1
 80055f4:	813b      	strh	r3, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055fe:	f7fe f8bd 	bl	800377c <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	f040 8244 	bne.w	8005a9a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2319      	movs	r3, #25
 8005618:	2201      	movs	r2, #1
 800561a:	4982      	ldr	r1, [pc, #520]	; (8005824 <HAL_I2C_Mem_Read+0x244>)
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f002 f84d 	bl	80076bc <I2C_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
 800562a:	e237      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_I2C_Mem_Read+0x5a>
 8005636:	2302      	movs	r3, #2
 8005638:	e230      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b01      	cmp	r3, #1
 800564e:	d007      	beq.n	8005660 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2222      	movs	r2, #34	; 0x22
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a62      	ldr	r2, [pc, #392]	; (8005828 <HAL_I2C_Mem_Read+0x248>)
 80056a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056a2:	88f8      	ldrh	r0, [r7, #6]
 80056a4:	893a      	ldrh	r2, [r7, #8]
 80056a6:	8979      	ldrh	r1, [r7, #10]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4603      	mov	r3, r0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f001 fe72 	bl	800739c <I2C_RequestMemoryRead>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e1ec      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e1c0      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d11e      	bne.n	8005738 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005708:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800570a:	b672      	cpsid	i
}
 800570c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005732:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005734:	b662      	cpsie	i
}
 8005736:	e035      	b.n	80057a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	2b02      	cmp	r3, #2
 800573e:	d11e      	bne.n	800577e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005750:	b672      	cpsid	i
}
 8005752:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005778:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800577a:	b662      	cpsie	i
}
 800577c:	e012      	b.n	80057a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800578c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80057a4:	e166      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	f200 811f 	bhi.w	80059ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d123      	bne.n	8005800 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f002 f907 	bl	80079d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e167      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057fe:	e139      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	2b02      	cmp	r3, #2
 8005806:	d152      	bne.n	80058ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	2200      	movs	r2, #0
 8005810:	4906      	ldr	r1, [pc, #24]	; (800582c <HAL_I2C_Mem_Read+0x24c>)
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f001 ff52 	bl	80076bc <I2C_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e13c      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
 8005822:	bf00      	nop
 8005824:	00100002 	.word	0x00100002
 8005828:	ffff0000 	.word	0xffff0000
 800582c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005830:	b672      	cpsid	i
}
 8005832:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005876:	b662      	cpsie	i
}
 8005878:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ac:	e0e2      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2200      	movs	r2, #0
 80058b6:	497b      	ldr	r1, [pc, #492]	; (8005aa4 <HAL_I2C_Mem_Read+0x4c4>)
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f001 feff 	bl	80076bc <I2C_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0e9      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80058d8:	b672      	cpsid	i
}
 80058da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800590e:	4b66      	ldr	r3, [pc, #408]	; (8005aa8 <HAL_I2C_Mem_Read+0x4c8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	08db      	lsrs	r3, r3, #3
 8005914:	4a65      	ldr	r2, [pc, #404]	; (8005aac <HAL_I2C_Mem_Read+0x4cc>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	0a1a      	lsrs	r2, r3, #8
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00da      	lsls	r2, r3, #3
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	3b01      	subs	r3, #1
 800592c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d118      	bne.n	8005966 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005956:	b662      	cpsie	i
}
 8005958:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e09a      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d1d9      	bne.n	8005928 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80059b6:	b662      	cpsie	i
}
 80059b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059ec:	e042      	b.n	8005a74 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f001 ffec 	bl	80079d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e04c      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d118      	bne.n	8005a74 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f47f ae94 	bne.w	80057a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3728      	adds	r7, #40	; 0x28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	00010004 	.word	0x00010004
 8005aa8:	20000004 	.word	0x20000004
 8005aac:	14f8b589 	.word	0x14f8b589

08005ab0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ad0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d003      	beq.n	8005ae8 <HAL_I2C_EV_IRQHandler+0x38>
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	f040 80c1 	bne.w	8005c6a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10d      	bne.n	8005b1e <HAL_I2C_EV_IRQHandler+0x6e>
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b08:	d003      	beq.n	8005b12 <HAL_I2C_EV_IRQHandler+0x62>
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b10:	d101      	bne.n	8005b16 <HAL_I2C_EV_IRQHandler+0x66>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <HAL_I2C_EV_IRQHandler+0x68>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	f000 8132 	beq.w	8005d82 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00c      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0x92>
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	0a5b      	lsrs	r3, r3, #9
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d006      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 ffcf 	bl	8007ad8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fd77 	bl	800662e <I2C_Master_SB>
 8005b40:	e092      	b.n	8005c68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	08db      	lsrs	r3, r3, #3
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_I2C_EV_IRQHandler+0xb2>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	0a5b      	lsrs	r3, r3, #9
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fdec 	bl	8006738 <I2C_Master_ADD10>
 8005b60:	e082      	b.n	8005c68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <HAL_I2C_EV_IRQHandler+0xd2>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	0a5b      	lsrs	r3, r3, #9
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fe05 	bl	800678a <I2C_Master_ADDR>
 8005b80:	e072      	b.n	8005c68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d03b      	beq.n	8005c06 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9c:	f000 80f3 	beq.w	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	09db      	lsrs	r3, r3, #7
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00f      	beq.n	8005bcc <HAL_I2C_EV_IRQHandler+0x11c>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	0a9b      	lsrs	r3, r3, #10
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <HAL_I2C_EV_IRQHandler+0x11c>
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	089b      	lsrs	r3, r3, #2
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d103      	bne.n	8005bcc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f9f1 	bl	8005fac <I2C_MasterTransmit_TXE>
 8005bca:	e04d      	b.n	8005c68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80d6 	beq.w	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	0a5b      	lsrs	r3, r3, #9
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80cf 	beq.w	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	2b21      	cmp	r3, #33	; 0x21
 8005bec:	d103      	bne.n	8005bf6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fa78 	bl	80060e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bf4:	e0c7      	b.n	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b40      	cmp	r3, #64	; 0x40
 8005bfa:	f040 80c4 	bne.w	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fae6 	bl	80061d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c04:	e0bf      	b.n	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c14:	f000 80b7 	beq.w	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	099b      	lsrs	r3, r3, #6
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00f      	beq.n	8005c44 <HAL_I2C_EV_IRQHandler+0x194>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	0a9b      	lsrs	r3, r3, #10
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <HAL_I2C_EV_IRQHandler+0x194>
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d103      	bne.n	8005c44 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fb5b 	bl	80062f8 <I2C_MasterReceive_RXNE>
 8005c42:	e011      	b.n	8005c68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	089b      	lsrs	r3, r3, #2
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 809a 	beq.w	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	0a5b      	lsrs	r3, r3, #9
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8093 	beq.w	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fbfa 	bl	800645a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c66:	e08e      	b.n	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c68:	e08d      	b.n	8005d86 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	61fb      	str	r3, [r7, #28]
 8005c7a:	e007      	b.n	8005c8c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d012      	beq.n	8005cbe <HAL_I2C_EV_IRQHandler+0x20e>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	0a5b      	lsrs	r3, r3, #9
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00c      	beq.n	8005cbe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005cb4:	69b9      	ldr	r1, [r7, #24]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 ffbe 	bl	8006c38 <I2C_Slave_ADDR>
 8005cbc:	e066      	b.n	8005d8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <HAL_I2C_EV_IRQHandler+0x22e>
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	0a5b      	lsrs	r3, r3, #9
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fff8 	bl	8006ccc <I2C_Slave_STOPF>
 8005cdc:	e056      	b.n	8005d8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	2b21      	cmp	r3, #33	; 0x21
 8005ce2:	d002      	beq.n	8005cea <HAL_I2C_EV_IRQHandler+0x23a>
 8005ce4:	7bbb      	ldrb	r3, [r7, #14]
 8005ce6:	2b29      	cmp	r3, #41	; 0x29
 8005ce8:	d125      	bne.n	8005d36 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	09db      	lsrs	r3, r3, #7
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00f      	beq.n	8005d16 <HAL_I2C_EV_IRQHandler+0x266>
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	0a9b      	lsrs	r3, r3, #10
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <HAL_I2C_EV_IRQHandler+0x266>
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	089b      	lsrs	r3, r3, #2
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fed6 	bl	8006ac0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d14:	e039      	b.n	8005d8a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	089b      	lsrs	r3, r3, #2
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d033      	beq.n	8005d8a <HAL_I2C_EV_IRQHandler+0x2da>
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	0a5b      	lsrs	r3, r3, #9
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02d      	beq.n	8005d8a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 ff03 	bl	8006b3a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d34:	e029      	b.n	8005d8a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	099b      	lsrs	r3, r3, #6
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00f      	beq.n	8005d62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	0a9b      	lsrs	r3, r3, #10
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 ff0d 	bl	8006b7a <I2C_SlaveReceive_RXNE>
 8005d60:	e014      	b.n	8005d8c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	089b      	lsrs	r3, r3, #2
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00e      	beq.n	8005d8c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	0a5b      	lsrs	r3, r3, #9
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 ff3b 	bl	8006bf6 <I2C_SlaveReceive_BTF>
 8005d80:	e004      	b.n	8005d8c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005d82:	bf00      	nop
 8005d84:	e002      	b.n	8005d8c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d8a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b08a      	sub	sp, #40	; 0x28
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d016      	beq.n	8005df0 <HAL_I2C_ER_IRQHandler+0x5e>
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dde:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dee:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	0a5b      	lsrs	r3, r3, #9
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00e      	beq.n	8005e1a <HAL_I2C_ER_IRQHandler+0x88>
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	0a1b      	lsrs	r3, r3, #8
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	f043 0302 	orr.w	r3, r3, #2
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005e18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	0a9b      	lsrs	r3, r3, #10
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d03f      	beq.n	8005ea6 <HAL_I2C_ER_IRQHandler+0x114>
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	0a1b      	lsrs	r3, r3, #8
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d039      	beq.n	8005ea6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005e32:	7efb      	ldrb	r3, [r7, #27]
 8005e34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005e4c:	7ebb      	ldrb	r3, [r7, #26]
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d112      	bne.n	8005e78 <HAL_I2C_ER_IRQHandler+0xe6>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10f      	bne.n	8005e78 <HAL_I2C_ER_IRQHandler+0xe6>
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	2b21      	cmp	r3, #33	; 0x21
 8005e5c:	d008      	beq.n	8005e70 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005e5e:	7cfb      	ldrb	r3, [r7, #19]
 8005e60:	2b29      	cmp	r3, #41	; 0x29
 8005e62:	d005      	beq.n	8005e70 <HAL_I2C_ER_IRQHandler+0xde>
 8005e64:	7cfb      	ldrb	r3, [r7, #19]
 8005e66:	2b28      	cmp	r3, #40	; 0x28
 8005e68:	d106      	bne.n	8005e78 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b21      	cmp	r3, #33	; 0x21
 8005e6e:	d103      	bne.n	8005e78 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 f85b 	bl	8006f2c <I2C_Slave_AF>
 8005e76:	e016      	b.n	8005ea6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005e8a:	7efb      	ldrb	r3, [r7, #27]
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d002      	beq.n	8005e96 <HAL_I2C_ER_IRQHandler+0x104>
 8005e90:	7efb      	ldrb	r3, [r7, #27]
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d107      	bne.n	8005ea6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	0adb      	lsrs	r3, r3, #11
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00e      	beq.n	8005ed0 <HAL_I2C_ER_IRQHandler+0x13e>
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	f043 0308 	orr.w	r3, r3, #8
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005ece:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d008      	beq.n	8005ee8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 f892 	bl	800700c <I2C_ITError>
  }
}
 8005ee8:	bf00      	nop
 8005eea:	3728      	adds	r7, #40	; 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr

08005f26 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
 8005f44:	4613      	mov	r3, r2
 8005f46:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr

08005f9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d150      	bne.n	8006074 <I2C_MasterTransmit_TXE+0xc8>
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b21      	cmp	r3, #33	; 0x21
 8005fd6:	d14d      	bne.n	8006074 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d01d      	beq.n	800601a <I2C_MasterTransmit_TXE+0x6e>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d01a      	beq.n	800601a <I2C_MasterTransmit_TXE+0x6e>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fea:	d016      	beq.n	800601a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ffa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2211      	movs	r2, #17
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ff6c 	bl	8005ef0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006018:	e060      	b.n	80060dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006028:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006038:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	d107      	bne.n	8006064 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff ff81 	bl	8005f64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006062:	e03b      	b.n	80060dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ff3f 	bl	8005ef0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006072:	e033      	b.n	80060dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	2b21      	cmp	r3, #33	; 0x21
 8006078:	d005      	beq.n	8006086 <I2C_MasterTransmit_TXE+0xda>
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d12d      	bne.n	80060dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b22      	cmp	r3, #34	; 0x22
 8006084:	d12a      	bne.n	80060dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d108      	bne.n	80060a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800609e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80060a0:	e01c      	b.n	80060dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d103      	bne.n	80060b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f88e 	bl	80061d0 <I2C_MemoryTransmit_TXE_BTF>
}
 80060b4:	e012      	b.n	80060dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	781a      	ldrb	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80060da:	e7ff      	b.n	80060dc <I2C_MasterTransmit_TXE+0x130>
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b21      	cmp	r3, #33	; 0x21
 80060fc:	d164      	bne.n	80061c8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d012      	beq.n	800612e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800612c:	e04c      	b.n	80061c8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d01d      	beq.n	8006170 <I2C_MasterTransmit_BTF+0x8c>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b20      	cmp	r3, #32
 8006138:	d01a      	beq.n	8006170 <I2C_MasterTransmit_BTF+0x8c>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006140:	d016      	beq.n	8006170 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006150:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2211      	movs	r2, #17
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fec1 	bl	8005ef0 <HAL_I2C_MasterTxCpltCallback>
}
 800616e:	e02b      	b.n	80061c8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800617e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d107      	bne.n	80061ba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fed6 	bl	8005f64 <HAL_I2C_MemTxCpltCallback>
}
 80061b8:	e006      	b.n	80061c8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fe94 	bl	8005ef0 <HAL_I2C_MasterTxCpltCallback>
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11d      	bne.n	8006224 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10b      	bne.n	8006208 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	1c9a      	adds	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006206:	e073      	b.n	80062f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620c:	b29b      	uxth	r3, r3
 800620e:	121b      	asrs	r3, r3, #8
 8006210:	b2da      	uxtb	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006222:	e065      	b.n	80062f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	2b01      	cmp	r3, #1
 800622a:	d10b      	bne.n	8006244 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006242:	e055      	b.n	80062f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006248:	2b02      	cmp	r3, #2
 800624a:	d151      	bne.n	80062f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b22      	cmp	r3, #34	; 0x22
 8006250:	d10d      	bne.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006260:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800626c:	e040      	b.n	80062f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d015      	beq.n	80062a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2b21      	cmp	r3, #33	; 0x21
 800627c:	d112      	bne.n	80062a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062a2:	e025      	b.n	80062f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d120      	bne.n	80062f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	2b21      	cmp	r3, #33	; 0x21
 80062b2:	d11d      	bne.n	80062f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff fe3a 	bl	8005f64 <HAL_I2C_MemTxCpltCallback>
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b22      	cmp	r3, #34	; 0x22
 800630a:	f040 80a2 	bne.w	8006452 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006312:	b29b      	uxth	r3, r3
 8006314:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b03      	cmp	r3, #3
 800631a:	d921      	bls.n	8006360 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b03      	cmp	r3, #3
 800634a:	f040 8082 	bne.w	8006452 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800635e:	e078      	b.n	8006452 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	2b02      	cmp	r3, #2
 8006366:	d074      	beq.n	8006452 <I2C_MasterReceive_RXNE+0x15a>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d002      	beq.n	8006374 <I2C_MasterReceive_RXNE+0x7c>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d16e      	bne.n	8006452 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 faf9 	bl	800796c <I2C_WaitOnSTOPRequestThroughIT>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d142      	bne.n	8006406 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800639e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d10a      	bne.n	80063f0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff fdc4 	bl	8005f76 <HAL_I2C_MemRxCpltCallback>
}
 80063ee:	e030      	b.n	8006452 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2212      	movs	r2, #18
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff fd7f 	bl	8005f02 <HAL_I2C_MasterRxCpltCallback>
}
 8006404:	e025      	b.n	8006452 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006414:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff fd9b 	bl	8005f88 <HAL_I2C_ErrorCallback>
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b04      	cmp	r3, #4
 8006470:	d11b      	bne.n	80064aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006480:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80064a8:	e0bd      	b.n	8006626 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d129      	bne.n	8006508 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d00a      	beq.n	80064e0 <I2C_MasterReceive_BTF+0x86>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d007      	beq.n	80064e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006506:	e08e      	b.n	8006626 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d176      	bne.n	8006600 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d002      	beq.n	800651e <I2C_MasterReceive_BTF+0xc4>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b10      	cmp	r3, #16
 800651c:	d108      	bne.n	8006530 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e019      	b.n	8006564 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b04      	cmp	r3, #4
 8006534:	d002      	beq.n	800653c <I2C_MasterReceive_BTF+0xe2>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d108      	bne.n	800654e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e00a      	b.n	8006564 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b10      	cmp	r3, #16
 8006552:	d007      	beq.n	8006564 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006562:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80065be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d10a      	bne.n	80065ea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fcc7 	bl	8005f76 <HAL_I2C_MemRxCpltCallback>
}
 80065e8:	e01d      	b.n	8006626 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2212      	movs	r2, #18
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fc82 	bl	8005f02 <HAL_I2C_MasterRxCpltCallback>
}
 80065fe:	e012      	b.n	8006626 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b40      	cmp	r3, #64	; 0x40
 8006640:	d117      	bne.n	8006672 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	b2db      	uxtb	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800665a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800665c:	e067      	b.n	800672e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	611a      	str	r2, [r3, #16]
}
 8006670:	e05d      	b.n	800672e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800667a:	d133      	bne.n	80066e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b21      	cmp	r3, #33	; 0x21
 8006686:	d109      	bne.n	800669c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	b2db      	uxtb	r3, r3
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006698:	611a      	str	r2, [r3, #16]
 800669a:	e008      	b.n	80066ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <I2C_Master_SB+0x92>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d108      	bne.n	80066d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d032      	beq.n	800672e <I2C_Master_SB+0x100>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d02d      	beq.n	800672e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e0:	605a      	str	r2, [r3, #4]
}
 80066e2:	e024      	b.n	800672e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10e      	bne.n	800670a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	11db      	asrs	r3, r3, #7
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f003 0306 	and.w	r3, r3, #6
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f063 030f 	orn	r3, r3, #15
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	611a      	str	r2, [r3, #16]
}
 8006708:	e011      	b.n	800672e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670e:	2b01      	cmp	r3, #1
 8006710:	d10d      	bne.n	800672e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	b29b      	uxth	r3, r3
 8006718:	11db      	asrs	r3, r3, #7
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 0306 	and.w	r3, r3, #6
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f063 030e 	orn	r3, r3, #14
 8006726:	b2da      	uxtb	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	611a      	str	r2, [r3, #16]
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006744:	b2da      	uxtb	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <I2C_Master_ADD10+0x26>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	d108      	bne.n	8006770 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00c      	beq.n	8006780 <I2C_Master_ADD10+0x48>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800677e:	605a      	str	r2, [r3, #4]
  }
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800678a:	b480      	push	{r7}
 800678c:	b091      	sub	sp, #68	; 0x44
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b22      	cmp	r3, #34	; 0x22
 80067b2:	f040 8174 	bne.w	8006a9e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10f      	bne.n	80067de <I2C_Master_ADDR+0x54>
 80067be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d10b      	bne.n	80067de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c6:	2300      	movs	r3, #0
 80067c8:	633b      	str	r3, [r7, #48]	; 0x30
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	633b      	str	r3, [r7, #48]	; 0x30
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	633b      	str	r3, [r7, #48]	; 0x30
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	e16b      	b.n	8006ab6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d11d      	bne.n	8006822 <I2C_Master_ADDR+0x98>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067ee:	d118      	bne.n	8006822 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f0:	2300      	movs	r3, #0
 80067f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006814:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	651a      	str	r2, [r3, #80]	; 0x50
 8006820:	e149      	b.n	8006ab6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d113      	bne.n	8006854 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800682c:	2300      	movs	r3, #0
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e120      	b.n	8006a96 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b01      	cmp	r3, #1
 800685c:	f040 808a 	bne.w	8006974 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006866:	d137      	bne.n	80068d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006876:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006886:	d113      	bne.n	80068b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006896:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006898:	2300      	movs	r3, #0
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	e0f2      	b.n	8006a96 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068b0:	2300      	movs	r3, #0
 80068b2:	623b      	str	r3, [r7, #32]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	623b      	str	r3, [r7, #32]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	623b      	str	r3, [r7, #32]
 80068c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e0de      	b.n	8006a96 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d02e      	beq.n	800693c <I2C_Master_ADDR+0x1b2>
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d02b      	beq.n	800693c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80068e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e6:	2b12      	cmp	r3, #18
 80068e8:	d102      	bne.n	80068f0 <I2C_Master_ADDR+0x166>
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d125      	bne.n	800693c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d00e      	beq.n	8006914 <I2C_Master_ADDR+0x18a>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d00b      	beq.n	8006914 <I2C_Master_ADDR+0x18a>
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d008      	beq.n	8006914 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e007      	b.n	8006924 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006922:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	e0ac      	b.n	8006a96 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800694c:	2300      	movs	r3, #0
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e090      	b.n	8006a96 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d158      	bne.n	8006a30 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	2b04      	cmp	r3, #4
 8006982:	d021      	beq.n	80069c8 <I2C_Master_ADDR+0x23e>
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	2b02      	cmp	r3, #2
 8006988:	d01e      	beq.n	80069c8 <I2C_Master_ADDR+0x23e>
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	2b10      	cmp	r3, #16
 800698e:	d01b      	beq.n	80069c8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800699e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	e012      	b.n	80069ee <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069fc:	d14b      	bne.n	8006a96 <I2C_Master_ADDR+0x30c>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a04:	d00b      	beq.n	8006a1e <I2C_Master_ADDR+0x294>
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d008      	beq.n	8006a1e <I2C_Master_ADDR+0x294>
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d005      	beq.n	8006a1e <I2C_Master_ADDR+0x294>
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d002      	beq.n	8006a1e <I2C_Master_ADDR+0x294>
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d13b      	bne.n	8006a96 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a2c:	605a      	str	r2, [r3, #4]
 8006a2e:	e032      	b.n	8006a96 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a3e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4e:	d117      	bne.n	8006a80 <I2C_Master_ADDR+0x2f6>
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a56:	d00b      	beq.n	8006a70 <I2C_Master_ADDR+0x2e6>
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d008      	beq.n	8006a70 <I2C_Master_ADDR+0x2e6>
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d005      	beq.n	8006a70 <I2C_Master_ADDR+0x2e6>
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	2b10      	cmp	r3, #16
 8006a68:	d002      	beq.n	8006a70 <I2C_Master_ADDR+0x2e6>
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d107      	bne.n	8006a80 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a7e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006a9c:	e00b      	b.n	8006ab6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
}
 8006ab4:	e7ff      	b.n	8006ab6 <I2C_Master_ADDR+0x32c>
 8006ab6:	bf00      	nop
 8006ab8:	3744      	adds	r7, #68	; 0x44
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr

08006ac0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ace:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02b      	beq.n	8006b32 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d114      	bne.n	8006b32 <I2C_SlaveTransmit_TXE+0x72>
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b29      	cmp	r3, #41	; 0x29
 8006b0c:	d111      	bne.n	8006b32 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2221      	movs	r2, #33	; 0x21
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2228      	movs	r2, #40	; 0x28
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff f9f1 	bl	8005f14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d011      	beq.n	8006b70 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	781a      	ldrb	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b88:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02c      	beq.n	8006bee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d114      	bne.n	8006bee <I2C_SlaveReceive_RXNE+0x74>
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc8:	d111      	bne.n	8006bee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2222      	movs	r2, #34	; 0x22
 8006bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2228      	movs	r2, #40	; 0x28
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff f99c 	bl	8005f26 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d012      	beq.n	8006c2e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c52:	2b28      	cmp	r3, #40	; 0x28
 8006c54:	d127      	bne.n	8006ca6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	089b      	lsrs	r3, r3, #2
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006c72:	2301      	movs	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	09db      	lsrs	r3, r3, #7
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	81bb      	strh	r3, [r7, #12]
 8006c88:	e002      	b.n	8006c90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006c98:	89ba      	ldrh	r2, [r7, #12]
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff f94a 	bl	8005f38 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ca4:	e00e      	b.n	8006cc4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006cec:	2300      	movs	r3, #0
 8006cee:	60bb      	str	r3, [r7, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d28:	d172      	bne.n	8006e10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	2b22      	cmp	r3, #34	; 0x22
 8006d2e:	d002      	beq.n	8006d36 <I2C_Slave_STOPF+0x6a>
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	2b2a      	cmp	r3, #42	; 0x2a
 8006d34:	d135      	bne.n	8006da2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f043 0204 	orr.w	r2, r3, #4
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe f808 	bl	8004d84 <HAL_DMA_GetState>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d049      	beq.n	8006e0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	4a69      	ldr	r2, [pc, #420]	; (8006f24 <I2C_Slave_STOPF+0x258>)
 8006d80:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fd fe80 	bl	8004a8c <HAL_DMA_Abort_IT>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d03d      	beq.n	8006e0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006da0:	e035      	b.n	8006e0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f043 0204 	orr.w	r2, r3, #4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fd ffd2 	bl	8004d84 <HAL_DMA_GetState>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d014      	beq.n	8006e10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	4a4e      	ldr	r2, [pc, #312]	; (8006f24 <I2C_Slave_STOPF+0x258>)
 8006dec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fd fe4a 	bl	8004a8c <HAL_DMA_Abort_IT>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	e000      	b.n	8006e10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d03e      	beq.n	8006e98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d112      	bne.n	8006e4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691a      	ldr	r2, [r3, #16]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e58:	2b40      	cmp	r3, #64	; 0x40
 8006e5a:	d112      	bne.n	8006e82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	f043 0204 	orr.w	r2, r3, #4
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f8b3 	bl	800700c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006ea6:	e039      	b.n	8006f1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8006eac:	d109      	bne.n	8006ec2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2228      	movs	r2, #40	; 0x28
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff f832 	bl	8005f26 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b28      	cmp	r3, #40	; 0x28
 8006ecc:	d111      	bne.n	8006ef2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <I2C_Slave_STOPF+0x25c>)
 8006ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff f831 	bl	8005f52 <HAL_I2C_ListenCpltCallback>
}
 8006ef0:	e014      	b.n	8006f1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	2b22      	cmp	r3, #34	; 0x22
 8006ef8:	d002      	beq.n	8006f00 <I2C_Slave_STOPF+0x234>
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	2b22      	cmp	r3, #34	; 0x22
 8006efe:	d10d      	bne.n	8006f1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff f805 	bl	8005f26 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	0800756d 	.word	0x0800756d
 8006f28:	ffff0000 	.word	0xffff0000

08006f2c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d002      	beq.n	8006f4e <I2C_Slave_AF+0x22>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d129      	bne.n	8006fa2 <I2C_Slave_AF+0x76>
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2b28      	cmp	r3, #40	; 0x28
 8006f52:	d126      	bne.n	8006fa2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a2c      	ldr	r2, [pc, #176]	; (8007008 <I2C_Slave_AF+0xdc>)
 8006f58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f68:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f72:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f82:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fe ffd9 	bl	8005f52 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006fa0:	e02e      	b.n	8007000 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b21      	cmp	r3, #33	; 0x21
 8006fa6:	d126      	bne.n	8006ff6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a17      	ldr	r2, [pc, #92]	; (8007008 <I2C_Slave_AF+0xdc>)
 8006fac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2221      	movs	r2, #33	; 0x21
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fd2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fdc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fe ff90 	bl	8005f14 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ff4:	e004      	b.n	8007000 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ffe:	615a      	str	r2, [r3, #20]
}
 8007000:	bf00      	nop
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	ffff0000 	.word	0xffff0000

0800700c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007022:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b10      	cmp	r3, #16
 8007028:	d002      	beq.n	8007030 <I2C_ITError+0x24>
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	d10a      	bne.n	8007046 <I2C_ITError+0x3a>
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b22      	cmp	r3, #34	; 0x22
 8007034:	d107      	bne.n	8007046 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007044:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800704c:	2b28      	cmp	r3, #40	; 0x28
 800704e:	d107      	bne.n	8007060 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2228      	movs	r2, #40	; 0x28
 800705a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800705e:	e015      	b.n	800708c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800706a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800706e:	d00a      	beq.n	8007086 <I2C_ITError+0x7a>
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b60      	cmp	r3, #96	; 0x60
 8007074:	d007      	beq.n	8007086 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800709a:	d161      	bne.n	8007160 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d020      	beq.n	80070fa <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	4a6a      	ldr	r2, [pc, #424]	; (8007268 <I2C_ITError+0x25c>)
 80070be:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fd fce1 	bl	8004a8c <HAL_DMA_Abort_IT>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8089 	beq.w	80071e4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070f4:	4610      	mov	r0, r2
 80070f6:	4798      	blx	r3
 80070f8:	e074      	b.n	80071e4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	4a5a      	ldr	r2, [pc, #360]	; (8007268 <I2C_ITError+0x25c>)
 8007100:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	4618      	mov	r0, r3
 8007108:	f7fd fcc0 	bl	8004a8c <HAL_DMA_Abort_IT>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d068      	beq.n	80071e4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d10b      	bne.n	8007138 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0201 	bic.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800715a:	4610      	mov	r0, r2
 800715c:	4798      	blx	r3
 800715e:	e041      	b.n	80071e4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b60      	cmp	r3, #96	; 0x60
 800716a:	d125      	bne.n	80071b8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	d10b      	bne.n	80071a0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0201 	bic.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fe fef2 	bl	8005f9a <HAL_I2C_AbortCpltCallback>
 80071b6:	e015      	b.n	80071e4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d10b      	bne.n	80071de <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fe fed2 	bl	8005f88 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10e      	bne.n	8007212 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007220:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b04      	cmp	r3, #4
 8007234:	d113      	bne.n	800725e <I2C_ITError+0x252>
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b28      	cmp	r3, #40	; 0x28
 800723a:	d110      	bne.n	800725e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a0b      	ldr	r2, [pc, #44]	; (800726c <I2C_ITError+0x260>)
 8007240:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fe fe7a 	bl	8005f52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	0800756d 	.word	0x0800756d
 800726c:	ffff0000 	.word	0xffff0000

08007270 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	4608      	mov	r0, r1
 800727a:	4611      	mov	r1, r2
 800727c:	461a      	mov	r2, r3
 800727e:	4603      	mov	r3, r0
 8007280:	817b      	strh	r3, [r7, #10]
 8007282:	460b      	mov	r3, r1
 8007284:	813b      	strh	r3, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 fa08 	bl	80076bc <I2C_WaitOnFlagUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00d      	beq.n	80072ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c0:	d103      	bne.n	80072ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e05f      	b.n	800738e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072ce:	897b      	ldrh	r3, [r7, #10]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	492d      	ldr	r1, [pc, #180]	; (8007398 <I2C_RequestMemoryWrite+0x128>)
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fa40 	bl	800776a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e04c      	b.n	800738e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800730a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730c:	6a39      	ldr	r1, [r7, #32]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 faaa 	bl	8007868 <I2C_WaitOnTXEFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00d      	beq.n	8007336 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	2b04      	cmp	r3, #4
 8007320:	d107      	bne.n	8007332 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e02b      	b.n	800738e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007336:	88fb      	ldrh	r3, [r7, #6]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d105      	bne.n	8007348 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800733c:	893b      	ldrh	r3, [r7, #8]
 800733e:	b2da      	uxtb	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	611a      	str	r2, [r3, #16]
 8007346:	e021      	b.n	800738c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007348:	893b      	ldrh	r3, [r7, #8]
 800734a:	0a1b      	lsrs	r3, r3, #8
 800734c:	b29b      	uxth	r3, r3
 800734e:	b2da      	uxtb	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007358:	6a39      	ldr	r1, [r7, #32]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fa84 	bl	8007868 <I2C_WaitOnTXEFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00d      	beq.n	8007382 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	2b04      	cmp	r3, #4
 800736c:	d107      	bne.n	800737e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800737c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e005      	b.n	800738e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007382:	893b      	ldrh	r3, [r7, #8]
 8007384:	b2da      	uxtb	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	00010002 	.word	0x00010002

0800739c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af02      	add	r7, sp, #8
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	4608      	mov	r0, r1
 80073a6:	4611      	mov	r1, r2
 80073a8:	461a      	mov	r2, r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	817b      	strh	r3, [r7, #10]
 80073ae:	460b      	mov	r3, r1
 80073b0:	813b      	strh	r3, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	2200      	movs	r2, #0
 80073de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f96a 	bl	80076bc <I2C_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fc:	d103      	bne.n	8007406 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007404:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e0aa      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800740a:	897b      	ldrh	r3, [r7, #10]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	6a3a      	ldr	r2, [r7, #32]
 800741e:	4952      	ldr	r1, [pc, #328]	; (8007568 <I2C_RequestMemoryRead+0x1cc>)
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f9a2 	bl	800776a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e097      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007448:	6a39      	ldr	r1, [r7, #32]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 fa0c 	bl	8007868 <I2C_WaitOnTXEFlagUntilTimeout>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00d      	beq.n	8007472 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	2b04      	cmp	r3, #4
 800745c:	d107      	bne.n	800746e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800746c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e076      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d105      	bne.n	8007484 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007478:	893b      	ldrh	r3, [r7, #8]
 800747a:	b2da      	uxtb	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	611a      	str	r2, [r3, #16]
 8007482:	e021      	b.n	80074c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007484:	893b      	ldrh	r3, [r7, #8]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	b29b      	uxth	r3, r3
 800748a:	b2da      	uxtb	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007494:	6a39      	ldr	r1, [r7, #32]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f9e6 	bl	8007868 <I2C_WaitOnTXEFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00d      	beq.n	80074be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d107      	bne.n	80074ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e050      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074be:	893b      	ldrh	r3, [r7, #8]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ca:	6a39      	ldr	r1, [r7, #32]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f9cb 	bl	8007868 <I2C_WaitOnTXEFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00d      	beq.n	80074f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	2b04      	cmp	r3, #4
 80074de:	d107      	bne.n	80074f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e035      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007502:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2200      	movs	r2, #0
 800750c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f8d3 	bl	80076bc <I2C_WaitOnFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752a:	d103      	bne.n	8007534 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e013      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007538:	897b      	ldrh	r3, [r7, #10]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f043 0301 	orr.w	r3, r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	6a3a      	ldr	r2, [r7, #32]
 800754c:	4906      	ldr	r1, [pc, #24]	; (8007568 <I2C_RequestMemoryRead+0x1cc>)
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f90b 	bl	800776a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	00010002 	.word	0x00010002

0800756c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007584:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007586:	4b4b      	ldr	r3, [pc, #300]	; (80076b4 <I2C_DMAAbort+0x148>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	08db      	lsrs	r3, r3, #3
 800758c:	4a4a      	ldr	r2, [pc, #296]	; (80076b8 <I2C_DMAAbort+0x14c>)
 800758e:	fba2 2303 	umull	r2, r3, r2, r3
 8007592:	0a1a      	lsrs	r2, r3, #8
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	00da      	lsls	r2, r3, #3
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f043 0220 	orr.w	r2, r3, #32
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80075b2:	e00a      	b.n	80075ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c8:	d0ea      	beq.n	80075a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d6:	2200      	movs	r2, #0
 80075d8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	2200      	movs	r2, #0
 80075e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760c:	2200      	movs	r2, #0
 800760e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	2200      	movs	r2, #0
 800761e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0201 	bic.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b60      	cmp	r3, #96	; 0x60
 800763a:	d10e      	bne.n	800765a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2220      	movs	r2, #32
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2200      	movs	r2, #0
 8007650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007652:	6978      	ldr	r0, [r7, #20]
 8007654:	f7fe fca1 	bl	8005f9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007658:	e027      	b.n	80076aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800765a:	7cfb      	ldrb	r3, [r7, #19]
 800765c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007660:	2b28      	cmp	r3, #40	; 0x28
 8007662:	d117      	bne.n	8007694 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007682:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2200      	movs	r2, #0
 8007688:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2228      	movs	r2, #40	; 0x28
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007692:	e007      	b.n	80076a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80076a4:	6978      	ldr	r0, [r7, #20]
 80076a6:	f7fe fc6f 	bl	8005f88 <HAL_I2C_ErrorCallback>
}
 80076aa:	bf00      	nop
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000004 	.word	0x20000004
 80076b8:	14f8b589 	.word	0x14f8b589

080076bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4613      	mov	r3, r2
 80076ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076cc:	e025      	b.n	800771a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d021      	beq.n	800771a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fc f851 	bl	800377c <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d116      	bne.n	800771a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f043 0220 	orr.w	r2, r3, #32
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e023      	b.n	8007762 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	0c1b      	lsrs	r3, r3, #16
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b01      	cmp	r3, #1
 8007722:	d10d      	bne.n	8007740 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	43da      	mvns	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4013      	ands	r3, r2
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	bf0c      	ite	eq
 8007736:	2301      	moveq	r3, #1
 8007738:	2300      	movne	r3, #0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	e00c      	b.n	800775a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	43da      	mvns	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4013      	ands	r3, r2
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	bf0c      	ite	eq
 8007752:	2301      	moveq	r3, #1
 8007754:	2300      	movne	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	429a      	cmp	r2, r3
 800775e:	d0b6      	beq.n	80076ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007778:	e051      	b.n	800781e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007788:	d123      	bne.n	80077d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007798:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	f043 0204 	orr.w	r2, r3, #4
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e046      	b.n	8007860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d021      	beq.n	800781e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077da:	f7fb ffcf 	bl	800377c <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d302      	bcc.n	80077f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d116      	bne.n	800781e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f043 0220 	orr.w	r2, r3, #32
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e020      	b.n	8007860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	0c1b      	lsrs	r3, r3, #16
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	d10c      	bne.n	8007842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	43da      	mvns	r2, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	4013      	ands	r3, r2
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	bf14      	ite	ne
 800783a:	2301      	movne	r3, #1
 800783c:	2300      	moveq	r3, #0
 800783e:	b2db      	uxtb	r3, r3
 8007840:	e00b      	b.n	800785a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	43da      	mvns	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4013      	ands	r3, r2
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	bf14      	ite	ne
 8007854:	2301      	movne	r3, #1
 8007856:	2300      	moveq	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d18d      	bne.n	800777a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007874:	e02d      	b.n	80078d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f900 	bl	8007a7c <I2C_IsAcknowledgeFailed>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e02d      	b.n	80078e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788c:	d021      	beq.n	80078d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800788e:	f7fb ff75 	bl	800377c <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	429a      	cmp	r2, r3
 800789c:	d302      	bcc.n	80078a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d116      	bne.n	80078d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	f043 0220 	orr.w	r2, r3, #32
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e007      	b.n	80078e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078dc:	2b80      	cmp	r3, #128	; 0x80
 80078de:	d1ca      	bne.n	8007876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078f6:	e02d      	b.n	8007954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f8bf 	bl	8007a7c <I2C_IsAcknowledgeFailed>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e02d      	b.n	8007964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d021      	beq.n	8007954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007910:	f7fb ff34 	bl	800377c <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	429a      	cmp	r2, r3
 800791e:	d302      	bcc.n	8007926 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d116      	bne.n	8007954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	f043 0220 	orr.w	r2, r3, #32
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e007      	b.n	8007964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	f003 0304 	and.w	r3, r3, #4
 800795e:	2b04      	cmp	r3, #4
 8007960:	d1ca      	bne.n	80078f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007978:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	08db      	lsrs	r3, r3, #3
 800797e:	4a13      	ldr	r2, [pc, #76]	; (80079cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007980:	fba2 2303 	umull	r2, r3, r2, r3
 8007984:	0a1a      	lsrs	r2, r3, #8
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b01      	subs	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d107      	bne.n	80079aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f043 0220 	orr.w	r2, r3, #32
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e008      	b.n	80079bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b8:	d0e9      	beq.n	800798e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	20000004 	.word	0x20000004
 80079cc:	14f8b589 	.word	0x14f8b589

080079d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079dc:	e042      	b.n	8007a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d119      	bne.n	8007a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f06f 0210 	mvn.w	r2, #16
 80079f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e029      	b.n	8007a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a20:	f7fb feac 	bl	800377c <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d116      	bne.n	8007a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	f043 0220 	orr.w	r2, r3, #32
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e007      	b.n	8007a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6e:	2b40      	cmp	r3, #64	; 0x40
 8007a70:	d1b5      	bne.n	80079de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a92:	d11b      	bne.n	8007acc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	f043 0204 	orr.w	r2, r3, #4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e000      	b.n	8007ace <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bc80      	pop	{r7}
 8007ad6:	4770      	bx	lr

08007ad8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007ae8:	d103      	bne.n	8007af2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007af0:	e007      	b.n	8007b02 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007afa:	d102      	bne.n	8007b02 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2208      	movs	r2, #8
 8007b00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr

08007b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e26c      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 8087 	beq.w	8007c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b2c:	4b92      	ldr	r3, [pc, #584]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f003 030c 	and.w	r3, r3, #12
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d00c      	beq.n	8007b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007b38:	4b8f      	ldr	r3, [pc, #572]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f003 030c 	and.w	r3, r3, #12
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d112      	bne.n	8007b6a <HAL_RCC_OscConfig+0x5e>
 8007b44:	4b8c      	ldr	r3, [pc, #560]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b50:	d10b      	bne.n	8007b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b52:	4b89      	ldr	r3, [pc, #548]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d06c      	beq.n	8007c38 <HAL_RCC_OscConfig+0x12c>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d168      	bne.n	8007c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e246      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b72:	d106      	bne.n	8007b82 <HAL_RCC_OscConfig+0x76>
 8007b74:	4b80      	ldr	r3, [pc, #512]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a7f      	ldr	r2, [pc, #508]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e02e      	b.n	8007be0 <HAL_RCC_OscConfig+0xd4>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10c      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x98>
 8007b8a:	4b7b      	ldr	r3, [pc, #492]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a7a      	ldr	r2, [pc, #488]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	4b78      	ldr	r3, [pc, #480]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a77      	ldr	r2, [pc, #476]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	e01d      	b.n	8007be0 <HAL_RCC_OscConfig+0xd4>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bac:	d10c      	bne.n	8007bc8 <HAL_RCC_OscConfig+0xbc>
 8007bae:	4b72      	ldr	r3, [pc, #456]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a71      	ldr	r2, [pc, #452]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	4b6f      	ldr	r3, [pc, #444]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a6e      	ldr	r2, [pc, #440]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	e00b      	b.n	8007be0 <HAL_RCC_OscConfig+0xd4>
 8007bc8:	4b6b      	ldr	r3, [pc, #428]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a6a      	ldr	r2, [pc, #424]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	4b68      	ldr	r3, [pc, #416]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a67      	ldr	r2, [pc, #412]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d013      	beq.n	8007c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be8:	f7fb fdc8 	bl	800377c <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bf0:	f7fb fdc4 	bl	800377c <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b64      	cmp	r3, #100	; 0x64
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e1fa      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c02:	4b5d      	ldr	r3, [pc, #372]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0xe4>
 8007c0e:	e014      	b.n	8007c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c10:	f7fb fdb4 	bl	800377c <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c18:	f7fb fdb0 	bl	800377c <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b64      	cmp	r3, #100	; 0x64
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e1e6      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c2a:	4b53      	ldr	r3, [pc, #332]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x10c>
 8007c36:	e000      	b.n	8007c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d063      	beq.n	8007d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c46:	4b4c      	ldr	r3, [pc, #304]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f003 030c 	and.w	r3, r3, #12
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007c52:	4b49      	ldr	r3, [pc, #292]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f003 030c 	and.w	r3, r3, #12
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d11c      	bne.n	8007c98 <HAL_RCC_OscConfig+0x18c>
 8007c5e:	4b46      	ldr	r3, [pc, #280]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d116      	bne.n	8007c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c6a:	4b43      	ldr	r3, [pc, #268]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_RCC_OscConfig+0x176>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d001      	beq.n	8007c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e1ba      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c82:	4b3d      	ldr	r3, [pc, #244]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	4939      	ldr	r1, [pc, #228]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c96:	e03a      	b.n	8007d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d020      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ca0:	4b36      	ldr	r3, [pc, #216]	; (8007d7c <HAL_RCC_OscConfig+0x270>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ca6:	f7fb fd69 	bl	800377c <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cae:	f7fb fd65 	bl	800377c <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e19b      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cc0:	4b2d      	ldr	r3, [pc, #180]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0f0      	beq.n	8007cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ccc:	4b2a      	ldr	r3, [pc, #168]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	4927      	ldr	r1, [pc, #156]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	600b      	str	r3, [r1, #0]
 8007ce0:	e015      	b.n	8007d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ce2:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <HAL_RCC_OscConfig+0x270>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce8:	f7fb fd48 	bl	800377c <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf0:	f7fb fd44 	bl	800377c <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e17a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d02:	4b1d      	ldr	r3, [pc, #116]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f0      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d03a      	beq.n	8007d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d019      	beq.n	8007d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d22:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <HAL_RCC_OscConfig+0x274>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d28:	f7fb fd28 	bl	800377c <HAL_GetTick>
 8007d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d2e:	e008      	b.n	8007d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d30:	f7fb fd24 	bl	800377c <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e15a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d42:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <HAL_RCC_OscConfig+0x26c>)
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f0      	beq.n	8007d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007d4e:	2001      	movs	r0, #1
 8007d50:	f000 fad8 	bl	8008304 <RCC_Delay>
 8007d54:	e01c      	b.n	8007d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d56:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <HAL_RCC_OscConfig+0x274>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d5c:	f7fb fd0e 	bl	800377c <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d62:	e00f      	b.n	8007d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d64:	f7fb fd0a 	bl	800377c <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d908      	bls.n	8007d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e140      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
 8007d76:	bf00      	nop
 8007d78:	40021000 	.word	0x40021000
 8007d7c:	42420000 	.word	0x42420000
 8007d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d84:	4b9e      	ldr	r3, [pc, #632]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e9      	bne.n	8007d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 80a6 	beq.w	8007eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007da2:	4b97      	ldr	r3, [pc, #604]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10d      	bne.n	8007dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dae:	4b94      	ldr	r3, [pc, #592]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	4a93      	ldr	r2, [pc, #588]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db8:	61d3      	str	r3, [r2, #28]
 8007dba:	4b91      	ldr	r3, [pc, #580]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc2:	60bb      	str	r3, [r7, #8]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dca:	4b8e      	ldr	r3, [pc, #568]	; (8008004 <HAL_RCC_OscConfig+0x4f8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d118      	bne.n	8007e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dd6:	4b8b      	ldr	r3, [pc, #556]	; (8008004 <HAL_RCC_OscConfig+0x4f8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a8a      	ldr	r2, [pc, #552]	; (8008004 <HAL_RCC_OscConfig+0x4f8>)
 8007ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007de2:	f7fb fccb 	bl	800377c <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dea:	f7fb fcc7 	bl	800377c <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b64      	cmp	r3, #100	; 0x64
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e0fd      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dfc:	4b81      	ldr	r3, [pc, #516]	; (8008004 <HAL_RCC_OscConfig+0x4f8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f0      	beq.n	8007dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d106      	bne.n	8007e1e <HAL_RCC_OscConfig+0x312>
 8007e10:	4b7b      	ldr	r3, [pc, #492]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	4a7a      	ldr	r2, [pc, #488]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	6213      	str	r3, [r2, #32]
 8007e1c:	e02d      	b.n	8007e7a <HAL_RCC_OscConfig+0x36e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10c      	bne.n	8007e40 <HAL_RCC_OscConfig+0x334>
 8007e26:	4b76      	ldr	r3, [pc, #472]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	4a75      	ldr	r2, [pc, #468]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e2c:	f023 0301 	bic.w	r3, r3, #1
 8007e30:	6213      	str	r3, [r2, #32]
 8007e32:	4b73      	ldr	r3, [pc, #460]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	4a72      	ldr	r2, [pc, #456]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e38:	f023 0304 	bic.w	r3, r3, #4
 8007e3c:	6213      	str	r3, [r2, #32]
 8007e3e:	e01c      	b.n	8007e7a <HAL_RCC_OscConfig+0x36e>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	2b05      	cmp	r3, #5
 8007e46:	d10c      	bne.n	8007e62 <HAL_RCC_OscConfig+0x356>
 8007e48:	4b6d      	ldr	r3, [pc, #436]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	4a6c      	ldr	r2, [pc, #432]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e4e:	f043 0304 	orr.w	r3, r3, #4
 8007e52:	6213      	str	r3, [r2, #32]
 8007e54:	4b6a      	ldr	r3, [pc, #424]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	4a69      	ldr	r2, [pc, #420]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	6213      	str	r3, [r2, #32]
 8007e60:	e00b      	b.n	8007e7a <HAL_RCC_OscConfig+0x36e>
 8007e62:	4b67      	ldr	r3, [pc, #412]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	4a66      	ldr	r2, [pc, #408]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e68:	f023 0301 	bic.w	r3, r3, #1
 8007e6c:	6213      	str	r3, [r2, #32]
 8007e6e:	4b64      	ldr	r3, [pc, #400]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	4a63      	ldr	r2, [pc, #396]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007e74:	f023 0304 	bic.w	r3, r3, #4
 8007e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d015      	beq.n	8007eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e82:	f7fb fc7b 	bl	800377c <HAL_GetTick>
 8007e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e88:	e00a      	b.n	8007ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e8a:	f7fb fc77 	bl	800377c <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d901      	bls.n	8007ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e0ab      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea0:	4b57      	ldr	r3, [pc, #348]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0ee      	beq.n	8007e8a <HAL_RCC_OscConfig+0x37e>
 8007eac:	e014      	b.n	8007ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eae:	f7fb fc65 	bl	800377c <HAL_GetTick>
 8007eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eb4:	e00a      	b.n	8007ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eb6:	f7fb fc61 	bl	800377c <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e095      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ecc:	4b4c      	ldr	r3, [pc, #304]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1ee      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d105      	bne.n	8007eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ede:	4b48      	ldr	r3, [pc, #288]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	4a47      	ldr	r2, [pc, #284]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 8081 	beq.w	8007ff6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ef4:	4b42      	ldr	r3, [pc, #264]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f003 030c 	and.w	r3, r3, #12
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d061      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d146      	bne.n	8007f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f08:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <HAL_RCC_OscConfig+0x4fc>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f0e:	f7fb fc35 	bl	800377c <HAL_GetTick>
 8007f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f14:	e008      	b.n	8007f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f16:	f7fb fc31 	bl	800377c <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d901      	bls.n	8007f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e067      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f28:	4b35      	ldr	r3, [pc, #212]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1f0      	bne.n	8007f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3c:	d108      	bne.n	8007f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007f3e:	4b30      	ldr	r3, [pc, #192]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	492d      	ldr	r1, [pc, #180]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f50:	4b2b      	ldr	r3, [pc, #172]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a19      	ldr	r1, [r3, #32]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	430b      	orrs	r3, r1
 8007f62:	4927      	ldr	r1, [pc, #156]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f68:	4b27      	ldr	r3, [pc, #156]	; (8008008 <HAL_RCC_OscConfig+0x4fc>)
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f6e:	f7fb fc05 	bl	800377c <HAL_GetTick>
 8007f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f74:	e008      	b.n	8007f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f76:	f7fb fc01 	bl	800377c <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e037      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f88:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0f0      	beq.n	8007f76 <HAL_RCC_OscConfig+0x46a>
 8007f94:	e02f      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f96:	4b1c      	ldr	r3, [pc, #112]	; (8008008 <HAL_RCC_OscConfig+0x4fc>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f9c:	f7fb fbee 	bl	800377c <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fa2:	e008      	b.n	8007fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fa4:	f7fb fbea 	bl	800377c <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e020      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fb6:	4b12      	ldr	r3, [pc, #72]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f0      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x498>
 8007fc2:	e018      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e013      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <HAL_RCC_OscConfig+0x4f4>)
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d106      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d001      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40021000 	.word	0x40021000
 8008004:	40007000 	.word	0x40007000
 8008008:	42420060 	.word	0x42420060

0800800c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e0d0      	b.n	80081c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008020:	4b6a      	ldr	r3, [pc, #424]	; (80081cc <HAL_RCC_ClockConfig+0x1c0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d910      	bls.n	8008050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800802e:	4b67      	ldr	r3, [pc, #412]	; (80081cc <HAL_RCC_ClockConfig+0x1c0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f023 0207 	bic.w	r2, r3, #7
 8008036:	4965      	ldr	r1, [pc, #404]	; (80081cc <HAL_RCC_ClockConfig+0x1c0>)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	4313      	orrs	r3, r2
 800803c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800803e:	4b63      	ldr	r3, [pc, #396]	; (80081cc <HAL_RCC_ClockConfig+0x1c0>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d001      	beq.n	8008050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0b8      	b.n	80081c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d020      	beq.n	800809e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008068:	4b59      	ldr	r3, [pc, #356]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	4a58      	ldr	r2, [pc, #352]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 800806e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0308 	and.w	r3, r3, #8
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008080:	4b53      	ldr	r3, [pc, #332]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	4a52      	ldr	r2, [pc, #328]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800808a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800808c:	4b50      	ldr	r3, [pc, #320]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	494d      	ldr	r1, [pc, #308]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 800809a:	4313      	orrs	r3, r2
 800809c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d040      	beq.n	800812c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d107      	bne.n	80080c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080b2:	4b47      	ldr	r3, [pc, #284]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d115      	bne.n	80080ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e07f      	b.n	80081c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d107      	bne.n	80080da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ca:	4b41      	ldr	r3, [pc, #260]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d109      	bne.n	80080ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e073      	b.n	80081c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080da:	4b3d      	ldr	r3, [pc, #244]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e06b      	b.n	80081c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ea:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f023 0203 	bic.w	r2, r3, #3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	4936      	ldr	r1, [pc, #216]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080fc:	f7fb fb3e 	bl	800377c <HAL_GetTick>
 8008100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008102:	e00a      	b.n	800811a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008104:	f7fb fb3a 	bl	800377c <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008112:	4293      	cmp	r3, r2
 8008114:	d901      	bls.n	800811a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e053      	b.n	80081c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800811a:	4b2d      	ldr	r3, [pc, #180]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f003 020c 	and.w	r2, r3, #12
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	429a      	cmp	r2, r3
 800812a:	d1eb      	bne.n	8008104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800812c:	4b27      	ldr	r3, [pc, #156]	; (80081cc <HAL_RCC_ClockConfig+0x1c0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d210      	bcs.n	800815c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800813a:	4b24      	ldr	r3, [pc, #144]	; (80081cc <HAL_RCC_ClockConfig+0x1c0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f023 0207 	bic.w	r2, r3, #7
 8008142:	4922      	ldr	r1, [pc, #136]	; (80081cc <HAL_RCC_ClockConfig+0x1c0>)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	4313      	orrs	r3, r2
 8008148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800814a:	4b20      	ldr	r3, [pc, #128]	; (80081cc <HAL_RCC_ClockConfig+0x1c0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d001      	beq.n	800815c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e032      	b.n	80081c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008168:	4b19      	ldr	r3, [pc, #100]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	4916      	ldr	r1, [pc, #88]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008176:	4313      	orrs	r3, r2
 8008178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008186:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	490e      	ldr	r1, [pc, #56]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008196:	4313      	orrs	r3, r2
 8008198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800819a:	f000 f821 	bl	80081e0 <HAL_RCC_GetSysClockFreq>
 800819e:	4602      	mov	r2, r0
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <HAL_RCC_ClockConfig+0x1c4>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	091b      	lsrs	r3, r3, #4
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	490a      	ldr	r1, [pc, #40]	; (80081d4 <HAL_RCC_ClockConfig+0x1c8>)
 80081ac:	5ccb      	ldrb	r3, [r1, r3]
 80081ae:	fa22 f303 	lsr.w	r3, r2, r3
 80081b2:	4a09      	ldr	r2, [pc, #36]	; (80081d8 <HAL_RCC_ClockConfig+0x1cc>)
 80081b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80081b6:	4b09      	ldr	r3, [pc, #36]	; (80081dc <HAL_RCC_ClockConfig+0x1d0>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fb fa9c 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	40022000 	.word	0x40022000
 80081d0:	40021000 	.word	0x40021000
 80081d4:	0800e8e8 	.word	0x0800e8e8
 80081d8:	20000004 	.word	0x20000004
 80081dc:	20000008 	.word	0x20000008

080081e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081e0:	b490      	push	{r4, r7}
 80081e2:	b08a      	sub	sp, #40	; 0x28
 80081e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80081e6:	4b2a      	ldr	r3, [pc, #168]	; (8008290 <HAL_RCC_GetSysClockFreq+0xb0>)
 80081e8:	1d3c      	adds	r4, r7, #4
 80081ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80081f0:	f240 2301 	movw	r3, #513	; 0x201
 80081f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	61fb      	str	r3, [r7, #28]
 80081fa:	2300      	movs	r3, #0
 80081fc:	61bb      	str	r3, [r7, #24]
 80081fe:	2300      	movs	r3, #0
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800820a:	4b22      	ldr	r3, [pc, #136]	; (8008294 <HAL_RCC_GetSysClockFreq+0xb4>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f003 030c 	and.w	r3, r3, #12
 8008216:	2b04      	cmp	r3, #4
 8008218:	d002      	beq.n	8008220 <HAL_RCC_GetSysClockFreq+0x40>
 800821a:	2b08      	cmp	r3, #8
 800821c:	d003      	beq.n	8008226 <HAL_RCC_GetSysClockFreq+0x46>
 800821e:	e02d      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008220:	4b1d      	ldr	r3, [pc, #116]	; (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008222:	623b      	str	r3, [r7, #32]
      break;
 8008224:	e02d      	b.n	8008282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	0c9b      	lsrs	r3, r3, #18
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008232:	4413      	add	r3, r2
 8008234:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008238:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d013      	beq.n	800826c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008244:	4b13      	ldr	r3, [pc, #76]	; (8008294 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	0c5b      	lsrs	r3, r3, #17
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008252:	4413      	add	r3, r2
 8008254:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008258:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	4a0e      	ldr	r2, [pc, #56]	; (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800825e:	fb02 f203 	mul.w	r2, r2, r3
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	fbb2 f3f3 	udiv	r3, r2, r3
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
 800826a:	e004      	b.n	8008276 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	4a0b      	ldr	r2, [pc, #44]	; (800829c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008270:	fb02 f303 	mul.w	r3, r2, r3
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	623b      	str	r3, [r7, #32]
      break;
 800827a:	e002      	b.n	8008282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800827e:	623b      	str	r3, [r7, #32]
      break;
 8008280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008282:	6a3b      	ldr	r3, [r7, #32]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3728      	adds	r7, #40	; 0x28
 8008288:	46bd      	mov	sp, r7
 800828a:	bc90      	pop	{r4, r7}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	0800e890 	.word	0x0800e890
 8008294:	40021000 	.word	0x40021000
 8008298:	007a1200 	.word	0x007a1200
 800829c:	003d0900 	.word	0x003d0900

080082a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80082a6:	681b      	ldr	r3, [r3, #0]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bc80      	pop	{r7}
 80082ae:	4770      	bx	lr
 80082b0:	20000004 	.word	0x20000004

080082b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082b8:	f7ff fff2 	bl	80082a0 <HAL_RCC_GetHCLKFreq>
 80082bc:	4602      	mov	r2, r0
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	4903      	ldr	r1, [pc, #12]	; (80082d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082ca:	5ccb      	ldrb	r3, [r1, r3]
 80082cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40021000 	.word	0x40021000
 80082d8:	0800e8f8 	.word	0x0800e8f8

080082dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082e0:	f7ff ffde 	bl	80082a0 <HAL_RCC_GetHCLKFreq>
 80082e4:	4602      	mov	r2, r0
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	0adb      	lsrs	r3, r3, #11
 80082ec:	f003 0307 	and.w	r3, r3, #7
 80082f0:	4903      	ldr	r1, [pc, #12]	; (8008300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082f2:	5ccb      	ldrb	r3, [r1, r3]
 80082f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	40021000 	.word	0x40021000
 8008300:	0800e8f8 	.word	0x0800e8f8

08008304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <RCC_Delay+0x34>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0a      	ldr	r2, [pc, #40]	; (800833c <RCC_Delay+0x38>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	0a5b      	lsrs	r3, r3, #9
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	fb02 f303 	mul.w	r3, r2, r3
 800831e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008320:	bf00      	nop
  }
  while (Delay --);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1e5a      	subs	r2, r3, #1
 8008326:	60fa      	str	r2, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f9      	bne.n	8008320 <RCC_Delay+0x1c>
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr
 8008338:	20000004 	.word	0x20000004
 800833c:	10624dd3 	.word	0x10624dd3

08008340 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d07d      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800835c:	2300      	movs	r3, #0
 800835e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008360:	4b4f      	ldr	r3, [pc, #316]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10d      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800836c:	4b4c      	ldr	r3, [pc, #304]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	4a4b      	ldr	r2, [pc, #300]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008376:	61d3      	str	r3, [r2, #28]
 8008378:	4b49      	ldr	r3, [pc, #292]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008384:	2301      	movs	r3, #1
 8008386:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008388:	4b46      	ldr	r3, [pc, #280]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008390:	2b00      	cmp	r3, #0
 8008392:	d118      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008394:	4b43      	ldr	r3, [pc, #268]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a42      	ldr	r2, [pc, #264]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800839a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083a0:	f7fb f9ec 	bl	800377c <HAL_GetTick>
 80083a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083a6:	e008      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a8:	f7fb f9e8 	bl	800377c <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	2b64      	cmp	r3, #100	; 0x64
 80083b4:	d901      	bls.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e06d      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ba:	4b3a      	ldr	r3, [pc, #232]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0f0      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083c6:	4b36      	ldr	r3, [pc, #216]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d02e      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d027      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083e4:	4b2e      	ldr	r3, [pc, #184]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083ee:	4b2e      	ldr	r3, [pc, #184]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083f4:	4b2c      	ldr	r3, [pc, #176]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80083fa:	4a29      	ldr	r2, [pc, #164]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d014      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800840a:	f7fb f9b7 	bl	800377c <HAL_GetTick>
 800840e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008410:	e00a      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008412:	f7fb f9b3 	bl	800377c <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008420:	4293      	cmp	r3, r2
 8008422:	d901      	bls.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e036      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008428:	4b1d      	ldr	r3, [pc, #116]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0ee      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008434:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	4917      	ldr	r1, [pc, #92]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008442:	4313      	orrs	r3, r2
 8008444:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d105      	bne.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800844c:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008456:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d008      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008464:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	490b      	ldr	r1, [pc, #44]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008472:	4313      	orrs	r3, r2
 8008474:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	4904      	ldr	r1, [pc, #16]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008490:	4313      	orrs	r3, r2
 8008492:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	40021000 	.word	0x40021000
 80084a4:	40007000 	.word	0x40007000
 80084a8:	42420440 	.word	0x42420440

080084ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e076      	b.n	80085ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d108      	bne.n	80084d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084ce:	d009      	beq.n	80084e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	61da      	str	r2, [r3, #28]
 80084d6:	e005      	b.n	80084e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d106      	bne.n	8008504 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7fa fda8 	bl	8003054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800851a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800855e:	431a      	orrs	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008568:	ea42 0103 	orr.w	r1, r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008570:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	0c1a      	lsrs	r2, r3, #16
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f002 0204 	and.w	r2, r2, #4
 800858a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	69da      	ldr	r2, [r3, #28]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800859a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	4613      	mov	r3, r2
 80085c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d101      	bne.n	80085d6 <HAL_SPI_Transmit+0x22>
 80085d2:	2302      	movs	r3, #2
 80085d4:	e126      	b.n	8008824 <HAL_SPI_Transmit+0x270>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085de:	f7fb f8cd 	bl	800377c <HAL_GetTick>
 80085e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80085e4:	88fb      	ldrh	r3, [r7, #6]
 80085e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d002      	beq.n	80085fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80085f4:	2302      	movs	r3, #2
 80085f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085f8:	e10b      	b.n	8008812 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <HAL_SPI_Transmit+0x52>
 8008600:	88fb      	ldrh	r3, [r7, #6]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	77fb      	strb	r3, [r7, #31]
    goto error;
 800860a:	e102      	b.n	8008812 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2203      	movs	r2, #3
 8008610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	88fa      	ldrh	r2, [r7, #6]
 8008624:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008652:	d10f      	bne.n	8008674 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008662:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008672:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d007      	beq.n	8008692 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800869a:	d14b      	bne.n	8008734 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <HAL_SPI_Transmit+0xf6>
 80086a4:	8afb      	ldrh	r3, [r7, #22]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d13e      	bne.n	8008728 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ae:	881a      	ldrh	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	1c9a      	adds	r2, r3, #2
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80086ce:	e02b      	b.n	8008728 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d112      	bne.n	8008704 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	881a      	ldrh	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	1c9a      	adds	r2, r3, #2
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	3b01      	subs	r3, #1
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	86da      	strh	r2, [r3, #54]	; 0x36
 8008702:	e011      	b.n	8008728 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008704:	f7fb f83a 	bl	800377c <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d803      	bhi.n	800871c <HAL_SPI_Transmit+0x168>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871a:	d102      	bne.n	8008722 <HAL_SPI_Transmit+0x16e>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008726:	e074      	b.n	8008812 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1ce      	bne.n	80086d0 <HAL_SPI_Transmit+0x11c>
 8008732:	e04c      	b.n	80087ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_SPI_Transmit+0x18e>
 800873c:	8afb      	ldrh	r3, [r7, #22]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d140      	bne.n	80087c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	330c      	adds	r3, #12
 800874c:	7812      	ldrb	r2, [r2, #0]
 800874e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800875e:	b29b      	uxth	r3, r3
 8008760:	3b01      	subs	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008768:	e02c      	b.n	80087c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b02      	cmp	r3, #2
 8008776:	d113      	bne.n	80087a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008794:	b29b      	uxth	r3, r3
 8008796:	3b01      	subs	r3, #1
 8008798:	b29a      	uxth	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	86da      	strh	r2, [r3, #54]	; 0x36
 800879e:	e011      	b.n	80087c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087a0:	f7fa ffec 	bl	800377c <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d803      	bhi.n	80087b8 <HAL_SPI_Transmit+0x204>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d102      	bne.n	80087be <HAL_SPI_Transmit+0x20a>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80087c2:	e026      	b.n	8008812 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1cd      	bne.n	800876a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fb64 	bl	8008ea0 <SPI_EndRxTxTransaction>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087ec:	2300      	movs	r3, #0
 80087ee:	613b      	str	r3, [r7, #16]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	77fb      	strb	r3, [r7, #31]
 800880e:	e000      	b.n	8008812 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008810:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008822:	7ffb      	ldrb	r3, [r7, #31]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3720      	adds	r7, #32
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08c      	sub	sp, #48	; 0x30
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800883a:	2301      	movs	r3, #1
 800883c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_SPI_TransmitReceive+0x26>
 800884e:	2302      	movs	r3, #2
 8008850:	e18a      	b.n	8008b68 <HAL_SPI_TransmitReceive+0x33c>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800885a:	f7fa ff8f 	bl	800377c <HAL_GetTick>
 800885e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008870:	887b      	ldrh	r3, [r7, #2]
 8008872:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008878:	2b01      	cmp	r3, #1
 800887a:	d00f      	beq.n	800889c <HAL_SPI_TransmitReceive+0x70>
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008882:	d107      	bne.n	8008894 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d103      	bne.n	8008894 <HAL_SPI_TransmitReceive+0x68>
 800888c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008890:	2b04      	cmp	r3, #4
 8008892:	d003      	beq.n	800889c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008894:	2302      	movs	r3, #2
 8008896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800889a:	e15b      	b.n	8008b54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <HAL_SPI_TransmitReceive+0x82>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <HAL_SPI_TransmitReceive+0x82>
 80088a8:	887b      	ldrh	r3, [r7, #2]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088b4:	e14e      	b.n	8008b54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d003      	beq.n	80088ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2205      	movs	r2, #5
 80088c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	887a      	ldrh	r2, [r7, #2]
 80088da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	887a      	ldrh	r2, [r7, #2]
 80088e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	887a      	ldrh	r2, [r7, #2]
 80088ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	887a      	ldrh	r2, [r7, #2]
 80088f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d007      	beq.n	800891e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800891c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008926:	d178      	bne.n	8008a1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <HAL_SPI_TransmitReceive+0x10a>
 8008930:	8b7b      	ldrh	r3, [r7, #26]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d166      	bne.n	8008a04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	881a      	ldrh	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	1c9a      	adds	r2, r3, #2
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008950:	b29b      	uxth	r3, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800895a:	e053      	b.n	8008a04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b02      	cmp	r3, #2
 8008968:	d11b      	bne.n	80089a2 <HAL_SPI_TransmitReceive+0x176>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800896e:	b29b      	uxth	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d016      	beq.n	80089a2 <HAL_SPI_TransmitReceive+0x176>
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	2b01      	cmp	r3, #1
 8008978:	d113      	bne.n	80089a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	881a      	ldrh	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	1c9a      	adds	r2, r3, #2
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008994:	b29b      	uxth	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	b29a      	uxth	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d119      	bne.n	80089e4 <HAL_SPI_TransmitReceive+0x1b8>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d014      	beq.n	80089e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	b292      	uxth	r2, r2
 80089c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	1c9a      	adds	r2, r3, #2
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089e0:	2301      	movs	r3, #1
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80089e4:	f7fa feca 	bl	800377c <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d807      	bhi.n	8008a04 <HAL_SPI_TransmitReceive+0x1d8>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fa:	d003      	beq.n	8008a04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a02:	e0a7      	b.n	8008b54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1a6      	bne.n	800895c <HAL_SPI_TransmitReceive+0x130>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1a1      	bne.n	800895c <HAL_SPI_TransmitReceive+0x130>
 8008a18:	e07c      	b.n	8008b14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <HAL_SPI_TransmitReceive+0x1fc>
 8008a22:	8b7b      	ldrh	r3, [r7, #26]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d16b      	bne.n	8008b00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	330c      	adds	r3, #12
 8008a32:	7812      	ldrb	r2, [r2, #0]
 8008a34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a4e:	e057      	b.n	8008b00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d11c      	bne.n	8008a98 <HAL_SPI_TransmitReceive+0x26c>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d017      	beq.n	8008a98 <HAL_SPI_TransmitReceive+0x26c>
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d114      	bne.n	8008a98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	330c      	adds	r3, #12
 8008a78:	7812      	ldrb	r2, [r2, #0]
 8008a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d119      	bne.n	8008ada <HAL_SPI_TransmitReceive+0x2ae>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d014      	beq.n	8008ada <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ada:	f7fa fe4f 	bl	800377c <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d803      	bhi.n	8008af2 <HAL_SPI_TransmitReceive+0x2c6>
 8008aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d102      	bne.n	8008af8 <HAL_SPI_TransmitReceive+0x2cc>
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d103      	bne.n	8008b00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008afe:	e029      	b.n	8008b54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1a2      	bne.n	8008a50 <HAL_SPI_TransmitReceive+0x224>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d19d      	bne.n	8008a50 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f9c1 	bl	8008ea0 <SPI_EndRxTxTransaction>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b30:	e010      	b.n	8008b54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10b      	bne.n	8008b52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	e000      	b.n	8008b54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008b52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3730      	adds	r7, #48	; 0x30
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	099b      	lsrs	r3, r3, #6
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10f      	bne.n	8008bb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	099b      	lsrs	r3, r3, #6
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	4798      	blx	r3
    return;
 8008bb2:	e0be      	b.n	8008d32 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	085b      	lsrs	r3, r3, #1
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <HAL_SPI_IRQHandler+0x66>
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	09db      	lsrs	r3, r3, #7
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	4798      	blx	r3
    return;
 8008bd4:	e0ad      	b.n	8008d32 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d106      	bne.n	8008bf0 <HAL_SPI_IRQHandler+0x80>
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	099b      	lsrs	r3, r3, #6
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 80a1 	beq.w	8008d32 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	095b      	lsrs	r3, r3, #5
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 809a 	beq.w	8008d32 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	099b      	lsrs	r3, r3, #6
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d023      	beq.n	8008c52 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d011      	beq.n	8008c3a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1a:	f043 0204 	orr.w	r2, r3, #4
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c22:	2300      	movs	r3, #0
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	e00b      	b.n	8008c52 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	613b      	str	r3, [r7, #16]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	613b      	str	r3, [r7, #16]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	693b      	ldr	r3, [r7, #16]
        return;
 8008c50:	e06f      	b.n	8008d32 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	095b      	lsrs	r3, r3, #5
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d014      	beq.n	8008c88 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c62:	f043 0201 	orr.w	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d04f      	beq.n	8008d30 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c9e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <HAL_SPI_IRQHandler+0x14c>
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d034      	beq.n	8008d26 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f022 0203 	bic.w	r2, r2, #3
 8008cca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d011      	beq.n	8008cf8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd8:	4a17      	ldr	r2, [pc, #92]	; (8008d38 <HAL_SPI_IRQHandler+0x1c8>)
 8008cda:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fb fed3 	bl	8004a8c <HAL_DMA_Abort_IT>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d016      	beq.n	8008d2e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d04:	4a0c      	ldr	r2, [pc, #48]	; (8008d38 <HAL_SPI_IRQHandler+0x1c8>)
 8008d06:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fb febd 	bl	8004a8c <HAL_DMA_Abort_IT>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008d24:	e003      	b.n	8008d2e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f808 	bl	8008d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008d2c:	e000      	b.n	8008d30 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8008d2e:	bf00      	nop
    return;
 8008d30:	bf00      	nop
  }
}
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	08008d69 	.word	0x08008d69

08008d3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr

08008d4e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d5c:	b2db      	uxtb	r3, r3
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f7ff ffda 	bl	8008d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d88:	bf00      	nop
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008da0:	f7fa fcec 	bl	800377c <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	4413      	add	r3, r2
 8008dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008db0:	f7fa fce4 	bl	800377c <HAL_GetTick>
 8008db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008db6:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	015b      	lsls	r3, r3, #5
 8008dbc:	0d1b      	lsrs	r3, r3, #20
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	fb02 f303 	mul.w	r3, r2, r3
 8008dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dc6:	e054      	b.n	8008e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d050      	beq.n	8008e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dd0:	f7fa fcd4 	bl	800377c <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d902      	bls.n	8008de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d13d      	bne.n	8008e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dfe:	d111      	bne.n	8008e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e08:	d004      	beq.n	8008e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e12:	d107      	bne.n	8008e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e2c:	d10f      	bne.n	8008e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e017      	b.n	8008e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	bf0c      	ite	eq
 8008e82:	2301      	moveq	r3, #1
 8008e84:	2300      	movne	r3, #0
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	461a      	mov	r2, r3
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d19b      	bne.n	8008dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000004 	.word	0x20000004

08008ea0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2180      	movs	r1, #128	; 0x80
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f7ff ff6a 	bl	8008d90 <SPI_WaitFlagStateUntilTimeout>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d007      	beq.n	8008ed2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec6:	f043 0220 	orr.w	r2, r3, #32
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e000      	b.n	8008ed4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e041      	b.n	8008f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7fa f908 	bl	8003118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f000 fc6c 	bl	80097f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d001      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e03a      	b.n	800900a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 0201 	orr.w	r2, r2, #1
 8008faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a18      	ldr	r2, [pc, #96]	; (8009014 <HAL_TIM_Base_Start_IT+0x98>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00e      	beq.n	8008fd4 <HAL_TIM_Base_Start_IT+0x58>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fbe:	d009      	beq.n	8008fd4 <HAL_TIM_Base_Start_IT+0x58>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a14      	ldr	r2, [pc, #80]	; (8009018 <HAL_TIM_Base_Start_IT+0x9c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d004      	beq.n	8008fd4 <HAL_TIM_Base_Start_IT+0x58>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a13      	ldr	r2, [pc, #76]	; (800901c <HAL_TIM_Base_Start_IT+0xa0>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d111      	bne.n	8008ff8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b06      	cmp	r3, #6
 8008fe4:	d010      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0201 	orr.w	r2, r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff6:	e007      	b.n	8009008 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0201 	orr.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	bc80      	pop	{r7}
 8009012:	4770      	bx	lr
 8009014:	40012c00 	.word	0x40012c00
 8009018:	40000400 	.word	0x40000400
 800901c:	40000800 	.word	0x40000800

08009020 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e041      	b.n	80090b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f839 	bl	80090be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3304      	adds	r3, #4
 800905c:	4619      	mov	r1, r3
 800905e:	4610      	mov	r0, r2
 8009060:	f000 fbca 	bl	80097f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d104      	bne.n	80090ea <HAL_TIM_IC_Start_IT+0x1a>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	e013      	b.n	8009112 <HAL_TIM_IC_Start_IT+0x42>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d104      	bne.n	80090fa <HAL_TIM_IC_Start_IT+0x2a>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	e00b      	b.n	8009112 <HAL_TIM_IC_Start_IT+0x42>
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b08      	cmp	r3, #8
 80090fe:	d104      	bne.n	800910a <HAL_TIM_IC_Start_IT+0x3a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009106:	b2db      	uxtb	r3, r3
 8009108:	e003      	b.n	8009112 <HAL_TIM_IC_Start_IT+0x42>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009110:	b2db      	uxtb	r3, r3
 8009112:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d104      	bne.n	8009124 <HAL_TIM_IC_Start_IT+0x54>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009120:	b2db      	uxtb	r3, r3
 8009122:	e013      	b.n	800914c <HAL_TIM_IC_Start_IT+0x7c>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b04      	cmp	r3, #4
 8009128:	d104      	bne.n	8009134 <HAL_TIM_IC_Start_IT+0x64>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009130:	b2db      	uxtb	r3, r3
 8009132:	e00b      	b.n	800914c <HAL_TIM_IC_Start_IT+0x7c>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b08      	cmp	r3, #8
 8009138:	d104      	bne.n	8009144 <HAL_TIM_IC_Start_IT+0x74>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009140:	b2db      	uxtb	r3, r3
 8009142:	e003      	b.n	800914c <HAL_TIM_IC_Start_IT+0x7c>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800914a:	b2db      	uxtb	r3, r3
 800914c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d102      	bne.n	800915a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d001      	beq.n	800915e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e0b3      	b.n	80092c6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <HAL_TIM_IC_Start_IT+0x9e>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2202      	movs	r2, #2
 8009168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800916c:	e013      	b.n	8009196 <HAL_TIM_IC_Start_IT+0xc6>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2b04      	cmp	r3, #4
 8009172:	d104      	bne.n	800917e <HAL_TIM_IC_Start_IT+0xae>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800917c:	e00b      	b.n	8009196 <HAL_TIM_IC_Start_IT+0xc6>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b08      	cmp	r3, #8
 8009182:	d104      	bne.n	800918e <HAL_TIM_IC_Start_IT+0xbe>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800918c:	e003      	b.n	8009196 <HAL_TIM_IC_Start_IT+0xc6>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2202      	movs	r2, #2
 8009192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <HAL_TIM_IC_Start_IT+0xd6>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091a4:	e013      	b.n	80091ce <HAL_TIM_IC_Start_IT+0xfe>
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b04      	cmp	r3, #4
 80091aa:	d104      	bne.n	80091b6 <HAL_TIM_IC_Start_IT+0xe6>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091b4:	e00b      	b.n	80091ce <HAL_TIM_IC_Start_IT+0xfe>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	d104      	bne.n	80091c6 <HAL_TIM_IC_Start_IT+0xf6>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091c4:	e003      	b.n	80091ce <HAL_TIM_IC_Start_IT+0xfe>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2202      	movs	r2, #2
 80091ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b0c      	cmp	r3, #12
 80091d2:	d841      	bhi.n	8009258 <HAL_TIM_IC_Start_IT+0x188>
 80091d4:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <HAL_TIM_IC_Start_IT+0x10c>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	08009211 	.word	0x08009211
 80091e0:	08009259 	.word	0x08009259
 80091e4:	08009259 	.word	0x08009259
 80091e8:	08009259 	.word	0x08009259
 80091ec:	08009223 	.word	0x08009223
 80091f0:	08009259 	.word	0x08009259
 80091f4:	08009259 	.word	0x08009259
 80091f8:	08009259 	.word	0x08009259
 80091fc:	08009235 	.word	0x08009235
 8009200:	08009259 	.word	0x08009259
 8009204:	08009259 	.word	0x08009259
 8009208:	08009259 	.word	0x08009259
 800920c:	08009247 	.word	0x08009247
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0202 	orr.w	r2, r2, #2
 800921e:	60da      	str	r2, [r3, #12]
      break;
 8009220:	e01b      	b.n	800925a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f042 0204 	orr.w	r2, r2, #4
 8009230:	60da      	str	r2, [r3, #12]
      break;
 8009232:	e012      	b.n	800925a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0208 	orr.w	r2, r2, #8
 8009242:	60da      	str	r2, [r3, #12]
      break;
 8009244:	e009      	b.n	800925a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0210 	orr.w	r2, r2, #16
 8009254:	60da      	str	r2, [r3, #12]
      break;
 8009256:	e000      	b.n	800925a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8009258:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2201      	movs	r2, #1
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fccd 	bl	8009c02 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a18      	ldr	r2, [pc, #96]	; (80092d0 <HAL_TIM_IC_Start_IT+0x200>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d00e      	beq.n	8009290 <HAL_TIM_IC_Start_IT+0x1c0>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800927a:	d009      	beq.n	8009290 <HAL_TIM_IC_Start_IT+0x1c0>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a14      	ldr	r2, [pc, #80]	; (80092d4 <HAL_TIM_IC_Start_IT+0x204>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d004      	beq.n	8009290 <HAL_TIM_IC_Start_IT+0x1c0>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a13      	ldr	r2, [pc, #76]	; (80092d8 <HAL_TIM_IC_Start_IT+0x208>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d111      	bne.n	80092b4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d010      	beq.n	80092c4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0201 	orr.w	r2, r2, #1
 80092b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092b2:	e007      	b.n	80092c4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	40012c00 	.word	0x40012c00
 80092d4:	40000400 	.word	0x40000400
 80092d8:	40000800 	.word	0x40000800

080092dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d122      	bne.n	8009338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d11b      	bne.n	8009338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f06f 0202 	mvn.w	r2, #2
 8009308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa4e 	bl	80097c0 <HAL_TIM_IC_CaptureCallback>
 8009324:	e005      	b.n	8009332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa41 	bl	80097ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fa50 	bl	80097d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0304 	and.w	r3, r3, #4
 8009342:	2b04      	cmp	r3, #4
 8009344:	d122      	bne.n	800938c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b04      	cmp	r3, #4
 8009352:	d11b      	bne.n	800938c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0204 	mvn.w	r2, #4
 800935c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2202      	movs	r2, #2
 8009362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa24 	bl	80097c0 <HAL_TIM_IC_CaptureCallback>
 8009378:	e005      	b.n	8009386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa17 	bl	80097ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fa26 	bl	80097d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0308 	and.w	r3, r3, #8
 8009396:	2b08      	cmp	r3, #8
 8009398:	d122      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d11b      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0208 	mvn.w	r2, #8
 80093b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2204      	movs	r2, #4
 80093b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9fa 	bl	80097c0 <HAL_TIM_IC_CaptureCallback>
 80093cc:	e005      	b.n	80093da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f9ed 	bl	80097ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f9fc 	bl	80097d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0310 	and.w	r3, r3, #16
 80093ea:	2b10      	cmp	r3, #16
 80093ec:	d122      	bne.n	8009434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d11b      	bne.n	8009434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0210 	mvn.w	r2, #16
 8009404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2208      	movs	r2, #8
 800940a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f9d0 	bl	80097c0 <HAL_TIM_IC_CaptureCallback>
 8009420:	e005      	b.n	800942e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f9c3 	bl	80097ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9d2 	bl	80097d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b01      	cmp	r3, #1
 8009440:	d10e      	bne.n	8009460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b01      	cmp	r3, #1
 800944e:	d107      	bne.n	8009460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0201 	mvn.w	r2, #1
 8009458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f99e 	bl	800979c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946a:	2b80      	cmp	r3, #128	; 0x80
 800946c:	d10e      	bne.n	800948c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009478:	2b80      	cmp	r3, #128	; 0x80
 800947a:	d107      	bne.n	800948c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fc47 	bl	8009d1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009496:	2b40      	cmp	r3, #64	; 0x40
 8009498:	d10e      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a4:	2b40      	cmp	r3, #64	; 0x40
 80094a6:	d107      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f996 	bl	80097e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d10e      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	d107      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f06f 0220 	mvn.w	r2, #32
 80094dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fc12 	bl	8009d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009502:	2302      	movs	r3, #2
 8009504:	e082      	b.n	800960c <HAL_TIM_IC_ConfigChannel+0x120>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d11b      	bne.n	800954c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6819      	ldr	r1, [r3, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	f000 f9ca 	bl	80098bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 020c 	bic.w	r2, r2, #12
 8009536:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6999      	ldr	r1, [r3, #24]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	619a      	str	r2, [r3, #24]
 800954a:	e05a      	b.n	8009602 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b04      	cmp	r3, #4
 8009550:	d11c      	bne.n	800958c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6819      	ldr	r1, [r3, #0]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f000 fa33 	bl	80099cc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	699a      	ldr	r2, [r3, #24]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009574:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6999      	ldr	r1, [r3, #24]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	021a      	lsls	r2, r3, #8
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	619a      	str	r2, [r3, #24]
 800958a:	e03a      	b.n	8009602 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b08      	cmp	r3, #8
 8009590:	d11b      	bne.n	80095ca <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	6819      	ldr	r1, [r3, #0]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f000 fa7e 	bl	8009aa2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69da      	ldr	r2, [r3, #28]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 020c 	bic.w	r2, r2, #12
 80095b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	69d9      	ldr	r1, [r3, #28]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	61da      	str	r2, [r3, #28]
 80095c8:	e01b      	b.n	8009602 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6819      	ldr	r1, [r3, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f000 fa9d 	bl	8009b18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69da      	ldr	r2, [r3, #28]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80095ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69d9      	ldr	r1, [r3, #28]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	021a      	lsls	r2, r3, #8
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <HAL_TIM_ConfigClockSource+0x18>
 8009628:	2302      	movs	r3, #2
 800962a:	e0b3      	b.n	8009794 <HAL_TIM_ConfigClockSource+0x180>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800964a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009652:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009664:	d03e      	beq.n	80096e4 <HAL_TIM_ConfigClockSource+0xd0>
 8009666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800966a:	f200 8087 	bhi.w	800977c <HAL_TIM_ConfigClockSource+0x168>
 800966e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009672:	f000 8085 	beq.w	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 8009676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967a:	d87f      	bhi.n	800977c <HAL_TIM_ConfigClockSource+0x168>
 800967c:	2b70      	cmp	r3, #112	; 0x70
 800967e:	d01a      	beq.n	80096b6 <HAL_TIM_ConfigClockSource+0xa2>
 8009680:	2b70      	cmp	r3, #112	; 0x70
 8009682:	d87b      	bhi.n	800977c <HAL_TIM_ConfigClockSource+0x168>
 8009684:	2b60      	cmp	r3, #96	; 0x60
 8009686:	d050      	beq.n	800972a <HAL_TIM_ConfigClockSource+0x116>
 8009688:	2b60      	cmp	r3, #96	; 0x60
 800968a:	d877      	bhi.n	800977c <HAL_TIM_ConfigClockSource+0x168>
 800968c:	2b50      	cmp	r3, #80	; 0x50
 800968e:	d03c      	beq.n	800970a <HAL_TIM_ConfigClockSource+0xf6>
 8009690:	2b50      	cmp	r3, #80	; 0x50
 8009692:	d873      	bhi.n	800977c <HAL_TIM_ConfigClockSource+0x168>
 8009694:	2b40      	cmp	r3, #64	; 0x40
 8009696:	d058      	beq.n	800974a <HAL_TIM_ConfigClockSource+0x136>
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	d86f      	bhi.n	800977c <HAL_TIM_ConfigClockSource+0x168>
 800969c:	2b30      	cmp	r3, #48	; 0x30
 800969e:	d064      	beq.n	800976a <HAL_TIM_ConfigClockSource+0x156>
 80096a0:	2b30      	cmp	r3, #48	; 0x30
 80096a2:	d86b      	bhi.n	800977c <HAL_TIM_ConfigClockSource+0x168>
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	d060      	beq.n	800976a <HAL_TIM_ConfigClockSource+0x156>
 80096a8:	2b20      	cmp	r3, #32
 80096aa:	d867      	bhi.n	800977c <HAL_TIM_ConfigClockSource+0x168>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d05c      	beq.n	800976a <HAL_TIM_ConfigClockSource+0x156>
 80096b0:	2b10      	cmp	r3, #16
 80096b2:	d05a      	beq.n	800976a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80096b4:	e062      	b.n	800977c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6899      	ldr	r1, [r3, #8]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f000 fa7d 	bl	8009bc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	609a      	str	r2, [r3, #8]
      break;
 80096e2:	e04e      	b.n	8009782 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	6899      	ldr	r1, [r3, #8]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f000 fa66 	bl	8009bc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689a      	ldr	r2, [r3, #8]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009706:	609a      	str	r2, [r3, #8]
      break;
 8009708:	e03b      	b.n	8009782 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	6859      	ldr	r1, [r3, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	461a      	mov	r2, r3
 8009718:	f000 f92a 	bl	8009970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2150      	movs	r1, #80	; 0x50
 8009722:	4618      	mov	r0, r3
 8009724:	f000 fa34 	bl	8009b90 <TIM_ITRx_SetConfig>
      break;
 8009728:	e02b      	b.n	8009782 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6818      	ldr	r0, [r3, #0]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	6859      	ldr	r1, [r3, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	461a      	mov	r2, r3
 8009738:	f000 f984 	bl	8009a44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2160      	movs	r1, #96	; 0x60
 8009742:	4618      	mov	r0, r3
 8009744:	f000 fa24 	bl	8009b90 <TIM_ITRx_SetConfig>
      break;
 8009748:	e01b      	b.n	8009782 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6818      	ldr	r0, [r3, #0]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	6859      	ldr	r1, [r3, #4]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	461a      	mov	r2, r3
 8009758:	f000 f90a 	bl	8009970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2140      	movs	r1, #64	; 0x40
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fa14 	bl	8009b90 <TIM_ITRx_SetConfig>
      break;
 8009768:	e00b      	b.n	8009782 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f000 fa0b 	bl	8009b90 <TIM_ITRx_SetConfig>
        break;
 800977a:	e002      	b.n	8009782 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800977c:	bf00      	nop
 800977e:	e000      	b.n	8009782 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009780:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bc80      	pop	{r7}
 80097ac:	4770      	bx	lr

080097ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097b6:	bf00      	nop
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr

080097c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bc80      	pop	{r7}
 80097d0:	4770      	bx	lr

080097d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	bc80      	pop	{r7}
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bc80      	pop	{r7}
 80097f4:	4770      	bx	lr
	...

080097f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a29      	ldr	r2, [pc, #164]	; (80098b0 <TIM_Base_SetConfig+0xb8>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d00b      	beq.n	8009828 <TIM_Base_SetConfig+0x30>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009816:	d007      	beq.n	8009828 <TIM_Base_SetConfig+0x30>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a26      	ldr	r2, [pc, #152]	; (80098b4 <TIM_Base_SetConfig+0xbc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d003      	beq.n	8009828 <TIM_Base_SetConfig+0x30>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a25      	ldr	r2, [pc, #148]	; (80098b8 <TIM_Base_SetConfig+0xc0>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d108      	bne.n	800983a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a1c      	ldr	r2, [pc, #112]	; (80098b0 <TIM_Base_SetConfig+0xb8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00b      	beq.n	800985a <TIM_Base_SetConfig+0x62>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009848:	d007      	beq.n	800985a <TIM_Base_SetConfig+0x62>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a19      	ldr	r2, [pc, #100]	; (80098b4 <TIM_Base_SetConfig+0xbc>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d003      	beq.n	800985a <TIM_Base_SetConfig+0x62>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a18      	ldr	r2, [pc, #96]	; (80098b8 <TIM_Base_SetConfig+0xc0>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d108      	bne.n	800986c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a07      	ldr	r2, [pc, #28]	; (80098b0 <TIM_Base_SetConfig+0xb8>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d103      	bne.n	80098a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	615a      	str	r2, [r3, #20]
}
 80098a6:	bf00      	nop
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bc80      	pop	{r7}
 80098ae:	4770      	bx	lr
 80098b0:	40012c00 	.word	0x40012c00
 80098b4:	40000400 	.word	0x40000400
 80098b8:	40000800 	.word	0x40000800

080098bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	f023 0201 	bic.w	r2, r3, #1
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <TIM_TI1_SetConfig+0xa8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00b      	beq.n	8009902 <TIM_TI1_SetConfig+0x46>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f0:	d007      	beq.n	8009902 <TIM_TI1_SetConfig+0x46>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4a1c      	ldr	r2, [pc, #112]	; (8009968 <TIM_TI1_SetConfig+0xac>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d003      	beq.n	8009902 <TIM_TI1_SetConfig+0x46>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4a1b      	ldr	r2, [pc, #108]	; (800996c <TIM_TI1_SetConfig+0xb0>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d101      	bne.n	8009906 <TIM_TI1_SetConfig+0x4a>
 8009902:	2301      	movs	r3, #1
 8009904:	e000      	b.n	8009908 <TIM_TI1_SetConfig+0x4c>
 8009906:	2300      	movs	r3, #0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d008      	beq.n	800991e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f023 0303 	bic.w	r3, r3, #3
 8009912:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4313      	orrs	r3, r2
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	e003      	b.n	8009926 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f043 0301 	orr.w	r3, r3, #1
 8009924:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800992c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	b2db      	uxtb	r3, r3
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	4313      	orrs	r3, r2
 8009938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f023 030a 	bic.w	r3, r3, #10
 8009940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f003 030a 	and.w	r3, r3, #10
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	4313      	orrs	r3, r2
 800994c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	621a      	str	r2, [r3, #32]
}
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	bc80      	pop	{r7}
 8009962:	4770      	bx	lr
 8009964:	40012c00 	.word	0x40012c00
 8009968:	40000400 	.word	0x40000400
 800996c:	40000800 	.word	0x40000800

08009970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	f023 0201 	bic.w	r2, r3, #1
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800999a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f023 030a 	bic.w	r3, r3, #10
 80099ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	621a      	str	r2, [r3, #32]
}
 80099c2:	bf00      	nop
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bc80      	pop	{r7}
 80099ca:	4770      	bx	lr

080099cc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	f023 0210 	bic.w	r2, r3, #16
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	031b      	lsls	r3, r3, #12
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	621a      	str	r2, [r3, #32]
}
 8009a3a:	bf00      	nop
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr

08009a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f023 0210 	bic.w	r2, r3, #16
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	031b      	lsls	r3, r3, #12
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	011b      	lsls	r3, r3, #4
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	621a      	str	r2, [r3, #32]
}
 8009a98:	bf00      	nop
 8009a9a:	371c      	adds	r7, #28
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bc80      	pop	{r7}
 8009aa0:	4770      	bx	lr

08009aa2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b087      	sub	sp, #28
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
 8009aae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f023 0303 	bic.w	r3, r3, #3
 8009ace:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ade:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	011b      	lsls	r3, r3, #4
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009af2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	621a      	str	r2, [r3, #32]
}
 8009b0e:	bf00      	nop
 8009b10:	371c      	adds	r7, #28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr

08009b18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	031b      	lsls	r3, r3, #12
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	031b      	lsls	r3, r3, #12
 8009b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	621a      	str	r2, [r3, #32]
}
 8009b86:	bf00      	nop
 8009b88:	371c      	adds	r7, #28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr

08009b90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	f043 0307 	orr.w	r3, r3, #7
 8009bb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	609a      	str	r2, [r3, #8]
}
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr

08009bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
 8009bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	021a      	lsls	r2, r3, #8
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	431a      	orrs	r2, r3
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	609a      	str	r2, [r3, #8]
}
 8009bf8:	bf00      	nop
 8009bfa:	371c      	adds	r7, #28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bc80      	pop	{r7}
 8009c00:	4770      	bx	lr

08009c02 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b087      	sub	sp, #28
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f003 031f 	and.w	r3, r3, #31
 8009c14:	2201      	movs	r2, #1
 8009c16:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6a1a      	ldr	r2, [r3, #32]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	43db      	mvns	r3, r3
 8009c24:	401a      	ands	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a1a      	ldr	r2, [r3, #32]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f003 031f 	and.w	r3, r3, #31
 8009c34:	6879      	ldr	r1, [r7, #4]
 8009c36:	fa01 f303 	lsl.w	r3, r1, r3
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	621a      	str	r2, [r3, #32]
}
 8009c40:	bf00      	nop
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bc80      	pop	{r7}
 8009c48:	4770      	bx	lr
	...

08009c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d101      	bne.n	8009c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c60:	2302      	movs	r3, #2
 8009c62:	e046      	b.n	8009cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a16      	ldr	r2, [pc, #88]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d00e      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb0:	d009      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a12      	ldr	r2, [pc, #72]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d004      	beq.n	8009cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a10      	ldr	r2, [pc, #64]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d10c      	bne.n	8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bc80      	pop	{r7}
 8009cfa:	4770      	bx	lr
 8009cfc:	40012c00 	.word	0x40012c00
 8009d00:	40000400 	.word	0x40000400
 8009d04:	40000800 	.word	0x40000800

08009d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr

08009d1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e03f      	b.n	8009dbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d106      	bne.n	8009d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7f9 fa9a 	bl	800328c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2224      	movs	r2, #36	; 0x24
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fcad 	bl	800a6d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	691a      	ldr	r2, [r3, #16]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	695a      	ldr	r2, [r3, #20]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d11d      	bne.n	8009e1c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <HAL_UART_Receive_DMA+0x26>
 8009de6:	88fb      	ldrh	r3, [r7, #6]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e016      	b.n	8009e1e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d101      	bne.n	8009dfe <HAL_UART_Receive_DMA+0x38>
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	e00f      	b.n	8009e1e <HAL_UART_Receive_DMA+0x58>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009e0c:	88fb      	ldrh	r3, [r7, #6]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fa92 	bl	800a33c <UART_Start_Receive_DMA>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	e000      	b.n	8009e1e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009e1c:	2302      	movs	r3, #2
  }
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08a      	sub	sp, #40	; 0x28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	f003 030f 	and.w	r3, r3, #15
 8009e56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10d      	bne.n	8009e7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d008      	beq.n	8009e7a <HAL_UART_IRQHandler+0x52>
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fb82 	bl	800a57c <UART_Receive_IT>
      return;
 8009e78:	e17b      	b.n	800a172 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 80b1 	beq.w	8009fe4 <HAL_UART_IRQHandler+0x1bc>
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d105      	bne.n	8009e98 <HAL_UART_IRQHandler+0x70>
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 80a6 	beq.w	8009fe4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <HAL_UART_IRQHandler+0x90>
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb0:	f043 0201 	orr.w	r2, r3, #1
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00a      	beq.n	8009ed8 <HAL_UART_IRQHandler+0xb0>
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	f003 0301 	and.w	r3, r3, #1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed0:	f043 0202 	orr.w	r2, r3, #2
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <HAL_UART_IRQHandler+0xd0>
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d005      	beq.n	8009ef8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	f043 0204 	orr.w	r2, r3, #4
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	f003 0308 	and.w	r3, r3, #8
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00f      	beq.n	8009f22 <HAL_UART_IRQHandler+0xfa>
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d104      	bne.n	8009f16 <HAL_UART_IRQHandler+0xee>
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1a:	f043 0208 	orr.w	r2, r3, #8
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 811e 	beq.w	800a168 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	f003 0320 	and.w	r3, r3, #32
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <HAL_UART_IRQHandler+0x11e>
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	f003 0320 	and.w	r3, r3, #32
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fb1b 	bl	800a57c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	bf14      	ite	ne
 8009f54:	2301      	movne	r3, #1
 8009f56:	2300      	moveq	r3, #0
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	f003 0308 	and.w	r3, r3, #8
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <HAL_UART_IRQHandler+0x146>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d031      	beq.n	8009fd2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa5d 	bl	800a42e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d023      	beq.n	8009fca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	695a      	ldr	r2, [r3, #20]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d013      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	4a76      	ldr	r2, [pc, #472]	; (800a178 <HAL_UART_IRQHandler+0x350>)
 8009fa0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fa fd70 	bl	8004a8c <HAL_DMA_Abort_IT>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d016      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc0:	e00e      	b.n	8009fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8f5 	bl	800a1b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc8:	e00a      	b.n	8009fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f8f1 	bl	800a1b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd0:	e006      	b.n	8009fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f8ed 	bl	800a1b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009fde:	e0c3      	b.n	800a168 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe0:	bf00      	nop
    return;
 8009fe2:	e0c1      	b.n	800a168 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	f040 80a1 	bne.w	800a130 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 809b 	beq.w	800a130 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	f003 0310 	and.w	r3, r3, #16
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 8095 	beq.w	800a130 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a026:	2b00      	cmp	r3, #0
 800a028:	d04e      	beq.n	800a0c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a034:	8a3b      	ldrh	r3, [r7, #16]
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 8098 	beq.w	800a16c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a040:	8a3a      	ldrh	r2, [r7, #16]
 800a042:	429a      	cmp	r2, r3
 800a044:	f080 8092 	bcs.w	800a16c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	8a3a      	ldrh	r2, [r7, #16]
 800a04c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	2b20      	cmp	r3, #32
 800a056:	d02b      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a066:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695a      	ldr	r2, [r3, #20]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
 800a076:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695a      	ldr	r2, [r3, #20]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a086:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 0210 	bic.w	r2, r2, #16
 800a0a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fa fcb3 	bl	8004a16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f87f 	bl	800a1c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a0c6:	e051      	b.n	800a16c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d047      	beq.n	800a170 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a0e0:	8a7b      	ldrh	r3, [r7, #18]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d044      	beq.n	800a170 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	695a      	ldr	r2, [r3, #20]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0201 	bic.w	r2, r2, #1
 800a104:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 0210 	bic.w	r2, r2, #16
 800a122:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a124:	8a7b      	ldrh	r3, [r7, #18]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f84b 	bl	800a1c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a12e:	e01f      	b.n	800a170 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a136:	2b00      	cmp	r3, #0
 800a138:	d008      	beq.n	800a14c <HAL_UART_IRQHandler+0x324>
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a140:	2b00      	cmp	r3, #0
 800a142:	d003      	beq.n	800a14c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f9b2 	bl	800a4ae <UART_Transmit_IT>
    return;
 800a14a:	e012      	b.n	800a172 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00d      	beq.n	800a172 <HAL_UART_IRQHandler+0x34a>
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d008      	beq.n	800a172 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f9f3 	bl	800a54c <UART_EndTransmit_IT>
    return;
 800a166:	e004      	b.n	800a172 <HAL_UART_IRQHandler+0x34a>
    return;
 800a168:	bf00      	nop
 800a16a:	e002      	b.n	800a172 <HAL_UART_IRQHandler+0x34a>
      return;
 800a16c:	bf00      	nop
 800a16e:	e000      	b.n	800a172 <HAL_UART_IRQHandler+0x34a>
      return;
 800a170:	bf00      	nop
  }
}
 800a172:	3728      	adds	r7, #40	; 0x28
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	0800a487 	.word	0x0800a487

0800a17c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr

0800a18e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a18e:	b480      	push	{r7}
 800a190:	b083      	sub	sp, #12
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a196:	bf00      	nop
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bc80      	pop	{r7}
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bc80      	pop	{r7}
 800a1b0:	4770      	bx	lr

0800a1b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b083      	sub	sp, #12
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1ba:	bf00      	nop
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bc80      	pop	{r7}
 800a1d8:	4770      	bx	lr

0800a1da <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0320 	and.w	r3, r3, #32
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d12a      	bne.n	800a24c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a20a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	695a      	ldr	r2, [r3, #20]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 0201 	bic.w	r2, r2, #1
 800a21a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	695a      	ldr	r2, [r3, #20]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a22a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d107      	bne.n	800a24c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68da      	ldr	r2, [r3, #12]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 0210 	bic.w	r2, r2, #16
 800a24a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a250:	2b01      	cmp	r3, #1
 800a252:	d106      	bne.n	800a262 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a258:	4619      	mov	r1, r3
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7ff ffb2 	bl	800a1c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a260:	e002      	b.n	800a268 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff ff93 	bl	800a18e <HAL_UART_RxCpltCallback>
}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a282:	2b01      	cmp	r3, #1
 800a284:	d108      	bne.n	800a298 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a28a:	085b      	lsrs	r3, r3, #1
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	4619      	mov	r1, r3
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7ff ff97 	bl	800a1c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a296:	e002      	b.n	800a29e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f7ff ff81 	bl	800a1a0 <HAL_UART_RxHalfCpltCallback>
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bf14      	ite	ne
 800a2c6:	2301      	movne	r3, #1
 800a2c8:	2300      	moveq	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b21      	cmp	r3, #33	; 0x21
 800a2d8:	d108      	bne.n	800a2ec <UART_DMAError+0x46>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d005      	beq.n	800a2ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a2e6:	68b8      	ldr	r0, [r7, #8]
 800a2e8:	f000 f88c 	bl	800a404 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bf14      	ite	ne
 800a2fa:	2301      	movne	r3, #1
 800a2fc:	2300      	moveq	r3, #0
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b22      	cmp	r3, #34	; 0x22
 800a30c:	d108      	bne.n	800a320 <UART_DMAError+0x7a>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d005      	beq.n	800a320 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2200      	movs	r2, #0
 800a318:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a31a:	68b8      	ldr	r0, [r7, #8]
 800a31c:	f000 f887 	bl	800a42e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a324:	f043 0210 	orr.w	r2, r3, #16
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a32c:	68b8      	ldr	r0, [r7, #8]
 800a32e:	f7ff ff40 	bl	800a1b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a332:	bf00      	nop
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	88fa      	ldrh	r2, [r7, #6]
 800a354:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2222      	movs	r2, #34	; 0x22
 800a360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	4a23      	ldr	r2, [pc, #140]	; (800a3f8 <UART_Start_Receive_DMA+0xbc>)
 800a36a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	4a22      	ldr	r2, [pc, #136]	; (800a3fc <UART_Start_Receive_DMA+0xc0>)
 800a372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a378:	4a21      	ldr	r2, [pc, #132]	; (800a400 <UART_Start_Receive_DMA+0xc4>)
 800a37a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a380:	2200      	movs	r2, #0
 800a382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a384:	f107 0308 	add.w	r3, r7, #8
 800a388:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3304      	adds	r3, #4
 800a394:	4619      	mov	r1, r3
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	88fb      	ldrh	r3, [r7, #6]
 800a39c:	f7fa fadc 	bl	8004958 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	613b      	str	r3, [r7, #16]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	613b      	str	r3, [r7, #16]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	613b      	str	r3, [r7, #16]
 800a3b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3cc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	695a      	ldr	r2, [r3, #20]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f042 0201 	orr.w	r2, r2, #1
 800a3dc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	695a      	ldr	r2, [r3, #20]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	0800a1db 	.word	0x0800a1db
 800a3fc:	0800a271 	.word	0x0800a271
 800a400:	0800a2a7 	.word	0x0800a2a7

0800a404 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a41a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2220      	movs	r2, #32
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	bc80      	pop	{r7}
 800a42c:	4770      	bx	lr

0800a42e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a444:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	695a      	ldr	r2, [r3, #20]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 0201 	bic.w	r2, r2, #1
 800a454:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d107      	bne.n	800a46e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68da      	ldr	r2, [r3, #12]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f022 0210 	bic.w	r2, r2, #16
 800a46c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2220      	movs	r2, #32
 800a472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	bc80      	pop	{r7}
 800a484:	4770      	bx	lr

0800a486 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fe86 	bl	800a1b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b21      	cmp	r3, #33	; 0x21
 800a4c0:	d13e      	bne.n	800a540 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ca:	d114      	bne.n	800a4f6 <UART_Transmit_IT+0x48>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d110      	bne.n	800a4f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	1c9a      	adds	r2, r3, #2
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	621a      	str	r2, [r3, #32]
 800a4f4:	e008      	b.n	800a508 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	1c59      	adds	r1, r3, #1
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	6211      	str	r1, [r2, #32]
 800a500:	781a      	ldrb	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29b      	uxth	r3, r3
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	4619      	mov	r1, r3
 800a516:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10f      	bne.n	800a53c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a52a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a53a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	e000      	b.n	800a542 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a540:	2302      	movs	r3, #2
  }
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	bc80      	pop	{r7}
 800a54a:	4770      	bx	lr

0800a54c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a562:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2220      	movs	r2, #32
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7ff fe05 	bl	800a17c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b22      	cmp	r3, #34	; 0x22
 800a58e:	f040 8099 	bne.w	800a6c4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a59a:	d117      	bne.n	800a5cc <UART_Receive_IT+0x50>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d113      	bne.n	800a5cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c4:	1c9a      	adds	r2, r3, #2
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	629a      	str	r2, [r3, #40]	; 0x28
 800a5ca:	e026      	b.n	800a61a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5de:	d007      	beq.n	800a5f0 <UART_Receive_IT+0x74>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <UART_Receive_IT+0x82>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d106      	bne.n	800a5fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	e008      	b.n	800a610 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	b2db      	uxtb	r3, r3
 800a606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a61e:	b29b      	uxth	r3, r3
 800a620:	3b01      	subs	r3, #1
 800a622:	b29b      	uxth	r3, r3
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	4619      	mov	r1, r3
 800a628:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d148      	bne.n	800a6c0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68da      	ldr	r2, [r3, #12]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 0220 	bic.w	r2, r2, #32
 800a63c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a64c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695a      	ldr	r2, [r3, #20]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0201 	bic.w	r2, r2, #1
 800a65c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d123      	bne.n	800a6b6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0210 	bic.w	r2, r2, #16
 800a682:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0310 	and.w	r3, r3, #16
 800a68e:	2b10      	cmp	r3, #16
 800a690:	d10a      	bne.n	800a6a8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fd88 	bl	800a1c4 <HAL_UARTEx_RxEventCallback>
 800a6b4:	e002      	b.n	800a6bc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff fd69 	bl	800a18e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e002      	b.n	800a6c6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	e000      	b.n	800a6c6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a6c4:	2302      	movs	r3, #2
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3718      	adds	r7, #24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	431a      	orrs	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a70a:	f023 030c 	bic.w	r3, r3, #12
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	68b9      	ldr	r1, [r7, #8]
 800a714:	430b      	orrs	r3, r1
 800a716:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a2c      	ldr	r2, [pc, #176]	; (800a7e4 <UART_SetConfig+0x114>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d103      	bne.n	800a740 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a738:	f7fd fdd0 	bl	80082dc <HAL_RCC_GetPCLK2Freq>
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	e002      	b.n	800a746 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a740:	f7fd fdb8 	bl	80082b4 <HAL_RCC_GetPCLK1Freq>
 800a744:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4613      	mov	r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	009a      	lsls	r2, r3, #2
 800a750:	441a      	add	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	fbb2 f3f3 	udiv	r3, r2, r3
 800a75c:	4a22      	ldr	r2, [pc, #136]	; (800a7e8 <UART_SetConfig+0x118>)
 800a75e:	fba2 2303 	umull	r2, r3, r2, r3
 800a762:	095b      	lsrs	r3, r3, #5
 800a764:	0119      	lsls	r1, r3, #4
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009a      	lsls	r2, r3, #2
 800a770:	441a      	add	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	fbb2 f2f3 	udiv	r2, r2, r3
 800a77c:	4b1a      	ldr	r3, [pc, #104]	; (800a7e8 <UART_SetConfig+0x118>)
 800a77e:	fba3 0302 	umull	r0, r3, r3, r2
 800a782:	095b      	lsrs	r3, r3, #5
 800a784:	2064      	movs	r0, #100	; 0x64
 800a786:	fb00 f303 	mul.w	r3, r0, r3
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	011b      	lsls	r3, r3, #4
 800a78e:	3332      	adds	r3, #50	; 0x32
 800a790:	4a15      	ldr	r2, [pc, #84]	; (800a7e8 <UART_SetConfig+0x118>)
 800a792:	fba2 2303 	umull	r2, r3, r2, r3
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a79c:	4419      	add	r1, r3
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009a      	lsls	r2, r3, #2
 800a7a8:	441a      	add	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <UART_SetConfig+0x118>)
 800a7b6:	fba3 0302 	umull	r0, r3, r3, r2
 800a7ba:	095b      	lsrs	r3, r3, #5
 800a7bc:	2064      	movs	r0, #100	; 0x64
 800a7be:	fb00 f303 	mul.w	r3, r0, r3
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	011b      	lsls	r3, r3, #4
 800a7c6:	3332      	adds	r3, #50	; 0x32
 800a7c8:	4a07      	ldr	r2, [pc, #28]	; (800a7e8 <UART_SetConfig+0x118>)
 800a7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ce:	095b      	lsrs	r3, r3, #5
 800a7d0:	f003 020f 	and.w	r2, r3, #15
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	440a      	add	r2, r1
 800a7da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	40013800 	.word	0x40013800
 800a7e8:	51eb851f 	.word	0x51eb851f

0800a7ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a7f0:	4904      	ldr	r1, [pc, #16]	; (800a804 <MX_FATFS_Init+0x18>)
 800a7f2:	4805      	ldr	r0, [pc, #20]	; (800a808 <MX_FATFS_Init+0x1c>)
 800a7f4:	f003 fadc 	bl	800ddb0 <FATFS_LinkDriver>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4b03      	ldr	r3, [pc, #12]	; (800a80c <MX_FATFS_Init+0x20>)
 800a7fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a800:	bf00      	nop
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20000df4 	.word	0x20000df4
 800a808:	20000010 	.word	0x20000010
 800a80c:	20000df8 	.word	0x20000df8

0800a810 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a810:	b480      	push	{r7}
 800a812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a814:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a816:	4618      	mov	r0, r3
 800a818:	46bd      	mov	sp, r7
 800a81a:	bc80      	pop	{r7}
 800a81c:	4770      	bx	lr
	...

0800a820 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7f6 fea3 	bl	8001578 <SD_disk_initialize>
 800a832:	4603      	mov	r3, r0
 800a834:	461a      	mov	r2, r3
 800a836:	4b04      	ldr	r3, [pc, #16]	; (800a848 <USER_initialize+0x28>)
 800a838:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a83a:	4b03      	ldr	r3, [pc, #12]	; (800a848 <USER_initialize+0x28>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	2000000d 	.word	0x2000000d

0800a84c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f6 ff77 	bl	800174c <SD_disk_status>
 800a85e:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60b9      	str	r1, [r7, #8]
 800a870:	607a      	str	r2, [r7, #4]
 800a872:	603b      	str	r3, [r7, #0]
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800a878:	7bf8      	ldrb	r0, [r7, #15]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	f7f6 ff78 	bl	8001774 <SD_disk_read>
 800a884:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
 800a89a:	4603      	mov	r3, r0
 800a89c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800a89e:	7bf8      	ldrb	r0, [r7, #15]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	68b9      	ldr	r1, [r7, #8]
 800a8a6:	f7f6 ffcf 	bl	8001848 <SD_disk_write>
 800a8aa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	603a      	str	r2, [r7, #0]
 800a8be:	71fb      	strb	r3, [r7, #7]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800a8c4:	79b9      	ldrb	r1, [r7, #6]
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7f7 f840 	bl	8001950 <SD_disk_ioctl>
 800a8d0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	4a08      	ldr	r2, [pc, #32]	; (800a90c <disk_status+0x30>)
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	79fa      	ldrb	r2, [r7, #7]
 800a8f4:	4905      	ldr	r1, [pc, #20]	; (800a90c <disk_status+0x30>)
 800a8f6:	440a      	add	r2, r1
 800a8f8:	7a12      	ldrb	r2, [r2, #8]
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	4798      	blx	r3
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	200002cc 	.word	0x200002cc

0800a910 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	4a0d      	ldr	r2, [pc, #52]	; (800a958 <disk_initialize+0x48>)
 800a922:	5cd3      	ldrb	r3, [r2, r3]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d111      	bne.n	800a94c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	4a0b      	ldr	r2, [pc, #44]	; (800a958 <disk_initialize+0x48>)
 800a92c:	2101      	movs	r1, #1
 800a92e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a930:	79fb      	ldrb	r3, [r7, #7]
 800a932:	4a09      	ldr	r2, [pc, #36]	; (800a958 <disk_initialize+0x48>)
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	79fa      	ldrb	r2, [r7, #7]
 800a93e:	4906      	ldr	r1, [pc, #24]	; (800a958 <disk_initialize+0x48>)
 800a940:	440a      	add	r2, r1
 800a942:	7a12      	ldrb	r2, [r2, #8]
 800a944:	4610      	mov	r0, r2
 800a946:	4798      	blx	r3
 800a948:	4603      	mov	r3, r0
 800a94a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	200002cc 	.word	0x200002cc

0800a95c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a95c:	b590      	push	{r4, r7, lr}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	60b9      	str	r1, [r7, #8]
 800a964:	607a      	str	r2, [r7, #4]
 800a966:	603b      	str	r3, [r7, #0]
 800a968:	4603      	mov	r3, r0
 800a96a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	4a0a      	ldr	r2, [pc, #40]	; (800a998 <disk_read+0x3c>)
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	689c      	ldr	r4, [r3, #8]
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	4a07      	ldr	r2, [pc, #28]	; (800a998 <disk_read+0x3c>)
 800a97c:	4413      	add	r3, r2
 800a97e:	7a18      	ldrb	r0, [r3, #8]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	47a0      	blx	r4
 800a988:	4603      	mov	r3, r0
 800a98a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	bd90      	pop	{r4, r7, pc}
 800a996:	bf00      	nop
 800a998:	200002cc 	.word	0x200002cc

0800a99c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a99c:	b590      	push	{r4, r7, lr}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60b9      	str	r1, [r7, #8]
 800a9a4:	607a      	str	r2, [r7, #4]
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	4a0a      	ldr	r2, [pc, #40]	; (800a9d8 <disk_write+0x3c>)
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	68dc      	ldr	r4, [r3, #12]
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	4a07      	ldr	r2, [pc, #28]	; (800a9d8 <disk_write+0x3c>)
 800a9bc:	4413      	add	r3, r2
 800a9be:	7a18      	ldrb	r0, [r3, #8]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	68b9      	ldr	r1, [r7, #8]
 800a9c6:	47a0      	blx	r4
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	371c      	adds	r7, #28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd90      	pop	{r4, r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	200002cc 	.word	0x200002cc

0800a9dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	603a      	str	r2, [r7, #0]
 800a9e6:	71fb      	strb	r3, [r7, #7]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <disk_ioctl+0x38>)
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	79fa      	ldrb	r2, [r7, #7]
 800a9fa:	4906      	ldr	r1, [pc, #24]	; (800aa14 <disk_ioctl+0x38>)
 800a9fc:	440a      	add	r2, r1
 800a9fe:	7a10      	ldrb	r0, [r2, #8]
 800aa00:	79b9      	ldrb	r1, [r7, #6]
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]
  return res;
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	200002cc 	.word	0x200002cc

0800aa18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800aa2c:	e007      	b.n	800aa3e <mem_cpy+0x26>
		*d++ = *s++;
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	1c53      	adds	r3, r2, #1
 800aa32:	613b      	str	r3, [r7, #16]
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	1c59      	adds	r1, r3, #1
 800aa38:	6179      	str	r1, [r7, #20]
 800aa3a:	7812      	ldrb	r2, [r2, #0]
 800aa3c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	1e5a      	subs	r2, r3, #1
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1f2      	bne.n	800aa2e <mem_cpy+0x16>
}
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bc80      	pop	{r7}
 800aa52:	4770      	bx	lr

0800aa54 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aa54:	b480      	push	{r7}
 800aa56:	b087      	sub	sp, #28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800aa64:	e005      	b.n	800aa72 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	617a      	str	r2, [r7, #20]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	b2d2      	uxtb	r2, r2
 800aa70:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	1e5a      	subs	r2, r3, #1
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1f4      	bne.n	800aa66 <mem_set+0x12>
}
 800aa7c:	bf00      	nop
 800aa7e:	bf00      	nop
 800aa80:	371c      	adds	r7, #28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bc80      	pop	{r7}
 800aa86:	4770      	bx	lr

0800aa88 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800aa88:	b480      	push	{r7}
 800aa8a:	b089      	sub	sp, #36	; 0x24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	61fb      	str	r3, [r7, #28]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800aaa0:	bf00      	nop
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	607a      	str	r2, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00d      	beq.n	800aac8 <mem_cmp+0x40>
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	61fa      	str	r2, [r7, #28]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	4619      	mov	r1, r3
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	61ba      	str	r2, [r7, #24]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	1acb      	subs	r3, r1, r3
 800aac0:	617b      	str	r3, [r7, #20]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0ec      	beq.n	800aaa2 <mem_cmp+0x1a>
	return r;
 800aac8:	697b      	ldr	r3, [r7, #20]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3724      	adds	r7, #36	; 0x24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bc80      	pop	{r7}
 800aad2:	4770      	bx	lr

0800aad4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aade:	e002      	b.n	800aae6 <chk_chr+0x12>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	3301      	adds	r3, #1
 800aae4:	607b      	str	r3, [r7, #4]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d005      	beq.n	800aafa <chk_chr+0x26>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d1f2      	bne.n	800aae0 <chk_chr+0xc>
	return *str;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	781b      	ldrb	r3, [r3, #0]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bc80      	pop	{r7}
 800ab06:	4770      	bx	lr

0800ab08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab12:	2300      	movs	r3, #0
 800ab14:	60bb      	str	r3, [r7, #8]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	60fb      	str	r3, [r7, #12]
 800ab1a:	e035      	b.n	800ab88 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 800ab1c:	492e      	ldr	r1, [pc, #184]	; (800abd8 <chk_lock+0xd0>)
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	4613      	mov	r3, r2
 800ab22:	005b      	lsls	r3, r3, #1
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	440b      	add	r3, r1
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d026      	beq.n	800ab7e <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ab30:	4929      	ldr	r1, [pc, #164]	; (800abd8 <chk_lock+0xd0>)
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4613      	mov	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	440b      	add	r3, r1
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d11c      	bne.n	800ab82 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 800ab48:	4923      	ldr	r1, [pc, #140]	; (800abd8 <chk_lock+0xd0>)
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	005b      	lsls	r3, r3, #1
 800ab50:	4413      	add	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	440b      	add	r3, r1
 800ab56:	3304      	adds	r3, #4
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d10f      	bne.n	800ab82 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800ab62:	491d      	ldr	r1, [pc, #116]	; (800abd8 <chk_lock+0xd0>)
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4613      	mov	r3, r2
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	440b      	add	r3, r1
 800ab70:	3308      	adds	r3, #8
 800ab72:	881a      	ldrh	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d102      	bne.n	800ab82 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 800ab7c:	e007      	b.n	800ab8e <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3301      	adds	r3, #1
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d9c6      	bls.n	800ab1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d109      	bne.n	800aba8 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d102      	bne.n	800aba0 <chk_lock+0x98>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d101      	bne.n	800aba4 <chk_lock+0x9c>
 800aba0:	2300      	movs	r3, #0
 800aba2:	e013      	b.n	800abcc <chk_lock+0xc4>
 800aba4:	2312      	movs	r3, #18
 800aba6:	e011      	b.n	800abcc <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10b      	bne.n	800abc6 <chk_lock+0xbe>
 800abae:	490a      	ldr	r1, [pc, #40]	; (800abd8 <chk_lock+0xd0>)
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4613      	mov	r3, r2
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	440b      	add	r3, r1
 800abbc:	330a      	adds	r3, #10
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc4:	d101      	bne.n	800abca <chk_lock+0xc2>
 800abc6:	2310      	movs	r3, #16
 800abc8:	e000      	b.n	800abcc <chk_lock+0xc4>
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bc80      	pop	{r7}
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	200000b4 	.word	0x200000b4

0800abdc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800abe2:	2300      	movs	r3, #0
 800abe4:	607b      	str	r3, [r7, #4]
 800abe6:	e002      	b.n	800abee <enq_lock+0x12>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3301      	adds	r3, #1
 800abec:	607b      	str	r3, [r7, #4]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d809      	bhi.n	800ac08 <enq_lock+0x2c>
 800abf4:	490a      	ldr	r1, [pc, #40]	; (800ac20 <enq_lock+0x44>)
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	4613      	mov	r3, r2
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	440b      	add	r3, r1
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1ef      	bne.n	800abe8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	bf14      	ite	ne
 800ac0e:	2301      	movne	r3, #1
 800ac10:	2300      	moveq	r3, #0
 800ac12:	b2db      	uxtb	r3, r3
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bc80      	pop	{r7}
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	200000b4 	.word	0x200000b4

0800ac24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
 800ac32:	e028      	b.n	800ac86 <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 800ac34:	4952      	ldr	r1, [pc, #328]	; (800ad80 <inc_lock+0x15c>)
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d119      	bne.n	800ac80 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 800ac4c:	494c      	ldr	r1, [pc, #304]	; (800ad80 <inc_lock+0x15c>)
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	4613      	mov	r3, r2
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	4413      	add	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	440b      	add	r3, r1
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d10c      	bne.n	800ac80 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 800ac66:	4946      	ldr	r1, [pc, #280]	; (800ad80 <inc_lock+0x15c>)
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	440b      	add	r3, r1
 800ac74:	3308      	adds	r3, #8
 800ac76:	881a      	ldrh	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d006      	beq.n	800ac8e <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3301      	adds	r3, #1
 800ac84:	60fb      	str	r3, [r7, #12]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d9d3      	bls.n	800ac34 <inc_lock+0x10>
 800ac8c:	e000      	b.n	800ac90 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800ac8e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d142      	bne.n	800ad1c <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e002      	b.n	800aca2 <inc_lock+0x7e>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d809      	bhi.n	800acbc <inc_lock+0x98>
 800aca8:	4935      	ldr	r1, [pc, #212]	; (800ad80 <inc_lock+0x15c>)
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	4613      	mov	r3, r2
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	440b      	add	r3, r1
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1ef      	bne.n	800ac9c <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d101      	bne.n	800acc6 <inc_lock+0xa2>
 800acc2:	2300      	movs	r3, #0
 800acc4:	e057      	b.n	800ad76 <inc_lock+0x152>
		Files[i].fs = dp->fs;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6819      	ldr	r1, [r3, #0]
 800acca:	482d      	ldr	r0, [pc, #180]	; (800ad80 <inc_lock+0x15c>)
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	4613      	mov	r3, r2
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4403      	add	r3, r0
 800acd8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6899      	ldr	r1, [r3, #8]
 800acde:	4828      	ldr	r0, [pc, #160]	; (800ad80 <inc_lock+0x15c>)
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	4613      	mov	r3, r2
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	4413      	add	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4403      	add	r3, r0
 800acec:	3304      	adds	r3, #4
 800acee:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	88d8      	ldrh	r0, [r3, #6]
 800acf4:	4922      	ldr	r1, [pc, #136]	; (800ad80 <inc_lock+0x15c>)
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	4613      	mov	r3, r2
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	4413      	add	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	440b      	add	r3, r1
 800ad02:	3308      	adds	r3, #8
 800ad04:	4602      	mov	r2, r0
 800ad06:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800ad08:	491d      	ldr	r1, [pc, #116]	; (800ad80 <inc_lock+0x15c>)
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	330a      	adds	r3, #10
 800ad18:	2200      	movs	r2, #0
 800ad1a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00c      	beq.n	800ad3c <inc_lock+0x118>
 800ad22:	4917      	ldr	r1, [pc, #92]	; (800ad80 <inc_lock+0x15c>)
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4613      	mov	r3, r2
 800ad28:	005b      	lsls	r3, r3, #1
 800ad2a:	4413      	add	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	440b      	add	r3, r1
 800ad30:	330a      	adds	r3, #10
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <inc_lock+0x118>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e01c      	b.n	800ad76 <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10b      	bne.n	800ad5a <inc_lock+0x136>
 800ad42:	490f      	ldr	r1, [pc, #60]	; (800ad80 <inc_lock+0x15c>)
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	4613      	mov	r3, r2
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	4413      	add	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	440b      	add	r3, r1
 800ad50:	330a      	adds	r3, #10
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	3301      	adds	r3, #1
 800ad56:	b299      	uxth	r1, r3
 800ad58:	e001      	b.n	800ad5e <inc_lock+0x13a>
 800ad5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad5e:	4808      	ldr	r0, [pc, #32]	; (800ad80 <inc_lock+0x15c>)
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4613      	mov	r3, r2
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4403      	add	r3, r0
 800ad6c:	330a      	adds	r3, #10
 800ad6e:	460a      	mov	r2, r1
 800ad70:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3301      	adds	r3, #1
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bc80      	pop	{r7}
 800ad7e:	4770      	bx	lr
 800ad80:	200000b4 	.word	0x200000b4

0800ad84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	607b      	str	r3, [r7, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d82e      	bhi.n	800adf6 <dec_lock+0x72>
		n = Files[i].ctr;
 800ad98:	491b      	ldr	r1, [pc, #108]	; (800ae08 <dec_lock+0x84>)
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	4413      	add	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	440b      	add	r3, r1
 800ada6:	330a      	adds	r3, #10
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800adac:	89fb      	ldrh	r3, [r7, #14]
 800adae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb2:	d101      	bne.n	800adb8 <dec_lock+0x34>
 800adb4:	2300      	movs	r3, #0
 800adb6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800adb8:	89fb      	ldrh	r3, [r7, #14]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <dec_lock+0x40>
 800adbe:	89fb      	ldrh	r3, [r7, #14]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800adc4:	4910      	ldr	r1, [pc, #64]	; (800ae08 <dec_lock+0x84>)
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	4613      	mov	r3, r2
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	440b      	add	r3, r1
 800add2:	330a      	adds	r3, #10
 800add4:	89fa      	ldrh	r2, [r7, #14]
 800add6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800add8:	89fb      	ldrh	r3, [r7, #14]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d108      	bne.n	800adf0 <dec_lock+0x6c>
 800adde:	490a      	ldr	r1, [pc, #40]	; (800ae08 <dec_lock+0x84>)
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	4613      	mov	r3, r2
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	4413      	add	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	440b      	add	r3, r1
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	737b      	strb	r3, [r7, #13]
 800adf4:	e001      	b.n	800adfa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800adf6:	2302      	movs	r3, #2
 800adf8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800adfa:	7b7b      	ldrb	r3, [r7, #13]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bc80      	pop	{r7}
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	200000b4 	.word	0x200000b4

0800ae0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	e016      	b.n	800ae48 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ae1a:	4910      	ldr	r1, [pc, #64]	; (800ae5c <clear_lock+0x50>)
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	440b      	add	r3, r1
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d108      	bne.n	800ae42 <clear_lock+0x36>
 800ae30:	490a      	ldr	r1, [pc, #40]	; (800ae5c <clear_lock+0x50>)
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	4613      	mov	r3, r2
 800ae36:	005b      	lsls	r3, r3, #1
 800ae38:	4413      	add	r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	440b      	add	r3, r1
 800ae3e:	2200      	movs	r2, #0
 800ae40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d9e5      	bls.n	800ae1a <clear_lock+0xe>
	}
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bc80      	pop	{r7}
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	200000b4 	.word	0x200000b4

0800ae60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d038      	beq.n	800aee8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800ae7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	2301      	movs	r3, #1
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	f7ff fd87 	bl	800a99c <disk_write>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <sync_window+0x3a>
			res = FR_DISK_ERR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	73fb      	strb	r3, [r7, #15]
 800ae98:	e026      	b.n	800aee8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	1ad2      	subs	r2, r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d218      	bcs.n	800aee8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800aebc:	613b      	str	r3, [r7, #16]
 800aebe:	e010      	b.n	800aee2 <sync_window+0x82>
					wsect += fs->fsize;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4413      	add	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800aed2:	6879      	ldr	r1, [r7, #4]
 800aed4:	2301      	movs	r3, #1
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	f7ff fd60 	bl	800a99c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	3b01      	subs	r3, #1
 800aee0:	613b      	str	r3, [r7, #16]
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d8eb      	bhi.n	800aec0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d01b      	beq.n	800af44 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff ffa7 	bl	800ae60 <sync_window>
 800af12:	4603      	mov	r3, r0
 800af14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d113      	bne.n	800af44 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	2301      	movs	r3, #1
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	f7ff fd18 	bl	800a95c <disk_read>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d004      	beq.n	800af3c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af32:	f04f 33ff 	mov.w	r3, #4294967295
 800af36:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af38:	2301      	movs	r3, #1
 800af3a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 800af44:	7bfb      	ldrb	r3, [r7, #15]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff ff82 	bl	800ae60 <sync_window>
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f040 809c 	bne.w	800b0a0 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800af6e:	2b03      	cmp	r3, #3
 800af70:	f040 8089 	bne.w	800b086 <sync_fs+0x138>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	f040 8083 	bne.w	800b086 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800af88:	461a      	mov	r2, r3
 800af8a:	2100      	movs	r1, #0
 800af8c:	f7ff fd62 	bl	800aa54 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2255      	movs	r2, #85	; 0x55
 800af94:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	22aa      	movs	r2, #170	; 0xaa
 800af9c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2252      	movs	r2, #82	; 0x52
 800afa4:	701a      	strb	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2252      	movs	r2, #82	; 0x52
 800afaa:	705a      	strb	r2, [r3, #1]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2261      	movs	r2, #97	; 0x61
 800afb0:	709a      	strb	r2, [r3, #2]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2241      	movs	r2, #65	; 0x41
 800afb6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2272      	movs	r2, #114	; 0x72
 800afbc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2272      	movs	r2, #114	; 0x72
 800afc4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2241      	movs	r2, #65	; 0x41
 800afcc:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2261      	movs	r2, #97	; 0x61
 800afd4:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800afec:	b29b      	uxth	r3, r3
 800afee:	0a1b      	lsrs	r3, r3, #8
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b000:	0c1b      	lsrs	r3, r3, #16
 800b002:	b2da      	uxtb	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b010:	0e1b      	lsrs	r3, r3, #24
 800b012:	b2da      	uxtb	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b020:	b2da      	uxtb	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b02e:	b29b      	uxth	r3, r3
 800b030:	0a1b      	lsrs	r3, r3, #8
 800b032:	b29b      	uxth	r3, r3
 800b034:	b2da      	uxtb	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b042:	0c1b      	lsrs	r3, r3, #16
 800b044:	b2da      	uxtb	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b052:	0e1b      	lsrs	r3, r3, #24
 800b054:	b2da      	uxtb	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800b078:	2301      	movs	r3, #1
 800b07a:	f7ff fc8f 	bl	800a99c <disk_write>
			fs->fsi_flag = 0;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800b08c:	2200      	movs	r2, #0
 800b08e:	2100      	movs	r1, #0
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff fca3 	bl	800a9dc <disk_ioctl>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <sync_fs+0x152>
			res = FR_DISK_ERR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b083      	sub	sp, #12
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	3b02      	subs	r3, #2
 800b0b8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b0c0:	3b02      	subs	r3, #2
 800b0c2:	683a      	ldr	r2, [r7, #0]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d301      	bcc.n	800b0cc <clust2sect+0x22>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	e00a      	b.n	800b0e2 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	fb03 f202 	mul.w	r2, r3, r2
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800b0e0:	4413      	add	r3, r2
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bc80      	pop	{r7}
 800b0ea:	4770      	bx	lr

0800b0ec <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d905      	bls.n	800b108 <get_fat+0x1c>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d302      	bcc.n	800b10e <get_fat+0x22>
		val = 1;	/* Internal error */
 800b108:	2301      	movs	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e0d7      	b.n	800b2be <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b10e:	f04f 33ff 	mov.w	r3, #4294967295
 800b112:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	f000 808f 	beq.w	800b23e <get_fat+0x152>
 800b120:	2b03      	cmp	r3, #3
 800b122:	f300 80c2 	bgt.w	800b2aa <get_fat+0x1be>
 800b126:	2b01      	cmp	r3, #1
 800b128:	d002      	beq.n	800b130 <get_fat+0x44>
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d059      	beq.n	800b1e2 <get_fat+0xf6>
 800b12e:	e0bc      	b.n	800b2aa <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b14a:	4619      	mov	r1, r3
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b152:	4413      	add	r3, r2
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff fecb 	bl	800aef2 <move_window>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f040 80a6 	bne.w	800b2b0 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	60fa      	str	r2, [r7, #12]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b170:	fbb3 f1f2 	udiv	r1, r3, r2
 800b174:	fb02 f201 	mul.w	r2, r2, r1
 800b178:	1a9b      	subs	r3, r3, r2
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	5cd3      	ldrb	r3, [r2, r3]
 800b17e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b18c:	4619      	mov	r1, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	fbb3 f3f1 	udiv	r3, r3, r1
 800b194:	4413      	add	r3, r2
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff feaa 	bl	800aef2 <move_window>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f040 8087 	bne.w	800b2b4 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1b4:	fb02 f201 	mul.w	r2, r2, r1
 800b1b8:	1a9b      	subs	r3, r3, r2
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	5cd3      	ldrb	r3, [r2, r3]
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <get_fat+0xec>
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	091b      	lsrs	r3, r3, #4
 800b1d6:	e002      	b.n	800b1de <get_fat+0xf2>
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1de:	617b      	str	r3, [r7, #20]
			break;
 800b1e0:	e06d      	b.n	800b2be <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b1ee:	085b      	lsrs	r3, r3, #1
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff fe77 	bl	800aef2 <move_window>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d156      	bne.n	800b2b8 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b214:	fbb3 f1f2 	udiv	r1, r3, r2
 800b218:	fb02 f201 	mul.w	r2, r2, r1
 800b21c:	1a9b      	subs	r3, r3, r2
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	4413      	add	r3, r2
 800b222:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	3301      	adds	r3, #1
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	021b      	lsls	r3, r3, #8
 800b22c:	b21a      	sxth	r2, r3
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b21b      	sxth	r3, r3
 800b234:	4313      	orrs	r3, r2
 800b236:	b21b      	sxth	r3, r3
 800b238:	b29b      	uxth	r3, r3
 800b23a:	617b      	str	r3, [r7, #20]
			break;
 800b23c:	e03f      	b.n	800b2be <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b24a:	089b      	lsrs	r3, r3, #2
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	4619      	mov	r1, r3
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	fbb3 f3f1 	udiv	r3, r3, r1
 800b256:	4413      	add	r3, r2
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff fe49 	bl	800aef2 <move_window>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d12a      	bne.n	800b2bc <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b270:	fbb3 f1f2 	udiv	r1, r3, r2
 800b274:	fb02 f201 	mul.w	r2, r2, r1
 800b278:	1a9b      	subs	r3, r3, r2
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	4413      	add	r3, r2
 800b27e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	3303      	adds	r3, #3
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	061a      	lsls	r2, r3, #24
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	3302      	adds	r3, #2
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	041b      	lsls	r3, r3, #16
 800b290:	4313      	orrs	r3, r2
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	3201      	adds	r2, #1
 800b296:	7812      	ldrb	r2, [r2, #0]
 800b298:	0212      	lsls	r2, r2, #8
 800b29a:	4313      	orrs	r3, r2
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	7812      	ldrb	r2, [r2, #0]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b2a6:	617b      	str	r3, [r7, #20]
			break;
 800b2a8:	e009      	b.n	800b2be <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	617b      	str	r3, [r7, #20]
 800b2ae:	e006      	b.n	800b2be <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2b0:	bf00      	nop
 800b2b2:	e004      	b.n	800b2be <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2b4:	bf00      	nop
 800b2b6:	e002      	b.n	800b2be <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b2b8:	bf00      	nop
 800b2ba:	e000      	b.n	800b2be <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b2bc:	bf00      	nop
		}
	}

	return val;
 800b2be:	697b      	ldr	r3, [r7, #20]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d905      	bls.n	800b2e6 <put_fat+0x1e>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d302      	bcc.n	800b2ec <put_fat+0x24>
		res = FR_INT_ERR;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	77fb      	strb	r3, [r7, #31]
 800b2ea:	e128      	b.n	800b53e <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	f000 80c3 	beq.w	800b47e <put_fat+0x1b6>
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	f300 8116 	bgt.w	800b52a <put_fat+0x262>
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d003      	beq.n	800b30a <put_fat+0x42>
 800b302:	2b02      	cmp	r3, #2
 800b304:	f000 8087 	beq.w	800b416 <put_fat+0x14e>
 800b308:	e10f      	b.n	800b52a <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	617b      	str	r3, [r7, #20]
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	085b      	lsrs	r3, r3, #1
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	4413      	add	r3, r2
 800b316:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b324:	4619      	mov	r1, r3
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	fbb3 f3f1 	udiv	r3, r3, r1
 800b32c:	4413      	add	r3, r2
 800b32e:	4619      	mov	r1, r3
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7ff fdde 	bl	800aef2 <move_window>
 800b336:	4603      	mov	r3, r0
 800b338:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b33a:	7ffb      	ldrb	r3, [r7, #31]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f040 80f7 	bne.w	800b530 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	617a      	str	r2, [r7, #20]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b34e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b352:	fb02 f201 	mul.w	r2, r2, r1
 800b356:	1a9b      	subs	r3, r3, r2
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00d      	beq.n	800b384 <put_fat+0xbc>
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	b25b      	sxtb	r3, r3
 800b36e:	f003 030f 	and.w	r3, r3, #15
 800b372:	b25a      	sxtb	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	b2db      	uxtb	r3, r3
 800b378:	011b      	lsls	r3, r3, #4
 800b37a:	b25b      	sxtb	r3, r3
 800b37c:	4313      	orrs	r3, r2
 800b37e:	b25b      	sxtb	r3, r3
 800b380:	b2db      	uxtb	r3, r3
 800b382:	e001      	b.n	800b388 <put_fat+0xc0>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	b2db      	uxtb	r3, r3
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3a8:	4413      	add	r3, r2
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f7ff fda0 	bl	800aef2 <move_window>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3b6:	7ffb      	ldrb	r3, [r7, #31]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f040 80bb 	bne.w	800b534 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3cc:	fb02 f201 	mul.w	r2, r2, r1
 800b3d0:	1a9b      	subs	r3, r3, r2
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <put_fat+0x122>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	091b      	lsrs	r3, r3, #4
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	e00e      	b.n	800b408 <put_fat+0x140>
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	b25b      	sxtb	r3, r3
 800b3f0:	f023 030f 	bic.w	r3, r3, #15
 800b3f4:	b25a      	sxtb	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	b25b      	sxtb	r3, r3
 800b3fc:	f003 030f 	and.w	r3, r3, #15
 800b400:	b25b      	sxtb	r3, r3
 800b402:	4313      	orrs	r3, r2
 800b404:	b25b      	sxtb	r3, r3
 800b406:	b2db      	uxtb	r3, r3
 800b408:	69ba      	ldr	r2, [r7, #24]
 800b40a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800b414:	e093      	b.n	800b53e <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b422:	085b      	lsrs	r3, r3, #1
 800b424:	b29b      	uxth	r3, r3
 800b426:	4619      	mov	r1, r3
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b42e:	4413      	add	r3, r2
 800b430:	4619      	mov	r1, r3
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f7ff fd5d 	bl	800aef2 <move_window>
 800b438:	4603      	mov	r3, r0
 800b43a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b43c:	7ffb      	ldrb	r3, [r7, #31]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d17a      	bne.n	800b538 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b44c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b450:	fb02 f201 	mul.w	r2, r2, r1
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	4413      	add	r3, r2
 800b45a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	b29b      	uxth	r3, r3
 800b468:	0a1b      	lsrs	r3, r3, #8
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	3301      	adds	r3, #1
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800b47c:	e05f      	b.n	800b53e <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b48a:	089b      	lsrs	r3, r3, #2
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	4619      	mov	r1, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	fbb3 f3f1 	udiv	r3, r3, r1
 800b496:	4413      	add	r3, r2
 800b498:	4619      	mov	r1, r3
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7ff fd29 	bl	800aef2 <move_window>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4a4:	7ffb      	ldrb	r3, [r7, #31]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d148      	bne.n	800b53c <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b4b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4b8:	fb02 f201 	mul.w	r2, r2, r1
 800b4bc:	1a9b      	subs	r3, r3, r2
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	3303      	adds	r3, #3
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	061a      	lsls	r2, r3, #24
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	3302      	adds	r3, #2
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	041b      	lsls	r3, r3, #16
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	69ba      	ldr	r2, [r7, #24]
 800b4d8:	3201      	adds	r2, #1
 800b4da:	7812      	ldrb	r2, [r2, #0]
 800b4dc:	0212      	lsls	r2, r2, #8
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	69ba      	ldr	r2, [r7, #24]
 800b4e2:	7812      	ldrb	r2, [r2, #0]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	701a      	strb	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	0a1b      	lsrs	r3, r3, #8
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	3301      	adds	r3, #1
 800b504:	b2d2      	uxtb	r2, r2
 800b506:	701a      	strb	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	0c1a      	lsrs	r2, r3, #16
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	3302      	adds	r3, #2
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	0e1a      	lsrs	r2, r3, #24
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	3303      	adds	r3, #3
 800b51c:	b2d2      	uxtb	r2, r2
 800b51e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800b528:	e009      	b.n	800b53e <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800b52a:	2302      	movs	r3, #2
 800b52c:	77fb      	strb	r3, [r7, #31]
 800b52e:	e006      	b.n	800b53e <put_fat+0x276>
			if (res != FR_OK) break;
 800b530:	bf00      	nop
 800b532:	e004      	b.n	800b53e <put_fat+0x276>
			if (res != FR_OK) break;
 800b534:	bf00      	nop
 800b536:	e002      	b.n	800b53e <put_fat+0x276>
			if (res != FR_OK) break;
 800b538:	bf00      	nop
 800b53a:	e000      	b.n	800b53e <put_fat+0x276>
			if (res != FR_OK) break;
 800b53c:	bf00      	nop
		}
	}

	return res;
 800b53e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3720      	adds	r7, #32
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d905      	bls.n	800b564 <remove_chain+0x1c>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	429a      	cmp	r2, r3
 800b562:	d302      	bcc.n	800b56a <remove_chain+0x22>
		res = FR_INT_ERR;
 800b564:	2302      	movs	r3, #2
 800b566:	73fb      	strb	r3, [r7, #15]
 800b568:	e043      	b.n	800b5f2 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b56e:	e036      	b.n	800b5de <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7ff fdba 	bl	800b0ec <get_fat>
 800b578:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d035      	beq.n	800b5ec <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d102      	bne.n	800b58c <remove_chain+0x44>
 800b586:	2302      	movs	r3, #2
 800b588:	73fb      	strb	r3, [r7, #15]
 800b58a:	e032      	b.n	800b5f2 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b592:	d102      	bne.n	800b59a <remove_chain+0x52>
 800b594:	2301      	movs	r3, #1
 800b596:	73fb      	strb	r3, [r7, #15]
 800b598:	e02b      	b.n	800b5f2 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800b59a:	2200      	movs	r2, #0
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fe92 	bl	800b2c8 <put_fat>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d120      	bne.n	800b5f0 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b8:	d00f      	beq.n	800b5da <remove_chain+0x92>
				fs->free_clust++;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b5c0:	1c5a      	adds	r2, r3, #1
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800b5ce:	f043 0301 	orr.w	r3, r3, #1
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d3c2      	bcc.n	800b570 <remove_chain+0x28>
 800b5ea:	e002      	b.n	800b5f2 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800b5ec:	bf00      	nop
 800b5ee:	e000      	b.n	800b5f2 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800b5f0:	bf00      	nop
		}
	}

	return res;
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10f      	bne.n	800b62c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b612:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d005      	beq.n	800b626 <create_chain+0x2a>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	429a      	cmp	r2, r3
 800b624:	d31c      	bcc.n	800b660 <create_chain+0x64>
 800b626:	2301      	movs	r3, #1
 800b628:	613b      	str	r3, [r7, #16]
 800b62a:	e019      	b.n	800b660 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7ff fd5c 	bl	800b0ec <get_fat>
 800b634:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d801      	bhi.n	800b640 <create_chain+0x44>
 800b63c:	2301      	movs	r3, #1
 800b63e:	e076      	b.n	800b72e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b646:	d101      	bne.n	800b64c <create_chain+0x50>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	e070      	b.n	800b72e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	429a      	cmp	r2, r3
 800b656:	d201      	bcs.n	800b65c <create_chain+0x60>
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	e068      	b.n	800b72e <create_chain+0x132>
		scl = clst;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	3301      	adds	r3, #1
 800b668:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	429a      	cmp	r2, r3
 800b674:	d307      	bcc.n	800b686 <create_chain+0x8a>
			ncl = 2;
 800b676:	2302      	movs	r3, #2
 800b678:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d901      	bls.n	800b686 <create_chain+0x8a>
 800b682:	2300      	movs	r3, #0
 800b684:	e053      	b.n	800b72e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800b686:	6979      	ldr	r1, [r7, #20]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff fd2f 	bl	800b0ec <get_fat>
 800b68e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00e      	beq.n	800b6b4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69c:	d002      	beq.n	800b6a4 <create_chain+0xa8>
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d101      	bne.n	800b6a8 <create_chain+0xac>
			return cs;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	e042      	b.n	800b72e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d1d9      	bne.n	800b664 <create_chain+0x68>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e03c      	b.n	800b72e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800b6b4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800b6b6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800b6ba:	6979      	ldr	r1, [r7, #20]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f7ff fe03 	bl	800b2c8 <put_fat>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d109      	bne.n	800b6e0 <create_chain+0xe4>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d006      	beq.n	800b6e0 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7ff fdf6 	bl	800b2c8 <put_fat>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d11a      	bne.n	800b71c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f8:	d018      	beq.n	800b72c <create_chain+0x130>
			fs->free_clust--;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b700:	1e5a      	subs	r2, r3, #1
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800b70e:	f043 0301 	orr.w	r3, r3, #1
 800b712:	b2da      	uxtb	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800b71a:	e007      	b.n	800b72c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d102      	bne.n	800b728 <create_chain+0x12c>
 800b722:	f04f 33ff 	mov.w	r3, #4294967295
 800b726:	e000      	b.n	800b72a <create_chain+0x12e>
 800b728:	2301      	movs	r3, #1
 800b72a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800b72c:	697b      	ldr	r3, [r7, #20]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800b736:	b480      	push	{r7}
 800b738:	b087      	sub	sp, #28
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b744:	3304      	adds	r3, #4
 800b746:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b750:	461a      	mov	r2, r3
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	fbb3 f3f2 	udiv	r3, r3, r2
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	6812      	ldr	r2, [r2, #0]
 800b75c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800b760:	fbb3 f3f2 	udiv	r3, r3, r2
 800b764:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	1d1a      	adds	r2, r3, #4
 800b76a:	613a      	str	r2, [r7, #16]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <clmt_clust+0x44>
 800b776:	2300      	movs	r3, #0
 800b778:	e010      	b.n	800b79c <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d307      	bcc.n	800b792 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	3304      	adds	r3, #4
 800b78e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b790:	e7e9      	b.n	800b766 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 800b792:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	4413      	add	r3, r2
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	371c      	adds	r7, #28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bc80      	pop	{r7}
 800b7a4:	4770      	bx	lr

0800b7a6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b086      	sub	sp, #24
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d006      	beq.n	800b7d2 <dir_sdi+0x2c>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d301      	bcc.n	800b7d6 <dir_sdi+0x30>
		return FR_INT_ERR;
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	e082      	b.n	800b8dc <dir_sdi+0x136>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10a      	bne.n	800b7f2 <dir_sdi+0x4c>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d104      	bne.n	800b7f2 <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b7f0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10f      	bne.n	800b818 <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800b800:	461a      	mov	r2, r3
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	4293      	cmp	r3, r2
 800b806:	d301      	bcc.n	800b80c <dir_sdi+0x66>
			return FR_INT_ERR;
 800b808:	2302      	movs	r3, #2
 800b80a:	e067      	b.n	800b8dc <dir_sdi+0x136>
		sect = dp->fs->dirbase;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b814:	613b      	str	r3, [r7, #16]
 800b816:	e036      	b.n	800b886 <dir_sdi+0xe0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b820:	095b      	lsrs	r3, r3, #5
 800b822:	b29b      	uxth	r3, r3
 800b824:	461a      	mov	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b82e:	fb03 f302 	mul.w	r3, r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800b834:	e01c      	b.n	800b870 <dir_sdi+0xca>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6979      	ldr	r1, [r7, #20]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff fc55 	bl	800b0ec <get_fat>
 800b842:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84a:	d101      	bne.n	800b850 <dir_sdi+0xaa>
 800b84c:	2301      	movs	r3, #1
 800b84e:	e045      	b.n	800b8dc <dir_sdi+0x136>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d906      	bls.n	800b864 <dir_sdi+0xbe>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	429a      	cmp	r2, r3
 800b862:	d301      	bcc.n	800b868 <dir_sdi+0xc2>
				return FR_INT_ERR;
 800b864:	2302      	movs	r3, #2
 800b866:	e039      	b.n	800b8dc <dir_sdi+0x136>
			idx -= ic;
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	429a      	cmp	r2, r3
 800b876:	d2de      	bcs.n	800b836 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6979      	ldr	r1, [r7, #20]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7ff fc13 	bl	800b0aa <clust2sect>
 800b884:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <dir_sdi+0xf0>
 800b892:	2302      	movs	r3, #2
 800b894:	e022      	b.n	800b8dc <dir_sdi+0x136>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b89e:	095b      	lsrs	r3, r3, #5
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	441a      	add	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b8c0:	095b      	lsrs	r3, r3, #5
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8cc:	fb02 f201 	mul.w	r2, r2, r1
 800b8d0:	1a9b      	subs	r3, r3, r2
 800b8d2:	015b      	lsls	r3, r3, #5
 800b8d4:	18c2      	adds	r2, r0, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b8e4:	b590      	push	{r4, r7, lr}
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	88db      	ldrh	r3, [r3, #6]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d003      	beq.n	800b906 <dir_next+0x22>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <dir_next+0x26>
		return FR_NO_FILE;
 800b906:	2304      	movs	r3, #4
 800b908:	e0e2      	b.n	800bad0 <dir_next+0x1ec>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b912:	095b      	lsrs	r3, r3, #5
 800b914:	b29b      	uxth	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b91e:	fb02 f201 	mul.w	r2, r2, r1
 800b922:	1a9b      	subs	r3, r3, r2
 800b924:	2b00      	cmp	r3, #0
 800b926:	f040 80ba 	bne.w	800ba9e <dir_next+0x1ba>
		dp->sect++;					/* Next sector */
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <dir_next+0x6e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800b944:	461a      	mov	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4293      	cmp	r3, r2
 800b94a:	f0c0 80a8 	bcc.w	800ba9e <dir_next+0x1ba>
				return FR_NO_FILE;
 800b94e:	2304      	movs	r3, #4
 800b950:	e0be      	b.n	800bad0 <dir_next+0x1ec>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b95a:	095b      	lsrs	r3, r3, #5
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	461a      	mov	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	fbb3 f3f2 	udiv	r3, r3, r2
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800b96e:	3a01      	subs	r2, #1
 800b970:	4013      	ands	r3, r2
 800b972:	2b00      	cmp	r3, #0
 800b974:	f040 8093 	bne.w	800ba9e <dir_next+0x1ba>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	4619      	mov	r1, r3
 800b982:	4610      	mov	r0, r2
 800b984:	f7ff fbb2 	bl	800b0ec <get_fat>
 800b988:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d801      	bhi.n	800b994 <dir_next+0xb0>
 800b990:	2302      	movs	r3, #2
 800b992:	e09d      	b.n	800bad0 <dir_next+0x1ec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99a:	d101      	bne.n	800b9a0 <dir_next+0xbc>
 800b99c:	2301      	movs	r3, #1
 800b99e:	e097      	b.n	800bad0 <dir_next+0x1ec>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d36b      	bcc.n	800ba86 <dir_next+0x1a2>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <dir_next+0xd4>
 800b9b4:	2304      	movs	r3, #4
 800b9b6:	e08b      	b.n	800bad0 <dir_next+0x1ec>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7ff fe1a 	bl	800b5fc <create_chain>
 800b9c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <dir_next+0xf0>
 800b9d0:	2307      	movs	r3, #7
 800b9d2:	e07d      	b.n	800bad0 <dir_next+0x1ec>
					if (clst == 1) return FR_INT_ERR;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d101      	bne.n	800b9de <dir_next+0xfa>
 800b9da:	2302      	movs	r3, #2
 800b9dc:	e078      	b.n	800bad0 <dir_next+0x1ec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e4:	d101      	bne.n	800b9ea <dir_next+0x106>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e072      	b.n	800bad0 <dir_next+0x1ec>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fa36 	bl	800ae60 <sync_window>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <dir_next+0x11a>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e068      	b.n	800bad0 <dir_next+0x1ec>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4618      	mov	r0, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	2100      	movs	r1, #0
 800ba10:	f7ff f820 	bl	800aa54 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681c      	ldr	r4, [r3, #0]
 800ba1c:	6979      	ldr	r1, [r7, #20]
 800ba1e:	4610      	mov	r0, r2
 800ba20:	f7ff fb43 	bl	800b0aa <clust2sect>
 800ba24:	4603      	mov	r3, r0
 800ba26:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	613b      	str	r3, [r7, #16]
 800ba2e:	e018      	b.n	800ba62 <dir_next+0x17e>
						dp->fs->wflag = 1;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff fa0e 	bl	800ae60 <sync_window>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <dir_next+0x16a>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e040      	b.n	800bad0 <dir_next+0x1ec>
						dp->fs->winsect++;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800ba56:	3201      	adds	r2, #1
 800ba58:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	613b      	str	r3, [r7, #16]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d3de      	bcc.n	800ba30 <dir_next+0x14c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	1a8a      	subs	r2, r1, r2
 800ba82:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6979      	ldr	r1, [r7, #20]
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7ff fb09 	bl	800b0aa <clust2sect>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4618      	mov	r0, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800bab4:	095b      	lsrs	r3, r3, #5
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	461a      	mov	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	fbb3 f1f2 	udiv	r1, r3, r2
 800bac0:	fb02 f201 	mul.w	r2, r2, r1
 800bac4:	1a9b      	subs	r3, r3, r2
 800bac6:	015b      	lsls	r3, r3, #5
 800bac8:	18c2      	adds	r2, r0, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	371c      	adds	r7, #28
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd90      	pop	{r4, r7, pc}

0800bad8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800bae2:	2100      	movs	r1, #0
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7ff fe5e 	bl	800b7a6 <dir_sdi>
 800baea:	4603      	mov	r3, r0
 800baec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800baee:	7bfb      	ldrb	r3, [r7, #15]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d12d      	bne.n	800bb50 <dir_alloc+0x78>
		n = 0;
 800baf4:	2300      	movs	r3, #0
 800baf6:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	4619      	mov	r1, r3
 800bb02:	4610      	mov	r0, r2
 800bb04:	f7ff f9f5 	bl	800aef2 <move_window>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d11d      	bne.n	800bb4e <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	695b      	ldr	r3, [r3, #20]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2be5      	cmp	r3, #229	; 0xe5
 800bb1a:	d004      	beq.n	800bb26 <dir_alloc+0x4e>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d107      	bne.n	800bb36 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	60bb      	str	r3, [r7, #8]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d102      	bne.n	800bb3a <dir_alloc+0x62>
 800bb34:	e00c      	b.n	800bb50 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb36:	2300      	movs	r3, #0
 800bb38:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7ff fed1 	bl	800b8e4 <dir_next>
 800bb42:	4603      	mov	r3, r0
 800bb44:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0d5      	beq.n	800baf8 <dir_alloc+0x20>
 800bb4c:	e000      	b.n	800bb50 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800bb4e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	2b04      	cmp	r3, #4
 800bb54:	d101      	bne.n	800bb5a <dir_alloc+0x82>
 800bb56:	2307      	movs	r3, #7
 800bb58:	73fb      	strb	r3, [r7, #15]
	return res;
 800bb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	331b      	adds	r3, #27
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	021b      	lsls	r3, r3, #8
 800bb76:	b21a      	sxth	r2, r3
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	331a      	adds	r3, #26
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b21b      	sxth	r3, r3
 800bb80:	4313      	orrs	r3, r2
 800bb82:	b21b      	sxth	r3, r3
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d10f      	bne.n	800bbb2 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	3315      	adds	r3, #21
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	021b      	lsls	r3, r3, #8
 800bb9a:	b21a      	sxth	r2, r3
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	3314      	adds	r3, #20
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	b21b      	sxth	r3, r3
 800bba4:	4313      	orrs	r3, r2
 800bba6:	b21b      	sxth	r3, r3
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	041b      	lsls	r3, r3, #16
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]

	return cl;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bc80      	pop	{r7}
 800bbbc:	4770      	bx	lr

0800bbbe <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b083      	sub	sp, #12
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	331a      	adds	r3, #26
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	b2d2      	uxtb	r2, r2
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	0a1b      	lsrs	r3, r3, #8
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	331b      	adds	r3, #27
 800bbde:	b2d2      	uxtb	r2, r2
 800bbe0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	0c1a      	lsrs	r2, r3, #16
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3314      	adds	r3, #20
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	701a      	strb	r2, [r3, #0]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	0c1b      	lsrs	r3, r3, #16
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	0a1b      	lsrs	r3, r3, #8
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	3315      	adds	r3, #21
 800bbfc:	b2d2      	uxtb	r2, r2
 800bbfe:	701a      	strb	r2, [r3, #0]
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bc80      	pop	{r7}
 800bc08:	4770      	bx	lr
	...

0800bc0c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc1e:	1e5a      	subs	r2, r3, #1
 800bc20:	4613      	mov	r3, r2
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	4413      	add	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	613b      	str	r3, [r7, #16]
 800bc30:	2301      	movs	r3, #1
 800bc32:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800bc34:	4a2b      	ldr	r2, [pc, #172]	; (800bce4 <cmp_lfn+0xd8>)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	4413      	add	r3, r2
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	4413      	add	r3, r2
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	021b      	lsls	r3, r3, #8
 800bc46:	b21a      	sxth	r2, r3
 800bc48:	4926      	ldr	r1, [pc, #152]	; (800bce4 <cmp_lfn+0xd8>)
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	440b      	add	r3, r1
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	4619      	mov	r1, r3
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	440b      	add	r3, r1
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	b21b      	sxth	r3, r3
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	b21b      	sxth	r3, r3
 800bc5e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800bc60:	89fb      	ldrh	r3, [r7, #14]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d019      	beq.n	800bc9a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800bc66:	89bb      	ldrh	r3, [r7, #12]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f002 f8eb 	bl	800de44 <ff_wtoupper>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2bfe      	cmp	r3, #254	; 0xfe
 800bc76:	d80e      	bhi.n	800bc96 <cmp_lfn+0x8a>
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	1c5a      	adds	r2, r3, #1
 800bc7c:	617a      	str	r2, [r7, #20]
 800bc7e:	005b      	lsls	r3, r3, #1
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f002 f8dc 	bl	800de44 <ff_wtoupper>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	461a      	mov	r2, r3
 800bc90:	89fb      	ldrh	r3, [r7, #14]
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d008      	beq.n	800bca8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800bc96:	2300      	movs	r3, #0
 800bc98:	e01f      	b.n	800bcda <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800bc9a:	89bb      	ldrh	r3, [r7, #12]
 800bc9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d001      	beq.n	800bca8 <cmp_lfn+0x9c>
 800bca4:	2300      	movs	r3, #0
 800bca6:	e018      	b.n	800bcda <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	2b0c      	cmp	r3, #12
 800bcb2:	d9bf      	bls.n	800bc34 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00b      	beq.n	800bcd8 <cmp_lfn+0xcc>
 800bcc0:	89fb      	ldrh	r3, [r7, #14]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d008      	beq.n	800bcd8 <cmp_lfn+0xcc>
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	4413      	add	r3, r2
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d001      	beq.n	800bcd8 <cmp_lfn+0xcc>
		return 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	e000      	b.n	800bcda <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800bcd8:	2301      	movs	r3, #1
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	0800e980 	.word	0x0800e980

0800bce8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b089      	sub	sp, #36	; 0x24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	71fb      	strb	r3, [r7, #7]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	330d      	adds	r3, #13
 800bd02:	79ba      	ldrb	r2, [r7, #6]
 800bd04:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	330b      	adds	r3, #11
 800bd0a:	220f      	movs	r2, #15
 800bd0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	330c      	adds	r3, #12
 800bd12:	2200      	movs	r2, #0
 800bd14:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	331a      	adds	r3, #26
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	701a      	strb	r2, [r3, #0]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	331b      	adds	r3, #27
 800bd22:	2200      	movs	r2, #0
 800bd24:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	1e5a      	subs	r2, r3, #1
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	005b      	lsls	r3, r3, #1
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	82fb      	strh	r3, [r7, #22]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800bd3e:	8afb      	ldrh	r3, [r7, #22]
 800bd40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d007      	beq.n	800bd58 <fit_lfn+0x70>
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	1c5a      	adds	r2, r3, #1
 800bd4c:	61fa      	str	r2, [r7, #28]
 800bd4e:	005b      	lsls	r3, r3, #1
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	4413      	add	r3, r2
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800bd58:	4a1c      	ldr	r2, [pc, #112]	; (800bdcc <fit_lfn+0xe4>)
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	461a      	mov	r2, r3
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	4413      	add	r3, r2
 800bd66:	8afa      	ldrh	r2, [r7, #22]
 800bd68:	b2d2      	uxtb	r2, r2
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	8afb      	ldrh	r3, [r7, #22]
 800bd6e:	0a1b      	lsrs	r3, r3, #8
 800bd70:	b299      	uxth	r1, r3
 800bd72:	4a16      	ldr	r2, [pc, #88]	; (800bdcc <fit_lfn+0xe4>)
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	4413      	add	r3, r2
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	4413      	add	r3, r2
 800bd80:	b2ca      	uxtb	r2, r1
 800bd82:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800bd84:	8afb      	ldrh	r3, [r7, #22]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d102      	bne.n	800bd90 <fit_lfn+0xa8>
 800bd8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	3301      	adds	r3, #1
 800bd94:	61bb      	str	r3, [r7, #24]
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	2b0c      	cmp	r3, #12
 800bd9a:	d9d0      	bls.n	800bd3e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800bd9c:	8afb      	ldrh	r3, [r7, #22]
 800bd9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d006      	beq.n	800bdb4 <fit_lfn+0xcc>
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	4413      	add	r3, r2
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d103      	bne.n	800bdbc <fit_lfn+0xd4>
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	79fa      	ldrb	r2, [r7, #7]
 800bdc0:	701a      	strb	r2, [r3, #0]
}
 800bdc2:	bf00      	nop
 800bdc4:	3724      	adds	r7, #36	; 0x24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bc80      	pop	{r7}
 800bdca:	4770      	bx	lr
 800bdcc:	0800e980 	.word	0x0800e980

0800bdd0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08c      	sub	sp, #48	; 0x30
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bdde:	220b      	movs	r2, #11
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f7fe fe18 	bl	800aa18 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b05      	cmp	r3, #5
 800bdec:	d92b      	bls.n	800be46 <gen_numname+0x76>
		sr = seq;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bdf2:	e022      	b.n	800be3a <gen_numname+0x6a>
			wc = *lfn++;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	1c9a      	adds	r2, r3, #2
 800bdf8:	607a      	str	r2, [r7, #4]
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bdfe:	2300      	movs	r3, #0
 800be00:	62bb      	str	r3, [r7, #40]	; 0x28
 800be02:	e017      	b.n	800be34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	005a      	lsls	r2, r3, #1
 800be08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be0a:	f003 0301 	and.w	r3, r3, #1
 800be0e:	4413      	add	r3, r2
 800be10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800be12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be14:	085b      	lsrs	r3, r3, #1
 800be16:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <gen_numname+0x5e>
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800be28:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800be2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	3301      	adds	r3, #1
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	2b0f      	cmp	r3, #15
 800be38:	d9e4      	bls.n	800be04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1d8      	bne.n	800bdf4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800be46:	2307      	movs	r3, #7
 800be48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	f003 030f 	and.w	r3, r3, #15
 800be52:	b2db      	uxtb	r3, r3
 800be54:	3330      	adds	r3, #48	; 0x30
 800be56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800be5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be5e:	2b39      	cmp	r3, #57	; 0x39
 800be60:	d904      	bls.n	800be6c <gen_numname+0x9c>
 800be62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be66:	3307      	adds	r3, #7
 800be68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800be6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6e:	1e5a      	subs	r2, r3, #1
 800be70:	62ba      	str	r2, [r7, #40]	; 0x28
 800be72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800be76:	4413      	add	r3, r2
 800be78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	091b      	lsrs	r3, r3, #4
 800be84:	603b      	str	r3, [r7, #0]
	} while (seq);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1de      	bne.n	800be4a <gen_numname+0x7a>
	ns[i] = '~';
 800be8c:	f107 0214 	add.w	r2, r7, #20
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	4413      	add	r3, r2
 800be94:	227e      	movs	r2, #126	; 0x7e
 800be96:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800be98:	2300      	movs	r3, #0
 800be9a:	627b      	str	r3, [r7, #36]	; 0x24
 800be9c:	e002      	b.n	800bea4 <gen_numname+0xd4>
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	3301      	adds	r3, #1
 800bea2:	627b      	str	r3, [r7, #36]	; 0x24
 800bea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d205      	bcs.n	800beb8 <gen_numname+0xe8>
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb0:	4413      	add	r3, r2
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	d1f2      	bne.n	800be9e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	2b07      	cmp	r3, #7
 800bebc:	d808      	bhi.n	800bed0 <gen_numname+0x100>
 800bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec0:	1c5a      	adds	r2, r3, #1
 800bec2:	62ba      	str	r2, [r7, #40]	; 0x28
 800bec4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bec8:	4413      	add	r3, r2
 800beca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bece:	e000      	b.n	800bed2 <gen_numname+0x102>
 800bed0:	2120      	movs	r1, #32
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	1c5a      	adds	r2, r3, #1
 800bed6:	627a      	str	r2, [r7, #36]	; 0x24
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	460a      	mov	r2, r1
 800bede:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	2b07      	cmp	r3, #7
 800bee4:	d9e8      	bls.n	800beb8 <gen_numname+0xe8>
}
 800bee6:	bf00      	nop
 800bee8:	bf00      	nop
 800beea:	3730      	adds	r7, #48	; 0x30
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800befc:	230b      	movs	r3, #11
 800befe:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	0852      	lsrs	r2, r2, #1
 800bf06:	01db      	lsls	r3, r3, #7
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	1c59      	adds	r1, r3, #1
 800bf10:	6079      	str	r1, [r7, #4]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	4413      	add	r3, r2
 800bf16:	73fb      	strb	r3, [r7, #15]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1ed      	bne.n	800bf00 <sum_sfn+0x10>
	return sum;
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bc80      	pop	{r7}
 800bf2e:	4770      	bx	lr

0800bf30 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bf38:	2100      	movs	r1, #0
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff fc33 	bl	800b7a6 <dir_sdi>
 800bf40:	4603      	mov	r3, r0
 800bf42:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bf44:	7dfb      	ldrb	r3, [r7, #23]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <dir_find+0x1e>
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	e0a0      	b.n	800c090 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800bf4e:	23ff      	movs	r3, #255	; 0xff
 800bf50:	753b      	strb	r3, [r7, #20]
 800bf52:	7d3b      	ldrb	r3, [r7, #20]
 800bf54:	757b      	strb	r3, [r7, #21]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf5c:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f7fe ffc2 	bl	800aef2 <move_window>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf72:	7dfb      	ldrb	r3, [r7, #23]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f040 8085 	bne.w	800c084 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf86:	7dbb      	ldrb	r3, [r7, #22]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <dir_find+0x62>
 800bf8c:	2304      	movs	r3, #4
 800bf8e:	75fb      	strb	r3, [r7, #23]
 800bf90:	e07d      	b.n	800c08e <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	330b      	adds	r3, #11
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf9c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bf9e:	7dbb      	ldrb	r3, [r7, #22]
 800bfa0:	2be5      	cmp	r3, #229	; 0xe5
 800bfa2:	d007      	beq.n	800bfb4 <dir_find+0x84>
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	f003 0308 	and.w	r3, r3, #8
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d009      	beq.n	800bfc2 <dir_find+0x92>
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
 800bfb0:	2b0f      	cmp	r3, #15
 800bfb2:	d006      	beq.n	800bfc2 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800bfb4:	23ff      	movs	r3, #255	; 0xff
 800bfb6:	757b      	strb	r3, [r7, #21]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfbe:	849a      	strh	r2, [r3, #36]	; 0x24
 800bfc0:	e055      	b.n	800c06e <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	2b0f      	cmp	r3, #15
 800bfc6:	d12f      	bne.n	800c028 <dir_find+0xf8>
				if (dp->lfn) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d04e      	beq.n	800c06e <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bfd0:	7dbb      	ldrb	r3, [r7, #22]
 800bfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00c      	beq.n	800bff4 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	7b5b      	ldrb	r3, [r3, #13]
 800bfde:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800bfe0:	7dbb      	ldrb	r3, [r7, #22]
 800bfe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfe6:	75bb      	strb	r3, [r7, #22]
 800bfe8:	7dbb      	ldrb	r3, [r7, #22]
 800bfea:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	88da      	ldrh	r2, [r3, #6]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800bff4:	7dba      	ldrb	r2, [r7, #22]
 800bff6:	7d7b      	ldrb	r3, [r7, #21]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d112      	bne.n	800c022 <dir_find+0xf2>
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	330d      	adds	r3, #13
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	7d3a      	ldrb	r2, [r7, #20]
 800c004:	429a      	cmp	r2, r3
 800c006:	d10c      	bne.n	800c022 <dir_find+0xf2>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a1b      	ldr	r3, [r3, #32]
 800c00c:	6939      	ldr	r1, [r7, #16]
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff fdfc 	bl	800bc0c <cmp_lfn>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <dir_find+0xf2>
 800c01a:	7d7b      	ldrb	r3, [r7, #21]
 800c01c:	3b01      	subs	r3, #1
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	e000      	b.n	800c024 <dir_find+0xf4>
 800c022:	23ff      	movs	r3, #255	; 0xff
 800c024:	757b      	strb	r3, [r7, #21]
 800c026:	e022      	b.n	800c06e <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c028:	7d7b      	ldrb	r3, [r7, #21]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d107      	bne.n	800c03e <dir_find+0x10e>
 800c02e:	6938      	ldr	r0, [r7, #16]
 800c030:	f7ff ff5e 	bl	800bef0 <sum_sfn>
 800c034:	4603      	mov	r3, r0
 800c036:	461a      	mov	r2, r3
 800c038:	7d3b      	ldrb	r3, [r7, #20]
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d024      	beq.n	800c088 <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	330b      	adds	r3, #11
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <dir_find+0x132>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	220b      	movs	r2, #11
 800c054:	4619      	mov	r1, r3
 800c056:	6938      	ldr	r0, [r7, #16]
 800c058:	f7fe fd16 	bl	800aa88 <mem_cmp>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d014      	beq.n	800c08c <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c062:	23ff      	movs	r3, #255	; 0xff
 800c064:	757b      	strb	r3, [r7, #21]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c06c:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800c06e:	2100      	movs	r1, #0
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff fc37 	bl	800b8e4 <dir_next>
 800c076:	4603      	mov	r3, r0
 800c078:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f43f af6e 	beq.w	800bf5e <dir_find+0x2e>
 800c082:	e004      	b.n	800c08e <dir_find+0x15e>
		if (res != FR_OK) break;
 800c084:	bf00      	nop
 800c086:	e002      	b.n	800c08e <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c088:	bf00      	nop
 800c08a:	e000      	b.n	800c08e <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c08c:	bf00      	nop

	return res;
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3718      	adds	r7, #24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08c      	sub	sp, #48	; 0x30
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	623b      	str	r3, [r7, #32]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800c0ac:	f107 030c 	add.w	r3, r7, #12
 800c0b0:	220c      	movs	r2, #12
 800c0b2:	6a39      	ldr	r1, [r7, #32]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe fcaf 	bl	800aa18 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d035      	beq.n	800c130 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	330b      	adds	r3, #11
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	701a      	strb	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0d6:	e013      	b.n	800c100 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800c0d8:	f107 010c 	add.w	r1, r7, #12
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	69fa      	ldr	r2, [r7, #28]
 800c0e0:	6a38      	ldr	r0, [r7, #32]
 800c0e2:	f7ff fe75 	bl	800bdd0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7ff ff22 	bl	800bf30 <dir_find>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c0f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c102:	2b63      	cmp	r3, #99	; 0x63
 800c104:	d9e8      	bls.n	800c0d8 <dir_register+0x40>
 800c106:	e000      	b.n	800c10a <dir_register+0x72>
			if (res != FR_OK) break;
 800c108:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	2b64      	cmp	r3, #100	; 0x64
 800c10e:	d101      	bne.n	800c114 <dir_register+0x7c>
 800c110:	2307      	movs	r3, #7
 800c112:	e0b5      	b.n	800c280 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c118:	2b04      	cmp	r3, #4
 800c11a:	d002      	beq.n	800c122 <dir_register+0x8a>
 800c11c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c120:	e0ae      	b.n	800c280 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800c122:	6a3b      	ldr	r3, [r7, #32]
 800c124:	330b      	adds	r3, #11
 800c126:	7dfa      	ldrb	r2, [r7, #23]
 800c128:	701a      	strb	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	69fa      	ldr	r2, [r7, #28]
 800c12e:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	f003 0302 	and.w	r3, r3, #2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d014      	beq.n	800c164 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 800c13a:	2300      	movs	r3, #0
 800c13c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c13e:	e002      	b.n	800c146 <dir_register+0xae>
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	3301      	adds	r3, #1
 800c144:	62bb      	str	r3, [r7, #40]	; 0x28
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	005b      	lsls	r3, r3, #1
 800c14a:	69fa      	ldr	r2, [r7, #28]
 800c14c:	4413      	add	r3, r2
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1f5      	bne.n	800c140 <dir_register+0xa8>
		nent = (n + 25) / 13;
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	3319      	adds	r3, #25
 800c158:	4a4b      	ldr	r2, [pc, #300]	; (800c288 <dir_register+0x1f0>)
 800c15a:	fba2 2303 	umull	r2, r3, r2, r3
 800c15e:	089b      	lsrs	r3, r3, #2
 800c160:	627b      	str	r3, [r7, #36]	; 0x24
 800c162:	e001      	b.n	800c168 <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800c164:	2301      	movs	r3, #1
 800c166:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7ff fcb4 	bl	800bad8 <dir_alloc>
 800c170:	4603      	mov	r3, r0
 800c172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d14c      	bne.n	800c218 <dir_register+0x180>
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	3b01      	subs	r3, #1
 800c182:	627b      	str	r3, [r7, #36]	; 0x24
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	2b00      	cmp	r3, #0
 800c188:	d046      	beq.n	800c218 <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	88db      	ldrh	r3, [r3, #6]
 800c18e:	461a      	mov	r2, r3
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff fb05 	bl	800b7a6 <dir_sdi>
 800c19c:	4603      	mov	r3, r0
 800c19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d136      	bne.n	800c218 <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff fe9e 	bl	800bef0 <sum_sfn>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	f7fe fe95 	bl	800aef2 <move_window>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c1ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d11f      	bne.n	800c216 <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a18      	ldr	r0, [r3, #32]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6959      	ldr	r1, [r3, #20]
 800c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	7efb      	ldrb	r3, [r7, #27]
 800c1e4:	f7ff fd80 	bl	800bce8 <fit_lfn>
				dp->fs->wflag = 1;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff fb75 	bl	800b8e4 <dir_next>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c204:	2b00      	cmp	r3, #0
 800c206:	d107      	bne.n	800c218 <dir_register+0x180>
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	3b01      	subs	r3, #1
 800c20c:	627b      	str	r3, [r7, #36]	; 0x24
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1d1      	bne.n	800c1b8 <dir_register+0x120>
 800c214:	e000      	b.n	800c218 <dir_register+0x180>
				if (res != FR_OK) break;
 800c216:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800c218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d12d      	bne.n	800c27c <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	4619      	mov	r1, r3
 800c22a:	4610      	mov	r0, r2
 800c22c:	f7fe fe61 	bl	800aef2 <move_window>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d11e      	bne.n	800c27c <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	695b      	ldr	r3, [r3, #20]
 800c242:	2220      	movs	r2, #32
 800c244:	2100      	movs	r1, #0
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fc04 	bl	800aa54 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6958      	ldr	r0, [r3, #20]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	220b      	movs	r2, #11
 800c256:	4619      	mov	r1, r3
 800c258:	f7fe fbde 	bl	800aa18 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	330b      	adds	r3, #11
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	330c      	adds	r3, #12
 800c26a:	f002 0218 	and.w	r2, r2, #24
 800c26e:	b2d2      	uxtb	r2, r2
 800c270:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800c27c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c280:	4618      	mov	r0, r3
 800c282:	3730      	adds	r7, #48	; 0x30
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	4ec4ec4f 	.word	0x4ec4ec4f

0800c28c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08a      	sub	sp, #40	; 0x28
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	613b      	str	r3, [r7, #16]
 800c29c:	e002      	b.n	800c2a4 <create_name+0x18>
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	613b      	str	r3, [r7, #16]
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b2f      	cmp	r3, #47	; 0x2f
 800c2aa:	d0f8      	beq.n	800c29e <create_name+0x12>
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b5c      	cmp	r3, #92	; 0x5c
 800c2b2:	d0f4      	beq.n	800c29e <create_name+0x12>
	lfn = dp->lfn;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a1b      	ldr	r3, [r3, #32]
 800c2b8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	617b      	str	r3, [r7, #20]
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	1c5a      	adds	r2, r3, #1
 800c2c6:	61ba      	str	r2, [r7, #24]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800c2d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2d2:	2b1f      	cmp	r3, #31
 800c2d4:	d92f      	bls.n	800c336 <create_name+0xaa>
 800c2d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2d8:	2b2f      	cmp	r3, #47	; 0x2f
 800c2da:	d02c      	beq.n	800c336 <create_name+0xaa>
 800c2dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2de:	2b5c      	cmp	r3, #92	; 0x5c
 800c2e0:	d029      	beq.n	800c336 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2bfe      	cmp	r3, #254	; 0xfe
 800c2e6:	d901      	bls.n	800c2ec <create_name+0x60>
			return FR_INVALID_NAME;
 800c2e8:	2306      	movs	r3, #6
 800c2ea:	e176      	b.n	800c5da <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c2f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f001 fd6a 	bl	800ddd0 <ff_convert>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <create_name+0x7e>
 800c306:	2306      	movs	r3, #6
 800c308:	e167      	b.n	800c5da <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800c30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c30c:	2b7f      	cmp	r3, #127	; 0x7f
 800c30e:	d809      	bhi.n	800c324 <create_name+0x98>
 800c310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c312:	4619      	mov	r1, r3
 800c314:	48b3      	ldr	r0, [pc, #716]	; (800c5e4 <create_name+0x358>)
 800c316:	f7fe fbdd 	bl	800aad4 <chk_chr>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <create_name+0x98>
			return FR_INVALID_NAME;
 800c320:	2306      	movs	r3, #6
 800c322:	e15a      	b.n	800c5da <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	617a      	str	r2, [r7, #20]
 800c32a:	005b      	lsls	r3, r3, #1
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4413      	add	r3, r2
 800c330:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c332:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c334:	e7c5      	b.n	800c2c2 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	441a      	add	r2, r3
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800c340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c342:	2b1f      	cmp	r3, #31
 800c344:	d801      	bhi.n	800c34a <create_name+0xbe>
 800c346:	2304      	movs	r3, #4
 800c348:	e000      	b.n	800c34c <create_name+0xc0>
 800c34a:	2300      	movs	r3, #0
 800c34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800c350:	e011      	b.n	800c376 <create_name+0xea>
		w = lfn[di - 1];
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c358:	3b01      	subs	r3, #1
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	4413      	add	r3, r2
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c366:	2b20      	cmp	r3, #32
 800c368:	d002      	beq.n	800c370 <create_name+0xe4>
 800c36a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c36c:	2b2e      	cmp	r3, #46	; 0x2e
 800c36e:	d106      	bne.n	800c37e <create_name+0xf2>
		di--;
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	3b01      	subs	r3, #1
 800c374:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1ea      	bne.n	800c352 <create_name+0xc6>
 800c37c:	e000      	b.n	800c380 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 800c37e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <create_name+0xfe>
 800c386:	2306      	movs	r3, #6
 800c388:	e127      	b.n	800c5da <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	4413      	add	r3, r2
 800c392:	2200      	movs	r2, #0
 800c394:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	220b      	movs	r2, #11
 800c39c:	2120      	movs	r1, #32
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fb58 	bl	800aa54 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	61bb      	str	r3, [r7, #24]
 800c3a8:	e002      	b.n	800c3b0 <create_name+0x124>
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	61bb      	str	r3, [r7, #24]
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	2b20      	cmp	r3, #32
 800c3bc:	d0f5      	beq.n	800c3aa <create_name+0x11e>
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ca:	d0ee      	beq.n	800c3aa <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d009      	beq.n	800c3e6 <create_name+0x15a>
 800c3d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3d6:	f043 0303 	orr.w	r3, r3, #3
 800c3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c3de:	e002      	b.n	800c3e6 <create_name+0x15a>
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	617b      	str	r3, [r7, #20]
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d009      	beq.n	800c400 <create_name+0x174>
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	881b      	ldrh	r3, [r3, #0]
 800c3fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c3fe:	d1ef      	bne.n	800c3e0 <create_name+0x154>

	b = i = 0; ni = 8;
 800c400:	2300      	movs	r3, #0
 800c402:	623b      	str	r3, [r7, #32]
 800c404:	2300      	movs	r3, #0
 800c406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c40a:	2308      	movs	r3, #8
 800c40c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	1c5a      	adds	r2, r3, #1
 800c412:	61ba      	str	r2, [r7, #24]
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 808f 	beq.w	800c544 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c428:	2b20      	cmp	r3, #32
 800c42a:	d006      	beq.n	800c43a <create_name+0x1ae>
 800c42c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c42e:	2b2e      	cmp	r3, #46	; 0x2e
 800c430:	d10a      	bne.n	800c448 <create_name+0x1bc>
 800c432:	69ba      	ldr	r2, [r7, #24]
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	429a      	cmp	r2, r3
 800c438:	d006      	beq.n	800c448 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 800c43a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c43e:	f043 0303 	orr.w	r3, r3, #3
 800c442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c446:	e07c      	b.n	800c542 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c448:	6a3a      	ldr	r2, [r7, #32]
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d203      	bcs.n	800c458 <create_name+0x1cc>
 800c450:	69ba      	ldr	r2, [r7, #24]
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	429a      	cmp	r2, r3
 800c456:	d123      	bne.n	800c4a0 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	2b0b      	cmp	r3, #11
 800c45c:	d106      	bne.n	800c46c <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 800c45e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c462:	f043 0303 	orr.w	r3, r3, #3
 800c466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c46a:	e06e      	b.n	800c54a <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c46c:	69ba      	ldr	r2, [r7, #24]
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	429a      	cmp	r2, r3
 800c472:	d005      	beq.n	800c480 <create_name+0x1f4>
 800c474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c478:	f043 0303 	orr.w	r3, r3, #3
 800c47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c480:	69ba      	ldr	r2, [r7, #24]
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	429a      	cmp	r2, r3
 800c486:	d85f      	bhi.n	800c548 <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	61bb      	str	r3, [r7, #24]
 800c48c:	2308      	movs	r3, #8
 800c48e:	623b      	str	r3, [r7, #32]
 800c490:	230b      	movs	r3, #11
 800c492:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c494:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c49e:	e050      	b.n	800c542 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c4a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c4a4:	d914      	bls.n	800c4d0 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c4a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f001 fc90 	bl	800ddd0 <ff_convert>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c4b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d004      	beq.n	800c4c4 <create_name+0x238>
 800c4ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4bc:	3b80      	subs	r3, #128	; 0x80
 800c4be:	4a4a      	ldr	r2, [pc, #296]	; (800c5e8 <create_name+0x35c>)
 800c4c0:	5cd3      	ldrb	r3, [r2, r3]
 800c4c2:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4c8:	f043 0302 	orr.w	r3, r3, #2
 800c4cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c4d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d007      	beq.n	800c4e6 <create_name+0x25a>
 800c4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4844      	ldr	r0, [pc, #272]	; (800c5ec <create_name+0x360>)
 800c4dc:	f7fe fafa 	bl	800aad4 <chk_chr>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d008      	beq.n	800c4f8 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c4e6:	235f      	movs	r3, #95	; 0x5f
 800c4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c4ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4ee:	f043 0303 	orr.w	r3, r3, #3
 800c4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4f6:	e01b      	b.n	800c530 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c4f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4fa:	2b40      	cmp	r3, #64	; 0x40
 800c4fc:	d909      	bls.n	800c512 <create_name+0x286>
 800c4fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c500:	2b5a      	cmp	r3, #90	; 0x5a
 800c502:	d806      	bhi.n	800c512 <create_name+0x286>
					b |= 2;
 800c504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c508:	f043 0302 	orr.w	r3, r3, #2
 800c50c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c510:	e00e      	b.n	800c530 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c514:	2b60      	cmp	r3, #96	; 0x60
 800c516:	d90b      	bls.n	800c530 <create_name+0x2a4>
 800c518:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c51a:	2b7a      	cmp	r3, #122	; 0x7a
 800c51c:	d808      	bhi.n	800c530 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 800c51e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c522:	f043 0301 	orr.w	r3, r3, #1
 800c526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c52a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c52c:	3b20      	subs	r3, #32
 800c52e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	699a      	ldr	r2, [r3, #24]
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	1c59      	adds	r1, r3, #1
 800c538:	6239      	str	r1, [r7, #32]
 800c53a:	4413      	add	r3, r2
 800c53c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800c542:	e764      	b.n	800c40e <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 800c544:	bf00      	nop
 800c546:	e000      	b.n	800c54a <create_name+0x2be>
			if (si > di) break;			/* No extension */
 800c548:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2be5      	cmp	r3, #229	; 0xe5
 800c552:	d103      	bne.n	800c55c <create_name+0x2d0>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	2205      	movs	r2, #5
 800c55a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	2b08      	cmp	r3, #8
 800c560:	d104      	bne.n	800c56c <create_name+0x2e0>
 800c562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800c56c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c570:	f003 030c 	and.w	r3, r3, #12
 800c574:	2b0c      	cmp	r3, #12
 800c576:	d005      	beq.n	800c584 <create_name+0x2f8>
 800c578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c57c:	f003 0303 	and.w	r3, r3, #3
 800c580:	2b03      	cmp	r3, #3
 800c582:	d105      	bne.n	800c590 <create_name+0x304>
		cf |= NS_LFN;
 800c584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c588:	f043 0302 	orr.w	r3, r3, #2
 800c58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c594:	f003 0302 	and.w	r3, r3, #2
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d117      	bne.n	800c5cc <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c59c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5a0:	f003 0303 	and.w	r3, r3, #3
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d105      	bne.n	800c5b4 <create_name+0x328>
 800c5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ac:	f043 0310 	orr.w	r3, r3, #16
 800c5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c5b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5b8:	f003 030c 	and.w	r3, r3, #12
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d105      	bne.n	800c5cc <create_name+0x340>
 800c5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5c4:	f043 0308 	orr.w	r3, r3, #8
 800c5c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	330b      	adds	r3, #11
 800c5d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c5d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c5d8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3728      	adds	r7, #40	; 0x28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	0800e8a0 	.word	0x0800e8a0
 800c5e8:	0800e900 	.word	0x0800e900
 800c5ec:	0800e8ac 	.word	0x0800e8ac

0800c5f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2b2f      	cmp	r3, #47	; 0x2f
 800c600:	d003      	beq.n	800c60a <follow_path+0x1a>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	2b5c      	cmp	r3, #92	; 0x5c
 800c608:	d102      	bne.n	800c610 <follow_path+0x20>
		path++;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	3301      	adds	r3, #1
 800c60e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b1f      	cmp	r3, #31
 800c61c:	d809      	bhi.n	800c632 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 800c61e:	2100      	movs	r1, #0
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff f8c0 	bl	800b7a6 <dir_sdi>
 800c626:	4603      	mov	r3, r0
 800c628:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	615a      	str	r2, [r3, #20]
 800c630:	e041      	b.n	800c6b6 <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c632:	463b      	mov	r3, r7
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff fe28 	bl	800c28c <create_name>
 800c63c:	4603      	mov	r3, r0
 800c63e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c640:	7bfb      	ldrb	r3, [r7, #15]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d132      	bne.n	800c6ac <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff fc72 	bl	800bf30 <dir_find>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	7adb      	ldrb	r3, [r3, #11]
 800c656:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00a      	beq.n	800c674 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	2b04      	cmp	r3, #4
 800c662:	d125      	bne.n	800c6b0 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c664:	7bbb      	ldrb	r3, [r7, #14]
 800c666:	f003 0304 	and.w	r3, r3, #4
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d120      	bne.n	800c6b0 <follow_path+0xc0>
 800c66e:	2305      	movs	r3, #5
 800c670:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800c672:	e01d      	b.n	800c6b0 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	f003 0304 	and.w	r3, r3, #4
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d11a      	bne.n	800c6b4 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	330b      	adds	r3, #11
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	f003 0310 	and.w	r3, r3, #16
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d102      	bne.n	800c698 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 800c692:	2305      	movs	r3, #5
 800c694:	73fb      	strb	r3, [r7, #15]
 800c696:	e00e      	b.n	800c6b6 <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68b9      	ldr	r1, [r7, #8]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff fa60 	bl	800bb64 <ld_clust>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6aa:	e7c2      	b.n	800c632 <follow_path+0x42>
			if (res != FR_OK) break;
 800c6ac:	bf00      	nop
 800c6ae:	e002      	b.n	800c6b6 <follow_path+0xc6>
				break;
 800c6b0:	bf00      	nop
 800c6b2:	e000      	b.n	800c6b6 <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6b4:	bf00      	nop
		}
	}

	return res;
 800c6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d031      	beq.n	800c73a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	617b      	str	r3, [r7, #20]
 800c6dc:	e002      	b.n	800c6e4 <get_ldnumber+0x24>
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b1f      	cmp	r3, #31
 800c6ea:	d903      	bls.n	800c6f4 <get_ldnumber+0x34>
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	2b3a      	cmp	r3, #58	; 0x3a
 800c6f2:	d1f4      	bne.n	800c6de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b3a      	cmp	r3, #58	; 0x3a
 800c6fa:	d11c      	bne.n	800c736 <get_ldnumber+0x76>
			tp = *path;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	60fa      	str	r2, [r7, #12]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	3b30      	subs	r3, #48	; 0x30
 800c70c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2b09      	cmp	r3, #9
 800c712:	d80e      	bhi.n	800c732 <get_ldnumber+0x72>
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d10a      	bne.n	800c732 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d107      	bne.n	800c732 <get_ldnumber+0x72>
					vol = (int)i;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	3301      	adds	r3, #1
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	e002      	b.n	800c73c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c736:	2300      	movs	r3, #0
 800c738:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c73a:	693b      	ldr	r3, [r7, #16]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	371c      	adds	r7, #28
 800c740:	46bd      	mov	sp, r7
 800c742:	bc80      	pop	{r7}
 800c744:	4770      	bx	lr
	...

0800c748 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f04f 32ff 	mov.w	r2, #4294967295
 800c760:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7fe fbc3 	bl	800aef2 <move_window>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <check_fs+0x2e>
		return 3;
 800c772:	2303      	movs	r3, #3
 800c774:	e04a      	b.n	800c80c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c77c:	3301      	adds	r3, #1
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	021b      	lsls	r3, r3, #8
 800c782:	b21a      	sxth	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c78a:	b21b      	sxth	r3, r3
 800c78c:	4313      	orrs	r3, r2
 800c78e:	b21b      	sxth	r3, r3
 800c790:	4a20      	ldr	r2, [pc, #128]	; (800c814 <check_fs+0xcc>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d001      	beq.n	800c79a <check_fs+0x52>
		return 2;
 800c796:	2302      	movs	r3, #2
 800c798:	e038      	b.n	800c80c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	3336      	adds	r3, #54	; 0x36
 800c79e:	3303      	adds	r3, #3
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	061a      	lsls	r2, r3, #24
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3336      	adds	r3, #54	; 0x36
 800c7a8:	3302      	adds	r3, #2
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	041b      	lsls	r3, r3, #16
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	3236      	adds	r2, #54	; 0x36
 800c7b4:	3201      	adds	r2, #1
 800c7b6:	7812      	ldrb	r2, [r2, #0]
 800c7b8:	0212      	lsls	r2, r2, #8
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7c8:	4a13      	ldr	r2, [pc, #76]	; (800c818 <check_fs+0xd0>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d101      	bne.n	800c7d2 <check_fs+0x8a>
		return 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e01c      	b.n	800c80c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	3352      	adds	r3, #82	; 0x52
 800c7d6:	3303      	adds	r3, #3
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	061a      	lsls	r2, r3, #24
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	3352      	adds	r3, #82	; 0x52
 800c7e0:	3302      	adds	r3, #2
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	041b      	lsls	r3, r3, #16
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	3252      	adds	r2, #82	; 0x52
 800c7ec:	3201      	adds	r2, #1
 800c7ee:	7812      	ldrb	r2, [r2, #0]
 800c7f0:	0212      	lsls	r2, r2, #8
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c800:	4a05      	ldr	r2, [pc, #20]	; (800c818 <check_fs+0xd0>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d101      	bne.n	800c80a <check_fs+0xc2>
		return 0;
 800c806:	2300      	movs	r3, #0
 800c808:	e000      	b.n	800c80c <check_fs+0xc4>

	return 1;
 800c80a:	2301      	movs	r3, #1
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	ffffaa55 	.word	0xffffaa55
 800c818:	00544146 	.word	0x00544146

0800c81c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b096      	sub	sp, #88	; 0x58
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	4613      	mov	r3, r2
 800c828:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c830:	68b8      	ldr	r0, [r7, #8]
 800c832:	f7ff ff45 	bl	800c6c0 <get_ldnumber>
 800c836:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	da01      	bge.n	800c842 <find_volume+0x26>
 800c83e:	230b      	movs	r3, #11
 800c840:	e2de      	b.n	800ce00 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c842:	4ab1      	ldr	r2, [pc, #708]	; (800cb08 <find_volume+0x2ec>)
 800c844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c84a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <find_volume+0x3a>
 800c852:	230c      	movs	r3, #12
 800c854:	e2d4      	b.n	800ce00 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c85a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800c862:	2b00      	cmp	r3, #0
 800c864:	d01b      	beq.n	800c89e <find_volume+0x82>
		stat = disk_status(fs->drv);
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fe f835 	bl	800a8dc <disk_status>
 800c872:	4603      	mov	r3, r0
 800c874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c878:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10c      	bne.n	800c89e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d007      	beq.n	800c89a <find_volume+0x7e>
 800c88a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c88e:	f003 0304 	and.w	r3, r3, #4
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800c896:	230a      	movs	r3, #10
 800c898:	e2b2      	b.n	800ce00 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 800c89a:	2300      	movs	r3, #0
 800c89c:	e2b0      	b.n	800ce00 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe f82a 	bl	800a910 <disk_initialize>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c8c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e296      	b.n	800ce00 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c8d2:	79fb      	ldrb	r3, [r7, #7]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d007      	beq.n	800c8e8 <find_volume+0xcc>
 800c8d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8dc:	f003 0304 	and.w	r3, r3, #4
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c8e4:	230a      	movs	r3, #10
 800c8e6:	e28b      	b.n	800ce00 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800c8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ea:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f0:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	2102      	movs	r1, #2
 800c8f8:	f7fe f870 	bl	800a9dc <disk_ioctl>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10b      	bne.n	800c91a <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800c902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c904:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c90c:	d305      	bcc.n	800c91a <find_volume+0xfe>
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800c914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c918:	d901      	bls.n	800c91e <find_volume+0x102>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e270      	b.n	800ce00 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c926:	f7ff ff0f 	bl	800c748 <check_fs>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c934:	2b01      	cmp	r3, #1
 800c936:	d155      	bne.n	800c9e4 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c938:	2300      	movs	r3, #0
 800c93a:	643b      	str	r3, [r7, #64]	; 0x40
 800c93c:	e029      	b.n	800c992 <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c93e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c942:	011b      	lsls	r3, r3, #4
 800c944:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c948:	4413      	add	r3, r2
 800c94a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94e:	3304      	adds	r3, #4
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d012      	beq.n	800c97c <find_volume+0x160>
 800c956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c958:	330b      	adds	r3, #11
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	061a      	lsls	r2, r3, #24
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	330a      	adds	r3, #10
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	041b      	lsls	r3, r3, #16
 800c966:	4313      	orrs	r3, r2
 800c968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c96a:	3209      	adds	r2, #9
 800c96c:	7812      	ldrb	r2, [r2, #0]
 800c96e:	0212      	lsls	r2, r2, #8
 800c970:	4313      	orrs	r3, r2
 800c972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c974:	3208      	adds	r2, #8
 800c976:	7812      	ldrb	r2, [r2, #0]
 800c978:	431a      	orrs	r2, r3
 800c97a:	e000      	b.n	800c97e <find_volume+0x162>
 800c97c:	2200      	movs	r2, #0
 800c97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c986:	440b      	add	r3, r1
 800c988:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98e:	3301      	adds	r3, #1
 800c990:	643b      	str	r3, [r7, #64]	; 0x40
 800c992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c994:	2b03      	cmp	r3, #3
 800c996:	d9d2      	bls.n	800c93e <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c998:	2300      	movs	r3, #0
 800c99a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <find_volume+0x18c>
 800c9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c9b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d005      	beq.n	800c9ca <find_volume+0x1ae>
 800c9be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9c2:	f7ff fec1 	bl	800c748 <check_fs>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	e000      	b.n	800c9cc <find_volume+0x1b0>
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c9d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d005      	beq.n	800c9e4 <find_volume+0x1c8>
 800c9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9da:	3301      	adds	r3, #1
 800c9dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d9e1      	bls.n	800c9a8 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c9e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d101      	bne.n	800c9f0 <find_volume+0x1d4>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e207      	b.n	800ce00 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c9f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <find_volume+0x1e0>
 800c9f8:	230d      	movs	r3, #13
 800c9fa:	e201      	b.n	800ce00 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	7b1b      	ldrb	r3, [r3, #12]
 800ca00:	021b      	lsls	r3, r3, #8
 800ca02:	b21a      	sxth	r2, r3
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	7adb      	ldrb	r3, [r3, #11]
 800ca08:	b21b      	sxth	r3, r3
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	b21a      	sxth	r2, r3
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ca14:	b21b      	sxth	r3, r3
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d001      	beq.n	800ca1e <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 800ca1a:	230d      	movs	r3, #13
 800ca1c:	e1f0      	b.n	800ce00 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	7ddb      	ldrb	r3, [r3, #23]
 800ca22:	021b      	lsls	r3, r3, #8
 800ca24:	b21a      	sxth	r2, r3
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	7d9b      	ldrb	r3, [r3, #22]
 800ca2a:	b21b      	sxth	r3, r3
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	b21b      	sxth	r3, r3
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800ca34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d112      	bne.n	800ca60 <find_volume+0x244>
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ca40:	061a      	lsls	r2, r3, #24
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ca48:	041b      	lsls	r3, r3, #16
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca4e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ca52:	0212      	lsls	r2, r2, #8
 800ca54:	4313      	orrs	r3, r2
 800ca56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca58:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca64:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	7c1a      	ldrb	r2, [r3, #16]
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6e:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800ca72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca74:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d006      	beq.n	800ca8a <find_volume+0x26e>
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d001      	beq.n	800ca8a <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 800ca86:	230d      	movs	r3, #13
 800ca88:	e1ba      	b.n	800ce00 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800ca90:	461a      	mov	r2, r3
 800ca92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca94:	fb02 f303 	mul.w	r3, r2, r3
 800ca98:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9c:	7b5a      	ldrb	r2, [r3, #13]
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800caa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00a      	beq.n	800cac4 <find_volume+0x2a8>
 800caae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab0:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800cab4:	461a      	mov	r2, r3
 800cab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800cabc:	3b01      	subs	r3, #1
 800cabe:	4013      	ands	r3, r2
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d001      	beq.n	800cac8 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 800cac4:	230d      	movs	r3, #13
 800cac6:	e19b      	b.n	800ce00 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	7c9b      	ldrb	r3, [r3, #18]
 800cacc:	021b      	lsls	r3, r3, #8
 800cace:	b21a      	sxth	r2, r3
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	7c5b      	ldrb	r3, [r3, #17]
 800cad4:	b21b      	sxth	r3, r3
 800cad6:	4313      	orrs	r3, r2
 800cad8:	b21b      	sxth	r3, r3
 800cada:	b29a      	uxth	r2, r3
 800cadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cade:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800cae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caea:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800caee:	0952      	lsrs	r2, r2, #5
 800caf0:	b292      	uxth	r2, r2
 800caf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800caf6:	fb02 f201 	mul.w	r2, r2, r1
 800cafa:	1a9b      	subs	r3, r3, r2
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d004      	beq.n	800cb0c <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800cb02:	230d      	movs	r3, #13
 800cb04:	e17c      	b.n	800ce00 <find_volume+0x5e4>
 800cb06:	bf00      	nop
 800cb08:	200000ac 	.word	0x200000ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	7d1b      	ldrb	r3, [r3, #20]
 800cb10:	021b      	lsls	r3, r3, #8
 800cb12:	b21a      	sxth	r2, r3
 800cb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb16:	7cdb      	ldrb	r3, [r3, #19]
 800cb18:	b21b      	sxth	r3, r3
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	b21b      	sxth	r3, r3
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800cb22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d112      	bne.n	800cb4e <find_volume+0x332>
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cb2e:	061a      	lsls	r2, r3, #24
 800cb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb32:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cb36:	041b      	lsls	r3, r3, #16
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb3c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800cb40:	0212      	lsls	r2, r2, #8
 800cb42:	4313      	orrs	r3, r2
 800cb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb46:	f892 2020 	ldrb.w	r2, [r2, #32]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb50:	7bdb      	ldrb	r3, [r3, #15]
 800cb52:	021b      	lsls	r3, r3, #8
 800cb54:	b21a      	sxth	r2, r3
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	7b9b      	ldrb	r3, [r3, #14]
 800cb5a:	b21b      	sxth	r3, r3
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	b21b      	sxth	r3, r3
 800cb60:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800cb62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <find_volume+0x350>
 800cb68:	230d      	movs	r3, #13
 800cb6a:	e149      	b.n	800ce00 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800cb6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb70:	4413      	add	r3, r2
 800cb72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb74:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 800cb78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb7a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800cb7e:	0952      	lsrs	r2, r2, #5
 800cb80:	b292      	uxth	r2, r2
 800cb82:	fbb1 f2f2 	udiv	r2, r1, r2
 800cb86:	b292      	uxth	r2, r2
 800cb88:	4413      	add	r3, r2
 800cb8a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cb8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d201      	bcs.n	800cb98 <find_volume+0x37c>
 800cb94:	230d      	movs	r3, #13
 800cb96:	e133      	b.n	800ce00 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800cb98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cba0:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800cba4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cba8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <find_volume+0x398>
 800cbb0:	230d      	movs	r3, #13
 800cbb2:	e125      	b.n	800ce00 <find_volume+0x5e4>
	fmt = FS_FAT12;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d902      	bls.n	800cbca <find_volume+0x3ae>
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d902      	bls.n	800cbda <find_volume+0x3be>
 800cbd4:	2303      	movs	r3, #3
 800cbd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	1c9a      	adds	r2, r3, #2
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbe8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800cbec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbf0:	441a      	add	r2, r3
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 800cbf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfc:	441a      	add	r2, r3
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800cc04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d121      	bne.n	800cc50 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d001      	beq.n	800cc1a <find_volume+0x3fe>
 800cc16:	230d      	movs	r3, #13
 800cc18:	e0f2      	b.n	800ce00 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc20:	061a      	lsls	r2, r3, #24
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cc28:	041b      	lsls	r3, r3, #16
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc2e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800cc32:	0212      	lsls	r2, r2, #8
 800cc34:	4313      	orrs	r3, r2
 800cc36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc38:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800cc3c:	431a      	orrs	r2, r3
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	647b      	str	r3, [r7, #68]	; 0x44
 800cc4e:	e025      	b.n	800cc9c <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d101      	bne.n	800cc5e <find_volume+0x442>
 800cc5a:	230d      	movs	r3, #13
 800cc5c:	e0d0      	b.n	800ce00 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc60:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800cc64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc66:	441a      	add	r2, r3
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d104      	bne.n	800cc80 <find_volume+0x464>
 800cc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc78:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	e00c      	b.n	800cc9a <find_volume+0x47e>
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800cc86:	4613      	mov	r3, r2
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	4413      	add	r3, r2
 800cc8c:	085a      	lsrs	r2, r3, #1
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800cc94:	f003 0301 	and.w	r3, r3, #1
 800cc98:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800cc9a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800cca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccac:	440b      	add	r3, r1
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccb2:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 800ccb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d201      	bcs.n	800ccc2 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800ccbe:	230d      	movs	r3, #13
 800ccc0:	e09e      	b.n	800ce00 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccda:	2280      	movs	r2, #128	; 0x80
 800ccdc:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800cce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cce4:	2b03      	cmp	r3, #3
 800cce6:	d177      	bne.n	800cdd8 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800cce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ccee:	021b      	lsls	r3, r3, #8
 800ccf0:	b21a      	sxth	r2, r3
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccf8:	b21b      	sxth	r3, r3
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	b21b      	sxth	r3, r3
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d16a      	bne.n	800cdd8 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 800cd02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd04:	3301      	adds	r3, #1
 800cd06:	4619      	mov	r1, r3
 800cd08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd0a:	f7fe f8f2 	bl	800aef2 <move_window>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d161      	bne.n	800cdd8 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	b21a      	sxth	r2, r3
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800cd2c:	b21b      	sxth	r3, r3
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	b21b      	sxth	r3, r3
 800cd32:	4a35      	ldr	r2, [pc, #212]	; (800ce08 <find_volume+0x5ec>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d14f      	bne.n	800cdd8 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	78db      	ldrb	r3, [r3, #3]
 800cd3c:	061a      	lsls	r2, r3, #24
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	789b      	ldrb	r3, [r3, #2]
 800cd42:	041b      	lsls	r3, r3, #16
 800cd44:	4313      	orrs	r3, r2
 800cd46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd48:	7852      	ldrb	r2, [r2, #1]
 800cd4a:	0212      	lsls	r2, r2, #8
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd50:	7812      	ldrb	r2, [r2, #0]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	4a2d      	ldr	r2, [pc, #180]	; (800ce0c <find_volume+0x5f0>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d13e      	bne.n	800cdd8 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800cd60:	061a      	lsls	r2, r3, #24
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800cd68:	041b      	lsls	r3, r3, #16
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd6e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800cd72:	0212      	lsls	r2, r2, #8
 800cd74:	4313      	orrs	r3, r2
 800cd76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd78:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	4a24      	ldr	r2, [pc, #144]	; (800ce10 <find_volume+0x5f4>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d129      	bne.n	800cdd8 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd86:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800cd8a:	061a      	lsls	r2, r3, #24
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800cd92:	041b      	lsls	r3, r3, #16
 800cd94:	4313      	orrs	r3, r2
 800cd96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd98:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800cd9c:	0212      	lsls	r2, r2, #8
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cda2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800cda6:	431a      	orrs	r2, r3
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800cdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800cdb4:	061a      	lsls	r2, r3, #24
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800cdbc:	041b      	lsls	r3, r3, #16
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdc2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800cdc6:	0212      	lsls	r2, r2, #8
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdcc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800cdd0:	431a      	orrs	r2, r3
 800cdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cdde:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 800cde2:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <find_volume+0x5f8>)
 800cde4:	881b      	ldrh	r3, [r3, #0]
 800cde6:	3301      	adds	r3, #1
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <find_volume+0x5f8>)
 800cdec:	801a      	strh	r2, [r3, #0]
 800cdee:	4b09      	ldr	r3, [pc, #36]	; (800ce14 <find_volume+0x5f8>)
 800cdf0:	881a      	ldrh	r2, [r3, #0]
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800cdf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdfa:	f7fe f807 	bl	800ae0c <clear_lock>
#endif

	return FR_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3758      	adds	r7, #88	; 0x58
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	ffffaa55 	.word	0xffffaa55
 800ce0c:	41615252 	.word	0x41615252
 800ce10:	61417272 	.word	0x61417272
 800ce14:	200000b0 	.word	0x200000b0

0800ce18 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d01d      	beq.n	800ce66 <validate+0x4e>
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d019      	beq.n	800ce66 <validate+0x4e>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d013      	beq.n	800ce66 <validate+0x4e>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	889b      	ldrh	r3, [r3, #4]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d10b      	bne.n	800ce66 <validate+0x4e>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fd fd40 	bl	800a8dc <disk_status>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <validate+0x52>
		return FR_INVALID_OBJECT;
 800ce66:	2309      	movs	r3, #9
 800ce68:	e000      	b.n	800ce6c <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800ce86:	f107 0310 	add.w	r3, r7, #16
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7ff fc18 	bl	800c6c0 <get_ldnumber>
 800ce90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	da01      	bge.n	800ce9c <f_mount+0x28>
 800ce98:	230b      	movs	r3, #11
 800ce9a:	e02d      	b.n	800cef8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce9c:	4a18      	ldr	r2, [pc, #96]	; (800cf00 <f_mount+0x8c>)
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cea4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d006      	beq.n	800ceba <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800ceac:	69b8      	ldr	r0, [r7, #24]
 800ceae:	f7fd ffad 	bl	800ae0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d003      	beq.n	800cec8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	490d      	ldr	r1, [pc, #52]	; (800cf00 <f_mount+0x8c>)
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d002      	beq.n	800cede <f_mount+0x6a>
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d001      	beq.n	800cee2 <f_mount+0x6e>
 800cede:	2300      	movs	r3, #0
 800cee0:	e00a      	b.n	800cef8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800cee2:	f107 0108 	add.w	r1, r7, #8
 800cee6:	f107 030c 	add.w	r3, r7, #12
 800ceea:	2200      	movs	r2, #0
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff fc95 	bl	800c81c <find_volume>
 800cef2:	4603      	mov	r3, r0
 800cef4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3720      	adds	r7, #32
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	200000ac 	.word	0x200000ac

0800cf04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b096      	sub	sp, #88	; 0x58
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <f_open+0x18>
 800cf18:	2309      	movs	r3, #9
 800cf1a:	e16d      	b.n	800d1f8 <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800cf22:	79fb      	ldrb	r3, [r7, #7]
 800cf24:	f003 031f 	and.w	r3, r3, #31
 800cf28:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	f023 0301 	bic.w	r3, r3, #1
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	f107 0108 	add.w	r1, r7, #8
 800cf36:	f107 0320 	add.w	r3, r7, #32
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff fc6e 	bl	800c81c <find_volume>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800cf46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f040 8152 	bne.w	800d1f4 <f_open+0x2f0>
		INIT_BUF(dj);
 800cf50:	f107 0314 	add.w	r3, r7, #20
 800cf54:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf56:	4baa      	ldr	r3, [pc, #680]	; (800d200 <f_open+0x2fc>)
 800cf58:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	f107 0320 	add.w	r3, r7, #32
 800cf60:	4611      	mov	r1, r2
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff fb44 	bl	800c5f0 <follow_path>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 800cf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf70:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d118      	bne.n	800cfac <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800cf7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d103      	bne.n	800cf88 <f_open+0x84>
				res = FR_INVALID_NAME;
 800cf80:	2306      	movs	r3, #6
 800cf82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800cf86:	e011      	b.n	800cfac <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf88:	79fb      	ldrb	r3, [r7, #7]
 800cf8a:	f023 0301 	bic.w	r3, r3, #1
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	bf14      	ite	ne
 800cf92:	2301      	movne	r3, #1
 800cf94:	2300      	moveq	r3, #0
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	461a      	mov	r2, r3
 800cf9a:	f107 0320 	add.w	r3, r7, #32
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fd fdb1 	bl	800ab08 <chk_lock>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	f003 031c 	and.w	r3, r3, #28
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 809a 	beq.w	800d0ec <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 800cfb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d019      	beq.n	800cff4 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800cfc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	d10e      	bne.n	800cfe6 <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cfc8:	f7fd fe08 	bl	800abdc <enq_lock>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d006      	beq.n	800cfe0 <f_open+0xdc>
 800cfd2:	f107 0320 	add.w	r3, r7, #32
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7ff f85e 	bl	800c098 <dir_register>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	e000      	b.n	800cfe2 <f_open+0xde>
 800cfe0:	2312      	movs	r3, #18
 800cfe2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	f043 0308 	orr.w	r3, r3, #8
 800cfec:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 800cfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff0:	653b      	str	r3, [r7, #80]	; 0x50
 800cff2:	e012      	b.n	800d01a <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cff6:	330b      	adds	r3, #11
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	f003 0311 	and.w	r3, r3, #17
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <f_open+0x106>
					res = FR_DENIED;
 800d002:	2307      	movs	r3, #7
 800d004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d008:	e007      	b.n	800d01a <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800d00a:	79fb      	ldrb	r3, [r7, #7]
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <f_open+0x116>
						res = FR_EXIST;
 800d014:	2308      	movs	r3, #8
 800d016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d01a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f040 8082 	bne.w	800d128 <f_open+0x224>
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	f003 0308 	and.w	r3, r3, #8
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d07c      	beq.n	800d128 <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 800d02e:	f7fd fbef 	bl	800a810 <get_fattime>
 800d032:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800d034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d036:	330e      	adds	r3, #14
 800d038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d03a:	b2d2      	uxtb	r2, r2
 800d03c:	701a      	strb	r2, [r3, #0]
 800d03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d040:	b29b      	uxth	r3, r3
 800d042:	0a1b      	lsrs	r3, r3, #8
 800d044:	b29a      	uxth	r2, r3
 800d046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d048:	330f      	adds	r3, #15
 800d04a:	b2d2      	uxtb	r2, r2
 800d04c:	701a      	strb	r2, [r3, #0]
 800d04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d050:	0c1a      	lsrs	r2, r3, #16
 800d052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d054:	3310      	adds	r3, #16
 800d056:	b2d2      	uxtb	r2, r2
 800d058:	701a      	strb	r2, [r3, #0]
 800d05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d05c:	0e1a      	lsrs	r2, r3, #24
 800d05e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d060:	3311      	adds	r3, #17
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800d066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d068:	330b      	adds	r3, #11
 800d06a:	2200      	movs	r2, #0
 800d06c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800d06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d070:	331c      	adds	r3, #28
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
 800d076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d078:	331d      	adds	r3, #29
 800d07a:	2200      	movs	r2, #0
 800d07c:	701a      	strb	r2, [r3, #0]
 800d07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d080:	331e      	adds	r3, #30
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d088:	331f      	adds	r3, #31
 800d08a:	2200      	movs	r2, #0
 800d08c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d092:	4618      	mov	r0, r3
 800d094:	f7fe fd66 	bl	800bb64 <ld_clust>
 800d098:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 800d09a:	2100      	movs	r1, #0
 800d09c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d09e:	f7fe fd8e 	bl	800bbbe <st_clust>
				dj.fs->wflag = 1;
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800d0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d03b      	beq.n	800d128 <f_open+0x224>
					dw = dj.fs->winsect;
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800d0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fe fa43 	bl	800b548 <remove_chain>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 800d0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d12b      	bne.n	800d128 <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0d4:	3a01      	subs	r2, #1
 800d0d6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fd ff07 	bl	800aef2 <move_window>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d0ea:	e01d      	b.n	800d128 <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800d0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d119      	bne.n	800d128 <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800d0f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f6:	330b      	adds	r3, #11
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <f_open+0x206>
					res = FR_NO_FILE;
 800d102:	2304      	movs	r3, #4
 800d104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d108:	e00e      	b.n	800d128 <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	f003 0302 	and.w	r3, r3, #2
 800d110:	2b00      	cmp	r3, #0
 800d112:	d009      	beq.n	800d128 <f_open+0x224>
 800d114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d116:	330b      	adds	r3, #11
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	f003 0301 	and.w	r3, r3, #1
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <f_open+0x224>
						res = FR_DENIED;
 800d122:	2307      	movs	r3, #7
 800d124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 800d128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d129      	bne.n	800d184 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	f003 0308 	and.w	r3, r3, #8
 800d136:	2b00      	cmp	r3, #0
 800d138:	d003      	beq.n	800d142 <f_open+0x23e>
				mode |= FA__WRITTEN;
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	f043 0320 	orr.w	r3, r3, #32
 800d140:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d150:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d152:	79fb      	ldrb	r3, [r7, #7]
 800d154:	f023 0301 	bic.w	r3, r3, #1
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bf14      	ite	ne
 800d15c:	2301      	movne	r3, #1
 800d15e:	2300      	moveq	r3, #0
 800d160:	b2db      	uxtb	r3, r3
 800d162:	461a      	mov	r2, r3
 800d164:	f107 0320 	add.w	r3, r7, #32
 800d168:	4611      	mov	r1, r2
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fd fd5a 	bl	800ac24 <inc_lock>
 800d170:	4602      	mov	r2, r0
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d102      	bne.n	800d184 <f_open+0x280>
 800d17e:	2302      	movs	r3, #2
 800d180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800d184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d133      	bne.n	800d1f4 <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	79fa      	ldrb	r2, [r7, #7]
 800d190:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fce1 	bl	800bb64 <ld_clust>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800d1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1aa:	331f      	adds	r3, #31
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	061a      	lsls	r2, r3, #24
 800d1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b2:	331e      	adds	r3, #30
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	041b      	lsls	r3, r3, #16
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1bc:	321d      	adds	r2, #29
 800d1be:	7812      	ldrb	r2, [r2, #0]
 800d1c0:	0212      	lsls	r2, r2, #8
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1c6:	321c      	adds	r2, #28
 800d1c8:	7812      	ldrb	r2, [r2, #0]
 800d1ca:	431a      	orrs	r2, r3
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800d1e2:	6a3a      	ldr	r2, [r7, #32]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800d1f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3758      	adds	r7, #88	; 0x58
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	200000cc 	.word	0x200000cc

0800d204 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08c      	sub	sp, #48	; 0x30
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
 800d210:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f7ff fdfb 	bl	800ce18 <validate>
 800d222:	4603      	mov	r3, r0
 800d224:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d226:	7ffb      	ldrb	r3, [r7, #31]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d001      	beq.n	800d230 <f_read+0x2c>
 800d22c:	7ffb      	ldrb	r3, [r7, #31]
 800d22e:	e13a      	b.n	800d4a6 <f_read+0x2a2>
	if (fp->err)								/* Check error */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	79db      	ldrb	r3, [r3, #7]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	79db      	ldrb	r3, [r3, #7]
 800d23c:	e133      	b.n	800d4a6 <f_read+0x2a2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	799b      	ldrb	r3, [r3, #6]
 800d242:	f003 0301 	and.w	r3, r3, #1
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d24a:	2307      	movs	r3, #7
 800d24c:	e12b      	b.n	800d4a6 <f_read+0x2a2>
	remain = fp->fsize - fp->fptr;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	68da      	ldr	r2, [r3, #12]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	429a      	cmp	r2, r3
 800d260:	f240 811c 	bls.w	800d49c <f_read+0x298>
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d268:	e118      	b.n	800d49c <f_read+0x298>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	6812      	ldr	r2, [r2, #0]
 800d272:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d276:	fbb3 f1f2 	udiv	r1, r3, r2
 800d27a:	fb02 f201 	mul.w	r2, r2, r1
 800d27e:	1a9b      	subs	r3, r3, r2
 800d280:	2b00      	cmp	r3, #0
 800d282:	f040 80bc 	bne.w	800d3fe <f_read+0x1fa>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	6812      	ldr	r2, [r2, #0]
 800d28e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d292:	fbb3 f3f2 	udiv	r3, r3, r2
 800d296:	b2da      	uxtb	r2, r3
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800d2a8:	7dfb      	ldrb	r3, [r7, #23]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d130      	bne.n	800d310 <f_read+0x10c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d103      	bne.n	800d2be <f_read+0xba>
					clst = fp->sclust;			/* Follow from the origin */
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2bc:	e014      	b.n	800d2e8 <f_read+0xe4>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d007      	beq.n	800d2d6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f7fe fa32 	bl	800b736 <clmt_clust>
 800d2d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d2d4:	e008      	b.n	800d2e8 <f_read+0xe4>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	695b      	ldr	r3, [r3, #20]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	f7fd ff03 	bl	800b0ec <get_fat>
 800d2e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d804      	bhi.n	800d2f8 <f_read+0xf4>
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	71da      	strb	r2, [r3, #7]
 800d2f4:	2302      	movs	r3, #2
 800d2f6:	e0d6      	b.n	800d4a6 <f_read+0x2a2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fe:	d104      	bne.n	800d30a <f_read+0x106>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2201      	movs	r2, #1
 800d304:	71da      	strb	r2, [r3, #7]
 800d306:	2301      	movs	r3, #1
 800d308:	e0cd      	b.n	800d4a6 <f_read+0x2a2>
				fp->clust = clst;				/* Update current cluster */
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d30e:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	4619      	mov	r1, r3
 800d31a:	4610      	mov	r0, r2
 800d31c:	f7fd fec5 	bl	800b0aa <clust2sect>
 800d320:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d104      	bne.n	800d332 <f_read+0x12e>
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2202      	movs	r2, #2
 800d32c:	71da      	strb	r2, [r3, #7]
 800d32e:	2302      	movs	r3, #2
 800d330:	e0b9      	b.n	800d4a6 <f_read+0x2a2>
			sect += csect;
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	4413      	add	r3, r2
 800d338:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d342:	461a      	mov	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	fbb3 f3f2 	udiv	r3, r3, r2
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d052      	beq.n	800d3f8 <f_read+0x1f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d352:	7dfa      	ldrb	r2, [r7, #23]
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	4413      	add	r3, r2
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	6812      	ldr	r2, [r2, #0]
 800d35c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800d360:	4293      	cmp	r3, r2
 800d362:	d907      	bls.n	800d374 <f_read+0x170>
					cc = fp->fs->csize - csect;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d36c:	461a      	mov	r2, r3
 800d36e:	7dfb      	ldrb	r3, [r7, #23]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800d37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	6a39      	ldr	r1, [r7, #32]
 800d382:	f7fd faeb 	bl	800a95c <disk_read>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d004      	beq.n	800d396 <f_read+0x192>
					ABORT(fp->fs, FR_DISK_ERR);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2201      	movs	r2, #1
 800d390:	71da      	strb	r2, [r3, #7]
 800d392:	2301      	movs	r3, #1
 800d394:	e087      	b.n	800d4a6 <f_read+0x2a2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d020      	beq.n	800d3e4 <f_read+0x1e0>
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d917      	bls.n	800d3e4 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	6812      	ldr	r2, [r2, #0]
 800d3c4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d3c8:	fb02 f303 	mul.w	r3, r2, r3
 800d3cc:	6a3a      	ldr	r2, [r7, #32]
 800d3ce:	18d0      	adds	r0, r2, r3
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d3de:	461a      	mov	r2, r3
 800d3e0:	f7fd fb1a 	bl	800aa18 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f0:	fb02 f303 	mul.w	r3, r2, r3
 800d3f4:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800d3f6:	e03d      	b.n	800d474 <f_read+0x270>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d406:	4618      	mov	r0, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	6812      	ldr	r2, [r2, #0]
 800d410:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d414:	fbb3 f1f2 	udiv	r1, r3, r2
 800d418:	fb02 f201 	mul.w	r2, r2, r1
 800d41c:	1a9b      	subs	r3, r3, r2
 800d41e:	1ac3      	subs	r3, r0, r3
 800d420:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800d422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	429a      	cmp	r2, r3
 800d428:	d901      	bls.n	800d42e <f_read+0x22a>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	4619      	mov	r1, r3
 800d438:	4610      	mov	r0, r2
 800d43a:	f7fd fd5a 	bl	800aef2 <move_window>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d004      	beq.n	800d44e <f_read+0x24a>
			ABORT(fp->fs, FR_DISK_ERR);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2201      	movs	r2, #1
 800d448:	71da      	strb	r2, [r3, #7]
 800d44a:	2301      	movs	r3, #1
 800d44c:	e02b      	b.n	800d4a6 <f_read+0x2a2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6819      	ldr	r1, [r3, #0]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	6812      	ldr	r2, [r2, #0]
 800d45a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d45e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d462:	fb02 f200 	mul.w	r2, r2, r0
 800d466:	1a9b      	subs	r3, r3, r2
 800d468:	440b      	add	r3, r1
 800d46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d46c:	4619      	mov	r1, r3
 800d46e:	6a38      	ldr	r0, [r7, #32]
 800d470:	f7fd fad2 	bl	800aa18 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d474:	6a3a      	ldr	r2, [r7, #32]
 800d476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d478:	4413      	add	r3, r2
 800d47a:	623b      	str	r3, [r7, #32]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	689a      	ldr	r2, [r3, #8]
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	441a      	add	r2, r3
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	609a      	str	r2, [r3, #8]
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	441a      	add	r2, r3
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f47f aee3 	bne.w	800d26a <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3730      	adds	r7, #48	; 0x30
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b08a      	sub	sp, #40	; 0x28
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	60f8      	str	r0, [r7, #12]
 800d4b6:	60b9      	str	r1, [r7, #8]
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f7ff fca6 	bl	800ce18 <validate>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d4d0:	7dfb      	ldrb	r3, [r7, #23]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <f_write+0x2c>
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	e191      	b.n	800d7fe <f_write+0x350>
	if (fp->err)							/* Check error */
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	79db      	ldrb	r3, [r3, #7]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d002      	beq.n	800d4e8 <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	79db      	ldrb	r3, [r3, #7]
 800d4e6:	e18a      	b.n	800d7fe <f_write+0x350>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	799b      	ldrb	r3, [r3, #6]
 800d4ec:	f003 0302 	and.w	r3, r3, #2
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d101      	bne.n	800d4f8 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d4f4:	2307      	movs	r3, #7
 800d4f6:	e182      	b.n	800d7fe <f_write+0x350>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	689a      	ldr	r2, [r3, #8]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	441a      	add	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	429a      	cmp	r2, r3
 800d506:	f080 8162 	bcs.w	800d7ce <f_write+0x320>
 800d50a:	2300      	movs	r3, #0
 800d50c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800d50e:	e15e      	b.n	800d7ce <f_write+0x320>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	6812      	ldr	r2, [r2, #0]
 800d518:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d51c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d520:	fb02 f201 	mul.w	r2, r2, r1
 800d524:	1a9b      	subs	r3, r3, r2
 800d526:	2b00      	cmp	r3, #0
 800d528:	f040 80fd 	bne.w	800d726 <f_write+0x278>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	6812      	ldr	r2, [r2, #0]
 800d534:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d538:	fbb3 f3f2 	udiv	r3, r3, r2
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d546:	3b01      	subs	r3, #1
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	4013      	ands	r3, r2
 800d54c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800d54e:	7dbb      	ldrb	r3, [r7, #22]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d145      	bne.n	800d5e0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10d      	bne.n	800d578 <f_write+0xca>
					clst = fp->sclust;		/* Follow from the origin */
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800d562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d564:	2b00      	cmp	r3, #0
 800d566:	d11c      	bne.n	800d5a2 <f_write+0xf4>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2100      	movs	r1, #0
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fe f844 	bl	800b5fc <create_chain>
 800d574:	6278      	str	r0, [r7, #36]	; 0x24
 800d576:	e014      	b.n	800d5a2 <f_write+0xf4>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d007      	beq.n	800d590 <f_write+0xe2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	4619      	mov	r1, r3
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f7fe f8d5 	bl	800b736 <clmt_clust>
 800d58c:	6278      	str	r0, [r7, #36]	; 0x24
 800d58e:	e008      	b.n	800d5a2 <f_write+0xf4>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	695b      	ldr	r3, [r3, #20]
 800d598:	4619      	mov	r1, r3
 800d59a:	4610      	mov	r0, r2
 800d59c:	f7fe f82e 	bl	800b5fc <create_chain>
 800d5a0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 8117 	beq.w	800d7d8 <f_write+0x32a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d104      	bne.n	800d5ba <f_write+0x10c>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2202      	movs	r2, #2
 800d5b4:	71da      	strb	r2, [r3, #7]
 800d5b6:	2302      	movs	r3, #2
 800d5b8:	e121      	b.n	800d7fe <f_write+0x350>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c0:	d104      	bne.n	800d5cc <f_write+0x11e>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	71da      	strb	r2, [r3, #7]
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e118      	b.n	800d7fe <f_write+0x350>
				fp->clust = clst;			/* Update current cluster */
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5d0:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d102      	bne.n	800d5e0 <f_write+0x132>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5de:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	699b      	ldr	r3, [r3, #24]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d10c      	bne.n	800d60a <f_write+0x15c>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fd fc33 	bl	800ae60 <sync_window>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d004      	beq.n	800d60a <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2201      	movs	r2, #1
 800d604:	71da      	strb	r2, [r3, #7]
 800d606:	2301      	movs	r3, #1
 800d608:	e0f9      	b.n	800d7fe <f_write+0x350>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	4619      	mov	r1, r3
 800d614:	4610      	mov	r0, r2
 800d616:	f7fd fd48 	bl	800b0aa <clust2sect>
 800d61a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d104      	bne.n	800d62c <f_write+0x17e>
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2202      	movs	r2, #2
 800d626:	71da      	strb	r2, [r3, #7]
 800d628:	2302      	movs	r3, #2
 800d62a:	e0e8      	b.n	800d7fe <f_write+0x350>
			sect += csect;
 800d62c:	7dbb      	ldrb	r3, [r7, #22]
 800d62e:	693a      	ldr	r2, [r7, #16]
 800d630:	4413      	add	r3, r2
 800d632:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d63c:	461a      	mov	r2, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	fbb3 f3f2 	udiv	r3, r3, r2
 800d644:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d051      	beq.n	800d6f0 <f_write+0x242>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d64c:	7dba      	ldrb	r2, [r7, #22]
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	4413      	add	r3, r2
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	6812      	ldr	r2, [r2, #0]
 800d656:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d907      	bls.n	800d66e <f_write+0x1c0>
					cc = fp->fs->csize - csect;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800d666:	461a      	mov	r2, r3
 800d668:	7dbb      	ldrb	r3, [r7, #22]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	693a      	ldr	r2, [r7, #16]
 800d67a:	69b9      	ldr	r1, [r7, #24]
 800d67c:	f7fd f98e 	bl	800a99c <disk_write>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d004      	beq.n	800d690 <f_write+0x1e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2201      	movs	r2, #1
 800d68a:	71da      	strb	r2, [r3, #7]
 800d68c:	2301      	movs	r3, #1
 800d68e:	e0b6      	b.n	800d7fe <f_write+0x350>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	69fa      	ldr	r2, [r7, #28]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d91c      	bls.n	800d6dc <f_write+0x22e>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	6812      	ldr	r2, [r2, #0]
 800d6b8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d6bc:	fb02 f303 	mul.w	r3, r2, r3
 800d6c0:	69ba      	ldr	r2, [r7, #24]
 800d6c2:	18d1      	adds	r1, r2, r3
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	f7fd f9a3 	bl	800aa18 <mem_cpy>
					fp->fs->wflag = 0;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	fb02 f303 	mul.w	r3, r2, r3
 800d6ec:	623b      	str	r3, [r7, #32]
				continue;
 800d6ee:	e05a      	b.n	800d7a6 <f_write+0x2f8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	689a      	ldr	r2, [r3, #8]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d311      	bcc.n	800d720 <f_write+0x272>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f7fd fbad 	bl	800ae60 <sync_window>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d004      	beq.n	800d716 <f_write+0x268>
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2201      	movs	r2, #1
 800d710:	71da      	strb	r2, [r3, #7]
 800d712:	2301      	movs	r3, #1
 800d714:	e073      	b.n	800d7fe <f_write+0x350>
				fp->fs->winsect = sect;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	693a      	ldr	r2, [r7, #16]
 800d71c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800d72e:	4618      	mov	r0, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	6812      	ldr	r2, [r2, #0]
 800d738:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d73c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d740:	fb02 f201 	mul.w	r2, r2, r1
 800d744:	1a9b      	subs	r3, r3, r2
 800d746:	1ac3      	subs	r3, r0, r3
 800d748:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800d74a:	6a3a      	ldr	r2, [r7, #32]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d901      	bls.n	800d756 <f_write+0x2a8>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	4619      	mov	r1, r3
 800d760:	4610      	mov	r0, r2
 800d762:	f7fd fbc6 	bl	800aef2 <move_window>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d004      	beq.n	800d776 <f_write+0x2c8>
			ABORT(fp->fs, FR_DISK_ERR);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2201      	movs	r2, #1
 800d770:	71da      	strb	r2, [r3, #7]
 800d772:	2301      	movs	r3, #1
 800d774:	e043      	b.n	800d7fe <f_write+0x350>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6819      	ldr	r1, [r3, #0]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	6812      	ldr	r2, [r2, #0]
 800d782:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800d786:	fbb3 f0f2 	udiv	r0, r3, r2
 800d78a:	fb02 f200 	mul.w	r2, r2, r0
 800d78e:	1a9b      	subs	r3, r3, r2
 800d790:	440b      	add	r3, r1
 800d792:	6a3a      	ldr	r2, [r7, #32]
 800d794:	69b9      	ldr	r1, [r7, #24]
 800d796:	4618      	mov	r0, r3
 800d798:	f7fd f93e 	bl	800aa18 <mem_cpy>
		fp->fs->wflag = 1;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d7a6:	69ba      	ldr	r2, [r7, #24]
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	61bb      	str	r3, [r7, #24]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	689a      	ldr	r2, [r3, #8]
 800d7b2:	6a3b      	ldr	r3, [r7, #32]
 800d7b4:	441a      	add	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	609a      	str	r2, [r3, #8]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	441a      	add	r2, r3
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f47f ae9d 	bne.w	800d510 <f_write+0x62>
 800d7d6:	e000      	b.n	800d7da <f_write+0x32c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d7d8:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	689a      	ldr	r2, [r3, #8]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d903      	bls.n	800d7ee <f_write+0x340>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	689a      	ldr	r2, [r3, #8]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	799b      	ldrb	r3, [r3, #6]
 800d7f2:	f043 0320 	orr.w	r3, r3, #32
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3728      	adds	r7, #40	; 0x28
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b086      	sub	sp, #24
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fb02 	bl	800ce18 <validate>
 800d814:	4603      	mov	r3, r0
 800d816:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d178      	bne.n	800d910 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	799b      	ldrb	r3, [r3, #6]
 800d822:	f003 0320 	and.w	r3, r3, #32
 800d826:	2b00      	cmp	r3, #0
 800d828:	d072      	beq.n	800d910 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	69db      	ldr	r3, [r3, #28]
 800d832:	4619      	mov	r1, r3
 800d834:	4610      	mov	r0, r2
 800d836:	f7fd fb5c 	bl	800aef2 <move_window>
 800d83a:	4603      	mov	r3, r0
 800d83c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d83e:	7dfb      	ldrb	r3, [r7, #23]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d165      	bne.n	800d910 <f_sync+0x10a>
				dir = fp->dir_ptr;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6a1b      	ldr	r3, [r3, #32]
 800d848:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	330b      	adds	r3, #11
 800d84e:	781a      	ldrb	r2, [r3, #0]
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	330b      	adds	r3, #11
 800d854:	f042 0220 	orr.w	r2, r2, #32
 800d858:	b2d2      	uxtb	r2, r2
 800d85a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68da      	ldr	r2, [r3, #12]
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	331c      	adds	r3, #28
 800d864:	b2d2      	uxtb	r2, r2
 800d866:	701a      	strb	r2, [r3, #0]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	0a1b      	lsrs	r3, r3, #8
 800d870:	b29a      	uxth	r2, r3
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	331d      	adds	r3, #29
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	701a      	strb	r2, [r3, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	0c1a      	lsrs	r2, r3, #16
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	331e      	adds	r3, #30
 800d884:	b2d2      	uxtb	r2, r2
 800d886:	701a      	strb	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	0e1a      	lsrs	r2, r3, #24
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	331f      	adds	r3, #31
 800d892:	b2d2      	uxtb	r2, r2
 800d894:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	4619      	mov	r1, r3
 800d89c:	6938      	ldr	r0, [r7, #16]
 800d89e:	f7fe f98e 	bl	800bbbe <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d8a2:	f7fc ffb5 	bl	800a810 <get_fattime>
 800d8a6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	3316      	adds	r3, #22
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	b2d2      	uxtb	r2, r2
 800d8b0:	701a      	strb	r2, [r3, #0]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	0a1b      	lsrs	r3, r3, #8
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	3317      	adds	r3, #23
 800d8be:	b2d2      	uxtb	r2, r2
 800d8c0:	701a      	strb	r2, [r3, #0]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	0c1a      	lsrs	r2, r3, #16
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	3318      	adds	r3, #24
 800d8ca:	b2d2      	uxtb	r2, r2
 800d8cc:	701a      	strb	r2, [r3, #0]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	0e1a      	lsrs	r2, r3, #24
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	3319      	adds	r3, #25
 800d8d6:	b2d2      	uxtb	r2, r2
 800d8d8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	3312      	adds	r3, #18
 800d8de:	2200      	movs	r2, #0
 800d8e0:	701a      	strb	r2, [r3, #0]
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	3313      	adds	r3, #19
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	799b      	ldrb	r3, [r3, #6]
 800d8ee:	f023 0320 	bic.w	r3, r3, #32
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f7fd fb21 	bl	800af4e <sync_fs>
 800d90c:	4603      	mov	r3, r0
 800d90e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d910:	7dfb      	ldrb	r3, [r7, #23]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b084      	sub	sp, #16
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f7ff ff6f 	bl	800d806 <f_sync>
 800d928:	4603      	mov	r3, r0
 800d92a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d114      	bne.n	800d95c <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f7ff fa70 	bl	800ce18 <validate>
 800d938:	4603      	mov	r3, r0
 800d93a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d10c      	bne.n	800d95c <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d946:	4618      	mov	r0, r3
 800d948:	f7fd fa1c 	bl	800ad84 <dec_lock>
 800d94c:	4603      	mov	r3, r0
 800d94e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d102      	bne.n	800d95c <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b090      	sub	sp, #64	; 0x40
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
 800d96e:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7ff fa51 	bl	800ce18 <validate>
 800d976:	4603      	mov	r3, r0
 800d978:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d97c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <f_lseek+0x24>
 800d984:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d988:	e1c4      	b.n	800dd14 <f_lseek+0x3ae>
	if (fp->err)						/* Check error */
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	79db      	ldrb	r3, [r3, #7]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <f_lseek+0x32>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	79db      	ldrb	r3, [r3, #7]
 800d996:	e1bd      	b.n	800dd14 <f_lseek+0x3ae>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	f000 80b4 	beq.w	800db0a <f_lseek+0x1a4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a8:	d15d      	bne.n	800da66 <f_lseek+0x100>
			tbl = fp->cltbl;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ae:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	1d1a      	adds	r2, r3, #4
 800d9b4:	627a      	str	r2, [r7, #36]	; 0x24
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	617b      	str	r3, [r7, #20]
 800d9ba:	2302      	movs	r3, #2
 800d9bc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d03d      	beq.n	800da46 <f_lseek+0xe0>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9cc:	613b      	str	r3, [r7, #16]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d4:	3302      	adds	r3, #2
 800d9d6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	3301      	adds	r3, #1
 800d9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fd fb7f 	bl	800b0ec <get_fat>
 800d9ee:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d804      	bhi.n	800da00 <f_lseek+0x9a>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	71da      	strb	r2, [r3, #7]
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	e189      	b.n	800dd14 <f_lseek+0x3ae>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da06:	d104      	bne.n	800da12 <f_lseek+0xac>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	71da      	strb	r2, [r3, #7]
 800da0e:	2301      	movs	r3, #1
 800da10:	e180      	b.n	800dd14 <f_lseek+0x3ae>
					} while (cl == pcl + 1);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	3301      	adds	r3, #1
 800da16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da18:	429a      	cmp	r2, r3
 800da1a:	d0dd      	beq.n	800d9d8 <f_lseek+0x72>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800da1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	429a      	cmp	r2, r3
 800da22:	d809      	bhi.n	800da38 <f_lseek+0xd2>
						*tbl++ = ncl; *tbl++ = tcl;
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	1d1a      	adds	r2, r3, #4
 800da28:	627a      	str	r2, [r7, #36]	; 0x24
 800da2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	1d1a      	adds	r2, r3, #4
 800da32:	627a      	str	r2, [r7, #36]	; 0x24
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800da40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da42:	429a      	cmp	r2, r3
 800da44:	d3c1      	bcc.n	800d9ca <f_lseek+0x64>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da4c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800da4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	429a      	cmp	r2, r3
 800da54:	d803      	bhi.n	800da5e <f_lseek+0xf8>
				*tbl = 0;		/* Terminate table */
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
 800da5c:	e158      	b.n	800dd10 <f_lseek+0x3aa>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800da5e:	2311      	movs	r3, #17
 800da60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800da64:	e154      	b.n	800dd10 <f_lseek+0x3aa>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d902      	bls.n	800da76 <f_lseek+0x110>
				ofs = fp->fsize;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	609a      	str	r2, [r3, #8]
			if (ofs) {
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f000 8146 	beq.w	800dd10 <f_lseek+0x3aa>
				fp->clust = clmt_clust(fp, ofs - 1);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	3b01      	subs	r3, #1
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7fd fe53 	bl	800b736 <clmt_clust>
 800da90:	4602      	mov	r2, r0
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	4619      	mov	r1, r3
 800daa0:	4610      	mov	r0, r2
 800daa2:	f7fd fb02 	bl	800b0aa <clust2sect>
 800daa6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d104      	bne.n	800dab8 <f_lseek+0x152>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2202      	movs	r2, #2
 800dab2:	71da      	strb	r2, [r3, #7]
 800dab4:	2302      	movs	r3, #2
 800dab6:	e12d      	b.n	800dd14 <f_lseek+0x3ae>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	3b01      	subs	r3, #1
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	6812      	ldr	r2, [r2, #0]
 800dac0:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dac4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	6812      	ldr	r2, [r2, #0]
 800dacc:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800dad0:	3a01      	subs	r2, #1
 800dad2:	4013      	ands	r3, r2
 800dad4:	69ba      	ldr	r2, [r7, #24]
 800dad6:	4413      	add	r3, r2
 800dad8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	6812      	ldr	r2, [r2, #0]
 800dae2:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dae6:	fbb3 f1f2 	udiv	r1, r3, r2
 800daea:	fb02 f201 	mul.w	r2, r2, r1
 800daee:	1a9b      	subs	r3, r3, r2
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 810d 	beq.w	800dd10 <f_lseek+0x3aa>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	69ba      	ldr	r2, [r7, #24]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	f000 8107 	beq.w	800dd10 <f_lseek+0x3aa>
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
						ABORT(fp->fs, FR_DISK_ERR);
#endif
					fp->dsect = dsc;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	69ba      	ldr	r2, [r7, #24]
 800db06:	619a      	str	r2, [r3, #24]
 800db08:	e102      	b.n	800dd10 <f_lseek+0x3aa>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d908      	bls.n	800db26 <f_lseek+0x1c0>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	799b      	ldrb	r3, [r3, #6]
 800db18:	f003 0302 	and.w	r3, r3, #2
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d102      	bne.n	800db26 <f_lseek+0x1c0>
#endif
			) ofs = fp->fsize;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	637b      	str	r3, [r7, #52]	; 0x34
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db34:	609a      	str	r2, [r3, #8]
		if (ofs) {
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 80c3 	beq.w	800dcc4 <f_lseek+0x35e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800db46:	461a      	mov	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800db50:	fb03 f302 	mul.w	r3, r3, r2
 800db54:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800db56:	6a3b      	ldr	r3, [r7, #32]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d01b      	beq.n	800db94 <f_lseek+0x22e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	1e5a      	subs	r2, r3, #1
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	fbb2 f2f3 	udiv	r2, r2, r3
 800db66:	6a3b      	ldr	r3, [r7, #32]
 800db68:	1e59      	subs	r1, r3, #1
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800db70:	429a      	cmp	r2, r3
 800db72:	d30f      	bcc.n	800db94 <f_lseek+0x22e>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800db74:	6a3b      	ldr	r3, [r7, #32]
 800db76:	1e5a      	subs	r2, r3, #1
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	425b      	negs	r3, r3
 800db7c:	401a      	ands	r2, r3
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	1ad3      	subs	r3, r2, r3
 800db8a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	695b      	ldr	r3, [r3, #20]
 800db90:	63bb      	str	r3, [r7, #56]	; 0x38
 800db92:	e023      	b.n	800dbdc <f_lseek+0x276>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800db9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d11a      	bne.n	800dbd6 <f_lseek+0x270>
					clst = create_chain(fp->fs, 0);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2100      	movs	r1, #0
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fd fd28 	bl	800b5fc <create_chain>
 800dbac:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800dbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d104      	bne.n	800dbbe <f_lseek+0x258>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	71da      	strb	r2, [r3, #7]
 800dbba:	2302      	movs	r3, #2
 800dbbc:	e0aa      	b.n	800dd14 <f_lseek+0x3ae>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800dbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc4:	d104      	bne.n	800dbd0 <f_lseek+0x26a>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	71da      	strb	r2, [r3, #7]
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e0a1      	b.n	800dd14 <f_lseek+0x3ae>
					fp->sclust = clst;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbd4:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbda:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 800dbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d070      	beq.n	800dcc4 <f_lseek+0x35e>
				while (ofs > bcs) {						/* Cluster following loop */
 800dbe2:	e03e      	b.n	800dc62 <f_lseek+0x2fc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	799b      	ldrb	r3, [r3, #6]
 800dbe8:	f003 0302 	and.w	r3, r3, #2
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00c      	beq.n	800dc0a <f_lseek+0x2a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd fd00 	bl	800b5fc <create_chain>
 800dbfc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800dbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d109      	bne.n	800dc18 <f_lseek+0x2b2>
							ofs = bcs; break;
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	603b      	str	r3, [r7, #0]
 800dc08:	e02f      	b.n	800dc6a <f_lseek+0x304>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fd fa6b 	bl	800b0ec <get_fat>
 800dc16:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800dc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1e:	d104      	bne.n	800dc2a <f_lseek+0x2c4>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2201      	movs	r2, #1
 800dc24:	71da      	strb	r2, [r3, #7]
 800dc26:	2301      	movs	r3, #1
 800dc28:	e074      	b.n	800dd14 <f_lseek+0x3ae>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d906      	bls.n	800dc3e <f_lseek+0x2d8>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800dc38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d304      	bcc.n	800dc48 <f_lseek+0x2e2>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2202      	movs	r2, #2
 800dc42:	71da      	strb	r2, [r3, #7]
 800dc44:	2302      	movs	r3, #2
 800dc46:	e065      	b.n	800dd14 <f_lseek+0x3ae>
					fp->clust = clst;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc4c:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	689a      	ldr	r2, [r3, #8]
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	441a      	add	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	1ad3      	subs	r3, r2, r3
 800dc60:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d8bc      	bhi.n	800dbe4 <f_lseek+0x27e>
				}
				fp->fptr += ofs;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	689a      	ldr	r2, [r3, #8]
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	441a      	add	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dc7e:	461a      	mov	r2, r3
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc86:	fb02 f201 	mul.w	r2, r2, r1
 800dc8a:	1a9b      	subs	r3, r3, r2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d019      	beq.n	800dcc4 <f_lseek+0x35e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fd fa07 	bl	800b0aa <clust2sect>
 800dc9c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800dc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d104      	bne.n	800dcae <f_lseek+0x348>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2202      	movs	r2, #2
 800dca8:	71da      	strb	r2, [r3, #7]
 800dcaa:	2302      	movs	r3, #2
 800dcac:	e032      	b.n	800dd14 <f_lseek+0x3ae>
					nsect += ofs / SS(fp->fs);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcc0:	4413      	add	r3, r2
 800dcc2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	6812      	ldr	r2, [r2, #0]
 800dccc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800dcd0:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcd4:	fb02 f201 	mul.w	r2, r2, r1
 800dcd8:	1a9b      	subs	r3, r3, r2
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d007      	beq.n	800dcee <f_lseek+0x388>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	699b      	ldr	r3, [r3, #24]
 800dce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d002      	beq.n	800dcee <f_lseek+0x388>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcec:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	689a      	ldr	r2, [r3, #8]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d90a      	bls.n	800dd10 <f_lseek+0x3aa>
			fp->fsize = fp->fptr;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	689a      	ldr	r2, [r3, #8]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	799b      	ldrb	r3, [r3, #6]
 800dd06:	f043 0320 	orr.w	r3, r3, #32
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800dd10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3740      	adds	r7, #64	; 0x40
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b087      	sub	sp, #28
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	4613      	mov	r3, r2
 800dd28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800dd32:	4b1e      	ldr	r3, [pc, #120]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd34:	7a5b      	ldrb	r3, [r3, #9]
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d831      	bhi.n	800dda0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd3c:	4b1b      	ldr	r3, [pc, #108]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd3e:	7a5b      	ldrb	r3, [r3, #9]
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	461a      	mov	r2, r3
 800dd44:	4b19      	ldr	r3, [pc, #100]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd46:	2100      	movs	r1, #0
 800dd48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800dd4a:	4b18      	ldr	r3, [pc, #96]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd4c:	7a5b      	ldrb	r3, [r3, #9]
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	4a16      	ldr	r2, [pc, #88]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800dd5a:	4b14      	ldr	r3, [pc, #80]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd5c:	7a5b      	ldrb	r3, [r3, #9]
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	461a      	mov	r2, r3
 800dd62:	4b12      	ldr	r3, [pc, #72]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd64:	4413      	add	r3, r2
 800dd66:	79fa      	ldrb	r2, [r7, #7]
 800dd68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd6a:	4b10      	ldr	r3, [pc, #64]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd6c:	7a5b      	ldrb	r3, [r3, #9]
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	b2d1      	uxtb	r1, r2
 800dd74:	4a0d      	ldr	r2, [pc, #52]	; (800ddac <FATFS_LinkDriverEx+0x90>)
 800dd76:	7251      	strb	r1, [r2, #9]
 800dd78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd7a:	7dbb      	ldrb	r3, [r7, #22]
 800dd7c:	3330      	adds	r3, #48	; 0x30
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	3301      	adds	r3, #1
 800dd88:	223a      	movs	r2, #58	; 0x3a
 800dd8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	3302      	adds	r3, #2
 800dd90:	222f      	movs	r2, #47	; 0x2f
 800dd92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	3303      	adds	r3, #3
 800dd98:	2200      	movs	r2, #0
 800dd9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	371c      	adds	r7, #28
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bc80      	pop	{r7}
 800ddaa:	4770      	bx	lr
 800ddac:	200002cc 	.word	0x200002cc

0800ddb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ddba:	2200      	movs	r2, #0
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f7ff ffac 	bl	800dd1c <FATFS_LinkDriverEx>
 800ddc4:	4603      	mov	r3, r0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
	...

0800ddd0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b085      	sub	sp, #20
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	6039      	str	r1, [r7, #0]
 800ddda:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dddc:	88fb      	ldrh	r3, [r7, #6]
 800ddde:	2b7f      	cmp	r3, #127	; 0x7f
 800dde0:	d802      	bhi.n	800dde8 <ff_convert+0x18>
		c = chr;
 800dde2:	88fb      	ldrh	r3, [r7, #6]
 800dde4:	81fb      	strh	r3, [r7, #14]
 800dde6:	e025      	b.n	800de34 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00b      	beq.n	800de06 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ddee:	88fb      	ldrh	r3, [r7, #6]
 800ddf0:	2bff      	cmp	r3, #255	; 0xff
 800ddf2:	d805      	bhi.n	800de00 <ff_convert+0x30>
 800ddf4:	88fb      	ldrh	r3, [r7, #6]
 800ddf6:	3b80      	subs	r3, #128	; 0x80
 800ddf8:	4a11      	ldr	r2, [pc, #68]	; (800de40 <ff_convert+0x70>)
 800ddfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddfe:	e000      	b.n	800de02 <ff_convert+0x32>
 800de00:	2300      	movs	r3, #0
 800de02:	81fb      	strh	r3, [r7, #14]
 800de04:	e016      	b.n	800de34 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800de06:	2300      	movs	r3, #0
 800de08:	81fb      	strh	r3, [r7, #14]
 800de0a:	e009      	b.n	800de20 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800de0c:	89fb      	ldrh	r3, [r7, #14]
 800de0e:	4a0c      	ldr	r2, [pc, #48]	; (800de40 <ff_convert+0x70>)
 800de10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de14:	88fa      	ldrh	r2, [r7, #6]
 800de16:	429a      	cmp	r2, r3
 800de18:	d006      	beq.n	800de28 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800de1a:	89fb      	ldrh	r3, [r7, #14]
 800de1c:	3301      	adds	r3, #1
 800de1e:	81fb      	strh	r3, [r7, #14]
 800de20:	89fb      	ldrh	r3, [r7, #14]
 800de22:	2b7f      	cmp	r3, #127	; 0x7f
 800de24:	d9f2      	bls.n	800de0c <ff_convert+0x3c>
 800de26:	e000      	b.n	800de2a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800de28:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800de2a:	89fb      	ldrh	r3, [r7, #14]
 800de2c:	3380      	adds	r3, #128	; 0x80
 800de2e:	b29b      	uxth	r3, r3
 800de30:	b2db      	uxtb	r3, r3
 800de32:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800de34:	89fb      	ldrh	r3, [r7, #14]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3714      	adds	r7, #20
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bc80      	pop	{r7}
 800de3e:	4770      	bx	lr
 800de40:	0800e990 	.word	0x0800e990

0800de44 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
 800de52:	e002      	b.n	800de5a <ff_wtoupper+0x16>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	3301      	adds	r3, #1
 800de58:	60fb      	str	r3, [r7, #12]
 800de5a:	4a0f      	ldr	r2, [pc, #60]	; (800de98 <ff_wtoupper+0x54>)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d006      	beq.n	800de74 <ff_wtoupper+0x30>
 800de66:	4a0c      	ldr	r2, [pc, #48]	; (800de98 <ff_wtoupper+0x54>)
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de6e:	88fa      	ldrh	r2, [r7, #6]
 800de70:	429a      	cmp	r2, r3
 800de72:	d1ef      	bne.n	800de54 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800de74:	4a08      	ldr	r2, [pc, #32]	; (800de98 <ff_wtoupper+0x54>)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d004      	beq.n	800de8a <ff_wtoupper+0x46>
 800de80:	4a06      	ldr	r2, [pc, #24]	; (800de9c <ff_wtoupper+0x58>)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de88:	e000      	b.n	800de8c <ff_wtoupper+0x48>
 800de8a:	88fb      	ldrh	r3, [r7, #6]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3714      	adds	r7, #20
 800de90:	46bd      	mov	sp, r7
 800de92:	bc80      	pop	{r7}
 800de94:	4770      	bx	lr
 800de96:	bf00      	nop
 800de98:	0800ea90 	.word	0x0800ea90
 800de9c:	0800ec70 	.word	0x0800ec70

0800dea0 <__errno>:
 800dea0:	4b01      	ldr	r3, [pc, #4]	; (800dea8 <__errno+0x8>)
 800dea2:	6818      	ldr	r0, [r3, #0]
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	20000024 	.word	0x20000024

0800deac <__libc_init_array>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	2600      	movs	r6, #0
 800deb0:	4d0c      	ldr	r5, [pc, #48]	; (800dee4 <__libc_init_array+0x38>)
 800deb2:	4c0d      	ldr	r4, [pc, #52]	; (800dee8 <__libc_init_array+0x3c>)
 800deb4:	1b64      	subs	r4, r4, r5
 800deb6:	10a4      	asrs	r4, r4, #2
 800deb8:	42a6      	cmp	r6, r4
 800deba:	d109      	bne.n	800ded0 <__libc_init_array+0x24>
 800debc:	f000 fc5c 	bl	800e778 <_init>
 800dec0:	2600      	movs	r6, #0
 800dec2:	4d0a      	ldr	r5, [pc, #40]	; (800deec <__libc_init_array+0x40>)
 800dec4:	4c0a      	ldr	r4, [pc, #40]	; (800def0 <__libc_init_array+0x44>)
 800dec6:	1b64      	subs	r4, r4, r5
 800dec8:	10a4      	asrs	r4, r4, #2
 800deca:	42a6      	cmp	r6, r4
 800decc:	d105      	bne.n	800deda <__libc_init_array+0x2e>
 800dece:	bd70      	pop	{r4, r5, r6, pc}
 800ded0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ded4:	4798      	blx	r3
 800ded6:	3601      	adds	r6, #1
 800ded8:	e7ee      	b.n	800deb8 <__libc_init_array+0xc>
 800deda:	f855 3b04 	ldr.w	r3, [r5], #4
 800dede:	4798      	blx	r3
 800dee0:	3601      	adds	r6, #1
 800dee2:	e7f2      	b.n	800deca <__libc_init_array+0x1e>
 800dee4:	0800ee84 	.word	0x0800ee84
 800dee8:	0800ee84 	.word	0x0800ee84
 800deec:	0800ee84 	.word	0x0800ee84
 800def0:	0800ee88 	.word	0x0800ee88

0800def4 <memset>:
 800def4:	4603      	mov	r3, r0
 800def6:	4402      	add	r2, r0
 800def8:	4293      	cmp	r3, r2
 800defa:	d100      	bne.n	800defe <memset+0xa>
 800defc:	4770      	bx	lr
 800defe:	f803 1b01 	strb.w	r1, [r3], #1
 800df02:	e7f9      	b.n	800def8 <memset+0x4>

0800df04 <siprintf>:
 800df04:	b40e      	push	{r1, r2, r3}
 800df06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df0a:	b500      	push	{lr}
 800df0c:	b09c      	sub	sp, #112	; 0x70
 800df0e:	ab1d      	add	r3, sp, #116	; 0x74
 800df10:	9002      	str	r0, [sp, #8]
 800df12:	9006      	str	r0, [sp, #24]
 800df14:	9107      	str	r1, [sp, #28]
 800df16:	9104      	str	r1, [sp, #16]
 800df18:	4808      	ldr	r0, [pc, #32]	; (800df3c <siprintf+0x38>)
 800df1a:	4909      	ldr	r1, [pc, #36]	; (800df40 <siprintf+0x3c>)
 800df1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df20:	9105      	str	r1, [sp, #20]
 800df22:	6800      	ldr	r0, [r0, #0]
 800df24:	a902      	add	r1, sp, #8
 800df26:	9301      	str	r3, [sp, #4]
 800df28:	f000 f868 	bl	800dffc <_svfiprintf_r>
 800df2c:	2200      	movs	r2, #0
 800df2e:	9b02      	ldr	r3, [sp, #8]
 800df30:	701a      	strb	r2, [r3, #0]
 800df32:	b01c      	add	sp, #112	; 0x70
 800df34:	f85d eb04 	ldr.w	lr, [sp], #4
 800df38:	b003      	add	sp, #12
 800df3a:	4770      	bx	lr
 800df3c:	20000024 	.word	0x20000024
 800df40:	ffff0208 	.word	0xffff0208

0800df44 <__ssputs_r>:
 800df44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df48:	688e      	ldr	r6, [r1, #8]
 800df4a:	4682      	mov	sl, r0
 800df4c:	429e      	cmp	r6, r3
 800df4e:	460c      	mov	r4, r1
 800df50:	4690      	mov	r8, r2
 800df52:	461f      	mov	r7, r3
 800df54:	d838      	bhi.n	800dfc8 <__ssputs_r+0x84>
 800df56:	898a      	ldrh	r2, [r1, #12]
 800df58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df5c:	d032      	beq.n	800dfc4 <__ssputs_r+0x80>
 800df5e:	6825      	ldr	r5, [r4, #0]
 800df60:	6909      	ldr	r1, [r1, #16]
 800df62:	3301      	adds	r3, #1
 800df64:	eba5 0901 	sub.w	r9, r5, r1
 800df68:	6965      	ldr	r5, [r4, #20]
 800df6a:	444b      	add	r3, r9
 800df6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df74:	106d      	asrs	r5, r5, #1
 800df76:	429d      	cmp	r5, r3
 800df78:	bf38      	it	cc
 800df7a:	461d      	movcc	r5, r3
 800df7c:	0553      	lsls	r3, r2, #21
 800df7e:	d531      	bpl.n	800dfe4 <__ssputs_r+0xa0>
 800df80:	4629      	mov	r1, r5
 800df82:	f000 fb53 	bl	800e62c <_malloc_r>
 800df86:	4606      	mov	r6, r0
 800df88:	b950      	cbnz	r0, 800dfa0 <__ssputs_r+0x5c>
 800df8a:	230c      	movs	r3, #12
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295
 800df90:	f8ca 3000 	str.w	r3, [sl]
 800df94:	89a3      	ldrh	r3, [r4, #12]
 800df96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfa0:	464a      	mov	r2, r9
 800dfa2:	6921      	ldr	r1, [r4, #16]
 800dfa4:	f000 face 	bl	800e544 <memcpy>
 800dfa8:	89a3      	ldrh	r3, [r4, #12]
 800dfaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dfae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfb2:	81a3      	strh	r3, [r4, #12]
 800dfb4:	6126      	str	r6, [r4, #16]
 800dfb6:	444e      	add	r6, r9
 800dfb8:	6026      	str	r6, [r4, #0]
 800dfba:	463e      	mov	r6, r7
 800dfbc:	6165      	str	r5, [r4, #20]
 800dfbe:	eba5 0509 	sub.w	r5, r5, r9
 800dfc2:	60a5      	str	r5, [r4, #8]
 800dfc4:	42be      	cmp	r6, r7
 800dfc6:	d900      	bls.n	800dfca <__ssputs_r+0x86>
 800dfc8:	463e      	mov	r6, r7
 800dfca:	4632      	mov	r2, r6
 800dfcc:	4641      	mov	r1, r8
 800dfce:	6820      	ldr	r0, [r4, #0]
 800dfd0:	f000 fac6 	bl	800e560 <memmove>
 800dfd4:	68a3      	ldr	r3, [r4, #8]
 800dfd6:	6822      	ldr	r2, [r4, #0]
 800dfd8:	1b9b      	subs	r3, r3, r6
 800dfda:	4432      	add	r2, r6
 800dfdc:	2000      	movs	r0, #0
 800dfde:	60a3      	str	r3, [r4, #8]
 800dfe0:	6022      	str	r2, [r4, #0]
 800dfe2:	e7db      	b.n	800df9c <__ssputs_r+0x58>
 800dfe4:	462a      	mov	r2, r5
 800dfe6:	f000 fb7b 	bl	800e6e0 <_realloc_r>
 800dfea:	4606      	mov	r6, r0
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d1e1      	bne.n	800dfb4 <__ssputs_r+0x70>
 800dff0:	4650      	mov	r0, sl
 800dff2:	6921      	ldr	r1, [r4, #16]
 800dff4:	f000 face 	bl	800e594 <_free_r>
 800dff8:	e7c7      	b.n	800df8a <__ssputs_r+0x46>
	...

0800dffc <_svfiprintf_r>:
 800dffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e000:	4698      	mov	r8, r3
 800e002:	898b      	ldrh	r3, [r1, #12]
 800e004:	4607      	mov	r7, r0
 800e006:	061b      	lsls	r3, r3, #24
 800e008:	460d      	mov	r5, r1
 800e00a:	4614      	mov	r4, r2
 800e00c:	b09d      	sub	sp, #116	; 0x74
 800e00e:	d50e      	bpl.n	800e02e <_svfiprintf_r+0x32>
 800e010:	690b      	ldr	r3, [r1, #16]
 800e012:	b963      	cbnz	r3, 800e02e <_svfiprintf_r+0x32>
 800e014:	2140      	movs	r1, #64	; 0x40
 800e016:	f000 fb09 	bl	800e62c <_malloc_r>
 800e01a:	6028      	str	r0, [r5, #0]
 800e01c:	6128      	str	r0, [r5, #16]
 800e01e:	b920      	cbnz	r0, 800e02a <_svfiprintf_r+0x2e>
 800e020:	230c      	movs	r3, #12
 800e022:	603b      	str	r3, [r7, #0]
 800e024:	f04f 30ff 	mov.w	r0, #4294967295
 800e028:	e0d1      	b.n	800e1ce <_svfiprintf_r+0x1d2>
 800e02a:	2340      	movs	r3, #64	; 0x40
 800e02c:	616b      	str	r3, [r5, #20]
 800e02e:	2300      	movs	r3, #0
 800e030:	9309      	str	r3, [sp, #36]	; 0x24
 800e032:	2320      	movs	r3, #32
 800e034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e038:	2330      	movs	r3, #48	; 0x30
 800e03a:	f04f 0901 	mov.w	r9, #1
 800e03e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e042:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e1e8 <_svfiprintf_r+0x1ec>
 800e046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e04a:	4623      	mov	r3, r4
 800e04c:	469a      	mov	sl, r3
 800e04e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e052:	b10a      	cbz	r2, 800e058 <_svfiprintf_r+0x5c>
 800e054:	2a25      	cmp	r2, #37	; 0x25
 800e056:	d1f9      	bne.n	800e04c <_svfiprintf_r+0x50>
 800e058:	ebba 0b04 	subs.w	fp, sl, r4
 800e05c:	d00b      	beq.n	800e076 <_svfiprintf_r+0x7a>
 800e05e:	465b      	mov	r3, fp
 800e060:	4622      	mov	r2, r4
 800e062:	4629      	mov	r1, r5
 800e064:	4638      	mov	r0, r7
 800e066:	f7ff ff6d 	bl	800df44 <__ssputs_r>
 800e06a:	3001      	adds	r0, #1
 800e06c:	f000 80aa 	beq.w	800e1c4 <_svfiprintf_r+0x1c8>
 800e070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e072:	445a      	add	r2, fp
 800e074:	9209      	str	r2, [sp, #36]	; 0x24
 800e076:	f89a 3000 	ldrb.w	r3, [sl]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 80a2 	beq.w	800e1c4 <_svfiprintf_r+0x1c8>
 800e080:	2300      	movs	r3, #0
 800e082:	f04f 32ff 	mov.w	r2, #4294967295
 800e086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e08a:	f10a 0a01 	add.w	sl, sl, #1
 800e08e:	9304      	str	r3, [sp, #16]
 800e090:	9307      	str	r3, [sp, #28]
 800e092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e096:	931a      	str	r3, [sp, #104]	; 0x68
 800e098:	4654      	mov	r4, sl
 800e09a:	2205      	movs	r2, #5
 800e09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a0:	4851      	ldr	r0, [pc, #324]	; (800e1e8 <_svfiprintf_r+0x1ec>)
 800e0a2:	f000 fa41 	bl	800e528 <memchr>
 800e0a6:	9a04      	ldr	r2, [sp, #16]
 800e0a8:	b9d8      	cbnz	r0, 800e0e2 <_svfiprintf_r+0xe6>
 800e0aa:	06d0      	lsls	r0, r2, #27
 800e0ac:	bf44      	itt	mi
 800e0ae:	2320      	movmi	r3, #32
 800e0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0b4:	0711      	lsls	r1, r2, #28
 800e0b6:	bf44      	itt	mi
 800e0b8:	232b      	movmi	r3, #43	; 0x2b
 800e0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0be:	f89a 3000 	ldrb.w	r3, [sl]
 800e0c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e0c4:	d015      	beq.n	800e0f2 <_svfiprintf_r+0xf6>
 800e0c6:	4654      	mov	r4, sl
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	f04f 0c0a 	mov.w	ip, #10
 800e0ce:	9a07      	ldr	r2, [sp, #28]
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0d6:	3b30      	subs	r3, #48	; 0x30
 800e0d8:	2b09      	cmp	r3, #9
 800e0da:	d94e      	bls.n	800e17a <_svfiprintf_r+0x17e>
 800e0dc:	b1b0      	cbz	r0, 800e10c <_svfiprintf_r+0x110>
 800e0de:	9207      	str	r2, [sp, #28]
 800e0e0:	e014      	b.n	800e10c <_svfiprintf_r+0x110>
 800e0e2:	eba0 0308 	sub.w	r3, r0, r8
 800e0e6:	fa09 f303 	lsl.w	r3, r9, r3
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	46a2      	mov	sl, r4
 800e0ee:	9304      	str	r3, [sp, #16]
 800e0f0:	e7d2      	b.n	800e098 <_svfiprintf_r+0x9c>
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	1d19      	adds	r1, r3, #4
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	9103      	str	r1, [sp, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	bfbb      	ittet	lt
 800e0fe:	425b      	neglt	r3, r3
 800e100:	f042 0202 	orrlt.w	r2, r2, #2
 800e104:	9307      	strge	r3, [sp, #28]
 800e106:	9307      	strlt	r3, [sp, #28]
 800e108:	bfb8      	it	lt
 800e10a:	9204      	strlt	r2, [sp, #16]
 800e10c:	7823      	ldrb	r3, [r4, #0]
 800e10e:	2b2e      	cmp	r3, #46	; 0x2e
 800e110:	d10c      	bne.n	800e12c <_svfiprintf_r+0x130>
 800e112:	7863      	ldrb	r3, [r4, #1]
 800e114:	2b2a      	cmp	r3, #42	; 0x2a
 800e116:	d135      	bne.n	800e184 <_svfiprintf_r+0x188>
 800e118:	9b03      	ldr	r3, [sp, #12]
 800e11a:	3402      	adds	r4, #2
 800e11c:	1d1a      	adds	r2, r3, #4
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	9203      	str	r2, [sp, #12]
 800e122:	2b00      	cmp	r3, #0
 800e124:	bfb8      	it	lt
 800e126:	f04f 33ff 	movlt.w	r3, #4294967295
 800e12a:	9305      	str	r3, [sp, #20]
 800e12c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1f8 <_svfiprintf_r+0x1fc>
 800e130:	2203      	movs	r2, #3
 800e132:	4650      	mov	r0, sl
 800e134:	7821      	ldrb	r1, [r4, #0]
 800e136:	f000 f9f7 	bl	800e528 <memchr>
 800e13a:	b140      	cbz	r0, 800e14e <_svfiprintf_r+0x152>
 800e13c:	2340      	movs	r3, #64	; 0x40
 800e13e:	eba0 000a 	sub.w	r0, r0, sl
 800e142:	fa03 f000 	lsl.w	r0, r3, r0
 800e146:	9b04      	ldr	r3, [sp, #16]
 800e148:	3401      	adds	r4, #1
 800e14a:	4303      	orrs	r3, r0
 800e14c:	9304      	str	r3, [sp, #16]
 800e14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e152:	2206      	movs	r2, #6
 800e154:	4825      	ldr	r0, [pc, #148]	; (800e1ec <_svfiprintf_r+0x1f0>)
 800e156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e15a:	f000 f9e5 	bl	800e528 <memchr>
 800e15e:	2800      	cmp	r0, #0
 800e160:	d038      	beq.n	800e1d4 <_svfiprintf_r+0x1d8>
 800e162:	4b23      	ldr	r3, [pc, #140]	; (800e1f0 <_svfiprintf_r+0x1f4>)
 800e164:	bb1b      	cbnz	r3, 800e1ae <_svfiprintf_r+0x1b2>
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	3307      	adds	r3, #7
 800e16a:	f023 0307 	bic.w	r3, r3, #7
 800e16e:	3308      	adds	r3, #8
 800e170:	9303      	str	r3, [sp, #12]
 800e172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e174:	4433      	add	r3, r6
 800e176:	9309      	str	r3, [sp, #36]	; 0x24
 800e178:	e767      	b.n	800e04a <_svfiprintf_r+0x4e>
 800e17a:	460c      	mov	r4, r1
 800e17c:	2001      	movs	r0, #1
 800e17e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e182:	e7a5      	b.n	800e0d0 <_svfiprintf_r+0xd4>
 800e184:	2300      	movs	r3, #0
 800e186:	f04f 0c0a 	mov.w	ip, #10
 800e18a:	4619      	mov	r1, r3
 800e18c:	3401      	adds	r4, #1
 800e18e:	9305      	str	r3, [sp, #20]
 800e190:	4620      	mov	r0, r4
 800e192:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e196:	3a30      	subs	r2, #48	; 0x30
 800e198:	2a09      	cmp	r2, #9
 800e19a:	d903      	bls.n	800e1a4 <_svfiprintf_r+0x1a8>
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d0c5      	beq.n	800e12c <_svfiprintf_r+0x130>
 800e1a0:	9105      	str	r1, [sp, #20]
 800e1a2:	e7c3      	b.n	800e12c <_svfiprintf_r+0x130>
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1ac:	e7f0      	b.n	800e190 <_svfiprintf_r+0x194>
 800e1ae:	ab03      	add	r3, sp, #12
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	462a      	mov	r2, r5
 800e1b4:	4638      	mov	r0, r7
 800e1b6:	4b0f      	ldr	r3, [pc, #60]	; (800e1f4 <_svfiprintf_r+0x1f8>)
 800e1b8:	a904      	add	r1, sp, #16
 800e1ba:	f3af 8000 	nop.w
 800e1be:	1c42      	adds	r2, r0, #1
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	d1d6      	bne.n	800e172 <_svfiprintf_r+0x176>
 800e1c4:	89ab      	ldrh	r3, [r5, #12]
 800e1c6:	065b      	lsls	r3, r3, #25
 800e1c8:	f53f af2c 	bmi.w	800e024 <_svfiprintf_r+0x28>
 800e1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1ce:	b01d      	add	sp, #116	; 0x74
 800e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d4:	ab03      	add	r3, sp, #12
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	462a      	mov	r2, r5
 800e1da:	4638      	mov	r0, r7
 800e1dc:	4b05      	ldr	r3, [pc, #20]	; (800e1f4 <_svfiprintf_r+0x1f8>)
 800e1de:	a904      	add	r1, sp, #16
 800e1e0:	f000 f87c 	bl	800e2dc <_printf_i>
 800e1e4:	e7eb      	b.n	800e1be <_svfiprintf_r+0x1c2>
 800e1e6:	bf00      	nop
 800e1e8:	0800ee50 	.word	0x0800ee50
 800e1ec:	0800ee5a 	.word	0x0800ee5a
 800e1f0:	00000000 	.word	0x00000000
 800e1f4:	0800df45 	.word	0x0800df45
 800e1f8:	0800ee56 	.word	0x0800ee56

0800e1fc <_printf_common>:
 800e1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e200:	4616      	mov	r6, r2
 800e202:	4699      	mov	r9, r3
 800e204:	688a      	ldr	r2, [r1, #8]
 800e206:	690b      	ldr	r3, [r1, #16]
 800e208:	4607      	mov	r7, r0
 800e20a:	4293      	cmp	r3, r2
 800e20c:	bfb8      	it	lt
 800e20e:	4613      	movlt	r3, r2
 800e210:	6033      	str	r3, [r6, #0]
 800e212:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e216:	460c      	mov	r4, r1
 800e218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e21c:	b10a      	cbz	r2, 800e222 <_printf_common+0x26>
 800e21e:	3301      	adds	r3, #1
 800e220:	6033      	str	r3, [r6, #0]
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	0699      	lsls	r1, r3, #26
 800e226:	bf42      	ittt	mi
 800e228:	6833      	ldrmi	r3, [r6, #0]
 800e22a:	3302      	addmi	r3, #2
 800e22c:	6033      	strmi	r3, [r6, #0]
 800e22e:	6825      	ldr	r5, [r4, #0]
 800e230:	f015 0506 	ands.w	r5, r5, #6
 800e234:	d106      	bne.n	800e244 <_printf_common+0x48>
 800e236:	f104 0a19 	add.w	sl, r4, #25
 800e23a:	68e3      	ldr	r3, [r4, #12]
 800e23c:	6832      	ldr	r2, [r6, #0]
 800e23e:	1a9b      	subs	r3, r3, r2
 800e240:	42ab      	cmp	r3, r5
 800e242:	dc28      	bgt.n	800e296 <_printf_common+0x9a>
 800e244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e248:	1e13      	subs	r3, r2, #0
 800e24a:	6822      	ldr	r2, [r4, #0]
 800e24c:	bf18      	it	ne
 800e24e:	2301      	movne	r3, #1
 800e250:	0692      	lsls	r2, r2, #26
 800e252:	d42d      	bmi.n	800e2b0 <_printf_common+0xb4>
 800e254:	4649      	mov	r1, r9
 800e256:	4638      	mov	r0, r7
 800e258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e25c:	47c0      	blx	r8
 800e25e:	3001      	adds	r0, #1
 800e260:	d020      	beq.n	800e2a4 <_printf_common+0xa8>
 800e262:	6823      	ldr	r3, [r4, #0]
 800e264:	68e5      	ldr	r5, [r4, #12]
 800e266:	f003 0306 	and.w	r3, r3, #6
 800e26a:	2b04      	cmp	r3, #4
 800e26c:	bf18      	it	ne
 800e26e:	2500      	movne	r5, #0
 800e270:	6832      	ldr	r2, [r6, #0]
 800e272:	f04f 0600 	mov.w	r6, #0
 800e276:	68a3      	ldr	r3, [r4, #8]
 800e278:	bf08      	it	eq
 800e27a:	1aad      	subeq	r5, r5, r2
 800e27c:	6922      	ldr	r2, [r4, #16]
 800e27e:	bf08      	it	eq
 800e280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e284:	4293      	cmp	r3, r2
 800e286:	bfc4      	itt	gt
 800e288:	1a9b      	subgt	r3, r3, r2
 800e28a:	18ed      	addgt	r5, r5, r3
 800e28c:	341a      	adds	r4, #26
 800e28e:	42b5      	cmp	r5, r6
 800e290:	d11a      	bne.n	800e2c8 <_printf_common+0xcc>
 800e292:	2000      	movs	r0, #0
 800e294:	e008      	b.n	800e2a8 <_printf_common+0xac>
 800e296:	2301      	movs	r3, #1
 800e298:	4652      	mov	r2, sl
 800e29a:	4649      	mov	r1, r9
 800e29c:	4638      	mov	r0, r7
 800e29e:	47c0      	blx	r8
 800e2a0:	3001      	adds	r0, #1
 800e2a2:	d103      	bne.n	800e2ac <_printf_common+0xb0>
 800e2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ac:	3501      	adds	r5, #1
 800e2ae:	e7c4      	b.n	800e23a <_printf_common+0x3e>
 800e2b0:	2030      	movs	r0, #48	; 0x30
 800e2b2:	18e1      	adds	r1, r4, r3
 800e2b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e2b8:	1c5a      	adds	r2, r3, #1
 800e2ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2be:	4422      	add	r2, r4
 800e2c0:	3302      	adds	r3, #2
 800e2c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2c6:	e7c5      	b.n	800e254 <_printf_common+0x58>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	4649      	mov	r1, r9
 800e2ce:	4638      	mov	r0, r7
 800e2d0:	47c0      	blx	r8
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	d0e6      	beq.n	800e2a4 <_printf_common+0xa8>
 800e2d6:	3601      	adds	r6, #1
 800e2d8:	e7d9      	b.n	800e28e <_printf_common+0x92>
	...

0800e2dc <_printf_i>:
 800e2dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	7e27      	ldrb	r7, [r4, #24]
 800e2e4:	4691      	mov	r9, r2
 800e2e6:	2f78      	cmp	r7, #120	; 0x78
 800e2e8:	4680      	mov	r8, r0
 800e2ea:	469a      	mov	sl, r3
 800e2ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2f2:	d807      	bhi.n	800e304 <_printf_i+0x28>
 800e2f4:	2f62      	cmp	r7, #98	; 0x62
 800e2f6:	d80a      	bhi.n	800e30e <_printf_i+0x32>
 800e2f8:	2f00      	cmp	r7, #0
 800e2fa:	f000 80d9 	beq.w	800e4b0 <_printf_i+0x1d4>
 800e2fe:	2f58      	cmp	r7, #88	; 0x58
 800e300:	f000 80a4 	beq.w	800e44c <_printf_i+0x170>
 800e304:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e30c:	e03a      	b.n	800e384 <_printf_i+0xa8>
 800e30e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e312:	2b15      	cmp	r3, #21
 800e314:	d8f6      	bhi.n	800e304 <_printf_i+0x28>
 800e316:	a001      	add	r0, pc, #4	; (adr r0, 800e31c <_printf_i+0x40>)
 800e318:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e31c:	0800e375 	.word	0x0800e375
 800e320:	0800e389 	.word	0x0800e389
 800e324:	0800e305 	.word	0x0800e305
 800e328:	0800e305 	.word	0x0800e305
 800e32c:	0800e305 	.word	0x0800e305
 800e330:	0800e305 	.word	0x0800e305
 800e334:	0800e389 	.word	0x0800e389
 800e338:	0800e305 	.word	0x0800e305
 800e33c:	0800e305 	.word	0x0800e305
 800e340:	0800e305 	.word	0x0800e305
 800e344:	0800e305 	.word	0x0800e305
 800e348:	0800e497 	.word	0x0800e497
 800e34c:	0800e3b9 	.word	0x0800e3b9
 800e350:	0800e479 	.word	0x0800e479
 800e354:	0800e305 	.word	0x0800e305
 800e358:	0800e305 	.word	0x0800e305
 800e35c:	0800e4b9 	.word	0x0800e4b9
 800e360:	0800e305 	.word	0x0800e305
 800e364:	0800e3b9 	.word	0x0800e3b9
 800e368:	0800e305 	.word	0x0800e305
 800e36c:	0800e305 	.word	0x0800e305
 800e370:	0800e481 	.word	0x0800e481
 800e374:	680b      	ldr	r3, [r1, #0]
 800e376:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e37a:	1d1a      	adds	r2, r3, #4
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	600a      	str	r2, [r1, #0]
 800e380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e384:	2301      	movs	r3, #1
 800e386:	e0a4      	b.n	800e4d2 <_printf_i+0x1f6>
 800e388:	6825      	ldr	r5, [r4, #0]
 800e38a:	6808      	ldr	r0, [r1, #0]
 800e38c:	062e      	lsls	r6, r5, #24
 800e38e:	f100 0304 	add.w	r3, r0, #4
 800e392:	d50a      	bpl.n	800e3aa <_printf_i+0xce>
 800e394:	6805      	ldr	r5, [r0, #0]
 800e396:	600b      	str	r3, [r1, #0]
 800e398:	2d00      	cmp	r5, #0
 800e39a:	da03      	bge.n	800e3a4 <_printf_i+0xc8>
 800e39c:	232d      	movs	r3, #45	; 0x2d
 800e39e:	426d      	negs	r5, r5
 800e3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3a4:	230a      	movs	r3, #10
 800e3a6:	485e      	ldr	r0, [pc, #376]	; (800e520 <_printf_i+0x244>)
 800e3a8:	e019      	b.n	800e3de <_printf_i+0x102>
 800e3aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e3ae:	6805      	ldr	r5, [r0, #0]
 800e3b0:	600b      	str	r3, [r1, #0]
 800e3b2:	bf18      	it	ne
 800e3b4:	b22d      	sxthne	r5, r5
 800e3b6:	e7ef      	b.n	800e398 <_printf_i+0xbc>
 800e3b8:	680b      	ldr	r3, [r1, #0]
 800e3ba:	6825      	ldr	r5, [r4, #0]
 800e3bc:	1d18      	adds	r0, r3, #4
 800e3be:	6008      	str	r0, [r1, #0]
 800e3c0:	0628      	lsls	r0, r5, #24
 800e3c2:	d501      	bpl.n	800e3c8 <_printf_i+0xec>
 800e3c4:	681d      	ldr	r5, [r3, #0]
 800e3c6:	e002      	b.n	800e3ce <_printf_i+0xf2>
 800e3c8:	0669      	lsls	r1, r5, #25
 800e3ca:	d5fb      	bpl.n	800e3c4 <_printf_i+0xe8>
 800e3cc:	881d      	ldrh	r5, [r3, #0]
 800e3ce:	2f6f      	cmp	r7, #111	; 0x6f
 800e3d0:	bf0c      	ite	eq
 800e3d2:	2308      	moveq	r3, #8
 800e3d4:	230a      	movne	r3, #10
 800e3d6:	4852      	ldr	r0, [pc, #328]	; (800e520 <_printf_i+0x244>)
 800e3d8:	2100      	movs	r1, #0
 800e3da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3de:	6866      	ldr	r6, [r4, #4]
 800e3e0:	2e00      	cmp	r6, #0
 800e3e2:	bfa8      	it	ge
 800e3e4:	6821      	ldrge	r1, [r4, #0]
 800e3e6:	60a6      	str	r6, [r4, #8]
 800e3e8:	bfa4      	itt	ge
 800e3ea:	f021 0104 	bicge.w	r1, r1, #4
 800e3ee:	6021      	strge	r1, [r4, #0]
 800e3f0:	b90d      	cbnz	r5, 800e3f6 <_printf_i+0x11a>
 800e3f2:	2e00      	cmp	r6, #0
 800e3f4:	d04d      	beq.n	800e492 <_printf_i+0x1b6>
 800e3f6:	4616      	mov	r6, r2
 800e3f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3fc:	fb03 5711 	mls	r7, r3, r1, r5
 800e400:	5dc7      	ldrb	r7, [r0, r7]
 800e402:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e406:	462f      	mov	r7, r5
 800e408:	42bb      	cmp	r3, r7
 800e40a:	460d      	mov	r5, r1
 800e40c:	d9f4      	bls.n	800e3f8 <_printf_i+0x11c>
 800e40e:	2b08      	cmp	r3, #8
 800e410:	d10b      	bne.n	800e42a <_printf_i+0x14e>
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	07df      	lsls	r7, r3, #31
 800e416:	d508      	bpl.n	800e42a <_printf_i+0x14e>
 800e418:	6923      	ldr	r3, [r4, #16]
 800e41a:	6861      	ldr	r1, [r4, #4]
 800e41c:	4299      	cmp	r1, r3
 800e41e:	bfde      	ittt	le
 800e420:	2330      	movle	r3, #48	; 0x30
 800e422:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e426:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e42a:	1b92      	subs	r2, r2, r6
 800e42c:	6122      	str	r2, [r4, #16]
 800e42e:	464b      	mov	r3, r9
 800e430:	4621      	mov	r1, r4
 800e432:	4640      	mov	r0, r8
 800e434:	f8cd a000 	str.w	sl, [sp]
 800e438:	aa03      	add	r2, sp, #12
 800e43a:	f7ff fedf 	bl	800e1fc <_printf_common>
 800e43e:	3001      	adds	r0, #1
 800e440:	d14c      	bne.n	800e4dc <_printf_i+0x200>
 800e442:	f04f 30ff 	mov.w	r0, #4294967295
 800e446:	b004      	add	sp, #16
 800e448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44c:	4834      	ldr	r0, [pc, #208]	; (800e520 <_printf_i+0x244>)
 800e44e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e452:	680e      	ldr	r6, [r1, #0]
 800e454:	6823      	ldr	r3, [r4, #0]
 800e456:	f856 5b04 	ldr.w	r5, [r6], #4
 800e45a:	061f      	lsls	r7, r3, #24
 800e45c:	600e      	str	r6, [r1, #0]
 800e45e:	d514      	bpl.n	800e48a <_printf_i+0x1ae>
 800e460:	07d9      	lsls	r1, r3, #31
 800e462:	bf44      	itt	mi
 800e464:	f043 0320 	orrmi.w	r3, r3, #32
 800e468:	6023      	strmi	r3, [r4, #0]
 800e46a:	b91d      	cbnz	r5, 800e474 <_printf_i+0x198>
 800e46c:	6823      	ldr	r3, [r4, #0]
 800e46e:	f023 0320 	bic.w	r3, r3, #32
 800e472:	6023      	str	r3, [r4, #0]
 800e474:	2310      	movs	r3, #16
 800e476:	e7af      	b.n	800e3d8 <_printf_i+0xfc>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	f043 0320 	orr.w	r3, r3, #32
 800e47e:	6023      	str	r3, [r4, #0]
 800e480:	2378      	movs	r3, #120	; 0x78
 800e482:	4828      	ldr	r0, [pc, #160]	; (800e524 <_printf_i+0x248>)
 800e484:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e488:	e7e3      	b.n	800e452 <_printf_i+0x176>
 800e48a:	065e      	lsls	r6, r3, #25
 800e48c:	bf48      	it	mi
 800e48e:	b2ad      	uxthmi	r5, r5
 800e490:	e7e6      	b.n	800e460 <_printf_i+0x184>
 800e492:	4616      	mov	r6, r2
 800e494:	e7bb      	b.n	800e40e <_printf_i+0x132>
 800e496:	680b      	ldr	r3, [r1, #0]
 800e498:	6826      	ldr	r6, [r4, #0]
 800e49a:	1d1d      	adds	r5, r3, #4
 800e49c:	6960      	ldr	r0, [r4, #20]
 800e49e:	600d      	str	r5, [r1, #0]
 800e4a0:	0635      	lsls	r5, r6, #24
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	d501      	bpl.n	800e4aa <_printf_i+0x1ce>
 800e4a6:	6018      	str	r0, [r3, #0]
 800e4a8:	e002      	b.n	800e4b0 <_printf_i+0x1d4>
 800e4aa:	0671      	lsls	r1, r6, #25
 800e4ac:	d5fb      	bpl.n	800e4a6 <_printf_i+0x1ca>
 800e4ae:	8018      	strh	r0, [r3, #0]
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	4616      	mov	r6, r2
 800e4b4:	6123      	str	r3, [r4, #16]
 800e4b6:	e7ba      	b.n	800e42e <_printf_i+0x152>
 800e4b8:	680b      	ldr	r3, [r1, #0]
 800e4ba:	1d1a      	adds	r2, r3, #4
 800e4bc:	600a      	str	r2, [r1, #0]
 800e4be:	681e      	ldr	r6, [r3, #0]
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	6862      	ldr	r2, [r4, #4]
 800e4c6:	f000 f82f 	bl	800e528 <memchr>
 800e4ca:	b108      	cbz	r0, 800e4d0 <_printf_i+0x1f4>
 800e4cc:	1b80      	subs	r0, r0, r6
 800e4ce:	6060      	str	r0, [r4, #4]
 800e4d0:	6863      	ldr	r3, [r4, #4]
 800e4d2:	6123      	str	r3, [r4, #16]
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4da:	e7a8      	b.n	800e42e <_printf_i+0x152>
 800e4dc:	4632      	mov	r2, r6
 800e4de:	4649      	mov	r1, r9
 800e4e0:	4640      	mov	r0, r8
 800e4e2:	6923      	ldr	r3, [r4, #16]
 800e4e4:	47d0      	blx	sl
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	d0ab      	beq.n	800e442 <_printf_i+0x166>
 800e4ea:	6823      	ldr	r3, [r4, #0]
 800e4ec:	079b      	lsls	r3, r3, #30
 800e4ee:	d413      	bmi.n	800e518 <_printf_i+0x23c>
 800e4f0:	68e0      	ldr	r0, [r4, #12]
 800e4f2:	9b03      	ldr	r3, [sp, #12]
 800e4f4:	4298      	cmp	r0, r3
 800e4f6:	bfb8      	it	lt
 800e4f8:	4618      	movlt	r0, r3
 800e4fa:	e7a4      	b.n	800e446 <_printf_i+0x16a>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	4632      	mov	r2, r6
 800e500:	4649      	mov	r1, r9
 800e502:	4640      	mov	r0, r8
 800e504:	47d0      	blx	sl
 800e506:	3001      	adds	r0, #1
 800e508:	d09b      	beq.n	800e442 <_printf_i+0x166>
 800e50a:	3501      	adds	r5, #1
 800e50c:	68e3      	ldr	r3, [r4, #12]
 800e50e:	9903      	ldr	r1, [sp, #12]
 800e510:	1a5b      	subs	r3, r3, r1
 800e512:	42ab      	cmp	r3, r5
 800e514:	dcf2      	bgt.n	800e4fc <_printf_i+0x220>
 800e516:	e7eb      	b.n	800e4f0 <_printf_i+0x214>
 800e518:	2500      	movs	r5, #0
 800e51a:	f104 0619 	add.w	r6, r4, #25
 800e51e:	e7f5      	b.n	800e50c <_printf_i+0x230>
 800e520:	0800ee61 	.word	0x0800ee61
 800e524:	0800ee72 	.word	0x0800ee72

0800e528 <memchr>:
 800e528:	4603      	mov	r3, r0
 800e52a:	b510      	push	{r4, lr}
 800e52c:	b2c9      	uxtb	r1, r1
 800e52e:	4402      	add	r2, r0
 800e530:	4293      	cmp	r3, r2
 800e532:	4618      	mov	r0, r3
 800e534:	d101      	bne.n	800e53a <memchr+0x12>
 800e536:	2000      	movs	r0, #0
 800e538:	e003      	b.n	800e542 <memchr+0x1a>
 800e53a:	7804      	ldrb	r4, [r0, #0]
 800e53c:	3301      	adds	r3, #1
 800e53e:	428c      	cmp	r4, r1
 800e540:	d1f6      	bne.n	800e530 <memchr+0x8>
 800e542:	bd10      	pop	{r4, pc}

0800e544 <memcpy>:
 800e544:	440a      	add	r2, r1
 800e546:	4291      	cmp	r1, r2
 800e548:	f100 33ff 	add.w	r3, r0, #4294967295
 800e54c:	d100      	bne.n	800e550 <memcpy+0xc>
 800e54e:	4770      	bx	lr
 800e550:	b510      	push	{r4, lr}
 800e552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e556:	4291      	cmp	r1, r2
 800e558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e55c:	d1f9      	bne.n	800e552 <memcpy+0xe>
 800e55e:	bd10      	pop	{r4, pc}

0800e560 <memmove>:
 800e560:	4288      	cmp	r0, r1
 800e562:	b510      	push	{r4, lr}
 800e564:	eb01 0402 	add.w	r4, r1, r2
 800e568:	d902      	bls.n	800e570 <memmove+0x10>
 800e56a:	4284      	cmp	r4, r0
 800e56c:	4623      	mov	r3, r4
 800e56e:	d807      	bhi.n	800e580 <memmove+0x20>
 800e570:	1e43      	subs	r3, r0, #1
 800e572:	42a1      	cmp	r1, r4
 800e574:	d008      	beq.n	800e588 <memmove+0x28>
 800e576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e57a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e57e:	e7f8      	b.n	800e572 <memmove+0x12>
 800e580:	4601      	mov	r1, r0
 800e582:	4402      	add	r2, r0
 800e584:	428a      	cmp	r2, r1
 800e586:	d100      	bne.n	800e58a <memmove+0x2a>
 800e588:	bd10      	pop	{r4, pc}
 800e58a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e58e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e592:	e7f7      	b.n	800e584 <memmove+0x24>

0800e594 <_free_r>:
 800e594:	b538      	push	{r3, r4, r5, lr}
 800e596:	4605      	mov	r5, r0
 800e598:	2900      	cmp	r1, #0
 800e59a:	d043      	beq.n	800e624 <_free_r+0x90>
 800e59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5a0:	1f0c      	subs	r4, r1, #4
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	bfb8      	it	lt
 800e5a6:	18e4      	addlt	r4, r4, r3
 800e5a8:	f000 f8d0 	bl	800e74c <__malloc_lock>
 800e5ac:	4a1e      	ldr	r2, [pc, #120]	; (800e628 <_free_r+0x94>)
 800e5ae:	6813      	ldr	r3, [r2, #0]
 800e5b0:	4610      	mov	r0, r2
 800e5b2:	b933      	cbnz	r3, 800e5c2 <_free_r+0x2e>
 800e5b4:	6063      	str	r3, [r4, #4]
 800e5b6:	6014      	str	r4, [r2, #0]
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5be:	f000 b8cb 	b.w	800e758 <__malloc_unlock>
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	d90a      	bls.n	800e5dc <_free_r+0x48>
 800e5c6:	6821      	ldr	r1, [r4, #0]
 800e5c8:	1862      	adds	r2, r4, r1
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	bf01      	itttt	eq
 800e5ce:	681a      	ldreq	r2, [r3, #0]
 800e5d0:	685b      	ldreq	r3, [r3, #4]
 800e5d2:	1852      	addeq	r2, r2, r1
 800e5d4:	6022      	streq	r2, [r4, #0]
 800e5d6:	6063      	str	r3, [r4, #4]
 800e5d8:	6004      	str	r4, [r0, #0]
 800e5da:	e7ed      	b.n	800e5b8 <_free_r+0x24>
 800e5dc:	461a      	mov	r2, r3
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	b10b      	cbz	r3, 800e5e6 <_free_r+0x52>
 800e5e2:	42a3      	cmp	r3, r4
 800e5e4:	d9fa      	bls.n	800e5dc <_free_r+0x48>
 800e5e6:	6811      	ldr	r1, [r2, #0]
 800e5e8:	1850      	adds	r0, r2, r1
 800e5ea:	42a0      	cmp	r0, r4
 800e5ec:	d10b      	bne.n	800e606 <_free_r+0x72>
 800e5ee:	6820      	ldr	r0, [r4, #0]
 800e5f0:	4401      	add	r1, r0
 800e5f2:	1850      	adds	r0, r2, r1
 800e5f4:	4283      	cmp	r3, r0
 800e5f6:	6011      	str	r1, [r2, #0]
 800e5f8:	d1de      	bne.n	800e5b8 <_free_r+0x24>
 800e5fa:	6818      	ldr	r0, [r3, #0]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	4401      	add	r1, r0
 800e600:	6011      	str	r1, [r2, #0]
 800e602:	6053      	str	r3, [r2, #4]
 800e604:	e7d8      	b.n	800e5b8 <_free_r+0x24>
 800e606:	d902      	bls.n	800e60e <_free_r+0x7a>
 800e608:	230c      	movs	r3, #12
 800e60a:	602b      	str	r3, [r5, #0]
 800e60c:	e7d4      	b.n	800e5b8 <_free_r+0x24>
 800e60e:	6820      	ldr	r0, [r4, #0]
 800e610:	1821      	adds	r1, r4, r0
 800e612:	428b      	cmp	r3, r1
 800e614:	bf01      	itttt	eq
 800e616:	6819      	ldreq	r1, [r3, #0]
 800e618:	685b      	ldreq	r3, [r3, #4]
 800e61a:	1809      	addeq	r1, r1, r0
 800e61c:	6021      	streq	r1, [r4, #0]
 800e61e:	6063      	str	r3, [r4, #4]
 800e620:	6054      	str	r4, [r2, #4]
 800e622:	e7c9      	b.n	800e5b8 <_free_r+0x24>
 800e624:	bd38      	pop	{r3, r4, r5, pc}
 800e626:	bf00      	nop
 800e628:	200002d8 	.word	0x200002d8

0800e62c <_malloc_r>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	1ccd      	adds	r5, r1, #3
 800e630:	f025 0503 	bic.w	r5, r5, #3
 800e634:	3508      	adds	r5, #8
 800e636:	2d0c      	cmp	r5, #12
 800e638:	bf38      	it	cc
 800e63a:	250c      	movcc	r5, #12
 800e63c:	2d00      	cmp	r5, #0
 800e63e:	4606      	mov	r6, r0
 800e640:	db01      	blt.n	800e646 <_malloc_r+0x1a>
 800e642:	42a9      	cmp	r1, r5
 800e644:	d903      	bls.n	800e64e <_malloc_r+0x22>
 800e646:	230c      	movs	r3, #12
 800e648:	6033      	str	r3, [r6, #0]
 800e64a:	2000      	movs	r0, #0
 800e64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e64e:	f000 f87d 	bl	800e74c <__malloc_lock>
 800e652:	4921      	ldr	r1, [pc, #132]	; (800e6d8 <_malloc_r+0xac>)
 800e654:	680a      	ldr	r2, [r1, #0]
 800e656:	4614      	mov	r4, r2
 800e658:	b99c      	cbnz	r4, 800e682 <_malloc_r+0x56>
 800e65a:	4f20      	ldr	r7, [pc, #128]	; (800e6dc <_malloc_r+0xb0>)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	b923      	cbnz	r3, 800e66a <_malloc_r+0x3e>
 800e660:	4621      	mov	r1, r4
 800e662:	4630      	mov	r0, r6
 800e664:	f000 f862 	bl	800e72c <_sbrk_r>
 800e668:	6038      	str	r0, [r7, #0]
 800e66a:	4629      	mov	r1, r5
 800e66c:	4630      	mov	r0, r6
 800e66e:	f000 f85d 	bl	800e72c <_sbrk_r>
 800e672:	1c43      	adds	r3, r0, #1
 800e674:	d123      	bne.n	800e6be <_malloc_r+0x92>
 800e676:	230c      	movs	r3, #12
 800e678:	4630      	mov	r0, r6
 800e67a:	6033      	str	r3, [r6, #0]
 800e67c:	f000 f86c 	bl	800e758 <__malloc_unlock>
 800e680:	e7e3      	b.n	800e64a <_malloc_r+0x1e>
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	1b5b      	subs	r3, r3, r5
 800e686:	d417      	bmi.n	800e6b8 <_malloc_r+0x8c>
 800e688:	2b0b      	cmp	r3, #11
 800e68a:	d903      	bls.n	800e694 <_malloc_r+0x68>
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	441c      	add	r4, r3
 800e690:	6025      	str	r5, [r4, #0]
 800e692:	e004      	b.n	800e69e <_malloc_r+0x72>
 800e694:	6863      	ldr	r3, [r4, #4]
 800e696:	42a2      	cmp	r2, r4
 800e698:	bf0c      	ite	eq
 800e69a:	600b      	streq	r3, [r1, #0]
 800e69c:	6053      	strne	r3, [r2, #4]
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f000 f85a 	bl	800e758 <__malloc_unlock>
 800e6a4:	f104 000b 	add.w	r0, r4, #11
 800e6a8:	1d23      	adds	r3, r4, #4
 800e6aa:	f020 0007 	bic.w	r0, r0, #7
 800e6ae:	1ac2      	subs	r2, r0, r3
 800e6b0:	d0cc      	beq.n	800e64c <_malloc_r+0x20>
 800e6b2:	1a1b      	subs	r3, r3, r0
 800e6b4:	50a3      	str	r3, [r4, r2]
 800e6b6:	e7c9      	b.n	800e64c <_malloc_r+0x20>
 800e6b8:	4622      	mov	r2, r4
 800e6ba:	6864      	ldr	r4, [r4, #4]
 800e6bc:	e7cc      	b.n	800e658 <_malloc_r+0x2c>
 800e6be:	1cc4      	adds	r4, r0, #3
 800e6c0:	f024 0403 	bic.w	r4, r4, #3
 800e6c4:	42a0      	cmp	r0, r4
 800e6c6:	d0e3      	beq.n	800e690 <_malloc_r+0x64>
 800e6c8:	1a21      	subs	r1, r4, r0
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f000 f82e 	bl	800e72c <_sbrk_r>
 800e6d0:	3001      	adds	r0, #1
 800e6d2:	d1dd      	bne.n	800e690 <_malloc_r+0x64>
 800e6d4:	e7cf      	b.n	800e676 <_malloc_r+0x4a>
 800e6d6:	bf00      	nop
 800e6d8:	200002d8 	.word	0x200002d8
 800e6dc:	200002dc 	.word	0x200002dc

0800e6e0 <_realloc_r>:
 800e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e2:	4607      	mov	r7, r0
 800e6e4:	4614      	mov	r4, r2
 800e6e6:	460e      	mov	r6, r1
 800e6e8:	b921      	cbnz	r1, 800e6f4 <_realloc_r+0x14>
 800e6ea:	4611      	mov	r1, r2
 800e6ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e6f0:	f7ff bf9c 	b.w	800e62c <_malloc_r>
 800e6f4:	b922      	cbnz	r2, 800e700 <_realloc_r+0x20>
 800e6f6:	f7ff ff4d 	bl	800e594 <_free_r>
 800e6fa:	4625      	mov	r5, r4
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e700:	f000 f830 	bl	800e764 <_malloc_usable_size_r>
 800e704:	42a0      	cmp	r0, r4
 800e706:	d20f      	bcs.n	800e728 <_realloc_r+0x48>
 800e708:	4621      	mov	r1, r4
 800e70a:	4638      	mov	r0, r7
 800e70c:	f7ff ff8e 	bl	800e62c <_malloc_r>
 800e710:	4605      	mov	r5, r0
 800e712:	2800      	cmp	r0, #0
 800e714:	d0f2      	beq.n	800e6fc <_realloc_r+0x1c>
 800e716:	4631      	mov	r1, r6
 800e718:	4622      	mov	r2, r4
 800e71a:	f7ff ff13 	bl	800e544 <memcpy>
 800e71e:	4631      	mov	r1, r6
 800e720:	4638      	mov	r0, r7
 800e722:	f7ff ff37 	bl	800e594 <_free_r>
 800e726:	e7e9      	b.n	800e6fc <_realloc_r+0x1c>
 800e728:	4635      	mov	r5, r6
 800e72a:	e7e7      	b.n	800e6fc <_realloc_r+0x1c>

0800e72c <_sbrk_r>:
 800e72c:	b538      	push	{r3, r4, r5, lr}
 800e72e:	2300      	movs	r3, #0
 800e730:	4d05      	ldr	r5, [pc, #20]	; (800e748 <_sbrk_r+0x1c>)
 800e732:	4604      	mov	r4, r0
 800e734:	4608      	mov	r0, r1
 800e736:	602b      	str	r3, [r5, #0]
 800e738:	f7f4 ff3c 	bl	80035b4 <_sbrk>
 800e73c:	1c43      	adds	r3, r0, #1
 800e73e:	d102      	bne.n	800e746 <_sbrk_r+0x1a>
 800e740:	682b      	ldr	r3, [r5, #0]
 800e742:	b103      	cbz	r3, 800e746 <_sbrk_r+0x1a>
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	bd38      	pop	{r3, r4, r5, pc}
 800e748:	20001258 	.word	0x20001258

0800e74c <__malloc_lock>:
 800e74c:	4801      	ldr	r0, [pc, #4]	; (800e754 <__malloc_lock+0x8>)
 800e74e:	f000 b811 	b.w	800e774 <__retarget_lock_acquire_recursive>
 800e752:	bf00      	nop
 800e754:	20001260 	.word	0x20001260

0800e758 <__malloc_unlock>:
 800e758:	4801      	ldr	r0, [pc, #4]	; (800e760 <__malloc_unlock+0x8>)
 800e75a:	f000 b80c 	b.w	800e776 <__retarget_lock_release_recursive>
 800e75e:	bf00      	nop
 800e760:	20001260 	.word	0x20001260

0800e764 <_malloc_usable_size_r>:
 800e764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e768:	1f18      	subs	r0, r3, #4
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	bfbc      	itt	lt
 800e76e:	580b      	ldrlt	r3, [r1, r0]
 800e770:	18c0      	addlt	r0, r0, r3
 800e772:	4770      	bx	lr

0800e774 <__retarget_lock_acquire_recursive>:
 800e774:	4770      	bx	lr

0800e776 <__retarget_lock_release_recursive>:
 800e776:	4770      	bx	lr

0800e778 <_init>:
 800e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77a:	bf00      	nop
 800e77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e77e:	bc08      	pop	{r3}
 800e780:	469e      	mov	lr, r3
 800e782:	4770      	bx	lr

0800e784 <_fini>:
 800e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e786:	bf00      	nop
 800e788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e78a:	bc08      	pop	{r3}
 800e78c:	469e      	mov	lr, r3
 800e78e:	4770      	bx	lr
